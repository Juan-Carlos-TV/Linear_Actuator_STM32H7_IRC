
Linear_Actuator_Project_IRC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a674  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  0800a914  0800a914  0001a914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aad8  0800aad8  00020138  2**0
                  CONTENTS
  4 .ARM          00000008  0800aad8  0800aad8  0001aad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aae0  0800aae0  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aae0  0800aae0  0001aae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aae4  0800aae4  0001aae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  0800aae8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000078  0800ab60  00020078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000d8  0800abc0  000200d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00004fd8  24000138  0800ac20  00020138  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24005110  0800ac20  00025110  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 14 .debug_info   00034b6b  00000000  00000000  00020166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005165  00000000  00000000  00054cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001dd0  00000000  00000000  00059e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001c48  00000000  00000000  0005bc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003cca5  00000000  00000000  0005d850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00021027  00000000  00000000  0009a4f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00194ee0  00000000  00000000  000bb51c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  002503fc  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000083f8  00000000  00000000  00250450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000138 	.word	0x24000138
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a8fc 	.word	0x0800a8fc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400013c 	.word	0x2400013c
 80002dc:	0800a8fc 	.word	0x0800a8fc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800067c:	4b3f      	ldr	r3, [pc, #252]	; (800077c <SystemInit+0x104>)
 800067e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000682:	4a3e      	ldr	r2, [pc, #248]	; (800077c <SystemInit+0x104>)
 8000684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800068c:	4b3b      	ldr	r3, [pc, #236]	; (800077c <SystemInit+0x104>)
 800068e:	691b      	ldr	r3, [r3, #16]
 8000690:	4a3a      	ldr	r2, [pc, #232]	; (800077c <SystemInit+0x104>)
 8000692:	f043 0310 	orr.w	r3, r3, #16
 8000696:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0x108>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f003 030f 	and.w	r3, r3, #15
 80006a0:	2b06      	cmp	r3, #6
 80006a2:	d807      	bhi.n	80006b4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006a4:	4b36      	ldr	r3, [pc, #216]	; (8000780 <SystemInit+0x108>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f023 030f 	bic.w	r3, r3, #15
 80006ac:	4a34      	ldr	r2, [pc, #208]	; (8000780 <SystemInit+0x108>)
 80006ae:	f043 0307 	orr.w	r3, r3, #7
 80006b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b4:	4b33      	ldr	r3, [pc, #204]	; (8000784 <SystemInit+0x10c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x10c>)
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c0:	4b30      	ldr	r3, [pc, #192]	; (8000784 <SystemInit+0x10c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006c6:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <SystemInit+0x10c>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	492e      	ldr	r1, [pc, #184]	; (8000784 <SystemInit+0x10c>)
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x110>)
 80006ce:	4013      	ands	r3, r2
 80006d0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d2:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <SystemInit+0x108>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f003 0308 	and.w	r3, r3, #8
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d007      	beq.n	80006ee <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006de:	4b28      	ldr	r3, [pc, #160]	; (8000780 <SystemInit+0x108>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f023 030f 	bic.w	r3, r3, #15
 80006e6:	4a26      	ldr	r2, [pc, #152]	; (8000780 <SystemInit+0x108>)
 80006e8:	f043 0307 	orr.w	r3, r3, #7
 80006ec:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <SystemInit+0x10c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <SystemInit+0x10c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <SystemInit+0x10c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <SystemInit+0x10c>)
 8000702:	4a22      	ldr	r2, [pc, #136]	; (800078c <SystemInit+0x114>)
 8000704:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <SystemInit+0x10c>)
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <SystemInit+0x118>)
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <SystemInit+0x10c>)
 800070e:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemInit+0x11c>)
 8000710:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <SystemInit+0x10c>)
 8000714:	2200      	movs	r2, #0
 8000716:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <SystemInit+0x10c>)
 800071a:	4a1e      	ldr	r2, [pc, #120]	; (8000794 <SystemInit+0x11c>)
 800071c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <SystemInit+0x10c>)
 8000720:	2200      	movs	r2, #0
 8000722:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <SystemInit+0x10c>)
 8000726:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <SystemInit+0x11c>)
 8000728:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <SystemInit+0x10c>)
 800072c:	2200      	movs	r2, #0
 800072e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <SystemInit+0x10c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a13      	ldr	r2, [pc, #76]	; (8000784 <SystemInit+0x10c>)
 8000736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800073a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <SystemInit+0x10c>)
 800073e:	2200      	movs	r2, #0
 8000740:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x120>)
 8000744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000746:	4a14      	ldr	r2, [pc, #80]	; (8000798 <SystemInit+0x120>)
 8000748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x124>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <SystemInit+0x128>)
 8000754:	4013      	ands	r3, r2
 8000756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800075a:	d202      	bcs.n	8000762 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x12c>)
 800075e:	2201      	movs	r2, #1
 8000760:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <SystemInit+0x130>)
 8000764:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000768:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800076a:	4b04      	ldr	r3, [pc, #16]	; (800077c <SystemInit+0x104>)
 800076c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000770:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007b6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007b8:	bf00      	nop
 80007ba:	4b3f      	ldr	r3, [pc, #252]	; (80008b8 <main+0x10c>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d004      	beq.n	80007d0 <main+0x24>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	1e5a      	subs	r2, r3, #1
 80007ca:	607a      	str	r2, [r7, #4]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	dcf4      	bgt.n	80007ba <main+0xe>
  if ( timeout < 0 )
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	da01      	bge.n	80007da <main+0x2e>
  {
  Error_Handler();
 80007d6:	f000 fb35 	bl	8000e44 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007da:	f000 fe8f 	bl	80014fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007de:	f000 f88b 	bl	80008f8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007e2:	4b35      	ldr	r3, [pc, #212]	; (80008b8 <main+0x10c>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e8:	4a33      	ldr	r2, [pc, #204]	; (80008b8 <main+0x10c>)
 80007ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f2:	4b31      	ldr	r3, [pc, #196]	; (80008b8 <main+0x10c>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000800:	2000      	movs	r0, #0
 8000802:	f001 fe27 	bl	8002454 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000806:	2100      	movs	r1, #0
 8000808:	2000      	movs	r0, #0
 800080a:	f001 fe3d 	bl	8002488 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800080e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000812:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000814:	bf00      	nop
 8000816:	4b28      	ldr	r3, [pc, #160]	; (80008b8 <main+0x10c>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800081e:	2b00      	cmp	r3, #0
 8000820:	d104      	bne.n	800082c <main+0x80>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	1e5a      	subs	r2, r3, #1
 8000826:	607a      	str	r2, [r7, #4]
 8000828:	2b00      	cmp	r3, #0
 800082a:	dcf4      	bgt.n	8000816 <main+0x6a>
if ( timeout < 0 )
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	da01      	bge.n	8000836 <main+0x8a>
{
Error_Handler();
 8000832:	f000 fb07 	bl	8000e44 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000836:	f000 fa67 	bl	8000d08 <MX_GPIO_Init>
  MX_ETH_Init();
 800083a:	f000 f8e1 	bl	8000a00 <MX_ETH_Init>
  MX_TIM2_Init();
 800083e:	f000 f92b 	bl	8000a98 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000842:	f000 f97d 	bl	8000b40 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000846:	f000 f9e1 	bl	8000c0c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800084a:	f000 fa2b 	bl	8000ca4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800084e:	f006 fdf5 	bl	800743c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of positionQueue */
  positionQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &positionQueue_attributes);
 8000852:	4a1a      	ldr	r2, [pc, #104]	; (80008bc <main+0x110>)
 8000854:	2102      	movs	r1, #2
 8000856:	2010      	movs	r0, #16
 8000858:	f006 fee7 	bl	800762a <osMessageQueueNew>
 800085c:	4603      	mov	r3, r0
 800085e:	4a18      	ldr	r2, [pc, #96]	; (80008c0 <main+0x114>)
 8000860:	6013      	str	r3, [r2, #0]

  /* creation of doneQueue */
  doneQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &doneQueue_attributes);
 8000862:	4a18      	ldr	r2, [pc, #96]	; (80008c4 <main+0x118>)
 8000864:	2102      	movs	r1, #2
 8000866:	2010      	movs	r0, #16
 8000868:	f006 fedf 	bl	800762a <osMessageQueueNew>
 800086c:	4603      	mov	r3, r0
 800086e:	4a16      	ldr	r2, [pc, #88]	; (80008c8 <main+0x11c>)
 8000870:	6013      	str	r3, [r2, #0]

  /* creation of diagnosQueue */
  diagnosQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &diagnosQueue_attributes);
 8000872:	4a16      	ldr	r2, [pc, #88]	; (80008cc <main+0x120>)
 8000874:	2102      	movs	r1, #2
 8000876:	2010      	movs	r0, #16
 8000878:	f006 fed7 	bl	800762a <osMessageQueueNew>
 800087c:	4603      	mov	r3, r0
 800087e:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <main+0x124>)
 8000880:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of core7_MotorCont */
  core7_MotorContHandle = osThreadNew(StartTask1, NULL, &core7_MotorCont_attributes);
 8000882:	4a14      	ldr	r2, [pc, #80]	; (80008d4 <main+0x128>)
 8000884:	2100      	movs	r1, #0
 8000886:	4814      	ldr	r0, [pc, #80]	; (80008d8 <main+0x12c>)
 8000888:	f006 fe22 	bl	80074d0 <osThreadNew>
 800088c:	4603      	mov	r3, r0
 800088e:	4a13      	ldr	r2, [pc, #76]	; (80008dc <main+0x130>)
 8000890:	6013      	str	r3, [r2, #0]

  /* creation of core7_SensorPos */
  core7_SensorPosHandle = osThreadNew(StartTask2, NULL, &core7_SensorPos_attributes);
 8000892:	4a13      	ldr	r2, [pc, #76]	; (80008e0 <main+0x134>)
 8000894:	2100      	movs	r1, #0
 8000896:	4813      	ldr	r0, [pc, #76]	; (80008e4 <main+0x138>)
 8000898:	f006 fe1a 	bl	80074d0 <osThreadNew>
 800089c:	4603      	mov	r3, r0
 800089e:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <main+0x13c>)
 80008a0:	6013      	str	r3, [r2, #0]

  /* creation of core7_diagnosis */
  core7_diagnosisHandle = osThreadNew(StartTask3, NULL, &core7_diagnosis_attributes);
 80008a2:	4a12      	ldr	r2, [pc, #72]	; (80008ec <main+0x140>)
 80008a4:	2100      	movs	r1, #0
 80008a6:	4812      	ldr	r0, [pc, #72]	; (80008f0 <main+0x144>)
 80008a8:	f006 fe12 	bl	80074d0 <osThreadNew>
 80008ac:	4603      	mov	r3, r0
 80008ae:	4a11      	ldr	r2, [pc, #68]	; (80008f4 <main+0x148>)
 80008b0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008b2:	f006 fde7 	bl	8007484 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <main+0x10a>
 80008b8:	58024400 	.word	0x58024400
 80008bc:	0800aa34 	.word	0x0800aa34
 80008c0:	24004f60 	.word	0x24004f60
 80008c4:	0800aa4c 	.word	0x0800aa4c
 80008c8:	24004f64 	.word	0x24004f64
 80008cc:	0800aa64 	.word	0x0800aa64
 80008d0:	24005078 	.word	0x24005078
 80008d4:	0800a9c8 	.word	0x0800a9c8
 80008d8:	08000dd5 	.word	0x08000dd5
 80008dc:	24004fb8 	.word	0x24004fb8
 80008e0:	0800a9ec 	.word	0x0800a9ec
 80008e4:	08000e25 	.word	0x08000e25
 80008e8:	24004a78 	.word	0x24004a78
 80008ec:	0800aa10 	.word	0x0800aa10
 80008f0:	08000e35 	.word	0x08000e35
 80008f4:	24004f68 	.word	0x24004f68

080008f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b09c      	sub	sp, #112	; 0x70
 80008fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000902:	224c      	movs	r2, #76	; 0x4c
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f009 fbd0 	bl	800a0ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2220      	movs	r2, #32
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f009 fbca 	bl	800a0ac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000918:	2004      	movs	r0, #4
 800091a:	f001 ff11 	bl	8002740 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b34      	ldr	r3, [pc, #208]	; (80009f4 <SystemClock_Config+0xfc>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	4a33      	ldr	r2, [pc, #204]	; (80009f4 <SystemClock_Config+0xfc>)
 8000928:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800092c:	6193      	str	r3, [r2, #24]
 800092e:	4b31      	ldr	r3, [pc, #196]	; (80009f4 <SystemClock_Config+0xfc>)
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	4b2f      	ldr	r3, [pc, #188]	; (80009f8 <SystemClock_Config+0x100>)
 800093a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800093c:	4a2e      	ldr	r2, [pc, #184]	; (80009f8 <SystemClock_Config+0x100>)
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000944:	4b2c      	ldr	r3, [pc, #176]	; (80009f8 <SystemClock_Config+0x100>)
 8000946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000950:	bf00      	nop
 8000952:	4b28      	ldr	r3, [pc, #160]	; (80009f4 <SystemClock_Config+0xfc>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800095a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800095e:	d1f8      	bne.n	8000952 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000960:	4b26      	ldr	r3, [pc, #152]	; (80009fc <SystemClock_Config+0x104>)
 8000962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000964:	f023 0303 	bic.w	r3, r3, #3
 8000968:	4a24      	ldr	r2, [pc, #144]	; (80009fc <SystemClock_Config+0x104>)
 800096a:	f043 0302 	orr.w	r3, r3, #2
 800096e:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000970:	2301      	movs	r3, #1
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000974:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097a:	2302      	movs	r3, #2
 800097c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800097e:	2302      	movs	r3, #2
 8000980:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000982:	2301      	movs	r3, #1
 8000984:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000986:	2378      	movs	r3, #120	; 0x78
 8000988:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800098a:	2302      	movs	r3, #2
 800098c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800098e:	2302      	movs	r3, #2
 8000990:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000992:	2302      	movs	r3, #2
 8000994:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000996:	230c      	movs	r3, #12
 8000998:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800099a:	2300      	movs	r3, #0
 800099c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a6:	4618      	mov	r0, r3
 80009a8:	f001 ff34 	bl	8002814 <HAL_RCC_OscConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80009b2:	f000 fa47 	bl	8000e44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b6:	233f      	movs	r3, #63	; 0x3f
 80009b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ba:	2303      	movs	r3, #3
 80009bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009c2:	2308      	movs	r3, #8
 80009c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009c6:	2340      	movs	r3, #64	; 0x40
 80009c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009ca:	2340      	movs	r3, #64	; 0x40
 80009cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009d2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009d4:	2340      	movs	r3, #64	; 0x40
 80009d6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2104      	movs	r1, #4
 80009dc:	4618      	mov	r0, r3
 80009de:	f002 fb29 	bl	8003034 <HAL_RCC_ClockConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80009e8:	f000 fa2c 	bl	8000e44 <Error_Handler>
  }
}
 80009ec:	bf00      	nop
 80009ee:	3770      	adds	r7, #112	; 0x70
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	58024800 	.word	0x58024800
 80009f8:	58000400 	.word	0x58000400
 80009fc:	58024400 	.word	0x58024400

08000a00 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a04:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <MX_ETH_Init+0x80>)
 8000a06:	4a1f      	ldr	r2, [pc, #124]	; (8000a84 <MX_ETH_Init+0x84>)
 8000a08:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <MX_ETH_Init+0x88>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a10:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <MX_ETH_Init+0x88>)
 8000a12:	2280      	movs	r2, #128	; 0x80
 8000a14:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <MX_ETH_Init+0x88>)
 8000a18:	22e1      	movs	r2, #225	; 0xe1
 8000a1a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_ETH_Init+0x88>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <MX_ETH_Init+0x88>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <MX_ETH_Init+0x88>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a2e:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_ETH_Init+0x80>)
 8000a30:	4a15      	ldr	r2, [pc, #84]	; (8000a88 <MX_ETH_Init+0x88>)
 8000a32:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_ETH_Init+0x80>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_ETH_Init+0x80>)
 8000a3c:	4a13      	ldr	r2, [pc, #76]	; (8000a8c <MX_ETH_Init+0x8c>)
 8000a3e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_ETH_Init+0x80>)
 8000a42:	4a13      	ldr	r2, [pc, #76]	; (8000a90 <MX_ETH_Init+0x90>)
 8000a44:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_ETH_Init+0x80>)
 8000a48:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a4c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a4e:	480c      	ldr	r0, [pc, #48]	; (8000a80 <MX_ETH_Init+0x80>)
 8000a50:	f000 ff3a 	bl	80018c8 <HAL_ETH_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000a5a:	f000 f9f3 	bl	8000e44 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a5e:	2234      	movs	r2, #52	; 0x34
 8000a60:	2100      	movs	r1, #0
 8000a62:	480c      	ldr	r0, [pc, #48]	; (8000a94 <MX_ETH_Init+0x94>)
 8000a64:	f009 fb22 	bl	800a0ac <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <MX_ETH_Init+0x94>)
 8000a6a:	2221      	movs	r2, #33	; 0x21
 8000a6c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_ETH_Init+0x94>)
 8000a70:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a74:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a76:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <MX_ETH_Init+0x94>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	24004fbc 	.word	0x24004fbc
 8000a84:	40028000 	.word	0x40028000
 8000a88:	24000154 	.word	0x24000154
 8000a8c:	240000d8 	.word	0x240000d8
 8000a90:	24000078 	.word	0x24000078
 8000a94:	24005044 	.word	0x24005044

08000a98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08c      	sub	sp, #48	; 0x30
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	2224      	movs	r2, #36	; 0x24
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f009 fb00 	bl	800a0ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aac:	463b      	mov	r3, r7
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ab6:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <MX_TIM2_Init+0xa4>)
 8000ab8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000abc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000abe:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <MX_TIM2_Init+0xa4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <MX_TIM2_Init+0xa4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000aca:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <MX_TIM2_Init+0xa4>)
 8000acc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ad0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_TIM2_Init+0xa4>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad8:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MX_TIM2_Init+0xa4>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000aee:	230a      	movs	r3, #10
 8000af0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000af2:	2302      	movs	r3, #2
 8000af4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000af6:	2301      	movs	r3, #1
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000afe:	230a      	movs	r3, #10
 8000b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	4619      	mov	r1, r3
 8000b08:	480c      	ldr	r0, [pc, #48]	; (8000b3c <MX_TIM2_Init+0xa4>)
 8000b0a:	f004 f9d9 	bl	8004ec0 <HAL_TIM_Encoder_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000b14:	f000 f996 	bl	8000e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b20:	463b      	mov	r3, r7
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_TIM2_Init+0xa4>)
 8000b26:	f005 f83b 	bl	8005ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000b30:	f000 f988 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	3730      	adds	r7, #48	; 0x30
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	24004f6c 	.word	0x24004f6c

08000b40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b52:	463b      	mov	r3, r7
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
 8000b60:	615a      	str	r2, [r3, #20]
 8000b62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b64:	4b27      	ldr	r3, [pc, #156]	; (8000c04 <MX_TIM3_Init+0xc4>)
 8000b66:	4a28      	ldr	r2, [pc, #160]	; (8000c08 <MX_TIM3_Init+0xc8>)
 8000b68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12;
 8000b6a:	4b26      	ldr	r3, [pc, #152]	; (8000c04 <MX_TIM3_Init+0xc4>)
 8000b6c:	220c      	movs	r2, #12
 8000b6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b70:	4b24      	ldr	r3, [pc, #144]	; (8000c04 <MX_TIM3_Init+0xc4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000b76:	4b23      	ldr	r3, [pc, #140]	; (8000c04 <MX_TIM3_Init+0xc4>)
 8000b78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7e:	4b21      	ldr	r3, [pc, #132]	; (8000c04 <MX_TIM3_Init+0xc4>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b84:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <MX_TIM3_Init+0xc4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b8a:	481e      	ldr	r0, [pc, #120]	; (8000c04 <MX_TIM3_Init+0xc4>)
 8000b8c:	f004 f940 	bl	8004e10 <HAL_TIM_PWM_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000b96:	f000 f955 	bl	8000e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4816      	ldr	r0, [pc, #88]	; (8000c04 <MX_TIM3_Init+0xc4>)
 8000baa:	f004 fff9 	bl	8005ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000bb4:	f000 f946 	bl	8000e44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bb8:	2360      	movs	r3, #96	; 0x60
 8000bba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bc8:	463b      	mov	r3, r7
 8000bca:	2208      	movs	r2, #8
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480d      	ldr	r0, [pc, #52]	; (8000c04 <MX_TIM3_Init+0xc4>)
 8000bd0:	f004 fb3c 	bl	800524c <HAL_TIM_PWM_ConfigChannel>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000bda:	f000 f933 	bl	8000e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bde:	463b      	mov	r3, r7
 8000be0:	220c      	movs	r2, #12
 8000be2:	4619      	mov	r1, r3
 8000be4:	4807      	ldr	r0, [pc, #28]	; (8000c04 <MX_TIM3_Init+0xc4>)
 8000be6:	f004 fb31 	bl	800524c <HAL_TIM_PWM_ConfigChannel>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000bf0:	f000 f928 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bf4:	4803      	ldr	r0, [pc, #12]	; (8000c04 <MX_TIM3_Init+0xc4>)
 8000bf6:	f000 faa9 	bl	800114c <HAL_TIM_MspPostInit>

}
 8000bfa:	bf00      	nop
 8000bfc:	3728      	adds	r7, #40	; 0x28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	24004f14 	.word	0x24004f14
 8000c08:	40000400 	.word	0x40000400

08000c0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c10:	4b22      	ldr	r3, [pc, #136]	; (8000c9c <MX_USART3_UART_Init+0x90>)
 8000c12:	4a23      	ldr	r2, [pc, #140]	; (8000ca0 <MX_USART3_UART_Init+0x94>)
 8000c14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c16:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <MX_USART3_UART_Init+0x90>)
 8000c18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1e:	4b1f      	ldr	r3, [pc, #124]	; (8000c9c <MX_USART3_UART_Init+0x90>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c24:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <MX_USART3_UART_Init+0x90>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c2a:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <MX_USART3_UART_Init+0x90>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c30:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <MX_USART3_UART_Init+0x90>)
 8000c32:	220c      	movs	r2, #12
 8000c34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c36:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <MX_USART3_UART_Init+0x90>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c3c:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <MX_USART3_UART_Init+0x90>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c42:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <MX_USART3_UART_Init+0x90>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <MX_USART3_UART_Init+0x90>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c4e:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <MX_USART3_UART_Init+0x90>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c54:	4811      	ldr	r0, [pc, #68]	; (8000c9c <MX_USART3_UART_Init+0x90>)
 8000c56:	f005 f849 	bl	8005cec <HAL_UART_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c60:	f000 f8f0 	bl	8000e44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c64:	2100      	movs	r1, #0
 8000c66:	480d      	ldr	r0, [pc, #52]	; (8000c9c <MX_USART3_UART_Init+0x90>)
 8000c68:	f006 f82c 	bl	8006cc4 <HAL_UARTEx_SetTxFifoThreshold>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c72:	f000 f8e7 	bl	8000e44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c76:	2100      	movs	r1, #0
 8000c78:	4808      	ldr	r0, [pc, #32]	; (8000c9c <MX_USART3_UART_Init+0x90>)
 8000c7a:	f006 f861 	bl	8006d40 <HAL_UARTEx_SetRxFifoThreshold>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c84:	f000 f8de 	bl	8000e44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c88:	4804      	ldr	r0, [pc, #16]	; (8000c9c <MX_USART3_UART_Init+0x90>)
 8000c8a:	f005 ffe2 	bl	8006c52 <HAL_UARTEx_DisableFifoMode>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c94:	f000 f8d6 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	24004a7c 	.word	0x24004a7c
 8000ca0:	40004800 	.word	0x40004800

08000ca4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ca8:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000caa:	4a16      	ldr	r2, [pc, #88]	; (8000d04 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000cac:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cb0:	2209      	movs	r2, #9
 8000cb2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cb6:	2202      	movs	r2, #2
 8000cb8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cec:	f001 fbe0 	bl	80024b0 <HAL_PCD_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000cf6:	f000 f8a5 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	24004b0c 	.word	0x24004b0c
 8000d04:	40080000 	.word	0x40080000

08000d08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b087      	sub	sp, #28
 8000d0c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0e:	4b30      	ldr	r3, [pc, #192]	; (8000dd0 <MX_GPIO_Init+0xc8>)
 8000d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d14:	4a2e      	ldr	r2, [pc, #184]	; (8000dd0 <MX_GPIO_Init+0xc8>)
 8000d16:	f043 0304 	orr.w	r3, r3, #4
 8000d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d1e:	4b2c      	ldr	r3, [pc, #176]	; (8000dd0 <MX_GPIO_Init+0xc8>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d24:	f003 0304 	and.w	r3, r3, #4
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d2c:	4b28      	ldr	r3, [pc, #160]	; (8000dd0 <MX_GPIO_Init+0xc8>)
 8000d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d32:	4a27      	ldr	r2, [pc, #156]	; (8000dd0 <MX_GPIO_Init+0xc8>)
 8000d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d3c:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <MX_GPIO_Init+0xc8>)
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <MX_GPIO_Init+0xc8>)
 8000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d50:	4a1f      	ldr	r2, [pc, #124]	; (8000dd0 <MX_GPIO_Init+0xc8>)
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d5a:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <MX_GPIO_Init+0xc8>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d68:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <MX_GPIO_Init+0xc8>)
 8000d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6e:	4a18      	ldr	r2, [pc, #96]	; (8000dd0 <MX_GPIO_Init+0xc8>)
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d78:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <MX_GPIO_Init+0xc8>)
 8000d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d86:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <MX_GPIO_Init+0xc8>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8c:	4a10      	ldr	r2, [pc, #64]	; (8000dd0 <MX_GPIO_Init+0xc8>)
 8000d8e:	f043 0308 	orr.w	r3, r3, #8
 8000d92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <MX_GPIO_Init+0xc8>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	f003 0308 	and.w	r3, r3, #8
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000da4:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <MX_GPIO_Init+0xc8>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000daa:	4a09      	ldr	r2, [pc, #36]	; (8000dd0 <MX_GPIO_Init+0xc8>)
 8000dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000db0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <MX_GPIO_Init+0xc8>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]

}
 8000dc2:	bf00      	nop
 8000dc4:	371c      	adds	r7, #28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	58024400 	.word	0x58024400

08000dd4 <StartTask1>:
  * @brief  Function implementing the core7_MotorCont thread.
  * @param  argument: Not used
  * @retval None
  */
void StartTask1(void *argument)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b090      	sub	sp, #64	; 0x40
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	  uint8_t MSG[50] = {'\0'};
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	222e      	movs	r2, #46	; 0x2e
 8000de6:	2100      	movs	r1, #0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f009 f95f 	bl	800a0ac <memset>
	  /* Infinite loop */
	  for(;;)
	  {
		sprintf(MSG, "Encoder Switch Released, Encoder Ticks = %d\n\r", ((TIM2->CNT)>>2));
 8000dee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df4:	089a      	lsrs	r2, r3, #2
 8000df6:	f107 030c 	add.w	r3, r7, #12
 8000dfa:	4908      	ldr	r1, [pc, #32]	; (8000e1c <StartTask1+0x48>)
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f009 f95d 	bl	800a0bc <siprintf>
		HAL_UART_Transmit(&huart3, MSG, sizeof(MSG), 100);
 8000e02:	f107 010c 	add.w	r1, r7, #12
 8000e06:	2364      	movs	r3, #100	; 0x64
 8000e08:	2232      	movs	r2, #50	; 0x32
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <StartTask1+0x4c>)
 8000e0c:	f004 ffbe 	bl	8005d8c <HAL_UART_Transmit>
	    osDelay(500);
 8000e10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e14:	f006 fbee 	bl	80075f4 <osDelay>
	  {
 8000e18:	e7e9      	b.n	8000dee <StartTask1+0x1a>
 8000e1a:	bf00      	nop
 8000e1c:	0800a970 	.word	0x0800a970
 8000e20:	24004a7c 	.word	0x24004a7c

08000e24 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f006 fbe1 	bl	80075f4 <osDelay>
 8000e32:	e7fb      	b.n	8000e2c <StartTask2+0x8>

08000e34 <StartTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask3 */
void StartTask3(void *argument)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask3 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f006 fbd9 	bl	80075f4 <osDelay>
 8000e42:	e7fb      	b.n	8000e3c <StartTask3+0x8>

08000e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e48:	b672      	cpsid	i
}
 8000e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <Error_Handler+0x8>
	...

08000e50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <HAL_MspInit+0x38>)
 8000e58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e5c:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <HAL_MspInit+0x38>)
 8000e5e:	f043 0302 	orr.w	r3, r3, #2
 8000e62:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <HAL_MspInit+0x38>)
 8000e68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e6c:	f003 0302 	and.w	r3, r3, #2
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e74:	2200      	movs	r2, #0
 8000e76:	210f      	movs	r1, #15
 8000e78:	f06f 0001 	mvn.w	r0, #1
 8000e7c:	f000 fcef 	bl	800185e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	58024400 	.word	0x58024400

08000e8c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08e      	sub	sp, #56	; 0x38
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a59      	ldr	r2, [pc, #356]	; (8001010 <HAL_ETH_MspInit+0x184>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	f040 80ab 	bne.w	8001006 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000eb0:	4b58      	ldr	r3, [pc, #352]	; (8001014 <HAL_ETH_MspInit+0x188>)
 8000eb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eb6:	4a57      	ldr	r2, [pc, #348]	; (8001014 <HAL_ETH_MspInit+0x188>)
 8000eb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ebc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ec0:	4b54      	ldr	r3, [pc, #336]	; (8001014 <HAL_ETH_MspInit+0x188>)
 8000ec2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ec6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eca:	623b      	str	r3, [r7, #32]
 8000ecc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000ece:	4b51      	ldr	r3, [pc, #324]	; (8001014 <HAL_ETH_MspInit+0x188>)
 8000ed0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ed4:	4a4f      	ldr	r2, [pc, #316]	; (8001014 <HAL_ETH_MspInit+0x188>)
 8000ed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eda:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ede:	4b4d      	ldr	r3, [pc, #308]	; (8001014 <HAL_ETH_MspInit+0x188>)
 8000ee0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ee8:	61fb      	str	r3, [r7, #28]
 8000eea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000eec:	4b49      	ldr	r3, [pc, #292]	; (8001014 <HAL_ETH_MspInit+0x188>)
 8000eee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ef2:	4a48      	ldr	r2, [pc, #288]	; (8001014 <HAL_ETH_MspInit+0x188>)
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000efc:	4b45      	ldr	r3, [pc, #276]	; (8001014 <HAL_ETH_MspInit+0x188>)
 8000efe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f06:	61bb      	str	r3, [r7, #24]
 8000f08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0a:	4b42      	ldr	r3, [pc, #264]	; (8001014 <HAL_ETH_MspInit+0x188>)
 8000f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f10:	4a40      	ldr	r2, [pc, #256]	; (8001014 <HAL_ETH_MspInit+0x188>)
 8000f12:	f043 0304 	orr.w	r3, r3, #4
 8000f16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f1a:	4b3e      	ldr	r3, [pc, #248]	; (8001014 <HAL_ETH_MspInit+0x188>)
 8000f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f20:	f003 0304 	and.w	r3, r3, #4
 8000f24:	617b      	str	r3, [r7, #20]
 8000f26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f28:	4b3a      	ldr	r3, [pc, #232]	; (8001014 <HAL_ETH_MspInit+0x188>)
 8000f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2e:	4a39      	ldr	r2, [pc, #228]	; (8001014 <HAL_ETH_MspInit+0x188>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f38:	4b36      	ldr	r3, [pc, #216]	; (8001014 <HAL_ETH_MspInit+0x188>)
 8000f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	4b33      	ldr	r3, [pc, #204]	; (8001014 <HAL_ETH_MspInit+0x188>)
 8000f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4c:	4a31      	ldr	r2, [pc, #196]	; (8001014 <HAL_ETH_MspInit+0x188>)
 8000f4e:	f043 0302 	orr.w	r3, r3, #2
 8000f52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f56:	4b2f      	ldr	r3, [pc, #188]	; (8001014 <HAL_ETH_MspInit+0x188>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f64:	4b2b      	ldr	r3, [pc, #172]	; (8001014 <HAL_ETH_MspInit+0x188>)
 8000f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6a:	4a2a      	ldr	r2, [pc, #168]	; (8001014 <HAL_ETH_MspInit+0x188>)
 8000f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f74:	4b27      	ldr	r3, [pc, #156]	; (8001014 <HAL_ETH_MspInit+0x188>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f82:	2332      	movs	r3, #50	; 0x32
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f92:	230b      	movs	r3, #11
 8000f94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	481e      	ldr	r0, [pc, #120]	; (8001018 <HAL_ETH_MspInit+0x18c>)
 8000f9e:	f001 f8a9 	bl	80020f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000fa2:	2386      	movs	r3, #134	; 0x86
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fb2:	230b      	movs	r3, #11
 8000fb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4817      	ldr	r0, [pc, #92]	; (800101c <HAL_ETH_MspInit+0x190>)
 8000fbe:	f001 f899 	bl	80020f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fd4:	230b      	movs	r3, #11
 8000fd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4810      	ldr	r0, [pc, #64]	; (8001020 <HAL_ETH_MspInit+0x194>)
 8000fe0:	f001 f888 	bl	80020f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000fe4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ff6:	230b      	movs	r3, #11
 8000ff8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffe:	4619      	mov	r1, r3
 8001000:	4808      	ldr	r0, [pc, #32]	; (8001024 <HAL_ETH_MspInit+0x198>)
 8001002:	f001 f877 	bl	80020f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001006:	bf00      	nop
 8001008:	3738      	adds	r7, #56	; 0x38
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40028000 	.word	0x40028000
 8001014:	58024400 	.word	0x58024400
 8001018:	58020800 	.word	0x58020800
 800101c:	58020000 	.word	0x58020000
 8001020:	58020400 	.word	0x58020400
 8001024:	58021800 	.word	0x58021800

08001028 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	; 0x28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001048:	d154      	bne.n	80010f4 <HAL_TIM_Encoder_MspInit+0xcc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800104a:	4b2c      	ldr	r3, [pc, #176]	; (80010fc <HAL_TIM_Encoder_MspInit+0xd4>)
 800104c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001050:	4a2a      	ldr	r2, [pc, #168]	; (80010fc <HAL_TIM_Encoder_MspInit+0xd4>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800105a:	4b28      	ldr	r3, [pc, #160]	; (80010fc <HAL_TIM_Encoder_MspInit+0xd4>)
 800105c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001068:	4b24      	ldr	r3, [pc, #144]	; (80010fc <HAL_TIM_Encoder_MspInit+0xd4>)
 800106a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106e:	4a23      	ldr	r2, [pc, #140]	; (80010fc <HAL_TIM_Encoder_MspInit+0xd4>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001078:	4b20      	ldr	r3, [pc, #128]	; (80010fc <HAL_TIM_Encoder_MspInit+0xd4>)
 800107a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <HAL_TIM_Encoder_MspInit+0xd4>)
 8001088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108c:	4a1b      	ldr	r2, [pc, #108]	; (80010fc <HAL_TIM_Encoder_MspInit+0xd4>)
 800108e:	f043 0302 	orr.w	r3, r3, #2
 8001092:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001096:	4b19      	ldr	r3, [pc, #100]	; (80010fc <HAL_TIM_Encoder_MspInit+0xd4>)
 8001098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010a4:	2301      	movs	r3, #1
 80010a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010b4:	2301      	movs	r3, #1
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	4810      	ldr	r0, [pc, #64]	; (8001100 <HAL_TIM_Encoder_MspInit+0xd8>)
 80010c0:	f001 f818 	bl	80020f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010c4:	2308      	movs	r3, #8
 80010c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010d4:	2301      	movs	r3, #1
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	4809      	ldr	r0, [pc, #36]	; (8001104 <HAL_TIM_Encoder_MspInit+0xdc>)
 80010e0:	f001 f808 	bl	80020f4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2105      	movs	r1, #5
 80010e8:	201c      	movs	r0, #28
 80010ea:	f000 fbb8 	bl	800185e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010ee:	201c      	movs	r0, #28
 80010f0:	f000 fbcf 	bl	8001892 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010f4:	bf00      	nop
 80010f6:	3728      	adds	r7, #40	; 0x28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	58024400 	.word	0x58024400
 8001100:	58020000 	.word	0x58020000
 8001104:	58020400 	.word	0x58020400

08001108 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0b      	ldr	r2, [pc, #44]	; (8001144 <HAL_TIM_PWM_MspInit+0x3c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d10e      	bne.n	8001138 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <HAL_TIM_PWM_MspInit+0x40>)
 800111c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001120:	4a09      	ldr	r2, [pc, #36]	; (8001148 <HAL_TIM_PWM_MspInit+0x40>)
 8001122:	f043 0302 	orr.w	r3, r3, #2
 8001126:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <HAL_TIM_PWM_MspInit+0x40>)
 800112c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	40000400 	.word	0x40000400
 8001148:	58024400 	.word	0x58024400

0800114c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a22      	ldr	r2, [pc, #136]	; (80011f4 <HAL_TIM_MspPostInit+0xa8>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d13e      	bne.n	80011ec <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116e:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <HAL_TIM_MspPostInit+0xac>)
 8001170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001174:	4a20      	ldr	r2, [pc, #128]	; (80011f8 <HAL_TIM_MspPostInit+0xac>)
 8001176:	f043 0302 	orr.w	r3, r3, #2
 800117a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800117e:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <HAL_TIM_MspPostInit+0xac>)
 8001180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800118c:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <HAL_TIM_MspPostInit+0xac>)
 800118e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001192:	4a19      	ldr	r2, [pc, #100]	; (80011f8 <HAL_TIM_MspPostInit+0xac>)
 8001194:	f043 0304 	orr.w	r3, r3, #4
 8001198:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800119c:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <HAL_TIM_MspPostInit+0xac>)
 800119e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a2:	f003 0304 	and.w	r3, r3, #4
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011aa:	2302      	movs	r3, #2
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011ba:	2302      	movs	r3, #2
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	480d      	ldr	r0, [pc, #52]	; (80011fc <HAL_TIM_MspPostInit+0xb0>)
 80011c6:	f000 ff95 	bl	80020f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011dc:	2302      	movs	r3, #2
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	4806      	ldr	r0, [pc, #24]	; (8001200 <HAL_TIM_MspPostInit+0xb4>)
 80011e8:	f000 ff84 	bl	80020f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011ec:	bf00      	nop
 80011ee:	3728      	adds	r7, #40	; 0x28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40000400 	.word	0x40000400
 80011f8:	58024400 	.word	0x58024400
 80011fc:	58020400 	.word	0x58020400
 8001200:	58020800 	.word	0x58020800

08001204 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b0b8      	sub	sp, #224	; 0xe0
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	22bc      	movs	r2, #188	; 0xbc
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f008 ff41 	bl	800a0ac <memset>
  if(huart->Instance==USART3)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a25      	ldr	r2, [pc, #148]	; (80012c4 <HAL_UART_MspInit+0xc0>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d142      	bne.n	80012ba <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001234:	2302      	movs	r3, #2
 8001236:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001238:	2300      	movs	r3, #0
 800123a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800123e:	f107 0310 	add.w	r3, r7, #16
 8001242:	4618      	mov	r0, r3
 8001244:	f002 fa82 	bl	800374c <HAL_RCCEx_PeriphCLKConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800124e:	f7ff fdf9 	bl	8000e44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001252:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <HAL_UART_MspInit+0xc4>)
 8001254:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001258:	4a1b      	ldr	r2, [pc, #108]	; (80012c8 <HAL_UART_MspInit+0xc4>)
 800125a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800125e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001262:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <HAL_UART_MspInit+0xc4>)
 8001264:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001268:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001270:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <HAL_UART_MspInit+0xc4>)
 8001272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001276:	4a14      	ldr	r2, [pc, #80]	; (80012c8 <HAL_UART_MspInit+0xc4>)
 8001278:	f043 0308 	orr.w	r3, r3, #8
 800127c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <HAL_UART_MspInit+0xc4>)
 8001282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800128e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001292:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012a8:	2307      	movs	r3, #7
 80012aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012b2:	4619      	mov	r1, r3
 80012b4:	4805      	ldr	r0, [pc, #20]	; (80012cc <HAL_UART_MspInit+0xc8>)
 80012b6:	f000 ff1d 	bl	80020f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012ba:	bf00      	nop
 80012bc:	37e0      	adds	r7, #224	; 0xe0
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40004800 	.word	0x40004800
 80012c8:	58024400 	.word	0x58024400
 80012cc:	58020c00 	.word	0x58020c00

080012d0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b0b8      	sub	sp, #224	; 0xe0
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	22bc      	movs	r2, #188	; 0xbc
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f008 fedb 	bl	800a0ac <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a36      	ldr	r2, [pc, #216]	; (80013d4 <HAL_PCD_MspInit+0x104>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d165      	bne.n	80013cc <HAL_PCD_MspInit+0xfc>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001300:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001304:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001306:	2301      	movs	r3, #1
 8001308:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 800130a:	2318      	movs	r3, #24
 800130c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800130e:	2302      	movs	r3, #2
 8001310:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8001312:	2304      	movs	r3, #4
 8001314:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001316:	2302      	movs	r3, #2
 8001318:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800131a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800131e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001324:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001328:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	4618      	mov	r0, r3
 8001332:	f002 fa0b 	bl	800374c <HAL_RCCEx_PeriphCLKConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800133c:	f7ff fd82 	bl	8000e44 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001340:	f001 fa58 	bl	80027f4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001344:	4b24      	ldr	r3, [pc, #144]	; (80013d8 <HAL_PCD_MspInit+0x108>)
 8001346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134a:	4a23      	ldr	r2, [pc, #140]	; (80013d8 <HAL_PCD_MspInit+0x108>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001354:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <HAL_PCD_MspInit+0x108>)
 8001356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001362:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001366:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800137c:	230a      	movs	r3, #10
 800137e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001382:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001386:	4619      	mov	r1, r3
 8001388:	4814      	ldr	r0, [pc, #80]	; (80013dc <HAL_PCD_MspInit+0x10c>)
 800138a:	f000 feb3 	bl	80020f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800138e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001392:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001396:	2300      	movs	r3, #0
 8001398:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013a6:	4619      	mov	r1, r3
 80013a8:	480c      	ldr	r0, [pc, #48]	; (80013dc <HAL_PCD_MspInit+0x10c>)
 80013aa:	f000 fea3 	bl	80020f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <HAL_PCD_MspInit+0x108>)
 80013b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013b4:	4a08      	ldr	r2, [pc, #32]	; (80013d8 <HAL_PCD_MspInit+0x108>)
 80013b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80013ba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_PCD_MspInit+0x108>)
 80013c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80013cc:	bf00      	nop
 80013ce:	37e0      	adds	r7, #224	; 0xe0
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40080000 	.word	0x40080000
 80013d8:	58024400 	.word	0x58024400
 80013dc:	58020000 	.word	0x58020000

080013e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <NMI_Handler+0x4>

080013e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <HardFault_Handler+0x4>

080013ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <MemManage_Handler+0x4>

080013f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <BusFault_Handler+0x4>

080013f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <UsageFault_Handler+0x4>

080013fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001410:	f000 f8e6 	bl	80015e0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001414:	f008 f9e4 	bl	80097e0 <xTaskGetSchedulerState>
 8001418:	4603      	mov	r3, r0
 800141a:	2b01      	cmp	r3, #1
 800141c:	d001      	beq.n	8001422 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800141e:	f006 fe0b 	bl	8008038 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800142c:	4802      	ldr	r0, [pc, #8]	; (8001438 <TIM2_IRQHandler+0x10>)
 800142e:	f003 fded 	bl	800500c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	24004f6c 	.word	0x24004f6c

0800143c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001444:	4a14      	ldr	r2, [pc, #80]	; (8001498 <_sbrk+0x5c>)
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <_sbrk+0x60>)
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001450:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d102      	bne.n	800145e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <_sbrk+0x64>)
 800145a:	4a12      	ldr	r2, [pc, #72]	; (80014a4 <_sbrk+0x68>)
 800145c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <_sbrk+0x64>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	429a      	cmp	r2, r3
 800146a:	d207      	bcs.n	800147c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800146c:	f008 fde6 	bl	800a03c <__errno>
 8001470:	4603      	mov	r3, r0
 8001472:	220c      	movs	r2, #12
 8001474:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001476:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800147a:	e009      	b.n	8001490 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <_sbrk+0x64>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001482:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	4a05      	ldr	r2, [pc, #20]	; (80014a0 <_sbrk+0x64>)
 800148c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800148e:	68fb      	ldr	r3, [r7, #12]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	24080000 	.word	0x24080000
 800149c:	00000400 	.word	0x00000400
 80014a0:	2400015c 	.word	0x2400015c
 80014a4:	24005110 	.word	0x24005110

080014a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014ac:	f7ff f8e4 	bl	8000678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b0:	480c      	ldr	r0, [pc, #48]	; (80014e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014b2:	490d      	ldr	r1, [pc, #52]	; (80014e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014b4:	4a0d      	ldr	r2, [pc, #52]	; (80014ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b8:	e002      	b.n	80014c0 <LoopCopyDataInit>

080014ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014be:	3304      	adds	r3, #4

080014c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c4:	d3f9      	bcc.n	80014ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014c8:	4c0a      	ldr	r4, [pc, #40]	; (80014f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014cc:	e001      	b.n	80014d2 <LoopFillZerobss>

080014ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d0:	3204      	adds	r2, #4

080014d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d4:	d3fb      	bcc.n	80014ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014d6:	f008 fdb7 	bl	800a048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014da:	f7ff f967 	bl	80007ac <main>
  bx  lr
 80014de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014e0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014e8:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80014ec:	0800aae8 	.word	0x0800aae8
  ldr r2, =_sbss
 80014f0:	24000138 	.word	0x24000138
  ldr r4, =_ebss
 80014f4:	24005110 	.word	0x24005110

080014f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f8:	e7fe      	b.n	80014f8 <ADC3_IRQHandler>
	...

080014fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001502:	2003      	movs	r0, #3
 8001504:	f000 f9a0 	bl	8001848 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001508:	f001 ff4a 	bl	80033a0 <HAL_RCC_GetSysClockFreq>
 800150c:	4602      	mov	r2, r0
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <HAL_Init+0x68>)
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	0a1b      	lsrs	r3, r3, #8
 8001514:	f003 030f 	and.w	r3, r3, #15
 8001518:	4913      	ldr	r1, [pc, #76]	; (8001568 <HAL_Init+0x6c>)
 800151a:	5ccb      	ldrb	r3, [r1, r3]
 800151c:	f003 031f 	and.w	r3, r3, #31
 8001520:	fa22 f303 	lsr.w	r3, r2, r3
 8001524:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <HAL_Init+0x68>)
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	4a0e      	ldr	r2, [pc, #56]	; (8001568 <HAL_Init+0x6c>)
 8001530:	5cd3      	ldrb	r3, [r2, r3]
 8001532:	f003 031f 	and.w	r3, r3, #31
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	fa22 f303 	lsr.w	r3, r2, r3
 800153c:	4a0b      	ldr	r2, [pc, #44]	; (800156c <HAL_Init+0x70>)
 800153e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001540:	4a0b      	ldr	r2, [pc, #44]	; (8001570 <HAL_Init+0x74>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001546:	200f      	movs	r0, #15
 8001548:	f000 f814 	bl	8001574 <HAL_InitTick>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e002      	b.n	800155c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001556:	f7ff fc7b 	bl	8000e50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	58024400 	.word	0x58024400
 8001568:	0800a9b8 	.word	0x0800a9b8
 800156c:	24000004 	.word	0x24000004
 8001570:	24000000 	.word	0x24000000

08001574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800157c:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <HAL_InitTick+0x60>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e021      	b.n	80015cc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <HAL_InitTick+0x64>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <HAL_InitTick+0x60>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001596:	fbb3 f3f1 	udiv	r3, r3, r1
 800159a:	fbb2 f3f3 	udiv	r3, r2, r3
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 f985 	bl	80018ae <HAL_SYSTICK_Config>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00e      	b.n	80015cc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b0f      	cmp	r3, #15
 80015b2:	d80a      	bhi.n	80015ca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b4:	2200      	movs	r2, #0
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015bc:	f000 f94f 	bl	800185e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c0:	4a06      	ldr	r2, [pc, #24]	; (80015dc <HAL_InitTick+0x68>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e000      	b.n	80015cc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	2400000c 	.word	0x2400000c
 80015d8:	24000000 	.word	0x24000000
 80015dc:	24000008 	.word	0x24000008

080015e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_IncTick+0x20>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_IncTick+0x24>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4413      	add	r3, r2
 80015f0:	4a04      	ldr	r2, [pc, #16]	; (8001604 <HAL_IncTick+0x24>)
 80015f2:	6013      	str	r3, [r2, #0]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	2400000c 	.word	0x2400000c
 8001604:	2400507c 	.word	0x2400507c

08001608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return uwTick;
 800160c:	4b03      	ldr	r3, [pc, #12]	; (800161c <HAL_GetTick+0x14>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	2400507c 	.word	0x2400507c

08001620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001628:	f7ff ffee 	bl	8001608 <HAL_GetTick>
 800162c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001638:	d005      	beq.n	8001646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800163a:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <HAL_Delay+0x44>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4413      	add	r3, r2
 8001644:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001646:	bf00      	nop
 8001648:	f7ff ffde 	bl	8001608 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	429a      	cmp	r2, r3
 8001656:	d8f7      	bhi.n	8001648 <HAL_Delay+0x28>
  {
  }
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	2400000c 	.word	0x2400000c

08001668 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800166c:	4b03      	ldr	r3, [pc, #12]	; (800167c <HAL_GetREVID+0x14>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	0c1b      	lsrs	r3, r3, #16
}
 8001672:	4618      	mov	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	5c001000 	.word	0x5c001000

08001680 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001690:	4904      	ldr	r1, [pc, #16]	; (80016a4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4313      	orrs	r3, r2
 8001696:	604b      	str	r3, [r1, #4]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	58000400 	.word	0x58000400

080016a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <__NVIC_SetPriorityGrouping+0x40>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c4:	4013      	ands	r3, r2
 80016c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d6:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <__NVIC_SetPriorityGrouping+0x40>)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	60d3      	str	r3, [r2, #12]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000ed00 	.word	0xe000ed00
 80016ec:	05fa0000 	.word	0x05fa0000

080016f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <__NVIC_GetPriorityGrouping+0x18>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	f003 0307 	and.w	r3, r3, #7
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800171a:	2b00      	cmp	r3, #0
 800171c:	db0b      	blt.n	8001736 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171e:	88fb      	ldrh	r3, [r7, #6]
 8001720:	f003 021f 	and.w	r2, r3, #31
 8001724:	4907      	ldr	r1, [pc, #28]	; (8001744 <__NVIC_EnableIRQ+0x38>)
 8001726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800172a:	095b      	lsrs	r3, r3, #5
 800172c:	2001      	movs	r0, #1
 800172e:	fa00 f202 	lsl.w	r2, r0, r2
 8001732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000e100 	.word	0xe000e100

08001748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	6039      	str	r1, [r7, #0]
 8001752:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001754:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001758:	2b00      	cmp	r3, #0
 800175a:	db0a      	blt.n	8001772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	b2da      	uxtb	r2, r3
 8001760:	490c      	ldr	r1, [pc, #48]	; (8001794 <__NVIC_SetPriority+0x4c>)
 8001762:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001766:	0112      	lsls	r2, r2, #4
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	440b      	add	r3, r1
 800176c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001770:	e00a      	b.n	8001788 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4908      	ldr	r1, [pc, #32]	; (8001798 <__NVIC_SetPriority+0x50>)
 8001778:	88fb      	ldrh	r3, [r7, #6]
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	3b04      	subs	r3, #4
 8001780:	0112      	lsls	r2, r2, #4
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	440b      	add	r3, r1
 8001786:	761a      	strb	r2, [r3, #24]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000e100 	.word	0xe000e100
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179c:	b480      	push	{r7}
 800179e:	b089      	sub	sp, #36	; 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f1c3 0307 	rsb	r3, r3, #7
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	bf28      	it	cs
 80017ba:	2304      	movcs	r3, #4
 80017bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3304      	adds	r3, #4
 80017c2:	2b06      	cmp	r3, #6
 80017c4:	d902      	bls.n	80017cc <NVIC_EncodePriority+0x30>
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3b03      	subs	r3, #3
 80017ca:	e000      	b.n	80017ce <NVIC_EncodePriority+0x32>
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43da      	mvns	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	401a      	ands	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa01 f303 	lsl.w	r3, r1, r3
 80017ee:	43d9      	mvns	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	4313      	orrs	r3, r2
         );
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3724      	adds	r7, #36	; 0x24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
	...

08001804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001814:	d301      	bcc.n	800181a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001816:	2301      	movs	r3, #1
 8001818:	e00f      	b.n	800183a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181a:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <SysTick_Config+0x40>)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3b01      	subs	r3, #1
 8001820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001822:	210f      	movs	r1, #15
 8001824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001828:	f7ff ff8e 	bl	8001748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <SysTick_Config+0x40>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001832:	4b04      	ldr	r3, [pc, #16]	; (8001844 <SysTick_Config+0x40>)
 8001834:	2207      	movs	r2, #7
 8001836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	e000e010 	.word	0xe000e010

08001848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff ff29 	bl	80016a8 <__NVIC_SetPriorityGrouping>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b086      	sub	sp, #24
 8001862:	af00      	add	r7, sp, #0
 8001864:	4603      	mov	r3, r0
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800186c:	f7ff ff40 	bl	80016f0 <__NVIC_GetPriorityGrouping>
 8001870:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	68b9      	ldr	r1, [r7, #8]
 8001876:	6978      	ldr	r0, [r7, #20]
 8001878:	f7ff ff90 	bl	800179c <NVIC_EncodePriority>
 800187c:	4602      	mov	r2, r0
 800187e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff5f 	bl	8001748 <__NVIC_SetPriority>
}
 800188a:	bf00      	nop
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	4603      	mov	r3, r0
 800189a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800189c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff33 	bl	800170c <__NVIC_EnableIRQ>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff ffa4 	bl	8001804 <SysTick_Config>
 80018bc:	4603      	mov	r3, r0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e0c6      	b.n	8001a68 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d102      	bne.n	80018e8 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff fad2 	bl	8000e8c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2223      	movs	r2, #35	; 0x23
 80018ec:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ee:	4b60      	ldr	r3, [pc, #384]	; (8001a70 <HAL_ETH_Init+0x1a8>)
 80018f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018f4:	4a5e      	ldr	r2, [pc, #376]	; (8001a70 <HAL_ETH_Init+0x1a8>)
 80018f6:	f043 0302 	orr.w	r3, r3, #2
 80018fa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80018fe:	4b5c      	ldr	r3, [pc, #368]	; (8001a70 <HAL_ETH_Init+0x1a8>)
 8001900:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	7a1b      	ldrb	r3, [r3, #8]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d103      	bne.n	800191c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001914:	2000      	movs	r0, #0
 8001916:	f7ff feb3 	bl	8001680 <HAL_SYSCFG_ETHInterfaceSelect>
 800191a:	e003      	b.n	8001924 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800191c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001920:	f7ff feae 	bl	8001680 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 0201 	orr.w	r2, r2, #1
 8001936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800193a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800193c:	f7ff fe64 	bl	8001608 <HAL_GetTick>
 8001940:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001942:	e00f      	b.n	8001964 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001944:	f7ff fe60 	bl	8001608 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001952:	d907      	bls.n	8001964 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2204      	movs	r2, #4
 8001958:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	22e0      	movs	r2, #224	; 0xe0
 800195e:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e081      	b.n	8001a68 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1e6      	bne.n	8001944 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 fac0 	bl	8001efc <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800197c:	f001 fe8a 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 8001980:	4603      	mov	r3, r0
 8001982:	4a3c      	ldr	r2, [pc, #240]	; (8001a74 <HAL_ETH_Init+0x1ac>)
 8001984:	fba2 2303 	umull	r2, r3, r2, r3
 8001988:	0c9a      	lsrs	r2, r3, #18
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	3a01      	subs	r2, #1
 8001990:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 fa13 	bl	8001dc0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80019b0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80019b4:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d007      	beq.n	80019d2 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	22e0      	movs	r2, #224	; 0xe0
 80019cc:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e04a      	b.n	8001a68 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	f241 1308 	movw	r3, #4360	; 0x1108
 80019da:	4413      	add	r3, r2
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	4b26      	ldr	r3, [pc, #152]	; (8001a78 <HAL_ETH_Init+0x1b0>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6952      	ldr	r2, [r2, #20]
 80019e6:	0052      	lsls	r2, r2, #1
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	6809      	ldr	r1, [r1, #0]
 80019ec:	431a      	orrs	r2, r3
 80019ee:	f241 1308 	movw	r3, #4360	; 0x1108
 80019f2:	440b      	add	r3, r1
 80019f4:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 fad8 	bl	8001fac <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 fb1c 	bl	800203a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	3305      	adds	r3, #5
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	021a      	lsls	r2, r3, #8
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	3304      	adds	r3, #4
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	4619      	mov	r1, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	3303      	adds	r3, #3
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	061a      	lsls	r2, r3, #24
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	3302      	adds	r3, #2
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	041b      	lsls	r3, r3, #16
 8001a34:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a40:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a4e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a50:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2210      	movs	r2, #16
 8001a5e:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2210      	movs	r2, #16
 8001a64:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	58024400 	.word	0x58024400
 8001a74:	431bde83 	.word	0x431bde83
 8001a78:	ffff8001 	.word	0xffff8001

08001a7c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001a8e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	791b      	ldrb	r3, [r3, #4]
 8001a94:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001a96:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	7b1b      	ldrb	r3, [r3, #12]
 8001a9c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001a9e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	7b5b      	ldrb	r3, [r3, #13]
 8001aa4:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001aa6:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	7b9b      	ldrb	r3, [r3, #14]
 8001aac:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001aae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	7bdb      	ldrb	r3, [r3, #15]
 8001ab4:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001ab6:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	7c12      	ldrb	r2, [r2, #16]
 8001abc:	2a00      	cmp	r2, #0
 8001abe:	d102      	bne.n	8001ac6 <ETH_SetMACConfig+0x4a>
 8001ac0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ac4:	e000      	b.n	8001ac8 <ETH_SetMACConfig+0x4c>
 8001ac6:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001ac8:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	7c52      	ldrb	r2, [r2, #17]
 8001ace:	2a00      	cmp	r2, #0
 8001ad0:	d102      	bne.n	8001ad8 <ETH_SetMACConfig+0x5c>
 8001ad2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ad6:	e000      	b.n	8001ada <ETH_SetMACConfig+0x5e>
 8001ad8:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001ada:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	7c9b      	ldrb	r3, [r3, #18]
 8001ae0:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001ae2:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001ae8:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001aee:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	7f1b      	ldrb	r3, [r3, #28]
 8001af4:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001af6:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	7f5b      	ldrb	r3, [r3, #29]
 8001afc:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001afe:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	7f92      	ldrb	r2, [r2, #30]
 8001b04:	2a00      	cmp	r2, #0
 8001b06:	d102      	bne.n	8001b0e <ETH_SetMACConfig+0x92>
 8001b08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b0c:	e000      	b.n	8001b10 <ETH_SetMACConfig+0x94>
 8001b0e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001b10:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	7fdb      	ldrb	r3, [r3, #31]
 8001b16:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001b18:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001b20:	2a00      	cmp	r2, #0
 8001b22:	d102      	bne.n	8001b2a <ETH_SetMACConfig+0xae>
 8001b24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b28:	e000      	b.n	8001b2c <ETH_SetMACConfig+0xb0>
 8001b2a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001b2c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001b32:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b3a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001b3c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001b42:	4313      	orrs	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b56      	ldr	r3, [pc, #344]	; (8001ca8 <ETH_SetMACConfig+0x22c>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	68f9      	ldr	r1, [r7, #12]
 8001b56:	430b      	orrs	r3, r1
 8001b58:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b5e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b66:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001b68:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b70:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001b72:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001b7a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001b7c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001b84:	2a00      	cmp	r2, #0
 8001b86:	d102      	bne.n	8001b8e <ETH_SetMACConfig+0x112>
 8001b88:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b8c:	e000      	b.n	8001b90 <ETH_SetMACConfig+0x114>
 8001b8e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001b90:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001b96:	4313      	orrs	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	4b42      	ldr	r3, [pc, #264]	; (8001cac <ETH_SetMACConfig+0x230>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	68f9      	ldr	r1, [r7, #12]
 8001baa:	430b      	orrs	r3, r1
 8001bac:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bb4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	4b3a      	ldr	r3, [pc, #232]	; (8001cb0 <ETH_SetMACConfig+0x234>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	68f9      	ldr	r1, [r7, #12]
 8001bce:	430b      	orrs	r3, r1
 8001bd0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001bd8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001bde:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001be6:	2a00      	cmp	r2, #0
 8001be8:	d101      	bne.n	8001bee <ETH_SetMACConfig+0x172>
 8001bea:	2280      	movs	r2, #128	; 0x80
 8001bec:	e000      	b.n	8001bf0 <ETH_SetMACConfig+0x174>
 8001bee:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001bf0:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c02:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001c06:	4013      	ands	r3, r2
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	68f9      	ldr	r1, [r7, #12]
 8001c0e:	430b      	orrs	r3, r1
 8001c10:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001c18:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001c20:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001c22:	4313      	orrs	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c2e:	f023 0103 	bic.w	r1, r3, #3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001c46:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001c62:	2a00      	cmp	r2, #0
 8001c64:	d101      	bne.n	8001c6a <ETH_SetMACConfig+0x1ee>
 8001c66:	2240      	movs	r2, #64	; 0x40
 8001c68:	e000      	b.n	8001c6c <ETH_SetMACConfig+0x1f0>
 8001c6a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001c6c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001c74:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001c76:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001c7e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001c80:	4313      	orrs	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001c8c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	00048083 	.word	0x00048083
 8001cac:	c0f88000 	.word	0xc0f88000
 8001cb0:	fffffef0 	.word	0xfffffef0

08001cb4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4b38      	ldr	r3, [pc, #224]	; (8001dac <ETH_SetDMAConfig+0xf8>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	6812      	ldr	r2, [r2, #0]
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	6809      	ldr	r1, [r1, #0]
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001cda:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	791b      	ldrb	r3, [r3, #4]
 8001ce0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001ce6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	7b1b      	ldrb	r3, [r3, #12]
 8001cec:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	f241 0304 	movw	r3, #4100	; 0x1004
 8001cfa:	4413      	add	r3, r2
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	4b2c      	ldr	r3, [pc, #176]	; (8001db0 <ETH_SetDMAConfig+0xfc>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6811      	ldr	r1, [r2, #0]
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	f241 0304 	movw	r3, #4100	; 0x1004
 8001d0e:	440b      	add	r3, r1
 8001d10:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	7b5b      	ldrb	r3, [r3, #13]
 8001d16:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	4b22      	ldr	r3, [pc, #136]	; (8001db4 <ETH_SetDMAConfig+0x100>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6811      	ldr	r1, [r2, #0]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	431a      	orrs	r2, r3
 8001d36:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001d3a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	7d1b      	ldrb	r3, [r3, #20]
 8001d44:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d46:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	7f5b      	ldrb	r3, [r3, #29]
 8001d4c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	f241 1304 	movw	r3, #4356	; 0x1104
 8001d5a:	4413      	add	r3, r2
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <ETH_SetDMAConfig+0x104>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6811      	ldr	r1, [r2, #0]
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	f241 1304 	movw	r3, #4356	; 0x1104
 8001d6e:	440b      	add	r3, r1
 8001d70:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	7f1b      	ldrb	r3, [r3, #28]
 8001d76:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	f241 1308 	movw	r3, #4360	; 0x1108
 8001d88:	4413      	add	r3, r2
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <ETH_SetDMAConfig+0x108>)
 8001d8e:	4013      	ands	r3, r2
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6811      	ldr	r1, [r2, #0]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	431a      	orrs	r2, r3
 8001d98:	f241 1308 	movw	r3, #4360	; 0x1108
 8001d9c:	440b      	add	r3, r1
 8001d9e:	601a      	str	r2, [r3, #0]
}
 8001da0:	bf00      	nop
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	ffff87fd 	.word	0xffff87fd
 8001db0:	ffff2ffe 	.word	0xffff2ffe
 8001db4:	fffec000 	.word	0xfffec000
 8001db8:	ffc0efef 	.word	0xffc0efef
 8001dbc:	7fc0ffff 	.word	0x7fc0ffff

08001dc0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b0a4      	sub	sp, #144	; 0x90
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001dde:	2301      	movs	r3, #1
 8001de0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001de4:	2301      	movs	r3, #1
 8001de6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001dea:	2301      	movs	r3, #1
 8001dec:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001df6:	2301      	movs	r3, #1
 8001df8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001dfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e00:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001e12:	2300      	movs	r3, #0
 8001e14:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001e18:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001e1c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001e24:	2300      	movs	r3, #0
 8001e26:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001e42:	2300      	movs	r3, #0
 8001e44:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001e52:	2301      	movs	r3, #1
 8001e54:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001e58:	2320      	movs	r3, #32
 8001e5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001e6a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001e70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e74:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001e76:	2300      	movs	r3, #0
 8001e78:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001e82:	2300      	movs	r3, #0
 8001e84:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001e94:	2301      	movs	r3, #1
 8001e96:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001ea4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff fde6 	bl	8001a7c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001eca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ece:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ed4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ed8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001ee0:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001ee4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ee6:	f107 0308 	add.w	r3, r7, #8
 8001eea:	4619      	mov	r1, r3
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff fee1 	bl	8001cb4 <ETH_SetDMAConfig>
}
 8001ef2:	bf00      	nop
 8001ef4:	3790      	adds	r7, #144	; 0x90
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f0c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f14:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001f16:	f001 fbbd 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 8001f1a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	4a1e      	ldr	r2, [pc, #120]	; (8001f98 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d908      	bls.n	8001f36 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	4a1d      	ldr	r2, [pc, #116]	; (8001f9c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d804      	bhi.n	8001f36 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	e027      	b.n	8001f86 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	4a18      	ldr	r2, [pc, #96]	; (8001f9c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d908      	bls.n	8001f50 <ETH_MAC_MDIO_ClkConfig+0x54>
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	4a17      	ldr	r2, [pc, #92]	; (8001fa0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d204      	bcs.n	8001f50 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	e01a      	b.n	8001f86 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	4a13      	ldr	r2, [pc, #76]	; (8001fa0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d303      	bcc.n	8001f60 <ETH_MAC_MDIO_ClkConfig+0x64>
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d911      	bls.n	8001f84 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4a10      	ldr	r2, [pc, #64]	; (8001fa4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d908      	bls.n	8001f7a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	4a0f      	ldr	r2, [pc, #60]	; (8001fa8 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d804      	bhi.n	8001f7a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	e005      	b.n	8001f86 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	e000      	b.n	8001f86 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001f84:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	01312cff 	.word	0x01312cff
 8001f9c:	02160ebf 	.word	0x02160ebf
 8001fa0:	03938700 	.word	0x03938700
 8001fa4:	05f5e0ff 	.word	0x05f5e0ff
 8001fa8:	08f0d17f 	.word	0x08f0d17f

08001fac <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	e01d      	b.n	8001ff6 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68d9      	ldr	r1, [r3, #12]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4413      	add	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	440b      	add	r3, r1
 8001fca:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	3206      	adds	r2, #6
 8001fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d9de      	bls.n	8001fba <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	f241 132c 	movw	r3, #4396	; 0x112c
 800200a:	4413      	add	r3, r2
 800200c:	2203      	movs	r2, #3
 800200e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68d9      	ldr	r1, [r3, #12]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	f241 1314 	movw	r3, #4372	; 0x1114
 800201c:	4413      	add	r3, r2
 800201e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800202c:	601a      	str	r2, [r3, #0]
}
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800203a:	b480      	push	{r7}
 800203c:	b085      	sub	sp, #20
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	e024      	b.n	8002092 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6919      	ldr	r1, [r3, #16]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4613      	mov	r3, r2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	4413      	add	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	440b      	add	r3, r1
 8002058:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2200      	movs	r2, #0
 8002064:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2200      	movs	r2, #0
 8002070:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2200      	movs	r2, #0
 8002076:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2200      	movs	r2, #0
 800207c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	3310      	adds	r3, #16
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	3301      	adds	r3, #1
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2b03      	cmp	r3, #3
 8002096:	d9d7      	bls.n	8002048 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	f241 1330 	movw	r3, #4400	; 0x1130
 80020be:	4413      	add	r3, r2
 80020c0:	2203      	movs	r2, #3
 80020c2:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6919      	ldr	r1, [r3, #16]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	f241 131c 	movw	r3, #4380	; 0x111c
 80020d0:	4413      	add	r3, r2
 80020d2:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	f241 1328 	movw	r3, #4392	; 0x1128
 80020e4:	4413      	add	r3, r2
 80020e6:	6019      	str	r1, [r3, #0]
}
 80020e8:	bf00      	nop
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b089      	sub	sp, #36	; 0x24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002102:	4b89      	ldr	r3, [pc, #548]	; (8002328 <HAL_GPIO_Init+0x234>)
 8002104:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002106:	e194      	b.n	8002432 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	2101      	movs	r1, #1
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	fa01 f303 	lsl.w	r3, r1, r3
 8002114:	4013      	ands	r3, r2
 8002116:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 8186 	beq.w	800242c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d00b      	beq.n	8002140 <HAL_GPIO_Init+0x4c>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b02      	cmp	r3, #2
 800212e:	d007      	beq.n	8002140 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002134:	2b11      	cmp	r3, #17
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b12      	cmp	r3, #18
 800213e:	d130      	bne.n	80021a2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	2203      	movs	r2, #3
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002176:	2201      	movs	r2, #1
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	091b      	lsrs	r3, r3, #4
 800218c:	f003 0201 	and.w	r2, r3, #1
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	2203      	movs	r2, #3
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d003      	beq.n	80021e2 <HAL_GPIO_Init+0xee>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b12      	cmp	r3, #18
 80021e0:	d123      	bne.n	800222a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	08da      	lsrs	r2, r3, #3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3208      	adds	r2, #8
 80021ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	220f      	movs	r2, #15
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	691a      	ldr	r2, [r3, #16]
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4313      	orrs	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	08da      	lsrs	r2, r3, #3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3208      	adds	r2, #8
 8002224:	69b9      	ldr	r1, [r7, #24]
 8002226:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	2203      	movs	r2, #3
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 0203 	and.w	r2, r3, #3
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 80e0 	beq.w	800242c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226c:	4b2f      	ldr	r3, [pc, #188]	; (800232c <HAL_GPIO_Init+0x238>)
 800226e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002272:	4a2e      	ldr	r2, [pc, #184]	; (800232c <HAL_GPIO_Init+0x238>)
 8002274:	f043 0302 	orr.w	r3, r3, #2
 8002278:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800227c:	4b2b      	ldr	r3, [pc, #172]	; (800232c <HAL_GPIO_Init+0x238>)
 800227e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800228a:	4a29      	ldr	r2, [pc, #164]	; (8002330 <HAL_GPIO_Init+0x23c>)
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	089b      	lsrs	r3, r3, #2
 8002290:	3302      	adds	r3, #2
 8002292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	220f      	movs	r2, #15
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43db      	mvns	r3, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4013      	ands	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a20      	ldr	r2, [pc, #128]	; (8002334 <HAL_GPIO_Init+0x240>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d052      	beq.n	800235c <HAL_GPIO_Init+0x268>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a1f      	ldr	r2, [pc, #124]	; (8002338 <HAL_GPIO_Init+0x244>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d031      	beq.n	8002322 <HAL_GPIO_Init+0x22e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a1e      	ldr	r2, [pc, #120]	; (800233c <HAL_GPIO_Init+0x248>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d02b      	beq.n	800231e <HAL_GPIO_Init+0x22a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a1d      	ldr	r2, [pc, #116]	; (8002340 <HAL_GPIO_Init+0x24c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d025      	beq.n	800231a <HAL_GPIO_Init+0x226>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a1c      	ldr	r2, [pc, #112]	; (8002344 <HAL_GPIO_Init+0x250>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d01f      	beq.n	8002316 <HAL_GPIO_Init+0x222>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a1b      	ldr	r2, [pc, #108]	; (8002348 <HAL_GPIO_Init+0x254>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d019      	beq.n	8002312 <HAL_GPIO_Init+0x21e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a1a      	ldr	r2, [pc, #104]	; (800234c <HAL_GPIO_Init+0x258>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d013      	beq.n	800230e <HAL_GPIO_Init+0x21a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a19      	ldr	r2, [pc, #100]	; (8002350 <HAL_GPIO_Init+0x25c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d00d      	beq.n	800230a <HAL_GPIO_Init+0x216>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a18      	ldr	r2, [pc, #96]	; (8002354 <HAL_GPIO_Init+0x260>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d007      	beq.n	8002306 <HAL_GPIO_Init+0x212>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a17      	ldr	r2, [pc, #92]	; (8002358 <HAL_GPIO_Init+0x264>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d101      	bne.n	8002302 <HAL_GPIO_Init+0x20e>
 80022fe:	2309      	movs	r3, #9
 8002300:	e02d      	b.n	800235e <HAL_GPIO_Init+0x26a>
 8002302:	230a      	movs	r3, #10
 8002304:	e02b      	b.n	800235e <HAL_GPIO_Init+0x26a>
 8002306:	2308      	movs	r3, #8
 8002308:	e029      	b.n	800235e <HAL_GPIO_Init+0x26a>
 800230a:	2307      	movs	r3, #7
 800230c:	e027      	b.n	800235e <HAL_GPIO_Init+0x26a>
 800230e:	2306      	movs	r3, #6
 8002310:	e025      	b.n	800235e <HAL_GPIO_Init+0x26a>
 8002312:	2305      	movs	r3, #5
 8002314:	e023      	b.n	800235e <HAL_GPIO_Init+0x26a>
 8002316:	2304      	movs	r3, #4
 8002318:	e021      	b.n	800235e <HAL_GPIO_Init+0x26a>
 800231a:	2303      	movs	r3, #3
 800231c:	e01f      	b.n	800235e <HAL_GPIO_Init+0x26a>
 800231e:	2302      	movs	r3, #2
 8002320:	e01d      	b.n	800235e <HAL_GPIO_Init+0x26a>
 8002322:	2301      	movs	r3, #1
 8002324:	e01b      	b.n	800235e <HAL_GPIO_Init+0x26a>
 8002326:	bf00      	nop
 8002328:	58000080 	.word	0x58000080
 800232c:	58024400 	.word	0x58024400
 8002330:	58000400 	.word	0x58000400
 8002334:	58020000 	.word	0x58020000
 8002338:	58020400 	.word	0x58020400
 800233c:	58020800 	.word	0x58020800
 8002340:	58020c00 	.word	0x58020c00
 8002344:	58021000 	.word	0x58021000
 8002348:	58021400 	.word	0x58021400
 800234c:	58021800 	.word	0x58021800
 8002350:	58021c00 	.word	0x58021c00
 8002354:	58022000 	.word	0x58022000
 8002358:	58022400 	.word	0x58022400
 800235c:	2300      	movs	r3, #0
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	f002 0203 	and.w	r2, r2, #3
 8002364:	0092      	lsls	r2, r2, #2
 8002366:	4093      	lsls	r3, r2
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800236e:	4938      	ldr	r1, [pc, #224]	; (8002450 <HAL_GPIO_Init+0x35c>)
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	089b      	lsrs	r3, r3, #2
 8002374:	3302      	adds	r3, #2
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	43db      	mvns	r3, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4013      	ands	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	43db      	mvns	r3, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4013      	ands	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80023f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80023fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002424:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	3301      	adds	r3, #1
 8002430:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa22 f303 	lsr.w	r3, r2, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	f47f ae63 	bne.w	8002108 <HAL_GPIO_Init+0x14>
  }
}
 8002442:	bf00      	nop
 8002444:	bf00      	nop
 8002446:	3724      	adds	r7, #36	; 0x24
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	58000400 	.word	0x58000400

08002454 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800245c:	4a08      	ldr	r2, [pc, #32]	; (8002480 <HAL_HSEM_FastTake+0x2c>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3320      	adds	r3, #32
 8002462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002466:	4a07      	ldr	r2, [pc, #28]	; (8002484 <HAL_HSEM_FastTake+0x30>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d101      	bne.n	8002470 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800246c:	2300      	movs	r3, #0
 800246e:	e000      	b.n	8002472 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
}
 8002472:	4618      	mov	r0, r3
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	58026400 	.word	0x58026400
 8002484:	80000300 	.word	0x80000300

08002488 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002492:	4906      	ldr	r1, [pc, #24]	; (80024ac <HAL_HSEM_Release+0x24>)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	58026400 	.word	0x58026400

080024b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024b2:	b08f      	sub	sp, #60	; 0x3c
 80024b4:	af0a      	add	r7, sp, #40	; 0x28
 80024b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e116      	b.n	80026f0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d106      	bne.n	80024e2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7fe fef7 	bl	80012d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2203      	movs	r2, #3
 80024e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d102      	bne.n	80024fc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f004 fd17 	bl	8006f34 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	603b      	str	r3, [r7, #0]
 800250c:	687e      	ldr	r6, [r7, #4]
 800250e:	466d      	mov	r5, sp
 8002510:	f106 0410 	add.w	r4, r6, #16
 8002514:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002516:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002518:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800251a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800251c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002520:	e885 0003 	stmia.w	r5, {r0, r1}
 8002524:	1d33      	adds	r3, r6, #4
 8002526:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002528:	6838      	ldr	r0, [r7, #0]
 800252a:	f004 fc95 	bl	8006e58 <USB_CoreInit>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0d7      	b.n	80026f0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2100      	movs	r1, #0
 8002546:	4618      	mov	r0, r3
 8002548:	f004 fd05 	bl	8006f56 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800254c:	2300      	movs	r3, #0
 800254e:	73fb      	strb	r3, [r7, #15]
 8002550:	e04a      	b.n	80025e8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002552:	7bfa      	ldrb	r2, [r7, #15]
 8002554:	6879      	ldr	r1, [r7, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	1a9b      	subs	r3, r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	440b      	add	r3, r1
 8002560:	333d      	adds	r3, #61	; 0x3d
 8002562:	2201      	movs	r2, #1
 8002564:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002566:	7bfa      	ldrb	r2, [r7, #15]
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	4613      	mov	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	1a9b      	subs	r3, r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	440b      	add	r3, r1
 8002574:	333c      	adds	r3, #60	; 0x3c
 8002576:	7bfa      	ldrb	r2, [r7, #15]
 8002578:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800257a:	7bfa      	ldrb	r2, [r7, #15]
 800257c:	7bfb      	ldrb	r3, [r7, #15]
 800257e:	b298      	uxth	r0, r3
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	1a9b      	subs	r3, r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	3342      	adds	r3, #66	; 0x42
 800258e:	4602      	mov	r2, r0
 8002590:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002592:	7bfa      	ldrb	r2, [r7, #15]
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	1a9b      	subs	r3, r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	440b      	add	r3, r1
 80025a0:	333f      	adds	r3, #63	; 0x3f
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025a6:	7bfa      	ldrb	r2, [r7, #15]
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	4613      	mov	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	1a9b      	subs	r3, r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	440b      	add	r3, r1
 80025b4:	3344      	adds	r3, #68	; 0x44
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025ba:	7bfa      	ldrb	r2, [r7, #15]
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	1a9b      	subs	r3, r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	3348      	adds	r3, #72	; 0x48
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025ce:	7bfa      	ldrb	r2, [r7, #15]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	1a9b      	subs	r3, r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	3350      	adds	r3, #80	; 0x50
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	3301      	adds	r3, #1
 80025e6:	73fb      	strb	r3, [r7, #15]
 80025e8:	7bfa      	ldrb	r2, [r7, #15]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d3af      	bcc.n	8002552 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025f2:	2300      	movs	r3, #0
 80025f4:	73fb      	strb	r3, [r7, #15]
 80025f6:	e044      	b.n	8002682 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025f8:	7bfa      	ldrb	r2, [r7, #15]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800260a:	2200      	movs	r2, #0
 800260c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800260e:	7bfa      	ldrb	r2, [r7, #15]
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	4613      	mov	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	1a9b      	subs	r3, r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002620:	7bfa      	ldrb	r2, [r7, #15]
 8002622:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002624:	7bfa      	ldrb	r2, [r7, #15]
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	1a9b      	subs	r3, r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800263a:	7bfa      	ldrb	r2, [r7, #15]
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	1a9b      	subs	r3, r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	440b      	add	r3, r1
 8002648:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002650:	7bfa      	ldrb	r2, [r7, #15]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	1a9b      	subs	r3, r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002666:	7bfa      	ldrb	r2, [r7, #15]
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	1a9b      	subs	r3, r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	440b      	add	r3, r1
 8002674:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	3301      	adds	r3, #1
 8002680:	73fb      	strb	r3, [r7, #15]
 8002682:	7bfa      	ldrb	r2, [r7, #15]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	429a      	cmp	r2, r3
 800268a:	d3b5      	bcc.n	80025f8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	603b      	str	r3, [r7, #0]
 8002692:	687e      	ldr	r6, [r7, #4]
 8002694:	466d      	mov	r5, sp
 8002696:	f106 0410 	add.w	r4, r6, #16
 800269a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800269c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800269e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80026aa:	1d33      	adds	r3, r6, #4
 80026ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026ae:	6838      	ldr	r0, [r7, #0]
 80026b0:	f004 fc7c 	bl	8006fac <USB_DevInit>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d005      	beq.n	80026c6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2202      	movs	r2, #2
 80026be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e014      	b.n	80026f0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d102      	bne.n	80026e4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f80a 	bl	80026f8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f004 fe1e 	bl	800732a <USB_DevDisconnect>

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002726:	4b05      	ldr	r3, [pc, #20]	; (800273c <HAL_PCDEx_ActivateLPM+0x44>)
 8002728:	4313      	orrs	r3, r2
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	10000003 	.word	0x10000003

08002740 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002748:	4b29      	ldr	r3, [pc, #164]	; (80027f0 <HAL_PWREx_ConfigSupply+0xb0>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	2b06      	cmp	r3, #6
 8002752:	d00a      	beq.n	800276a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002754:	4b26      	ldr	r3, [pc, #152]	; (80027f0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	429a      	cmp	r2, r3
 8002760:	d001      	beq.n	8002766 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e040      	b.n	80027e8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	e03e      	b.n	80027e8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800276a:	4b21      	ldr	r3, [pc, #132]	; (80027f0 <HAL_PWREx_ConfigSupply+0xb0>)
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002772:	491f      	ldr	r1, [pc, #124]	; (80027f0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4313      	orrs	r3, r2
 8002778:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800277a:	f7fe ff45 	bl	8001608 <HAL_GetTick>
 800277e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002780:	e009      	b.n	8002796 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002782:	f7fe ff41 	bl	8001608 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002790:	d901      	bls.n	8002796 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e028      	b.n	80027e8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002796:	4b16      	ldr	r3, [pc, #88]	; (80027f0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800279e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027a2:	d1ee      	bne.n	8002782 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b1e      	cmp	r3, #30
 80027a8:	d008      	beq.n	80027bc <HAL_PWREx_ConfigSupply+0x7c>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b2e      	cmp	r3, #46	; 0x2e
 80027ae:	d005      	beq.n	80027bc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b1d      	cmp	r3, #29
 80027b4:	d002      	beq.n	80027bc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b2d      	cmp	r3, #45	; 0x2d
 80027ba:	d114      	bne.n	80027e6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80027bc:	f7fe ff24 	bl	8001608 <HAL_GetTick>
 80027c0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80027c2:	e009      	b.n	80027d8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027c4:	f7fe ff20 	bl	8001608 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027d2:	d901      	bls.n	80027d8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e007      	b.n	80027e8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80027d8:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <HAL_PWREx_ConfigSupply+0xb0>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027e4:	d1ee      	bne.n	80027c4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	58024800 	.word	0x58024800

080027f4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	4a04      	ldr	r2, [pc, #16]	; (8002810 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80027fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002802:	60d3      	str	r3, [r2, #12]
}
 8002804:	bf00      	nop
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	58024800 	.word	0x58024800

08002814 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08c      	sub	sp, #48	; 0x30
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e3ff      	b.n	8003026 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 8087 	beq.w	8002942 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002834:	4b99      	ldr	r3, [pc, #612]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800283c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800283e:	4b97      	ldr	r3, [pc, #604]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002842:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002846:	2b10      	cmp	r3, #16
 8002848:	d007      	beq.n	800285a <HAL_RCC_OscConfig+0x46>
 800284a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284c:	2b18      	cmp	r3, #24
 800284e:	d110      	bne.n	8002872 <HAL_RCC_OscConfig+0x5e>
 8002850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d10b      	bne.n	8002872 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800285a:	4b90      	ldr	r3, [pc, #576]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d06c      	beq.n	8002940 <HAL_RCC_OscConfig+0x12c>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d168      	bne.n	8002940 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e3d9      	b.n	8003026 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800287a:	d106      	bne.n	800288a <HAL_RCC_OscConfig+0x76>
 800287c:	4b87      	ldr	r3, [pc, #540]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a86      	ldr	r2, [pc, #536]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	e02e      	b.n	80028e8 <HAL_RCC_OscConfig+0xd4>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10c      	bne.n	80028ac <HAL_RCC_OscConfig+0x98>
 8002892:	4b82      	ldr	r3, [pc, #520]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a81      	ldr	r2, [pc, #516]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	4b7f      	ldr	r3, [pc, #508]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a7e      	ldr	r2, [pc, #504]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 80028a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	e01d      	b.n	80028e8 <HAL_RCC_OscConfig+0xd4>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCC_OscConfig+0xbc>
 80028b6:	4b79      	ldr	r3, [pc, #484]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a78      	ldr	r2, [pc, #480]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 80028bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	4b76      	ldr	r3, [pc, #472]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a75      	ldr	r2, [pc, #468]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 80028c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	e00b      	b.n	80028e8 <HAL_RCC_OscConfig+0xd4>
 80028d0:	4b72      	ldr	r3, [pc, #456]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a71      	ldr	r2, [pc, #452]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 80028d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	4b6f      	ldr	r3, [pc, #444]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a6e      	ldr	r2, [pc, #440]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 80028e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d013      	beq.n	8002918 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f0:	f7fe fe8a 	bl	8001608 <HAL_GetTick>
 80028f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028f8:	f7fe fe86 	bl	8001608 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b64      	cmp	r3, #100	; 0x64
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e38d      	b.n	8003026 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800290a:	4b64      	ldr	r3, [pc, #400]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0xe4>
 8002916:	e014      	b.n	8002942 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7fe fe76 	bl	8001608 <HAL_GetTick>
 800291c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002920:	f7fe fe72 	bl	8001608 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b64      	cmp	r3, #100	; 0x64
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e379      	b.n	8003026 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002932:	4b5a      	ldr	r3, [pc, #360]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0x10c>
 800293e:	e000      	b.n	8002942 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 80ae 	beq.w	8002aac <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002950:	4b52      	ldr	r3, [pc, #328]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002958:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800295a:	4b50      	ldr	r3, [pc, #320]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 800295c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d007      	beq.n	8002976 <HAL_RCC_OscConfig+0x162>
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	2b18      	cmp	r3, #24
 800296a:	d13a      	bne.n	80029e2 <HAL_RCC_OscConfig+0x1ce>
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d135      	bne.n	80029e2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002976:	4b49      	ldr	r3, [pc, #292]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	2b00      	cmp	r3, #0
 8002980:	d005      	beq.n	800298e <HAL_RCC_OscConfig+0x17a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e34b      	b.n	8003026 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298e:	f7fe fe6b 	bl	8001668 <HAL_GetREVID>
 8002992:	4603      	mov	r3, r0
 8002994:	f241 0203 	movw	r2, #4099	; 0x1003
 8002998:	4293      	cmp	r3, r2
 800299a:	d817      	bhi.n	80029cc <HAL_RCC_OscConfig+0x1b8>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	2b40      	cmp	r3, #64	; 0x40
 80029a2:	d108      	bne.n	80029b6 <HAL_RCC_OscConfig+0x1a2>
 80029a4:	4b3d      	ldr	r3, [pc, #244]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80029ac:	4a3b      	ldr	r2, [pc, #236]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 80029ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029b4:	e07a      	b.n	8002aac <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b6:	4b39      	ldr	r3, [pc, #228]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	031b      	lsls	r3, r3, #12
 80029c4:	4935      	ldr	r1, [pc, #212]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029ca:	e06f      	b.n	8002aac <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029cc:	4b33      	ldr	r3, [pc, #204]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	061b      	lsls	r3, r3, #24
 80029da:	4930      	ldr	r1, [pc, #192]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029e0:	e064      	b.n	8002aac <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d045      	beq.n	8002a76 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029ea:	4b2c      	ldr	r3, [pc, #176]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 0219 	bic.w	r2, r3, #25
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	4929      	ldr	r1, [pc, #164]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fc:	f7fe fe04 	bl	8001608 <HAL_GetTick>
 8002a00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a04:	f7fe fe00 	bl	8001608 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e307      	b.n	8003026 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a16:	4b21      	ldr	r3, [pc, #132]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a22:	f7fe fe21 	bl	8001668 <HAL_GetREVID>
 8002a26:	4603      	mov	r3, r0
 8002a28:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d817      	bhi.n	8002a60 <HAL_RCC_OscConfig+0x24c>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	2b40      	cmp	r3, #64	; 0x40
 8002a36:	d108      	bne.n	8002a4a <HAL_RCC_OscConfig+0x236>
 8002a38:	4b18      	ldr	r3, [pc, #96]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a40:	4a16      	ldr	r2, [pc, #88]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a46:	6053      	str	r3, [r2, #4]
 8002a48:	e030      	b.n	8002aac <HAL_RCC_OscConfig+0x298>
 8002a4a:	4b14      	ldr	r3, [pc, #80]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	031b      	lsls	r3, r3, #12
 8002a58:	4910      	ldr	r1, [pc, #64]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	604b      	str	r3, [r1, #4]
 8002a5e:	e025      	b.n	8002aac <HAL_RCC_OscConfig+0x298>
 8002a60:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	061b      	lsls	r3, r3, #24
 8002a6e:	490b      	ldr	r1, [pc, #44]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	604b      	str	r3, [r1, #4]
 8002a74:	e01a      	b.n	8002aac <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a76:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a08      	ldr	r2, [pc, #32]	; (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002a7c:	f023 0301 	bic.w	r3, r3, #1
 8002a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a82:	f7fe fdc1 	bl	8001608 <HAL_GetTick>
 8002a86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a88:	e00a      	b.n	8002aa0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a8a:	f7fe fdbd 	bl	8001608 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d903      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e2c4      	b.n	8003026 <HAL_RCC_OscConfig+0x812>
 8002a9c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002aa0:	4ba4      	ldr	r3, [pc, #656]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1ee      	bne.n	8002a8a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 80a9 	beq.w	8002c0c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aba:	4b9e      	ldr	r3, [pc, #632]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ac2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ac4:	4b9b      	ldr	r3, [pc, #620]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d007      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x2cc>
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	2b18      	cmp	r3, #24
 8002ad4:	d13a      	bne.n	8002b4c <HAL_RCC_OscConfig+0x338>
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d135      	bne.n	8002b4c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ae0:	4b94      	ldr	r3, [pc, #592]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <HAL_RCC_OscConfig+0x2e4>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	2b80      	cmp	r3, #128	; 0x80
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e296      	b.n	8003026 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002af8:	f7fe fdb6 	bl	8001668 <HAL_GetREVID>
 8002afc:	4603      	mov	r3, r0
 8002afe:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d817      	bhi.n	8002b36 <HAL_RCC_OscConfig+0x322>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	2b20      	cmp	r3, #32
 8002b0c:	d108      	bne.n	8002b20 <HAL_RCC_OscConfig+0x30c>
 8002b0e:	4b89      	ldr	r3, [pc, #548]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002b16:	4a87      	ldr	r2, [pc, #540]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002b18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b1c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b1e:	e075      	b.n	8002c0c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b20:	4b84      	ldr	r3, [pc, #528]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	069b      	lsls	r3, r3, #26
 8002b2e:	4981      	ldr	r1, [pc, #516]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b34:	e06a      	b.n	8002c0c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b36:	4b7f      	ldr	r3, [pc, #508]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	061b      	lsls	r3, r3, #24
 8002b44:	497b      	ldr	r1, [pc, #492]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b4a:	e05f      	b.n	8002c0c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d042      	beq.n	8002bda <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002b54:	4b77      	ldr	r3, [pc, #476]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a76      	ldr	r2, [pc, #472]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b60:	f7fe fd52 	bl	8001608 <HAL_GetTick>
 8002b64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002b68:	f7fe fd4e 	bl	8001608 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e255      	b.n	8003026 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b7a:	4b6e      	ldr	r3, [pc, #440]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f0      	beq.n	8002b68 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b86:	f7fe fd6f 	bl	8001668 <HAL_GetREVID>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d817      	bhi.n	8002bc4 <HAL_RCC_OscConfig+0x3b0>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	d108      	bne.n	8002bae <HAL_RCC_OscConfig+0x39a>
 8002b9c:	4b65      	ldr	r3, [pc, #404]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002ba4:	4a63      	ldr	r2, [pc, #396]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002ba6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002baa:	6053      	str	r3, [r2, #4]
 8002bac:	e02e      	b.n	8002c0c <HAL_RCC_OscConfig+0x3f8>
 8002bae:	4b61      	ldr	r3, [pc, #388]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	069b      	lsls	r3, r3, #26
 8002bbc:	495d      	ldr	r1, [pc, #372]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	604b      	str	r3, [r1, #4]
 8002bc2:	e023      	b.n	8002c0c <HAL_RCC_OscConfig+0x3f8>
 8002bc4:	4b5b      	ldr	r3, [pc, #364]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	061b      	lsls	r3, r3, #24
 8002bd2:	4958      	ldr	r1, [pc, #352]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60cb      	str	r3, [r1, #12]
 8002bd8:	e018      	b.n	8002c0c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002bda:	4b56      	ldr	r3, [pc, #344]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a55      	ldr	r2, [pc, #340]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002be0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be6:	f7fe fd0f 	bl	8001608 <HAL_GetTick>
 8002bea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002bee:	f7fe fd0b 	bl	8001608 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e212      	b.n	8003026 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c00:	4b4c      	ldr	r3, [pc, #304]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1f0      	bne.n	8002bee <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d036      	beq.n	8002c86 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d019      	beq.n	8002c54 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c20:	4b44      	ldr	r3, [pc, #272]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c24:	4a43      	ldr	r2, [pc, #268]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2c:	f7fe fcec 	bl	8001608 <HAL_GetTick>
 8002c30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c34:	f7fe fce8 	bl	8001608 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e1ef      	b.n	8003026 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c46:	4b3b      	ldr	r3, [pc, #236]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x420>
 8002c52:	e018      	b.n	8002c86 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c54:	4b37      	ldr	r3, [pc, #220]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c58:	4a36      	ldr	r2, [pc, #216]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002c5a:	f023 0301 	bic.w	r3, r3, #1
 8002c5e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c60:	f7fe fcd2 	bl	8001608 <HAL_GetTick>
 8002c64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c68:	f7fe fcce 	bl	8001608 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e1d5      	b.n	8003026 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c7a:	4b2e      	ldr	r3, [pc, #184]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d036      	beq.n	8002d00 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d019      	beq.n	8002cce <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c9a:	4b26      	ldr	r3, [pc, #152]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a25      	ldr	r2, [pc, #148]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002ca0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ca4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ca6:	f7fe fcaf 	bl	8001608 <HAL_GetTick>
 8002caa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002cae:	f7fe fcab 	bl	8001608 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e1b2      	b.n	8003026 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cc0:	4b1c      	ldr	r3, [pc, #112]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x49a>
 8002ccc:	e018      	b.n	8002d00 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cce:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a18      	ldr	r2, [pc, #96]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002cd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cd8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002cda:	f7fe fc95 	bl	8001608 <HAL_GetTick>
 8002cde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002ce2:	f7fe fc91 	bl	8001608 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e198      	b.n	8003026 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002cf4:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <HAL_RCC_OscConfig+0x520>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1f0      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 8085 	beq.w	8002e18 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d0e:	4b0a      	ldr	r3, [pc, #40]	; (8002d38 <HAL_RCC_OscConfig+0x524>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <HAL_RCC_OscConfig+0x524>)
 8002d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d1a:	f7fe fc75 	bl	8001608 <HAL_GetTick>
 8002d1e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d20:	e00c      	b.n	8002d3c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d22:	f7fe fc71 	bl	8001608 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b64      	cmp	r3, #100	; 0x64
 8002d2e:	d905      	bls.n	8002d3c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e178      	b.n	8003026 <HAL_RCC_OscConfig+0x812>
 8002d34:	58024400 	.word	0x58024400
 8002d38:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d3c:	4b96      	ldr	r3, [pc, #600]	; (8002f98 <HAL_RCC_OscConfig+0x784>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0ec      	beq.n	8002d22 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d106      	bne.n	8002d5e <HAL_RCC_OscConfig+0x54a>
 8002d50:	4b92      	ldr	r3, [pc, #584]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d54:	4a91      	ldr	r2, [pc, #580]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d5c:	e02d      	b.n	8002dba <HAL_RCC_OscConfig+0x5a6>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10c      	bne.n	8002d80 <HAL_RCC_OscConfig+0x56c>
 8002d66:	4b8d      	ldr	r3, [pc, #564]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6a:	4a8c      	ldr	r2, [pc, #560]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002d6c:	f023 0301 	bic.w	r3, r3, #1
 8002d70:	6713      	str	r3, [r2, #112]	; 0x70
 8002d72:	4b8a      	ldr	r3, [pc, #552]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d76:	4a89      	ldr	r2, [pc, #548]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002d78:	f023 0304 	bic.w	r3, r3, #4
 8002d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d7e:	e01c      	b.n	8002dba <HAL_RCC_OscConfig+0x5a6>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	2b05      	cmp	r3, #5
 8002d86:	d10c      	bne.n	8002da2 <HAL_RCC_OscConfig+0x58e>
 8002d88:	4b84      	ldr	r3, [pc, #528]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8c:	4a83      	ldr	r2, [pc, #524]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002d8e:	f043 0304 	orr.w	r3, r3, #4
 8002d92:	6713      	str	r3, [r2, #112]	; 0x70
 8002d94:	4b81      	ldr	r3, [pc, #516]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d98:	4a80      	ldr	r2, [pc, #512]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002d9a:	f043 0301 	orr.w	r3, r3, #1
 8002d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002da0:	e00b      	b.n	8002dba <HAL_RCC_OscConfig+0x5a6>
 8002da2:	4b7e      	ldr	r3, [pc, #504]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da6:	4a7d      	ldr	r2, [pc, #500]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002da8:	f023 0301 	bic.w	r3, r3, #1
 8002dac:	6713      	str	r3, [r2, #112]	; 0x70
 8002dae:	4b7b      	ldr	r3, [pc, #492]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db2:	4a7a      	ldr	r2, [pc, #488]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002db4:	f023 0304 	bic.w	r3, r3, #4
 8002db8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d015      	beq.n	8002dee <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc2:	f7fe fc21 	bl	8001608 <HAL_GetTick>
 8002dc6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dc8:	e00a      	b.n	8002de0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dca:	f7fe fc1d 	bl	8001608 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e122      	b.n	8003026 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002de0:	4b6e      	ldr	r3, [pc, #440]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0ee      	beq.n	8002dca <HAL_RCC_OscConfig+0x5b6>
 8002dec:	e014      	b.n	8002e18 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dee:	f7fe fc0b 	bl	8001608 <HAL_GetTick>
 8002df2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002df4:	e00a      	b.n	8002e0c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df6:	f7fe fc07 	bl	8001608 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e10c      	b.n	8003026 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e0c:	4b63      	ldr	r3, [pc, #396]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1ee      	bne.n	8002df6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 8101 	beq.w	8003024 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002e22:	4b5e      	ldr	r3, [pc, #376]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e2a:	2b18      	cmp	r3, #24
 8002e2c:	f000 80bc 	beq.w	8002fa8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	f040 8095 	bne.w	8002f64 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3a:	4b58      	ldr	r3, [pc, #352]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a57      	ldr	r2, [pc, #348]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002e40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e46:	f7fe fbdf 	bl	8001608 <HAL_GetTick>
 8002e4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e4e:	f7fe fbdb 	bl	8001608 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e0e2      	b.n	8003026 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e60:	4b4e      	ldr	r3, [pc, #312]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1f0      	bne.n	8002e4e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e6c:	4b4b      	ldr	r3, [pc, #300]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002e6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e70:	4b4b      	ldr	r3, [pc, #300]	; (8002fa0 <HAL_RCC_OscConfig+0x78c>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e7c:	0112      	lsls	r2, r2, #4
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	4946      	ldr	r1, [pc, #280]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	628b      	str	r3, [r1, #40]	; 0x28
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e94:	3b01      	subs	r3, #1
 8002e96:	025b      	lsls	r3, r3, #9
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	041b      	lsls	r3, r3, #16
 8002ea4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	061b      	lsls	r3, r3, #24
 8002eb2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002eb6:	4939      	ldr	r1, [pc, #228]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002ebc:	4b37      	ldr	r3, [pc, #220]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	4a36      	ldr	r2, [pc, #216]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002ec2:	f023 0301 	bic.w	r3, r3, #1
 8002ec6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ec8:	4b34      	ldr	r3, [pc, #208]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002eca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ecc:	4b35      	ldr	r3, [pc, #212]	; (8002fa4 <HAL_RCC_OscConfig+0x790>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ed4:	00d2      	lsls	r2, r2, #3
 8002ed6:	4931      	ldr	r1, [pc, #196]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002edc:	4b2f      	ldr	r3, [pc, #188]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	f023 020c 	bic.w	r2, r3, #12
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	492c      	ldr	r1, [pc, #176]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002eee:	4b2b      	ldr	r3, [pc, #172]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef2:	f023 0202 	bic.w	r2, r3, #2
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efa:	4928      	ldr	r1, [pc, #160]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f00:	4b26      	ldr	r3, [pc, #152]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	4a25      	ldr	r2, [pc, #148]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f0c:	4b23      	ldr	r3, [pc, #140]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	4a22      	ldr	r2, [pc, #136]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f18:	4b20      	ldr	r3, [pc, #128]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	4a1f      	ldr	r2, [pc, #124]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002f1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002f24:	4b1d      	ldr	r3, [pc, #116]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	4a1c      	ldr	r2, [pc, #112]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f30:	4b1a      	ldr	r3, [pc, #104]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a19      	ldr	r2, [pc, #100]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002f36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3c:	f7fe fb64 	bl	8001608 <HAL_GetTick>
 8002f40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f44:	f7fe fb60 	bl	8001608 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e067      	b.n	8003026 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f56:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0x730>
 8002f62:	e05f      	b.n	8003024 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f64:	4b0d      	ldr	r3, [pc, #52]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a0c      	ldr	r2, [pc, #48]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002f6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f70:	f7fe fb4a 	bl	8001608 <HAL_GetTick>
 8002f74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f78:	f7fe fb46 	bl	8001608 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e04d      	b.n	8003026 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f8a:	4b04      	ldr	r3, [pc, #16]	; (8002f9c <HAL_RCC_OscConfig+0x788>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f0      	bne.n	8002f78 <HAL_RCC_OscConfig+0x764>
 8002f96:	e045      	b.n	8003024 <HAL_RCC_OscConfig+0x810>
 8002f98:	58024800 	.word	0x58024800
 8002f9c:	58024400 	.word	0x58024400
 8002fa0:	fffffc0c 	.word	0xfffffc0c
 8002fa4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002fa8:	4b21      	ldr	r3, [pc, #132]	; (8003030 <HAL_RCC_OscConfig+0x81c>)
 8002faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002fae:	4b20      	ldr	r3, [pc, #128]	; (8003030 <HAL_RCC_OscConfig+0x81c>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d031      	beq.n	8003020 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	f003 0203 	and.w	r2, r3, #3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d12a      	bne.n	8003020 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d122      	bne.n	8003020 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d11a      	bne.n	8003020 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	0a5b      	lsrs	r3, r3, #9
 8002fee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d111      	bne.n	8003020 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	0c1b      	lsrs	r3, r3, #16
 8003000:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003008:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800300a:	429a      	cmp	r2, r3
 800300c:	d108      	bne.n	8003020 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	0e1b      	lsrs	r3, r3, #24
 8003012:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800301c:	429a      	cmp	r2, r3
 800301e:	d001      	beq.n	8003024 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e000      	b.n	8003026 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3730      	adds	r7, #48	; 0x30
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	58024400 	.word	0x58024400

08003034 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e19c      	b.n	8003382 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003048:	4b8a      	ldr	r3, [pc, #552]	; (8003274 <HAL_RCC_ClockConfig+0x240>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 030f 	and.w	r3, r3, #15
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d910      	bls.n	8003078 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003056:	4b87      	ldr	r3, [pc, #540]	; (8003274 <HAL_RCC_ClockConfig+0x240>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 020f 	bic.w	r2, r3, #15
 800305e:	4985      	ldr	r1, [pc, #532]	; (8003274 <HAL_RCC_ClockConfig+0x240>)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	4313      	orrs	r3, r2
 8003064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003066:	4b83      	ldr	r3, [pc, #524]	; (8003274 <HAL_RCC_ClockConfig+0x240>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e184      	b.n	8003382 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	d010      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	4b7b      	ldr	r3, [pc, #492]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003090:	429a      	cmp	r2, r3
 8003092:	d908      	bls.n	80030a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003094:	4b78      	ldr	r3, [pc, #480]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	4975      	ldr	r1, [pc, #468]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d010      	beq.n	80030d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695a      	ldr	r2, [r3, #20]
 80030b6:	4b70      	ldr	r3, [pc, #448]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030be:	429a      	cmp	r2, r3
 80030c0:	d908      	bls.n	80030d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030c2:	4b6d      	ldr	r3, [pc, #436]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	496a      	ldr	r1, [pc, #424]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d010      	beq.n	8003102 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699a      	ldr	r2, [r3, #24]
 80030e4:	4b64      	ldr	r3, [pc, #400]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d908      	bls.n	8003102 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030f0:	4b61      	ldr	r3, [pc, #388]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	495e      	ldr	r1, [pc, #376]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0320 	and.w	r3, r3, #32
 800310a:	2b00      	cmp	r3, #0
 800310c:	d010      	beq.n	8003130 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69da      	ldr	r2, [r3, #28]
 8003112:	4b59      	ldr	r3, [pc, #356]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800311a:	429a      	cmp	r2, r3
 800311c:	d908      	bls.n	8003130 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800311e:	4b56      	ldr	r3, [pc, #344]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	4953      	ldr	r1, [pc, #332]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 800312c:	4313      	orrs	r3, r2
 800312e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d010      	beq.n	800315e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	4b4d      	ldr	r3, [pc, #308]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	429a      	cmp	r2, r3
 800314a:	d908      	bls.n	800315e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800314c:	4b4a      	ldr	r3, [pc, #296]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	f023 020f 	bic.w	r2, r3, #15
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	4947      	ldr	r1, [pc, #284]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 800315a:	4313      	orrs	r3, r2
 800315c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d055      	beq.n	8003216 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800316a:	4b43      	ldr	r3, [pc, #268]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	4940      	ldr	r1, [pc, #256]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 8003178:	4313      	orrs	r3, r2
 800317a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b02      	cmp	r3, #2
 8003182:	d107      	bne.n	8003194 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003184:	4b3c      	ldr	r3, [pc, #240]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d121      	bne.n	80031d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0f6      	b.n	8003382 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b03      	cmp	r3, #3
 800319a:	d107      	bne.n	80031ac <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800319c:	4b36      	ldr	r3, [pc, #216]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d115      	bne.n	80031d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e0ea      	b.n	8003382 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d107      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031b4:	4b30      	ldr	r3, [pc, #192]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d109      	bne.n	80031d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0de      	b.n	8003382 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031c4:	4b2c      	ldr	r3, [pc, #176]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e0d6      	b.n	8003382 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031d4:	4b28      	ldr	r3, [pc, #160]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	f023 0207 	bic.w	r2, r3, #7
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	4925      	ldr	r1, [pc, #148]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e6:	f7fe fa0f 	bl	8001608 <HAL_GetTick>
 80031ea:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ec:	e00a      	b.n	8003204 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ee:	f7fe fa0b 	bl	8001608 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e0be      	b.n	8003382 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003204:	4b1c      	ldr	r3, [pc, #112]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	429a      	cmp	r2, r3
 8003214:	d1eb      	bne.n	80031ee <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d010      	beq.n	8003244 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	4b14      	ldr	r3, [pc, #80]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	429a      	cmp	r2, r3
 8003230:	d208      	bcs.n	8003244 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003232:	4b11      	ldr	r3, [pc, #68]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	f023 020f 	bic.w	r2, r3, #15
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	490e      	ldr	r1, [pc, #56]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 8003240:	4313      	orrs	r3, r2
 8003242:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003244:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <HAL_RCC_ClockConfig+0x240>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d214      	bcs.n	800327c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003252:	4b08      	ldr	r3, [pc, #32]	; (8003274 <HAL_RCC_ClockConfig+0x240>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f023 020f 	bic.w	r2, r3, #15
 800325a:	4906      	ldr	r1, [pc, #24]	; (8003274 <HAL_RCC_ClockConfig+0x240>)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	4313      	orrs	r3, r2
 8003260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003262:	4b04      	ldr	r3, [pc, #16]	; (8003274 <HAL_RCC_ClockConfig+0x240>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	429a      	cmp	r2, r3
 800326e:	d005      	beq.n	800327c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e086      	b.n	8003382 <HAL_RCC_ClockConfig+0x34e>
 8003274:	52002000 	.word	0x52002000
 8003278:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d010      	beq.n	80032aa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691a      	ldr	r2, [r3, #16]
 800328c:	4b3f      	ldr	r3, [pc, #252]	; (800338c <HAL_RCC_ClockConfig+0x358>)
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003294:	429a      	cmp	r2, r3
 8003296:	d208      	bcs.n	80032aa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003298:	4b3c      	ldr	r3, [pc, #240]	; (800338c <HAL_RCC_ClockConfig+0x358>)
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	4939      	ldr	r1, [pc, #228]	; (800338c <HAL_RCC_ClockConfig+0x358>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d010      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695a      	ldr	r2, [r3, #20]
 80032ba:	4b34      	ldr	r3, [pc, #208]	; (800338c <HAL_RCC_ClockConfig+0x358>)
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d208      	bcs.n	80032d8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032c6:	4b31      	ldr	r3, [pc, #196]	; (800338c <HAL_RCC_ClockConfig+0x358>)
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	492e      	ldr	r1, [pc, #184]	; (800338c <HAL_RCC_ClockConfig+0x358>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0310 	and.w	r3, r3, #16
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d010      	beq.n	8003306 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699a      	ldr	r2, [r3, #24]
 80032e8:	4b28      	ldr	r3, [pc, #160]	; (800338c <HAL_RCC_ClockConfig+0x358>)
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d208      	bcs.n	8003306 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032f4:	4b25      	ldr	r3, [pc, #148]	; (800338c <HAL_RCC_ClockConfig+0x358>)
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	4922      	ldr	r1, [pc, #136]	; (800338c <HAL_RCC_ClockConfig+0x358>)
 8003302:	4313      	orrs	r3, r2
 8003304:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0320 	and.w	r3, r3, #32
 800330e:	2b00      	cmp	r3, #0
 8003310:	d010      	beq.n	8003334 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69da      	ldr	r2, [r3, #28]
 8003316:	4b1d      	ldr	r3, [pc, #116]	; (800338c <HAL_RCC_ClockConfig+0x358>)
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800331e:	429a      	cmp	r2, r3
 8003320:	d208      	bcs.n	8003334 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003322:	4b1a      	ldr	r3, [pc, #104]	; (800338c <HAL_RCC_ClockConfig+0x358>)
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	4917      	ldr	r1, [pc, #92]	; (800338c <HAL_RCC_ClockConfig+0x358>)
 8003330:	4313      	orrs	r3, r2
 8003332:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003334:	f000 f834 	bl	80033a0 <HAL_RCC_GetSysClockFreq>
 8003338:	4602      	mov	r2, r0
 800333a:	4b14      	ldr	r3, [pc, #80]	; (800338c <HAL_RCC_ClockConfig+0x358>)
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	0a1b      	lsrs	r3, r3, #8
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	4912      	ldr	r1, [pc, #72]	; (8003390 <HAL_RCC_ClockConfig+0x35c>)
 8003346:	5ccb      	ldrb	r3, [r1, r3]
 8003348:	f003 031f 	and.w	r3, r3, #31
 800334c:	fa22 f303 	lsr.w	r3, r2, r3
 8003350:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003352:	4b0e      	ldr	r3, [pc, #56]	; (800338c <HAL_RCC_ClockConfig+0x358>)
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	4a0d      	ldr	r2, [pc, #52]	; (8003390 <HAL_RCC_ClockConfig+0x35c>)
 800335c:	5cd3      	ldrb	r3, [r2, r3]
 800335e:	f003 031f 	and.w	r3, r3, #31
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	fa22 f303 	lsr.w	r3, r2, r3
 8003368:	4a0a      	ldr	r2, [pc, #40]	; (8003394 <HAL_RCC_ClockConfig+0x360>)
 800336a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800336c:	4a0a      	ldr	r2, [pc, #40]	; (8003398 <HAL_RCC_ClockConfig+0x364>)
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003372:	4b0a      	ldr	r3, [pc, #40]	; (800339c <HAL_RCC_ClockConfig+0x368>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe f8fc 	bl	8001574 <HAL_InitTick>
 800337c:	4603      	mov	r3, r0
 800337e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003380:	7bfb      	ldrb	r3, [r7, #15]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	58024400 	.word	0x58024400
 8003390:	0800a9b8 	.word	0x0800a9b8
 8003394:	24000004 	.word	0x24000004
 8003398:	24000000 	.word	0x24000000
 800339c:	24000008 	.word	0x24000008

080033a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b089      	sub	sp, #36	; 0x24
 80033a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033a6:	4bb3      	ldr	r3, [pc, #716]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033ae:	2b18      	cmp	r3, #24
 80033b0:	f200 8155 	bhi.w	800365e <HAL_RCC_GetSysClockFreq+0x2be>
 80033b4:	a201      	add	r2, pc, #4	; (adr r2, 80033bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80033b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ba:	bf00      	nop
 80033bc:	08003421 	.word	0x08003421
 80033c0:	0800365f 	.word	0x0800365f
 80033c4:	0800365f 	.word	0x0800365f
 80033c8:	0800365f 	.word	0x0800365f
 80033cc:	0800365f 	.word	0x0800365f
 80033d0:	0800365f 	.word	0x0800365f
 80033d4:	0800365f 	.word	0x0800365f
 80033d8:	0800365f 	.word	0x0800365f
 80033dc:	08003447 	.word	0x08003447
 80033e0:	0800365f 	.word	0x0800365f
 80033e4:	0800365f 	.word	0x0800365f
 80033e8:	0800365f 	.word	0x0800365f
 80033ec:	0800365f 	.word	0x0800365f
 80033f0:	0800365f 	.word	0x0800365f
 80033f4:	0800365f 	.word	0x0800365f
 80033f8:	0800365f 	.word	0x0800365f
 80033fc:	0800344d 	.word	0x0800344d
 8003400:	0800365f 	.word	0x0800365f
 8003404:	0800365f 	.word	0x0800365f
 8003408:	0800365f 	.word	0x0800365f
 800340c:	0800365f 	.word	0x0800365f
 8003410:	0800365f 	.word	0x0800365f
 8003414:	0800365f 	.word	0x0800365f
 8003418:	0800365f 	.word	0x0800365f
 800341c:	08003453 	.word	0x08003453
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003420:	4b94      	ldr	r3, [pc, #592]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0320 	and.w	r3, r3, #32
 8003428:	2b00      	cmp	r3, #0
 800342a:	d009      	beq.n	8003440 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800342c:	4b91      	ldr	r3, [pc, #580]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	08db      	lsrs	r3, r3, #3
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	4a90      	ldr	r2, [pc, #576]	; (8003678 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003438:	fa22 f303 	lsr.w	r3, r2, r3
 800343c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800343e:	e111      	b.n	8003664 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003440:	4b8d      	ldr	r3, [pc, #564]	; (8003678 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003442:	61bb      	str	r3, [r7, #24]
    break;
 8003444:	e10e      	b.n	8003664 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003446:	4b8d      	ldr	r3, [pc, #564]	; (800367c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003448:	61bb      	str	r3, [r7, #24]
    break;
 800344a:	e10b      	b.n	8003664 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800344c:	4b8c      	ldr	r3, [pc, #560]	; (8003680 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800344e:	61bb      	str	r3, [r7, #24]
    break;
 8003450:	e108      	b.n	8003664 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003452:	4b88      	ldr	r3, [pc, #544]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800345c:	4b85      	ldr	r3, [pc, #532]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800345e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003466:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003468:	4b82      	ldr	r3, [pc, #520]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003472:	4b80      	ldr	r3, [pc, #512]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003476:	08db      	lsrs	r3, r3, #3
 8003478:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	fb02 f303 	mul.w	r3, r2, r3
 8003482:	ee07 3a90 	vmov	s15, r3
 8003486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800348a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 80e1 	beq.w	8003658 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2b02      	cmp	r3, #2
 800349a:	f000 8083 	beq.w	80035a4 <HAL_RCC_GetSysClockFreq+0x204>
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	f200 80a1 	bhi.w	80035e8 <HAL_RCC_GetSysClockFreq+0x248>
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <HAL_RCC_GetSysClockFreq+0x114>
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d056      	beq.n	8003560 <HAL_RCC_GetSysClockFreq+0x1c0>
 80034b2:	e099      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034b4:	4b6f      	ldr	r3, [pc, #444]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0320 	and.w	r3, r3, #32
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d02d      	beq.n	800351c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80034c0:	4b6c      	ldr	r3, [pc, #432]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	08db      	lsrs	r3, r3, #3
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	4a6b      	ldr	r2, [pc, #428]	; (8003678 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034cc:	fa22 f303 	lsr.w	r3, r2, r3
 80034d0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	ee07 3a90 	vmov	s15, r3
 80034d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	ee07 3a90 	vmov	s15, r3
 80034e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034ea:	4b62      	ldr	r3, [pc, #392]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034f2:	ee07 3a90 	vmov	s15, r3
 80034f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80034fe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003684 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800350a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800350e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003516:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800351a:	e087      	b.n	800362c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	ee07 3a90 	vmov	s15, r3
 8003522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003526:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003688 <HAL_RCC_GetSysClockFreq+0x2e8>
 800352a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800352e:	4b51      	ldr	r3, [pc, #324]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003536:	ee07 3a90 	vmov	s15, r3
 800353a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800353e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003542:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003684 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800354a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800354e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800355a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800355e:	e065      	b.n	800362c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	ee07 3a90 	vmov	s15, r3
 8003566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800356a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800368c <HAL_RCC_GetSysClockFreq+0x2ec>
 800356e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003572:	4b40      	ldr	r3, [pc, #256]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800357a:	ee07 3a90 	vmov	s15, r3
 800357e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003582:	ed97 6a02 	vldr	s12, [r7, #8]
 8003586:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003684 <HAL_RCC_GetSysClockFreq+0x2e4>
 800358a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800358e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800359a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800359e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035a2:	e043      	b.n	800362c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	ee07 3a90 	vmov	s15, r3
 80035aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ae:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003690 <HAL_RCC_GetSysClockFreq+0x2f0>
 80035b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035b6:	4b2f      	ldr	r3, [pc, #188]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035be:	ee07 3a90 	vmov	s15, r3
 80035c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80035ca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003684 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035e6:	e021      	b.n	800362c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	ee07 3a90 	vmov	s15, r3
 80035ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035f2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800368c <HAL_RCC_GetSysClockFreq+0x2ec>
 80035f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035fa:	4b1e      	ldr	r3, [pc, #120]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003602:	ee07 3a90 	vmov	s15, r3
 8003606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800360a:	ed97 6a02 	vldr	s12, [r7, #8]
 800360e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003684 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800361a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800361e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003626:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800362a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800362c:	4b11      	ldr	r3, [pc, #68]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	0a5b      	lsrs	r3, r3, #9
 8003632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003636:	3301      	adds	r3, #1
 8003638:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	ee07 3a90 	vmov	s15, r3
 8003640:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003644:	edd7 6a07 	vldr	s13, [r7, #28]
 8003648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800364c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003650:	ee17 3a90 	vmov	r3, s15
 8003654:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003656:	e005      	b.n	8003664 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003658:	2300      	movs	r3, #0
 800365a:	61bb      	str	r3, [r7, #24]
    break;
 800365c:	e002      	b.n	8003664 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800365e:	4b07      	ldr	r3, [pc, #28]	; (800367c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003660:	61bb      	str	r3, [r7, #24]
    break;
 8003662:	bf00      	nop
  }

  return sysclockfreq;
 8003664:	69bb      	ldr	r3, [r7, #24]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3724      	adds	r7, #36	; 0x24
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	58024400 	.word	0x58024400
 8003678:	03d09000 	.word	0x03d09000
 800367c:	003d0900 	.word	0x003d0900
 8003680:	007a1200 	.word	0x007a1200
 8003684:	46000000 	.word	0x46000000
 8003688:	4c742400 	.word	0x4c742400
 800368c:	4a742400 	.word	0x4a742400
 8003690:	4af42400 	.word	0x4af42400

08003694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800369a:	f7ff fe81 	bl	80033a0 <HAL_RCC_GetSysClockFreq>
 800369e:	4602      	mov	r2, r0
 80036a0:	4b10      	ldr	r3, [pc, #64]	; (80036e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	0a1b      	lsrs	r3, r3, #8
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	490f      	ldr	r1, [pc, #60]	; (80036e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80036ac:	5ccb      	ldrb	r3, [r1, r3]
 80036ae:	f003 031f 	and.w	r3, r3, #31
 80036b2:	fa22 f303 	lsr.w	r3, r2, r3
 80036b6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036b8:	4b0a      	ldr	r3, [pc, #40]	; (80036e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	f003 030f 	and.w	r3, r3, #15
 80036c0:	4a09      	ldr	r2, [pc, #36]	; (80036e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80036c2:	5cd3      	ldrb	r3, [r2, r3]
 80036c4:	f003 031f 	and.w	r3, r3, #31
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	fa22 f303 	lsr.w	r3, r2, r3
 80036ce:	4a07      	ldr	r2, [pc, #28]	; (80036ec <HAL_RCC_GetHCLKFreq+0x58>)
 80036d0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036d2:	4a07      	ldr	r2, [pc, #28]	; (80036f0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80036d8:	4b04      	ldr	r3, [pc, #16]	; (80036ec <HAL_RCC_GetHCLKFreq+0x58>)
 80036da:	681b      	ldr	r3, [r3, #0]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	58024400 	.word	0x58024400
 80036e8:	0800a9b8 	.word	0x0800a9b8
 80036ec:	24000004 	.word	0x24000004
 80036f0:	24000000 	.word	0x24000000

080036f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80036f8:	f7ff ffcc 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 80036fc:	4602      	mov	r2, r0
 80036fe:	4b06      	ldr	r3, [pc, #24]	; (8003718 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	091b      	lsrs	r3, r3, #4
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	4904      	ldr	r1, [pc, #16]	; (800371c <HAL_RCC_GetPCLK1Freq+0x28>)
 800370a:	5ccb      	ldrb	r3, [r1, r3]
 800370c:	f003 031f 	and.w	r3, r3, #31
 8003710:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003714:	4618      	mov	r0, r3
 8003716:	bd80      	pop	{r7, pc}
 8003718:	58024400 	.word	0x58024400
 800371c:	0800a9b8 	.word	0x0800a9b8

08003720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003724:	f7ff ffb6 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 8003728:	4602      	mov	r2, r0
 800372a:	4b06      	ldr	r3, [pc, #24]	; (8003744 <HAL_RCC_GetPCLK2Freq+0x24>)
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	0a1b      	lsrs	r3, r3, #8
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	4904      	ldr	r1, [pc, #16]	; (8003748 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003736:	5ccb      	ldrb	r3, [r1, r3]
 8003738:	f003 031f 	and.w	r3, r3, #31
 800373c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003740:	4618      	mov	r0, r3
 8003742:	bd80      	pop	{r7, pc}
 8003744:	58024400 	.word	0x58024400
 8003748:	0800a9b8 	.word	0x0800a9b8

0800374c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003754:	2300      	movs	r3, #0
 8003756:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003758:	2300      	movs	r3, #0
 800375a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d03f      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800376c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003770:	d02a      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003772:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003776:	d824      	bhi.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003778:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800377c:	d018      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800377e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003782:	d81e      	bhi.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003788:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800378c:	d007      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800378e:	e018      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003790:	4bab      	ldr	r3, [pc, #684]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	4aaa      	ldr	r2, [pc, #680]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800379a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800379c:	e015      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	3304      	adds	r3, #4
 80037a2:	2102      	movs	r1, #2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f001 f9cf 	bl	8004b48 <RCCEx_PLL2_Config>
 80037aa:	4603      	mov	r3, r0
 80037ac:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80037ae:	e00c      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3324      	adds	r3, #36	; 0x24
 80037b4:	2102      	movs	r1, #2
 80037b6:	4618      	mov	r0, r3
 80037b8:	f001 fa78 	bl	8004cac <RCCEx_PLL3_Config>
 80037bc:	4603      	mov	r3, r0
 80037be:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80037c0:	e003      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	75fb      	strb	r3, [r7, #23]
      break;
 80037c6:	e000      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80037c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037ca:	7dfb      	ldrb	r3, [r7, #23]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d109      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80037d0:	4b9b      	ldr	r3, [pc, #620]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037dc:	4998      	ldr	r1, [pc, #608]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	650b      	str	r3, [r1, #80]	; 0x50
 80037e2:	e001      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e4:	7dfb      	ldrb	r3, [r7, #23]
 80037e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d03d      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d826      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80037fc:	a201      	add	r2, pc, #4	; (adr r2, 8003804 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80037fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003802:	bf00      	nop
 8003804:	08003819 	.word	0x08003819
 8003808:	08003827 	.word	0x08003827
 800380c:	08003839 	.word	0x08003839
 8003810:	08003851 	.word	0x08003851
 8003814:	08003851 	.word	0x08003851
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003818:	4b89      	ldr	r3, [pc, #548]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	4a88      	ldr	r2, [pc, #544]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800381e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003822:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003824:	e015      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3304      	adds	r3, #4
 800382a:	2100      	movs	r1, #0
 800382c:	4618      	mov	r0, r3
 800382e:	f001 f98b 	bl	8004b48 <RCCEx_PLL2_Config>
 8003832:	4603      	mov	r3, r0
 8003834:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003836:	e00c      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3324      	adds	r3, #36	; 0x24
 800383c:	2100      	movs	r1, #0
 800383e:	4618      	mov	r0, r3
 8003840:	f001 fa34 	bl	8004cac <RCCEx_PLL3_Config>
 8003844:	4603      	mov	r3, r0
 8003846:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003848:	e003      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	75fb      	strb	r3, [r7, #23]
      break;
 800384e:	e000      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003850:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003852:	7dfb      	ldrb	r3, [r7, #23]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d109      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003858:	4b79      	ldr	r3, [pc, #484]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800385a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800385c:	f023 0207 	bic.w	r2, r3, #7
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003864:	4976      	ldr	r1, [pc, #472]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003866:	4313      	orrs	r3, r2
 8003868:	650b      	str	r3, [r1, #80]	; 0x50
 800386a:	e001      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800386c:	7dfb      	ldrb	r3, [r7, #23]
 800386e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003878:	2b00      	cmp	r3, #0
 800387a:	d042      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003884:	d02b      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800388a:	d825      	bhi.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800388c:	2bc0      	cmp	r3, #192	; 0xc0
 800388e:	d028      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003890:	2bc0      	cmp	r3, #192	; 0xc0
 8003892:	d821      	bhi.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003894:	2b80      	cmp	r3, #128	; 0x80
 8003896:	d016      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003898:	2b80      	cmp	r3, #128	; 0x80
 800389a:	d81d      	bhi.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80038a0:	2b40      	cmp	r3, #64	; 0x40
 80038a2:	d007      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80038a4:	e018      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038a6:	4b66      	ldr	r3, [pc, #408]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	4a65      	ldr	r2, [pc, #404]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80038b2:	e017      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3304      	adds	r3, #4
 80038b8:	2100      	movs	r1, #0
 80038ba:	4618      	mov	r0, r3
 80038bc:	f001 f944 	bl	8004b48 <RCCEx_PLL2_Config>
 80038c0:	4603      	mov	r3, r0
 80038c2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80038c4:	e00e      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	3324      	adds	r3, #36	; 0x24
 80038ca:	2100      	movs	r1, #0
 80038cc:	4618      	mov	r0, r3
 80038ce:	f001 f9ed 	bl	8004cac <RCCEx_PLL3_Config>
 80038d2:	4603      	mov	r3, r0
 80038d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80038d6:	e005      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	75fb      	strb	r3, [r7, #23]
      break;
 80038dc:	e002      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80038de:	bf00      	nop
 80038e0:	e000      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80038e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038e4:	7dfb      	ldrb	r3, [r7, #23]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d109      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80038ea:	4b55      	ldr	r3, [pc, #340]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ee:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f6:	4952      	ldr	r1, [pc, #328]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	650b      	str	r3, [r1, #80]	; 0x50
 80038fc:	e001      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fe:	7dfb      	ldrb	r3, [r7, #23]
 8003900:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800390a:	2b00      	cmp	r3, #0
 800390c:	d049      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003914:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003918:	d030      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800391a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800391e:	d82a      	bhi.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003920:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003924:	d02c      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003926:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800392a:	d824      	bhi.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800392c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003930:	d018      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003932:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003936:	d81e      	bhi.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800393c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003940:	d007      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003942:	e018      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003944:	4b3e      	ldr	r3, [pc, #248]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	4a3d      	ldr	r2, [pc, #244]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800394a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800394e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003950:	e017      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	3304      	adds	r3, #4
 8003956:	2100      	movs	r1, #0
 8003958:	4618      	mov	r0, r3
 800395a:	f001 f8f5 	bl	8004b48 <RCCEx_PLL2_Config>
 800395e:	4603      	mov	r3, r0
 8003960:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003962:	e00e      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3324      	adds	r3, #36	; 0x24
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f001 f99e 	bl	8004cac <RCCEx_PLL3_Config>
 8003970:	4603      	mov	r3, r0
 8003972:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003974:	e005      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	75fb      	strb	r3, [r7, #23]
      break;
 800397a:	e002      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800397c:	bf00      	nop
 800397e:	e000      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003980:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003982:	7dfb      	ldrb	r3, [r7, #23]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10a      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003988:	4b2d      	ldr	r3, [pc, #180]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800398a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003996:	492a      	ldr	r1, [pc, #168]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003998:	4313      	orrs	r3, r2
 800399a:	658b      	str	r3, [r1, #88]	; 0x58
 800399c:	e001      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399e:	7dfb      	ldrb	r3, [r7, #23]
 80039a0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d04c      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80039b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039b8:	d030      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80039ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039be:	d82a      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80039c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039c4:	d02c      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80039c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039ca:	d824      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80039cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039d0:	d018      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80039d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039d6:	d81e      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80039dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039e0:	d007      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80039e2:	e018      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039e4:	4b16      	ldr	r3, [pc, #88]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e8:	4a15      	ldr	r2, [pc, #84]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039f0:	e017      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3304      	adds	r3, #4
 80039f6:	2100      	movs	r1, #0
 80039f8:	4618      	mov	r0, r3
 80039fa:	f001 f8a5 	bl	8004b48 <RCCEx_PLL2_Config>
 80039fe:	4603      	mov	r3, r0
 8003a00:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003a02:	e00e      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3324      	adds	r3, #36	; 0x24
 8003a08:	2100      	movs	r1, #0
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f001 f94e 	bl	8004cac <RCCEx_PLL3_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a14:	e005      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	75fb      	strb	r3, [r7, #23]
      break;
 8003a1a:	e002      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003a1c:	bf00      	nop
 8003a1e:	e000      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003a20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10d      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003a28:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a36:	4902      	ldr	r1, [pc, #8]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	658b      	str	r3, [r1, #88]	; 0x58
 8003a3c:	e004      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003a3e:	bf00      	nop
 8003a40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a44:	7dfb      	ldrb	r3, [r7, #23]
 8003a46:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d032      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a58:	2b30      	cmp	r3, #48	; 0x30
 8003a5a:	d01c      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003a5c:	2b30      	cmp	r3, #48	; 0x30
 8003a5e:	d817      	bhi.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003a60:	2b20      	cmp	r3, #32
 8003a62:	d00c      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d813      	bhi.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d016      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003a6c:	2b10      	cmp	r3, #16
 8003a6e:	d10f      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a70:	4baf      	ldr	r3, [pc, #700]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	4aae      	ldr	r2, [pc, #696]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003a7c:	e00e      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3304      	adds	r3, #4
 8003a82:	2102      	movs	r1, #2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f001 f85f 	bl	8004b48 <RCCEx_PLL2_Config>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003a8e:	e005      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	75fb      	strb	r3, [r7, #23]
      break;
 8003a94:	e002      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003a96:	bf00      	nop
 8003a98:	e000      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003a9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a9c:	7dfb      	ldrb	r3, [r7, #23]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d109      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003aa2:	4ba3      	ldr	r3, [pc, #652]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aae:	49a0      	ldr	r1, [pc, #640]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ab4:	e001      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab6:	7dfb      	ldrb	r3, [r7, #23]
 8003ab8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d047      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ace:	d030      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003ad0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ad4:	d82a      	bhi.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003ad6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ada:	d02c      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003adc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ae0:	d824      	bhi.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003ae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae6:	d018      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aec:	d81e      	bhi.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af6:	d007      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003af8:	e018      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003afa:	4b8d      	ldr	r3, [pc, #564]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afe:	4a8c      	ldr	r2, [pc, #560]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b06:	e017      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f001 f81a 	bl	8004b48 <RCCEx_PLL2_Config>
 8003b14:	4603      	mov	r3, r0
 8003b16:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b18:	e00e      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	3324      	adds	r3, #36	; 0x24
 8003b1e:	2100      	movs	r1, #0
 8003b20:	4618      	mov	r0, r3
 8003b22:	f001 f8c3 	bl	8004cac <RCCEx_PLL3_Config>
 8003b26:	4603      	mov	r3, r0
 8003b28:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b2a:	e005      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b30:	e002      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003b32:	bf00      	nop
 8003b34:	e000      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003b36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b38:	7dfb      	ldrb	r3, [r7, #23]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d109      	bne.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003b3e:	4b7c      	ldr	r3, [pc, #496]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b42:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4a:	4979      	ldr	r1, [pc, #484]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	650b      	str	r3, [r1, #80]	; 0x50
 8003b50:	e001      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b52:	7dfb      	ldrb	r3, [r7, #23]
 8003b54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d049      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b6a:	d02e      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003b6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b70:	d828      	bhi.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003b72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b76:	d02a      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003b78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b7c:	d822      	bhi.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003b7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b82:	d026      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003b84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b88:	d81c      	bhi.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003b8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b8e:	d010      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003b90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b94:	d816      	bhi.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d01d      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b9e:	d111      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3304      	adds	r3, #4
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 ffce 	bl	8004b48 <RCCEx_PLL2_Config>
 8003bac:	4603      	mov	r3, r0
 8003bae:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003bb0:	e012      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3324      	adds	r3, #36	; 0x24
 8003bb6:	2101      	movs	r1, #1
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f001 f877 	bl	8004cac <RCCEx_PLL3_Config>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003bc2:	e009      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8003bc8:	e006      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003bca:	bf00      	nop
 8003bcc:	e004      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003bce:	bf00      	nop
 8003bd0:	e002      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003bd2:	bf00      	nop
 8003bd4:	e000      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003bd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bd8:	7dfb      	ldrb	r3, [r7, #23]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d109      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003bde:	4b54      	ldr	r3, [pc, #336]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bea:	4951      	ldr	r1, [pc, #324]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	650b      	str	r3, [r1, #80]	; 0x50
 8003bf0:	e001      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf2:	7dfb      	ldrb	r3, [r7, #23]
 8003bf4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d04b      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c0c:	d02e      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003c0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c12:	d828      	bhi.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c18:	d02a      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c1e:	d822      	bhi.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003c20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c24:	d026      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003c26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c2a:	d81c      	bhi.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c30:	d010      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003c32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c36:	d816      	bhi.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d01d      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003c3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c40:	d111      	bne.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	3304      	adds	r3, #4
 8003c46:	2101      	movs	r1, #1
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 ff7d 	bl	8004b48 <RCCEx_PLL2_Config>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003c52:	e012      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3324      	adds	r3, #36	; 0x24
 8003c58:	2101      	movs	r1, #1
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f001 f826 	bl	8004cac <RCCEx_PLL3_Config>
 8003c60:	4603      	mov	r3, r0
 8003c62:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003c64:	e009      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	75fb      	strb	r3, [r7, #23]
      break;
 8003c6a:	e006      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003c6c:	bf00      	nop
 8003c6e:	e004      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003c70:	bf00      	nop
 8003c72:	e002      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003c74:	bf00      	nop
 8003c76:	e000      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003c78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c7a:	7dfb      	ldrb	r3, [r7, #23]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10a      	bne.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c80:	4b2b      	ldr	r3, [pc, #172]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c84:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c8e:	4928      	ldr	r1, [pc, #160]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	658b      	str	r3, [r1, #88]	; 0x58
 8003c94:	e001      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c96:	7dfb      	ldrb	r3, [r7, #23]
 8003c98:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d02f      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003caa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cae:	d00e      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003cb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cb4:	d814      	bhi.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d015      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003cba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cbe:	d10f      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cc0:	4b1b      	ldr	r3, [pc, #108]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc4:	4a1a      	ldr	r2, [pc, #104]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003ccc:	e00c      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 ff37 	bl	8004b48 <RCCEx_PLL2_Config>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003cde:	e003      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ce4:	e000      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003ce6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ce8:	7dfb      	ldrb	r3, [r7, #23]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d109      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003cee:	4b10      	ldr	r3, [pc, #64]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cfa:	490d      	ldr	r1, [pc, #52]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	650b      	str	r3, [r1, #80]	; 0x50
 8003d00:	e001      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d02:	7dfb      	ldrb	r3, [r7, #23]
 8003d04:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d033      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d81c      	bhi.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003d1a:	a201      	add	r2, pc, #4	; (adr r2, 8003d20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d20:	08003d5b 	.word	0x08003d5b
 8003d24:	08003d35 	.word	0x08003d35
 8003d28:	08003d43 	.word	0x08003d43
 8003d2c:	08003d5b 	.word	0x08003d5b
 8003d30:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d34:	4bb8      	ldr	r3, [pc, #736]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	4ab7      	ldr	r2, [pc, #732]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003d40:	e00c      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	3304      	adds	r3, #4
 8003d46:	2102      	movs	r1, #2
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f000 fefd 	bl	8004b48 <RCCEx_PLL2_Config>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003d52:	e003      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	75fb      	strb	r3, [r7, #23]
      break;
 8003d58:	e000      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003d5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d5c:	7dfb      	ldrb	r3, [r7, #23]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d109      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d62:	4bad      	ldr	r3, [pc, #692]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d66:	f023 0203 	bic.w	r2, r3, #3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6e:	49aa      	ldr	r1, [pc, #680]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003d74:	e001      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d76:	7dfb      	ldrb	r3, [r7, #23]
 8003d78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 8086 	beq.w	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d88:	4ba4      	ldr	r3, [pc, #656]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4aa3      	ldr	r2, [pc, #652]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d94:	f7fd fc38 	bl	8001608 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d9a:	e009      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d9c:	f7fd fc34 	bl	8001608 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b64      	cmp	r3, #100	; 0x64
 8003da8:	d902      	bls.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	75fb      	strb	r3, [r7, #23]
        break;
 8003dae:	e005      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003db0:	4b9a      	ldr	r3, [pc, #616]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0ef      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003dbc:	7dfb      	ldrb	r3, [r7, #23]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d166      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003dc2:	4b95      	ldr	r3, [pc, #596]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dcc:	4053      	eors	r3, r2
 8003dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d013      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dd6:	4b90      	ldr	r3, [pc, #576]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dde:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003de0:	4b8d      	ldr	r3, [pc, #564]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de4:	4a8c      	ldr	r2, [pc, #560]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dea:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dec:	4b8a      	ldr	r3, [pc, #552]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df0:	4a89      	ldr	r2, [pc, #548]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003df6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003df8:	4a87      	ldr	r2, [pc, #540]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e08:	d115      	bne.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0a:	f7fd fbfd 	bl	8001608 <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e10:	e00b      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e12:	f7fd fbf9 	bl	8001608 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d902      	bls.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	75fb      	strb	r3, [r7, #23]
            break;
 8003e28:	e005      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e2a:	4b7b      	ldr	r3, [pc, #492]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0ed      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003e36:	7dfb      	ldrb	r3, [r7, #23]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d126      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e4a:	d10d      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003e4c:	4b72      	ldr	r3, [pc, #456]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e5a:	0919      	lsrs	r1, r3, #4
 8003e5c:	4b70      	ldr	r3, [pc, #448]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003e5e:	400b      	ands	r3, r1
 8003e60:	496d      	ldr	r1, [pc, #436]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	610b      	str	r3, [r1, #16]
 8003e66:	e005      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003e68:	4b6b      	ldr	r3, [pc, #428]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	4a6a      	ldr	r2, [pc, #424]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e6e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e72:	6113      	str	r3, [r2, #16]
 8003e74:	4b68      	ldr	r3, [pc, #416]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e82:	4965      	ldr	r1, [pc, #404]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	670b      	str	r3, [r1, #112]	; 0x70
 8003e88:	e004      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e8a:	7dfb      	ldrb	r3, [r7, #23]
 8003e8c:	75bb      	strb	r3, [r7, #22]
 8003e8e:	e001      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e90:	7dfb      	ldrb	r3, [r7, #23]
 8003e92:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d07e      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ea4:	2b28      	cmp	r3, #40	; 0x28
 8003ea6:	d867      	bhi.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003ea8:	a201      	add	r2, pc, #4	; (adr r2, 8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eae:	bf00      	nop
 8003eb0:	08003f7f 	.word	0x08003f7f
 8003eb4:	08003f79 	.word	0x08003f79
 8003eb8:	08003f79 	.word	0x08003f79
 8003ebc:	08003f79 	.word	0x08003f79
 8003ec0:	08003f79 	.word	0x08003f79
 8003ec4:	08003f79 	.word	0x08003f79
 8003ec8:	08003f79 	.word	0x08003f79
 8003ecc:	08003f79 	.word	0x08003f79
 8003ed0:	08003f55 	.word	0x08003f55
 8003ed4:	08003f79 	.word	0x08003f79
 8003ed8:	08003f79 	.word	0x08003f79
 8003edc:	08003f79 	.word	0x08003f79
 8003ee0:	08003f79 	.word	0x08003f79
 8003ee4:	08003f79 	.word	0x08003f79
 8003ee8:	08003f79 	.word	0x08003f79
 8003eec:	08003f79 	.word	0x08003f79
 8003ef0:	08003f67 	.word	0x08003f67
 8003ef4:	08003f79 	.word	0x08003f79
 8003ef8:	08003f79 	.word	0x08003f79
 8003efc:	08003f79 	.word	0x08003f79
 8003f00:	08003f79 	.word	0x08003f79
 8003f04:	08003f79 	.word	0x08003f79
 8003f08:	08003f79 	.word	0x08003f79
 8003f0c:	08003f79 	.word	0x08003f79
 8003f10:	08003f7f 	.word	0x08003f7f
 8003f14:	08003f79 	.word	0x08003f79
 8003f18:	08003f79 	.word	0x08003f79
 8003f1c:	08003f79 	.word	0x08003f79
 8003f20:	08003f79 	.word	0x08003f79
 8003f24:	08003f79 	.word	0x08003f79
 8003f28:	08003f79 	.word	0x08003f79
 8003f2c:	08003f79 	.word	0x08003f79
 8003f30:	08003f7f 	.word	0x08003f7f
 8003f34:	08003f79 	.word	0x08003f79
 8003f38:	08003f79 	.word	0x08003f79
 8003f3c:	08003f79 	.word	0x08003f79
 8003f40:	08003f79 	.word	0x08003f79
 8003f44:	08003f79 	.word	0x08003f79
 8003f48:	08003f79 	.word	0x08003f79
 8003f4c:	08003f79 	.word	0x08003f79
 8003f50:	08003f7f 	.word	0x08003f7f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3304      	adds	r3, #4
 8003f58:	2101      	movs	r1, #1
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fdf4 	bl	8004b48 <RCCEx_PLL2_Config>
 8003f60:	4603      	mov	r3, r0
 8003f62:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003f64:	e00c      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3324      	adds	r3, #36	; 0x24
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fe9d 	bl	8004cac <RCCEx_PLL3_Config>
 8003f72:	4603      	mov	r3, r0
 8003f74:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003f76:	e003      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f7c:	e000      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003f7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f80:	7dfb      	ldrb	r3, [r7, #23]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d109      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f86:	4b24      	ldr	r3, [pc, #144]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f92:	4921      	ldr	r1, [pc, #132]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	654b      	str	r3, [r1, #84]	; 0x54
 8003f98:	e001      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9a:	7dfb      	ldrb	r3, [r7, #23]
 8003f9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d03e      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fae:	2b05      	cmp	r3, #5
 8003fb0:	d820      	bhi.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003fb2:	a201      	add	r2, pc, #4	; (adr r2, 8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb8:	08003ffb 	.word	0x08003ffb
 8003fbc:	08003fd1 	.word	0x08003fd1
 8003fc0:	08003fe3 	.word	0x08003fe3
 8003fc4:	08003ffb 	.word	0x08003ffb
 8003fc8:	08003ffb 	.word	0x08003ffb
 8003fcc:	08003ffb 	.word	0x08003ffb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 fdb6 	bl	8004b48 <RCCEx_PLL2_Config>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003fe0:	e00c      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3324      	adds	r3, #36	; 0x24
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 fe5f 	bl	8004cac <RCCEx_PLL3_Config>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003ff2:	e003      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ff8:	e000      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003ffa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ffc:	7dfb      	ldrb	r3, [r7, #23]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d110      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004002:	4b05      	ldr	r3, [pc, #20]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004006:	f023 0207 	bic.w	r2, r3, #7
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800400e:	4902      	ldr	r1, [pc, #8]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004010:	4313      	orrs	r3, r2
 8004012:	654b      	str	r3, [r1, #84]	; 0x54
 8004014:	e008      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8004016:	bf00      	nop
 8004018:	58024400 	.word	0x58024400
 800401c:	58024800 	.word	0x58024800
 8004020:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004024:	7dfb      	ldrb	r3, [r7, #23]
 8004026:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	d039      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403a:	2b05      	cmp	r3, #5
 800403c:	d820      	bhi.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800403e:	a201      	add	r2, pc, #4	; (adr r2, 8004044 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8004040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004044:	08004087 	.word	0x08004087
 8004048:	0800405d 	.word	0x0800405d
 800404c:	0800406f 	.word	0x0800406f
 8004050:	08004087 	.word	0x08004087
 8004054:	08004087 	.word	0x08004087
 8004058:	08004087 	.word	0x08004087
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3304      	adds	r3, #4
 8004060:	2101      	movs	r1, #1
 8004062:	4618      	mov	r0, r3
 8004064:	f000 fd70 	bl	8004b48 <RCCEx_PLL2_Config>
 8004068:	4603      	mov	r3, r0
 800406a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800406c:	e00c      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3324      	adds	r3, #36	; 0x24
 8004072:	2101      	movs	r1, #1
 8004074:	4618      	mov	r0, r3
 8004076:	f000 fe19 	bl	8004cac <RCCEx_PLL3_Config>
 800407a:	4603      	mov	r3, r0
 800407c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800407e:	e003      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	75fb      	strb	r3, [r7, #23]
      break;
 8004084:	e000      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8004086:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004088:	7dfb      	ldrb	r3, [r7, #23]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10a      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800408e:	4bb7      	ldr	r3, [pc, #732]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004092:	f023 0207 	bic.w	r2, r3, #7
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409c:	49b3      	ldr	r1, [pc, #716]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	658b      	str	r3, [r1, #88]	; 0x58
 80040a2:	e001      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a4:	7dfb      	ldrb	r3, [r7, #23]
 80040a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0320 	and.w	r3, r3, #32
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d04b      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040be:	d02e      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80040c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040c4:	d828      	bhi.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80040c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ca:	d02a      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80040cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d0:	d822      	bhi.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80040d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040d6:	d026      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80040d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040dc:	d81c      	bhi.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80040de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040e2:	d010      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80040e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040e8:	d816      	bhi.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d01d      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80040ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040f2:	d111      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3304      	adds	r3, #4
 80040f8:	2100      	movs	r1, #0
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fd24 	bl	8004b48 <RCCEx_PLL2_Config>
 8004100:	4603      	mov	r3, r0
 8004102:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004104:	e012      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	3324      	adds	r3, #36	; 0x24
 800410a:	2102      	movs	r1, #2
 800410c:	4618      	mov	r0, r3
 800410e:	f000 fdcd 	bl	8004cac <RCCEx_PLL3_Config>
 8004112:	4603      	mov	r3, r0
 8004114:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004116:	e009      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	75fb      	strb	r3, [r7, #23]
      break;
 800411c:	e006      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800411e:	bf00      	nop
 8004120:	e004      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004122:	bf00      	nop
 8004124:	e002      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004126:	bf00      	nop
 8004128:	e000      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800412a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800412c:	7dfb      	ldrb	r3, [r7, #23]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10a      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004132:	4b8e      	ldr	r3, [pc, #568]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004136:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004140:	498a      	ldr	r1, [pc, #552]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004142:	4313      	orrs	r3, r2
 8004144:	654b      	str	r3, [r1, #84]	; 0x54
 8004146:	e001      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004148:	7dfb      	ldrb	r3, [r7, #23]
 800414a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004154:	2b00      	cmp	r3, #0
 8004156:	d04b      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800415e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004162:	d02e      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8004164:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004168:	d828      	bhi.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800416a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800416e:	d02a      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004174:	d822      	bhi.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004176:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800417a:	d026      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800417c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004180:	d81c      	bhi.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004182:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004186:	d010      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004188:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800418c:	d816      	bhi.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800418e:	2b00      	cmp	r3, #0
 8004190:	d01d      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004196:	d111      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3304      	adds	r3, #4
 800419c:	2100      	movs	r1, #0
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fcd2 	bl	8004b48 <RCCEx_PLL2_Config>
 80041a4:	4603      	mov	r3, r0
 80041a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80041a8:	e012      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	3324      	adds	r3, #36	; 0x24
 80041ae:	2102      	movs	r1, #2
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 fd7b 	bl	8004cac <RCCEx_PLL3_Config>
 80041b6:	4603      	mov	r3, r0
 80041b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80041ba:	e009      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	75fb      	strb	r3, [r7, #23]
      break;
 80041c0:	e006      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80041c2:	bf00      	nop
 80041c4:	e004      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80041c6:	bf00      	nop
 80041c8:	e002      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80041ca:	bf00      	nop
 80041cc:	e000      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80041ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041d0:	7dfb      	ldrb	r3, [r7, #23]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10a      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041d6:	4b65      	ldr	r3, [pc, #404]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041da:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041e4:	4961      	ldr	r1, [pc, #388]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	658b      	str	r3, [r1, #88]	; 0x58
 80041ea:	e001      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ec:	7dfb      	ldrb	r3, [r7, #23]
 80041ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d04b      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004202:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004206:	d02e      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004208:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800420c:	d828      	bhi.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800420e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004212:	d02a      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8004214:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004218:	d822      	bhi.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800421a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800421e:	d026      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004220:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004224:	d81c      	bhi.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004226:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800422a:	d010      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800422c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004230:	d816      	bhi.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004232:	2b00      	cmp	r3, #0
 8004234:	d01d      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800423a:	d111      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	3304      	adds	r3, #4
 8004240:	2100      	movs	r1, #0
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fc80 	bl	8004b48 <RCCEx_PLL2_Config>
 8004248:	4603      	mov	r3, r0
 800424a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800424c:	e012      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	3324      	adds	r3, #36	; 0x24
 8004252:	2102      	movs	r1, #2
 8004254:	4618      	mov	r0, r3
 8004256:	f000 fd29 	bl	8004cac <RCCEx_PLL3_Config>
 800425a:	4603      	mov	r3, r0
 800425c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800425e:	e009      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	75fb      	strb	r3, [r7, #23]
      break;
 8004264:	e006      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004266:	bf00      	nop
 8004268:	e004      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800426a:	bf00      	nop
 800426c:	e002      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800426e:	bf00      	nop
 8004270:	e000      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004272:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004274:	7dfb      	ldrb	r3, [r7, #23]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10a      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800427a:	4b3c      	ldr	r3, [pc, #240]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800427c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004288:	4938      	ldr	r1, [pc, #224]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800428a:	4313      	orrs	r3, r2
 800428c:	658b      	str	r3, [r1, #88]	; 0x58
 800428e:	e001      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004290:	7dfb      	ldrb	r3, [r7, #23]
 8004292:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0308 	and.w	r3, r3, #8
 800429c:	2b00      	cmp	r3, #0
 800429e:	d01a      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042aa:	d10a      	bne.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3324      	adds	r3, #36	; 0x24
 80042b0:	2102      	movs	r1, #2
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 fcfa 	bl	8004cac <RCCEx_PLL3_Config>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80042c2:	4b2a      	ldr	r3, [pc, #168]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80042c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042d0:	4926      	ldr	r1, [pc, #152]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0310 	and.w	r3, r3, #16
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d01a      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ec:	d10a      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	3324      	adds	r3, #36	; 0x24
 80042f2:	2102      	movs	r1, #2
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fcd9 	bl	8004cac <RCCEx_PLL3_Config>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004304:	4b19      	ldr	r3, [pc, #100]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004308:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004312:	4916      	ldr	r1, [pc, #88]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004314:	4313      	orrs	r3, r2
 8004316:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d036      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800432a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800432e:	d01f      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004330:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004334:	d817      	bhi.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800433a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800433e:	d009      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004340:	e011      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3304      	adds	r3, #4
 8004346:	2100      	movs	r1, #0
 8004348:	4618      	mov	r0, r3
 800434a:	f000 fbfd 	bl	8004b48 <RCCEx_PLL2_Config>
 800434e:	4603      	mov	r3, r0
 8004350:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004352:	e00e      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3324      	adds	r3, #36	; 0x24
 8004358:	2102      	movs	r1, #2
 800435a:	4618      	mov	r0, r3
 800435c:	f000 fca6 	bl	8004cac <RCCEx_PLL3_Config>
 8004360:	4603      	mov	r3, r0
 8004362:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004364:	e005      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	75fb      	strb	r3, [r7, #23]
      break;
 800436a:	e002      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800436c:	58024400 	.word	0x58024400
      break;
 8004370:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004372:	7dfb      	ldrb	r3, [r7, #23]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10a      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004378:	4b93      	ldr	r3, [pc, #588]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800437a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004386:	4990      	ldr	r1, [pc, #576]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004388:	4313      	orrs	r3, r2
 800438a:	658b      	str	r3, [r1, #88]	; 0x58
 800438c:	e001      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438e:	7dfb      	ldrb	r3, [r7, #23]
 8004390:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d033      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043a8:	d01c      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80043aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043ae:	d816      	bhi.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80043b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043b4:	d003      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80043b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043ba:	d007      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80043bc:	e00f      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043be:	4b82      	ldr	r3, [pc, #520]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c2:	4a81      	ldr	r2, [pc, #516]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80043ca:	e00c      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3324      	adds	r3, #36	; 0x24
 80043d0:	2101      	movs	r1, #1
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 fc6a 	bl	8004cac <RCCEx_PLL3_Config>
 80043d8:	4603      	mov	r3, r0
 80043da:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80043dc:	e003      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	75fb      	strb	r3, [r7, #23]
      break;
 80043e2:	e000      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80043e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043e6:	7dfb      	ldrb	r3, [r7, #23]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10a      	bne.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043ec:	4b76      	ldr	r3, [pc, #472]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043fa:	4973      	ldr	r1, [pc, #460]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	654b      	str	r3, [r1, #84]	; 0x54
 8004400:	e001      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004402:	7dfb      	ldrb	r3, [r7, #23]
 8004404:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d029      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800441a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800441e:	d007      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004420:	e00f      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004422:	4b69      	ldr	r3, [pc, #420]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	4a68      	ldr	r2, [pc, #416]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800442c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800442e:	e00b      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3304      	adds	r3, #4
 8004434:	2102      	movs	r1, #2
 8004436:	4618      	mov	r0, r3
 8004438:	f000 fb86 	bl	8004b48 <RCCEx_PLL2_Config>
 800443c:	4603      	mov	r3, r0
 800443e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004440:	e002      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	75fb      	strb	r3, [r7, #23]
      break;
 8004446:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004448:	7dfb      	ldrb	r3, [r7, #23]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d109      	bne.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800444e:	4b5e      	ldr	r3, [pc, #376]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004452:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445a:	495b      	ldr	r1, [pc, #364]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800445c:	4313      	orrs	r3, r2
 800445e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004460:	e001      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004462:	7dfb      	ldrb	r3, [r7, #23]
 8004464:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3324      	adds	r3, #36	; 0x24
 8004476:	2102      	movs	r1, #2
 8004478:	4618      	mov	r0, r3
 800447a:	f000 fc17 	bl	8004cac <RCCEx_PLL3_Config>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d030      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004498:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800449c:	d017      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800449e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044a2:	d811      	bhi.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80044a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044a8:	d013      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80044aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044ae:	d80b      	bhi.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d010      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80044b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044b8:	d106      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044ba:	4b43      	ldr	r3, [pc, #268]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044be:	4a42      	ldr	r2, [pc, #264]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80044c6:	e007      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	75fb      	strb	r3, [r7, #23]
      break;
 80044cc:	e004      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80044ce:	bf00      	nop
 80044d0:	e002      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80044d2:	bf00      	nop
 80044d4:	e000      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80044d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044d8:	7dfb      	ldrb	r3, [r7, #23]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d109      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044de:	4b3a      	ldr	r3, [pc, #232]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044ea:	4937      	ldr	r1, [pc, #220]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	654b      	str	r3, [r1, #84]	; 0x54
 80044f0:	e001      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f2:	7dfb      	ldrb	r3, [r7, #23]
 80044f4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d008      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004502:	4b31      	ldr	r3, [pc, #196]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004506:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450e:	492e      	ldr	r1, [pc, #184]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004510:	4313      	orrs	r3, r2
 8004512:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d009      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004520:	4b29      	ldr	r3, [pc, #164]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800452e:	4926      	ldr	r1, [pc, #152]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004530:	4313      	orrs	r3, r2
 8004532:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d008      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004540:	4b21      	ldr	r3, [pc, #132]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004544:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800454c:	491e      	ldr	r1, [pc, #120]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800454e:	4313      	orrs	r3, r2
 8004550:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00d      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800455e:	4b1a      	ldr	r3, [pc, #104]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	4a19      	ldr	r2, [pc, #100]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004564:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004568:	6113      	str	r3, [r2, #16]
 800456a:	4b17      	ldr	r3, [pc, #92]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800456c:	691a      	ldr	r2, [r3, #16]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004574:	4914      	ldr	r1, [pc, #80]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004576:	4313      	orrs	r3, r2
 8004578:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	da08      	bge.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004582:	4b11      	ldr	r3, [pc, #68]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004586:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800458e:	490e      	ldr	r1, [pc, #56]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004590:	4313      	orrs	r3, r2
 8004592:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d009      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045a0:	4b09      	ldr	r3, [pc, #36]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ae:	4906      	ldr	r1, [pc, #24]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80045b4:	7dbb      	ldrb	r3, [r7, #22]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	e000      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3718      	adds	r7, #24
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	58024400 	.word	0x58024400

080045cc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80045d0:	f7ff f860 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 80045d4:	4602      	mov	r2, r0
 80045d6:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	091b      	lsrs	r3, r3, #4
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	4904      	ldr	r1, [pc, #16]	; (80045f4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80045e2:	5ccb      	ldrb	r3, [r1, r3]
 80045e4:	f003 031f 	and.w	r3, r3, #31
 80045e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	58024400 	.word	0x58024400
 80045f4:	0800a9b8 	.word	0x0800a9b8

080045f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b089      	sub	sp, #36	; 0x24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004600:	4ba1      	ldr	r3, [pc, #644]	; (8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004604:	f003 0303 	and.w	r3, r3, #3
 8004608:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800460a:	4b9f      	ldr	r3, [pc, #636]	; (8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800460c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460e:	0b1b      	lsrs	r3, r3, #12
 8004610:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004614:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004616:	4b9c      	ldr	r3, [pc, #624]	; (8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461a:	091b      	lsrs	r3, r3, #4
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004622:	4b99      	ldr	r3, [pc, #612]	; (8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004626:	08db      	lsrs	r3, r3, #3
 8004628:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	fb02 f303 	mul.w	r3, r2, r3
 8004632:	ee07 3a90 	vmov	s15, r3
 8004636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800463a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 8111 	beq.w	8004868 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	2b02      	cmp	r3, #2
 800464a:	f000 8083 	beq.w	8004754 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	2b02      	cmp	r3, #2
 8004652:	f200 80a1 	bhi.w	8004798 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d056      	beq.n	8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004662:	e099      	b.n	8004798 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004664:	4b88      	ldr	r3, [pc, #544]	; (8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0320 	and.w	r3, r3, #32
 800466c:	2b00      	cmp	r3, #0
 800466e:	d02d      	beq.n	80046cc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004670:	4b85      	ldr	r3, [pc, #532]	; (8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	08db      	lsrs	r3, r3, #3
 8004676:	f003 0303 	and.w	r3, r3, #3
 800467a:	4a84      	ldr	r2, [pc, #528]	; (800488c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800467c:	fa22 f303 	lsr.w	r3, r2, r3
 8004680:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	ee07 3a90 	vmov	s15, r3
 8004688:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	ee07 3a90 	vmov	s15, r3
 8004692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800469a:	4b7b      	ldr	r3, [pc, #492]	; (8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800469c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046a2:	ee07 3a90 	vmov	s15, r3
 80046a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80046ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046c6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80046ca:	e087      	b.n	80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004894 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80046da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046de:	4b6a      	ldr	r3, [pc, #424]	; (8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e6:	ee07 3a90 	vmov	s15, r3
 80046ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80046f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800470a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800470e:	e065      	b.n	80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	ee07 3a90 	vmov	s15, r3
 8004716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800471a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004898 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800471e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004722:	4b59      	ldr	r3, [pc, #356]	; (8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800472a:	ee07 3a90 	vmov	s15, r3
 800472e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004732:	ed97 6a03 	vldr	s12, [r7, #12]
 8004736:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800473a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800473e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800474a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800474e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004752:	e043      	b.n	80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800489c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004766:	4b48      	ldr	r3, [pc, #288]	; (8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800476e:	ee07 3a90 	vmov	s15, r3
 8004772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004776:	ed97 6a03 	vldr	s12, [r7, #12]
 800477a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800477e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004786:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800478a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800478e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004792:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004796:	e021      	b.n	80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	ee07 3a90 	vmov	s15, r3
 800479e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004898 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80047a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047aa:	4b37      	ldr	r3, [pc, #220]	; (8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b2:	ee07 3a90 	vmov	s15, r3
 80047b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80047be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047da:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80047dc:	4b2a      	ldr	r3, [pc, #168]	; (8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e0:	0a5b      	lsrs	r3, r3, #9
 80047e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047e6:	ee07 3a90 	vmov	s15, r3
 80047ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80047fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004802:	ee17 2a90 	vmov	r2, s15
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800480a:	4b1f      	ldr	r3, [pc, #124]	; (8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800480c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480e:	0c1b      	lsrs	r3, r3, #16
 8004810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004814:	ee07 3a90 	vmov	s15, r3
 8004818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800481c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004820:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004824:	edd7 6a07 	vldr	s13, [r7, #28]
 8004828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800482c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004830:	ee17 2a90 	vmov	r2, s15
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004838:	4b13      	ldr	r3, [pc, #76]	; (8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800483a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483c:	0e1b      	lsrs	r3, r3, #24
 800483e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004842:	ee07 3a90 	vmov	s15, r3
 8004846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800484e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004852:	edd7 6a07 	vldr	s13, [r7, #28]
 8004856:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800485a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800485e:	ee17 2a90 	vmov	r2, s15
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004866:	e008      	b.n	800487a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	609a      	str	r2, [r3, #8]
}
 800487a:	bf00      	nop
 800487c:	3724      	adds	r7, #36	; 0x24
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	58024400 	.word	0x58024400
 800488c:	03d09000 	.word	0x03d09000
 8004890:	46000000 	.word	0x46000000
 8004894:	4c742400 	.word	0x4c742400
 8004898:	4a742400 	.word	0x4a742400
 800489c:	4af42400 	.word	0x4af42400

080048a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b089      	sub	sp, #36	; 0x24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048a8:	4ba1      	ldr	r3, [pc, #644]	; (8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ac:	f003 0303 	and.w	r3, r3, #3
 80048b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80048b2:	4b9f      	ldr	r3, [pc, #636]	; (8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b6:	0d1b      	lsrs	r3, r3, #20
 80048b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80048be:	4b9c      	ldr	r3, [pc, #624]	; (8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c2:	0a1b      	lsrs	r3, r3, #8
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80048ca:	4b99      	ldr	r3, [pc, #612]	; (8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ce:	08db      	lsrs	r3, r3, #3
 80048d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	fb02 f303 	mul.w	r3, r2, r3
 80048da:	ee07 3a90 	vmov	s15, r3
 80048de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 8111 	beq.w	8004b10 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	f000 8083 	beq.w	80049fc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	f200 80a1 	bhi.w	8004a40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d056      	beq.n	80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800490a:	e099      	b.n	8004a40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800490c:	4b88      	ldr	r3, [pc, #544]	; (8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0320 	and.w	r3, r3, #32
 8004914:	2b00      	cmp	r3, #0
 8004916:	d02d      	beq.n	8004974 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004918:	4b85      	ldr	r3, [pc, #532]	; (8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	08db      	lsrs	r3, r3, #3
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	4a84      	ldr	r2, [pc, #528]	; (8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004924:	fa22 f303 	lsr.w	r3, r2, r3
 8004928:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	ee07 3a90 	vmov	s15, r3
 8004930:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	ee07 3a90 	vmov	s15, r3
 800493a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800493e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004942:	4b7b      	ldr	r3, [pc, #492]	; (8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800494a:	ee07 3a90 	vmov	s15, r3
 800494e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004952:	ed97 6a03 	vldr	s12, [r7, #12]
 8004956:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800495a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800495e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800496a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800496e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004972:	e087      	b.n	8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	ee07 3a90 	vmov	s15, r3
 800497a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004b3c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004986:	4b6a      	ldr	r3, [pc, #424]	; (8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800498e:	ee07 3a90 	vmov	s15, r3
 8004992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004996:	ed97 6a03 	vldr	s12, [r7, #12]
 800499a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800499e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049b6:	e065      	b.n	8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	ee07 3a90 	vmov	s15, r3
 80049be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004b40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80049c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ca:	4b59      	ldr	r3, [pc, #356]	; (8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049da:	ed97 6a03 	vldr	s12, [r7, #12]
 80049de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049fa:	e043      	b.n	8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	ee07 3a90 	vmov	s15, r3
 8004a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004b44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a0e:	4b48      	ldr	r3, [pc, #288]	; (8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a16:	ee07 3a90 	vmov	s15, r3
 8004a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a22:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a3e:	e021      	b.n	8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004b40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a52:	4b37      	ldr	r3, [pc, #220]	; (8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5a:	ee07 3a90 	vmov	s15, r3
 8004a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a66:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a82:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004a84:	4b2a      	ldr	r3, [pc, #168]	; (8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a88:	0a5b      	lsrs	r3, r3, #9
 8004a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a8e:	ee07 3a90 	vmov	s15, r3
 8004a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004aa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aaa:	ee17 2a90 	vmov	r2, s15
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004ab2:	4b1f      	ldr	r3, [pc, #124]	; (8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	0c1b      	lsrs	r3, r3, #16
 8004ab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004abc:	ee07 3a90 	vmov	s15, r3
 8004ac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ac4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ac8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004acc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ad8:	ee17 2a90 	vmov	r2, s15
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004ae0:	4b13      	ldr	r3, [pc, #76]	; (8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	0e1b      	lsrs	r3, r3, #24
 8004ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aea:	ee07 3a90 	vmov	s15, r3
 8004aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004af6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004afa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004afe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b06:	ee17 2a90 	vmov	r2, s15
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004b0e:	e008      	b.n	8004b22 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	609a      	str	r2, [r3, #8]
}
 8004b22:	bf00      	nop
 8004b24:	3724      	adds	r7, #36	; 0x24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	58024400 	.word	0x58024400
 8004b34:	03d09000 	.word	0x03d09000
 8004b38:	46000000 	.word	0x46000000
 8004b3c:	4c742400 	.word	0x4c742400
 8004b40:	4a742400 	.word	0x4a742400
 8004b44:	4af42400 	.word	0x4af42400

08004b48 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b52:	2300      	movs	r3, #0
 8004b54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b56:	4b53      	ldr	r3, [pc, #332]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5a:	f003 0303 	and.w	r3, r3, #3
 8004b5e:	2b03      	cmp	r3, #3
 8004b60:	d101      	bne.n	8004b66 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e099      	b.n	8004c9a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004b66:	4b4f      	ldr	r3, [pc, #316]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a4e      	ldr	r2, [pc, #312]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004b6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b72:	f7fc fd49 	bl	8001608 <HAL_GetTick>
 8004b76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b78:	e008      	b.n	8004b8c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004b7a:	f7fc fd45 	bl	8001608 <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d901      	bls.n	8004b8c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e086      	b.n	8004c9a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b8c:	4b45      	ldr	r3, [pc, #276]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1f0      	bne.n	8004b7a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004b98:	4b42      	ldr	r3, [pc, #264]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	031b      	lsls	r3, r3, #12
 8004ba6:	493f      	ldr	r1, [pc, #252]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	628b      	str	r3, [r1, #40]	; 0x28
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	025b      	lsls	r3, r3, #9
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	041b      	lsls	r3, r3, #16
 8004bca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	061b      	lsls	r3, r3, #24
 8004bd8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004bdc:	4931      	ldr	r1, [pc, #196]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004be2:	4b30      	ldr	r3, [pc, #192]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	492d      	ldr	r1, [pc, #180]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004bf4:	4b2b      	ldr	r3, [pc, #172]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	f023 0220 	bic.w	r2, r3, #32
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	4928      	ldr	r1, [pc, #160]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004c06:	4b27      	ldr	r3, [pc, #156]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0a:	4a26      	ldr	r2, [pc, #152]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c0c:	f023 0310 	bic.w	r3, r3, #16
 8004c10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c12:	4b24      	ldr	r3, [pc, #144]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c16:	4b24      	ldr	r3, [pc, #144]	; (8004ca8 <RCCEx_PLL2_Config+0x160>)
 8004c18:	4013      	ands	r3, r2
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	69d2      	ldr	r2, [r2, #28]
 8004c1e:	00d2      	lsls	r2, r2, #3
 8004c20:	4920      	ldr	r1, [pc, #128]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004c26:	4b1f      	ldr	r3, [pc, #124]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2a:	4a1e      	ldr	r2, [pc, #120]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c2c:	f043 0310 	orr.w	r3, r3, #16
 8004c30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d106      	bne.n	8004c46 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c38:	4b1a      	ldr	r3, [pc, #104]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	4a19      	ldr	r2, [pc, #100]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c44:	e00f      	b.n	8004c66 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d106      	bne.n	8004c5a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004c4c:	4b15      	ldr	r3, [pc, #84]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	4a14      	ldr	r2, [pc, #80]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c58:	e005      	b.n	8004c66 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004c5a:	4b12      	ldr	r3, [pc, #72]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5e:	4a11      	ldr	r2, [pc, #68]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004c66:	4b0f      	ldr	r3, [pc, #60]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a0e      	ldr	r2, [pc, #56]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c72:	f7fc fcc9 	bl	8001608 <HAL_GetTick>
 8004c76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c78:	e008      	b.n	8004c8c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004c7a:	f7fc fcc5 	bl	8001608 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d901      	bls.n	8004c8c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e006      	b.n	8004c9a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c8c:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0f0      	beq.n	8004c7a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	58024400 	.word	0x58024400
 8004ca8:	ffff0007 	.word	0xffff0007

08004cac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004cba:	4b53      	ldr	r3, [pc, #332]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	d101      	bne.n	8004cca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e099      	b.n	8004dfe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004cca:	4b4f      	ldr	r3, [pc, #316]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a4e      	ldr	r2, [pc, #312]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cd6:	f7fc fc97 	bl	8001608 <HAL_GetTick>
 8004cda:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004cdc:	e008      	b.n	8004cf0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004cde:	f7fc fc93 	bl	8001608 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e086      	b.n	8004dfe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004cf0:	4b45      	ldr	r3, [pc, #276]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1f0      	bne.n	8004cde <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004cfc:	4b42      	ldr	r3, [pc, #264]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d00:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	051b      	lsls	r3, r3, #20
 8004d0a:	493f      	ldr	r1, [pc, #252]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	628b      	str	r3, [r1, #40]	; 0x28
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	3b01      	subs	r3, #1
 8004d16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	025b      	lsls	r3, r3, #9
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	431a      	orrs	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	041b      	lsls	r3, r3, #16
 8004d2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	061b      	lsls	r3, r3, #24
 8004d3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d40:	4931      	ldr	r1, [pc, #196]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004d46:	4b30      	ldr	r3, [pc, #192]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	492d      	ldr	r1, [pc, #180]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004d58:	4b2b      	ldr	r3, [pc, #172]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	4928      	ldr	r1, [pc, #160]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004d6a:	4b27      	ldr	r3, [pc, #156]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6e:	4a26      	ldr	r2, [pc, #152]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004d76:	4b24      	ldr	r3, [pc, #144]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004d78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d7a:	4b24      	ldr	r3, [pc, #144]	; (8004e0c <RCCEx_PLL3_Config+0x160>)
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	69d2      	ldr	r2, [r2, #28]
 8004d82:	00d2      	lsls	r2, r2, #3
 8004d84:	4920      	ldr	r1, [pc, #128]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004d8a:	4b1f      	ldr	r3, [pc, #124]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8e:	4a1e      	ldr	r2, [pc, #120]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d106      	bne.n	8004daa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004d9c:	4b1a      	ldr	r3, [pc, #104]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da0:	4a19      	ldr	r2, [pc, #100]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004da2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004da6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004da8:	e00f      	b.n	8004dca <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d106      	bne.n	8004dbe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004db0:	4b15      	ldr	r3, [pc, #84]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db4:	4a14      	ldr	r2, [pc, #80]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004db6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004dba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004dbc:	e005      	b.n	8004dca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004dbe:	4b12      	ldr	r3, [pc, #72]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc2:	4a11      	ldr	r2, [pc, #68]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004dc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dc8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004dca:	4b0f      	ldr	r3, [pc, #60]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a0e      	ldr	r2, [pc, #56]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dd6:	f7fc fc17 	bl	8001608 <HAL_GetTick>
 8004dda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ddc:	e008      	b.n	8004df0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004dde:	f7fc fc13 	bl	8001608 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e006      	b.n	8004dfe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004df0:	4b05      	ldr	r3, [pc, #20]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0f0      	beq.n	8004dde <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	58024400 	.word	0x58024400
 8004e0c:	ffff0007 	.word	0xffff0007

08004e10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e049      	b.n	8004eb6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7fc f966 	bl	8001108 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4610      	mov	r0, r2
 8004e50:	f000 fb3e 	bl	80054d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e08f      	b.n	8004ff4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d106      	bne.n	8004eee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7fc f89d 	bl	8001028 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	6899      	ldr	r1, [r3, #8]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	4b3e      	ldr	r3, [pc, #248]	; (8004ffc <HAL_TIM_Encoder_Init+0x13c>)
 8004f02:	400b      	ands	r3, r1
 8004f04:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	4619      	mov	r1, r3
 8004f10:	4610      	mov	r0, r2
 8004f12:	f000 fadd 	bl	80054d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	4b31      	ldr	r3, [pc, #196]	; (8005000 <HAL_TIM_Encoder_Init+0x140>)
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	021b      	lsls	r3, r3, #8
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	4b2b      	ldr	r3, [pc, #172]	; (8005004 <HAL_TIM_Encoder_Init+0x144>)
 8004f56:	4013      	ands	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4b2a      	ldr	r3, [pc, #168]	; (8005008 <HAL_TIM_Encoder_Init+0x148>)
 8004f5e:	4013      	ands	r3, r2
 8004f60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	68da      	ldr	r2, [r3, #12]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	021b      	lsls	r3, r3, #8
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	011a      	lsls	r2, r3, #4
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	031b      	lsls	r3, r3, #12
 8004f80:	4313      	orrs	r3, r2
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004f8e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004f96:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3718      	adds	r7, #24
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	fffebff8 	.word	0xfffebff8
 8005000:	fffffcfc 	.word	0xfffffcfc
 8005004:	fffff3f3 	.word	0xfffff3f3
 8005008:	ffff0f0f 	.word	0xffff0f0f

0800500c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b02      	cmp	r3, #2
 8005020:	d122      	bne.n	8005068 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b02      	cmp	r3, #2
 800502e:	d11b      	bne.n	8005068 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f06f 0202 	mvn.w	r2, #2
 8005038:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	f003 0303 	and.w	r3, r3, #3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 fa20 	bl	8005494 <HAL_TIM_IC_CaptureCallback>
 8005054:	e005      	b.n	8005062 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fa12 	bl	8005480 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 fa23 	bl	80054a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f003 0304 	and.w	r3, r3, #4
 8005072:	2b04      	cmp	r3, #4
 8005074:	d122      	bne.n	80050bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b04      	cmp	r3, #4
 8005082:	d11b      	bne.n	80050bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f06f 0204 	mvn.w	r2, #4
 800508c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2202      	movs	r2, #2
 8005092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d003      	beq.n	80050aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f9f6 	bl	8005494 <HAL_TIM_IC_CaptureCallback>
 80050a8:	e005      	b.n	80050b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f9e8 	bl	8005480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f9f9 	bl	80054a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	f003 0308 	and.w	r3, r3, #8
 80050c6:	2b08      	cmp	r3, #8
 80050c8:	d122      	bne.n	8005110 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	f003 0308 	and.w	r3, r3, #8
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	d11b      	bne.n	8005110 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f06f 0208 	mvn.w	r2, #8
 80050e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2204      	movs	r2, #4
 80050e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	f003 0303 	and.w	r3, r3, #3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f9cc 	bl	8005494 <HAL_TIM_IC_CaptureCallback>
 80050fc:	e005      	b.n	800510a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f9be 	bl	8005480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 f9cf 	bl	80054a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	f003 0310 	and.w	r3, r3, #16
 800511a:	2b10      	cmp	r3, #16
 800511c:	d122      	bne.n	8005164 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f003 0310 	and.w	r3, r3, #16
 8005128:	2b10      	cmp	r3, #16
 800512a:	d11b      	bne.n	8005164 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f06f 0210 	mvn.w	r2, #16
 8005134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2208      	movs	r2, #8
 800513a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f9a2 	bl	8005494 <HAL_TIM_IC_CaptureCallback>
 8005150:	e005      	b.n	800515e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f994 	bl	8005480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f9a5 	bl	80054a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b01      	cmp	r3, #1
 8005170:	d10e      	bne.n	8005190 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b01      	cmp	r3, #1
 800517e:	d107      	bne.n	8005190 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f06f 0201 	mvn.w	r2, #1
 8005188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f96e 	bl	800546c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800519a:	2b80      	cmp	r3, #128	; 0x80
 800519c:	d10e      	bne.n	80051bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a8:	2b80      	cmp	r3, #128	; 0x80
 80051aa:	d107      	bne.n	80051bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 fd84 	bl	8005cc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ca:	d10e      	bne.n	80051ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d6:	2b80      	cmp	r3, #128	; 0x80
 80051d8:	d107      	bne.n	80051ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80051e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 fd77 	bl	8005cd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f4:	2b40      	cmp	r3, #64	; 0x40
 80051f6:	d10e      	bne.n	8005216 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005202:	2b40      	cmp	r3, #64	; 0x40
 8005204:	d107      	bne.n	8005216 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800520e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f953 	bl	80054bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	f003 0320 	and.w	r3, r3, #32
 8005220:	2b20      	cmp	r3, #32
 8005222:	d10e      	bne.n	8005242 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	f003 0320 	and.w	r3, r3, #32
 800522e:	2b20      	cmp	r3, #32
 8005230:	d107      	bne.n	8005242 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f06f 0220 	mvn.w	r2, #32
 800523a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fd37 	bl	8005cb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005242:	bf00      	nop
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
	...

0800524c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800525e:	2b01      	cmp	r3, #1
 8005260:	d101      	bne.n	8005266 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005262:	2302      	movs	r3, #2
 8005264:	e0fd      	b.n	8005462 <HAL_TIM_PWM_ConfigChannel+0x216>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b14      	cmp	r3, #20
 8005272:	f200 80f0 	bhi.w	8005456 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005276:	a201      	add	r2, pc, #4	; (adr r2, 800527c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527c:	080052d1 	.word	0x080052d1
 8005280:	08005457 	.word	0x08005457
 8005284:	08005457 	.word	0x08005457
 8005288:	08005457 	.word	0x08005457
 800528c:	08005311 	.word	0x08005311
 8005290:	08005457 	.word	0x08005457
 8005294:	08005457 	.word	0x08005457
 8005298:	08005457 	.word	0x08005457
 800529c:	08005353 	.word	0x08005353
 80052a0:	08005457 	.word	0x08005457
 80052a4:	08005457 	.word	0x08005457
 80052a8:	08005457 	.word	0x08005457
 80052ac:	08005393 	.word	0x08005393
 80052b0:	08005457 	.word	0x08005457
 80052b4:	08005457 	.word	0x08005457
 80052b8:	08005457 	.word	0x08005457
 80052bc:	080053d5 	.word	0x080053d5
 80052c0:	08005457 	.word	0x08005457
 80052c4:	08005457 	.word	0x08005457
 80052c8:	08005457 	.word	0x08005457
 80052cc:	08005415 	.word	0x08005415
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68b9      	ldr	r1, [r7, #8]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 f994 	bl	8005604 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	699a      	ldr	r2, [r3, #24]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f042 0208 	orr.w	r2, r2, #8
 80052ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f022 0204 	bic.w	r2, r2, #4
 80052fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6999      	ldr	r1, [r3, #24]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	691a      	ldr	r2, [r3, #16]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	430a      	orrs	r2, r1
 800530c:	619a      	str	r2, [r3, #24]
      break;
 800530e:	e0a3      	b.n	8005458 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68b9      	ldr	r1, [r7, #8]
 8005316:	4618      	mov	r0, r3
 8005318:	f000 fa04 	bl	8005724 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699a      	ldr	r2, [r3, #24]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800532a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699a      	ldr	r2, [r3, #24]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800533a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6999      	ldr	r1, [r3, #24]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	021a      	lsls	r2, r3, #8
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	619a      	str	r2, [r3, #24]
      break;
 8005350:	e082      	b.n	8005458 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68b9      	ldr	r1, [r7, #8]
 8005358:	4618      	mov	r0, r3
 800535a:	f000 fa6d 	bl	8005838 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	69da      	ldr	r2, [r3, #28]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f042 0208 	orr.w	r2, r2, #8
 800536c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69da      	ldr	r2, [r3, #28]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 0204 	bic.w	r2, r2, #4
 800537c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69d9      	ldr	r1, [r3, #28]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	691a      	ldr	r2, [r3, #16]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	61da      	str	r2, [r3, #28]
      break;
 8005390:	e062      	b.n	8005458 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68b9      	ldr	r1, [r7, #8]
 8005398:	4618      	mov	r0, r3
 800539a:	f000 fad3 	bl	8005944 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	69da      	ldr	r2, [r3, #28]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	69da      	ldr	r2, [r3, #28]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	69d9      	ldr	r1, [r3, #28]
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	021a      	lsls	r2, r3, #8
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	61da      	str	r2, [r3, #28]
      break;
 80053d2:	e041      	b.n	8005458 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68b9      	ldr	r1, [r7, #8]
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 fb1a 	bl	8005a14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 0208 	orr.w	r2, r2, #8
 80053ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 0204 	bic.w	r2, r2, #4
 80053fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	691a      	ldr	r2, [r3, #16]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005412:	e021      	b.n	8005458 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68b9      	ldr	r1, [r7, #8]
 800541a:	4618      	mov	r0, r3
 800541c:	f000 fb5c 	bl	8005ad8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800542e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800543e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	021a      	lsls	r2, r3, #8
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005454:	e000      	b.n	8005458 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005456:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop

0800546c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a40      	ldr	r2, [pc, #256]	; (80055e4 <TIM_Base_SetConfig+0x114>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d013      	beq.n	8005510 <TIM_Base_SetConfig+0x40>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ee:	d00f      	beq.n	8005510 <TIM_Base_SetConfig+0x40>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a3d      	ldr	r2, [pc, #244]	; (80055e8 <TIM_Base_SetConfig+0x118>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d00b      	beq.n	8005510 <TIM_Base_SetConfig+0x40>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a3c      	ldr	r2, [pc, #240]	; (80055ec <TIM_Base_SetConfig+0x11c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d007      	beq.n	8005510 <TIM_Base_SetConfig+0x40>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a3b      	ldr	r2, [pc, #236]	; (80055f0 <TIM_Base_SetConfig+0x120>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d003      	beq.n	8005510 <TIM_Base_SetConfig+0x40>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a3a      	ldr	r2, [pc, #232]	; (80055f4 <TIM_Base_SetConfig+0x124>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d108      	bne.n	8005522 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005516:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	4313      	orrs	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a2f      	ldr	r2, [pc, #188]	; (80055e4 <TIM_Base_SetConfig+0x114>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d01f      	beq.n	800556a <TIM_Base_SetConfig+0x9a>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005530:	d01b      	beq.n	800556a <TIM_Base_SetConfig+0x9a>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a2c      	ldr	r2, [pc, #176]	; (80055e8 <TIM_Base_SetConfig+0x118>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d017      	beq.n	800556a <TIM_Base_SetConfig+0x9a>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a2b      	ldr	r2, [pc, #172]	; (80055ec <TIM_Base_SetConfig+0x11c>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d013      	beq.n	800556a <TIM_Base_SetConfig+0x9a>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a2a      	ldr	r2, [pc, #168]	; (80055f0 <TIM_Base_SetConfig+0x120>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d00f      	beq.n	800556a <TIM_Base_SetConfig+0x9a>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a29      	ldr	r2, [pc, #164]	; (80055f4 <TIM_Base_SetConfig+0x124>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d00b      	beq.n	800556a <TIM_Base_SetConfig+0x9a>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a28      	ldr	r2, [pc, #160]	; (80055f8 <TIM_Base_SetConfig+0x128>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d007      	beq.n	800556a <TIM_Base_SetConfig+0x9a>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a27      	ldr	r2, [pc, #156]	; (80055fc <TIM_Base_SetConfig+0x12c>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d003      	beq.n	800556a <TIM_Base_SetConfig+0x9a>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a26      	ldr	r2, [pc, #152]	; (8005600 <TIM_Base_SetConfig+0x130>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d108      	bne.n	800557c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	4313      	orrs	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	4313      	orrs	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a10      	ldr	r2, [pc, #64]	; (80055e4 <TIM_Base_SetConfig+0x114>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d00f      	beq.n	80055c8 <TIM_Base_SetConfig+0xf8>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a12      	ldr	r2, [pc, #72]	; (80055f4 <TIM_Base_SetConfig+0x124>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d00b      	beq.n	80055c8 <TIM_Base_SetConfig+0xf8>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a11      	ldr	r2, [pc, #68]	; (80055f8 <TIM_Base_SetConfig+0x128>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d007      	beq.n	80055c8 <TIM_Base_SetConfig+0xf8>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a10      	ldr	r2, [pc, #64]	; (80055fc <TIM_Base_SetConfig+0x12c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d003      	beq.n	80055c8 <TIM_Base_SetConfig+0xf8>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a0f      	ldr	r2, [pc, #60]	; (8005600 <TIM_Base_SetConfig+0x130>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d103      	bne.n	80055d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	691a      	ldr	r2, [r3, #16]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	615a      	str	r2, [r3, #20]
}
 80055d6:	bf00      	nop
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	40010000 	.word	0x40010000
 80055e8:	40000400 	.word	0x40000400
 80055ec:	40000800 	.word	0x40000800
 80055f0:	40000c00 	.word	0x40000c00
 80055f4:	40010400 	.word	0x40010400
 80055f8:	40014000 	.word	0x40014000
 80055fc:	40014400 	.word	0x40014400
 8005600:	40014800 	.word	0x40014800

08005604 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	f023 0201 	bic.w	r2, r3, #1
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	4b37      	ldr	r3, [pc, #220]	; (800570c <TIM_OC1_SetConfig+0x108>)
 8005630:	4013      	ands	r3, r2
 8005632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f023 0303 	bic.w	r3, r3, #3
 800563a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	4313      	orrs	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f023 0302 	bic.w	r3, r3, #2
 800564c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	4313      	orrs	r3, r2
 8005656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a2d      	ldr	r2, [pc, #180]	; (8005710 <TIM_OC1_SetConfig+0x10c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d00f      	beq.n	8005680 <TIM_OC1_SetConfig+0x7c>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a2c      	ldr	r2, [pc, #176]	; (8005714 <TIM_OC1_SetConfig+0x110>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d00b      	beq.n	8005680 <TIM_OC1_SetConfig+0x7c>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a2b      	ldr	r2, [pc, #172]	; (8005718 <TIM_OC1_SetConfig+0x114>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d007      	beq.n	8005680 <TIM_OC1_SetConfig+0x7c>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a2a      	ldr	r2, [pc, #168]	; (800571c <TIM_OC1_SetConfig+0x118>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d003      	beq.n	8005680 <TIM_OC1_SetConfig+0x7c>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a29      	ldr	r2, [pc, #164]	; (8005720 <TIM_OC1_SetConfig+0x11c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d10c      	bne.n	800569a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f023 0308 	bic.w	r3, r3, #8
 8005686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	4313      	orrs	r3, r2
 8005690:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f023 0304 	bic.w	r3, r3, #4
 8005698:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a1c      	ldr	r2, [pc, #112]	; (8005710 <TIM_OC1_SetConfig+0x10c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00f      	beq.n	80056c2 <TIM_OC1_SetConfig+0xbe>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a1b      	ldr	r2, [pc, #108]	; (8005714 <TIM_OC1_SetConfig+0x110>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d00b      	beq.n	80056c2 <TIM_OC1_SetConfig+0xbe>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a1a      	ldr	r2, [pc, #104]	; (8005718 <TIM_OC1_SetConfig+0x114>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d007      	beq.n	80056c2 <TIM_OC1_SetConfig+0xbe>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a19      	ldr	r2, [pc, #100]	; (800571c <TIM_OC1_SetConfig+0x118>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d003      	beq.n	80056c2 <TIM_OC1_SetConfig+0xbe>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a18      	ldr	r2, [pc, #96]	; (8005720 <TIM_OC1_SetConfig+0x11c>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d111      	bne.n	80056e6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	4313      	orrs	r3, r2
 80056da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	621a      	str	r2, [r3, #32]
}
 8005700:	bf00      	nop
 8005702:	371c      	adds	r7, #28
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	fffeff8f 	.word	0xfffeff8f
 8005710:	40010000 	.word	0x40010000
 8005714:	40010400 	.word	0x40010400
 8005718:	40014000 	.word	0x40014000
 800571c:	40014400 	.word	0x40014400
 8005720:	40014800 	.word	0x40014800

08005724 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	f023 0210 	bic.w	r2, r3, #16
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	4b34      	ldr	r3, [pc, #208]	; (8005820 <TIM_OC2_SetConfig+0xfc>)
 8005750:	4013      	ands	r3, r2
 8005752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800575a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	021b      	lsls	r3, r3, #8
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	4313      	orrs	r3, r2
 8005766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	f023 0320 	bic.w	r3, r3, #32
 800576e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	011b      	lsls	r3, r3, #4
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	4313      	orrs	r3, r2
 800577a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a29      	ldr	r2, [pc, #164]	; (8005824 <TIM_OC2_SetConfig+0x100>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d003      	beq.n	800578c <TIM_OC2_SetConfig+0x68>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a28      	ldr	r2, [pc, #160]	; (8005828 <TIM_OC2_SetConfig+0x104>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d10d      	bne.n	80057a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	011b      	lsls	r3, r3, #4
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	4313      	orrs	r3, r2
 800579e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a1e      	ldr	r2, [pc, #120]	; (8005824 <TIM_OC2_SetConfig+0x100>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d00f      	beq.n	80057d0 <TIM_OC2_SetConfig+0xac>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a1d      	ldr	r2, [pc, #116]	; (8005828 <TIM_OC2_SetConfig+0x104>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d00b      	beq.n	80057d0 <TIM_OC2_SetConfig+0xac>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a1c      	ldr	r2, [pc, #112]	; (800582c <TIM_OC2_SetConfig+0x108>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d007      	beq.n	80057d0 <TIM_OC2_SetConfig+0xac>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a1b      	ldr	r2, [pc, #108]	; (8005830 <TIM_OC2_SetConfig+0x10c>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d003      	beq.n	80057d0 <TIM_OC2_SetConfig+0xac>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a1a      	ldr	r2, [pc, #104]	; (8005834 <TIM_OC2_SetConfig+0x110>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d113      	bne.n	80057f8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	621a      	str	r2, [r3, #32]
}
 8005812:	bf00      	nop
 8005814:	371c      	adds	r7, #28
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	feff8fff 	.word	0xfeff8fff
 8005824:	40010000 	.word	0x40010000
 8005828:	40010400 	.word	0x40010400
 800582c:	40014000 	.word	0x40014000
 8005830:	40014400 	.word	0x40014400
 8005834:	40014800 	.word	0x40014800

08005838 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005838:	b480      	push	{r7}
 800583a:	b087      	sub	sp, #28
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f023 0303 	bic.w	r3, r3, #3
 800586e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	021b      	lsls	r3, r3, #8
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	4313      	orrs	r3, r2
 800588c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a27      	ldr	r2, [pc, #156]	; (8005930 <TIM_OC3_SetConfig+0xf8>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d003      	beq.n	800589e <TIM_OC3_SetConfig+0x66>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a26      	ldr	r2, [pc, #152]	; (8005934 <TIM_OC3_SetConfig+0xfc>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d10d      	bne.n	80058ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	021b      	lsls	r3, r3, #8
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a1c      	ldr	r2, [pc, #112]	; (8005930 <TIM_OC3_SetConfig+0xf8>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d00f      	beq.n	80058e2 <TIM_OC3_SetConfig+0xaa>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a1b      	ldr	r2, [pc, #108]	; (8005934 <TIM_OC3_SetConfig+0xfc>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d00b      	beq.n	80058e2 <TIM_OC3_SetConfig+0xaa>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a1a      	ldr	r2, [pc, #104]	; (8005938 <TIM_OC3_SetConfig+0x100>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d007      	beq.n	80058e2 <TIM_OC3_SetConfig+0xaa>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a19      	ldr	r2, [pc, #100]	; (800593c <TIM_OC3_SetConfig+0x104>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d003      	beq.n	80058e2 <TIM_OC3_SetConfig+0xaa>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a18      	ldr	r2, [pc, #96]	; (8005940 <TIM_OC3_SetConfig+0x108>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d113      	bne.n	800590a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	011b      	lsls	r3, r3, #4
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	011b      	lsls	r3, r3, #4
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	4313      	orrs	r3, r2
 8005908:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	621a      	str	r2, [r3, #32]
}
 8005924:	bf00      	nop
 8005926:	371c      	adds	r7, #28
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	40010000 	.word	0x40010000
 8005934:	40010400 	.word	0x40010400
 8005938:	40014000 	.word	0x40014000
 800593c:	40014400 	.word	0x40014400
 8005940:	40014800 	.word	0x40014800

08005944 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005944:	b480      	push	{r7}
 8005946:	b087      	sub	sp, #28
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800597a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	021b      	lsls	r3, r3, #8
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	4313      	orrs	r3, r2
 8005986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800598e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	031b      	lsls	r3, r3, #12
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	4313      	orrs	r3, r2
 800599a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a18      	ldr	r2, [pc, #96]	; (8005a00 <TIM_OC4_SetConfig+0xbc>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00f      	beq.n	80059c4 <TIM_OC4_SetConfig+0x80>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a17      	ldr	r2, [pc, #92]	; (8005a04 <TIM_OC4_SetConfig+0xc0>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d00b      	beq.n	80059c4 <TIM_OC4_SetConfig+0x80>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a16      	ldr	r2, [pc, #88]	; (8005a08 <TIM_OC4_SetConfig+0xc4>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d007      	beq.n	80059c4 <TIM_OC4_SetConfig+0x80>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a15      	ldr	r2, [pc, #84]	; (8005a0c <TIM_OC4_SetConfig+0xc8>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d003      	beq.n	80059c4 <TIM_OC4_SetConfig+0x80>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a14      	ldr	r2, [pc, #80]	; (8005a10 <TIM_OC4_SetConfig+0xcc>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d109      	bne.n	80059d8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	019b      	lsls	r3, r3, #6
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	621a      	str	r2, [r3, #32]
}
 80059f2:	bf00      	nop
 80059f4:	371c      	adds	r7, #28
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	40010000 	.word	0x40010000
 8005a04:	40010400 	.word	0x40010400
 8005a08:	40014000 	.word	0x40014000
 8005a0c:	40014400 	.word	0x40014400
 8005a10:	40014800 	.word	0x40014800

08005a14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	041b      	lsls	r3, r3, #16
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a17      	ldr	r2, [pc, #92]	; (8005ac4 <TIM_OC5_SetConfig+0xb0>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d00f      	beq.n	8005a8a <TIM_OC5_SetConfig+0x76>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a16      	ldr	r2, [pc, #88]	; (8005ac8 <TIM_OC5_SetConfig+0xb4>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d00b      	beq.n	8005a8a <TIM_OC5_SetConfig+0x76>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a15      	ldr	r2, [pc, #84]	; (8005acc <TIM_OC5_SetConfig+0xb8>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d007      	beq.n	8005a8a <TIM_OC5_SetConfig+0x76>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a14      	ldr	r2, [pc, #80]	; (8005ad0 <TIM_OC5_SetConfig+0xbc>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d003      	beq.n	8005a8a <TIM_OC5_SetConfig+0x76>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a13      	ldr	r2, [pc, #76]	; (8005ad4 <TIM_OC5_SetConfig+0xc0>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d109      	bne.n	8005a9e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	021b      	lsls	r3, r3, #8
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	621a      	str	r2, [r3, #32]
}
 8005ab8:	bf00      	nop
 8005aba:	371c      	adds	r7, #28
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	40010000 	.word	0x40010000
 8005ac8:	40010400 	.word	0x40010400
 8005acc:	40014000 	.word	0x40014000
 8005ad0:	40014400 	.word	0x40014400
 8005ad4:	40014800 	.word	0x40014800

08005ad8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	021b      	lsls	r3, r3, #8
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	051b      	lsls	r3, r3, #20
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a18      	ldr	r2, [pc, #96]	; (8005b8c <TIM_OC6_SetConfig+0xb4>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d00f      	beq.n	8005b50 <TIM_OC6_SetConfig+0x78>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a17      	ldr	r2, [pc, #92]	; (8005b90 <TIM_OC6_SetConfig+0xb8>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d00b      	beq.n	8005b50 <TIM_OC6_SetConfig+0x78>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a16      	ldr	r2, [pc, #88]	; (8005b94 <TIM_OC6_SetConfig+0xbc>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d007      	beq.n	8005b50 <TIM_OC6_SetConfig+0x78>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a15      	ldr	r2, [pc, #84]	; (8005b98 <TIM_OC6_SetConfig+0xc0>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d003      	beq.n	8005b50 <TIM_OC6_SetConfig+0x78>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a14      	ldr	r2, [pc, #80]	; (8005b9c <TIM_OC6_SetConfig+0xc4>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d109      	bne.n	8005b64 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	029b      	lsls	r3, r3, #10
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	621a      	str	r2, [r3, #32]
}
 8005b7e:	bf00      	nop
 8005b80:	371c      	adds	r7, #28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	40010000 	.word	0x40010000
 8005b90:	40010400 	.word	0x40010400
 8005b94:	40014000 	.word	0x40014000
 8005b98:	40014400 	.word	0x40014400
 8005b9c:	40014800 	.word	0x40014800

08005ba0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d101      	bne.n	8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	e068      	b.n	8005c8a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a2e      	ldr	r2, [pc, #184]	; (8005c98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d004      	beq.n	8005bec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a2d      	ldr	r2, [pc, #180]	; (8005c9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d108      	bne.n	8005bfe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005bf2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a1e      	ldr	r2, [pc, #120]	; (8005c98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d01d      	beq.n	8005c5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c2a:	d018      	beq.n	8005c5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a1b      	ldr	r2, [pc, #108]	; (8005ca0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d013      	beq.n	8005c5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a1a      	ldr	r2, [pc, #104]	; (8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d00e      	beq.n	8005c5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a18      	ldr	r2, [pc, #96]	; (8005ca8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d009      	beq.n	8005c5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a13      	ldr	r2, [pc, #76]	; (8005c9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d004      	beq.n	8005c5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a14      	ldr	r2, [pc, #80]	; (8005cac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d10c      	bne.n	8005c78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	40010000 	.word	0x40010000
 8005c9c:	40010400 	.word	0x40010400
 8005ca0:	40000400 	.word	0x40000400
 8005ca4:	40000800 	.word	0x40000800
 8005ca8:	40000c00 	.word	0x40000c00
 8005cac:	40001800 	.word	0x40001800

08005cb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e042      	b.n	8005d84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d106      	bne.n	8005d16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f7fb fa77 	bl	8001204 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2224      	movs	r2, #36	; 0x24
 8005d1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 0201 	bic.w	r2, r2, #1
 8005d2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f8c2 	bl	8005eb8 <UART_SetConfig>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d101      	bne.n	8005d3e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e022      	b.n	8005d84 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d002      	beq.n	8005d4c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 fe16 	bl	8006978 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689a      	ldr	r2, [r3, #8]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f042 0201 	orr.w	r2, r2, #1
 8005d7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 fe9d 	bl	8006abc <UART_CheckIdleState>
 8005d82:	4603      	mov	r3, r0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3708      	adds	r7, #8
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b08a      	sub	sp, #40	; 0x28
 8005d90:	af02      	add	r7, sp, #8
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	603b      	str	r3, [r7, #0]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005da2:	2b20      	cmp	r3, #32
 8005da4:	f040 8083 	bne.w	8005eae <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d002      	beq.n	8005db4 <HAL_UART_Transmit+0x28>
 8005dae:	88fb      	ldrh	r3, [r7, #6]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d101      	bne.n	8005db8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e07b      	b.n	8005eb0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d101      	bne.n	8005dc6 <HAL_UART_Transmit+0x3a>
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	e074      	b.n	8005eb0 <HAL_UART_Transmit+0x124>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2221      	movs	r2, #33	; 0x21
 8005dda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dde:	f7fb fc13 	bl	8001608 <HAL_GetTick>
 8005de2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	88fa      	ldrh	r2, [r7, #6]
 8005de8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	88fa      	ldrh	r2, [r7, #6]
 8005df0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dfc:	d108      	bne.n	8005e10 <HAL_UART_Transmit+0x84>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d104      	bne.n	8005e10 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005e06:	2300      	movs	r3, #0
 8005e08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	61bb      	str	r3, [r7, #24]
 8005e0e:	e003      	b.n	8005e18 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e14:	2300      	movs	r3, #0
 8005e16:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005e20:	e02c      	b.n	8005e7c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	2180      	movs	r1, #128	; 0x80
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f000 fe90 	bl	8006b52 <UART_WaitOnFlagUntilTimeout>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d001      	beq.n	8005e3c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e039      	b.n	8005eb0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10b      	bne.n	8005e5a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	881b      	ldrh	r3, [r3, #0]
 8005e46:	461a      	mov	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e50:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	3302      	adds	r3, #2
 8005e56:	61bb      	str	r3, [r7, #24]
 8005e58:	e007      	b.n	8005e6a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	781a      	ldrb	r2, [r3, #0]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	3301      	adds	r3, #1
 8005e68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	3b01      	subs	r3, #1
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1cc      	bne.n	8005e22 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	2140      	movs	r1, #64	; 0x40
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f000 fe5d 	bl	8006b52 <UART_WaitOnFlagUntilTimeout>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e006      	b.n	8005eb0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	e000      	b.n	8005eb0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005eae:	2302      	movs	r3, #2
  }
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3720      	adds	r7, #32
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005eb8:	b5b0      	push	{r4, r5, r7, lr}
 8005eba:	b08e      	sub	sp, #56	; 0x38
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	689a      	ldr	r2, [r3, #8]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	431a      	orrs	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	431a      	orrs	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	4bbf      	ldr	r3, [pc, #764]	; (80061e4 <UART_SetConfig+0x32c>)
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	6812      	ldr	r2, [r2, #0]
 8005eec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005eee:	430b      	orrs	r3, r1
 8005ef0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68da      	ldr	r2, [r3, #12]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	430a      	orrs	r2, r1
 8005f06:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4ab5      	ldr	r2, [pc, #724]	; (80061e8 <UART_SetConfig+0x330>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d004      	beq.n	8005f22 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a1b      	ldr	r3, [r3, #32]
 8005f1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689a      	ldr	r2, [r3, #8]
 8005f28:	4bb0      	ldr	r3, [pc, #704]	; (80061ec <UART_SetConfig+0x334>)
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	6812      	ldr	r2, [r2, #0]
 8005f30:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005f32:	430b      	orrs	r3, r1
 8005f34:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3c:	f023 010f 	bic.w	r1, r3, #15
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4aa7      	ldr	r2, [pc, #668]	; (80061f0 <UART_SetConfig+0x338>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d176      	bne.n	8006044 <UART_SetConfig+0x18c>
 8005f56:	4ba7      	ldr	r3, [pc, #668]	; (80061f4 <UART_SetConfig+0x33c>)
 8005f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f5e:	2b28      	cmp	r3, #40	; 0x28
 8005f60:	d86c      	bhi.n	800603c <UART_SetConfig+0x184>
 8005f62:	a201      	add	r2, pc, #4	; (adr r2, 8005f68 <UART_SetConfig+0xb0>)
 8005f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f68:	0800600d 	.word	0x0800600d
 8005f6c:	0800603d 	.word	0x0800603d
 8005f70:	0800603d 	.word	0x0800603d
 8005f74:	0800603d 	.word	0x0800603d
 8005f78:	0800603d 	.word	0x0800603d
 8005f7c:	0800603d 	.word	0x0800603d
 8005f80:	0800603d 	.word	0x0800603d
 8005f84:	0800603d 	.word	0x0800603d
 8005f88:	08006015 	.word	0x08006015
 8005f8c:	0800603d 	.word	0x0800603d
 8005f90:	0800603d 	.word	0x0800603d
 8005f94:	0800603d 	.word	0x0800603d
 8005f98:	0800603d 	.word	0x0800603d
 8005f9c:	0800603d 	.word	0x0800603d
 8005fa0:	0800603d 	.word	0x0800603d
 8005fa4:	0800603d 	.word	0x0800603d
 8005fa8:	0800601d 	.word	0x0800601d
 8005fac:	0800603d 	.word	0x0800603d
 8005fb0:	0800603d 	.word	0x0800603d
 8005fb4:	0800603d 	.word	0x0800603d
 8005fb8:	0800603d 	.word	0x0800603d
 8005fbc:	0800603d 	.word	0x0800603d
 8005fc0:	0800603d 	.word	0x0800603d
 8005fc4:	0800603d 	.word	0x0800603d
 8005fc8:	08006025 	.word	0x08006025
 8005fcc:	0800603d 	.word	0x0800603d
 8005fd0:	0800603d 	.word	0x0800603d
 8005fd4:	0800603d 	.word	0x0800603d
 8005fd8:	0800603d 	.word	0x0800603d
 8005fdc:	0800603d 	.word	0x0800603d
 8005fe0:	0800603d 	.word	0x0800603d
 8005fe4:	0800603d 	.word	0x0800603d
 8005fe8:	0800602d 	.word	0x0800602d
 8005fec:	0800603d 	.word	0x0800603d
 8005ff0:	0800603d 	.word	0x0800603d
 8005ff4:	0800603d 	.word	0x0800603d
 8005ff8:	0800603d 	.word	0x0800603d
 8005ffc:	0800603d 	.word	0x0800603d
 8006000:	0800603d 	.word	0x0800603d
 8006004:	0800603d 	.word	0x0800603d
 8006008:	08006035 	.word	0x08006035
 800600c:	2301      	movs	r3, #1
 800600e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006012:	e222      	b.n	800645a <UART_SetConfig+0x5a2>
 8006014:	2304      	movs	r3, #4
 8006016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800601a:	e21e      	b.n	800645a <UART_SetConfig+0x5a2>
 800601c:	2308      	movs	r3, #8
 800601e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006022:	e21a      	b.n	800645a <UART_SetConfig+0x5a2>
 8006024:	2310      	movs	r3, #16
 8006026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800602a:	e216      	b.n	800645a <UART_SetConfig+0x5a2>
 800602c:	2320      	movs	r3, #32
 800602e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006032:	e212      	b.n	800645a <UART_SetConfig+0x5a2>
 8006034:	2340      	movs	r3, #64	; 0x40
 8006036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800603a:	e20e      	b.n	800645a <UART_SetConfig+0x5a2>
 800603c:	2380      	movs	r3, #128	; 0x80
 800603e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006042:	e20a      	b.n	800645a <UART_SetConfig+0x5a2>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a6b      	ldr	r2, [pc, #428]	; (80061f8 <UART_SetConfig+0x340>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d130      	bne.n	80060b0 <UART_SetConfig+0x1f8>
 800604e:	4b69      	ldr	r3, [pc, #420]	; (80061f4 <UART_SetConfig+0x33c>)
 8006050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006052:	f003 0307 	and.w	r3, r3, #7
 8006056:	2b05      	cmp	r3, #5
 8006058:	d826      	bhi.n	80060a8 <UART_SetConfig+0x1f0>
 800605a:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <UART_SetConfig+0x1a8>)
 800605c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006060:	08006079 	.word	0x08006079
 8006064:	08006081 	.word	0x08006081
 8006068:	08006089 	.word	0x08006089
 800606c:	08006091 	.word	0x08006091
 8006070:	08006099 	.word	0x08006099
 8006074:	080060a1 	.word	0x080060a1
 8006078:	2300      	movs	r3, #0
 800607a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800607e:	e1ec      	b.n	800645a <UART_SetConfig+0x5a2>
 8006080:	2304      	movs	r3, #4
 8006082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006086:	e1e8      	b.n	800645a <UART_SetConfig+0x5a2>
 8006088:	2308      	movs	r3, #8
 800608a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800608e:	e1e4      	b.n	800645a <UART_SetConfig+0x5a2>
 8006090:	2310      	movs	r3, #16
 8006092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006096:	e1e0      	b.n	800645a <UART_SetConfig+0x5a2>
 8006098:	2320      	movs	r3, #32
 800609a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800609e:	e1dc      	b.n	800645a <UART_SetConfig+0x5a2>
 80060a0:	2340      	movs	r3, #64	; 0x40
 80060a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060a6:	e1d8      	b.n	800645a <UART_SetConfig+0x5a2>
 80060a8:	2380      	movs	r3, #128	; 0x80
 80060aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060ae:	e1d4      	b.n	800645a <UART_SetConfig+0x5a2>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a51      	ldr	r2, [pc, #324]	; (80061fc <UART_SetConfig+0x344>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d130      	bne.n	800611c <UART_SetConfig+0x264>
 80060ba:	4b4e      	ldr	r3, [pc, #312]	; (80061f4 <UART_SetConfig+0x33c>)
 80060bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060be:	f003 0307 	and.w	r3, r3, #7
 80060c2:	2b05      	cmp	r3, #5
 80060c4:	d826      	bhi.n	8006114 <UART_SetConfig+0x25c>
 80060c6:	a201      	add	r2, pc, #4	; (adr r2, 80060cc <UART_SetConfig+0x214>)
 80060c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060cc:	080060e5 	.word	0x080060e5
 80060d0:	080060ed 	.word	0x080060ed
 80060d4:	080060f5 	.word	0x080060f5
 80060d8:	080060fd 	.word	0x080060fd
 80060dc:	08006105 	.word	0x08006105
 80060e0:	0800610d 	.word	0x0800610d
 80060e4:	2300      	movs	r3, #0
 80060e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060ea:	e1b6      	b.n	800645a <UART_SetConfig+0x5a2>
 80060ec:	2304      	movs	r3, #4
 80060ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060f2:	e1b2      	b.n	800645a <UART_SetConfig+0x5a2>
 80060f4:	2308      	movs	r3, #8
 80060f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060fa:	e1ae      	b.n	800645a <UART_SetConfig+0x5a2>
 80060fc:	2310      	movs	r3, #16
 80060fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006102:	e1aa      	b.n	800645a <UART_SetConfig+0x5a2>
 8006104:	2320      	movs	r3, #32
 8006106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800610a:	e1a6      	b.n	800645a <UART_SetConfig+0x5a2>
 800610c:	2340      	movs	r3, #64	; 0x40
 800610e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006112:	e1a2      	b.n	800645a <UART_SetConfig+0x5a2>
 8006114:	2380      	movs	r3, #128	; 0x80
 8006116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800611a:	e19e      	b.n	800645a <UART_SetConfig+0x5a2>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a37      	ldr	r2, [pc, #220]	; (8006200 <UART_SetConfig+0x348>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d130      	bne.n	8006188 <UART_SetConfig+0x2d0>
 8006126:	4b33      	ldr	r3, [pc, #204]	; (80061f4 <UART_SetConfig+0x33c>)
 8006128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612a:	f003 0307 	and.w	r3, r3, #7
 800612e:	2b05      	cmp	r3, #5
 8006130:	d826      	bhi.n	8006180 <UART_SetConfig+0x2c8>
 8006132:	a201      	add	r2, pc, #4	; (adr r2, 8006138 <UART_SetConfig+0x280>)
 8006134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006138:	08006151 	.word	0x08006151
 800613c:	08006159 	.word	0x08006159
 8006140:	08006161 	.word	0x08006161
 8006144:	08006169 	.word	0x08006169
 8006148:	08006171 	.word	0x08006171
 800614c:	08006179 	.word	0x08006179
 8006150:	2300      	movs	r3, #0
 8006152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006156:	e180      	b.n	800645a <UART_SetConfig+0x5a2>
 8006158:	2304      	movs	r3, #4
 800615a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800615e:	e17c      	b.n	800645a <UART_SetConfig+0x5a2>
 8006160:	2308      	movs	r3, #8
 8006162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006166:	e178      	b.n	800645a <UART_SetConfig+0x5a2>
 8006168:	2310      	movs	r3, #16
 800616a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800616e:	e174      	b.n	800645a <UART_SetConfig+0x5a2>
 8006170:	2320      	movs	r3, #32
 8006172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006176:	e170      	b.n	800645a <UART_SetConfig+0x5a2>
 8006178:	2340      	movs	r3, #64	; 0x40
 800617a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800617e:	e16c      	b.n	800645a <UART_SetConfig+0x5a2>
 8006180:	2380      	movs	r3, #128	; 0x80
 8006182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006186:	e168      	b.n	800645a <UART_SetConfig+0x5a2>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a1d      	ldr	r2, [pc, #116]	; (8006204 <UART_SetConfig+0x34c>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d142      	bne.n	8006218 <UART_SetConfig+0x360>
 8006192:	4b18      	ldr	r3, [pc, #96]	; (80061f4 <UART_SetConfig+0x33c>)
 8006194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006196:	f003 0307 	and.w	r3, r3, #7
 800619a:	2b05      	cmp	r3, #5
 800619c:	d838      	bhi.n	8006210 <UART_SetConfig+0x358>
 800619e:	a201      	add	r2, pc, #4	; (adr r2, 80061a4 <UART_SetConfig+0x2ec>)
 80061a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a4:	080061bd 	.word	0x080061bd
 80061a8:	080061c5 	.word	0x080061c5
 80061ac:	080061cd 	.word	0x080061cd
 80061b0:	080061d5 	.word	0x080061d5
 80061b4:	080061dd 	.word	0x080061dd
 80061b8:	08006209 	.word	0x08006209
 80061bc:	2300      	movs	r3, #0
 80061be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061c2:	e14a      	b.n	800645a <UART_SetConfig+0x5a2>
 80061c4:	2304      	movs	r3, #4
 80061c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061ca:	e146      	b.n	800645a <UART_SetConfig+0x5a2>
 80061cc:	2308      	movs	r3, #8
 80061ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061d2:	e142      	b.n	800645a <UART_SetConfig+0x5a2>
 80061d4:	2310      	movs	r3, #16
 80061d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061da:	e13e      	b.n	800645a <UART_SetConfig+0x5a2>
 80061dc:	2320      	movs	r3, #32
 80061de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061e2:	e13a      	b.n	800645a <UART_SetConfig+0x5a2>
 80061e4:	cfff69f3 	.word	0xcfff69f3
 80061e8:	58000c00 	.word	0x58000c00
 80061ec:	11fff4ff 	.word	0x11fff4ff
 80061f0:	40011000 	.word	0x40011000
 80061f4:	58024400 	.word	0x58024400
 80061f8:	40004400 	.word	0x40004400
 80061fc:	40004800 	.word	0x40004800
 8006200:	40004c00 	.word	0x40004c00
 8006204:	40005000 	.word	0x40005000
 8006208:	2340      	movs	r3, #64	; 0x40
 800620a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800620e:	e124      	b.n	800645a <UART_SetConfig+0x5a2>
 8006210:	2380      	movs	r3, #128	; 0x80
 8006212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006216:	e120      	b.n	800645a <UART_SetConfig+0x5a2>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4acc      	ldr	r2, [pc, #816]	; (8006550 <UART_SetConfig+0x698>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d176      	bne.n	8006310 <UART_SetConfig+0x458>
 8006222:	4bcc      	ldr	r3, [pc, #816]	; (8006554 <UART_SetConfig+0x69c>)
 8006224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006226:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800622a:	2b28      	cmp	r3, #40	; 0x28
 800622c:	d86c      	bhi.n	8006308 <UART_SetConfig+0x450>
 800622e:	a201      	add	r2, pc, #4	; (adr r2, 8006234 <UART_SetConfig+0x37c>)
 8006230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006234:	080062d9 	.word	0x080062d9
 8006238:	08006309 	.word	0x08006309
 800623c:	08006309 	.word	0x08006309
 8006240:	08006309 	.word	0x08006309
 8006244:	08006309 	.word	0x08006309
 8006248:	08006309 	.word	0x08006309
 800624c:	08006309 	.word	0x08006309
 8006250:	08006309 	.word	0x08006309
 8006254:	080062e1 	.word	0x080062e1
 8006258:	08006309 	.word	0x08006309
 800625c:	08006309 	.word	0x08006309
 8006260:	08006309 	.word	0x08006309
 8006264:	08006309 	.word	0x08006309
 8006268:	08006309 	.word	0x08006309
 800626c:	08006309 	.word	0x08006309
 8006270:	08006309 	.word	0x08006309
 8006274:	080062e9 	.word	0x080062e9
 8006278:	08006309 	.word	0x08006309
 800627c:	08006309 	.word	0x08006309
 8006280:	08006309 	.word	0x08006309
 8006284:	08006309 	.word	0x08006309
 8006288:	08006309 	.word	0x08006309
 800628c:	08006309 	.word	0x08006309
 8006290:	08006309 	.word	0x08006309
 8006294:	080062f1 	.word	0x080062f1
 8006298:	08006309 	.word	0x08006309
 800629c:	08006309 	.word	0x08006309
 80062a0:	08006309 	.word	0x08006309
 80062a4:	08006309 	.word	0x08006309
 80062a8:	08006309 	.word	0x08006309
 80062ac:	08006309 	.word	0x08006309
 80062b0:	08006309 	.word	0x08006309
 80062b4:	080062f9 	.word	0x080062f9
 80062b8:	08006309 	.word	0x08006309
 80062bc:	08006309 	.word	0x08006309
 80062c0:	08006309 	.word	0x08006309
 80062c4:	08006309 	.word	0x08006309
 80062c8:	08006309 	.word	0x08006309
 80062cc:	08006309 	.word	0x08006309
 80062d0:	08006309 	.word	0x08006309
 80062d4:	08006301 	.word	0x08006301
 80062d8:	2301      	movs	r3, #1
 80062da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062de:	e0bc      	b.n	800645a <UART_SetConfig+0x5a2>
 80062e0:	2304      	movs	r3, #4
 80062e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062e6:	e0b8      	b.n	800645a <UART_SetConfig+0x5a2>
 80062e8:	2308      	movs	r3, #8
 80062ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ee:	e0b4      	b.n	800645a <UART_SetConfig+0x5a2>
 80062f0:	2310      	movs	r3, #16
 80062f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062f6:	e0b0      	b.n	800645a <UART_SetConfig+0x5a2>
 80062f8:	2320      	movs	r3, #32
 80062fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062fe:	e0ac      	b.n	800645a <UART_SetConfig+0x5a2>
 8006300:	2340      	movs	r3, #64	; 0x40
 8006302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006306:	e0a8      	b.n	800645a <UART_SetConfig+0x5a2>
 8006308:	2380      	movs	r3, #128	; 0x80
 800630a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800630e:	e0a4      	b.n	800645a <UART_SetConfig+0x5a2>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a90      	ldr	r2, [pc, #576]	; (8006558 <UART_SetConfig+0x6a0>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d130      	bne.n	800637c <UART_SetConfig+0x4c4>
 800631a:	4b8e      	ldr	r3, [pc, #568]	; (8006554 <UART_SetConfig+0x69c>)
 800631c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800631e:	f003 0307 	and.w	r3, r3, #7
 8006322:	2b05      	cmp	r3, #5
 8006324:	d826      	bhi.n	8006374 <UART_SetConfig+0x4bc>
 8006326:	a201      	add	r2, pc, #4	; (adr r2, 800632c <UART_SetConfig+0x474>)
 8006328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632c:	08006345 	.word	0x08006345
 8006330:	0800634d 	.word	0x0800634d
 8006334:	08006355 	.word	0x08006355
 8006338:	0800635d 	.word	0x0800635d
 800633c:	08006365 	.word	0x08006365
 8006340:	0800636d 	.word	0x0800636d
 8006344:	2300      	movs	r3, #0
 8006346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800634a:	e086      	b.n	800645a <UART_SetConfig+0x5a2>
 800634c:	2304      	movs	r3, #4
 800634e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006352:	e082      	b.n	800645a <UART_SetConfig+0x5a2>
 8006354:	2308      	movs	r3, #8
 8006356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800635a:	e07e      	b.n	800645a <UART_SetConfig+0x5a2>
 800635c:	2310      	movs	r3, #16
 800635e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006362:	e07a      	b.n	800645a <UART_SetConfig+0x5a2>
 8006364:	2320      	movs	r3, #32
 8006366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800636a:	e076      	b.n	800645a <UART_SetConfig+0x5a2>
 800636c:	2340      	movs	r3, #64	; 0x40
 800636e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006372:	e072      	b.n	800645a <UART_SetConfig+0x5a2>
 8006374:	2380      	movs	r3, #128	; 0x80
 8006376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800637a:	e06e      	b.n	800645a <UART_SetConfig+0x5a2>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a76      	ldr	r2, [pc, #472]	; (800655c <UART_SetConfig+0x6a4>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d130      	bne.n	80063e8 <UART_SetConfig+0x530>
 8006386:	4b73      	ldr	r3, [pc, #460]	; (8006554 <UART_SetConfig+0x69c>)
 8006388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800638a:	f003 0307 	and.w	r3, r3, #7
 800638e:	2b05      	cmp	r3, #5
 8006390:	d826      	bhi.n	80063e0 <UART_SetConfig+0x528>
 8006392:	a201      	add	r2, pc, #4	; (adr r2, 8006398 <UART_SetConfig+0x4e0>)
 8006394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006398:	080063b1 	.word	0x080063b1
 800639c:	080063b9 	.word	0x080063b9
 80063a0:	080063c1 	.word	0x080063c1
 80063a4:	080063c9 	.word	0x080063c9
 80063a8:	080063d1 	.word	0x080063d1
 80063ac:	080063d9 	.word	0x080063d9
 80063b0:	2300      	movs	r3, #0
 80063b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063b6:	e050      	b.n	800645a <UART_SetConfig+0x5a2>
 80063b8:	2304      	movs	r3, #4
 80063ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063be:	e04c      	b.n	800645a <UART_SetConfig+0x5a2>
 80063c0:	2308      	movs	r3, #8
 80063c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063c6:	e048      	b.n	800645a <UART_SetConfig+0x5a2>
 80063c8:	2310      	movs	r3, #16
 80063ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063ce:	e044      	b.n	800645a <UART_SetConfig+0x5a2>
 80063d0:	2320      	movs	r3, #32
 80063d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063d6:	e040      	b.n	800645a <UART_SetConfig+0x5a2>
 80063d8:	2340      	movs	r3, #64	; 0x40
 80063da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063de:	e03c      	b.n	800645a <UART_SetConfig+0x5a2>
 80063e0:	2380      	movs	r3, #128	; 0x80
 80063e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063e6:	e038      	b.n	800645a <UART_SetConfig+0x5a2>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a5c      	ldr	r2, [pc, #368]	; (8006560 <UART_SetConfig+0x6a8>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d130      	bne.n	8006454 <UART_SetConfig+0x59c>
 80063f2:	4b58      	ldr	r3, [pc, #352]	; (8006554 <UART_SetConfig+0x69c>)
 80063f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f6:	f003 0307 	and.w	r3, r3, #7
 80063fa:	2b05      	cmp	r3, #5
 80063fc:	d826      	bhi.n	800644c <UART_SetConfig+0x594>
 80063fe:	a201      	add	r2, pc, #4	; (adr r2, 8006404 <UART_SetConfig+0x54c>)
 8006400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006404:	0800641d 	.word	0x0800641d
 8006408:	08006425 	.word	0x08006425
 800640c:	0800642d 	.word	0x0800642d
 8006410:	08006435 	.word	0x08006435
 8006414:	0800643d 	.word	0x0800643d
 8006418:	08006445 	.word	0x08006445
 800641c:	2302      	movs	r3, #2
 800641e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006422:	e01a      	b.n	800645a <UART_SetConfig+0x5a2>
 8006424:	2304      	movs	r3, #4
 8006426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800642a:	e016      	b.n	800645a <UART_SetConfig+0x5a2>
 800642c:	2308      	movs	r3, #8
 800642e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006432:	e012      	b.n	800645a <UART_SetConfig+0x5a2>
 8006434:	2310      	movs	r3, #16
 8006436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800643a:	e00e      	b.n	800645a <UART_SetConfig+0x5a2>
 800643c:	2320      	movs	r3, #32
 800643e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006442:	e00a      	b.n	800645a <UART_SetConfig+0x5a2>
 8006444:	2340      	movs	r3, #64	; 0x40
 8006446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800644a:	e006      	b.n	800645a <UART_SetConfig+0x5a2>
 800644c:	2380      	movs	r3, #128	; 0x80
 800644e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006452:	e002      	b.n	800645a <UART_SetConfig+0x5a2>
 8006454:	2380      	movs	r3, #128	; 0x80
 8006456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a40      	ldr	r2, [pc, #256]	; (8006560 <UART_SetConfig+0x6a8>)
 8006460:	4293      	cmp	r3, r2
 8006462:	f040 80ef 	bne.w	8006644 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006466:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800646a:	2b20      	cmp	r3, #32
 800646c:	dc46      	bgt.n	80064fc <UART_SetConfig+0x644>
 800646e:	2b02      	cmp	r3, #2
 8006470:	f2c0 8081 	blt.w	8006576 <UART_SetConfig+0x6be>
 8006474:	3b02      	subs	r3, #2
 8006476:	2b1e      	cmp	r3, #30
 8006478:	d87d      	bhi.n	8006576 <UART_SetConfig+0x6be>
 800647a:	a201      	add	r2, pc, #4	; (adr r2, 8006480 <UART_SetConfig+0x5c8>)
 800647c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006480:	08006503 	.word	0x08006503
 8006484:	08006577 	.word	0x08006577
 8006488:	0800650b 	.word	0x0800650b
 800648c:	08006577 	.word	0x08006577
 8006490:	08006577 	.word	0x08006577
 8006494:	08006577 	.word	0x08006577
 8006498:	0800651b 	.word	0x0800651b
 800649c:	08006577 	.word	0x08006577
 80064a0:	08006577 	.word	0x08006577
 80064a4:	08006577 	.word	0x08006577
 80064a8:	08006577 	.word	0x08006577
 80064ac:	08006577 	.word	0x08006577
 80064b0:	08006577 	.word	0x08006577
 80064b4:	08006577 	.word	0x08006577
 80064b8:	0800652b 	.word	0x0800652b
 80064bc:	08006577 	.word	0x08006577
 80064c0:	08006577 	.word	0x08006577
 80064c4:	08006577 	.word	0x08006577
 80064c8:	08006577 	.word	0x08006577
 80064cc:	08006577 	.word	0x08006577
 80064d0:	08006577 	.word	0x08006577
 80064d4:	08006577 	.word	0x08006577
 80064d8:	08006577 	.word	0x08006577
 80064dc:	08006577 	.word	0x08006577
 80064e0:	08006577 	.word	0x08006577
 80064e4:	08006577 	.word	0x08006577
 80064e8:	08006577 	.word	0x08006577
 80064ec:	08006577 	.word	0x08006577
 80064f0:	08006577 	.word	0x08006577
 80064f4:	08006577 	.word	0x08006577
 80064f8:	08006569 	.word	0x08006569
 80064fc:	2b40      	cmp	r3, #64	; 0x40
 80064fe:	d036      	beq.n	800656e <UART_SetConfig+0x6b6>
 8006500:	e039      	b.n	8006576 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006502:	f7fe f863 	bl	80045cc <HAL_RCCEx_GetD3PCLK1Freq>
 8006506:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006508:	e03b      	b.n	8006582 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800650a:	f107 0314 	add.w	r3, r7, #20
 800650e:	4618      	mov	r0, r3
 8006510:	f7fe f872 	bl	80045f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006518:	e033      	b.n	8006582 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800651a:	f107 0308 	add.w	r3, r7, #8
 800651e:	4618      	mov	r0, r3
 8006520:	f7fe f9be 	bl	80048a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006528:	e02b      	b.n	8006582 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800652a:	4b0a      	ldr	r3, [pc, #40]	; (8006554 <UART_SetConfig+0x69c>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0320 	and.w	r3, r3, #32
 8006532:	2b00      	cmp	r3, #0
 8006534:	d009      	beq.n	800654a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006536:	4b07      	ldr	r3, [pc, #28]	; (8006554 <UART_SetConfig+0x69c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	08db      	lsrs	r3, r3, #3
 800653c:	f003 0303 	and.w	r3, r3, #3
 8006540:	4a08      	ldr	r2, [pc, #32]	; (8006564 <UART_SetConfig+0x6ac>)
 8006542:	fa22 f303 	lsr.w	r3, r2, r3
 8006546:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006548:	e01b      	b.n	8006582 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800654a:	4b06      	ldr	r3, [pc, #24]	; (8006564 <UART_SetConfig+0x6ac>)
 800654c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800654e:	e018      	b.n	8006582 <UART_SetConfig+0x6ca>
 8006550:	40011400 	.word	0x40011400
 8006554:	58024400 	.word	0x58024400
 8006558:	40007800 	.word	0x40007800
 800655c:	40007c00 	.word	0x40007c00
 8006560:	58000c00 	.word	0x58000c00
 8006564:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006568:	4bc4      	ldr	r3, [pc, #784]	; (800687c <UART_SetConfig+0x9c4>)
 800656a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800656c:	e009      	b.n	8006582 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800656e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006572:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006574:	e005      	b.n	8006582 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8006576:	2300      	movs	r3, #0
 8006578:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006580:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 81da 	beq.w	800693e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658e:	4abc      	ldr	r2, [pc, #752]	; (8006880 <UART_SetConfig+0x9c8>)
 8006590:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006594:	461a      	mov	r2, r3
 8006596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006598:	fbb3 f3f2 	udiv	r3, r3, r2
 800659c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	4613      	mov	r3, r2
 80065a4:	005b      	lsls	r3, r3, #1
 80065a6:	4413      	add	r3, r2
 80065a8:	6a3a      	ldr	r2, [r7, #32]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d305      	bcc.n	80065ba <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065b4:	6a3a      	ldr	r2, [r7, #32]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d903      	bls.n	80065c2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80065c0:	e1bd      	b.n	800693e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c4:	4618      	mov	r0, r3
 80065c6:	f04f 0100 	mov.w	r1, #0
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ce:	4aac      	ldr	r2, [pc, #688]	; (8006880 <UART_SetConfig+0x9c8>)
 80065d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	f04f 0300 	mov.w	r3, #0
 80065da:	f7f9 fed1 	bl	8000380 <__aeabi_uldivmod>
 80065de:	4602      	mov	r2, r0
 80065e0:	460b      	mov	r3, r1
 80065e2:	4610      	mov	r0, r2
 80065e4:	4619      	mov	r1, r3
 80065e6:	f04f 0200 	mov.w	r2, #0
 80065ea:	f04f 0300 	mov.w	r3, #0
 80065ee:	020b      	lsls	r3, r1, #8
 80065f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80065f4:	0202      	lsls	r2, r0, #8
 80065f6:	6879      	ldr	r1, [r7, #4]
 80065f8:	6849      	ldr	r1, [r1, #4]
 80065fa:	0849      	lsrs	r1, r1, #1
 80065fc:	4608      	mov	r0, r1
 80065fe:	f04f 0100 	mov.w	r1, #0
 8006602:	1814      	adds	r4, r2, r0
 8006604:	eb43 0501 	adc.w	r5, r3, r1
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	461a      	mov	r2, r3
 800660e:	f04f 0300 	mov.w	r3, #0
 8006612:	4620      	mov	r0, r4
 8006614:	4629      	mov	r1, r5
 8006616:	f7f9 feb3 	bl	8000380 <__aeabi_uldivmod>
 800661a:	4602      	mov	r2, r0
 800661c:	460b      	mov	r3, r1
 800661e:	4613      	mov	r3, r2
 8006620:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006624:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006628:	d308      	bcc.n	800663c <UART_SetConfig+0x784>
 800662a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006630:	d204      	bcs.n	800663c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006638:	60da      	str	r2, [r3, #12]
 800663a:	e180      	b.n	800693e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006642:	e17c      	b.n	800693e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	69db      	ldr	r3, [r3, #28]
 8006648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800664c:	f040 80bf 	bne.w	80067ce <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8006650:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006654:	2b20      	cmp	r3, #32
 8006656:	dc49      	bgt.n	80066ec <UART_SetConfig+0x834>
 8006658:	2b00      	cmp	r3, #0
 800665a:	db7c      	blt.n	8006756 <UART_SetConfig+0x89e>
 800665c:	2b20      	cmp	r3, #32
 800665e:	d87a      	bhi.n	8006756 <UART_SetConfig+0x89e>
 8006660:	a201      	add	r2, pc, #4	; (adr r2, 8006668 <UART_SetConfig+0x7b0>)
 8006662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006666:	bf00      	nop
 8006668:	080066f3 	.word	0x080066f3
 800666c:	080066fb 	.word	0x080066fb
 8006670:	08006757 	.word	0x08006757
 8006674:	08006757 	.word	0x08006757
 8006678:	08006703 	.word	0x08006703
 800667c:	08006757 	.word	0x08006757
 8006680:	08006757 	.word	0x08006757
 8006684:	08006757 	.word	0x08006757
 8006688:	08006713 	.word	0x08006713
 800668c:	08006757 	.word	0x08006757
 8006690:	08006757 	.word	0x08006757
 8006694:	08006757 	.word	0x08006757
 8006698:	08006757 	.word	0x08006757
 800669c:	08006757 	.word	0x08006757
 80066a0:	08006757 	.word	0x08006757
 80066a4:	08006757 	.word	0x08006757
 80066a8:	08006723 	.word	0x08006723
 80066ac:	08006757 	.word	0x08006757
 80066b0:	08006757 	.word	0x08006757
 80066b4:	08006757 	.word	0x08006757
 80066b8:	08006757 	.word	0x08006757
 80066bc:	08006757 	.word	0x08006757
 80066c0:	08006757 	.word	0x08006757
 80066c4:	08006757 	.word	0x08006757
 80066c8:	08006757 	.word	0x08006757
 80066cc:	08006757 	.word	0x08006757
 80066d0:	08006757 	.word	0x08006757
 80066d4:	08006757 	.word	0x08006757
 80066d8:	08006757 	.word	0x08006757
 80066dc:	08006757 	.word	0x08006757
 80066e0:	08006757 	.word	0x08006757
 80066e4:	08006757 	.word	0x08006757
 80066e8:	08006749 	.word	0x08006749
 80066ec:	2b40      	cmp	r3, #64	; 0x40
 80066ee:	d02e      	beq.n	800674e <UART_SetConfig+0x896>
 80066f0:	e031      	b.n	8006756 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066f2:	f7fc ffff 	bl	80036f4 <HAL_RCC_GetPCLK1Freq>
 80066f6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80066f8:	e033      	b.n	8006762 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066fa:	f7fd f811 	bl	8003720 <HAL_RCC_GetPCLK2Freq>
 80066fe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006700:	e02f      	b.n	8006762 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006702:	f107 0314 	add.w	r3, r7, #20
 8006706:	4618      	mov	r0, r3
 8006708:	f7fd ff76 	bl	80045f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006710:	e027      	b.n	8006762 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006712:	f107 0308 	add.w	r3, r7, #8
 8006716:	4618      	mov	r0, r3
 8006718:	f7fe f8c2 	bl	80048a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006720:	e01f      	b.n	8006762 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006722:	4b58      	ldr	r3, [pc, #352]	; (8006884 <UART_SetConfig+0x9cc>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0320 	and.w	r3, r3, #32
 800672a:	2b00      	cmp	r3, #0
 800672c:	d009      	beq.n	8006742 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800672e:	4b55      	ldr	r3, [pc, #340]	; (8006884 <UART_SetConfig+0x9cc>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	08db      	lsrs	r3, r3, #3
 8006734:	f003 0303 	and.w	r3, r3, #3
 8006738:	4a53      	ldr	r2, [pc, #332]	; (8006888 <UART_SetConfig+0x9d0>)
 800673a:	fa22 f303 	lsr.w	r3, r2, r3
 800673e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006740:	e00f      	b.n	8006762 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8006742:	4b51      	ldr	r3, [pc, #324]	; (8006888 <UART_SetConfig+0x9d0>)
 8006744:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006746:	e00c      	b.n	8006762 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006748:	4b4c      	ldr	r3, [pc, #304]	; (800687c <UART_SetConfig+0x9c4>)
 800674a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800674c:	e009      	b.n	8006762 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800674e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006752:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006754:	e005      	b.n	8006762 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8006756:	2300      	movs	r3, #0
 8006758:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006760:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 80ea 	beq.w	800693e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676e:	4a44      	ldr	r2, [pc, #272]	; (8006880 <UART_SetConfig+0x9c8>)
 8006770:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006774:	461a      	mov	r2, r3
 8006776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006778:	fbb3 f3f2 	udiv	r3, r3, r2
 800677c:	005a      	lsls	r2, r3, #1
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	085b      	lsrs	r3, r3, #1
 8006784:	441a      	add	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	fbb2 f3f3 	udiv	r3, r2, r3
 800678e:	b29b      	uxth	r3, r3
 8006790:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006794:	2b0f      	cmp	r3, #15
 8006796:	d916      	bls.n	80067c6 <UART_SetConfig+0x90e>
 8006798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800679e:	d212      	bcs.n	80067c6 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	f023 030f 	bic.w	r3, r3, #15
 80067a8:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ac:	085b      	lsrs	r3, r3, #1
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	f003 0307 	and.w	r3, r3, #7
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80067b8:	4313      	orrs	r3, r2
 80067ba:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80067c2:	60da      	str	r2, [r3, #12]
 80067c4:	e0bb      	b.n	800693e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80067cc:	e0b7      	b.n	800693e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80067d2:	2b20      	cmp	r3, #32
 80067d4:	dc4a      	bgt.n	800686c <UART_SetConfig+0x9b4>
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f2c0 8086 	blt.w	80068e8 <UART_SetConfig+0xa30>
 80067dc:	2b20      	cmp	r3, #32
 80067de:	f200 8083 	bhi.w	80068e8 <UART_SetConfig+0xa30>
 80067e2:	a201      	add	r2, pc, #4	; (adr r2, 80067e8 <UART_SetConfig+0x930>)
 80067e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e8:	08006873 	.word	0x08006873
 80067ec:	0800688d 	.word	0x0800688d
 80067f0:	080068e9 	.word	0x080068e9
 80067f4:	080068e9 	.word	0x080068e9
 80067f8:	08006895 	.word	0x08006895
 80067fc:	080068e9 	.word	0x080068e9
 8006800:	080068e9 	.word	0x080068e9
 8006804:	080068e9 	.word	0x080068e9
 8006808:	080068a5 	.word	0x080068a5
 800680c:	080068e9 	.word	0x080068e9
 8006810:	080068e9 	.word	0x080068e9
 8006814:	080068e9 	.word	0x080068e9
 8006818:	080068e9 	.word	0x080068e9
 800681c:	080068e9 	.word	0x080068e9
 8006820:	080068e9 	.word	0x080068e9
 8006824:	080068e9 	.word	0x080068e9
 8006828:	080068b5 	.word	0x080068b5
 800682c:	080068e9 	.word	0x080068e9
 8006830:	080068e9 	.word	0x080068e9
 8006834:	080068e9 	.word	0x080068e9
 8006838:	080068e9 	.word	0x080068e9
 800683c:	080068e9 	.word	0x080068e9
 8006840:	080068e9 	.word	0x080068e9
 8006844:	080068e9 	.word	0x080068e9
 8006848:	080068e9 	.word	0x080068e9
 800684c:	080068e9 	.word	0x080068e9
 8006850:	080068e9 	.word	0x080068e9
 8006854:	080068e9 	.word	0x080068e9
 8006858:	080068e9 	.word	0x080068e9
 800685c:	080068e9 	.word	0x080068e9
 8006860:	080068e9 	.word	0x080068e9
 8006864:	080068e9 	.word	0x080068e9
 8006868:	080068db 	.word	0x080068db
 800686c:	2b40      	cmp	r3, #64	; 0x40
 800686e:	d037      	beq.n	80068e0 <UART_SetConfig+0xa28>
 8006870:	e03a      	b.n	80068e8 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006872:	f7fc ff3f 	bl	80036f4 <HAL_RCC_GetPCLK1Freq>
 8006876:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006878:	e03c      	b.n	80068f4 <UART_SetConfig+0xa3c>
 800687a:	bf00      	nop
 800687c:	003d0900 	.word	0x003d0900
 8006880:	0800aa7c 	.word	0x0800aa7c
 8006884:	58024400 	.word	0x58024400
 8006888:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800688c:	f7fc ff48 	bl	8003720 <HAL_RCC_GetPCLK2Freq>
 8006890:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006892:	e02f      	b.n	80068f4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006894:	f107 0314 	add.w	r3, r7, #20
 8006898:	4618      	mov	r0, r3
 800689a:	f7fd fead 	bl	80045f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068a2:	e027      	b.n	80068f4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068a4:	f107 0308 	add.w	r3, r7, #8
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7fd fff9 	bl	80048a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068b2:	e01f      	b.n	80068f4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068b4:	4b2c      	ldr	r3, [pc, #176]	; (8006968 <UART_SetConfig+0xab0>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0320 	and.w	r3, r3, #32
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d009      	beq.n	80068d4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80068c0:	4b29      	ldr	r3, [pc, #164]	; (8006968 <UART_SetConfig+0xab0>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	08db      	lsrs	r3, r3, #3
 80068c6:	f003 0303 	and.w	r3, r3, #3
 80068ca:	4a28      	ldr	r2, [pc, #160]	; (800696c <UART_SetConfig+0xab4>)
 80068cc:	fa22 f303 	lsr.w	r3, r2, r3
 80068d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80068d2:	e00f      	b.n	80068f4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80068d4:	4b25      	ldr	r3, [pc, #148]	; (800696c <UART_SetConfig+0xab4>)
 80068d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068d8:	e00c      	b.n	80068f4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80068da:	4b25      	ldr	r3, [pc, #148]	; (8006970 <UART_SetConfig+0xab8>)
 80068dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068de:	e009      	b.n	80068f4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068e6:	e005      	b.n	80068f4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80068f2:	bf00      	nop
    }

    if (pclk != 0U)
 80068f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d021      	beq.n	800693e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fe:	4a1d      	ldr	r2, [pc, #116]	; (8006974 <UART_SetConfig+0xabc>)
 8006900:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006904:	461a      	mov	r2, r3
 8006906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006908:	fbb3 f2f2 	udiv	r2, r3, r2
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	085b      	lsrs	r3, r3, #1
 8006912:	441a      	add	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	fbb2 f3f3 	udiv	r3, r2, r3
 800691c:	b29b      	uxth	r3, r3
 800691e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006922:	2b0f      	cmp	r3, #15
 8006924:	d908      	bls.n	8006938 <UART_SetConfig+0xa80>
 8006926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800692c:	d204      	bcs.n	8006938 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006934:	60da      	str	r2, [r3, #12]
 8006936:	e002      	b.n	800693e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800695a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800695e:	4618      	mov	r0, r3
 8006960:	3738      	adds	r7, #56	; 0x38
 8006962:	46bd      	mov	sp, r7
 8006964:	bdb0      	pop	{r4, r5, r7, pc}
 8006966:	bf00      	nop
 8006968:	58024400 	.word	0x58024400
 800696c:	03d09000 	.word	0x03d09000
 8006970:	003d0900 	.word	0x003d0900
 8006974:	0800aa7c 	.word	0x0800aa7c

08006978 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00a      	beq.n	80069a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	430a      	orrs	r2, r1
 80069a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a6:	f003 0302 	and.w	r3, r3, #2
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00a      	beq.n	80069c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	430a      	orrs	r2, r1
 80069c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c8:	f003 0304 	and.w	r3, r3, #4
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00a      	beq.n	80069e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ea:	f003 0308 	and.w	r3, r3, #8
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00a      	beq.n	8006a08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0c:	f003 0310 	and.w	r3, r3, #16
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00a      	beq.n	8006a2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2e:	f003 0320 	and.w	r3, r3, #32
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00a      	beq.n	8006a4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d01a      	beq.n	8006a8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a76:	d10a      	bne.n	8006a8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00a      	beq.n	8006ab0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	430a      	orrs	r2, r1
 8006aae:	605a      	str	r2, [r3, #4]
  }
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b086      	sub	sp, #24
 8006ac0:	af02      	add	r7, sp, #8
 8006ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006acc:	f7fa fd9c 	bl	8001608 <HAL_GetTick>
 8006ad0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0308 	and.w	r3, r3, #8
 8006adc:	2b08      	cmp	r3, #8
 8006ade:	d10e      	bne.n	8006afe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f82f 	bl	8006b52 <UART_WaitOnFlagUntilTimeout>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d001      	beq.n	8006afe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e025      	b.n	8006b4a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0304 	and.w	r3, r3, #4
 8006b08:	2b04      	cmp	r3, #4
 8006b0a:	d10e      	bne.n	8006b2a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f819 	bl	8006b52 <UART_WaitOnFlagUntilTimeout>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d001      	beq.n	8006b2a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e00f      	b.n	8006b4a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2220      	movs	r2, #32
 8006b36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b084      	sub	sp, #16
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	60f8      	str	r0, [r7, #12]
 8006b5a:	60b9      	str	r1, [r7, #8]
 8006b5c:	603b      	str	r3, [r7, #0]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b62:	e062      	b.n	8006c2a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b6a:	d05e      	beq.n	8006c2a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b6c:	f7fa fd4c 	bl	8001608 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	69ba      	ldr	r2, [r7, #24]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d302      	bcc.n	8006b82 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d11d      	bne.n	8006bbe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b90:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	689a      	ldr	r2, [r3, #8]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f022 0201 	bic.w	r2, r2, #1
 8006ba0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2220      	movs	r2, #32
 8006bae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e045      	b.n	8006c4a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0304 	and.w	r3, r3, #4
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d02e      	beq.n	8006c2a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bda:	d126      	bne.n	8006c2a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006be4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006bf4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	689a      	ldr	r2, [r3, #8]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f022 0201 	bic.w	r2, r2, #1
 8006c04:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2220      	movs	r2, #32
 8006c0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2220      	movs	r2, #32
 8006c12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2220      	movs	r2, #32
 8006c1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e00f      	b.n	8006c4a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	69da      	ldr	r2, [r3, #28]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	4013      	ands	r3, r2
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	bf0c      	ite	eq
 8006c3a:	2301      	moveq	r3, #1
 8006c3c:	2300      	movne	r3, #0
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	461a      	mov	r2, r3
 8006c42:	79fb      	ldrb	r3, [r7, #7]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d08d      	beq.n	8006b64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b085      	sub	sp, #20
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d101      	bne.n	8006c68 <HAL_UARTEx_DisableFifoMode+0x16>
 8006c64:	2302      	movs	r3, #2
 8006c66:	e027      	b.n	8006cb8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2224      	movs	r2, #36	; 0x24
 8006c74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 0201 	bic.w	r2, r2, #1
 8006c8e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006c96:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2220      	movs	r2, #32
 8006caa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d101      	bne.n	8006cdc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	e02d      	b.n	8006d38 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2224      	movs	r2, #36	; 0x24
 8006ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 0201 	bic.w	r2, r2, #1
 8006d02:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f84f 	bl	8006dbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2220      	movs	r2, #32
 8006d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d101      	bne.n	8006d58 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d54:	2302      	movs	r3, #2
 8006d56:	e02d      	b.n	8006db4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2224      	movs	r2, #36	; 0x24
 8006d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f022 0201 	bic.w	r2, r2, #1
 8006d7e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	430a      	orrs	r2, r1
 8006d92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f811 	bl	8006dbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2220      	movs	r2, #32
 8006da6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d108      	bne.n	8006dde <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ddc:	e031      	b.n	8006e42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006dde:	2310      	movs	r3, #16
 8006de0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006de2:	2310      	movs	r3, #16
 8006de4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	0e5b      	lsrs	r3, r3, #25
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	f003 0307 	and.w	r3, r3, #7
 8006df4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	0f5b      	lsrs	r3, r3, #29
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	f003 0307 	and.w	r3, r3, #7
 8006e04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e06:	7bbb      	ldrb	r3, [r7, #14]
 8006e08:	7b3a      	ldrb	r2, [r7, #12]
 8006e0a:	4911      	ldr	r1, [pc, #68]	; (8006e50 <UARTEx_SetNbDataToProcess+0x94>)
 8006e0c:	5c8a      	ldrb	r2, [r1, r2]
 8006e0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e12:	7b3a      	ldrb	r2, [r7, #12]
 8006e14:	490f      	ldr	r1, [pc, #60]	; (8006e54 <UARTEx_SetNbDataToProcess+0x98>)
 8006e16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e18:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
 8006e26:	7b7a      	ldrb	r2, [r7, #13]
 8006e28:	4909      	ldr	r1, [pc, #36]	; (8006e50 <UARTEx_SetNbDataToProcess+0x94>)
 8006e2a:	5c8a      	ldrb	r2, [r1, r2]
 8006e2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e30:	7b7a      	ldrb	r2, [r7, #13]
 8006e32:	4908      	ldr	r1, [pc, #32]	; (8006e54 <UARTEx_SetNbDataToProcess+0x98>)
 8006e34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e36:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006e42:	bf00      	nop
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	0800aa94 	.word	0x0800aa94
 8006e54:	0800aa9c 	.word	0x0800aa9c

08006e58 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e58:	b084      	sub	sp, #16
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b084      	sub	sp, #16
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	f107 001c 	add.w	r0, r7, #28
 8006e66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d120      	bne.n	8006eb2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	68da      	ldr	r2, [r3, #12]
 8006e80:	4b2a      	ldr	r3, [pc, #168]	; (8006f2c <USB_CoreInit+0xd4>)
 8006e82:	4013      	ands	r3, r2
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d105      	bne.n	8006ea6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fa60 	bl	800736c <USB_CoreReset>
 8006eac:	4603      	mov	r3, r0
 8006eae:	73fb      	strb	r3, [r7, #15]
 8006eb0:	e01a      	b.n	8006ee8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 fa54 	bl	800736c <USB_CoreReset>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d106      	bne.n	8006edc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	639a      	str	r2, [r3, #56]	; 0x38
 8006eda:	e005      	b.n	8006ee8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d116      	bne.n	8006f1c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006efc:	4b0c      	ldr	r3, [pc, #48]	; (8006f30 <USB_CoreInit+0xd8>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	f043 0206 	orr.w	r2, r3, #6
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	f043 0220 	orr.w	r2, r3, #32
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f28:	b004      	add	sp, #16
 8006f2a:	4770      	bx	lr
 8006f2c:	ffbdffbf 	.word	0xffbdffbf
 8006f30:	03ee0000 	.word	0x03ee0000

08006f34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f023 0201 	bic.w	r2, r3, #1
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b082      	sub	sp, #8
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	460b      	mov	r3, r1
 8006f60:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f6e:	78fb      	ldrb	r3, [r7, #3]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d106      	bne.n	8006f82 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	60da      	str	r2, [r3, #12]
 8006f80:	e00b      	b.n	8006f9a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f82:	78fb      	ldrb	r3, [r7, #3]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d106      	bne.n	8006f96 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	60da      	str	r2, [r3, #12]
 8006f94:	e001      	b.n	8006f9a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e003      	b.n	8006fa2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006f9a:	2032      	movs	r0, #50	; 0x32
 8006f9c:	f7fa fb40 	bl	8001620 <HAL_Delay>

  return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
	...

08006fac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fac:	b084      	sub	sp, #16
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b086      	sub	sp, #24
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006fba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	613b      	str	r3, [r7, #16]
 8006fca:	e009      	b.n	8006fe0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	3340      	adds	r3, #64	; 0x40
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4413      	add	r3, r2
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	613b      	str	r3, [r7, #16]
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	2b0e      	cmp	r3, #14
 8006fe4:	d9f2      	bls.n	8006fcc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d11c      	bne.n	8007026 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ffa:	f043 0302 	orr.w	r3, r3, #2
 8006ffe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007004:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	601a      	str	r2, [r3, #0]
 8007024:	e005      	b.n	8007032 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007038:	461a      	mov	r2, r3
 800703a:	2300      	movs	r3, #0
 800703c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007044:	4619      	mov	r1, r3
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704c:	461a      	mov	r2, r3
 800704e:	680b      	ldr	r3, [r1, #0]
 8007050:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007054:	2b01      	cmp	r3, #1
 8007056:	d10c      	bne.n	8007072 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705a:	2b00      	cmp	r3, #0
 800705c:	d104      	bne.n	8007068 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800705e:	2100      	movs	r1, #0
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 f949 	bl	80072f8 <USB_SetDevSpeed>
 8007066:	e008      	b.n	800707a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007068:	2101      	movs	r1, #1
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f944 	bl	80072f8 <USB_SetDevSpeed>
 8007070:	e003      	b.n	800707a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007072:	2103      	movs	r1, #3
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 f93f 	bl	80072f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800707a:	2110      	movs	r1, #16
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 f8f3 	bl	8007268 <USB_FlushTxFifo>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f911 	bl	80072b4 <USB_FlushRxFifo>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070a2:	461a      	mov	r2, r3
 80070a4:	2300      	movs	r3, #0
 80070a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ae:	461a      	mov	r2, r3
 80070b0:	2300      	movs	r3, #0
 80070b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ba:	461a      	mov	r2, r3
 80070bc:	2300      	movs	r3, #0
 80070be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070c0:	2300      	movs	r3, #0
 80070c2:	613b      	str	r3, [r7, #16]
 80070c4:	e043      	b.n	800714e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	015a      	lsls	r2, r3, #5
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	4413      	add	r3, r2
 80070ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070dc:	d118      	bne.n	8007110 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10a      	bne.n	80070fa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	015a      	lsls	r2, r3, #5
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f0:	461a      	mov	r2, r3
 80070f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80070f6:	6013      	str	r3, [r2, #0]
 80070f8:	e013      	b.n	8007122 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	015a      	lsls	r2, r3, #5
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	4413      	add	r3, r2
 8007102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007106:	461a      	mov	r2, r3
 8007108:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800710c:	6013      	str	r3, [r2, #0]
 800710e:	e008      	b.n	8007122 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	4413      	add	r3, r2
 8007118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800711c:	461a      	mov	r2, r3
 800711e:	2300      	movs	r3, #0
 8007120:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	015a      	lsls	r2, r3, #5
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	4413      	add	r3, r2
 800712a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800712e:	461a      	mov	r2, r3
 8007130:	2300      	movs	r3, #0
 8007132:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	015a      	lsls	r2, r3, #5
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4413      	add	r3, r2
 800713c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007140:	461a      	mov	r2, r3
 8007142:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007146:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	3301      	adds	r3, #1
 800714c:	613b      	str	r3, [r7, #16]
 800714e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	429a      	cmp	r2, r3
 8007154:	d3b7      	bcc.n	80070c6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007156:	2300      	movs	r3, #0
 8007158:	613b      	str	r3, [r7, #16]
 800715a:	e043      	b.n	80071e4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	015a      	lsls	r2, r3, #5
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	4413      	add	r3, r2
 8007164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800716e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007172:	d118      	bne.n	80071a6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d10a      	bne.n	8007190 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	015a      	lsls	r2, r3, #5
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	4413      	add	r3, r2
 8007182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007186:	461a      	mov	r2, r3
 8007188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800718c:	6013      	str	r3, [r2, #0]
 800718e:	e013      	b.n	80071b8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	015a      	lsls	r2, r3, #5
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	4413      	add	r3, r2
 8007198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800719c:	461a      	mov	r2, r3
 800719e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80071a2:	6013      	str	r3, [r2, #0]
 80071a4:	e008      	b.n	80071b8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	015a      	lsls	r2, r3, #5
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	4413      	add	r3, r2
 80071ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b2:	461a      	mov	r2, r3
 80071b4:	2300      	movs	r3, #0
 80071b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	015a      	lsls	r2, r3, #5
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	4413      	add	r3, r2
 80071c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071c4:	461a      	mov	r2, r3
 80071c6:	2300      	movs	r3, #0
 80071c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	015a      	lsls	r2, r3, #5
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	4413      	add	r3, r2
 80071d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d6:	461a      	mov	r2, r3
 80071d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80071dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	3301      	adds	r3, #1
 80071e2:	613b      	str	r3, [r7, #16]
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	693a      	ldr	r2, [r7, #16]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d3b7      	bcc.n	800715c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800720c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007210:	2b00      	cmp	r3, #0
 8007212:	d105      	bne.n	8007220 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	f043 0210 	orr.w	r2, r3, #16
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	699a      	ldr	r2, [r3, #24]
 8007224:	4b0e      	ldr	r3, [pc, #56]	; (8007260 <USB_DevInit+0x2b4>)
 8007226:	4313      	orrs	r3, r2
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800722c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800722e:	2b00      	cmp	r3, #0
 8007230:	d005      	beq.n	800723e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	f043 0208 	orr.w	r2, r3, #8
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800723e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007240:	2b01      	cmp	r3, #1
 8007242:	d105      	bne.n	8007250 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	699a      	ldr	r2, [r3, #24]
 8007248:	4b06      	ldr	r3, [pc, #24]	; (8007264 <USB_DevInit+0x2b8>)
 800724a:	4313      	orrs	r3, r2
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007250:	7dfb      	ldrb	r3, [r7, #23]
}
 8007252:	4618      	mov	r0, r3
 8007254:	3718      	adds	r7, #24
 8007256:	46bd      	mov	sp, r7
 8007258:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800725c:	b004      	add	sp, #16
 800725e:	4770      	bx	lr
 8007260:	803c3800 	.word	0x803c3800
 8007264:	40000004 	.word	0x40000004

08007268 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007272:	2300      	movs	r3, #0
 8007274:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	019b      	lsls	r3, r3, #6
 800727a:	f043 0220 	orr.w	r2, r3, #32
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	3301      	adds	r3, #1
 8007286:	60fb      	str	r3, [r7, #12]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	4a09      	ldr	r2, [pc, #36]	; (80072b0 <USB_FlushTxFifo+0x48>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d901      	bls.n	8007294 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	e006      	b.n	80072a2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	f003 0320 	and.w	r3, r3, #32
 800729c:	2b20      	cmp	r3, #32
 800729e:	d0f0      	beq.n	8007282 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3714      	adds	r7, #20
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	00030d40 	.word	0x00030d40

080072b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80072bc:	2300      	movs	r3, #0
 80072be:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2210      	movs	r2, #16
 80072c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	3301      	adds	r3, #1
 80072ca:	60fb      	str	r3, [r7, #12]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4a09      	ldr	r2, [pc, #36]	; (80072f4 <USB_FlushRxFifo+0x40>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d901      	bls.n	80072d8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e006      	b.n	80072e6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	f003 0310 	and.w	r3, r3, #16
 80072e0:	2b10      	cmp	r3, #16
 80072e2:	d0f0      	beq.n	80072c6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3714      	adds	r7, #20
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	00030d40 	.word	0x00030d40

080072f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	460b      	mov	r3, r1
 8007302:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	78fb      	ldrb	r3, [r7, #3]
 8007312:	68f9      	ldr	r1, [r7, #12]
 8007314:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007318:	4313      	orrs	r3, r2
 800731a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3714      	adds	r7, #20
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr

0800732a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800732a:	b480      	push	{r7}
 800732c:	b085      	sub	sp, #20
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007344:	f023 0303 	bic.w	r3, r3, #3
 8007348:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007358:	f043 0302 	orr.w	r3, r3, #2
 800735c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3714      	adds	r7, #20
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007374:	2300      	movs	r3, #0
 8007376:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	3301      	adds	r3, #1
 800737c:	60fb      	str	r3, [r7, #12]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	4a13      	ldr	r2, [pc, #76]	; (80073d0 <USB_CoreReset+0x64>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d901      	bls.n	800738a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e01b      	b.n	80073c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	2b00      	cmp	r3, #0
 8007390:	daf2      	bge.n	8007378 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007392:	2300      	movs	r3, #0
 8007394:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	f043 0201 	orr.w	r2, r3, #1
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	3301      	adds	r3, #1
 80073a6:	60fb      	str	r3, [r7, #12]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	4a09      	ldr	r2, [pc, #36]	; (80073d0 <USB_CoreReset+0x64>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d901      	bls.n	80073b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e006      	b.n	80073c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d0f0      	beq.n	80073a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3714      	adds	r7, #20
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	00030d40 	.word	0x00030d40

080073d4 <__NVIC_SetPriority>:
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	4603      	mov	r3, r0
 80073dc:	6039      	str	r1, [r7, #0]
 80073de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80073e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	db0a      	blt.n	80073fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	b2da      	uxtb	r2, r3
 80073ec:	490c      	ldr	r1, [pc, #48]	; (8007420 <__NVIC_SetPriority+0x4c>)
 80073ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073f2:	0112      	lsls	r2, r2, #4
 80073f4:	b2d2      	uxtb	r2, r2
 80073f6:	440b      	add	r3, r1
 80073f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80073fc:	e00a      	b.n	8007414 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	b2da      	uxtb	r2, r3
 8007402:	4908      	ldr	r1, [pc, #32]	; (8007424 <__NVIC_SetPriority+0x50>)
 8007404:	88fb      	ldrh	r3, [r7, #6]
 8007406:	f003 030f 	and.w	r3, r3, #15
 800740a:	3b04      	subs	r3, #4
 800740c:	0112      	lsls	r2, r2, #4
 800740e:	b2d2      	uxtb	r2, r2
 8007410:	440b      	add	r3, r1
 8007412:	761a      	strb	r2, [r3, #24]
}
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr
 8007420:	e000e100 	.word	0xe000e100
 8007424:	e000ed00 	.word	0xe000ed00

08007428 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007428:	b580      	push	{r7, lr}
 800742a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800742c:	2100      	movs	r1, #0
 800742e:	f06f 0004 	mvn.w	r0, #4
 8007432:	f7ff ffcf 	bl	80073d4 <__NVIC_SetPriority>
#endif
}
 8007436:	bf00      	nop
 8007438:	bd80      	pop	{r7, pc}
	...

0800743c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007442:	f3ef 8305 	mrs	r3, IPSR
 8007446:	603b      	str	r3, [r7, #0]
  return(result);
 8007448:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800744e:	f06f 0305 	mvn.w	r3, #5
 8007452:	607b      	str	r3, [r7, #4]
 8007454:	e00c      	b.n	8007470 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007456:	4b0a      	ldr	r3, [pc, #40]	; (8007480 <osKernelInitialize+0x44>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d105      	bne.n	800746a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800745e:	4b08      	ldr	r3, [pc, #32]	; (8007480 <osKernelInitialize+0x44>)
 8007460:	2201      	movs	r2, #1
 8007462:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007464:	2300      	movs	r3, #0
 8007466:	607b      	str	r3, [r7, #4]
 8007468:	e002      	b.n	8007470 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800746a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800746e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007470:	687b      	ldr	r3, [r7, #4]
}
 8007472:	4618      	mov	r0, r3
 8007474:	370c      	adds	r7, #12
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	24000160 	.word	0x24000160

08007484 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800748a:	f3ef 8305 	mrs	r3, IPSR
 800748e:	603b      	str	r3, [r7, #0]
  return(result);
 8007490:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007492:	2b00      	cmp	r3, #0
 8007494:	d003      	beq.n	800749e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007496:	f06f 0305 	mvn.w	r3, #5
 800749a:	607b      	str	r3, [r7, #4]
 800749c:	e010      	b.n	80074c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800749e:	4b0b      	ldr	r3, [pc, #44]	; (80074cc <osKernelStart+0x48>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d109      	bne.n	80074ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80074a6:	f7ff ffbf 	bl	8007428 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80074aa:	4b08      	ldr	r3, [pc, #32]	; (80074cc <osKernelStart+0x48>)
 80074ac:	2202      	movs	r2, #2
 80074ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80074b0:	f001 fd4e 	bl	8008f50 <vTaskStartScheduler>
      stat = osOK;
 80074b4:	2300      	movs	r3, #0
 80074b6:	607b      	str	r3, [r7, #4]
 80074b8:	e002      	b.n	80074c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80074ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80074c0:	687b      	ldr	r3, [r7, #4]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	24000160 	.word	0x24000160

080074d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b08e      	sub	sp, #56	; 0x38
 80074d4:	af04      	add	r7, sp, #16
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80074dc:	2300      	movs	r3, #0
 80074de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074e0:	f3ef 8305 	mrs	r3, IPSR
 80074e4:	617b      	str	r3, [r7, #20]
  return(result);
 80074e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d17e      	bne.n	80075ea <osThreadNew+0x11a>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d07b      	beq.n	80075ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80074f2:	2380      	movs	r3, #128	; 0x80
 80074f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80074f6:	2318      	movs	r3, #24
 80074f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80074fa:	2300      	movs	r3, #0
 80074fc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80074fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007502:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d045      	beq.n	8007596 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d002      	beq.n	8007518 <osThreadNew+0x48>
        name = attr->name;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d002      	beq.n	8007526 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d008      	beq.n	800753e <osThreadNew+0x6e>
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	2b38      	cmp	r3, #56	; 0x38
 8007530:	d805      	bhi.n	800753e <osThreadNew+0x6e>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	2b00      	cmp	r3, #0
 800753c:	d001      	beq.n	8007542 <osThreadNew+0x72>
        return (NULL);
 800753e:	2300      	movs	r3, #0
 8007540:	e054      	b.n	80075ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	089b      	lsrs	r3, r3, #2
 8007550:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00e      	beq.n	8007578 <osThreadNew+0xa8>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	2b5b      	cmp	r3, #91	; 0x5b
 8007560:	d90a      	bls.n	8007578 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007566:	2b00      	cmp	r3, #0
 8007568:	d006      	beq.n	8007578 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d002      	beq.n	8007578 <osThreadNew+0xa8>
        mem = 1;
 8007572:	2301      	movs	r3, #1
 8007574:	61bb      	str	r3, [r7, #24]
 8007576:	e010      	b.n	800759a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10c      	bne.n	800759a <osThreadNew+0xca>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d108      	bne.n	800759a <osThreadNew+0xca>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d104      	bne.n	800759a <osThreadNew+0xca>
          mem = 0;
 8007590:	2300      	movs	r3, #0
 8007592:	61bb      	str	r3, [r7, #24]
 8007594:	e001      	b.n	800759a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007596:	2300      	movs	r3, #0
 8007598:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d110      	bne.n	80075c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80075a8:	9202      	str	r2, [sp, #8]
 80075aa:	9301      	str	r3, [sp, #4]
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	6a3a      	ldr	r2, [r7, #32]
 80075b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f001 faf4 	bl	8008ba4 <xTaskCreateStatic>
 80075bc:	4603      	mov	r3, r0
 80075be:	613b      	str	r3, [r7, #16]
 80075c0:	e013      	b.n	80075ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d110      	bne.n	80075ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80075c8:	6a3b      	ldr	r3, [r7, #32]
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	f107 0310 	add.w	r3, r7, #16
 80075d0:	9301      	str	r3, [sp, #4]
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	9300      	str	r3, [sp, #0]
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f001 fb3f 	bl	8008c5e <xTaskCreate>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d001      	beq.n	80075ea <osThreadNew+0x11a>
            hTask = NULL;
 80075e6:	2300      	movs	r3, #0
 80075e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80075ea:	693b      	ldr	r3, [r7, #16]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3728      	adds	r7, #40	; 0x28
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075fc:	f3ef 8305 	mrs	r3, IPSR
 8007600:	60bb      	str	r3, [r7, #8]
  return(result);
 8007602:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007604:	2b00      	cmp	r3, #0
 8007606:	d003      	beq.n	8007610 <osDelay+0x1c>
    stat = osErrorISR;
 8007608:	f06f 0305 	mvn.w	r3, #5
 800760c:	60fb      	str	r3, [r7, #12]
 800760e:	e007      	b.n	8007620 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007610:	2300      	movs	r3, #0
 8007612:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d002      	beq.n	8007620 <osDelay+0x2c>
      vTaskDelay(ticks);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f001 fc64 	bl	8008ee8 <vTaskDelay>
    }
  }

  return (stat);
 8007620:	68fb      	ldr	r3, [r7, #12]
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800762a:	b580      	push	{r7, lr}
 800762c:	b08a      	sub	sp, #40	; 0x28
 800762e:	af02      	add	r7, sp, #8
 8007630:	60f8      	str	r0, [r7, #12]
 8007632:	60b9      	str	r1, [r7, #8]
 8007634:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007636:	2300      	movs	r3, #0
 8007638:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800763a:	f3ef 8305 	mrs	r3, IPSR
 800763e:	613b      	str	r3, [r7, #16]
  return(result);
 8007640:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007642:	2b00      	cmp	r3, #0
 8007644:	d15f      	bne.n	8007706 <osMessageQueueNew+0xdc>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d05c      	beq.n	8007706 <osMessageQueueNew+0xdc>
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d059      	beq.n	8007706 <osMessageQueueNew+0xdc>
    mem = -1;
 8007652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007656:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d029      	beq.n	80076b2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d012      	beq.n	800768c <osMessageQueueNew+0x62>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	2b4f      	cmp	r3, #79	; 0x4f
 800766c:	d90e      	bls.n	800768c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00a      	beq.n	800768c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	695a      	ldr	r2, [r3, #20]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	68b9      	ldr	r1, [r7, #8]
 800767e:	fb01 f303 	mul.w	r3, r1, r3
 8007682:	429a      	cmp	r2, r3
 8007684:	d302      	bcc.n	800768c <osMessageQueueNew+0x62>
        mem = 1;
 8007686:	2301      	movs	r3, #1
 8007688:	61bb      	str	r3, [r7, #24]
 800768a:	e014      	b.n	80076b6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d110      	bne.n	80076b6 <osMessageQueueNew+0x8c>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d10c      	bne.n	80076b6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d108      	bne.n	80076b6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	695b      	ldr	r3, [r3, #20]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d104      	bne.n	80076b6 <osMessageQueueNew+0x8c>
          mem = 0;
 80076ac:	2300      	movs	r3, #0
 80076ae:	61bb      	str	r3, [r7, #24]
 80076b0:	e001      	b.n	80076b6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80076b2:	2300      	movs	r3, #0
 80076b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d10b      	bne.n	80076d4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	691a      	ldr	r2, [r3, #16]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	2100      	movs	r1, #0
 80076c6:	9100      	str	r1, [sp, #0]
 80076c8:	68b9      	ldr	r1, [r7, #8]
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f000 fdac 	bl	8008228 <xQueueGenericCreateStatic>
 80076d0:	61f8      	str	r0, [r7, #28]
 80076d2:	e008      	b.n	80076e6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d105      	bne.n	80076e6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80076da:	2200      	movs	r2, #0
 80076dc:	68b9      	ldr	r1, [r7, #8]
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f000 fe1a 	bl	8008318 <xQueueGenericCreate>
 80076e4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00c      	beq.n	8007706 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d003      	beq.n	80076fa <osMessageQueueNew+0xd0>
        name = attr->name;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	617b      	str	r3, [r7, #20]
 80076f8:	e001      	b.n	80076fe <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80076fa:	2300      	movs	r3, #0
 80076fc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80076fe:	6979      	ldr	r1, [r7, #20]
 8007700:	69f8      	ldr	r0, [r7, #28]
 8007702:	f001 f9f1 	bl	8008ae8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007706:	69fb      	ldr	r3, [r7, #28]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3720      	adds	r7, #32
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4a07      	ldr	r2, [pc, #28]	; (800773c <vApplicationGetIdleTaskMemory+0x2c>)
 8007720:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	4a06      	ldr	r2, [pc, #24]	; (8007740 <vApplicationGetIdleTaskMemory+0x30>)
 8007726:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2280      	movs	r2, #128	; 0x80
 800772c:	601a      	str	r2, [r3, #0]
}
 800772e:	bf00      	nop
 8007730:	3714      	adds	r7, #20
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	24000164 	.word	0x24000164
 8007740:	240001c0 	.word	0x240001c0

08007744 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	4a07      	ldr	r2, [pc, #28]	; (8007770 <vApplicationGetTimerTaskMemory+0x2c>)
 8007754:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	4a06      	ldr	r2, [pc, #24]	; (8007774 <vApplicationGetTimerTaskMemory+0x30>)
 800775a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007762:	601a      	str	r2, [r3, #0]
}
 8007764:	bf00      	nop
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr
 8007770:	240003c0 	.word	0x240003c0
 8007774:	2400041c 	.word	0x2400041c

08007778 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b08a      	sub	sp, #40	; 0x28
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007780:	2300      	movs	r3, #0
 8007782:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007784:	f001 fc4a 	bl	800901c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007788:	4b5b      	ldr	r3, [pc, #364]	; (80078f8 <pvPortMalloc+0x180>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d101      	bne.n	8007794 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007790:	f000 f920 	bl	80079d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007794:	4b59      	ldr	r3, [pc, #356]	; (80078fc <pvPortMalloc+0x184>)
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4013      	ands	r3, r2
 800779c:	2b00      	cmp	r3, #0
 800779e:	f040 8093 	bne.w	80078c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d01d      	beq.n	80077e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80077a8:	2208      	movs	r2, #8
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4413      	add	r3, r2
 80077ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f003 0307 	and.w	r3, r3, #7
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d014      	beq.n	80077e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f023 0307 	bic.w	r3, r3, #7
 80077c0:	3308      	adds	r3, #8
 80077c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f003 0307 	and.w	r3, r3, #7
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00a      	beq.n	80077e4 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80077e0:	bf00      	nop
 80077e2:	e7fe      	b.n	80077e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d06e      	beq.n	80078c8 <pvPortMalloc+0x150>
 80077ea:	4b45      	ldr	r3, [pc, #276]	; (8007900 <pvPortMalloc+0x188>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d869      	bhi.n	80078c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80077f4:	4b43      	ldr	r3, [pc, #268]	; (8007904 <pvPortMalloc+0x18c>)
 80077f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80077f8:	4b42      	ldr	r3, [pc, #264]	; (8007904 <pvPortMalloc+0x18c>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077fe:	e004      	b.n	800780a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007802:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	429a      	cmp	r2, r3
 8007812:	d903      	bls.n	800781c <pvPortMalloc+0xa4>
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1f1      	bne.n	8007800 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800781c:	4b36      	ldr	r3, [pc, #216]	; (80078f8 <pvPortMalloc+0x180>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007822:	429a      	cmp	r2, r3
 8007824:	d050      	beq.n	80078c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007826:	6a3b      	ldr	r3, [r7, #32]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2208      	movs	r2, #8
 800782c:	4413      	add	r3, r2
 800782e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	6a3b      	ldr	r3, [r7, #32]
 8007836:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783a:	685a      	ldr	r2, [r3, #4]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	1ad2      	subs	r2, r2, r3
 8007840:	2308      	movs	r3, #8
 8007842:	005b      	lsls	r3, r3, #1
 8007844:	429a      	cmp	r2, r3
 8007846:	d91f      	bls.n	8007888 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4413      	add	r3, r2
 800784e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	f003 0307 	and.w	r3, r3, #7
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00a      	beq.n	8007870 <pvPortMalloc+0xf8>
	__asm volatile
 800785a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785e:	f383 8811 	msr	BASEPRI, r3
 8007862:	f3bf 8f6f 	isb	sy
 8007866:	f3bf 8f4f 	dsb	sy
 800786a:	613b      	str	r3, [r7, #16]
}
 800786c:	bf00      	nop
 800786e:	e7fe      	b.n	800786e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007872:	685a      	ldr	r2, [r3, #4]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	1ad2      	subs	r2, r2, r3
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800787c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007882:	69b8      	ldr	r0, [r7, #24]
 8007884:	f000 f908 	bl	8007a98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007888:	4b1d      	ldr	r3, [pc, #116]	; (8007900 <pvPortMalloc+0x188>)
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	4a1b      	ldr	r2, [pc, #108]	; (8007900 <pvPortMalloc+0x188>)
 8007894:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007896:	4b1a      	ldr	r3, [pc, #104]	; (8007900 <pvPortMalloc+0x188>)
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	4b1b      	ldr	r3, [pc, #108]	; (8007908 <pvPortMalloc+0x190>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d203      	bcs.n	80078aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80078a2:	4b17      	ldr	r3, [pc, #92]	; (8007900 <pvPortMalloc+0x188>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a18      	ldr	r2, [pc, #96]	; (8007908 <pvPortMalloc+0x190>)
 80078a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80078aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ac:	685a      	ldr	r2, [r3, #4]
 80078ae:	4b13      	ldr	r3, [pc, #76]	; (80078fc <pvPortMalloc+0x184>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	431a      	orrs	r2, r3
 80078b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80078b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ba:	2200      	movs	r2, #0
 80078bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80078be:	4b13      	ldr	r3, [pc, #76]	; (800790c <pvPortMalloc+0x194>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	3301      	adds	r3, #1
 80078c4:	4a11      	ldr	r2, [pc, #68]	; (800790c <pvPortMalloc+0x194>)
 80078c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80078c8:	f001 fbb6 	bl	8009038 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	f003 0307 	and.w	r3, r3, #7
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00a      	beq.n	80078ec <pvPortMalloc+0x174>
	__asm volatile
 80078d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078da:	f383 8811 	msr	BASEPRI, r3
 80078de:	f3bf 8f6f 	isb	sy
 80078e2:	f3bf 8f4f 	dsb	sy
 80078e6:	60fb      	str	r3, [r7, #12]
}
 80078e8:	bf00      	nop
 80078ea:	e7fe      	b.n	80078ea <pvPortMalloc+0x172>
	return pvReturn;
 80078ec:	69fb      	ldr	r3, [r7, #28]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3728      	adds	r7, #40	; 0x28
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	24004424 	.word	0x24004424
 80078fc:	24004438 	.word	0x24004438
 8007900:	24004428 	.word	0x24004428
 8007904:	2400441c 	.word	0x2400441c
 8007908:	2400442c 	.word	0x2400442c
 800790c:	24004430 	.word	0x24004430

08007910 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b086      	sub	sp, #24
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d04d      	beq.n	80079be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007922:	2308      	movs	r3, #8
 8007924:	425b      	negs	r3, r3
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	4413      	add	r3, r2
 800792a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	685a      	ldr	r2, [r3, #4]
 8007934:	4b24      	ldr	r3, [pc, #144]	; (80079c8 <vPortFree+0xb8>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4013      	ands	r3, r2
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10a      	bne.n	8007954 <vPortFree+0x44>
	__asm volatile
 800793e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	60fb      	str	r3, [r7, #12]
}
 8007950:	bf00      	nop
 8007952:	e7fe      	b.n	8007952 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00a      	beq.n	8007972 <vPortFree+0x62>
	__asm volatile
 800795c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007960:	f383 8811 	msr	BASEPRI, r3
 8007964:	f3bf 8f6f 	isb	sy
 8007968:	f3bf 8f4f 	dsb	sy
 800796c:	60bb      	str	r3, [r7, #8]
}
 800796e:	bf00      	nop
 8007970:	e7fe      	b.n	8007970 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	685a      	ldr	r2, [r3, #4]
 8007976:	4b14      	ldr	r3, [pc, #80]	; (80079c8 <vPortFree+0xb8>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4013      	ands	r3, r2
 800797c:	2b00      	cmp	r3, #0
 800797e:	d01e      	beq.n	80079be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d11a      	bne.n	80079be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	685a      	ldr	r2, [r3, #4]
 800798c:	4b0e      	ldr	r3, [pc, #56]	; (80079c8 <vPortFree+0xb8>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	43db      	mvns	r3, r3
 8007992:	401a      	ands	r2, r3
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007998:	f001 fb40 	bl	800901c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	685a      	ldr	r2, [r3, #4]
 80079a0:	4b0a      	ldr	r3, [pc, #40]	; (80079cc <vPortFree+0xbc>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4413      	add	r3, r2
 80079a6:	4a09      	ldr	r2, [pc, #36]	; (80079cc <vPortFree+0xbc>)
 80079a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80079aa:	6938      	ldr	r0, [r7, #16]
 80079ac:	f000 f874 	bl	8007a98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80079b0:	4b07      	ldr	r3, [pc, #28]	; (80079d0 <vPortFree+0xc0>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	3301      	adds	r3, #1
 80079b6:	4a06      	ldr	r2, [pc, #24]	; (80079d0 <vPortFree+0xc0>)
 80079b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80079ba:	f001 fb3d 	bl	8009038 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80079be:	bf00      	nop
 80079c0:	3718      	adds	r7, #24
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	24004438 	.word	0x24004438
 80079cc:	24004428 	.word	0x24004428
 80079d0:	24004434 	.word	0x24004434

080079d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80079da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80079de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80079e0:	4b27      	ldr	r3, [pc, #156]	; (8007a80 <prvHeapInit+0xac>)
 80079e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f003 0307 	and.w	r3, r3, #7
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00c      	beq.n	8007a08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	3307      	adds	r3, #7
 80079f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f023 0307 	bic.w	r3, r3, #7
 80079fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	4a1f      	ldr	r2, [pc, #124]	; (8007a80 <prvHeapInit+0xac>)
 8007a04:	4413      	add	r3, r2
 8007a06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a0c:	4a1d      	ldr	r2, [pc, #116]	; (8007a84 <prvHeapInit+0xb0>)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a12:	4b1c      	ldr	r3, [pc, #112]	; (8007a84 <prvHeapInit+0xb0>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a20:	2208      	movs	r2, #8
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	1a9b      	subs	r3, r3, r2
 8007a26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f023 0307 	bic.w	r3, r3, #7
 8007a2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	4a15      	ldr	r2, [pc, #84]	; (8007a88 <prvHeapInit+0xb4>)
 8007a34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a36:	4b14      	ldr	r3, [pc, #80]	; (8007a88 <prvHeapInit+0xb4>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a3e:	4b12      	ldr	r3, [pc, #72]	; (8007a88 <prvHeapInit+0xb4>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2200      	movs	r2, #0
 8007a44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	1ad2      	subs	r2, r2, r3
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a54:	4b0c      	ldr	r3, [pc, #48]	; (8007a88 <prvHeapInit+0xb4>)
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	4a0a      	ldr	r2, [pc, #40]	; (8007a8c <prvHeapInit+0xb8>)
 8007a62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	4a09      	ldr	r2, [pc, #36]	; (8007a90 <prvHeapInit+0xbc>)
 8007a6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a6c:	4b09      	ldr	r3, [pc, #36]	; (8007a94 <prvHeapInit+0xc0>)
 8007a6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a72:	601a      	str	r2, [r3, #0]
}
 8007a74:	bf00      	nop
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr
 8007a80:	2400081c 	.word	0x2400081c
 8007a84:	2400441c 	.word	0x2400441c
 8007a88:	24004424 	.word	0x24004424
 8007a8c:	2400442c 	.word	0x2400442c
 8007a90:	24004428 	.word	0x24004428
 8007a94:	24004438 	.word	0x24004438

08007a98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007aa0:	4b28      	ldr	r3, [pc, #160]	; (8007b44 <prvInsertBlockIntoFreeList+0xac>)
 8007aa2:	60fb      	str	r3, [r7, #12]
 8007aa4:	e002      	b.n	8007aac <prvInsertBlockIntoFreeList+0x14>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	60fb      	str	r3, [r7, #12]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d8f7      	bhi.n	8007aa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	68ba      	ldr	r2, [r7, #8]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d108      	bne.n	8007ada <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	441a      	add	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	68ba      	ldr	r2, [r7, #8]
 8007ae4:	441a      	add	r2, r3
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d118      	bne.n	8007b20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	4b15      	ldr	r3, [pc, #84]	; (8007b48 <prvInsertBlockIntoFreeList+0xb0>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d00d      	beq.n	8007b16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	685a      	ldr	r2, [r3, #4]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	441a      	add	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	601a      	str	r2, [r3, #0]
 8007b14:	e008      	b.n	8007b28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b16:	4b0c      	ldr	r3, [pc, #48]	; (8007b48 <prvInsertBlockIntoFreeList+0xb0>)
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	601a      	str	r2, [r3, #0]
 8007b1e:	e003      	b.n	8007b28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d002      	beq.n	8007b36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b36:	bf00      	nop
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	2400441c 	.word	0x2400441c
 8007b48:	24004424 	.word	0x24004424

08007b4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f103 0208 	add.w	r2, r3, #8
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f103 0208 	add.w	r2, r3, #8
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f103 0208 	add.w	r2, r3, #8
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b9a:	bf00      	nop
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr

08007ba6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b085      	sub	sp, #20
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
 8007bae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	689a      	ldr	r2, [r3, #8]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	683a      	ldr	r2, [r7, #0]
 8007bca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	1c5a      	adds	r2, r3, #1
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	601a      	str	r2, [r3, #0]
}
 8007be2:	bf00      	nop
 8007be4:	3714      	adds	r7, #20
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bee:	b480      	push	{r7}
 8007bf0:	b085      	sub	sp, #20
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
 8007bf6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c04:	d103      	bne.n	8007c0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	60fb      	str	r3, [r7, #12]
 8007c0c:	e00c      	b.n	8007c28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	3308      	adds	r3, #8
 8007c12:	60fb      	str	r3, [r7, #12]
 8007c14:	e002      	b.n	8007c1c <vListInsert+0x2e>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d2f6      	bcs.n	8007c16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	685a      	ldr	r2, [r3, #4]
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	683a      	ldr	r2, [r7, #0]
 8007c36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	683a      	ldr	r2, [r7, #0]
 8007c42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	1c5a      	adds	r2, r3, #1
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	601a      	str	r2, [r3, #0]
}
 8007c54:	bf00      	nop
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	6892      	ldr	r2, [r2, #8]
 8007c76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	6852      	ldr	r2, [r2, #4]
 8007c80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d103      	bne.n	8007c94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	689a      	ldr	r2, [r3, #8]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	1e5a      	subs	r2, r3, #1
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3714      	adds	r7, #20
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	3b04      	subs	r3, #4
 8007cc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ccc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	3b04      	subs	r3, #4
 8007cd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	f023 0201 	bic.w	r2, r3, #1
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	3b04      	subs	r3, #4
 8007ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ce4:	4a0c      	ldr	r2, [pc, #48]	; (8007d18 <pxPortInitialiseStack+0x64>)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	3b14      	subs	r3, #20
 8007cee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	3b04      	subs	r3, #4
 8007cfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f06f 0202 	mvn.w	r2, #2
 8007d02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	3b20      	subs	r3, #32
 8007d08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3714      	adds	r7, #20
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr
 8007d18:	08007d1d 	.word	0x08007d1d

08007d1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007d22:	2300      	movs	r3, #0
 8007d24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d26:	4b12      	ldr	r3, [pc, #72]	; (8007d70 <prvTaskExitError+0x54>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d2e:	d00a      	beq.n	8007d46 <prvTaskExitError+0x2a>
	__asm volatile
 8007d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d34:	f383 8811 	msr	BASEPRI, r3
 8007d38:	f3bf 8f6f 	isb	sy
 8007d3c:	f3bf 8f4f 	dsb	sy
 8007d40:	60fb      	str	r3, [r7, #12]
}
 8007d42:	bf00      	nop
 8007d44:	e7fe      	b.n	8007d44 <prvTaskExitError+0x28>
	__asm volatile
 8007d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4a:	f383 8811 	msr	BASEPRI, r3
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	60bb      	str	r3, [r7, #8]
}
 8007d58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d5a:	bf00      	nop
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d0fc      	beq.n	8007d5c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d62:	bf00      	nop
 8007d64:	bf00      	nop
 8007d66:	3714      	adds	r7, #20
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr
 8007d70:	24000010 	.word	0x24000010
	...

08007d80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007d80:	4b07      	ldr	r3, [pc, #28]	; (8007da0 <pxCurrentTCBConst2>)
 8007d82:	6819      	ldr	r1, [r3, #0]
 8007d84:	6808      	ldr	r0, [r1, #0]
 8007d86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d8a:	f380 8809 	msr	PSP, r0
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f04f 0000 	mov.w	r0, #0
 8007d96:	f380 8811 	msr	BASEPRI, r0
 8007d9a:	4770      	bx	lr
 8007d9c:	f3af 8000 	nop.w

08007da0 <pxCurrentTCBConst2>:
 8007da0:	24004444 	.word	0x24004444
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007da4:	bf00      	nop
 8007da6:	bf00      	nop

08007da8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007da8:	4808      	ldr	r0, [pc, #32]	; (8007dcc <prvPortStartFirstTask+0x24>)
 8007daa:	6800      	ldr	r0, [r0, #0]
 8007dac:	6800      	ldr	r0, [r0, #0]
 8007dae:	f380 8808 	msr	MSP, r0
 8007db2:	f04f 0000 	mov.w	r0, #0
 8007db6:	f380 8814 	msr	CONTROL, r0
 8007dba:	b662      	cpsie	i
 8007dbc:	b661      	cpsie	f
 8007dbe:	f3bf 8f4f 	dsb	sy
 8007dc2:	f3bf 8f6f 	isb	sy
 8007dc6:	df00      	svc	0
 8007dc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007dca:	bf00      	nop
 8007dcc:	e000ed08 	.word	0xe000ed08

08007dd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007dd6:	4b46      	ldr	r3, [pc, #280]	; (8007ef0 <xPortStartScheduler+0x120>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a46      	ldr	r2, [pc, #280]	; (8007ef4 <xPortStartScheduler+0x124>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d10a      	bne.n	8007df6 <xPortStartScheduler+0x26>
	__asm volatile
 8007de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	613b      	str	r3, [r7, #16]
}
 8007df2:	bf00      	nop
 8007df4:	e7fe      	b.n	8007df4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007df6:	4b3e      	ldr	r3, [pc, #248]	; (8007ef0 <xPortStartScheduler+0x120>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a3f      	ldr	r2, [pc, #252]	; (8007ef8 <xPortStartScheduler+0x128>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d10a      	bne.n	8007e16 <xPortStartScheduler+0x46>
	__asm volatile
 8007e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e04:	f383 8811 	msr	BASEPRI, r3
 8007e08:	f3bf 8f6f 	isb	sy
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	60fb      	str	r3, [r7, #12]
}
 8007e12:	bf00      	nop
 8007e14:	e7fe      	b.n	8007e14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e16:	4b39      	ldr	r3, [pc, #228]	; (8007efc <xPortStartScheduler+0x12c>)
 8007e18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	22ff      	movs	r2, #255	; 0xff
 8007e26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e30:	78fb      	ldrb	r3, [r7, #3]
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e38:	b2da      	uxtb	r2, r3
 8007e3a:	4b31      	ldr	r3, [pc, #196]	; (8007f00 <xPortStartScheduler+0x130>)
 8007e3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e3e:	4b31      	ldr	r3, [pc, #196]	; (8007f04 <xPortStartScheduler+0x134>)
 8007e40:	2207      	movs	r2, #7
 8007e42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e44:	e009      	b.n	8007e5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007e46:	4b2f      	ldr	r3, [pc, #188]	; (8007f04 <xPortStartScheduler+0x134>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	4a2d      	ldr	r2, [pc, #180]	; (8007f04 <xPortStartScheduler+0x134>)
 8007e4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e50:	78fb      	ldrb	r3, [r7, #3]
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	005b      	lsls	r3, r3, #1
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e5a:	78fb      	ldrb	r3, [r7, #3]
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e62:	2b80      	cmp	r3, #128	; 0x80
 8007e64:	d0ef      	beq.n	8007e46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e66:	4b27      	ldr	r3, [pc, #156]	; (8007f04 <xPortStartScheduler+0x134>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f1c3 0307 	rsb	r3, r3, #7
 8007e6e:	2b04      	cmp	r3, #4
 8007e70:	d00a      	beq.n	8007e88 <xPortStartScheduler+0xb8>
	__asm volatile
 8007e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e76:	f383 8811 	msr	BASEPRI, r3
 8007e7a:	f3bf 8f6f 	isb	sy
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	60bb      	str	r3, [r7, #8]
}
 8007e84:	bf00      	nop
 8007e86:	e7fe      	b.n	8007e86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e88:	4b1e      	ldr	r3, [pc, #120]	; (8007f04 <xPortStartScheduler+0x134>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	021b      	lsls	r3, r3, #8
 8007e8e:	4a1d      	ldr	r2, [pc, #116]	; (8007f04 <xPortStartScheduler+0x134>)
 8007e90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e92:	4b1c      	ldr	r3, [pc, #112]	; (8007f04 <xPortStartScheduler+0x134>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e9a:	4a1a      	ldr	r2, [pc, #104]	; (8007f04 <xPortStartScheduler+0x134>)
 8007e9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	b2da      	uxtb	r2, r3
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ea6:	4b18      	ldr	r3, [pc, #96]	; (8007f08 <xPortStartScheduler+0x138>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a17      	ldr	r2, [pc, #92]	; (8007f08 <xPortStartScheduler+0x138>)
 8007eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007eb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007eb2:	4b15      	ldr	r3, [pc, #84]	; (8007f08 <xPortStartScheduler+0x138>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a14      	ldr	r2, [pc, #80]	; (8007f08 <xPortStartScheduler+0x138>)
 8007eb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007ebc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ebe:	f000 f8dd 	bl	800807c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ec2:	4b12      	ldr	r3, [pc, #72]	; (8007f0c <xPortStartScheduler+0x13c>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ec8:	f000 f8fc 	bl	80080c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007ecc:	4b10      	ldr	r3, [pc, #64]	; (8007f10 <xPortStartScheduler+0x140>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a0f      	ldr	r2, [pc, #60]	; (8007f10 <xPortStartScheduler+0x140>)
 8007ed2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007ed6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ed8:	f7ff ff66 	bl	8007da8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007edc:	f001 fa14 	bl	8009308 <vTaskSwitchContext>
	prvTaskExitError();
 8007ee0:	f7ff ff1c 	bl	8007d1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3718      	adds	r7, #24
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	e000ed00 	.word	0xe000ed00
 8007ef4:	410fc271 	.word	0x410fc271
 8007ef8:	410fc270 	.word	0x410fc270
 8007efc:	e000e400 	.word	0xe000e400
 8007f00:	2400443c 	.word	0x2400443c
 8007f04:	24004440 	.word	0x24004440
 8007f08:	e000ed20 	.word	0xe000ed20
 8007f0c:	24000010 	.word	0x24000010
 8007f10:	e000ef34 	.word	0xe000ef34

08007f14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
	__asm volatile
 8007f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1e:	f383 8811 	msr	BASEPRI, r3
 8007f22:	f3bf 8f6f 	isb	sy
 8007f26:	f3bf 8f4f 	dsb	sy
 8007f2a:	607b      	str	r3, [r7, #4]
}
 8007f2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f2e:	4b0f      	ldr	r3, [pc, #60]	; (8007f6c <vPortEnterCritical+0x58>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	3301      	adds	r3, #1
 8007f34:	4a0d      	ldr	r2, [pc, #52]	; (8007f6c <vPortEnterCritical+0x58>)
 8007f36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f38:	4b0c      	ldr	r3, [pc, #48]	; (8007f6c <vPortEnterCritical+0x58>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d10f      	bne.n	8007f60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f40:	4b0b      	ldr	r3, [pc, #44]	; (8007f70 <vPortEnterCritical+0x5c>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00a      	beq.n	8007f60 <vPortEnterCritical+0x4c>
	__asm volatile
 8007f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f4e:	f383 8811 	msr	BASEPRI, r3
 8007f52:	f3bf 8f6f 	isb	sy
 8007f56:	f3bf 8f4f 	dsb	sy
 8007f5a:	603b      	str	r3, [r7, #0]
}
 8007f5c:	bf00      	nop
 8007f5e:	e7fe      	b.n	8007f5e <vPortEnterCritical+0x4a>
	}
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr
 8007f6c:	24000010 	.word	0x24000010
 8007f70:	e000ed04 	.word	0xe000ed04

08007f74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f7a:	4b12      	ldr	r3, [pc, #72]	; (8007fc4 <vPortExitCritical+0x50>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10a      	bne.n	8007f98 <vPortExitCritical+0x24>
	__asm volatile
 8007f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	607b      	str	r3, [r7, #4]
}
 8007f94:	bf00      	nop
 8007f96:	e7fe      	b.n	8007f96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007f98:	4b0a      	ldr	r3, [pc, #40]	; (8007fc4 <vPortExitCritical+0x50>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	4a09      	ldr	r2, [pc, #36]	; (8007fc4 <vPortExitCritical+0x50>)
 8007fa0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007fa2:	4b08      	ldr	r3, [pc, #32]	; (8007fc4 <vPortExitCritical+0x50>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d105      	bne.n	8007fb6 <vPortExitCritical+0x42>
 8007faa:	2300      	movs	r3, #0
 8007fac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007fb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007fb6:	bf00      	nop
 8007fb8:	370c      	adds	r7, #12
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	24000010 	.word	0x24000010
	...

08007fd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007fd0:	f3ef 8009 	mrs	r0, PSP
 8007fd4:	f3bf 8f6f 	isb	sy
 8007fd8:	4b15      	ldr	r3, [pc, #84]	; (8008030 <pxCurrentTCBConst>)
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	f01e 0f10 	tst.w	lr, #16
 8007fe0:	bf08      	it	eq
 8007fe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007fe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fea:	6010      	str	r0, [r2, #0]
 8007fec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ff0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007ff4:	f380 8811 	msr	BASEPRI, r0
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	f3bf 8f6f 	isb	sy
 8008000:	f001 f982 	bl	8009308 <vTaskSwitchContext>
 8008004:	f04f 0000 	mov.w	r0, #0
 8008008:	f380 8811 	msr	BASEPRI, r0
 800800c:	bc09      	pop	{r0, r3}
 800800e:	6819      	ldr	r1, [r3, #0]
 8008010:	6808      	ldr	r0, [r1, #0]
 8008012:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008016:	f01e 0f10 	tst.w	lr, #16
 800801a:	bf08      	it	eq
 800801c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008020:	f380 8809 	msr	PSP, r0
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	f3af 8000 	nop.w

08008030 <pxCurrentTCBConst>:
 8008030:	24004444 	.word	0x24004444
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008034:	bf00      	nop
 8008036:	bf00      	nop

08008038 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
	__asm volatile
 800803e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008042:	f383 8811 	msr	BASEPRI, r3
 8008046:	f3bf 8f6f 	isb	sy
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	607b      	str	r3, [r7, #4]
}
 8008050:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008052:	f001 f89f 	bl	8009194 <xTaskIncrementTick>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d003      	beq.n	8008064 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800805c:	4b06      	ldr	r3, [pc, #24]	; (8008078 <xPortSysTickHandler+0x40>)
 800805e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	2300      	movs	r3, #0
 8008066:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	f383 8811 	msr	BASEPRI, r3
}
 800806e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008070:	bf00      	nop
 8008072:	3708      	adds	r7, #8
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	e000ed04 	.word	0xe000ed04

0800807c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800807c:	b480      	push	{r7}
 800807e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008080:	4b0b      	ldr	r3, [pc, #44]	; (80080b0 <vPortSetupTimerInterrupt+0x34>)
 8008082:	2200      	movs	r2, #0
 8008084:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008086:	4b0b      	ldr	r3, [pc, #44]	; (80080b4 <vPortSetupTimerInterrupt+0x38>)
 8008088:	2200      	movs	r2, #0
 800808a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800808c:	4b0a      	ldr	r3, [pc, #40]	; (80080b8 <vPortSetupTimerInterrupt+0x3c>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a0a      	ldr	r2, [pc, #40]	; (80080bc <vPortSetupTimerInterrupt+0x40>)
 8008092:	fba2 2303 	umull	r2, r3, r2, r3
 8008096:	099b      	lsrs	r3, r3, #6
 8008098:	4a09      	ldr	r2, [pc, #36]	; (80080c0 <vPortSetupTimerInterrupt+0x44>)
 800809a:	3b01      	subs	r3, #1
 800809c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800809e:	4b04      	ldr	r3, [pc, #16]	; (80080b0 <vPortSetupTimerInterrupt+0x34>)
 80080a0:	2207      	movs	r2, #7
 80080a2:	601a      	str	r2, [r3, #0]
}
 80080a4:	bf00      	nop
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	e000e010 	.word	0xe000e010
 80080b4:	e000e018 	.word	0xe000e018
 80080b8:	24000000 	.word	0x24000000
 80080bc:	10624dd3 	.word	0x10624dd3
 80080c0:	e000e014 	.word	0xe000e014

080080c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80080c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80080d4 <vPortEnableVFP+0x10>
 80080c8:	6801      	ldr	r1, [r0, #0]
 80080ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80080ce:	6001      	str	r1, [r0, #0]
 80080d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80080d2:	bf00      	nop
 80080d4:	e000ed88 	.word	0xe000ed88

080080d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80080de:	f3ef 8305 	mrs	r3, IPSR
 80080e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2b0f      	cmp	r3, #15
 80080e8:	d914      	bls.n	8008114 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80080ea:	4a17      	ldr	r2, [pc, #92]	; (8008148 <vPortValidateInterruptPriority+0x70>)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	4413      	add	r3, r2
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80080f4:	4b15      	ldr	r3, [pc, #84]	; (800814c <vPortValidateInterruptPriority+0x74>)
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	7afa      	ldrb	r2, [r7, #11]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d20a      	bcs.n	8008114 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80080fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008102:	f383 8811 	msr	BASEPRI, r3
 8008106:	f3bf 8f6f 	isb	sy
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	607b      	str	r3, [r7, #4]
}
 8008110:	bf00      	nop
 8008112:	e7fe      	b.n	8008112 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008114:	4b0e      	ldr	r3, [pc, #56]	; (8008150 <vPortValidateInterruptPriority+0x78>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800811c:	4b0d      	ldr	r3, [pc, #52]	; (8008154 <vPortValidateInterruptPriority+0x7c>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	429a      	cmp	r2, r3
 8008122:	d90a      	bls.n	800813a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008128:	f383 8811 	msr	BASEPRI, r3
 800812c:	f3bf 8f6f 	isb	sy
 8008130:	f3bf 8f4f 	dsb	sy
 8008134:	603b      	str	r3, [r7, #0]
}
 8008136:	bf00      	nop
 8008138:	e7fe      	b.n	8008138 <vPortValidateInterruptPriority+0x60>
	}
 800813a:	bf00      	nop
 800813c:	3714      	adds	r7, #20
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	e000e3f0 	.word	0xe000e3f0
 800814c:	2400443c 	.word	0x2400443c
 8008150:	e000ed0c 	.word	0xe000ed0c
 8008154:	24004440 	.word	0x24004440

08008158 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10a      	bne.n	8008182 <xQueueGenericReset+0x2a>
	__asm volatile
 800816c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008170:	f383 8811 	msr	BASEPRI, r3
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	60bb      	str	r3, [r7, #8]
}
 800817e:	bf00      	nop
 8008180:	e7fe      	b.n	8008180 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008182:	f7ff fec7 	bl	8007f14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800818e:	68f9      	ldr	r1, [r7, #12]
 8008190:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008192:	fb01 f303 	mul.w	r3, r1, r3
 8008196:	441a      	add	r2, r3
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2200      	movs	r2, #0
 80081a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b2:	3b01      	subs	r3, #1
 80081b4:	68f9      	ldr	r1, [r7, #12]
 80081b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80081b8:	fb01 f303 	mul.w	r3, r1, r3
 80081bc:	441a      	add	r2, r3
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	22ff      	movs	r2, #255	; 0xff
 80081c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	22ff      	movs	r2, #255	; 0xff
 80081ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d114      	bne.n	8008202 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d01a      	beq.n	8008216 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	3310      	adds	r3, #16
 80081e4:	4618      	mov	r0, r3
 80081e6:	f001 f93d 	bl	8009464 <xTaskRemoveFromEventList>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d012      	beq.n	8008216 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80081f0:	4b0c      	ldr	r3, [pc, #48]	; (8008224 <xQueueGenericReset+0xcc>)
 80081f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081f6:	601a      	str	r2, [r3, #0]
 80081f8:	f3bf 8f4f 	dsb	sy
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	e009      	b.n	8008216 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	3310      	adds	r3, #16
 8008206:	4618      	mov	r0, r3
 8008208:	f7ff fca0 	bl	8007b4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	3324      	adds	r3, #36	; 0x24
 8008210:	4618      	mov	r0, r3
 8008212:	f7ff fc9b 	bl	8007b4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008216:	f7ff fead 	bl	8007f74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800821a:	2301      	movs	r3, #1
}
 800821c:	4618      	mov	r0, r3
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	e000ed04 	.word	0xe000ed04

08008228 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008228:	b580      	push	{r7, lr}
 800822a:	b08e      	sub	sp, #56	; 0x38
 800822c:	af02      	add	r7, sp, #8
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
 8008234:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10a      	bne.n	8008252 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800823c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008240:	f383 8811 	msr	BASEPRI, r3
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800824e:	bf00      	nop
 8008250:	e7fe      	b.n	8008250 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10a      	bne.n	800826e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825c:	f383 8811 	msr	BASEPRI, r3
 8008260:	f3bf 8f6f 	isb	sy
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	627b      	str	r3, [r7, #36]	; 0x24
}
 800826a:	bf00      	nop
 800826c:	e7fe      	b.n	800826c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d002      	beq.n	800827a <xQueueGenericCreateStatic+0x52>
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d001      	beq.n	800827e <xQueueGenericCreateStatic+0x56>
 800827a:	2301      	movs	r3, #1
 800827c:	e000      	b.n	8008280 <xQueueGenericCreateStatic+0x58>
 800827e:	2300      	movs	r3, #0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d10a      	bne.n	800829a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008288:	f383 8811 	msr	BASEPRI, r3
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f3bf 8f4f 	dsb	sy
 8008294:	623b      	str	r3, [r7, #32]
}
 8008296:	bf00      	nop
 8008298:	e7fe      	b.n	8008298 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d102      	bne.n	80082a6 <xQueueGenericCreateStatic+0x7e>
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d101      	bne.n	80082aa <xQueueGenericCreateStatic+0x82>
 80082a6:	2301      	movs	r3, #1
 80082a8:	e000      	b.n	80082ac <xQueueGenericCreateStatic+0x84>
 80082aa:	2300      	movs	r3, #0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d10a      	bne.n	80082c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80082b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b4:	f383 8811 	msr	BASEPRI, r3
 80082b8:	f3bf 8f6f 	isb	sy
 80082bc:	f3bf 8f4f 	dsb	sy
 80082c0:	61fb      	str	r3, [r7, #28]
}
 80082c2:	bf00      	nop
 80082c4:	e7fe      	b.n	80082c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80082c6:	2350      	movs	r3, #80	; 0x50
 80082c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	2b50      	cmp	r3, #80	; 0x50
 80082ce:	d00a      	beq.n	80082e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80082d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d4:	f383 8811 	msr	BASEPRI, r3
 80082d8:	f3bf 8f6f 	isb	sy
 80082dc:	f3bf 8f4f 	dsb	sy
 80082e0:	61bb      	str	r3, [r7, #24]
}
 80082e2:	bf00      	nop
 80082e4:	e7fe      	b.n	80082e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80082e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80082ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d00d      	beq.n	800830e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80082f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f4:	2201      	movs	r2, #1
 80082f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80082fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80082fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	4613      	mov	r3, r2
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	68b9      	ldr	r1, [r7, #8]
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f000 f83f 	bl	800838c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800830e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008310:	4618      	mov	r0, r3
 8008312:	3730      	adds	r7, #48	; 0x30
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008318:	b580      	push	{r7, lr}
 800831a:	b08a      	sub	sp, #40	; 0x28
 800831c:	af02      	add	r7, sp, #8
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	4613      	mov	r3, r2
 8008324:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d10a      	bne.n	8008342 <xQueueGenericCreate+0x2a>
	__asm volatile
 800832c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008330:	f383 8811 	msr	BASEPRI, r3
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	613b      	str	r3, [r7, #16]
}
 800833e:	bf00      	nop
 8008340:	e7fe      	b.n	8008340 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	fb02 f303 	mul.w	r3, r2, r3
 800834a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	3350      	adds	r3, #80	; 0x50
 8008350:	4618      	mov	r0, r3
 8008352:	f7ff fa11 	bl	8007778 <pvPortMalloc>
 8008356:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d011      	beq.n	8008382 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	3350      	adds	r3, #80	; 0x50
 8008366:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	2200      	movs	r2, #0
 800836c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008370:	79fa      	ldrb	r2, [r7, #7]
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	9300      	str	r3, [sp, #0]
 8008376:	4613      	mov	r3, r2
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	68b9      	ldr	r1, [r7, #8]
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f000 f805 	bl	800838c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008382:	69bb      	ldr	r3, [r7, #24]
	}
 8008384:	4618      	mov	r0, r3
 8008386:	3720      	adds	r7, #32
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
 8008398:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d103      	bne.n	80083a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	69ba      	ldr	r2, [r7, #24]
 80083a4:	601a      	str	r2, [r3, #0]
 80083a6:	e002      	b.n	80083ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	68ba      	ldr	r2, [r7, #8]
 80083b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80083ba:	2101      	movs	r1, #1
 80083bc:	69b8      	ldr	r0, [r7, #24]
 80083be:	f7ff fecb 	bl	8008158 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	78fa      	ldrb	r2, [r7, #3]
 80083c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80083ca:	bf00      	nop
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
	...

080083d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b08e      	sub	sp, #56	; 0x38
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	607a      	str	r2, [r7, #4]
 80083e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80083e2:	2300      	movs	r3, #0
 80083e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80083ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10a      	bne.n	8008406 <xQueueGenericSend+0x32>
	__asm volatile
 80083f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f4:	f383 8811 	msr	BASEPRI, r3
 80083f8:	f3bf 8f6f 	isb	sy
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008402:	bf00      	nop
 8008404:	e7fe      	b.n	8008404 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d103      	bne.n	8008414 <xQueueGenericSend+0x40>
 800840c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008410:	2b00      	cmp	r3, #0
 8008412:	d101      	bne.n	8008418 <xQueueGenericSend+0x44>
 8008414:	2301      	movs	r3, #1
 8008416:	e000      	b.n	800841a <xQueueGenericSend+0x46>
 8008418:	2300      	movs	r3, #0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d10a      	bne.n	8008434 <xQueueGenericSend+0x60>
	__asm volatile
 800841e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008422:	f383 8811 	msr	BASEPRI, r3
 8008426:	f3bf 8f6f 	isb	sy
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008430:	bf00      	nop
 8008432:	e7fe      	b.n	8008432 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	2b02      	cmp	r3, #2
 8008438:	d103      	bne.n	8008442 <xQueueGenericSend+0x6e>
 800843a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800843e:	2b01      	cmp	r3, #1
 8008440:	d101      	bne.n	8008446 <xQueueGenericSend+0x72>
 8008442:	2301      	movs	r3, #1
 8008444:	e000      	b.n	8008448 <xQueueGenericSend+0x74>
 8008446:	2300      	movs	r3, #0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10a      	bne.n	8008462 <xQueueGenericSend+0x8e>
	__asm volatile
 800844c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	623b      	str	r3, [r7, #32]
}
 800845e:	bf00      	nop
 8008460:	e7fe      	b.n	8008460 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008462:	f001 f9bd 	bl	80097e0 <xTaskGetSchedulerState>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d102      	bne.n	8008472 <xQueueGenericSend+0x9e>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d101      	bne.n	8008476 <xQueueGenericSend+0xa2>
 8008472:	2301      	movs	r3, #1
 8008474:	e000      	b.n	8008478 <xQueueGenericSend+0xa4>
 8008476:	2300      	movs	r3, #0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d10a      	bne.n	8008492 <xQueueGenericSend+0xbe>
	__asm volatile
 800847c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008480:	f383 8811 	msr	BASEPRI, r3
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	61fb      	str	r3, [r7, #28]
}
 800848e:	bf00      	nop
 8008490:	e7fe      	b.n	8008490 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008492:	f7ff fd3f 	bl	8007f14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800849a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800849e:	429a      	cmp	r2, r3
 80084a0:	d302      	bcc.n	80084a8 <xQueueGenericSend+0xd4>
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	d129      	bne.n	80084fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80084a8:	683a      	ldr	r2, [r7, #0]
 80084aa:	68b9      	ldr	r1, [r7, #8]
 80084ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084ae:	f000 fa0b 	bl	80088c8 <prvCopyDataToQueue>
 80084b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d010      	beq.n	80084de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084be:	3324      	adds	r3, #36	; 0x24
 80084c0:	4618      	mov	r0, r3
 80084c2:	f000 ffcf 	bl	8009464 <xTaskRemoveFromEventList>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d013      	beq.n	80084f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80084cc:	4b3f      	ldr	r3, [pc, #252]	; (80085cc <xQueueGenericSend+0x1f8>)
 80084ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084d2:	601a      	str	r2, [r3, #0]
 80084d4:	f3bf 8f4f 	dsb	sy
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	e00a      	b.n	80084f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80084de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d007      	beq.n	80084f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80084e4:	4b39      	ldr	r3, [pc, #228]	; (80085cc <xQueueGenericSend+0x1f8>)
 80084e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084ea:	601a      	str	r2, [r3, #0]
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80084f4:	f7ff fd3e 	bl	8007f74 <vPortExitCritical>
				return pdPASS;
 80084f8:	2301      	movs	r3, #1
 80084fa:	e063      	b.n	80085c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d103      	bne.n	800850a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008502:	f7ff fd37 	bl	8007f74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008506:	2300      	movs	r3, #0
 8008508:	e05c      	b.n	80085c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800850a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800850c:	2b00      	cmp	r3, #0
 800850e:	d106      	bne.n	800851e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008510:	f107 0314 	add.w	r3, r7, #20
 8008514:	4618      	mov	r0, r3
 8008516:	f001 f809 	bl	800952c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800851a:	2301      	movs	r3, #1
 800851c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800851e:	f7ff fd29 	bl	8007f74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008522:	f000 fd7b 	bl	800901c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008526:	f7ff fcf5 	bl	8007f14 <vPortEnterCritical>
 800852a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008530:	b25b      	sxtb	r3, r3
 8008532:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008536:	d103      	bne.n	8008540 <xQueueGenericSend+0x16c>
 8008538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853a:	2200      	movs	r2, #0
 800853c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008542:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008546:	b25b      	sxtb	r3, r3
 8008548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800854c:	d103      	bne.n	8008556 <xQueueGenericSend+0x182>
 800854e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008550:	2200      	movs	r2, #0
 8008552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008556:	f7ff fd0d 	bl	8007f74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800855a:	1d3a      	adds	r2, r7, #4
 800855c:	f107 0314 	add.w	r3, r7, #20
 8008560:	4611      	mov	r1, r2
 8008562:	4618      	mov	r0, r3
 8008564:	f000 fff8 	bl	8009558 <xTaskCheckForTimeOut>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d124      	bne.n	80085b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800856e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008570:	f000 faa2 	bl	8008ab8 <prvIsQueueFull>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d018      	beq.n	80085ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800857a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857c:	3310      	adds	r3, #16
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	4611      	mov	r1, r2
 8008582:	4618      	mov	r0, r3
 8008584:	f000 ff1e 	bl	80093c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800858a:	f000 fa2d 	bl	80089e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800858e:	f000 fd53 	bl	8009038 <xTaskResumeAll>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	f47f af7c 	bne.w	8008492 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800859a:	4b0c      	ldr	r3, [pc, #48]	; (80085cc <xQueueGenericSend+0x1f8>)
 800859c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085a0:	601a      	str	r2, [r3, #0]
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	e772      	b.n	8008492 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80085ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085ae:	f000 fa1b 	bl	80089e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085b2:	f000 fd41 	bl	8009038 <xTaskResumeAll>
 80085b6:	e76c      	b.n	8008492 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80085b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085ba:	f000 fa15 	bl	80089e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085be:	f000 fd3b 	bl	8009038 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80085c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3738      	adds	r7, #56	; 0x38
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	e000ed04 	.word	0xe000ed04

080085d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b090      	sub	sp, #64	; 0x40
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
 80085dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80085e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10a      	bne.n	80085fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80085e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ec:	f383 8811 	msr	BASEPRI, r3
 80085f0:	f3bf 8f6f 	isb	sy
 80085f4:	f3bf 8f4f 	dsb	sy
 80085f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80085fa:	bf00      	nop
 80085fc:	e7fe      	b.n	80085fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d103      	bne.n	800860c <xQueueGenericSendFromISR+0x3c>
 8008604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008608:	2b00      	cmp	r3, #0
 800860a:	d101      	bne.n	8008610 <xQueueGenericSendFromISR+0x40>
 800860c:	2301      	movs	r3, #1
 800860e:	e000      	b.n	8008612 <xQueueGenericSendFromISR+0x42>
 8008610:	2300      	movs	r3, #0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d10a      	bne.n	800862c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861a:	f383 8811 	msr	BASEPRI, r3
 800861e:	f3bf 8f6f 	isb	sy
 8008622:	f3bf 8f4f 	dsb	sy
 8008626:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008628:	bf00      	nop
 800862a:	e7fe      	b.n	800862a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	2b02      	cmp	r3, #2
 8008630:	d103      	bne.n	800863a <xQueueGenericSendFromISR+0x6a>
 8008632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008636:	2b01      	cmp	r3, #1
 8008638:	d101      	bne.n	800863e <xQueueGenericSendFromISR+0x6e>
 800863a:	2301      	movs	r3, #1
 800863c:	e000      	b.n	8008640 <xQueueGenericSendFromISR+0x70>
 800863e:	2300      	movs	r3, #0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d10a      	bne.n	800865a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008648:	f383 8811 	msr	BASEPRI, r3
 800864c:	f3bf 8f6f 	isb	sy
 8008650:	f3bf 8f4f 	dsb	sy
 8008654:	623b      	str	r3, [r7, #32]
}
 8008656:	bf00      	nop
 8008658:	e7fe      	b.n	8008658 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800865a:	f7ff fd3d 	bl	80080d8 <vPortValidateInterruptPriority>
	__asm volatile
 800865e:	f3ef 8211 	mrs	r2, BASEPRI
 8008662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008666:	f383 8811 	msr	BASEPRI, r3
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	61fa      	str	r2, [r7, #28]
 8008674:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8008676:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008678:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800867a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800867e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008682:	429a      	cmp	r2, r3
 8008684:	d302      	bcc.n	800868c <xQueueGenericSendFromISR+0xbc>
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	2b02      	cmp	r3, #2
 800868a:	d12f      	bne.n	80086ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800868c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800869c:	683a      	ldr	r2, [r7, #0]
 800869e:	68b9      	ldr	r1, [r7, #8]
 80086a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80086a2:	f000 f911 	bl	80088c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80086a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80086aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086ae:	d112      	bne.n	80086d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d016      	beq.n	80086e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ba:	3324      	adds	r3, #36	; 0x24
 80086bc:	4618      	mov	r0, r3
 80086be:	f000 fed1 	bl	8009464 <xTaskRemoveFromEventList>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00e      	beq.n	80086e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00b      	beq.n	80086e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2201      	movs	r2, #1
 80086d2:	601a      	str	r2, [r3, #0]
 80086d4:	e007      	b.n	80086e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80086d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80086da:	3301      	adds	r3, #1
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	b25a      	sxtb	r2, r3
 80086e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80086e6:	2301      	movs	r3, #1
 80086e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80086ea:	e001      	b.n	80086f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80086ec:	2300      	movs	r3, #0
 80086ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f2:	617b      	str	r3, [r7, #20]
	__asm volatile
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	f383 8811 	msr	BASEPRI, r3
}
 80086fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3740      	adds	r7, #64	; 0x40
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
	...

08008708 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b08c      	sub	sp, #48	; 0x30
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008714:	2300      	movs	r3, #0
 8008716:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800871c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871e:	2b00      	cmp	r3, #0
 8008720:	d10a      	bne.n	8008738 <xQueueReceive+0x30>
	__asm volatile
 8008722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	623b      	str	r3, [r7, #32]
}
 8008734:	bf00      	nop
 8008736:	e7fe      	b.n	8008736 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d103      	bne.n	8008746 <xQueueReceive+0x3e>
 800873e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008742:	2b00      	cmp	r3, #0
 8008744:	d101      	bne.n	800874a <xQueueReceive+0x42>
 8008746:	2301      	movs	r3, #1
 8008748:	e000      	b.n	800874c <xQueueReceive+0x44>
 800874a:	2300      	movs	r3, #0
 800874c:	2b00      	cmp	r3, #0
 800874e:	d10a      	bne.n	8008766 <xQueueReceive+0x5e>
	__asm volatile
 8008750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008754:	f383 8811 	msr	BASEPRI, r3
 8008758:	f3bf 8f6f 	isb	sy
 800875c:	f3bf 8f4f 	dsb	sy
 8008760:	61fb      	str	r3, [r7, #28]
}
 8008762:	bf00      	nop
 8008764:	e7fe      	b.n	8008764 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008766:	f001 f83b 	bl	80097e0 <xTaskGetSchedulerState>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d102      	bne.n	8008776 <xQueueReceive+0x6e>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d101      	bne.n	800877a <xQueueReceive+0x72>
 8008776:	2301      	movs	r3, #1
 8008778:	e000      	b.n	800877c <xQueueReceive+0x74>
 800877a:	2300      	movs	r3, #0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d10a      	bne.n	8008796 <xQueueReceive+0x8e>
	__asm volatile
 8008780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008784:	f383 8811 	msr	BASEPRI, r3
 8008788:	f3bf 8f6f 	isb	sy
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	61bb      	str	r3, [r7, #24]
}
 8008792:	bf00      	nop
 8008794:	e7fe      	b.n	8008794 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008796:	f7ff fbbd 	bl	8007f14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800879a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d01f      	beq.n	80087e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80087a6:	68b9      	ldr	r1, [r7, #8]
 80087a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087aa:	f000 f8f7 	bl	800899c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80087ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b0:	1e5a      	subs	r2, r3, #1
 80087b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00f      	beq.n	80087de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c0:	3310      	adds	r3, #16
 80087c2:	4618      	mov	r0, r3
 80087c4:	f000 fe4e 	bl	8009464 <xTaskRemoveFromEventList>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d007      	beq.n	80087de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80087ce:	4b3d      	ldr	r3, [pc, #244]	; (80088c4 <xQueueReceive+0x1bc>)
 80087d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087d4:	601a      	str	r2, [r3, #0]
 80087d6:	f3bf 8f4f 	dsb	sy
 80087da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80087de:	f7ff fbc9 	bl	8007f74 <vPortExitCritical>
				return pdPASS;
 80087e2:	2301      	movs	r3, #1
 80087e4:	e069      	b.n	80088ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d103      	bne.n	80087f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80087ec:	f7ff fbc2 	bl	8007f74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80087f0:	2300      	movs	r3, #0
 80087f2:	e062      	b.n	80088ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80087f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d106      	bne.n	8008808 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087fa:	f107 0310 	add.w	r3, r7, #16
 80087fe:	4618      	mov	r0, r3
 8008800:	f000 fe94 	bl	800952c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008804:	2301      	movs	r3, #1
 8008806:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008808:	f7ff fbb4 	bl	8007f74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800880c:	f000 fc06 	bl	800901c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008810:	f7ff fb80 	bl	8007f14 <vPortEnterCritical>
 8008814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008816:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800881a:	b25b      	sxtb	r3, r3
 800881c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008820:	d103      	bne.n	800882a <xQueueReceive+0x122>
 8008822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008824:	2200      	movs	r2, #0
 8008826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800882a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008830:	b25b      	sxtb	r3, r3
 8008832:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008836:	d103      	bne.n	8008840 <xQueueReceive+0x138>
 8008838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883a:	2200      	movs	r2, #0
 800883c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008840:	f7ff fb98 	bl	8007f74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008844:	1d3a      	adds	r2, r7, #4
 8008846:	f107 0310 	add.w	r3, r7, #16
 800884a:	4611      	mov	r1, r2
 800884c:	4618      	mov	r0, r3
 800884e:	f000 fe83 	bl	8009558 <xTaskCheckForTimeOut>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d123      	bne.n	80088a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800885a:	f000 f917 	bl	8008a8c <prvIsQueueEmpty>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d017      	beq.n	8008894 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008866:	3324      	adds	r3, #36	; 0x24
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	4611      	mov	r1, r2
 800886c:	4618      	mov	r0, r3
 800886e:	f000 fda9 	bl	80093c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008872:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008874:	f000 f8b8 	bl	80089e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008878:	f000 fbde 	bl	8009038 <xTaskResumeAll>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d189      	bne.n	8008796 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008882:	4b10      	ldr	r3, [pc, #64]	; (80088c4 <xQueueReceive+0x1bc>)
 8008884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008888:	601a      	str	r2, [r3, #0]
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	e780      	b.n	8008796 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008896:	f000 f8a7 	bl	80089e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800889a:	f000 fbcd 	bl	8009038 <xTaskResumeAll>
 800889e:	e77a      	b.n	8008796 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80088a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088a2:	f000 f8a1 	bl	80089e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088a6:	f000 fbc7 	bl	8009038 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088ac:	f000 f8ee 	bl	8008a8c <prvIsQueueEmpty>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f43f af6f 	beq.w	8008796 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80088b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3730      	adds	r7, #48	; 0x30
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	e000ed04 	.word	0xe000ed04

080088c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b086      	sub	sp, #24
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80088d4:	2300      	movs	r3, #0
 80088d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d10d      	bne.n	8008902 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d14d      	bne.n	800898a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	4618      	mov	r0, r3
 80088f4:	f000 ff92 	bl	800981c <xTaskPriorityDisinherit>
 80088f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	609a      	str	r2, [r3, #8]
 8008900:	e043      	b.n	800898a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d119      	bne.n	800893c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6858      	ldr	r0, [r3, #4]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008910:	461a      	mov	r2, r3
 8008912:	68b9      	ldr	r1, [r7, #8]
 8008914:	f001 fbbc 	bl	800a090 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	685a      	ldr	r2, [r3, #4]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008920:	441a      	add	r2, r3
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	685a      	ldr	r2, [r3, #4]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	429a      	cmp	r2, r3
 8008930:	d32b      	bcc.n	800898a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	605a      	str	r2, [r3, #4]
 800893a:	e026      	b.n	800898a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	68d8      	ldr	r0, [r3, #12]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008944:	461a      	mov	r2, r3
 8008946:	68b9      	ldr	r1, [r7, #8]
 8008948:	f001 fba2 	bl	800a090 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	68da      	ldr	r2, [r3, #12]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008954:	425b      	negs	r3, r3
 8008956:	441a      	add	r2, r3
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	68da      	ldr	r2, [r3, #12]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	429a      	cmp	r2, r3
 8008966:	d207      	bcs.n	8008978 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	689a      	ldr	r2, [r3, #8]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008970:	425b      	negs	r3, r3
 8008972:	441a      	add	r2, r3
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2b02      	cmp	r3, #2
 800897c:	d105      	bne.n	800898a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d002      	beq.n	800898a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	3b01      	subs	r3, #1
 8008988:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	1c5a      	adds	r2, r3, #1
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008992:	697b      	ldr	r3, [r7, #20]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3718      	adds	r7, #24
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d018      	beq.n	80089e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	68da      	ldr	r2, [r3, #12]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b6:	441a      	add	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	68da      	ldr	r2, [r3, #12]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d303      	bcc.n	80089d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	68d9      	ldr	r1, [r3, #12]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d8:	461a      	mov	r2, r3
 80089da:	6838      	ldr	r0, [r7, #0]
 80089dc:	f001 fb58 	bl	800a090 <memcpy>
	}
}
 80089e0:	bf00      	nop
 80089e2:	3708      	adds	r7, #8
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80089f0:	f7ff fa90 	bl	8007f14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089fc:	e011      	b.n	8008a22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d012      	beq.n	8008a2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	3324      	adds	r3, #36	; 0x24
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f000 fd2a 	bl	8009464 <xTaskRemoveFromEventList>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d001      	beq.n	8008a1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008a16:	f000 fe01 	bl	800961c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008a1a:	7bfb      	ldrb	r3, [r7, #15]
 8008a1c:	3b01      	subs	r3, #1
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	dce9      	bgt.n	80089fe <prvUnlockQueue+0x16>
 8008a2a:	e000      	b.n	8008a2e <prvUnlockQueue+0x46>
					break;
 8008a2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	22ff      	movs	r2, #255	; 0xff
 8008a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008a36:	f7ff fa9d 	bl	8007f74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008a3a:	f7ff fa6b 	bl	8007f14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a46:	e011      	b.n	8008a6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d012      	beq.n	8008a76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	3310      	adds	r3, #16
 8008a54:	4618      	mov	r0, r3
 8008a56:	f000 fd05 	bl	8009464 <xTaskRemoveFromEventList>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d001      	beq.n	8008a64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008a60:	f000 fddc 	bl	800961c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008a64:	7bbb      	ldrb	r3, [r7, #14]
 8008a66:	3b01      	subs	r3, #1
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	dce9      	bgt.n	8008a48 <prvUnlockQueue+0x60>
 8008a74:	e000      	b.n	8008a78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008a76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	22ff      	movs	r2, #255	; 0xff
 8008a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008a80:	f7ff fa78 	bl	8007f74 <vPortExitCritical>
}
 8008a84:	bf00      	nop
 8008a86:	3710      	adds	r7, #16
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a94:	f7ff fa3e 	bl	8007f14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d102      	bne.n	8008aa6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	60fb      	str	r3, [r7, #12]
 8008aa4:	e001      	b.n	8008aaa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008aaa:	f7ff fa63 	bl	8007f74 <vPortExitCritical>

	return xReturn;
 8008aae:	68fb      	ldr	r3, [r7, #12]
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3710      	adds	r7, #16
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ac0:	f7ff fa28 	bl	8007f14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d102      	bne.n	8008ad6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	60fb      	str	r3, [r7, #12]
 8008ad4:	e001      	b.n	8008ada <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ada:	f7ff fa4b 	bl	8007f74 <vPortExitCritical>

	return xReturn;
 8008ade:	68fb      	ldr	r3, [r7, #12]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ae8:	b480      	push	{r7}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008af2:	2300      	movs	r3, #0
 8008af4:	60fb      	str	r3, [r7, #12]
 8008af6:	e014      	b.n	8008b22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008af8:	4a0f      	ldr	r2, [pc, #60]	; (8008b38 <vQueueAddToRegistry+0x50>)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d10b      	bne.n	8008b1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008b04:	490c      	ldr	r1, [pc, #48]	; (8008b38 <vQueueAddToRegistry+0x50>)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	683a      	ldr	r2, [r7, #0]
 8008b0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008b0e:	4a0a      	ldr	r2, [pc, #40]	; (8008b38 <vQueueAddToRegistry+0x50>)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	00db      	lsls	r3, r3, #3
 8008b14:	4413      	add	r3, r2
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008b1a:	e006      	b.n	8008b2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	3301      	adds	r3, #1
 8008b20:	60fb      	str	r3, [r7, #12]
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2b0f      	cmp	r3, #15
 8008b26:	d9e7      	bls.n	8008af8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008b28:	bf00      	nop
 8008b2a:	bf00      	nop
 8008b2c:	3714      	adds	r7, #20
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	24005080 	.word	0x24005080

08008b3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b086      	sub	sp, #24
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008b4c:	f7ff f9e2 	bl	8007f14 <vPortEnterCritical>
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b56:	b25b      	sxtb	r3, r3
 8008b58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b5c:	d103      	bne.n	8008b66 <vQueueWaitForMessageRestricted+0x2a>
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b6c:	b25b      	sxtb	r3, r3
 8008b6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b72:	d103      	bne.n	8008b7c <vQueueWaitForMessageRestricted+0x40>
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b7c:	f7ff f9fa 	bl	8007f74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d106      	bne.n	8008b96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	3324      	adds	r3, #36	; 0x24
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	68b9      	ldr	r1, [r7, #8]
 8008b90:	4618      	mov	r0, r3
 8008b92:	f000 fc3b 	bl	800940c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008b96:	6978      	ldr	r0, [r7, #20]
 8008b98:	f7ff ff26 	bl	80089e8 <prvUnlockQueue>
	}
 8008b9c:	bf00      	nop
 8008b9e:	3718      	adds	r7, #24
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b08e      	sub	sp, #56	; 0x38
 8008ba8:	af04      	add	r7, sp, #16
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	607a      	str	r2, [r7, #4]
 8008bb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d10a      	bne.n	8008bce <xTaskCreateStatic+0x2a>
	__asm volatile
 8008bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bbc:	f383 8811 	msr	BASEPRI, r3
 8008bc0:	f3bf 8f6f 	isb	sy
 8008bc4:	f3bf 8f4f 	dsb	sy
 8008bc8:	623b      	str	r3, [r7, #32]
}
 8008bca:	bf00      	nop
 8008bcc:	e7fe      	b.n	8008bcc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10a      	bne.n	8008bea <xTaskCreateStatic+0x46>
	__asm volatile
 8008bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	61fb      	str	r3, [r7, #28]
}
 8008be6:	bf00      	nop
 8008be8:	e7fe      	b.n	8008be8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008bea:	235c      	movs	r3, #92	; 0x5c
 8008bec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	2b5c      	cmp	r3, #92	; 0x5c
 8008bf2:	d00a      	beq.n	8008c0a <xTaskCreateStatic+0x66>
	__asm volatile
 8008bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf8:	f383 8811 	msr	BASEPRI, r3
 8008bfc:	f3bf 8f6f 	isb	sy
 8008c00:	f3bf 8f4f 	dsb	sy
 8008c04:	61bb      	str	r3, [r7, #24]
}
 8008c06:	bf00      	nop
 8008c08:	e7fe      	b.n	8008c08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008c0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d01e      	beq.n	8008c50 <xTaskCreateStatic+0xac>
 8008c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d01b      	beq.n	8008c50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c24:	2202      	movs	r2, #2
 8008c26:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	9303      	str	r3, [sp, #12]
 8008c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c30:	9302      	str	r3, [sp, #8]
 8008c32:	f107 0314 	add.w	r3, r7, #20
 8008c36:	9301      	str	r3, [sp, #4]
 8008c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3a:	9300      	str	r3, [sp, #0]
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	68b9      	ldr	r1, [r7, #8]
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f000 f850 	bl	8008ce8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c4a:	f000 f8dd 	bl	8008e08 <prvAddNewTaskToReadyList>
 8008c4e:	e001      	b.n	8008c54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008c50:	2300      	movs	r3, #0
 8008c52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008c54:	697b      	ldr	r3, [r7, #20]
	}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3728      	adds	r7, #40	; 0x28
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b08c      	sub	sp, #48	; 0x30
 8008c62:	af04      	add	r7, sp, #16
 8008c64:	60f8      	str	r0, [r7, #12]
 8008c66:	60b9      	str	r1, [r7, #8]
 8008c68:	603b      	str	r3, [r7, #0]
 8008c6a:	4613      	mov	r3, r2
 8008c6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008c6e:	88fb      	ldrh	r3, [r7, #6]
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7fe fd80 	bl	8007778 <pvPortMalloc>
 8008c78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00e      	beq.n	8008c9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008c80:	205c      	movs	r0, #92	; 0x5c
 8008c82:	f7fe fd79 	bl	8007778 <pvPortMalloc>
 8008c86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d003      	beq.n	8008c96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	697a      	ldr	r2, [r7, #20]
 8008c92:	631a      	str	r2, [r3, #48]	; 0x30
 8008c94:	e005      	b.n	8008ca2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008c96:	6978      	ldr	r0, [r7, #20]
 8008c98:	f7fe fe3a 	bl	8007910 <vPortFree>
 8008c9c:	e001      	b.n	8008ca2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d017      	beq.n	8008cd8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008cb0:	88fa      	ldrh	r2, [r7, #6]
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	9303      	str	r3, [sp, #12]
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	9302      	str	r3, [sp, #8]
 8008cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cbc:	9301      	str	r3, [sp, #4]
 8008cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc0:	9300      	str	r3, [sp, #0]
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	68b9      	ldr	r1, [r7, #8]
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f000 f80e 	bl	8008ce8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ccc:	69f8      	ldr	r0, [r7, #28]
 8008cce:	f000 f89b 	bl	8008e08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	61bb      	str	r3, [r7, #24]
 8008cd6:	e002      	b.n	8008cde <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008cd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cdc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008cde:	69bb      	ldr	r3, [r7, #24]
	}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3720      	adds	r7, #32
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b088      	sub	sp, #32
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
 8008cf4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	461a      	mov	r2, r3
 8008d00:	21a5      	movs	r1, #165	; 0xa5
 8008d02:	f001 f9d3 	bl	800a0ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d0a:	6879      	ldr	r1, [r7, #4]
 8008d0c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008d10:	440b      	add	r3, r1
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	4413      	add	r3, r2
 8008d16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	f023 0307 	bic.w	r3, r3, #7
 8008d1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	f003 0307 	and.w	r3, r3, #7
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00a      	beq.n	8008d40 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2e:	f383 8811 	msr	BASEPRI, r3
 8008d32:	f3bf 8f6f 	isb	sy
 8008d36:	f3bf 8f4f 	dsb	sy
 8008d3a:	617b      	str	r3, [r7, #20]
}
 8008d3c:	bf00      	nop
 8008d3e:	e7fe      	b.n	8008d3e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d01f      	beq.n	8008d86 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d46:	2300      	movs	r3, #0
 8008d48:	61fb      	str	r3, [r7, #28]
 8008d4a:	e012      	b.n	8008d72 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d4c:	68ba      	ldr	r2, [r7, #8]
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	4413      	add	r3, r2
 8008d52:	7819      	ldrb	r1, [r3, #0]
 8008d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	4413      	add	r3, r2
 8008d5a:	3334      	adds	r3, #52	; 0x34
 8008d5c:	460a      	mov	r2, r1
 8008d5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008d60:	68ba      	ldr	r2, [r7, #8]
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	4413      	add	r3, r2
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d006      	beq.n	8008d7a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	61fb      	str	r3, [r7, #28]
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	2b0f      	cmp	r3, #15
 8008d76:	d9e9      	bls.n	8008d4c <prvInitialiseNewTask+0x64>
 8008d78:	e000      	b.n	8008d7c <prvInitialiseNewTask+0x94>
			{
				break;
 8008d7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d84:	e003      	b.n	8008d8e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d90:	2b37      	cmp	r3, #55	; 0x37
 8008d92:	d901      	bls.n	8008d98 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008d94:	2337      	movs	r3, #55	; 0x37
 8008d96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008da2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da6:	2200      	movs	r2, #0
 8008da8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dac:	3304      	adds	r3, #4
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7fe feec 	bl	8007b8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db6:	3318      	adds	r3, #24
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7fe fee7 	bl	8007b8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008de2:	683a      	ldr	r2, [r7, #0]
 8008de4:	68f9      	ldr	r1, [r7, #12]
 8008de6:	69b8      	ldr	r0, [r7, #24]
 8008de8:	f7fe ff64 	bl	8007cb4 <pxPortInitialiseStack>
 8008dec:	4602      	mov	r2, r0
 8008dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d002      	beq.n	8008dfe <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dfe:	bf00      	nop
 8008e00:	3720      	adds	r7, #32
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
	...

08008e08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e10:	f7ff f880 	bl	8007f14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e14:	4b2d      	ldr	r3, [pc, #180]	; (8008ecc <prvAddNewTaskToReadyList+0xc4>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	3301      	adds	r3, #1
 8008e1a:	4a2c      	ldr	r2, [pc, #176]	; (8008ecc <prvAddNewTaskToReadyList+0xc4>)
 8008e1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e1e:	4b2c      	ldr	r3, [pc, #176]	; (8008ed0 <prvAddNewTaskToReadyList+0xc8>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d109      	bne.n	8008e3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e26:	4a2a      	ldr	r2, [pc, #168]	; (8008ed0 <prvAddNewTaskToReadyList+0xc8>)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e2c:	4b27      	ldr	r3, [pc, #156]	; (8008ecc <prvAddNewTaskToReadyList+0xc4>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d110      	bne.n	8008e56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e34:	f000 fc16 	bl	8009664 <prvInitialiseTaskLists>
 8008e38:	e00d      	b.n	8008e56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e3a:	4b26      	ldr	r3, [pc, #152]	; (8008ed4 <prvAddNewTaskToReadyList+0xcc>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d109      	bne.n	8008e56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e42:	4b23      	ldr	r3, [pc, #140]	; (8008ed0 <prvAddNewTaskToReadyList+0xc8>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d802      	bhi.n	8008e56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008e50:	4a1f      	ldr	r2, [pc, #124]	; (8008ed0 <prvAddNewTaskToReadyList+0xc8>)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008e56:	4b20      	ldr	r3, [pc, #128]	; (8008ed8 <prvAddNewTaskToReadyList+0xd0>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	4a1e      	ldr	r2, [pc, #120]	; (8008ed8 <prvAddNewTaskToReadyList+0xd0>)
 8008e5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008e60:	4b1d      	ldr	r3, [pc, #116]	; (8008ed8 <prvAddNewTaskToReadyList+0xd0>)
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e6c:	4b1b      	ldr	r3, [pc, #108]	; (8008edc <prvAddNewTaskToReadyList+0xd4>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d903      	bls.n	8008e7c <prvAddNewTaskToReadyList+0x74>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e78:	4a18      	ldr	r2, [pc, #96]	; (8008edc <prvAddNewTaskToReadyList+0xd4>)
 8008e7a:	6013      	str	r3, [r2, #0]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e80:	4613      	mov	r3, r2
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	4413      	add	r3, r2
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	4a15      	ldr	r2, [pc, #84]	; (8008ee0 <prvAddNewTaskToReadyList+0xd8>)
 8008e8a:	441a      	add	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	3304      	adds	r3, #4
 8008e90:	4619      	mov	r1, r3
 8008e92:	4610      	mov	r0, r2
 8008e94:	f7fe fe87 	bl	8007ba6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008e98:	f7ff f86c 	bl	8007f74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008e9c:	4b0d      	ldr	r3, [pc, #52]	; (8008ed4 <prvAddNewTaskToReadyList+0xcc>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d00e      	beq.n	8008ec2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008ea4:	4b0a      	ldr	r3, [pc, #40]	; (8008ed0 <prvAddNewTaskToReadyList+0xc8>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d207      	bcs.n	8008ec2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008eb2:	4b0c      	ldr	r3, [pc, #48]	; (8008ee4 <prvAddNewTaskToReadyList+0xdc>)
 8008eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eb8:	601a      	str	r2, [r3, #0]
 8008eba:	f3bf 8f4f 	dsb	sy
 8008ebe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ec2:	bf00      	nop
 8008ec4:	3708      	adds	r7, #8
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	24004918 	.word	0x24004918
 8008ed0:	24004444 	.word	0x24004444
 8008ed4:	24004924 	.word	0x24004924
 8008ed8:	24004934 	.word	0x24004934
 8008edc:	24004920 	.word	0x24004920
 8008ee0:	24004448 	.word	0x24004448
 8008ee4:	e000ed04 	.word	0xe000ed04

08008ee8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d017      	beq.n	8008f2a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008efa:	4b13      	ldr	r3, [pc, #76]	; (8008f48 <vTaskDelay+0x60>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00a      	beq.n	8008f18 <vTaskDelay+0x30>
	__asm volatile
 8008f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f06:	f383 8811 	msr	BASEPRI, r3
 8008f0a:	f3bf 8f6f 	isb	sy
 8008f0e:	f3bf 8f4f 	dsb	sy
 8008f12:	60bb      	str	r3, [r7, #8]
}
 8008f14:	bf00      	nop
 8008f16:	e7fe      	b.n	8008f16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008f18:	f000 f880 	bl	800901c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fcea 	bl	80098f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008f24:	f000 f888 	bl	8009038 <xTaskResumeAll>
 8008f28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d107      	bne.n	8008f40 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008f30:	4b06      	ldr	r3, [pc, #24]	; (8008f4c <vTaskDelay+0x64>)
 8008f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f36:	601a      	str	r2, [r3, #0]
 8008f38:	f3bf 8f4f 	dsb	sy
 8008f3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f40:	bf00      	nop
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	24004940 	.word	0x24004940
 8008f4c:	e000ed04 	.word	0xe000ed04

08008f50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b08a      	sub	sp, #40	; 0x28
 8008f54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008f56:	2300      	movs	r3, #0
 8008f58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008f5e:	463a      	mov	r2, r7
 8008f60:	1d39      	adds	r1, r7, #4
 8008f62:	f107 0308 	add.w	r3, r7, #8
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7fe fbd2 	bl	8007710 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008f6c:	6839      	ldr	r1, [r7, #0]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	9202      	str	r2, [sp, #8]
 8008f74:	9301      	str	r3, [sp, #4]
 8008f76:	2300      	movs	r3, #0
 8008f78:	9300      	str	r3, [sp, #0]
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	460a      	mov	r2, r1
 8008f7e:	4921      	ldr	r1, [pc, #132]	; (8009004 <vTaskStartScheduler+0xb4>)
 8008f80:	4821      	ldr	r0, [pc, #132]	; (8009008 <vTaskStartScheduler+0xb8>)
 8008f82:	f7ff fe0f 	bl	8008ba4 <xTaskCreateStatic>
 8008f86:	4603      	mov	r3, r0
 8008f88:	4a20      	ldr	r2, [pc, #128]	; (800900c <vTaskStartScheduler+0xbc>)
 8008f8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008f8c:	4b1f      	ldr	r3, [pc, #124]	; (800900c <vTaskStartScheduler+0xbc>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d002      	beq.n	8008f9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008f94:	2301      	movs	r3, #1
 8008f96:	617b      	str	r3, [r7, #20]
 8008f98:	e001      	b.n	8008f9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d102      	bne.n	8008faa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008fa4:	f000 fcfc 	bl	80099a0 <xTimerCreateTimerTask>
 8008fa8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d116      	bne.n	8008fde <vTaskStartScheduler+0x8e>
	__asm volatile
 8008fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb4:	f383 8811 	msr	BASEPRI, r3
 8008fb8:	f3bf 8f6f 	isb	sy
 8008fbc:	f3bf 8f4f 	dsb	sy
 8008fc0:	613b      	str	r3, [r7, #16]
}
 8008fc2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008fc4:	4b12      	ldr	r3, [pc, #72]	; (8009010 <vTaskStartScheduler+0xc0>)
 8008fc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008fcc:	4b11      	ldr	r3, [pc, #68]	; (8009014 <vTaskStartScheduler+0xc4>)
 8008fce:	2201      	movs	r2, #1
 8008fd0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008fd2:	4b11      	ldr	r3, [pc, #68]	; (8009018 <vTaskStartScheduler+0xc8>)
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008fd8:	f7fe fefa 	bl	8007dd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008fdc:	e00e      	b.n	8008ffc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fe4:	d10a      	bne.n	8008ffc <vTaskStartScheduler+0xac>
	__asm volatile
 8008fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fea:	f383 8811 	msr	BASEPRI, r3
 8008fee:	f3bf 8f6f 	isb	sy
 8008ff2:	f3bf 8f4f 	dsb	sy
 8008ff6:	60fb      	str	r3, [r7, #12]
}
 8008ff8:	bf00      	nop
 8008ffa:	e7fe      	b.n	8008ffa <vTaskStartScheduler+0xaa>
}
 8008ffc:	bf00      	nop
 8008ffe:	3718      	adds	r7, #24
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	0800a9a0 	.word	0x0800a9a0
 8009008:	08009635 	.word	0x08009635
 800900c:	2400493c 	.word	0x2400493c
 8009010:	24004938 	.word	0x24004938
 8009014:	24004924 	.word	0x24004924
 8009018:	2400491c 	.word	0x2400491c

0800901c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800901c:	b480      	push	{r7}
 800901e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009020:	4b04      	ldr	r3, [pc, #16]	; (8009034 <vTaskSuspendAll+0x18>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	3301      	adds	r3, #1
 8009026:	4a03      	ldr	r2, [pc, #12]	; (8009034 <vTaskSuspendAll+0x18>)
 8009028:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800902a:	bf00      	nop
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr
 8009034:	24004940 	.word	0x24004940

08009038 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800903e:	2300      	movs	r3, #0
 8009040:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009042:	2300      	movs	r3, #0
 8009044:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009046:	4b42      	ldr	r3, [pc, #264]	; (8009150 <xTaskResumeAll+0x118>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10a      	bne.n	8009064 <xTaskResumeAll+0x2c>
	__asm volatile
 800904e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009052:	f383 8811 	msr	BASEPRI, r3
 8009056:	f3bf 8f6f 	isb	sy
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	603b      	str	r3, [r7, #0]
}
 8009060:	bf00      	nop
 8009062:	e7fe      	b.n	8009062 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009064:	f7fe ff56 	bl	8007f14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009068:	4b39      	ldr	r3, [pc, #228]	; (8009150 <xTaskResumeAll+0x118>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	3b01      	subs	r3, #1
 800906e:	4a38      	ldr	r2, [pc, #224]	; (8009150 <xTaskResumeAll+0x118>)
 8009070:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009072:	4b37      	ldr	r3, [pc, #220]	; (8009150 <xTaskResumeAll+0x118>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d162      	bne.n	8009140 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800907a:	4b36      	ldr	r3, [pc, #216]	; (8009154 <xTaskResumeAll+0x11c>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d05e      	beq.n	8009140 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009082:	e02f      	b.n	80090e4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009084:	4b34      	ldr	r3, [pc, #208]	; (8009158 <xTaskResumeAll+0x120>)
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	3318      	adds	r3, #24
 8009090:	4618      	mov	r0, r3
 8009092:	f7fe fde5 	bl	8007c60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	3304      	adds	r3, #4
 800909a:	4618      	mov	r0, r3
 800909c:	f7fe fde0 	bl	8007c60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a4:	4b2d      	ldr	r3, [pc, #180]	; (800915c <xTaskResumeAll+0x124>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d903      	bls.n	80090b4 <xTaskResumeAll+0x7c>
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b0:	4a2a      	ldr	r2, [pc, #168]	; (800915c <xTaskResumeAll+0x124>)
 80090b2:	6013      	str	r3, [r2, #0]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b8:	4613      	mov	r3, r2
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	4413      	add	r3, r2
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	4a27      	ldr	r2, [pc, #156]	; (8009160 <xTaskResumeAll+0x128>)
 80090c2:	441a      	add	r2, r3
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	3304      	adds	r3, #4
 80090c8:	4619      	mov	r1, r3
 80090ca:	4610      	mov	r0, r2
 80090cc:	f7fe fd6b 	bl	8007ba6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090d4:	4b23      	ldr	r3, [pc, #140]	; (8009164 <xTaskResumeAll+0x12c>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090da:	429a      	cmp	r2, r3
 80090dc:	d302      	bcc.n	80090e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80090de:	4b22      	ldr	r3, [pc, #136]	; (8009168 <xTaskResumeAll+0x130>)
 80090e0:	2201      	movs	r2, #1
 80090e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090e4:	4b1c      	ldr	r3, [pc, #112]	; (8009158 <xTaskResumeAll+0x120>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d1cb      	bne.n	8009084 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d001      	beq.n	80090f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80090f2:	f000 fb55 	bl	80097a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80090f6:	4b1d      	ldr	r3, [pc, #116]	; (800916c <xTaskResumeAll+0x134>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d010      	beq.n	8009124 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009102:	f000 f847 	bl	8009194 <xTaskIncrementTick>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d002      	beq.n	8009112 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800910c:	4b16      	ldr	r3, [pc, #88]	; (8009168 <xTaskResumeAll+0x130>)
 800910e:	2201      	movs	r2, #1
 8009110:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	3b01      	subs	r3, #1
 8009116:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d1f1      	bne.n	8009102 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800911e:	4b13      	ldr	r3, [pc, #76]	; (800916c <xTaskResumeAll+0x134>)
 8009120:	2200      	movs	r2, #0
 8009122:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009124:	4b10      	ldr	r3, [pc, #64]	; (8009168 <xTaskResumeAll+0x130>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d009      	beq.n	8009140 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800912c:	2301      	movs	r3, #1
 800912e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009130:	4b0f      	ldr	r3, [pc, #60]	; (8009170 <xTaskResumeAll+0x138>)
 8009132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009136:	601a      	str	r2, [r3, #0]
 8009138:	f3bf 8f4f 	dsb	sy
 800913c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009140:	f7fe ff18 	bl	8007f74 <vPortExitCritical>

	return xAlreadyYielded;
 8009144:	68bb      	ldr	r3, [r7, #8]
}
 8009146:	4618      	mov	r0, r3
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	24004940 	.word	0x24004940
 8009154:	24004918 	.word	0x24004918
 8009158:	240048d8 	.word	0x240048d8
 800915c:	24004920 	.word	0x24004920
 8009160:	24004448 	.word	0x24004448
 8009164:	24004444 	.word	0x24004444
 8009168:	2400492c 	.word	0x2400492c
 800916c:	24004928 	.word	0x24004928
 8009170:	e000ed04 	.word	0xe000ed04

08009174 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800917a:	4b05      	ldr	r3, [pc, #20]	; (8009190 <xTaskGetTickCount+0x1c>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009180:	687b      	ldr	r3, [r7, #4]
}
 8009182:	4618      	mov	r0, r3
 8009184:	370c      	adds	r7, #12
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop
 8009190:	2400491c 	.word	0x2400491c

08009194 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b086      	sub	sp, #24
 8009198:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800919a:	2300      	movs	r3, #0
 800919c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800919e:	4b4f      	ldr	r3, [pc, #316]	; (80092dc <xTaskIncrementTick+0x148>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f040 808f 	bne.w	80092c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80091a8:	4b4d      	ldr	r3, [pc, #308]	; (80092e0 <xTaskIncrementTick+0x14c>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	3301      	adds	r3, #1
 80091ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80091b0:	4a4b      	ldr	r2, [pc, #300]	; (80092e0 <xTaskIncrementTick+0x14c>)
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d120      	bne.n	80091fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80091bc:	4b49      	ldr	r3, [pc, #292]	; (80092e4 <xTaskIncrementTick+0x150>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00a      	beq.n	80091dc <xTaskIncrementTick+0x48>
	__asm volatile
 80091c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ca:	f383 8811 	msr	BASEPRI, r3
 80091ce:	f3bf 8f6f 	isb	sy
 80091d2:	f3bf 8f4f 	dsb	sy
 80091d6:	603b      	str	r3, [r7, #0]
}
 80091d8:	bf00      	nop
 80091da:	e7fe      	b.n	80091da <xTaskIncrementTick+0x46>
 80091dc:	4b41      	ldr	r3, [pc, #260]	; (80092e4 <xTaskIncrementTick+0x150>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	60fb      	str	r3, [r7, #12]
 80091e2:	4b41      	ldr	r3, [pc, #260]	; (80092e8 <xTaskIncrementTick+0x154>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a3f      	ldr	r2, [pc, #252]	; (80092e4 <xTaskIncrementTick+0x150>)
 80091e8:	6013      	str	r3, [r2, #0]
 80091ea:	4a3f      	ldr	r2, [pc, #252]	; (80092e8 <xTaskIncrementTick+0x154>)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6013      	str	r3, [r2, #0]
 80091f0:	4b3e      	ldr	r3, [pc, #248]	; (80092ec <xTaskIncrementTick+0x158>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	3301      	adds	r3, #1
 80091f6:	4a3d      	ldr	r2, [pc, #244]	; (80092ec <xTaskIncrementTick+0x158>)
 80091f8:	6013      	str	r3, [r2, #0]
 80091fa:	f000 fad1 	bl	80097a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80091fe:	4b3c      	ldr	r3, [pc, #240]	; (80092f0 <xTaskIncrementTick+0x15c>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	693a      	ldr	r2, [r7, #16]
 8009204:	429a      	cmp	r2, r3
 8009206:	d349      	bcc.n	800929c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009208:	4b36      	ldr	r3, [pc, #216]	; (80092e4 <xTaskIncrementTick+0x150>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d104      	bne.n	800921c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009212:	4b37      	ldr	r3, [pc, #220]	; (80092f0 <xTaskIncrementTick+0x15c>)
 8009214:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009218:	601a      	str	r2, [r3, #0]
					break;
 800921a:	e03f      	b.n	800929c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800921c:	4b31      	ldr	r3, [pc, #196]	; (80092e4 <xTaskIncrementTick+0x150>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800922c:	693a      	ldr	r2, [r7, #16]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	429a      	cmp	r2, r3
 8009232:	d203      	bcs.n	800923c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009234:	4a2e      	ldr	r2, [pc, #184]	; (80092f0 <xTaskIncrementTick+0x15c>)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800923a:	e02f      	b.n	800929c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	3304      	adds	r3, #4
 8009240:	4618      	mov	r0, r3
 8009242:	f7fe fd0d 	bl	8007c60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800924a:	2b00      	cmp	r3, #0
 800924c:	d004      	beq.n	8009258 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	3318      	adds	r3, #24
 8009252:	4618      	mov	r0, r3
 8009254:	f7fe fd04 	bl	8007c60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800925c:	4b25      	ldr	r3, [pc, #148]	; (80092f4 <xTaskIncrementTick+0x160>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	429a      	cmp	r2, r3
 8009262:	d903      	bls.n	800926c <xTaskIncrementTick+0xd8>
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009268:	4a22      	ldr	r2, [pc, #136]	; (80092f4 <xTaskIncrementTick+0x160>)
 800926a:	6013      	str	r3, [r2, #0]
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009270:	4613      	mov	r3, r2
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	4413      	add	r3, r2
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	4a1f      	ldr	r2, [pc, #124]	; (80092f8 <xTaskIncrementTick+0x164>)
 800927a:	441a      	add	r2, r3
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	3304      	adds	r3, #4
 8009280:	4619      	mov	r1, r3
 8009282:	4610      	mov	r0, r2
 8009284:	f7fe fc8f 	bl	8007ba6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800928c:	4b1b      	ldr	r3, [pc, #108]	; (80092fc <xTaskIncrementTick+0x168>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009292:	429a      	cmp	r2, r3
 8009294:	d3b8      	bcc.n	8009208 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009296:	2301      	movs	r3, #1
 8009298:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800929a:	e7b5      	b.n	8009208 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800929c:	4b17      	ldr	r3, [pc, #92]	; (80092fc <xTaskIncrementTick+0x168>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092a2:	4915      	ldr	r1, [pc, #84]	; (80092f8 <xTaskIncrementTick+0x164>)
 80092a4:	4613      	mov	r3, r2
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	4413      	add	r3, r2
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	440b      	add	r3, r1
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d901      	bls.n	80092b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80092b4:	2301      	movs	r3, #1
 80092b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80092b8:	4b11      	ldr	r3, [pc, #68]	; (8009300 <xTaskIncrementTick+0x16c>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d007      	beq.n	80092d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80092c0:	2301      	movs	r3, #1
 80092c2:	617b      	str	r3, [r7, #20]
 80092c4:	e004      	b.n	80092d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80092c6:	4b0f      	ldr	r3, [pc, #60]	; (8009304 <xTaskIncrementTick+0x170>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	3301      	adds	r3, #1
 80092cc:	4a0d      	ldr	r2, [pc, #52]	; (8009304 <xTaskIncrementTick+0x170>)
 80092ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80092d0:	697b      	ldr	r3, [r7, #20]
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3718      	adds	r7, #24
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	24004940 	.word	0x24004940
 80092e0:	2400491c 	.word	0x2400491c
 80092e4:	240048d0 	.word	0x240048d0
 80092e8:	240048d4 	.word	0x240048d4
 80092ec:	24004930 	.word	0x24004930
 80092f0:	24004938 	.word	0x24004938
 80092f4:	24004920 	.word	0x24004920
 80092f8:	24004448 	.word	0x24004448
 80092fc:	24004444 	.word	0x24004444
 8009300:	2400492c 	.word	0x2400492c
 8009304:	24004928 	.word	0x24004928

08009308 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009308:	b480      	push	{r7}
 800930a:	b085      	sub	sp, #20
 800930c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800930e:	4b28      	ldr	r3, [pc, #160]	; (80093b0 <vTaskSwitchContext+0xa8>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d003      	beq.n	800931e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009316:	4b27      	ldr	r3, [pc, #156]	; (80093b4 <vTaskSwitchContext+0xac>)
 8009318:	2201      	movs	r2, #1
 800931a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800931c:	e041      	b.n	80093a2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800931e:	4b25      	ldr	r3, [pc, #148]	; (80093b4 <vTaskSwitchContext+0xac>)
 8009320:	2200      	movs	r2, #0
 8009322:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009324:	4b24      	ldr	r3, [pc, #144]	; (80093b8 <vTaskSwitchContext+0xb0>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	60fb      	str	r3, [r7, #12]
 800932a:	e010      	b.n	800934e <vTaskSwitchContext+0x46>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d10a      	bne.n	8009348 <vTaskSwitchContext+0x40>
	__asm volatile
 8009332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009336:	f383 8811 	msr	BASEPRI, r3
 800933a:	f3bf 8f6f 	isb	sy
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	607b      	str	r3, [r7, #4]
}
 8009344:	bf00      	nop
 8009346:	e7fe      	b.n	8009346 <vTaskSwitchContext+0x3e>
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	3b01      	subs	r3, #1
 800934c:	60fb      	str	r3, [r7, #12]
 800934e:	491b      	ldr	r1, [pc, #108]	; (80093bc <vTaskSwitchContext+0xb4>)
 8009350:	68fa      	ldr	r2, [r7, #12]
 8009352:	4613      	mov	r3, r2
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	4413      	add	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	440b      	add	r3, r1
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d0e4      	beq.n	800932c <vTaskSwitchContext+0x24>
 8009362:	68fa      	ldr	r2, [r7, #12]
 8009364:	4613      	mov	r3, r2
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	4413      	add	r3, r2
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	4a13      	ldr	r2, [pc, #76]	; (80093bc <vTaskSwitchContext+0xb4>)
 800936e:	4413      	add	r3, r2
 8009370:	60bb      	str	r3, [r7, #8]
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	685a      	ldr	r2, [r3, #4]
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	605a      	str	r2, [r3, #4]
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	685a      	ldr	r2, [r3, #4]
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	3308      	adds	r3, #8
 8009384:	429a      	cmp	r2, r3
 8009386:	d104      	bne.n	8009392 <vTaskSwitchContext+0x8a>
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	685a      	ldr	r2, [r3, #4]
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	605a      	str	r2, [r3, #4]
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	4a09      	ldr	r2, [pc, #36]	; (80093c0 <vTaskSwitchContext+0xb8>)
 800939a:	6013      	str	r3, [r2, #0]
 800939c:	4a06      	ldr	r2, [pc, #24]	; (80093b8 <vTaskSwitchContext+0xb0>)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6013      	str	r3, [r2, #0]
}
 80093a2:	bf00      	nop
 80093a4:	3714      	adds	r7, #20
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	24004940 	.word	0x24004940
 80093b4:	2400492c 	.word	0x2400492c
 80093b8:	24004920 	.word	0x24004920
 80093bc:	24004448 	.word	0x24004448
 80093c0:	24004444 	.word	0x24004444

080093c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d10a      	bne.n	80093ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80093d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d8:	f383 8811 	msr	BASEPRI, r3
 80093dc:	f3bf 8f6f 	isb	sy
 80093e0:	f3bf 8f4f 	dsb	sy
 80093e4:	60fb      	str	r3, [r7, #12]
}
 80093e6:	bf00      	nop
 80093e8:	e7fe      	b.n	80093e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80093ea:	4b07      	ldr	r3, [pc, #28]	; (8009408 <vTaskPlaceOnEventList+0x44>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	3318      	adds	r3, #24
 80093f0:	4619      	mov	r1, r3
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f7fe fbfb 	bl	8007bee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80093f8:	2101      	movs	r1, #1
 80093fa:	6838      	ldr	r0, [r7, #0]
 80093fc:	f000 fa7c 	bl	80098f8 <prvAddCurrentTaskToDelayedList>
}
 8009400:	bf00      	nop
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	24004444 	.word	0x24004444

0800940c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800940c:	b580      	push	{r7, lr}
 800940e:	b086      	sub	sp, #24
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d10a      	bne.n	8009434 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800941e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009422:	f383 8811 	msr	BASEPRI, r3
 8009426:	f3bf 8f6f 	isb	sy
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	617b      	str	r3, [r7, #20]
}
 8009430:	bf00      	nop
 8009432:	e7fe      	b.n	8009432 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009434:	4b0a      	ldr	r3, [pc, #40]	; (8009460 <vTaskPlaceOnEventListRestricted+0x54>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	3318      	adds	r3, #24
 800943a:	4619      	mov	r1, r3
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f7fe fbb2 	bl	8007ba6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d002      	beq.n	800944e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009448:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800944c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800944e:	6879      	ldr	r1, [r7, #4]
 8009450:	68b8      	ldr	r0, [r7, #8]
 8009452:	f000 fa51 	bl	80098f8 <prvAddCurrentTaskToDelayedList>
	}
 8009456:	bf00      	nop
 8009458:	3718      	adds	r7, #24
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	24004444 	.word	0x24004444

08009464 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b086      	sub	sp, #24
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d10a      	bne.n	8009490 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800947a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947e:	f383 8811 	msr	BASEPRI, r3
 8009482:	f3bf 8f6f 	isb	sy
 8009486:	f3bf 8f4f 	dsb	sy
 800948a:	60fb      	str	r3, [r7, #12]
}
 800948c:	bf00      	nop
 800948e:	e7fe      	b.n	800948e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	3318      	adds	r3, #24
 8009494:	4618      	mov	r0, r3
 8009496:	f7fe fbe3 	bl	8007c60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800949a:	4b1e      	ldr	r3, [pc, #120]	; (8009514 <xTaskRemoveFromEventList+0xb0>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d11d      	bne.n	80094de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	3304      	adds	r3, #4
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fe fbda 	bl	8007c60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b0:	4b19      	ldr	r3, [pc, #100]	; (8009518 <xTaskRemoveFromEventList+0xb4>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d903      	bls.n	80094c0 <xTaskRemoveFromEventList+0x5c>
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094bc:	4a16      	ldr	r2, [pc, #88]	; (8009518 <xTaskRemoveFromEventList+0xb4>)
 80094be:	6013      	str	r3, [r2, #0]
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094c4:	4613      	mov	r3, r2
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	4413      	add	r3, r2
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	4a13      	ldr	r2, [pc, #76]	; (800951c <xTaskRemoveFromEventList+0xb8>)
 80094ce:	441a      	add	r2, r3
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	3304      	adds	r3, #4
 80094d4:	4619      	mov	r1, r3
 80094d6:	4610      	mov	r0, r2
 80094d8:	f7fe fb65 	bl	8007ba6 <vListInsertEnd>
 80094dc:	e005      	b.n	80094ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	3318      	adds	r3, #24
 80094e2:	4619      	mov	r1, r3
 80094e4:	480e      	ldr	r0, [pc, #56]	; (8009520 <xTaskRemoveFromEventList+0xbc>)
 80094e6:	f7fe fb5e 	bl	8007ba6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ee:	4b0d      	ldr	r3, [pc, #52]	; (8009524 <xTaskRemoveFromEventList+0xc0>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d905      	bls.n	8009504 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80094f8:	2301      	movs	r3, #1
 80094fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80094fc:	4b0a      	ldr	r3, [pc, #40]	; (8009528 <xTaskRemoveFromEventList+0xc4>)
 80094fe:	2201      	movs	r2, #1
 8009500:	601a      	str	r2, [r3, #0]
 8009502:	e001      	b.n	8009508 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009504:	2300      	movs	r3, #0
 8009506:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009508:	697b      	ldr	r3, [r7, #20]
}
 800950a:	4618      	mov	r0, r3
 800950c:	3718      	adds	r7, #24
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
 8009512:	bf00      	nop
 8009514:	24004940 	.word	0x24004940
 8009518:	24004920 	.word	0x24004920
 800951c:	24004448 	.word	0x24004448
 8009520:	240048d8 	.word	0x240048d8
 8009524:	24004444 	.word	0x24004444
 8009528:	2400492c 	.word	0x2400492c

0800952c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009534:	4b06      	ldr	r3, [pc, #24]	; (8009550 <vTaskInternalSetTimeOutState+0x24>)
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800953c:	4b05      	ldr	r3, [pc, #20]	; (8009554 <vTaskInternalSetTimeOutState+0x28>)
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	605a      	str	r2, [r3, #4]
}
 8009544:	bf00      	nop
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr
 8009550:	24004930 	.word	0x24004930
 8009554:	2400491c 	.word	0x2400491c

08009558 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b088      	sub	sp, #32
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10a      	bne.n	800957e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956c:	f383 8811 	msr	BASEPRI, r3
 8009570:	f3bf 8f6f 	isb	sy
 8009574:	f3bf 8f4f 	dsb	sy
 8009578:	613b      	str	r3, [r7, #16]
}
 800957a:	bf00      	nop
 800957c:	e7fe      	b.n	800957c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d10a      	bne.n	800959a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009588:	f383 8811 	msr	BASEPRI, r3
 800958c:	f3bf 8f6f 	isb	sy
 8009590:	f3bf 8f4f 	dsb	sy
 8009594:	60fb      	str	r3, [r7, #12]
}
 8009596:	bf00      	nop
 8009598:	e7fe      	b.n	8009598 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800959a:	f7fe fcbb 	bl	8007f14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800959e:	4b1d      	ldr	r3, [pc, #116]	; (8009614 <xTaskCheckForTimeOut+0xbc>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	69ba      	ldr	r2, [r7, #24]
 80095aa:	1ad3      	subs	r3, r2, r3
 80095ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095b6:	d102      	bne.n	80095be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80095b8:	2300      	movs	r3, #0
 80095ba:	61fb      	str	r3, [r7, #28]
 80095bc:	e023      	b.n	8009606 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	4b15      	ldr	r3, [pc, #84]	; (8009618 <xTaskCheckForTimeOut+0xc0>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d007      	beq.n	80095da <xTaskCheckForTimeOut+0x82>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	69ba      	ldr	r2, [r7, #24]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d302      	bcc.n	80095da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80095d4:	2301      	movs	r3, #1
 80095d6:	61fb      	str	r3, [r7, #28]
 80095d8:	e015      	b.n	8009606 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	697a      	ldr	r2, [r7, #20]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d20b      	bcs.n	80095fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	1ad2      	subs	r2, r2, r3
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f7ff ff9b 	bl	800952c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80095f6:	2300      	movs	r3, #0
 80095f8:	61fb      	str	r3, [r7, #28]
 80095fa:	e004      	b.n	8009606 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	2200      	movs	r2, #0
 8009600:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009602:	2301      	movs	r3, #1
 8009604:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009606:	f7fe fcb5 	bl	8007f74 <vPortExitCritical>

	return xReturn;
 800960a:	69fb      	ldr	r3, [r7, #28]
}
 800960c:	4618      	mov	r0, r3
 800960e:	3720      	adds	r7, #32
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	2400491c 	.word	0x2400491c
 8009618:	24004930 	.word	0x24004930

0800961c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800961c:	b480      	push	{r7}
 800961e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009620:	4b03      	ldr	r3, [pc, #12]	; (8009630 <vTaskMissedYield+0x14>)
 8009622:	2201      	movs	r2, #1
 8009624:	601a      	str	r2, [r3, #0]
}
 8009626:	bf00      	nop
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr
 8009630:	2400492c 	.word	0x2400492c

08009634 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800963c:	f000 f852 	bl	80096e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009640:	4b06      	ldr	r3, [pc, #24]	; (800965c <prvIdleTask+0x28>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2b01      	cmp	r3, #1
 8009646:	d9f9      	bls.n	800963c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009648:	4b05      	ldr	r3, [pc, #20]	; (8009660 <prvIdleTask+0x2c>)
 800964a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800964e:	601a      	str	r2, [r3, #0]
 8009650:	f3bf 8f4f 	dsb	sy
 8009654:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009658:	e7f0      	b.n	800963c <prvIdleTask+0x8>
 800965a:	bf00      	nop
 800965c:	24004448 	.word	0x24004448
 8009660:	e000ed04 	.word	0xe000ed04

08009664 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800966a:	2300      	movs	r3, #0
 800966c:	607b      	str	r3, [r7, #4]
 800966e:	e00c      	b.n	800968a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	4613      	mov	r3, r2
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	4413      	add	r3, r2
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	4a12      	ldr	r2, [pc, #72]	; (80096c4 <prvInitialiseTaskLists+0x60>)
 800967c:	4413      	add	r3, r2
 800967e:	4618      	mov	r0, r3
 8009680:	f7fe fa64 	bl	8007b4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	3301      	adds	r3, #1
 8009688:	607b      	str	r3, [r7, #4]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2b37      	cmp	r3, #55	; 0x37
 800968e:	d9ef      	bls.n	8009670 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009690:	480d      	ldr	r0, [pc, #52]	; (80096c8 <prvInitialiseTaskLists+0x64>)
 8009692:	f7fe fa5b 	bl	8007b4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009696:	480d      	ldr	r0, [pc, #52]	; (80096cc <prvInitialiseTaskLists+0x68>)
 8009698:	f7fe fa58 	bl	8007b4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800969c:	480c      	ldr	r0, [pc, #48]	; (80096d0 <prvInitialiseTaskLists+0x6c>)
 800969e:	f7fe fa55 	bl	8007b4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80096a2:	480c      	ldr	r0, [pc, #48]	; (80096d4 <prvInitialiseTaskLists+0x70>)
 80096a4:	f7fe fa52 	bl	8007b4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80096a8:	480b      	ldr	r0, [pc, #44]	; (80096d8 <prvInitialiseTaskLists+0x74>)
 80096aa:	f7fe fa4f 	bl	8007b4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80096ae:	4b0b      	ldr	r3, [pc, #44]	; (80096dc <prvInitialiseTaskLists+0x78>)
 80096b0:	4a05      	ldr	r2, [pc, #20]	; (80096c8 <prvInitialiseTaskLists+0x64>)
 80096b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80096b4:	4b0a      	ldr	r3, [pc, #40]	; (80096e0 <prvInitialiseTaskLists+0x7c>)
 80096b6:	4a05      	ldr	r2, [pc, #20]	; (80096cc <prvInitialiseTaskLists+0x68>)
 80096b8:	601a      	str	r2, [r3, #0]
}
 80096ba:	bf00      	nop
 80096bc:	3708      	adds	r7, #8
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	24004448 	.word	0x24004448
 80096c8:	240048a8 	.word	0x240048a8
 80096cc:	240048bc 	.word	0x240048bc
 80096d0:	240048d8 	.word	0x240048d8
 80096d4:	240048ec 	.word	0x240048ec
 80096d8:	24004904 	.word	0x24004904
 80096dc:	240048d0 	.word	0x240048d0
 80096e0:	240048d4 	.word	0x240048d4

080096e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096ea:	e019      	b.n	8009720 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80096ec:	f7fe fc12 	bl	8007f14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096f0:	4b10      	ldr	r3, [pc, #64]	; (8009734 <prvCheckTasksWaitingTermination+0x50>)
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	3304      	adds	r3, #4
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7fe faaf 	bl	8007c60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009702:	4b0d      	ldr	r3, [pc, #52]	; (8009738 <prvCheckTasksWaitingTermination+0x54>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	3b01      	subs	r3, #1
 8009708:	4a0b      	ldr	r2, [pc, #44]	; (8009738 <prvCheckTasksWaitingTermination+0x54>)
 800970a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800970c:	4b0b      	ldr	r3, [pc, #44]	; (800973c <prvCheckTasksWaitingTermination+0x58>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	3b01      	subs	r3, #1
 8009712:	4a0a      	ldr	r2, [pc, #40]	; (800973c <prvCheckTasksWaitingTermination+0x58>)
 8009714:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009716:	f7fe fc2d 	bl	8007f74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 f810 	bl	8009740 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009720:	4b06      	ldr	r3, [pc, #24]	; (800973c <prvCheckTasksWaitingTermination+0x58>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1e1      	bne.n	80096ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009728:	bf00      	nop
 800972a:	bf00      	nop
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	240048ec 	.word	0x240048ec
 8009738:	24004918 	.word	0x24004918
 800973c:	24004900 	.word	0x24004900

08009740 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800974e:	2b00      	cmp	r3, #0
 8009750:	d108      	bne.n	8009764 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009756:	4618      	mov	r0, r3
 8009758:	f7fe f8da 	bl	8007910 <vPortFree>
				vPortFree( pxTCB );
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f7fe f8d7 	bl	8007910 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009762:	e018      	b.n	8009796 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800976a:	2b01      	cmp	r3, #1
 800976c:	d103      	bne.n	8009776 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7fe f8ce 	bl	8007910 <vPortFree>
	}
 8009774:	e00f      	b.n	8009796 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800977c:	2b02      	cmp	r3, #2
 800977e:	d00a      	beq.n	8009796 <prvDeleteTCB+0x56>
	__asm volatile
 8009780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	60fb      	str	r3, [r7, #12]
}
 8009792:	bf00      	nop
 8009794:	e7fe      	b.n	8009794 <prvDeleteTCB+0x54>
	}
 8009796:	bf00      	nop
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
	...

080097a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80097a0:	b480      	push	{r7}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097a6:	4b0c      	ldr	r3, [pc, #48]	; (80097d8 <prvResetNextTaskUnblockTime+0x38>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d104      	bne.n	80097ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80097b0:	4b0a      	ldr	r3, [pc, #40]	; (80097dc <prvResetNextTaskUnblockTime+0x3c>)
 80097b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80097b8:	e008      	b.n	80097cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097ba:	4b07      	ldr	r3, [pc, #28]	; (80097d8 <prvResetNextTaskUnblockTime+0x38>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	4a04      	ldr	r2, [pc, #16]	; (80097dc <prvResetNextTaskUnblockTime+0x3c>)
 80097ca:	6013      	str	r3, [r2, #0]
}
 80097cc:	bf00      	nop
 80097ce:	370c      	adds	r7, #12
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr
 80097d8:	240048d0 	.word	0x240048d0
 80097dc:	24004938 	.word	0x24004938

080097e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80097e6:	4b0b      	ldr	r3, [pc, #44]	; (8009814 <xTaskGetSchedulerState+0x34>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d102      	bne.n	80097f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80097ee:	2301      	movs	r3, #1
 80097f0:	607b      	str	r3, [r7, #4]
 80097f2:	e008      	b.n	8009806 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097f4:	4b08      	ldr	r3, [pc, #32]	; (8009818 <xTaskGetSchedulerState+0x38>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d102      	bne.n	8009802 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80097fc:	2302      	movs	r3, #2
 80097fe:	607b      	str	r3, [r7, #4]
 8009800:	e001      	b.n	8009806 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009802:	2300      	movs	r3, #0
 8009804:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009806:	687b      	ldr	r3, [r7, #4]
	}
 8009808:	4618      	mov	r0, r3
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr
 8009814:	24004924 	.word	0x24004924
 8009818:	24004940 	.word	0x24004940

0800981c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800981c:	b580      	push	{r7, lr}
 800981e:	b086      	sub	sp, #24
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009828:	2300      	movs	r3, #0
 800982a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d056      	beq.n	80098e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009832:	4b2e      	ldr	r3, [pc, #184]	; (80098ec <xTaskPriorityDisinherit+0xd0>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	693a      	ldr	r2, [r7, #16]
 8009838:	429a      	cmp	r2, r3
 800983a:	d00a      	beq.n	8009852 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800983c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009840:	f383 8811 	msr	BASEPRI, r3
 8009844:	f3bf 8f6f 	isb	sy
 8009848:	f3bf 8f4f 	dsb	sy
 800984c:	60fb      	str	r3, [r7, #12]
}
 800984e:	bf00      	nop
 8009850:	e7fe      	b.n	8009850 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009856:	2b00      	cmp	r3, #0
 8009858:	d10a      	bne.n	8009870 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800985a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985e:	f383 8811 	msr	BASEPRI, r3
 8009862:	f3bf 8f6f 	isb	sy
 8009866:	f3bf 8f4f 	dsb	sy
 800986a:	60bb      	str	r3, [r7, #8]
}
 800986c:	bf00      	nop
 800986e:	e7fe      	b.n	800986e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009874:	1e5a      	subs	r2, r3, #1
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009882:	429a      	cmp	r2, r3
 8009884:	d02c      	beq.n	80098e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800988a:	2b00      	cmp	r3, #0
 800988c:	d128      	bne.n	80098e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	3304      	adds	r3, #4
 8009892:	4618      	mov	r0, r3
 8009894:	f7fe f9e4 	bl	8007c60 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098b0:	4b0f      	ldr	r3, [pc, #60]	; (80098f0 <xTaskPriorityDisinherit+0xd4>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d903      	bls.n	80098c0 <xTaskPriorityDisinherit+0xa4>
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098bc:	4a0c      	ldr	r2, [pc, #48]	; (80098f0 <xTaskPriorityDisinherit+0xd4>)
 80098be:	6013      	str	r3, [r2, #0]
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098c4:	4613      	mov	r3, r2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	4413      	add	r3, r2
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	4a09      	ldr	r2, [pc, #36]	; (80098f4 <xTaskPriorityDisinherit+0xd8>)
 80098ce:	441a      	add	r2, r3
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	3304      	adds	r3, #4
 80098d4:	4619      	mov	r1, r3
 80098d6:	4610      	mov	r0, r2
 80098d8:	f7fe f965 	bl	8007ba6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80098dc:	2301      	movs	r3, #1
 80098de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80098e0:	697b      	ldr	r3, [r7, #20]
	}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3718      	adds	r7, #24
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	24004444 	.word	0x24004444
 80098f0:	24004920 	.word	0x24004920
 80098f4:	24004448 	.word	0x24004448

080098f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009902:	4b21      	ldr	r3, [pc, #132]	; (8009988 <prvAddCurrentTaskToDelayedList+0x90>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009908:	4b20      	ldr	r3, [pc, #128]	; (800998c <prvAddCurrentTaskToDelayedList+0x94>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	3304      	adds	r3, #4
 800990e:	4618      	mov	r0, r3
 8009910:	f7fe f9a6 	bl	8007c60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800991a:	d10a      	bne.n	8009932 <prvAddCurrentTaskToDelayedList+0x3a>
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d007      	beq.n	8009932 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009922:	4b1a      	ldr	r3, [pc, #104]	; (800998c <prvAddCurrentTaskToDelayedList+0x94>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	3304      	adds	r3, #4
 8009928:	4619      	mov	r1, r3
 800992a:	4819      	ldr	r0, [pc, #100]	; (8009990 <prvAddCurrentTaskToDelayedList+0x98>)
 800992c:	f7fe f93b 	bl	8007ba6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009930:	e026      	b.n	8009980 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009932:	68fa      	ldr	r2, [r7, #12]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	4413      	add	r3, r2
 8009938:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800993a:	4b14      	ldr	r3, [pc, #80]	; (800998c <prvAddCurrentTaskToDelayedList+0x94>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	68ba      	ldr	r2, [r7, #8]
 8009940:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009942:	68ba      	ldr	r2, [r7, #8]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	429a      	cmp	r2, r3
 8009948:	d209      	bcs.n	800995e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800994a:	4b12      	ldr	r3, [pc, #72]	; (8009994 <prvAddCurrentTaskToDelayedList+0x9c>)
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	4b0f      	ldr	r3, [pc, #60]	; (800998c <prvAddCurrentTaskToDelayedList+0x94>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	3304      	adds	r3, #4
 8009954:	4619      	mov	r1, r3
 8009956:	4610      	mov	r0, r2
 8009958:	f7fe f949 	bl	8007bee <vListInsert>
}
 800995c:	e010      	b.n	8009980 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800995e:	4b0e      	ldr	r3, [pc, #56]	; (8009998 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	4b0a      	ldr	r3, [pc, #40]	; (800998c <prvAddCurrentTaskToDelayedList+0x94>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	3304      	adds	r3, #4
 8009968:	4619      	mov	r1, r3
 800996a:	4610      	mov	r0, r2
 800996c:	f7fe f93f 	bl	8007bee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009970:	4b0a      	ldr	r3, [pc, #40]	; (800999c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	68ba      	ldr	r2, [r7, #8]
 8009976:	429a      	cmp	r2, r3
 8009978:	d202      	bcs.n	8009980 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800997a:	4a08      	ldr	r2, [pc, #32]	; (800999c <prvAddCurrentTaskToDelayedList+0xa4>)
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	6013      	str	r3, [r2, #0]
}
 8009980:	bf00      	nop
 8009982:	3710      	adds	r7, #16
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	2400491c 	.word	0x2400491c
 800998c:	24004444 	.word	0x24004444
 8009990:	24004904 	.word	0x24004904
 8009994:	240048d4 	.word	0x240048d4
 8009998:	240048d0 	.word	0x240048d0
 800999c:	24004938 	.word	0x24004938

080099a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b08a      	sub	sp, #40	; 0x28
 80099a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80099a6:	2300      	movs	r3, #0
 80099a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80099aa:	f000 fb07 	bl	8009fbc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80099ae:	4b1c      	ldr	r3, [pc, #112]	; (8009a20 <xTimerCreateTimerTask+0x80>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d021      	beq.n	80099fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80099b6:	2300      	movs	r3, #0
 80099b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80099ba:	2300      	movs	r3, #0
 80099bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80099be:	1d3a      	adds	r2, r7, #4
 80099c0:	f107 0108 	add.w	r1, r7, #8
 80099c4:	f107 030c 	add.w	r3, r7, #12
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7fd febb 	bl	8007744 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80099ce:	6879      	ldr	r1, [r7, #4]
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	68fa      	ldr	r2, [r7, #12]
 80099d4:	9202      	str	r2, [sp, #8]
 80099d6:	9301      	str	r3, [sp, #4]
 80099d8:	2302      	movs	r3, #2
 80099da:	9300      	str	r3, [sp, #0]
 80099dc:	2300      	movs	r3, #0
 80099de:	460a      	mov	r2, r1
 80099e0:	4910      	ldr	r1, [pc, #64]	; (8009a24 <xTimerCreateTimerTask+0x84>)
 80099e2:	4811      	ldr	r0, [pc, #68]	; (8009a28 <xTimerCreateTimerTask+0x88>)
 80099e4:	f7ff f8de 	bl	8008ba4 <xTaskCreateStatic>
 80099e8:	4603      	mov	r3, r0
 80099ea:	4a10      	ldr	r2, [pc, #64]	; (8009a2c <xTimerCreateTimerTask+0x8c>)
 80099ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80099ee:	4b0f      	ldr	r3, [pc, #60]	; (8009a2c <xTimerCreateTimerTask+0x8c>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d001      	beq.n	80099fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80099f6:	2301      	movs	r3, #1
 80099f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d10a      	bne.n	8009a16 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a04:	f383 8811 	msr	BASEPRI, r3
 8009a08:	f3bf 8f6f 	isb	sy
 8009a0c:	f3bf 8f4f 	dsb	sy
 8009a10:	613b      	str	r3, [r7, #16]
}
 8009a12:	bf00      	nop
 8009a14:	e7fe      	b.n	8009a14 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009a16:	697b      	ldr	r3, [r7, #20]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3718      	adds	r7, #24
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	24004974 	.word	0x24004974
 8009a24:	0800a9a8 	.word	0x0800a9a8
 8009a28:	08009b65 	.word	0x08009b65
 8009a2c:	24004978 	.word	0x24004978

08009a30 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b08a      	sub	sp, #40	; 0x28
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	607a      	str	r2, [r7, #4]
 8009a3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d10a      	bne.n	8009a5e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4c:	f383 8811 	msr	BASEPRI, r3
 8009a50:	f3bf 8f6f 	isb	sy
 8009a54:	f3bf 8f4f 	dsb	sy
 8009a58:	623b      	str	r3, [r7, #32]
}
 8009a5a:	bf00      	nop
 8009a5c:	e7fe      	b.n	8009a5c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009a5e:	4b1a      	ldr	r3, [pc, #104]	; (8009ac8 <xTimerGenericCommand+0x98>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d02a      	beq.n	8009abc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	2b05      	cmp	r3, #5
 8009a76:	dc18      	bgt.n	8009aaa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009a78:	f7ff feb2 	bl	80097e0 <xTaskGetSchedulerState>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b02      	cmp	r3, #2
 8009a80:	d109      	bne.n	8009a96 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009a82:	4b11      	ldr	r3, [pc, #68]	; (8009ac8 <xTimerGenericCommand+0x98>)
 8009a84:	6818      	ldr	r0, [r3, #0]
 8009a86:	f107 0110 	add.w	r1, r7, #16
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a8e:	f7fe fca1 	bl	80083d4 <xQueueGenericSend>
 8009a92:	6278      	str	r0, [r7, #36]	; 0x24
 8009a94:	e012      	b.n	8009abc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009a96:	4b0c      	ldr	r3, [pc, #48]	; (8009ac8 <xTimerGenericCommand+0x98>)
 8009a98:	6818      	ldr	r0, [r3, #0]
 8009a9a:	f107 0110 	add.w	r1, r7, #16
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f7fe fc97 	bl	80083d4 <xQueueGenericSend>
 8009aa6:	6278      	str	r0, [r7, #36]	; 0x24
 8009aa8:	e008      	b.n	8009abc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009aaa:	4b07      	ldr	r3, [pc, #28]	; (8009ac8 <xTimerGenericCommand+0x98>)
 8009aac:	6818      	ldr	r0, [r3, #0]
 8009aae:	f107 0110 	add.w	r1, r7, #16
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	683a      	ldr	r2, [r7, #0]
 8009ab6:	f7fe fd8b 	bl	80085d0 <xQueueGenericSendFromISR>
 8009aba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3728      	adds	r7, #40	; 0x28
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	24004974 	.word	0x24004974

08009acc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b088      	sub	sp, #32
 8009ad0:	af02      	add	r7, sp, #8
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ad6:	4b22      	ldr	r3, [pc, #136]	; (8009b60 <prvProcessExpiredTimer+0x94>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	3304      	adds	r3, #4
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7fe f8bb 	bl	8007c60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009af0:	f003 0304 	and.w	r3, r3, #4
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d022      	beq.n	8009b3e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	699a      	ldr	r2, [r3, #24]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	18d1      	adds	r1, r2, r3
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	683a      	ldr	r2, [r7, #0]
 8009b04:	6978      	ldr	r0, [r7, #20]
 8009b06:	f000 f8d1 	bl	8009cac <prvInsertTimerInActiveList>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d01f      	beq.n	8009b50 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b10:	2300      	movs	r3, #0
 8009b12:	9300      	str	r3, [sp, #0]
 8009b14:	2300      	movs	r3, #0
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	2100      	movs	r1, #0
 8009b1a:	6978      	ldr	r0, [r7, #20]
 8009b1c:	f7ff ff88 	bl	8009a30 <xTimerGenericCommand>
 8009b20:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d113      	bne.n	8009b50 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2c:	f383 8811 	msr	BASEPRI, r3
 8009b30:	f3bf 8f6f 	isb	sy
 8009b34:	f3bf 8f4f 	dsb	sy
 8009b38:	60fb      	str	r3, [r7, #12]
}
 8009b3a:	bf00      	nop
 8009b3c:	e7fe      	b.n	8009b3c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b44:	f023 0301 	bic.w	r3, r3, #1
 8009b48:	b2da      	uxtb	r2, r3
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	6a1b      	ldr	r3, [r3, #32]
 8009b54:	6978      	ldr	r0, [r7, #20]
 8009b56:	4798      	blx	r3
}
 8009b58:	bf00      	nop
 8009b5a:	3718      	adds	r7, #24
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	2400496c 	.word	0x2400496c

08009b64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b6c:	f107 0308 	add.w	r3, r7, #8
 8009b70:	4618      	mov	r0, r3
 8009b72:	f000 f857 	bl	8009c24 <prvGetNextExpireTime>
 8009b76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	68f8      	ldr	r0, [r7, #12]
 8009b7e:	f000 f803 	bl	8009b88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009b82:	f000 f8d5 	bl	8009d30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b86:	e7f1      	b.n	8009b6c <prvTimerTask+0x8>

08009b88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009b92:	f7ff fa43 	bl	800901c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b96:	f107 0308 	add.w	r3, r7, #8
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f000 f866 	bl	8009c6c <prvSampleTimeNow>
 8009ba0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d130      	bne.n	8009c0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d10a      	bne.n	8009bc4 <prvProcessTimerOrBlockTask+0x3c>
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d806      	bhi.n	8009bc4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009bb6:	f7ff fa3f 	bl	8009038 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009bba:	68f9      	ldr	r1, [r7, #12]
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f7ff ff85 	bl	8009acc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009bc2:	e024      	b.n	8009c0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d008      	beq.n	8009bdc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009bca:	4b13      	ldr	r3, [pc, #76]	; (8009c18 <prvProcessTimerOrBlockTask+0x90>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d101      	bne.n	8009bd8 <prvProcessTimerOrBlockTask+0x50>
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	e000      	b.n	8009bda <prvProcessTimerOrBlockTask+0x52>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009bdc:	4b0f      	ldr	r3, [pc, #60]	; (8009c1c <prvProcessTimerOrBlockTask+0x94>)
 8009bde:	6818      	ldr	r0, [r3, #0]
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	1ad3      	subs	r3, r2, r3
 8009be6:	683a      	ldr	r2, [r7, #0]
 8009be8:	4619      	mov	r1, r3
 8009bea:	f7fe ffa7 	bl	8008b3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009bee:	f7ff fa23 	bl	8009038 <xTaskResumeAll>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d10a      	bne.n	8009c0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009bf8:	4b09      	ldr	r3, [pc, #36]	; (8009c20 <prvProcessTimerOrBlockTask+0x98>)
 8009bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bfe:	601a      	str	r2, [r3, #0]
 8009c00:	f3bf 8f4f 	dsb	sy
 8009c04:	f3bf 8f6f 	isb	sy
}
 8009c08:	e001      	b.n	8009c0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009c0a:	f7ff fa15 	bl	8009038 <xTaskResumeAll>
}
 8009c0e:	bf00      	nop
 8009c10:	3710      	adds	r7, #16
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	24004970 	.word	0x24004970
 8009c1c:	24004974 	.word	0x24004974
 8009c20:	e000ed04 	.word	0xe000ed04

08009c24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009c24:	b480      	push	{r7}
 8009c26:	b085      	sub	sp, #20
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009c2c:	4b0e      	ldr	r3, [pc, #56]	; (8009c68 <prvGetNextExpireTime+0x44>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d101      	bne.n	8009c3a <prvGetNextExpireTime+0x16>
 8009c36:	2201      	movs	r2, #1
 8009c38:	e000      	b.n	8009c3c <prvGetNextExpireTime+0x18>
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d105      	bne.n	8009c54 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c48:	4b07      	ldr	r3, [pc, #28]	; (8009c68 <prvGetNextExpireTime+0x44>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	68db      	ldr	r3, [r3, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	60fb      	str	r3, [r7, #12]
 8009c52:	e001      	b.n	8009c58 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009c54:	2300      	movs	r3, #0
 8009c56:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009c58:	68fb      	ldr	r3, [r7, #12]
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3714      	adds	r7, #20
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr
 8009c66:	bf00      	nop
 8009c68:	2400496c 	.word	0x2400496c

08009c6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009c74:	f7ff fa7e 	bl	8009174 <xTaskGetTickCount>
 8009c78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009c7a:	4b0b      	ldr	r3, [pc, #44]	; (8009ca8 <prvSampleTimeNow+0x3c>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	68fa      	ldr	r2, [r7, #12]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d205      	bcs.n	8009c90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009c84:	f000 f936 	bl	8009ef4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	601a      	str	r2, [r3, #0]
 8009c8e:	e002      	b.n	8009c96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009c96:	4a04      	ldr	r2, [pc, #16]	; (8009ca8 <prvSampleTimeNow+0x3c>)
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3710      	adds	r7, #16
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	2400497c 	.word	0x2400497c

08009cac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b086      	sub	sp, #24
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	607a      	str	r2, [r7, #4]
 8009cb8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	68ba      	ldr	r2, [r7, #8]
 8009cc2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	68fa      	ldr	r2, [r7, #12]
 8009cc8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009cca:	68ba      	ldr	r2, [r7, #8]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d812      	bhi.n	8009cf8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	1ad2      	subs	r2, r2, r3
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	699b      	ldr	r3, [r3, #24]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d302      	bcc.n	8009ce6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	617b      	str	r3, [r7, #20]
 8009ce4:	e01b      	b.n	8009d1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009ce6:	4b10      	ldr	r3, [pc, #64]	; (8009d28 <prvInsertTimerInActiveList+0x7c>)
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	3304      	adds	r3, #4
 8009cee:	4619      	mov	r1, r3
 8009cf0:	4610      	mov	r0, r2
 8009cf2:	f7fd ff7c 	bl	8007bee <vListInsert>
 8009cf6:	e012      	b.n	8009d1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d206      	bcs.n	8009d0e <prvInsertTimerInActiveList+0x62>
 8009d00:	68ba      	ldr	r2, [r7, #8]
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d302      	bcc.n	8009d0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	617b      	str	r3, [r7, #20]
 8009d0c:	e007      	b.n	8009d1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d0e:	4b07      	ldr	r3, [pc, #28]	; (8009d2c <prvInsertTimerInActiveList+0x80>)
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	3304      	adds	r3, #4
 8009d16:	4619      	mov	r1, r3
 8009d18:	4610      	mov	r0, r2
 8009d1a:	f7fd ff68 	bl	8007bee <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009d1e:	697b      	ldr	r3, [r7, #20]
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3718      	adds	r7, #24
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	24004970 	.word	0x24004970
 8009d2c:	2400496c 	.word	0x2400496c

08009d30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b08e      	sub	sp, #56	; 0x38
 8009d34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d36:	e0ca      	b.n	8009ece <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	da18      	bge.n	8009d70 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009d3e:	1d3b      	adds	r3, r7, #4
 8009d40:	3304      	adds	r3, #4
 8009d42:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d10a      	bne.n	8009d60 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4e:	f383 8811 	msr	BASEPRI, r3
 8009d52:	f3bf 8f6f 	isb	sy
 8009d56:	f3bf 8f4f 	dsb	sy
 8009d5a:	61fb      	str	r3, [r7, #28]
}
 8009d5c:	bf00      	nop
 8009d5e:	e7fe      	b.n	8009d5e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d66:	6850      	ldr	r0, [r2, #4]
 8009d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d6a:	6892      	ldr	r2, [r2, #8]
 8009d6c:	4611      	mov	r1, r2
 8009d6e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	f2c0 80aa 	blt.w	8009ecc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7e:	695b      	ldr	r3, [r3, #20]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d004      	beq.n	8009d8e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d86:	3304      	adds	r3, #4
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f7fd ff69 	bl	8007c60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d8e:	463b      	mov	r3, r7
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7ff ff6b 	bl	8009c6c <prvSampleTimeNow>
 8009d96:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2b09      	cmp	r3, #9
 8009d9c:	f200 8097 	bhi.w	8009ece <prvProcessReceivedCommands+0x19e>
 8009da0:	a201      	add	r2, pc, #4	; (adr r2, 8009da8 <prvProcessReceivedCommands+0x78>)
 8009da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da6:	bf00      	nop
 8009da8:	08009dd1 	.word	0x08009dd1
 8009dac:	08009dd1 	.word	0x08009dd1
 8009db0:	08009dd1 	.word	0x08009dd1
 8009db4:	08009e45 	.word	0x08009e45
 8009db8:	08009e59 	.word	0x08009e59
 8009dbc:	08009ea3 	.word	0x08009ea3
 8009dc0:	08009dd1 	.word	0x08009dd1
 8009dc4:	08009dd1 	.word	0x08009dd1
 8009dc8:	08009e45 	.word	0x08009e45
 8009dcc:	08009e59 	.word	0x08009e59
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dd6:	f043 0301 	orr.w	r3, r3, #1
 8009dda:	b2da      	uxtb	r2, r3
 8009ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009de2:	68ba      	ldr	r2, [r7, #8]
 8009de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de6:	699b      	ldr	r3, [r3, #24]
 8009de8:	18d1      	adds	r1, r2, r3
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009df0:	f7ff ff5c 	bl	8009cac <prvInsertTimerInActiveList>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d069      	beq.n	8009ece <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfc:	6a1b      	ldr	r3, [r3, #32]
 8009dfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e00:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e08:	f003 0304 	and.w	r3, r3, #4
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d05e      	beq.n	8009ece <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009e10:	68ba      	ldr	r2, [r7, #8]
 8009e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e14:	699b      	ldr	r3, [r3, #24]
 8009e16:	441a      	add	r2, r3
 8009e18:	2300      	movs	r3, #0
 8009e1a:	9300      	str	r3, [sp, #0]
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	2100      	movs	r1, #0
 8009e20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e22:	f7ff fe05 	bl	8009a30 <xTimerGenericCommand>
 8009e26:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009e28:	6a3b      	ldr	r3, [r7, #32]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d14f      	bne.n	8009ece <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e32:	f383 8811 	msr	BASEPRI, r3
 8009e36:	f3bf 8f6f 	isb	sy
 8009e3a:	f3bf 8f4f 	dsb	sy
 8009e3e:	61bb      	str	r3, [r7, #24]
}
 8009e40:	bf00      	nop
 8009e42:	e7fe      	b.n	8009e42 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e4a:	f023 0301 	bic.w	r3, r3, #1
 8009e4e:	b2da      	uxtb	r2, r3
 8009e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009e56:	e03a      	b.n	8009ece <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e5e:	f043 0301 	orr.w	r3, r3, #1
 8009e62:	b2da      	uxtb	r2, r3
 8009e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009e6a:	68ba      	ldr	r2, [r7, #8]
 8009e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e72:	699b      	ldr	r3, [r3, #24]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d10a      	bne.n	8009e8e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e7c:	f383 8811 	msr	BASEPRI, r3
 8009e80:	f3bf 8f6f 	isb	sy
 8009e84:	f3bf 8f4f 	dsb	sy
 8009e88:	617b      	str	r3, [r7, #20]
}
 8009e8a:	bf00      	nop
 8009e8c:	e7fe      	b.n	8009e8c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e90:	699a      	ldr	r2, [r3, #24]
 8009e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e94:	18d1      	adds	r1, r2, r3
 8009e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e9c:	f7ff ff06 	bl	8009cac <prvInsertTimerInActiveList>
					break;
 8009ea0:	e015      	b.n	8009ece <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ea8:	f003 0302 	and.w	r3, r3, #2
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d103      	bne.n	8009eb8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009eb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009eb2:	f7fd fd2d 	bl	8007910 <vPortFree>
 8009eb6:	e00a      	b.n	8009ece <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ebe:	f023 0301 	bic.w	r3, r3, #1
 8009ec2:	b2da      	uxtb	r2, r3
 8009ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009eca:	e000      	b.n	8009ece <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009ecc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009ece:	4b08      	ldr	r3, [pc, #32]	; (8009ef0 <prvProcessReceivedCommands+0x1c0>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	1d39      	adds	r1, r7, #4
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7fe fc16 	bl	8008708 <xQueueReceive>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	f47f af2a 	bne.w	8009d38 <prvProcessReceivedCommands+0x8>
	}
}
 8009ee4:	bf00      	nop
 8009ee6:	bf00      	nop
 8009ee8:	3730      	adds	r7, #48	; 0x30
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	24004974 	.word	0x24004974

08009ef4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b088      	sub	sp, #32
 8009ef8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009efa:	e048      	b.n	8009f8e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009efc:	4b2d      	ldr	r3, [pc, #180]	; (8009fb4 <prvSwitchTimerLists+0xc0>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f06:	4b2b      	ldr	r3, [pc, #172]	; (8009fb4 <prvSwitchTimerLists+0xc0>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	68db      	ldr	r3, [r3, #12]
 8009f0c:	68db      	ldr	r3, [r3, #12]
 8009f0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	3304      	adds	r3, #4
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7fd fea3 	bl	8007c60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	6a1b      	ldr	r3, [r3, #32]
 8009f1e:	68f8      	ldr	r0, [r7, #12]
 8009f20:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f28:	f003 0304 	and.w	r3, r3, #4
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d02e      	beq.n	8009f8e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	699b      	ldr	r3, [r3, #24]
 8009f34:	693a      	ldr	r2, [r7, #16]
 8009f36:	4413      	add	r3, r2
 8009f38:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009f3a:	68ba      	ldr	r2, [r7, #8]
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d90e      	bls.n	8009f60 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	68ba      	ldr	r2, [r7, #8]
 8009f46:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	68fa      	ldr	r2, [r7, #12]
 8009f4c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f4e:	4b19      	ldr	r3, [pc, #100]	; (8009fb4 <prvSwitchTimerLists+0xc0>)
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	3304      	adds	r3, #4
 8009f56:	4619      	mov	r1, r3
 8009f58:	4610      	mov	r0, r2
 8009f5a:	f7fd fe48 	bl	8007bee <vListInsert>
 8009f5e:	e016      	b.n	8009f8e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f60:	2300      	movs	r3, #0
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	2300      	movs	r3, #0
 8009f66:	693a      	ldr	r2, [r7, #16]
 8009f68:	2100      	movs	r1, #0
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	f7ff fd60 	bl	8009a30 <xTimerGenericCommand>
 8009f70:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d10a      	bne.n	8009f8e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7c:	f383 8811 	msr	BASEPRI, r3
 8009f80:	f3bf 8f6f 	isb	sy
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	603b      	str	r3, [r7, #0]
}
 8009f8a:	bf00      	nop
 8009f8c:	e7fe      	b.n	8009f8c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f8e:	4b09      	ldr	r3, [pc, #36]	; (8009fb4 <prvSwitchTimerLists+0xc0>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d1b1      	bne.n	8009efc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009f98:	4b06      	ldr	r3, [pc, #24]	; (8009fb4 <prvSwitchTimerLists+0xc0>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009f9e:	4b06      	ldr	r3, [pc, #24]	; (8009fb8 <prvSwitchTimerLists+0xc4>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a04      	ldr	r2, [pc, #16]	; (8009fb4 <prvSwitchTimerLists+0xc0>)
 8009fa4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009fa6:	4a04      	ldr	r2, [pc, #16]	; (8009fb8 <prvSwitchTimerLists+0xc4>)
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	6013      	str	r3, [r2, #0]
}
 8009fac:	bf00      	nop
 8009fae:	3718      	adds	r7, #24
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}
 8009fb4:	2400496c 	.word	0x2400496c
 8009fb8:	24004970 	.word	0x24004970

08009fbc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009fc2:	f7fd ffa7 	bl	8007f14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009fc6:	4b15      	ldr	r3, [pc, #84]	; (800a01c <prvCheckForValidListAndQueue+0x60>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d120      	bne.n	800a010 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009fce:	4814      	ldr	r0, [pc, #80]	; (800a020 <prvCheckForValidListAndQueue+0x64>)
 8009fd0:	f7fd fdbc 	bl	8007b4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009fd4:	4813      	ldr	r0, [pc, #76]	; (800a024 <prvCheckForValidListAndQueue+0x68>)
 8009fd6:	f7fd fdb9 	bl	8007b4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009fda:	4b13      	ldr	r3, [pc, #76]	; (800a028 <prvCheckForValidListAndQueue+0x6c>)
 8009fdc:	4a10      	ldr	r2, [pc, #64]	; (800a020 <prvCheckForValidListAndQueue+0x64>)
 8009fde:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009fe0:	4b12      	ldr	r3, [pc, #72]	; (800a02c <prvCheckForValidListAndQueue+0x70>)
 8009fe2:	4a10      	ldr	r2, [pc, #64]	; (800a024 <prvCheckForValidListAndQueue+0x68>)
 8009fe4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	9300      	str	r3, [sp, #0]
 8009fea:	4b11      	ldr	r3, [pc, #68]	; (800a030 <prvCheckForValidListAndQueue+0x74>)
 8009fec:	4a11      	ldr	r2, [pc, #68]	; (800a034 <prvCheckForValidListAndQueue+0x78>)
 8009fee:	2110      	movs	r1, #16
 8009ff0:	200a      	movs	r0, #10
 8009ff2:	f7fe f919 	bl	8008228 <xQueueGenericCreateStatic>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	4a08      	ldr	r2, [pc, #32]	; (800a01c <prvCheckForValidListAndQueue+0x60>)
 8009ffa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009ffc:	4b07      	ldr	r3, [pc, #28]	; (800a01c <prvCheckForValidListAndQueue+0x60>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d005      	beq.n	800a010 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a004:	4b05      	ldr	r3, [pc, #20]	; (800a01c <prvCheckForValidListAndQueue+0x60>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	490b      	ldr	r1, [pc, #44]	; (800a038 <prvCheckForValidListAndQueue+0x7c>)
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7fe fd6c 	bl	8008ae8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a010:	f7fd ffb0 	bl	8007f74 <vPortExitCritical>
}
 800a014:	bf00      	nop
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	24004974 	.word	0x24004974
 800a020:	24004944 	.word	0x24004944
 800a024:	24004958 	.word	0x24004958
 800a028:	2400496c 	.word	0x2400496c
 800a02c:	24004970 	.word	0x24004970
 800a030:	24004a20 	.word	0x24004a20
 800a034:	24004980 	.word	0x24004980
 800a038:	0800a9b0 	.word	0x0800a9b0

0800a03c <__errno>:
 800a03c:	4b01      	ldr	r3, [pc, #4]	; (800a044 <__errno+0x8>)
 800a03e:	6818      	ldr	r0, [r3, #0]
 800a040:	4770      	bx	lr
 800a042:	bf00      	nop
 800a044:	24000014 	.word	0x24000014

0800a048 <__libc_init_array>:
 800a048:	b570      	push	{r4, r5, r6, lr}
 800a04a:	4d0d      	ldr	r5, [pc, #52]	; (800a080 <__libc_init_array+0x38>)
 800a04c:	4c0d      	ldr	r4, [pc, #52]	; (800a084 <__libc_init_array+0x3c>)
 800a04e:	1b64      	subs	r4, r4, r5
 800a050:	10a4      	asrs	r4, r4, #2
 800a052:	2600      	movs	r6, #0
 800a054:	42a6      	cmp	r6, r4
 800a056:	d109      	bne.n	800a06c <__libc_init_array+0x24>
 800a058:	4d0b      	ldr	r5, [pc, #44]	; (800a088 <__libc_init_array+0x40>)
 800a05a:	4c0c      	ldr	r4, [pc, #48]	; (800a08c <__libc_init_array+0x44>)
 800a05c:	f000 fc4e 	bl	800a8fc <_init>
 800a060:	1b64      	subs	r4, r4, r5
 800a062:	10a4      	asrs	r4, r4, #2
 800a064:	2600      	movs	r6, #0
 800a066:	42a6      	cmp	r6, r4
 800a068:	d105      	bne.n	800a076 <__libc_init_array+0x2e>
 800a06a:	bd70      	pop	{r4, r5, r6, pc}
 800a06c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a070:	4798      	blx	r3
 800a072:	3601      	adds	r6, #1
 800a074:	e7ee      	b.n	800a054 <__libc_init_array+0xc>
 800a076:	f855 3b04 	ldr.w	r3, [r5], #4
 800a07a:	4798      	blx	r3
 800a07c:	3601      	adds	r6, #1
 800a07e:	e7f2      	b.n	800a066 <__libc_init_array+0x1e>
 800a080:	0800aae0 	.word	0x0800aae0
 800a084:	0800aae0 	.word	0x0800aae0
 800a088:	0800aae0 	.word	0x0800aae0
 800a08c:	0800aae4 	.word	0x0800aae4

0800a090 <memcpy>:
 800a090:	440a      	add	r2, r1
 800a092:	4291      	cmp	r1, r2
 800a094:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a098:	d100      	bne.n	800a09c <memcpy+0xc>
 800a09a:	4770      	bx	lr
 800a09c:	b510      	push	{r4, lr}
 800a09e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0a6:	4291      	cmp	r1, r2
 800a0a8:	d1f9      	bne.n	800a09e <memcpy+0xe>
 800a0aa:	bd10      	pop	{r4, pc}

0800a0ac <memset>:
 800a0ac:	4402      	add	r2, r0
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d100      	bne.n	800a0b6 <memset+0xa>
 800a0b4:	4770      	bx	lr
 800a0b6:	f803 1b01 	strb.w	r1, [r3], #1
 800a0ba:	e7f9      	b.n	800a0b0 <memset+0x4>

0800a0bc <siprintf>:
 800a0bc:	b40e      	push	{r1, r2, r3}
 800a0be:	b500      	push	{lr}
 800a0c0:	b09c      	sub	sp, #112	; 0x70
 800a0c2:	ab1d      	add	r3, sp, #116	; 0x74
 800a0c4:	9002      	str	r0, [sp, #8]
 800a0c6:	9006      	str	r0, [sp, #24]
 800a0c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a0cc:	4809      	ldr	r0, [pc, #36]	; (800a0f4 <siprintf+0x38>)
 800a0ce:	9107      	str	r1, [sp, #28]
 800a0d0:	9104      	str	r1, [sp, #16]
 800a0d2:	4909      	ldr	r1, [pc, #36]	; (800a0f8 <siprintf+0x3c>)
 800a0d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0d8:	9105      	str	r1, [sp, #20]
 800a0da:	6800      	ldr	r0, [r0, #0]
 800a0dc:	9301      	str	r3, [sp, #4]
 800a0de:	a902      	add	r1, sp, #8
 800a0e0:	f000 f868 	bl	800a1b4 <_svfiprintf_r>
 800a0e4:	9b02      	ldr	r3, [sp, #8]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	701a      	strb	r2, [r3, #0]
 800a0ea:	b01c      	add	sp, #112	; 0x70
 800a0ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0f0:	b003      	add	sp, #12
 800a0f2:	4770      	bx	lr
 800a0f4:	24000014 	.word	0x24000014
 800a0f8:	ffff0208 	.word	0xffff0208

0800a0fc <__ssputs_r>:
 800a0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a100:	688e      	ldr	r6, [r1, #8]
 800a102:	429e      	cmp	r6, r3
 800a104:	4682      	mov	sl, r0
 800a106:	460c      	mov	r4, r1
 800a108:	4690      	mov	r8, r2
 800a10a:	461f      	mov	r7, r3
 800a10c:	d838      	bhi.n	800a180 <__ssputs_r+0x84>
 800a10e:	898a      	ldrh	r2, [r1, #12]
 800a110:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a114:	d032      	beq.n	800a17c <__ssputs_r+0x80>
 800a116:	6825      	ldr	r5, [r4, #0]
 800a118:	6909      	ldr	r1, [r1, #16]
 800a11a:	eba5 0901 	sub.w	r9, r5, r1
 800a11e:	6965      	ldr	r5, [r4, #20]
 800a120:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a124:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a128:	3301      	adds	r3, #1
 800a12a:	444b      	add	r3, r9
 800a12c:	106d      	asrs	r5, r5, #1
 800a12e:	429d      	cmp	r5, r3
 800a130:	bf38      	it	cc
 800a132:	461d      	movcc	r5, r3
 800a134:	0553      	lsls	r3, r2, #21
 800a136:	d531      	bpl.n	800a19c <__ssputs_r+0xa0>
 800a138:	4629      	mov	r1, r5
 800a13a:	f000 fb39 	bl	800a7b0 <_malloc_r>
 800a13e:	4606      	mov	r6, r0
 800a140:	b950      	cbnz	r0, 800a158 <__ssputs_r+0x5c>
 800a142:	230c      	movs	r3, #12
 800a144:	f8ca 3000 	str.w	r3, [sl]
 800a148:	89a3      	ldrh	r3, [r4, #12]
 800a14a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a14e:	81a3      	strh	r3, [r4, #12]
 800a150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a158:	6921      	ldr	r1, [r4, #16]
 800a15a:	464a      	mov	r2, r9
 800a15c:	f7ff ff98 	bl	800a090 <memcpy>
 800a160:	89a3      	ldrh	r3, [r4, #12]
 800a162:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a16a:	81a3      	strh	r3, [r4, #12]
 800a16c:	6126      	str	r6, [r4, #16]
 800a16e:	6165      	str	r5, [r4, #20]
 800a170:	444e      	add	r6, r9
 800a172:	eba5 0509 	sub.w	r5, r5, r9
 800a176:	6026      	str	r6, [r4, #0]
 800a178:	60a5      	str	r5, [r4, #8]
 800a17a:	463e      	mov	r6, r7
 800a17c:	42be      	cmp	r6, r7
 800a17e:	d900      	bls.n	800a182 <__ssputs_r+0x86>
 800a180:	463e      	mov	r6, r7
 800a182:	4632      	mov	r2, r6
 800a184:	6820      	ldr	r0, [r4, #0]
 800a186:	4641      	mov	r1, r8
 800a188:	f000 faa8 	bl	800a6dc <memmove>
 800a18c:	68a3      	ldr	r3, [r4, #8]
 800a18e:	6822      	ldr	r2, [r4, #0]
 800a190:	1b9b      	subs	r3, r3, r6
 800a192:	4432      	add	r2, r6
 800a194:	60a3      	str	r3, [r4, #8]
 800a196:	6022      	str	r2, [r4, #0]
 800a198:	2000      	movs	r0, #0
 800a19a:	e7db      	b.n	800a154 <__ssputs_r+0x58>
 800a19c:	462a      	mov	r2, r5
 800a19e:	f000 fb61 	bl	800a864 <_realloc_r>
 800a1a2:	4606      	mov	r6, r0
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	d1e1      	bne.n	800a16c <__ssputs_r+0x70>
 800a1a8:	6921      	ldr	r1, [r4, #16]
 800a1aa:	4650      	mov	r0, sl
 800a1ac:	f000 fab0 	bl	800a710 <_free_r>
 800a1b0:	e7c7      	b.n	800a142 <__ssputs_r+0x46>
	...

0800a1b4 <_svfiprintf_r>:
 800a1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b8:	4698      	mov	r8, r3
 800a1ba:	898b      	ldrh	r3, [r1, #12]
 800a1bc:	061b      	lsls	r3, r3, #24
 800a1be:	b09d      	sub	sp, #116	; 0x74
 800a1c0:	4607      	mov	r7, r0
 800a1c2:	460d      	mov	r5, r1
 800a1c4:	4614      	mov	r4, r2
 800a1c6:	d50e      	bpl.n	800a1e6 <_svfiprintf_r+0x32>
 800a1c8:	690b      	ldr	r3, [r1, #16]
 800a1ca:	b963      	cbnz	r3, 800a1e6 <_svfiprintf_r+0x32>
 800a1cc:	2140      	movs	r1, #64	; 0x40
 800a1ce:	f000 faef 	bl	800a7b0 <_malloc_r>
 800a1d2:	6028      	str	r0, [r5, #0]
 800a1d4:	6128      	str	r0, [r5, #16]
 800a1d6:	b920      	cbnz	r0, 800a1e2 <_svfiprintf_r+0x2e>
 800a1d8:	230c      	movs	r3, #12
 800a1da:	603b      	str	r3, [r7, #0]
 800a1dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1e0:	e0d1      	b.n	800a386 <_svfiprintf_r+0x1d2>
 800a1e2:	2340      	movs	r3, #64	; 0x40
 800a1e4:	616b      	str	r3, [r5, #20]
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ea:	2320      	movs	r3, #32
 800a1ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1f4:	2330      	movs	r3, #48	; 0x30
 800a1f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a3a0 <_svfiprintf_r+0x1ec>
 800a1fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1fe:	f04f 0901 	mov.w	r9, #1
 800a202:	4623      	mov	r3, r4
 800a204:	469a      	mov	sl, r3
 800a206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a20a:	b10a      	cbz	r2, 800a210 <_svfiprintf_r+0x5c>
 800a20c:	2a25      	cmp	r2, #37	; 0x25
 800a20e:	d1f9      	bne.n	800a204 <_svfiprintf_r+0x50>
 800a210:	ebba 0b04 	subs.w	fp, sl, r4
 800a214:	d00b      	beq.n	800a22e <_svfiprintf_r+0x7a>
 800a216:	465b      	mov	r3, fp
 800a218:	4622      	mov	r2, r4
 800a21a:	4629      	mov	r1, r5
 800a21c:	4638      	mov	r0, r7
 800a21e:	f7ff ff6d 	bl	800a0fc <__ssputs_r>
 800a222:	3001      	adds	r0, #1
 800a224:	f000 80aa 	beq.w	800a37c <_svfiprintf_r+0x1c8>
 800a228:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a22a:	445a      	add	r2, fp
 800a22c:	9209      	str	r2, [sp, #36]	; 0x24
 800a22e:	f89a 3000 	ldrb.w	r3, [sl]
 800a232:	2b00      	cmp	r3, #0
 800a234:	f000 80a2 	beq.w	800a37c <_svfiprintf_r+0x1c8>
 800a238:	2300      	movs	r3, #0
 800a23a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a23e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a242:	f10a 0a01 	add.w	sl, sl, #1
 800a246:	9304      	str	r3, [sp, #16]
 800a248:	9307      	str	r3, [sp, #28]
 800a24a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a24e:	931a      	str	r3, [sp, #104]	; 0x68
 800a250:	4654      	mov	r4, sl
 800a252:	2205      	movs	r2, #5
 800a254:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a258:	4851      	ldr	r0, [pc, #324]	; (800a3a0 <_svfiprintf_r+0x1ec>)
 800a25a:	f7f6 f841 	bl	80002e0 <memchr>
 800a25e:	9a04      	ldr	r2, [sp, #16]
 800a260:	b9d8      	cbnz	r0, 800a29a <_svfiprintf_r+0xe6>
 800a262:	06d0      	lsls	r0, r2, #27
 800a264:	bf44      	itt	mi
 800a266:	2320      	movmi	r3, #32
 800a268:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a26c:	0711      	lsls	r1, r2, #28
 800a26e:	bf44      	itt	mi
 800a270:	232b      	movmi	r3, #43	; 0x2b
 800a272:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a276:	f89a 3000 	ldrb.w	r3, [sl]
 800a27a:	2b2a      	cmp	r3, #42	; 0x2a
 800a27c:	d015      	beq.n	800a2aa <_svfiprintf_r+0xf6>
 800a27e:	9a07      	ldr	r2, [sp, #28]
 800a280:	4654      	mov	r4, sl
 800a282:	2000      	movs	r0, #0
 800a284:	f04f 0c0a 	mov.w	ip, #10
 800a288:	4621      	mov	r1, r4
 800a28a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a28e:	3b30      	subs	r3, #48	; 0x30
 800a290:	2b09      	cmp	r3, #9
 800a292:	d94e      	bls.n	800a332 <_svfiprintf_r+0x17e>
 800a294:	b1b0      	cbz	r0, 800a2c4 <_svfiprintf_r+0x110>
 800a296:	9207      	str	r2, [sp, #28]
 800a298:	e014      	b.n	800a2c4 <_svfiprintf_r+0x110>
 800a29a:	eba0 0308 	sub.w	r3, r0, r8
 800a29e:	fa09 f303 	lsl.w	r3, r9, r3
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	9304      	str	r3, [sp, #16]
 800a2a6:	46a2      	mov	sl, r4
 800a2a8:	e7d2      	b.n	800a250 <_svfiprintf_r+0x9c>
 800a2aa:	9b03      	ldr	r3, [sp, #12]
 800a2ac:	1d19      	adds	r1, r3, #4
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	9103      	str	r1, [sp, #12]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	bfbb      	ittet	lt
 800a2b6:	425b      	neglt	r3, r3
 800a2b8:	f042 0202 	orrlt.w	r2, r2, #2
 800a2bc:	9307      	strge	r3, [sp, #28]
 800a2be:	9307      	strlt	r3, [sp, #28]
 800a2c0:	bfb8      	it	lt
 800a2c2:	9204      	strlt	r2, [sp, #16]
 800a2c4:	7823      	ldrb	r3, [r4, #0]
 800a2c6:	2b2e      	cmp	r3, #46	; 0x2e
 800a2c8:	d10c      	bne.n	800a2e4 <_svfiprintf_r+0x130>
 800a2ca:	7863      	ldrb	r3, [r4, #1]
 800a2cc:	2b2a      	cmp	r3, #42	; 0x2a
 800a2ce:	d135      	bne.n	800a33c <_svfiprintf_r+0x188>
 800a2d0:	9b03      	ldr	r3, [sp, #12]
 800a2d2:	1d1a      	adds	r2, r3, #4
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	9203      	str	r2, [sp, #12]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	bfb8      	it	lt
 800a2dc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a2e0:	3402      	adds	r4, #2
 800a2e2:	9305      	str	r3, [sp, #20]
 800a2e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a3b0 <_svfiprintf_r+0x1fc>
 800a2e8:	7821      	ldrb	r1, [r4, #0]
 800a2ea:	2203      	movs	r2, #3
 800a2ec:	4650      	mov	r0, sl
 800a2ee:	f7f5 fff7 	bl	80002e0 <memchr>
 800a2f2:	b140      	cbz	r0, 800a306 <_svfiprintf_r+0x152>
 800a2f4:	2340      	movs	r3, #64	; 0x40
 800a2f6:	eba0 000a 	sub.w	r0, r0, sl
 800a2fa:	fa03 f000 	lsl.w	r0, r3, r0
 800a2fe:	9b04      	ldr	r3, [sp, #16]
 800a300:	4303      	orrs	r3, r0
 800a302:	3401      	adds	r4, #1
 800a304:	9304      	str	r3, [sp, #16]
 800a306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a30a:	4826      	ldr	r0, [pc, #152]	; (800a3a4 <_svfiprintf_r+0x1f0>)
 800a30c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a310:	2206      	movs	r2, #6
 800a312:	f7f5 ffe5 	bl	80002e0 <memchr>
 800a316:	2800      	cmp	r0, #0
 800a318:	d038      	beq.n	800a38c <_svfiprintf_r+0x1d8>
 800a31a:	4b23      	ldr	r3, [pc, #140]	; (800a3a8 <_svfiprintf_r+0x1f4>)
 800a31c:	bb1b      	cbnz	r3, 800a366 <_svfiprintf_r+0x1b2>
 800a31e:	9b03      	ldr	r3, [sp, #12]
 800a320:	3307      	adds	r3, #7
 800a322:	f023 0307 	bic.w	r3, r3, #7
 800a326:	3308      	adds	r3, #8
 800a328:	9303      	str	r3, [sp, #12]
 800a32a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a32c:	4433      	add	r3, r6
 800a32e:	9309      	str	r3, [sp, #36]	; 0x24
 800a330:	e767      	b.n	800a202 <_svfiprintf_r+0x4e>
 800a332:	fb0c 3202 	mla	r2, ip, r2, r3
 800a336:	460c      	mov	r4, r1
 800a338:	2001      	movs	r0, #1
 800a33a:	e7a5      	b.n	800a288 <_svfiprintf_r+0xd4>
 800a33c:	2300      	movs	r3, #0
 800a33e:	3401      	adds	r4, #1
 800a340:	9305      	str	r3, [sp, #20]
 800a342:	4619      	mov	r1, r3
 800a344:	f04f 0c0a 	mov.w	ip, #10
 800a348:	4620      	mov	r0, r4
 800a34a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a34e:	3a30      	subs	r2, #48	; 0x30
 800a350:	2a09      	cmp	r2, #9
 800a352:	d903      	bls.n	800a35c <_svfiprintf_r+0x1a8>
 800a354:	2b00      	cmp	r3, #0
 800a356:	d0c5      	beq.n	800a2e4 <_svfiprintf_r+0x130>
 800a358:	9105      	str	r1, [sp, #20]
 800a35a:	e7c3      	b.n	800a2e4 <_svfiprintf_r+0x130>
 800a35c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a360:	4604      	mov	r4, r0
 800a362:	2301      	movs	r3, #1
 800a364:	e7f0      	b.n	800a348 <_svfiprintf_r+0x194>
 800a366:	ab03      	add	r3, sp, #12
 800a368:	9300      	str	r3, [sp, #0]
 800a36a:	462a      	mov	r2, r5
 800a36c:	4b0f      	ldr	r3, [pc, #60]	; (800a3ac <_svfiprintf_r+0x1f8>)
 800a36e:	a904      	add	r1, sp, #16
 800a370:	4638      	mov	r0, r7
 800a372:	f3af 8000 	nop.w
 800a376:	1c42      	adds	r2, r0, #1
 800a378:	4606      	mov	r6, r0
 800a37a:	d1d6      	bne.n	800a32a <_svfiprintf_r+0x176>
 800a37c:	89ab      	ldrh	r3, [r5, #12]
 800a37e:	065b      	lsls	r3, r3, #25
 800a380:	f53f af2c 	bmi.w	800a1dc <_svfiprintf_r+0x28>
 800a384:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a386:	b01d      	add	sp, #116	; 0x74
 800a388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a38c:	ab03      	add	r3, sp, #12
 800a38e:	9300      	str	r3, [sp, #0]
 800a390:	462a      	mov	r2, r5
 800a392:	4b06      	ldr	r3, [pc, #24]	; (800a3ac <_svfiprintf_r+0x1f8>)
 800a394:	a904      	add	r1, sp, #16
 800a396:	4638      	mov	r0, r7
 800a398:	f000 f87a 	bl	800a490 <_printf_i>
 800a39c:	e7eb      	b.n	800a376 <_svfiprintf_r+0x1c2>
 800a39e:	bf00      	nop
 800a3a0:	0800aaa4 	.word	0x0800aaa4
 800a3a4:	0800aaae 	.word	0x0800aaae
 800a3a8:	00000000 	.word	0x00000000
 800a3ac:	0800a0fd 	.word	0x0800a0fd
 800a3b0:	0800aaaa 	.word	0x0800aaaa

0800a3b4 <_printf_common>:
 800a3b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3b8:	4616      	mov	r6, r2
 800a3ba:	4699      	mov	r9, r3
 800a3bc:	688a      	ldr	r2, [r1, #8]
 800a3be:	690b      	ldr	r3, [r1, #16]
 800a3c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	bfb8      	it	lt
 800a3c8:	4613      	movlt	r3, r2
 800a3ca:	6033      	str	r3, [r6, #0]
 800a3cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a3d0:	4607      	mov	r7, r0
 800a3d2:	460c      	mov	r4, r1
 800a3d4:	b10a      	cbz	r2, 800a3da <_printf_common+0x26>
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	6033      	str	r3, [r6, #0]
 800a3da:	6823      	ldr	r3, [r4, #0]
 800a3dc:	0699      	lsls	r1, r3, #26
 800a3de:	bf42      	ittt	mi
 800a3e0:	6833      	ldrmi	r3, [r6, #0]
 800a3e2:	3302      	addmi	r3, #2
 800a3e4:	6033      	strmi	r3, [r6, #0]
 800a3e6:	6825      	ldr	r5, [r4, #0]
 800a3e8:	f015 0506 	ands.w	r5, r5, #6
 800a3ec:	d106      	bne.n	800a3fc <_printf_common+0x48>
 800a3ee:	f104 0a19 	add.w	sl, r4, #25
 800a3f2:	68e3      	ldr	r3, [r4, #12]
 800a3f4:	6832      	ldr	r2, [r6, #0]
 800a3f6:	1a9b      	subs	r3, r3, r2
 800a3f8:	42ab      	cmp	r3, r5
 800a3fa:	dc26      	bgt.n	800a44a <_printf_common+0x96>
 800a3fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a400:	1e13      	subs	r3, r2, #0
 800a402:	6822      	ldr	r2, [r4, #0]
 800a404:	bf18      	it	ne
 800a406:	2301      	movne	r3, #1
 800a408:	0692      	lsls	r2, r2, #26
 800a40a:	d42b      	bmi.n	800a464 <_printf_common+0xb0>
 800a40c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a410:	4649      	mov	r1, r9
 800a412:	4638      	mov	r0, r7
 800a414:	47c0      	blx	r8
 800a416:	3001      	adds	r0, #1
 800a418:	d01e      	beq.n	800a458 <_printf_common+0xa4>
 800a41a:	6823      	ldr	r3, [r4, #0]
 800a41c:	68e5      	ldr	r5, [r4, #12]
 800a41e:	6832      	ldr	r2, [r6, #0]
 800a420:	f003 0306 	and.w	r3, r3, #6
 800a424:	2b04      	cmp	r3, #4
 800a426:	bf08      	it	eq
 800a428:	1aad      	subeq	r5, r5, r2
 800a42a:	68a3      	ldr	r3, [r4, #8]
 800a42c:	6922      	ldr	r2, [r4, #16]
 800a42e:	bf0c      	ite	eq
 800a430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a434:	2500      	movne	r5, #0
 800a436:	4293      	cmp	r3, r2
 800a438:	bfc4      	itt	gt
 800a43a:	1a9b      	subgt	r3, r3, r2
 800a43c:	18ed      	addgt	r5, r5, r3
 800a43e:	2600      	movs	r6, #0
 800a440:	341a      	adds	r4, #26
 800a442:	42b5      	cmp	r5, r6
 800a444:	d11a      	bne.n	800a47c <_printf_common+0xc8>
 800a446:	2000      	movs	r0, #0
 800a448:	e008      	b.n	800a45c <_printf_common+0xa8>
 800a44a:	2301      	movs	r3, #1
 800a44c:	4652      	mov	r2, sl
 800a44e:	4649      	mov	r1, r9
 800a450:	4638      	mov	r0, r7
 800a452:	47c0      	blx	r8
 800a454:	3001      	adds	r0, #1
 800a456:	d103      	bne.n	800a460 <_printf_common+0xac>
 800a458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a45c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a460:	3501      	adds	r5, #1
 800a462:	e7c6      	b.n	800a3f2 <_printf_common+0x3e>
 800a464:	18e1      	adds	r1, r4, r3
 800a466:	1c5a      	adds	r2, r3, #1
 800a468:	2030      	movs	r0, #48	; 0x30
 800a46a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a46e:	4422      	add	r2, r4
 800a470:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a474:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a478:	3302      	adds	r3, #2
 800a47a:	e7c7      	b.n	800a40c <_printf_common+0x58>
 800a47c:	2301      	movs	r3, #1
 800a47e:	4622      	mov	r2, r4
 800a480:	4649      	mov	r1, r9
 800a482:	4638      	mov	r0, r7
 800a484:	47c0      	blx	r8
 800a486:	3001      	adds	r0, #1
 800a488:	d0e6      	beq.n	800a458 <_printf_common+0xa4>
 800a48a:	3601      	adds	r6, #1
 800a48c:	e7d9      	b.n	800a442 <_printf_common+0x8e>
	...

0800a490 <_printf_i>:
 800a490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a494:	460c      	mov	r4, r1
 800a496:	4691      	mov	r9, r2
 800a498:	7e27      	ldrb	r7, [r4, #24]
 800a49a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a49c:	2f78      	cmp	r7, #120	; 0x78
 800a49e:	4680      	mov	r8, r0
 800a4a0:	469a      	mov	sl, r3
 800a4a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4a6:	d807      	bhi.n	800a4b8 <_printf_i+0x28>
 800a4a8:	2f62      	cmp	r7, #98	; 0x62
 800a4aa:	d80a      	bhi.n	800a4c2 <_printf_i+0x32>
 800a4ac:	2f00      	cmp	r7, #0
 800a4ae:	f000 80d8 	beq.w	800a662 <_printf_i+0x1d2>
 800a4b2:	2f58      	cmp	r7, #88	; 0x58
 800a4b4:	f000 80a3 	beq.w	800a5fe <_printf_i+0x16e>
 800a4b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a4bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a4c0:	e03a      	b.n	800a538 <_printf_i+0xa8>
 800a4c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a4c6:	2b15      	cmp	r3, #21
 800a4c8:	d8f6      	bhi.n	800a4b8 <_printf_i+0x28>
 800a4ca:	a001      	add	r0, pc, #4	; (adr r0, 800a4d0 <_printf_i+0x40>)
 800a4cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a4d0:	0800a529 	.word	0x0800a529
 800a4d4:	0800a53d 	.word	0x0800a53d
 800a4d8:	0800a4b9 	.word	0x0800a4b9
 800a4dc:	0800a4b9 	.word	0x0800a4b9
 800a4e0:	0800a4b9 	.word	0x0800a4b9
 800a4e4:	0800a4b9 	.word	0x0800a4b9
 800a4e8:	0800a53d 	.word	0x0800a53d
 800a4ec:	0800a4b9 	.word	0x0800a4b9
 800a4f0:	0800a4b9 	.word	0x0800a4b9
 800a4f4:	0800a4b9 	.word	0x0800a4b9
 800a4f8:	0800a4b9 	.word	0x0800a4b9
 800a4fc:	0800a649 	.word	0x0800a649
 800a500:	0800a56d 	.word	0x0800a56d
 800a504:	0800a62b 	.word	0x0800a62b
 800a508:	0800a4b9 	.word	0x0800a4b9
 800a50c:	0800a4b9 	.word	0x0800a4b9
 800a510:	0800a66b 	.word	0x0800a66b
 800a514:	0800a4b9 	.word	0x0800a4b9
 800a518:	0800a56d 	.word	0x0800a56d
 800a51c:	0800a4b9 	.word	0x0800a4b9
 800a520:	0800a4b9 	.word	0x0800a4b9
 800a524:	0800a633 	.word	0x0800a633
 800a528:	680b      	ldr	r3, [r1, #0]
 800a52a:	1d1a      	adds	r2, r3, #4
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	600a      	str	r2, [r1, #0]
 800a530:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a534:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a538:	2301      	movs	r3, #1
 800a53a:	e0a3      	b.n	800a684 <_printf_i+0x1f4>
 800a53c:	6825      	ldr	r5, [r4, #0]
 800a53e:	6808      	ldr	r0, [r1, #0]
 800a540:	062e      	lsls	r6, r5, #24
 800a542:	f100 0304 	add.w	r3, r0, #4
 800a546:	d50a      	bpl.n	800a55e <_printf_i+0xce>
 800a548:	6805      	ldr	r5, [r0, #0]
 800a54a:	600b      	str	r3, [r1, #0]
 800a54c:	2d00      	cmp	r5, #0
 800a54e:	da03      	bge.n	800a558 <_printf_i+0xc8>
 800a550:	232d      	movs	r3, #45	; 0x2d
 800a552:	426d      	negs	r5, r5
 800a554:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a558:	485e      	ldr	r0, [pc, #376]	; (800a6d4 <_printf_i+0x244>)
 800a55a:	230a      	movs	r3, #10
 800a55c:	e019      	b.n	800a592 <_printf_i+0x102>
 800a55e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a562:	6805      	ldr	r5, [r0, #0]
 800a564:	600b      	str	r3, [r1, #0]
 800a566:	bf18      	it	ne
 800a568:	b22d      	sxthne	r5, r5
 800a56a:	e7ef      	b.n	800a54c <_printf_i+0xbc>
 800a56c:	680b      	ldr	r3, [r1, #0]
 800a56e:	6825      	ldr	r5, [r4, #0]
 800a570:	1d18      	adds	r0, r3, #4
 800a572:	6008      	str	r0, [r1, #0]
 800a574:	0628      	lsls	r0, r5, #24
 800a576:	d501      	bpl.n	800a57c <_printf_i+0xec>
 800a578:	681d      	ldr	r5, [r3, #0]
 800a57a:	e002      	b.n	800a582 <_printf_i+0xf2>
 800a57c:	0669      	lsls	r1, r5, #25
 800a57e:	d5fb      	bpl.n	800a578 <_printf_i+0xe8>
 800a580:	881d      	ldrh	r5, [r3, #0]
 800a582:	4854      	ldr	r0, [pc, #336]	; (800a6d4 <_printf_i+0x244>)
 800a584:	2f6f      	cmp	r7, #111	; 0x6f
 800a586:	bf0c      	ite	eq
 800a588:	2308      	moveq	r3, #8
 800a58a:	230a      	movne	r3, #10
 800a58c:	2100      	movs	r1, #0
 800a58e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a592:	6866      	ldr	r6, [r4, #4]
 800a594:	60a6      	str	r6, [r4, #8]
 800a596:	2e00      	cmp	r6, #0
 800a598:	bfa2      	ittt	ge
 800a59a:	6821      	ldrge	r1, [r4, #0]
 800a59c:	f021 0104 	bicge.w	r1, r1, #4
 800a5a0:	6021      	strge	r1, [r4, #0]
 800a5a2:	b90d      	cbnz	r5, 800a5a8 <_printf_i+0x118>
 800a5a4:	2e00      	cmp	r6, #0
 800a5a6:	d04d      	beq.n	800a644 <_printf_i+0x1b4>
 800a5a8:	4616      	mov	r6, r2
 800a5aa:	fbb5 f1f3 	udiv	r1, r5, r3
 800a5ae:	fb03 5711 	mls	r7, r3, r1, r5
 800a5b2:	5dc7      	ldrb	r7, [r0, r7]
 800a5b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a5b8:	462f      	mov	r7, r5
 800a5ba:	42bb      	cmp	r3, r7
 800a5bc:	460d      	mov	r5, r1
 800a5be:	d9f4      	bls.n	800a5aa <_printf_i+0x11a>
 800a5c0:	2b08      	cmp	r3, #8
 800a5c2:	d10b      	bne.n	800a5dc <_printf_i+0x14c>
 800a5c4:	6823      	ldr	r3, [r4, #0]
 800a5c6:	07df      	lsls	r7, r3, #31
 800a5c8:	d508      	bpl.n	800a5dc <_printf_i+0x14c>
 800a5ca:	6923      	ldr	r3, [r4, #16]
 800a5cc:	6861      	ldr	r1, [r4, #4]
 800a5ce:	4299      	cmp	r1, r3
 800a5d0:	bfde      	ittt	le
 800a5d2:	2330      	movle	r3, #48	; 0x30
 800a5d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a5d8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800a5dc:	1b92      	subs	r2, r2, r6
 800a5de:	6122      	str	r2, [r4, #16]
 800a5e0:	f8cd a000 	str.w	sl, [sp]
 800a5e4:	464b      	mov	r3, r9
 800a5e6:	aa03      	add	r2, sp, #12
 800a5e8:	4621      	mov	r1, r4
 800a5ea:	4640      	mov	r0, r8
 800a5ec:	f7ff fee2 	bl	800a3b4 <_printf_common>
 800a5f0:	3001      	adds	r0, #1
 800a5f2:	d14c      	bne.n	800a68e <_printf_i+0x1fe>
 800a5f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5f8:	b004      	add	sp, #16
 800a5fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5fe:	4835      	ldr	r0, [pc, #212]	; (800a6d4 <_printf_i+0x244>)
 800a600:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a604:	6823      	ldr	r3, [r4, #0]
 800a606:	680e      	ldr	r6, [r1, #0]
 800a608:	061f      	lsls	r7, r3, #24
 800a60a:	f856 5b04 	ldr.w	r5, [r6], #4
 800a60e:	600e      	str	r6, [r1, #0]
 800a610:	d514      	bpl.n	800a63c <_printf_i+0x1ac>
 800a612:	07d9      	lsls	r1, r3, #31
 800a614:	bf44      	itt	mi
 800a616:	f043 0320 	orrmi.w	r3, r3, #32
 800a61a:	6023      	strmi	r3, [r4, #0]
 800a61c:	b91d      	cbnz	r5, 800a626 <_printf_i+0x196>
 800a61e:	6823      	ldr	r3, [r4, #0]
 800a620:	f023 0320 	bic.w	r3, r3, #32
 800a624:	6023      	str	r3, [r4, #0]
 800a626:	2310      	movs	r3, #16
 800a628:	e7b0      	b.n	800a58c <_printf_i+0xfc>
 800a62a:	6823      	ldr	r3, [r4, #0]
 800a62c:	f043 0320 	orr.w	r3, r3, #32
 800a630:	6023      	str	r3, [r4, #0]
 800a632:	2378      	movs	r3, #120	; 0x78
 800a634:	4828      	ldr	r0, [pc, #160]	; (800a6d8 <_printf_i+0x248>)
 800a636:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a63a:	e7e3      	b.n	800a604 <_printf_i+0x174>
 800a63c:	065e      	lsls	r6, r3, #25
 800a63e:	bf48      	it	mi
 800a640:	b2ad      	uxthmi	r5, r5
 800a642:	e7e6      	b.n	800a612 <_printf_i+0x182>
 800a644:	4616      	mov	r6, r2
 800a646:	e7bb      	b.n	800a5c0 <_printf_i+0x130>
 800a648:	680b      	ldr	r3, [r1, #0]
 800a64a:	6826      	ldr	r6, [r4, #0]
 800a64c:	6960      	ldr	r0, [r4, #20]
 800a64e:	1d1d      	adds	r5, r3, #4
 800a650:	600d      	str	r5, [r1, #0]
 800a652:	0635      	lsls	r5, r6, #24
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	d501      	bpl.n	800a65c <_printf_i+0x1cc>
 800a658:	6018      	str	r0, [r3, #0]
 800a65a:	e002      	b.n	800a662 <_printf_i+0x1d2>
 800a65c:	0671      	lsls	r1, r6, #25
 800a65e:	d5fb      	bpl.n	800a658 <_printf_i+0x1c8>
 800a660:	8018      	strh	r0, [r3, #0]
 800a662:	2300      	movs	r3, #0
 800a664:	6123      	str	r3, [r4, #16]
 800a666:	4616      	mov	r6, r2
 800a668:	e7ba      	b.n	800a5e0 <_printf_i+0x150>
 800a66a:	680b      	ldr	r3, [r1, #0]
 800a66c:	1d1a      	adds	r2, r3, #4
 800a66e:	600a      	str	r2, [r1, #0]
 800a670:	681e      	ldr	r6, [r3, #0]
 800a672:	6862      	ldr	r2, [r4, #4]
 800a674:	2100      	movs	r1, #0
 800a676:	4630      	mov	r0, r6
 800a678:	f7f5 fe32 	bl	80002e0 <memchr>
 800a67c:	b108      	cbz	r0, 800a682 <_printf_i+0x1f2>
 800a67e:	1b80      	subs	r0, r0, r6
 800a680:	6060      	str	r0, [r4, #4]
 800a682:	6863      	ldr	r3, [r4, #4]
 800a684:	6123      	str	r3, [r4, #16]
 800a686:	2300      	movs	r3, #0
 800a688:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a68c:	e7a8      	b.n	800a5e0 <_printf_i+0x150>
 800a68e:	6923      	ldr	r3, [r4, #16]
 800a690:	4632      	mov	r2, r6
 800a692:	4649      	mov	r1, r9
 800a694:	4640      	mov	r0, r8
 800a696:	47d0      	blx	sl
 800a698:	3001      	adds	r0, #1
 800a69a:	d0ab      	beq.n	800a5f4 <_printf_i+0x164>
 800a69c:	6823      	ldr	r3, [r4, #0]
 800a69e:	079b      	lsls	r3, r3, #30
 800a6a0:	d413      	bmi.n	800a6ca <_printf_i+0x23a>
 800a6a2:	68e0      	ldr	r0, [r4, #12]
 800a6a4:	9b03      	ldr	r3, [sp, #12]
 800a6a6:	4298      	cmp	r0, r3
 800a6a8:	bfb8      	it	lt
 800a6aa:	4618      	movlt	r0, r3
 800a6ac:	e7a4      	b.n	800a5f8 <_printf_i+0x168>
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	4632      	mov	r2, r6
 800a6b2:	4649      	mov	r1, r9
 800a6b4:	4640      	mov	r0, r8
 800a6b6:	47d0      	blx	sl
 800a6b8:	3001      	adds	r0, #1
 800a6ba:	d09b      	beq.n	800a5f4 <_printf_i+0x164>
 800a6bc:	3501      	adds	r5, #1
 800a6be:	68e3      	ldr	r3, [r4, #12]
 800a6c0:	9903      	ldr	r1, [sp, #12]
 800a6c2:	1a5b      	subs	r3, r3, r1
 800a6c4:	42ab      	cmp	r3, r5
 800a6c6:	dcf2      	bgt.n	800a6ae <_printf_i+0x21e>
 800a6c8:	e7eb      	b.n	800a6a2 <_printf_i+0x212>
 800a6ca:	2500      	movs	r5, #0
 800a6cc:	f104 0619 	add.w	r6, r4, #25
 800a6d0:	e7f5      	b.n	800a6be <_printf_i+0x22e>
 800a6d2:	bf00      	nop
 800a6d4:	0800aab5 	.word	0x0800aab5
 800a6d8:	0800aac6 	.word	0x0800aac6

0800a6dc <memmove>:
 800a6dc:	4288      	cmp	r0, r1
 800a6de:	b510      	push	{r4, lr}
 800a6e0:	eb01 0402 	add.w	r4, r1, r2
 800a6e4:	d902      	bls.n	800a6ec <memmove+0x10>
 800a6e6:	4284      	cmp	r4, r0
 800a6e8:	4623      	mov	r3, r4
 800a6ea:	d807      	bhi.n	800a6fc <memmove+0x20>
 800a6ec:	1e43      	subs	r3, r0, #1
 800a6ee:	42a1      	cmp	r1, r4
 800a6f0:	d008      	beq.n	800a704 <memmove+0x28>
 800a6f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6fa:	e7f8      	b.n	800a6ee <memmove+0x12>
 800a6fc:	4402      	add	r2, r0
 800a6fe:	4601      	mov	r1, r0
 800a700:	428a      	cmp	r2, r1
 800a702:	d100      	bne.n	800a706 <memmove+0x2a>
 800a704:	bd10      	pop	{r4, pc}
 800a706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a70a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a70e:	e7f7      	b.n	800a700 <memmove+0x24>

0800a710 <_free_r>:
 800a710:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a712:	2900      	cmp	r1, #0
 800a714:	d048      	beq.n	800a7a8 <_free_r+0x98>
 800a716:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a71a:	9001      	str	r0, [sp, #4]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f1a1 0404 	sub.w	r4, r1, #4
 800a722:	bfb8      	it	lt
 800a724:	18e4      	addlt	r4, r4, r3
 800a726:	f000 f8d3 	bl	800a8d0 <__malloc_lock>
 800a72a:	4a20      	ldr	r2, [pc, #128]	; (800a7ac <_free_r+0x9c>)
 800a72c:	9801      	ldr	r0, [sp, #4]
 800a72e:	6813      	ldr	r3, [r2, #0]
 800a730:	4615      	mov	r5, r2
 800a732:	b933      	cbnz	r3, 800a742 <_free_r+0x32>
 800a734:	6063      	str	r3, [r4, #4]
 800a736:	6014      	str	r4, [r2, #0]
 800a738:	b003      	add	sp, #12
 800a73a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a73e:	f000 b8cd 	b.w	800a8dc <__malloc_unlock>
 800a742:	42a3      	cmp	r3, r4
 800a744:	d90b      	bls.n	800a75e <_free_r+0x4e>
 800a746:	6821      	ldr	r1, [r4, #0]
 800a748:	1862      	adds	r2, r4, r1
 800a74a:	4293      	cmp	r3, r2
 800a74c:	bf04      	itt	eq
 800a74e:	681a      	ldreq	r2, [r3, #0]
 800a750:	685b      	ldreq	r3, [r3, #4]
 800a752:	6063      	str	r3, [r4, #4]
 800a754:	bf04      	itt	eq
 800a756:	1852      	addeq	r2, r2, r1
 800a758:	6022      	streq	r2, [r4, #0]
 800a75a:	602c      	str	r4, [r5, #0]
 800a75c:	e7ec      	b.n	800a738 <_free_r+0x28>
 800a75e:	461a      	mov	r2, r3
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	b10b      	cbz	r3, 800a768 <_free_r+0x58>
 800a764:	42a3      	cmp	r3, r4
 800a766:	d9fa      	bls.n	800a75e <_free_r+0x4e>
 800a768:	6811      	ldr	r1, [r2, #0]
 800a76a:	1855      	adds	r5, r2, r1
 800a76c:	42a5      	cmp	r5, r4
 800a76e:	d10b      	bne.n	800a788 <_free_r+0x78>
 800a770:	6824      	ldr	r4, [r4, #0]
 800a772:	4421      	add	r1, r4
 800a774:	1854      	adds	r4, r2, r1
 800a776:	42a3      	cmp	r3, r4
 800a778:	6011      	str	r1, [r2, #0]
 800a77a:	d1dd      	bne.n	800a738 <_free_r+0x28>
 800a77c:	681c      	ldr	r4, [r3, #0]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	6053      	str	r3, [r2, #4]
 800a782:	4421      	add	r1, r4
 800a784:	6011      	str	r1, [r2, #0]
 800a786:	e7d7      	b.n	800a738 <_free_r+0x28>
 800a788:	d902      	bls.n	800a790 <_free_r+0x80>
 800a78a:	230c      	movs	r3, #12
 800a78c:	6003      	str	r3, [r0, #0]
 800a78e:	e7d3      	b.n	800a738 <_free_r+0x28>
 800a790:	6825      	ldr	r5, [r4, #0]
 800a792:	1961      	adds	r1, r4, r5
 800a794:	428b      	cmp	r3, r1
 800a796:	bf04      	itt	eq
 800a798:	6819      	ldreq	r1, [r3, #0]
 800a79a:	685b      	ldreq	r3, [r3, #4]
 800a79c:	6063      	str	r3, [r4, #4]
 800a79e:	bf04      	itt	eq
 800a7a0:	1949      	addeq	r1, r1, r5
 800a7a2:	6021      	streq	r1, [r4, #0]
 800a7a4:	6054      	str	r4, [r2, #4]
 800a7a6:	e7c7      	b.n	800a738 <_free_r+0x28>
 800a7a8:	b003      	add	sp, #12
 800a7aa:	bd30      	pop	{r4, r5, pc}
 800a7ac:	24004a70 	.word	0x24004a70

0800a7b0 <_malloc_r>:
 800a7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b2:	1ccd      	adds	r5, r1, #3
 800a7b4:	f025 0503 	bic.w	r5, r5, #3
 800a7b8:	3508      	adds	r5, #8
 800a7ba:	2d0c      	cmp	r5, #12
 800a7bc:	bf38      	it	cc
 800a7be:	250c      	movcc	r5, #12
 800a7c0:	2d00      	cmp	r5, #0
 800a7c2:	4606      	mov	r6, r0
 800a7c4:	db01      	blt.n	800a7ca <_malloc_r+0x1a>
 800a7c6:	42a9      	cmp	r1, r5
 800a7c8:	d903      	bls.n	800a7d2 <_malloc_r+0x22>
 800a7ca:	230c      	movs	r3, #12
 800a7cc:	6033      	str	r3, [r6, #0]
 800a7ce:	2000      	movs	r0, #0
 800a7d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7d2:	f000 f87d 	bl	800a8d0 <__malloc_lock>
 800a7d6:	4921      	ldr	r1, [pc, #132]	; (800a85c <_malloc_r+0xac>)
 800a7d8:	680a      	ldr	r2, [r1, #0]
 800a7da:	4614      	mov	r4, r2
 800a7dc:	b99c      	cbnz	r4, 800a806 <_malloc_r+0x56>
 800a7de:	4f20      	ldr	r7, [pc, #128]	; (800a860 <_malloc_r+0xb0>)
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	b923      	cbnz	r3, 800a7ee <_malloc_r+0x3e>
 800a7e4:	4621      	mov	r1, r4
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	f000 f862 	bl	800a8b0 <_sbrk_r>
 800a7ec:	6038      	str	r0, [r7, #0]
 800a7ee:	4629      	mov	r1, r5
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	f000 f85d 	bl	800a8b0 <_sbrk_r>
 800a7f6:	1c43      	adds	r3, r0, #1
 800a7f8:	d123      	bne.n	800a842 <_malloc_r+0x92>
 800a7fa:	230c      	movs	r3, #12
 800a7fc:	6033      	str	r3, [r6, #0]
 800a7fe:	4630      	mov	r0, r6
 800a800:	f000 f86c 	bl	800a8dc <__malloc_unlock>
 800a804:	e7e3      	b.n	800a7ce <_malloc_r+0x1e>
 800a806:	6823      	ldr	r3, [r4, #0]
 800a808:	1b5b      	subs	r3, r3, r5
 800a80a:	d417      	bmi.n	800a83c <_malloc_r+0x8c>
 800a80c:	2b0b      	cmp	r3, #11
 800a80e:	d903      	bls.n	800a818 <_malloc_r+0x68>
 800a810:	6023      	str	r3, [r4, #0]
 800a812:	441c      	add	r4, r3
 800a814:	6025      	str	r5, [r4, #0]
 800a816:	e004      	b.n	800a822 <_malloc_r+0x72>
 800a818:	6863      	ldr	r3, [r4, #4]
 800a81a:	42a2      	cmp	r2, r4
 800a81c:	bf0c      	ite	eq
 800a81e:	600b      	streq	r3, [r1, #0]
 800a820:	6053      	strne	r3, [r2, #4]
 800a822:	4630      	mov	r0, r6
 800a824:	f000 f85a 	bl	800a8dc <__malloc_unlock>
 800a828:	f104 000b 	add.w	r0, r4, #11
 800a82c:	1d23      	adds	r3, r4, #4
 800a82e:	f020 0007 	bic.w	r0, r0, #7
 800a832:	1ac2      	subs	r2, r0, r3
 800a834:	d0cc      	beq.n	800a7d0 <_malloc_r+0x20>
 800a836:	1a1b      	subs	r3, r3, r0
 800a838:	50a3      	str	r3, [r4, r2]
 800a83a:	e7c9      	b.n	800a7d0 <_malloc_r+0x20>
 800a83c:	4622      	mov	r2, r4
 800a83e:	6864      	ldr	r4, [r4, #4]
 800a840:	e7cc      	b.n	800a7dc <_malloc_r+0x2c>
 800a842:	1cc4      	adds	r4, r0, #3
 800a844:	f024 0403 	bic.w	r4, r4, #3
 800a848:	42a0      	cmp	r0, r4
 800a84a:	d0e3      	beq.n	800a814 <_malloc_r+0x64>
 800a84c:	1a21      	subs	r1, r4, r0
 800a84e:	4630      	mov	r0, r6
 800a850:	f000 f82e 	bl	800a8b0 <_sbrk_r>
 800a854:	3001      	adds	r0, #1
 800a856:	d1dd      	bne.n	800a814 <_malloc_r+0x64>
 800a858:	e7cf      	b.n	800a7fa <_malloc_r+0x4a>
 800a85a:	bf00      	nop
 800a85c:	24004a70 	.word	0x24004a70
 800a860:	24004a74 	.word	0x24004a74

0800a864 <_realloc_r>:
 800a864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a866:	4607      	mov	r7, r0
 800a868:	4614      	mov	r4, r2
 800a86a:	460e      	mov	r6, r1
 800a86c:	b921      	cbnz	r1, 800a878 <_realloc_r+0x14>
 800a86e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a872:	4611      	mov	r1, r2
 800a874:	f7ff bf9c 	b.w	800a7b0 <_malloc_r>
 800a878:	b922      	cbnz	r2, 800a884 <_realloc_r+0x20>
 800a87a:	f7ff ff49 	bl	800a710 <_free_r>
 800a87e:	4625      	mov	r5, r4
 800a880:	4628      	mov	r0, r5
 800a882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a884:	f000 f830 	bl	800a8e8 <_malloc_usable_size_r>
 800a888:	42a0      	cmp	r0, r4
 800a88a:	d20f      	bcs.n	800a8ac <_realloc_r+0x48>
 800a88c:	4621      	mov	r1, r4
 800a88e:	4638      	mov	r0, r7
 800a890:	f7ff ff8e 	bl	800a7b0 <_malloc_r>
 800a894:	4605      	mov	r5, r0
 800a896:	2800      	cmp	r0, #0
 800a898:	d0f2      	beq.n	800a880 <_realloc_r+0x1c>
 800a89a:	4631      	mov	r1, r6
 800a89c:	4622      	mov	r2, r4
 800a89e:	f7ff fbf7 	bl	800a090 <memcpy>
 800a8a2:	4631      	mov	r1, r6
 800a8a4:	4638      	mov	r0, r7
 800a8a6:	f7ff ff33 	bl	800a710 <_free_r>
 800a8aa:	e7e9      	b.n	800a880 <_realloc_r+0x1c>
 800a8ac:	4635      	mov	r5, r6
 800a8ae:	e7e7      	b.n	800a880 <_realloc_r+0x1c>

0800a8b0 <_sbrk_r>:
 800a8b0:	b538      	push	{r3, r4, r5, lr}
 800a8b2:	4d06      	ldr	r5, [pc, #24]	; (800a8cc <_sbrk_r+0x1c>)
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	4604      	mov	r4, r0
 800a8b8:	4608      	mov	r0, r1
 800a8ba:	602b      	str	r3, [r5, #0]
 800a8bc:	f7f6 fdbe 	bl	800143c <_sbrk>
 800a8c0:	1c43      	adds	r3, r0, #1
 800a8c2:	d102      	bne.n	800a8ca <_sbrk_r+0x1a>
 800a8c4:	682b      	ldr	r3, [r5, #0]
 800a8c6:	b103      	cbz	r3, 800a8ca <_sbrk_r+0x1a>
 800a8c8:	6023      	str	r3, [r4, #0]
 800a8ca:	bd38      	pop	{r3, r4, r5, pc}
 800a8cc:	24005100 	.word	0x24005100

0800a8d0 <__malloc_lock>:
 800a8d0:	4801      	ldr	r0, [pc, #4]	; (800a8d8 <__malloc_lock+0x8>)
 800a8d2:	f000 b811 	b.w	800a8f8 <__retarget_lock_acquire_recursive>
 800a8d6:	bf00      	nop
 800a8d8:	24005108 	.word	0x24005108

0800a8dc <__malloc_unlock>:
 800a8dc:	4801      	ldr	r0, [pc, #4]	; (800a8e4 <__malloc_unlock+0x8>)
 800a8de:	f000 b80c 	b.w	800a8fa <__retarget_lock_release_recursive>
 800a8e2:	bf00      	nop
 800a8e4:	24005108 	.word	0x24005108

0800a8e8 <_malloc_usable_size_r>:
 800a8e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8ec:	1f18      	subs	r0, r3, #4
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	bfbc      	itt	lt
 800a8f2:	580b      	ldrlt	r3, [r1, r0]
 800a8f4:	18c0      	addlt	r0, r0, r3
 800a8f6:	4770      	bx	lr

0800a8f8 <__retarget_lock_acquire_recursive>:
 800a8f8:	4770      	bx	lr

0800a8fa <__retarget_lock_release_recursive>:
 800a8fa:	4770      	bx	lr

0800a8fc <_init>:
 800a8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8fe:	bf00      	nop
 800a900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a902:	bc08      	pop	{r3}
 800a904:	469e      	mov	lr, r3
 800a906:	4770      	bx	lr

0800a908 <_fini>:
 800a908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a90a:	bf00      	nop
 800a90c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a90e:	bc08      	pop	{r3}
 800a910:	469e      	mov	lr, r3
 800a912:	4770      	bx	lr
