
Linear_Actuator_IRC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fa58  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  0800fcf8  0800fcf8  0001fcf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ffa8  0800ffa8  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  0800ffa8  0800ffa8  0001ffa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ffb0  0800ffb0  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ffb0  0800ffb0  0001ffb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ffb4  0800ffb4  0001ffb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  24000000  0800ffb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000051b4  24000024  0800ffdc  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240051d8  0800ffdc  000251d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003c7d1  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000058b0  00000000  00000000  0005c823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002438  00000000  00000000  000620d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002290  00000000  00000000  00064510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f212  00000000  00000000  000667a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028dd7  00000000  00000000  000a59b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001ad394  00000000  00000000  000ce789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0027bb1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009eb8  00000000  00000000  0027bb70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000024 	.word	0x24000024
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800fce0 	.word	0x0800fce0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000028 	.word	0x24000028
 80002dc:	0800fce0 	.word	0x0800fce0

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005dc:	4b3f      	ldr	r3, [pc, #252]	; (80006dc <SystemInit+0x104>)
 80005de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e2:	4a3e      	ldr	r2, [pc, #248]	; (80006dc <SystemInit+0x104>)
 80005e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005ec:	4b3b      	ldr	r3, [pc, #236]	; (80006dc <SystemInit+0x104>)
 80005ee:	691b      	ldr	r3, [r3, #16]
 80005f0:	4a3a      	ldr	r2, [pc, #232]	; (80006dc <SystemInit+0x104>)
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f8:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <SystemInit+0x108>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f003 030f 	and.w	r3, r3, #15
 8000600:	2b06      	cmp	r3, #6
 8000602:	d807      	bhi.n	8000614 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <SystemInit+0x108>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f023 030f 	bic.w	r3, r3, #15
 800060c:	4a34      	ldr	r2, [pc, #208]	; (80006e0 <SystemInit+0x108>)
 800060e:	f043 0307 	orr.w	r3, r3, #7
 8000612:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000614:	4b33      	ldr	r3, [pc, #204]	; (80006e4 <SystemInit+0x10c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a32      	ldr	r2, [pc, #200]	; (80006e4 <SystemInit+0x10c>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000620:	4b30      	ldr	r3, [pc, #192]	; (80006e4 <SystemInit+0x10c>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000626:	4b2f      	ldr	r3, [pc, #188]	; (80006e4 <SystemInit+0x10c>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	492e      	ldr	r1, [pc, #184]	; (80006e4 <SystemInit+0x10c>)
 800062c:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <SystemInit+0x110>)
 800062e:	4013      	ands	r3, r2
 8000630:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000632:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <SystemInit+0x108>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f003 0308 	and.w	r3, r3, #8
 800063a:	2b00      	cmp	r3, #0
 800063c:	d007      	beq.n	800064e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063e:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <SystemInit+0x108>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f023 030f 	bic.w	r3, r3, #15
 8000646:	4a26      	ldr	r2, [pc, #152]	; (80006e0 <SystemInit+0x108>)
 8000648:	f043 0307 	orr.w	r3, r3, #7
 800064c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064e:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <SystemInit+0x10c>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <SystemInit+0x10c>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemInit+0x10c>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000660:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <SystemInit+0x10c>)
 8000662:	4a22      	ldr	r2, [pc, #136]	; (80006ec <SystemInit+0x114>)
 8000664:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000666:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemInit+0x10c>)
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <SystemInit+0x118>)
 800066a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <SystemInit+0x10c>)
 800066e:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <SystemInit+0x11c>)
 8000670:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <SystemInit+0x10c>)
 8000674:	2200      	movs	r2, #0
 8000676:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <SystemInit+0x10c>)
 800067a:	4a1e      	ldr	r2, [pc, #120]	; (80006f4 <SystemInit+0x11c>)
 800067c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <SystemInit+0x10c>)
 8000680:	2200      	movs	r2, #0
 8000682:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <SystemInit+0x10c>)
 8000686:	4a1b      	ldr	r2, [pc, #108]	; (80006f4 <SystemInit+0x11c>)
 8000688:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <SystemInit+0x10c>)
 800068c:	2200      	movs	r2, #0
 800068e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <SystemInit+0x10c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <SystemInit+0x10c>)
 8000696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <SystemInit+0x10c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <SystemInit+0x120>)
 80006a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a6:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <SystemInit+0x120>)
 80006a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <SystemInit+0x124>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <SystemInit+0x128>)
 80006b4:	4013      	ands	r3, r2
 80006b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006ba:	d202      	bcs.n	80006c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <SystemInit+0x12c>)
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <SystemInit+0x130>)
 80006c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006ca:	4b04      	ldr	r3, [pc, #16]	; (80006dc <SystemInit+0x104>)
 80006cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00
 80006e0:	52002000 	.word	0x52002000
 80006e4:	58024400 	.word	0x58024400
 80006e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80006ec:	02020200 	.word	0x02020200
 80006f0:	01ff0000 	.word	0x01ff0000
 80006f4:	01010280 	.word	0x01010280
 80006f8:	580000c0 	.word	0x580000c0
 80006fc:	5c001000 	.word	0x5c001000
 8000700:	ffff0000 	.word	0xffff0000
 8000704:	51008108 	.word	0x51008108
 8000708:	52004000 	.word	0x52004000

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000712:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000716:	60fb      	str	r3, [r7, #12]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000718:	bf00      	nop
 800071a:	4b68      	ldr	r3, [pc, #416]	; (80008bc <main+0x1b0>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000722:	2b00      	cmp	r3, #0
 8000724:	d004      	beq.n	8000730 <main+0x24>
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	1e5a      	subs	r2, r3, #1
 800072a:	60fa      	str	r2, [r7, #12]
 800072c:	2b00      	cmp	r3, #0
 800072e:	dcf4      	bgt.n	800071a <main+0xe>
		;
	if (timeout < 0) {
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	2b00      	cmp	r3, #0
 8000734:	da01      	bge.n	800073a <main+0x2e>
		Error_Handler();
 8000736:	f000 ff81 	bl	800163c <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073a:	f001 fb7b 	bl	8001e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073e:	f000 f8fd 	bl	800093c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000742:	f000 f981 	bl	8000a48 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000746:	4b5d      	ldr	r3, [pc, #372]	; (80008bc <main+0x1b0>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	4a5b      	ldr	r2, [pc, #364]	; (80008bc <main+0x1b0>)
 800074e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000752:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000756:	4b59      	ldr	r3, [pc, #356]	; (80008bc <main+0x1b0>)
 8000758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000764:	2000      	movs	r0, #0
 8000766:	f006 fd2f 	bl	80071c8 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 800076a:	2100      	movs	r1, #0
 800076c:	2000      	movs	r0, #0
 800076e:	f006 fd45 	bl	80071fc <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000772:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000776:	60fb      	str	r3, [r7, #12]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000778:	bf00      	nop
 800077a:	4b50      	ldr	r3, [pc, #320]	; (80008bc <main+0x1b0>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000782:	2b00      	cmp	r3, #0
 8000784:	d104      	bne.n	8000790 <main+0x84>
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	1e5a      	subs	r2, r3, #1
 800078a:	60fa      	str	r2, [r7, #12]
 800078c:	2b00      	cmp	r3, #0
 800078e:	dcf4      	bgt.n	800077a <main+0x6e>
		;
	if (timeout < 0) {
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	2b00      	cmp	r3, #0
 8000794:	da01      	bge.n	800079a <main+0x8e>
		Error_Handler();
 8000796:	f000 ff51 	bl	800163c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079a:	f000 fc71 	bl	8001080 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800079e:	f000 fa5f 	bl	8000c60 <MX_FDCAN1_Init>
  MX_TIM2_Init();
 80007a2:	f000 fb0d 	bl	8000dc0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80007a6:	f000 fb5f 	bl	8000e68 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 80007aa:	f000 fbc3 	bl	8000f34 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007ae:	f000 fc0d 	bl	8000fcc <MX_USB_OTG_FS_PCD_Init>
  MX_DMA_Init();
 80007b2:	f000 fc3d 	bl	8001030 <MX_DMA_Init>
  MX_ADC1_Init();
 80007b6:	f000 f975 	bl	8000aa4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80007ba:	f000 f9eb 	bl	8000b94 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

	for(int i=0; i<2; i++){
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	e01a      	b.n	80007fa <main+0xee>
		HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 80007c4:	2101      	movs	r1, #1
 80007c6:	483e      	ldr	r0, [pc, #248]	; (80008c0 <main+0x1b4>)
 80007c8:	f006 fce3 	bl	8007192 <HAL_GPIO_TogglePin>
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxDataInit) != HAL_OK){
 80007cc:	4a3d      	ldr	r2, [pc, #244]	; (80008c4 <main+0x1b8>)
 80007ce:	493e      	ldr	r1, [pc, #248]	; (80008c8 <main+0x1bc>)
 80007d0:	483e      	ldr	r0, [pc, #248]	; (80008cc <main+0x1c0>)
 80007d2:	f005 fbba 	bl	8005f4a <HAL_FDCAN_AddMessageToTxFifoQ>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d002      	beq.n	80007e2 <main+0xd6>
			Error_Handler();
 80007dc:	f000 ff2e 	bl	800163c <Error_Handler>
 80007e0:	e004      	b.n	80007ec <main+0xe0>
		}
		else{
			HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 80007e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e6:	4836      	ldr	r0, [pc, #216]	; (80008c0 <main+0x1b4>)
 80007e8:	f006 fcd3 	bl	8007192 <HAL_GPIO_TogglePin>
		}
		HAL_Delay(500);
 80007ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007f0:	f001 fbb2 	bl	8001f58 <HAL_Delay>
	for(int i=0; i<2; i++){
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	3301      	adds	r3, #1
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	dde1      	ble.n	80007c4 <main+0xb8>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000800:	f00c fafa 	bl	800cdf8 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of positionControlQueue */
  positionControlQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &positionControlQueue_attributes);
 8000804:	4a32      	ldr	r2, [pc, #200]	; (80008d0 <main+0x1c4>)
 8000806:	2102      	movs	r1, #2
 8000808:	2010      	movs	r0, #16
 800080a:	f00c fbec 	bl	800cfe6 <osMessageQueueNew>
 800080e:	4603      	mov	r3, r0
 8000810:	4a30      	ldr	r2, [pc, #192]	; (80008d4 <main+0x1c8>)
 8000812:	6013      	str	r3, [r2, #0]

  /* creation of positionCanQueue */
  positionCanQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &positionCanQueue_attributes);
 8000814:	4a30      	ldr	r2, [pc, #192]	; (80008d8 <main+0x1cc>)
 8000816:	2102      	movs	r1, #2
 8000818:	2010      	movs	r0, #16
 800081a:	f00c fbe4 	bl	800cfe6 <osMessageQueueNew>
 800081e:	4603      	mov	r3, r0
 8000820:	4a2e      	ldr	r2, [pc, #184]	; (80008dc <main+0x1d0>)
 8000822:	6013      	str	r3, [r2, #0]

  /* creation of doneQueue */
  doneQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &doneQueue_attributes);
 8000824:	4a2e      	ldr	r2, [pc, #184]	; (80008e0 <main+0x1d4>)
 8000826:	2102      	movs	r1, #2
 8000828:	2010      	movs	r0, #16
 800082a:	f00c fbdc 	bl	800cfe6 <osMessageQueueNew>
 800082e:	4603      	mov	r3, r0
 8000830:	4a2c      	ldr	r2, [pc, #176]	; (80008e4 <main+0x1d8>)
 8000832:	6013      	str	r3, [r2, #0]

  /* creation of systemDiagnosisQueue */
  systemDiagnosisQueueHandle = osMessageQueueNew (16, sizeof(status), &systemDiagnosisQueue_attributes);
 8000834:	4a2c      	ldr	r2, [pc, #176]	; (80008e8 <main+0x1dc>)
 8000836:	2102      	movs	r1, #2
 8000838:	2010      	movs	r0, #16
 800083a:	f00c fbd4 	bl	800cfe6 <osMessageQueueNew>
 800083e:	4603      	mov	r3, r0
 8000840:	4a2a      	ldr	r2, [pc, #168]	; (80008ec <main+0x1e0>)
 8000842:	6013      	str	r3, [r2, #0]

  /* creation of canDiagnosisQueue */
  canDiagnosisQueueHandle = osMessageQueueNew (16, sizeof(status), &canDiagnosisQueue_attributes);
 8000844:	4a2a      	ldr	r2, [pc, #168]	; (80008f0 <main+0x1e4>)
 8000846:	2102      	movs	r1, #2
 8000848:	2010      	movs	r0, #16
 800084a:	f00c fbcc 	bl	800cfe6 <osMessageQueueNew>
 800084e:	4603      	mov	r3, r0
 8000850:	4a28      	ldr	r2, [pc, #160]	; (80008f4 <main+0x1e8>)
 8000852:	6013      	str	r3, [r2, #0]

  /* creation of interCanQueue */
  interCanQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &interCanQueue_attributes);
 8000854:	4a28      	ldr	r2, [pc, #160]	; (80008f8 <main+0x1ec>)
 8000856:	2102      	movs	r1, #2
 8000858:	2010      	movs	r0, #16
 800085a:	f00c fbc4 	bl	800cfe6 <osMessageQueueNew>
 800085e:	4603      	mov	r3, r0
 8000860:	4a26      	ldr	r2, [pc, #152]	; (80008fc <main+0x1f0>)
 8000862:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of readEncoderTask */
  readEncoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &readEncoderTask_attributes);
 8000864:	4a26      	ldr	r2, [pc, #152]	; (8000900 <main+0x1f4>)
 8000866:	2100      	movs	r1, #0
 8000868:	4826      	ldr	r0, [pc, #152]	; (8000904 <main+0x1f8>)
 800086a:	f00c fb0f 	bl	800ce8c <osThreadNew>
 800086e:	4603      	mov	r3, r0
 8000870:	4a25      	ldr	r2, [pc, #148]	; (8000908 <main+0x1fc>)
 8000872:	6013      	str	r3, [r2, #0]

  /* creation of controlTask */
  controlTaskHandle = osThreadNew(StartControlTask, NULL, &controlTask_attributes);
 8000874:	4a25      	ldr	r2, [pc, #148]	; (800090c <main+0x200>)
 8000876:	2100      	movs	r1, #0
 8000878:	4825      	ldr	r0, [pc, #148]	; (8000910 <main+0x204>)
 800087a:	f00c fb07 	bl	800ce8c <osThreadNew>
 800087e:	4603      	mov	r3, r0
 8000880:	4a24      	ldr	r2, [pc, #144]	; (8000914 <main+0x208>)
 8000882:	6013      	str	r3, [r2, #0]

  /* creation of diagnosisTask */
  diagnosisTaskHandle = osThreadNew(StartDiagnosisTask, NULL, &diagnosisTask_attributes);
 8000884:	4a24      	ldr	r2, [pc, #144]	; (8000918 <main+0x20c>)
 8000886:	2100      	movs	r1, #0
 8000888:	4824      	ldr	r0, [pc, #144]	; (800091c <main+0x210>)
 800088a:	f00c faff 	bl	800ce8c <osThreadNew>
 800088e:	4603      	mov	r3, r0
 8000890:	4a23      	ldr	r2, [pc, #140]	; (8000920 <main+0x214>)
 8000892:	6013      	str	r3, [r2, #0]

  /* creation of canRxTask */
  canRxTaskHandle = osThreadNew(StartCanRxTask, NULL, &canRxTask_attributes);
 8000894:	4a23      	ldr	r2, [pc, #140]	; (8000924 <main+0x218>)
 8000896:	2100      	movs	r1, #0
 8000898:	4823      	ldr	r0, [pc, #140]	; (8000928 <main+0x21c>)
 800089a:	f00c faf7 	bl	800ce8c <osThreadNew>
 800089e:	4603      	mov	r3, r0
 80008a0:	4a22      	ldr	r2, [pc, #136]	; (800092c <main+0x220>)
 80008a2:	6013      	str	r3, [r2, #0]

  /* creation of canTxTask */
  canTxTaskHandle = osThreadNew(StartCanTxTask, NULL, &canTxTask_attributes);
 80008a4:	4a22      	ldr	r2, [pc, #136]	; (8000930 <main+0x224>)
 80008a6:	2100      	movs	r1, #0
 80008a8:	4822      	ldr	r0, [pc, #136]	; (8000934 <main+0x228>)
 80008aa:	f00c faef 	bl	800ce8c <osThreadNew>
 80008ae:	4603      	mov	r3, r0
 80008b0:	4a21      	ldr	r2, [pc, #132]	; (8000938 <main+0x22c>)
 80008b2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008b4:	f00c fac4 	bl	800ce40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80008b8:	e7fe      	b.n	80008b8 <main+0x1ac>
 80008ba:	bf00      	nop
 80008bc:	58024400 	.word	0x58024400
 80008c0:	58020400 	.word	0x58020400
 80008c4:	24000008 	.word	0x24000008
 80008c8:	24005148 	.word	0x24005148
 80008cc:	24004fd4 	.word	0x24004fd4
 80008d0:	0800fed8 	.word	0x0800fed8
 80008d4:	24005074 	.word	0x24005074
 80008d8:	0800fef0 	.word	0x0800fef0
 80008dc:	24004ed8 	.word	0x24004ed8
 80008e0:	0800ff08 	.word	0x0800ff08
 80008e4:	24004fd0 	.word	0x24004fd0
 80008e8:	0800ff20 	.word	0x0800ff20
 80008ec:	24004a6c 	.word	0x24004a6c
 80008f0:	0800ff38 	.word	0x0800ff38
 80008f4:	24004ee0 	.word	0x24004ee0
 80008f8:	0800ff50 	.word	0x0800ff50
 80008fc:	24004f48 	.word	0x24004f48
 8000900:	0800fe24 	.word	0x0800fe24
 8000904:	0800123d 	.word	0x0800123d
 8000908:	24004e7c 	.word	0x24004e7c
 800090c:	0800fe48 	.word	0x0800fe48
 8000910:	0800124d 	.word	0x0800124d
 8000914:	24005078 	.word	0x24005078
 8000918:	0800fe6c 	.word	0x0800fe6c
 800091c:	08001261 	.word	0x08001261
 8000920:	24004ed0 	.word	0x24004ed0
 8000924:	0800fe90 	.word	0x0800fe90
 8000928:	08001539 	.word	0x08001539
 800092c:	24004f4c 	.word	0x24004f4c
 8000930:	0800feb4 	.word	0x0800feb4
 8000934:	08001591 	.word	0x08001591
 8000938:	24004e80 	.word	0x24004e80

0800093c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b09c      	sub	sp, #112	; 0x70
 8000940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000946:	224c      	movs	r2, #76	; 0x4c
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f00f f9c0 	bl	800fcd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2220      	movs	r2, #32
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f00f f9ba 	bl	800fcd0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800095c:	2004      	movs	r0, #4
 800095e:	f006 fda9 	bl	80074b4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000962:	2300      	movs	r3, #0
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	4b35      	ldr	r3, [pc, #212]	; (8000a3c <SystemClock_Config+0x100>)
 8000968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800096a:	4a34      	ldr	r2, [pc, #208]	; (8000a3c <SystemClock_Config+0x100>)
 800096c:	f023 0301 	bic.w	r3, r3, #1
 8000970:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000972:	4b32      	ldr	r3, [pc, #200]	; (8000a3c <SystemClock_Config+0x100>)
 8000974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	4b30      	ldr	r3, [pc, #192]	; (8000a40 <SystemClock_Config+0x104>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000984:	4a2e      	ldr	r2, [pc, #184]	; (8000a40 <SystemClock_Config+0x104>)
 8000986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098a:	6193      	str	r3, [r2, #24]
 800098c:	4b2c      	ldr	r3, [pc, #176]	; (8000a40 <SystemClock_Config+0x104>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000998:	bf00      	nop
 800099a:	4b29      	ldr	r3, [pc, #164]	; (8000a40 <SystemClock_Config+0x104>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009a6:	d1f8      	bne.n	800099a <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80009a8:	4b26      	ldr	r3, [pc, #152]	; (8000a44 <SystemClock_Config+0x108>)
 80009aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ac:	f023 0303 	bic.w	r3, r3, #3
 80009b0:	4a24      	ldr	r2, [pc, #144]	; (8000a44 <SystemClock_Config+0x108>)
 80009b2:	f043 0302 	orr.w	r3, r3, #2
 80009b6:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009b8:	2301      	movs	r3, #1
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c2:	2302      	movs	r3, #2
 80009c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009c6:	2302      	movs	r3, #2
 80009c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009ca:	2301      	movs	r3, #1
 80009cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 80009ce:	2314      	movs	r3, #20
 80009d0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009d2:	2302      	movs	r3, #2
 80009d4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009d6:	2304      	movs	r3, #4
 80009d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009da:	2302      	movs	r3, #2
 80009dc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009de:	230c      	movs	r3, #12
 80009e0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80009e2:	2302      	movs	r3, #2
 80009e4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ee:	4618      	mov	r0, r3
 80009f0:	f006 fdca 	bl	8007588 <HAL_RCC_OscConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009fa:	f000 fe1f 	bl	800163c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fe:	233f      	movs	r3, #63	; 0x3f
 8000a00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a02:	2303      	movs	r3, #3
 8000a04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a12:	2340      	movs	r3, #64	; 0x40
 8000a14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2101      	movs	r1, #1
 8000a22:	4618      	mov	r0, r3
 8000a24:	f007 f9c0 	bl	8007da8 <HAL_RCC_ClockConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000a2e:	f000 fe05 	bl	800163c <Error_Handler>
  }
}
 8000a32:	bf00      	nop
 8000a34:	3770      	adds	r7, #112	; 0x70
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	58000400 	.word	0x58000400
 8000a40:	58024800 	.word	0x58024800
 8000a44:	58024400 	.word	0x58024400

08000a48 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b0b0      	sub	sp, #192	; 0xc0
 8000a4c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	22bc      	movs	r2, #188	; 0xbc
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f00f f93b 	bl	800fcd0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a5a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000a5e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000a60:	2301      	movs	r3, #1
 8000a62:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000a64:	2312      	movs	r3, #18
 8000a66:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000a68:	2304      	movs	r3, #4
 8000a6a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a74:	23c0      	movs	r3, #192	; 0xc0
 8000a76:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000a78:	2320      	movs	r3, #32
 8000a7a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8000a7c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a82:	2300      	movs	r3, #0
 8000a84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f007 fd18 	bl	80084c0 <HAL_RCCEx_PeriphCLKConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8000a96:	f000 fdd1 	bl	800163c <Error_Handler>
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	37c0      	adds	r7, #192	; 0xc0
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
 8000ac4:	615a      	str	r2, [r3, #20]
 8000ac6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ac8:	4b2f      	ldr	r3, [pc, #188]	; (8000b88 <MX_ADC1_Init+0xe4>)
 8000aca:	4a30      	ldr	r2, [pc, #192]	; (8000b8c <MX_ADC1_Init+0xe8>)
 8000acc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ace:	4b2e      	ldr	r3, [pc, #184]	; (8000b88 <MX_ADC1_Init+0xe4>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000ad4:	4b2c      	ldr	r3, [pc, #176]	; (8000b88 <MX_ADC1_Init+0xe4>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ada:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <MX_ADC1_Init+0xe4>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ae0:	4b29      	ldr	r3, [pc, #164]	; (8000b88 <MX_ADC1_Init+0xe4>)
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ae6:	4b28      	ldr	r3, [pc, #160]	; (8000b88 <MX_ADC1_Init+0xe4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000aec:	4b26      	ldr	r3, [pc, #152]	; (8000b88 <MX_ADC1_Init+0xe4>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000af2:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <MX_ADC1_Init+0xe4>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000af8:	4b23      	ldr	r3, [pc, #140]	; (8000b88 <MX_ADC1_Init+0xe4>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000afe:	4b22      	ldr	r3, [pc, #136]	; (8000b88 <MX_ADC1_Init+0xe4>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b04:	4b20      	ldr	r3, [pc, #128]	; (8000b88 <MX_ADC1_Init+0xe4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b0a:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <MX_ADC1_Init+0xe4>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b10:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <MX_ADC1_Init+0xe4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <MX_ADC1_Init+0xe4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <MX_ADC1_Init+0xe4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b24:	4818      	ldr	r0, [pc, #96]	; (8000b88 <MX_ADC1_Init+0xe4>)
 8000b26:	f001 fc8d 	bl	8002444 <HAL_ADC_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b30:	f000 fd84 	bl	800163c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4812      	ldr	r0, [pc, #72]	; (8000b88 <MX_ADC1_Init+0xe4>)
 8000b40:	f003 f8d0 	bl	8003ce4 <HAL_ADCEx_MultiModeConfigChannel>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000b4a:	f000 fd77 	bl	800163c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <MX_ADC1_Init+0xec>)
 8000b50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b52:	2306      	movs	r3, #6
 8000b54:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b5a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b5e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b60:	2304      	movs	r3, #4
 8000b62:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_ADC1_Init+0xe4>)
 8000b72:	f002 fa5f 	bl	8003034 <HAL_ADC_ConfigChannel>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000b7c:	f000 fd5e 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	3728      	adds	r7, #40	; 0x28
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	24004ee4 	.word	0x24004ee4
 8000b8c:	40022000 	.word	0x40022000
 8000b90:	08600004 	.word	0x08600004

08000b94 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b088      	sub	sp, #32
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
 8000ba8:	615a      	str	r2, [r3, #20]
 8000baa:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000bac:	4b29      	ldr	r3, [pc, #164]	; (8000c54 <MX_ADC2_Init+0xc0>)
 8000bae:	4a2a      	ldr	r2, [pc, #168]	; (8000c58 <MX_ADC2_Init+0xc4>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bb2:	4b28      	ldr	r3, [pc, #160]	; (8000c54 <MX_ADC2_Init+0xc0>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000bb8:	4b26      	ldr	r3, [pc, #152]	; (8000c54 <MX_ADC2_Init+0xc0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bbe:	4b25      	ldr	r3, [pc, #148]	; (8000c54 <MX_ADC2_Init+0xc0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bc4:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <MX_ADC2_Init+0xc0>)
 8000bc6:	2204      	movs	r2, #4
 8000bc8:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000bca:	4b22      	ldr	r3, [pc, #136]	; (8000c54 <MX_ADC2_Init+0xc0>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000bd0:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <MX_ADC2_Init+0xc0>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000bd6:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <MX_ADC2_Init+0xc0>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000bdc:	4b1d      	ldr	r3, [pc, #116]	; (8000c54 <MX_ADC2_Init+0xc0>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000be2:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <MX_ADC2_Init+0xc0>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000be8:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <MX_ADC2_Init+0xc0>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000bee:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <MX_ADC2_Init+0xc0>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <MX_ADC2_Init+0xc0>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000bfa:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <MX_ADC2_Init+0xc0>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <MX_ADC2_Init+0xc0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c08:	4812      	ldr	r0, [pc, #72]	; (8000c54 <MX_ADC2_Init+0xc0>)
 8000c0a:	f001 fc1b 	bl	8002444 <HAL_ADC_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000c14:	f000 fd12 	bl	800163c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c18:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <MX_ADC2_Init+0xc8>)
 8000c1a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c1c:	2306      	movs	r3, #6
 8000c1e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c24:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c28:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4806      	ldr	r0, [pc, #24]	; (8000c54 <MX_ADC2_Init+0xc0>)
 8000c3c:	f002 f9fa 	bl	8003034 <HAL_ADC_ConfigChannel>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000c46:	f000 fcf9 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	3720      	adds	r7, #32
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	24004a08 	.word	0x24004a08
 8000c58:	40022100 	.word	0x40022100
 8000c5c:	0c900008 	.word	0x0c900008

08000c60 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000c64:	4b52      	ldr	r3, [pc, #328]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000c66:	4a53      	ldr	r2, [pc, #332]	; (8000db4 <MX_FDCAN1_Init+0x154>)
 8000c68:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c6a:	4b51      	ldr	r3, [pc, #324]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000c70:	4b4f      	ldr	r3, [pc, #316]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000c76:	4b4e      	ldr	r3, [pc, #312]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000c7c:	4b4c      	ldr	r3, [pc, #304]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000c82:	4b4b      	ldr	r3, [pc, #300]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 0x1;
 8000c88:	4b49      	ldr	r3, [pc, #292]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 0x8;
 8000c8e:	4b48      	ldr	r3, [pc, #288]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000c90:	2208      	movs	r2, #8
 8000c92:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x1F;
 8000c94:	4b46      	ldr	r3, [pc, #280]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000c96:	221f      	movs	r2, #31
 8000c98:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 0x8;
 8000c9a:	4b45      	ldr	r3, [pc, #276]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000c9c:	2208      	movs	r2, #8
 8000c9e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000ca0:	4b43      	ldr	r3, [pc, #268]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000ca6:	4b42      	ldr	r3, [pc, #264]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000cac:	4b40      	ldr	r3, [pc, #256]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000cb2:	4b3f      	ldr	r3, [pc, #252]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000cb8:	4b3d      	ldr	r3, [pc, #244]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000cbe:	4b3c      	ldr	r3, [pc, #240]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000cc4:	4b3a      	ldr	r3, [pc, #232]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000cca:	4b39      	ldr	r3, [pc, #228]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000cd0:	4b37      	ldr	r3, [pc, #220]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000cd2:	2204      	movs	r2, #4
 8000cd4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000cd6:	4b36      	ldr	r3, [pc, #216]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000cdc:	4b34      	ldr	r3, [pc, #208]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000cde:	2204      	movs	r2, #4
 8000ce0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000ce2:	4b33      	ldr	r3, [pc, #204]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ce8:	4b31      	ldr	r3, [pc, #196]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000cea:	2204      	movs	r2, #4
 8000cec:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000cee:	4b30      	ldr	r3, [pc, #192]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000cf4:	4b2e      	ldr	r3, [pc, #184]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000cfa:	4b2d      	ldr	r3, [pc, #180]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d00:	4b2b      	ldr	r3, [pc, #172]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000d06:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000d08:	2204      	movs	r2, #4
 8000d0a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000d0c:	4828      	ldr	r0, [pc, #160]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000d0e:	f004 fe99 	bl	8005a44 <HAL_FDCAN_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000d18:	f000 fc90 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
	/* Configure Rx filter */
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000d1c:	4b26      	ldr	r3, [pc, #152]	; (8000db8 <MX_FDCAN1_Init+0x158>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIndex = 0;
 8000d22:	4b25      	ldr	r3, [pc, #148]	; (8000db8 <MX_FDCAN1_Init+0x158>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000d28:	4b23      	ldr	r3, [pc, #140]	; (8000db8 <MX_FDCAN1_Init+0x158>)
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000d2e:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <MX_FDCAN1_Init+0x158>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterID1 = 0x140;
 8000d34:	4b20      	ldr	r3, [pc, #128]	; (8000db8 <MX_FDCAN1_Init+0x158>)
 8000d36:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000d3a:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <MX_FDCAN1_Init+0x158>)
 8000d3e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000d42:	615a      	str	r2, [r3, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000d44:	491c      	ldr	r1, [pc, #112]	; (8000db8 <MX_FDCAN1_Init+0x158>)
 8000d46:	481a      	ldr	r0, [pc, #104]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000d48:	f005 f85e 	bl	8005e08 <HAL_FDCAN_ConfigFilter>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_FDCAN1_Init+0xf6>
	{
	  /* Filter configuration Error */
	  Error_Handler();
 8000d52:	f000 fc73 	bl	800163c <Error_Handler>
	}

	 /* Start the FDCAN module */
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000d56:	4816      	ldr	r0, [pc, #88]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000d58:	f005 f8cc 	bl	8005ef4 <HAL_FDCAN_Start>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d00a      	beq.n	8000d78 <MX_FDCAN1_Init+0x118>
	    /* Start Error */

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000d62:	2200      	movs	r2, #0
 8000d64:	2101      	movs	r1, #1
 8000d66:	4812      	ldr	r0, [pc, #72]	; (8000db0 <MX_FDCAN1_Init+0x150>)
 8000d68:	f005 fab8 	bl	80062dc <HAL_FDCAN_ActivateNotification>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d002      	beq.n	8000d78 <MX_FDCAN1_Init+0x118>
	    /* Notification Error */

	  /* Prepare Tx Header */
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000d72:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <MX_FDCAN1_Init+0x15c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	605a      	str	r2, [r3, #4]
	TxHeader.Identifier = 0x140;
 8000d78:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <MX_FDCAN1_Init+0x15c>)
 8000d7a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000d7e:	601a      	str	r2, [r3, #0]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <MX_FDCAN1_Init+0x15c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000d86:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <MX_FDCAN1_Init+0x15c>)
 8000d88:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d8c:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <MX_FDCAN1_Init+0x15c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <MX_FDCAN1_Init+0x15c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000d9a:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <MX_FDCAN1_Init+0x15c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <MX_FDCAN1_Init+0x15c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 8000da6:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <MX_FDCAN1_Init+0x15c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	24004fd4 	.word	0x24004fd4
 8000db4:	4000a000 	.word	0x4000a000
 8000db8:	24004954 	.word	0x24004954
 8000dbc:	24005148 	.word	0x24005148

08000dc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08c      	sub	sp, #48	; 0x30
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dc6:	f107 030c 	add.w	r3, r7, #12
 8000dca:	2224      	movs	r2, #36	; 0x24
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f00e ff7e 	bl	800fcd0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd4:	463b      	mov	r3, r7
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dde:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <MX_TIM2_Init+0xa4>)
 8000de0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000de4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000de6:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <MX_TIM2_Init+0xa4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dec:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <MX_TIM2_Init+0xa4>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000df2:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <MX_TIM2_Init+0xa4>)
 8000df4:	f04f 32ff 	mov.w	r2, #4294967295
 8000df8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <MX_TIM2_Init+0xa4>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e00:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <MX_TIM2_Init+0xa4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e06:	2301      	movs	r3, #1
 8000e08:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000e16:	230a      	movs	r3, #10
 8000e18:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000e26:	230a      	movs	r3, #10
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000e2a:	f107 030c 	add.w	r3, r7, #12
 8000e2e:	4619      	mov	r1, r3
 8000e30:	480c      	ldr	r0, [pc, #48]	; (8000e64 <MX_TIM2_Init+0xa4>)
 8000e32:	f009 fd23 	bl	800a87c <HAL_TIM_Encoder_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000e3c:	f000 fbfe 	bl	800163c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e40:	2300      	movs	r3, #0
 8000e42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e48:	463b      	mov	r3, r7
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4805      	ldr	r0, [pc, #20]	; (8000e64 <MX_TIM2_Init+0xa4>)
 8000e4e:	f00a fb85 	bl	800b55c <HAL_TIMEx_MasterConfigSynchronization>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000e58:	f000 fbf0 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	3730      	adds	r7, #48	; 0x30
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	24005084 	.word	0x24005084

08000e68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e6e:	f107 031c 	add.w	r3, r7, #28
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
 8000e88:	615a      	str	r2, [r3, #20]
 8000e8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e8c:	4b27      	ldr	r3, [pc, #156]	; (8000f2c <MX_TIM3_Init+0xc4>)
 8000e8e:	4a28      	ldr	r2, [pc, #160]	; (8000f30 <MX_TIM3_Init+0xc8>)
 8000e90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8000e92:	4b26      	ldr	r3, [pc, #152]	; (8000f2c <MX_TIM3_Init+0xc4>)
 8000e94:	2203      	movs	r2, #3
 8000e96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e98:	4b24      	ldr	r3, [pc, #144]	; (8000f2c <MX_TIM3_Init+0xc4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000e9e:	4b23      	ldr	r3, [pc, #140]	; (8000f2c <MX_TIM3_Init+0xc4>)
 8000ea0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ea4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea6:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <MX_TIM3_Init+0xc4>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eac:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <MX_TIM3_Init+0xc4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000eb2:	481e      	ldr	r0, [pc, #120]	; (8000f2c <MX_TIM3_Init+0xc4>)
 8000eb4:	f009 fc8a 	bl	800a7cc <HAL_TIM_PWM_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000ebe:	f000 fbbd 	bl	800163c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4816      	ldr	r0, [pc, #88]	; (8000f2c <MX_TIM3_Init+0xc4>)
 8000ed2:	f00a fb43 	bl	800b55c <HAL_TIMEx_MasterConfigSynchronization>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000edc:	f000 fbae 	bl	800163c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ee0:	2360      	movs	r3, #96	; 0x60
 8000ee2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	2208      	movs	r2, #8
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	480d      	ldr	r0, [pc, #52]	; (8000f2c <MX_TIM3_Init+0xc4>)
 8000ef8:	f009 fe86 	bl	800ac08 <HAL_TIM_PWM_ConfigChannel>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000f02:	f000 fb9b 	bl	800163c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f06:	463b      	mov	r3, r7
 8000f08:	220c      	movs	r2, #12
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4807      	ldr	r0, [pc, #28]	; (8000f2c <MX_TIM3_Init+0xc4>)
 8000f0e:	f009 fe7b 	bl	800ac08 <HAL_TIM_PWM_ConfigChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000f18:	f000 fb90 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f1c:	4803      	ldr	r0, [pc, #12]	; (8000f2c <MX_TIM3_Init+0xc4>)
 8000f1e:	f000 fdb9 	bl	8001a94 <HAL_TIM_MspPostInit>

}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	; 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	24004e84 	.word	0x24004e84
 8000f30:	40000400 	.word	0x40000400

08000f34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f38:	4b22      	ldr	r3, [pc, #136]	; (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f3a:	4a23      	ldr	r2, [pc, #140]	; (8000fc8 <MX_USART3_UART_Init+0x94>)
 8000f3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f3e:	4b21      	ldr	r3, [pc, #132]	; (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f46:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f52:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f58:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5e:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f64:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f6a:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f70:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f76:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f7c:	4811      	ldr	r0, [pc, #68]	; (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f7e:	f00a fb93 	bl	800b6a8 <HAL_UART_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f88:	f000 fb58 	bl	800163c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000f90:	f00b fb76 	bl	800c680 <HAL_UARTEx_SetTxFifoThreshold>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f9a:	f000 fb4f 	bl	800163c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4808      	ldr	r0, [pc, #32]	; (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000fa2:	f00b fbab 	bl	800c6fc <HAL_UARTEx_SetRxFifoThreshold>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000fac:	f000 fb46 	bl	800163c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000fb0:	4804      	ldr	r0, [pc, #16]	; (8000fc4 <MX_USART3_UART_Init+0x90>)
 8000fb2:	f00b fb2c 	bl	800c60e <HAL_UARTEx_DisableFifoMode>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000fbc:	f000 fb3e 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	24004978 	.word	0x24004978
 8000fc8:	40004800 	.word	0x40004800

08000fcc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fd0:	4b15      	ldr	r3, [pc, #84]	; (8001028 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fd2:	4a16      	ldr	r2, [pc, #88]	; (800102c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000fd4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000fd6:	4b14      	ldr	r3, [pc, #80]	; (8001028 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fd8:	2209      	movs	r2, #9
 8000fda:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fde:	2202      	movs	r2, #2
 8000fe0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fea:	2202      	movs	r2, #2
 8000fec:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001002:	2201      	movs	r2, #1
 8001004:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001006:	4b08      	ldr	r3, [pc, #32]	; (8001028 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001008:	2201      	movs	r2, #1
 800100a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800100e:	2200      	movs	r2, #0
 8001010:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001012:	4805      	ldr	r0, [pc, #20]	; (8001028 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001014:	f006 f906 	bl	8007224 <HAL_PCD_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800101e:	f000 fb0d 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	24004a70 	.word	0x24004a70
 800102c:	40080000 	.word	0x40080000

08001030 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_DMA_Init+0x4c>)
 8001038:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800103c:	4a0f      	ldr	r2, [pc, #60]	; (800107c <MX_DMA_Init+0x4c>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001046:	4b0d      	ldr	r3, [pc, #52]	; (800107c <MX_DMA_Init+0x4c>)
 8001048:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2105      	movs	r1, #5
 8001058:	200b      	movs	r0, #11
 800105a:	f002 fffc 	bl	8004056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800105e:	200b      	movs	r0, #11
 8001060:	f003 f813 	bl	800408a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	2105      	movs	r1, #5
 8001068:	200c      	movs	r0, #12
 800106a:	f002 fff4 	bl	8004056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800106e:	200c      	movs	r0, #12
 8001070:	f003 f80b 	bl	800408a <HAL_NVIC_EnableIRQ>

}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	58024400 	.word	0x58024400

08001080 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08e      	sub	sp, #56	; 0x38
 8001084:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001096:	4b64      	ldr	r3, [pc, #400]	; (8001228 <MX_GPIO_Init+0x1a8>)
 8001098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109c:	4a62      	ldr	r2, [pc, #392]	; (8001228 <MX_GPIO_Init+0x1a8>)
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a6:	4b60      	ldr	r3, [pc, #384]	; (8001228 <MX_GPIO_Init+0x1a8>)
 80010a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	623b      	str	r3, [r7, #32]
 80010b2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b4:	4b5c      	ldr	r3, [pc, #368]	; (8001228 <MX_GPIO_Init+0x1a8>)
 80010b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ba:	4a5b      	ldr	r2, [pc, #364]	; (8001228 <MX_GPIO_Init+0x1a8>)
 80010bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010c4:	4b58      	ldr	r3, [pc, #352]	; (8001228 <MX_GPIO_Init+0x1a8>)
 80010c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ce:	61fb      	str	r3, [r7, #28]
 80010d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	4b55      	ldr	r3, [pc, #340]	; (8001228 <MX_GPIO_Init+0x1a8>)
 80010d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d8:	4a53      	ldr	r2, [pc, #332]	; (8001228 <MX_GPIO_Init+0x1a8>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e2:	4b51      	ldr	r3, [pc, #324]	; (8001228 <MX_GPIO_Init+0x1a8>)
 80010e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	61bb      	str	r3, [r7, #24]
 80010ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f0:	4b4d      	ldr	r3, [pc, #308]	; (8001228 <MX_GPIO_Init+0x1a8>)
 80010f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f6:	4a4c      	ldr	r2, [pc, #304]	; (8001228 <MX_GPIO_Init+0x1a8>)
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001100:	4b49      	ldr	r3, [pc, #292]	; (8001228 <MX_GPIO_Init+0x1a8>)
 8001102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800110e:	4b46      	ldr	r3, [pc, #280]	; (8001228 <MX_GPIO_Init+0x1a8>)
 8001110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001114:	4a44      	ldr	r2, [pc, #272]	; (8001228 <MX_GPIO_Init+0x1a8>)
 8001116:	f043 0320 	orr.w	r3, r3, #32
 800111a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800111e:	4b42      	ldr	r3, [pc, #264]	; (8001228 <MX_GPIO_Init+0x1a8>)
 8001120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001124:	f003 0320 	and.w	r3, r3, #32
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800112c:	4b3e      	ldr	r3, [pc, #248]	; (8001228 <MX_GPIO_Init+0x1a8>)
 800112e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001132:	4a3d      	ldr	r2, [pc, #244]	; (8001228 <MX_GPIO_Init+0x1a8>)
 8001134:	f043 0310 	orr.w	r3, r3, #16
 8001138:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800113c:	4b3a      	ldr	r3, [pc, #232]	; (8001228 <MX_GPIO_Init+0x1a8>)
 800113e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001142:	f003 0310 	and.w	r3, r3, #16
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114a:	4b37      	ldr	r3, [pc, #220]	; (8001228 <MX_GPIO_Init+0x1a8>)
 800114c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001150:	4a35      	ldr	r2, [pc, #212]	; (8001228 <MX_GPIO_Init+0x1a8>)
 8001152:	f043 0308 	orr.w	r3, r3, #8
 8001156:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800115a:	4b33      	ldr	r3, [pc, #204]	; (8001228 <MX_GPIO_Init+0x1a8>)
 800115c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001160:	f003 0308 	and.w	r3, r3, #8
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001168:	4b2f      	ldr	r3, [pc, #188]	; (8001228 <MX_GPIO_Init+0x1a8>)
 800116a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116e:	4a2e      	ldr	r2, [pc, #184]	; (8001228 <MX_GPIO_Init+0x1a8>)
 8001170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001174:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001178:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <MX_GPIO_Init+0x1a8>)
 800117a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	f244 0101 	movw	r1, #16385	; 0x4001
 800118c:	4827      	ldr	r0, [pc, #156]	; (800122c <MX_GPIO_Init+0x1ac>)
 800118e:	f005 ffe7 	bl	8007160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11|LD2_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	f640 0102 	movw	r1, #2050	; 0x802
 8001198:	4825      	ldr	r0, [pc, #148]	; (8001230 <MX_GPIO_Init+0x1b0>)
 800119a:	f005 ffe1 	bl	8007160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6|GPIO_PIN_14, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	f244 0140 	movw	r1, #16448	; 0x4040
 80011a4:	4823      	ldr	r0, [pc, #140]	; (8001234 <MX_GPIO_Init+0x1b4>)
 80011a6:	f005 ffdb 	bl	8007160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011bc:	4619      	mov	r1, r3
 80011be:	481e      	ldr	r0, [pc, #120]	; (8001238 <MX_GPIO_Init+0x1b8>)
 80011c0:	f005 fe1e 	bl	8006e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80011c4:	f244 0301 	movw	r3, #16385	; 0x4001
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011da:	4619      	mov	r1, r3
 80011dc:	4813      	ldr	r0, [pc, #76]	; (800122c <MX_GPIO_Init+0x1ac>)
 80011de:	f005 fe0f 	bl	8006e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_11|LD2_Pin;
 80011e2:	f640 0302 	movw	r3, #2050	; 0x802
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f8:	4619      	mov	r1, r3
 80011fa:	480d      	ldr	r0, [pc, #52]	; (8001230 <MX_GPIO_Init+0x1b0>)
 80011fc:	f005 fe00 	bl	8006e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_14;
 8001200:	f244 0340 	movw	r3, #16448	; 0x4040
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001206:	2301      	movs	r3, #1
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001216:	4619      	mov	r1, r3
 8001218:	4806      	ldr	r0, [pc, #24]	; (8001234 <MX_GPIO_Init+0x1b4>)
 800121a:	f005 fdf1 	bl	8006e00 <HAL_GPIO_Init>

}
 800121e:	bf00      	nop
 8001220:	3738      	adds	r7, #56	; 0x38
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	58024400 	.word	0x58024400
 800122c:	58020400 	.word	0x58020400
 8001230:	58021000 	.word	0x58021000
 8001234:	58021800 	.word	0x58021800
 8001238:	58020800 	.word	0x58020800

0800123c <StartEncoderTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(200);
 8001244:	20c8      	movs	r0, #200	; 0xc8
 8001246:	f00b feb3 	bl	800cfb0 <osDelay>
 800124a:	e7fb      	b.n	8001244 <StartEncoderTask+0x8>

0800124c <StartControlTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControlTask */
void StartControlTask(void *argument)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControlTask */
	/* Infinite loop */
	for (;;) {
		osDelay(200);
 8001254:	20c8      	movs	r0, #200	; 0xc8
 8001256:	f00b feab 	bl	800cfb0 <osDelay>
 800125a:	e7fb      	b.n	8001254 <StartControlTask+0x8>
 800125c:	0000      	movs	r0, r0
	...

08001260 <StartDiagnosisTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDiagnosisTask */
void StartDiagnosisTask(void *argument)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	/* Infinite loop */

	status statusMessage;

	for (;;) {
		maxValue = 2.6; //Volts
 8001268:	4ba7      	ldr	r3, [pc, #668]	; (8001508 <StartDiagnosisTask+0x2a8>)
 800126a:	4aa8      	ldr	r2, [pc, #672]	; (800150c <StartDiagnosisTask+0x2ac>)
 800126c:	601a      	str	r2, [r3, #0]
		minValue = 0.5; //Volts
 800126e:	4ba8      	ldr	r3, [pc, #672]	; (8001510 <StartDiagnosisTask+0x2b0>)
 8001270:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001274:	601a      	str	r2, [r3, #0]

		//Initialize ADC and assign variables
		HAL_ADC_Start(&hadc1);
 8001276:	48a7      	ldr	r0, [pc, #668]	; (8001514 <StartDiagnosisTask+0x2b4>)
 8001278:	f001 fa84 	bl	8002784 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 800127c:	2164      	movs	r1, #100	; 0x64
 800127e:	48a5      	ldr	r0, [pc, #660]	; (8001514 <StartDiagnosisTask+0x2b4>)
 8001280:	f001 fb7e 	bl	8002980 <HAL_ADC_PollForConversion>
		adc_vol = HAL_ADC_GetValue(&hadc1);
 8001284:	48a3      	ldr	r0, [pc, #652]	; (8001514 <StartDiagnosisTask+0x2b4>)
 8001286:	f001 fc6f 	bl	8002b68 <HAL_ADC_GetValue>
 800128a:	4603      	mov	r3, r0
 800128c:	4aa2      	ldr	r2, [pc, #648]	; (8001518 <StartDiagnosisTask+0x2b8>)
 800128e:	6013      	str	r3, [r2, #0]
		HAL_ADC_Start(&hadc2);
 8001290:	48a2      	ldr	r0, [pc, #648]	; (800151c <StartDiagnosisTask+0x2bc>)
 8001292:	f001 fa77 	bl	8002784 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, 100);
 8001296:	2164      	movs	r1, #100	; 0x64
 8001298:	48a0      	ldr	r0, [pc, #640]	; (800151c <StartDiagnosisTask+0x2bc>)
 800129a:	f001 fb71 	bl	8002980 <HAL_ADC_PollForConversion>
		adc_cor = HAL_ADC_GetValue(&hadc2);
 800129e:	489f      	ldr	r0, [pc, #636]	; (800151c <StartDiagnosisTask+0x2bc>)
 80012a0:	f001 fc62 	bl	8002b68 <HAL_ADC_GetValue>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4a9e      	ldr	r2, [pc, #632]	; (8001520 <StartDiagnosisTask+0x2c0>)
 80012a8:	6013      	str	r3, [r2, #0]

		voltage = (adc_vol*3.3)/65536.0; //Volts
 80012aa:	4b9b      	ldr	r3, [pc, #620]	; (8001518 <StartDiagnosisTask+0x2b8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	ee07 3a90 	vmov	s15, r3
 80012b2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80012b6:	ed9f 6b90 	vldr	d6, [pc, #576]	; 80014f8 <StartDiagnosisTask+0x298>
 80012ba:	ee27 6b06 	vmul.f64	d6, d7, d6
 80012be:	ed9f 5b90 	vldr	d5, [pc, #576]	; 8001500 <StartDiagnosisTask+0x2a0>
 80012c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012ca:	4b96      	ldr	r3, [pc, #600]	; (8001524 <StartDiagnosisTask+0x2c4>)
 80012cc:	edc3 7a00 	vstr	s15, [r3]
		current = (adc_cor*3.3)/65536.0; //Volts
 80012d0:	4b93      	ldr	r3, [pc, #588]	; (8001520 <StartDiagnosisTask+0x2c0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	ee07 3a90 	vmov	s15, r3
 80012d8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80012dc:	ed9f 6b86 	vldr	d6, [pc, #536]	; 80014f8 <StartDiagnosisTask+0x298>
 80012e0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80012e4:	ed9f 5b86 	vldr	d5, [pc, #536]	; 8001500 <StartDiagnosisTask+0x2a0>
 80012e8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012ec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012f0:	4b8d      	ldr	r3, [pc, #564]	; (8001528 <StartDiagnosisTask+0x2c8>)
 80012f2:	edc3 7a00 	vstr	s15, [r3]

			  //Conditioners
		if((voltage > minValue && voltage < maxValue) && (current < maxValue && current > minValue))
 80012f6:	4b8b      	ldr	r3, [pc, #556]	; (8001524 <StartDiagnosisTask+0x2c4>)
 80012f8:	ed93 7a00 	vldr	s14, [r3]
 80012fc:	4b84      	ldr	r3, [pc, #528]	; (8001510 <StartDiagnosisTask+0x2b0>)
 80012fe:	edd3 7a00 	vldr	s15, [r3]
 8001302:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130a:	dd30      	ble.n	800136e <StartDiagnosisTask+0x10e>
 800130c:	4b85      	ldr	r3, [pc, #532]	; (8001524 <StartDiagnosisTask+0x2c4>)
 800130e:	ed93 7a00 	vldr	s14, [r3]
 8001312:	4b7d      	ldr	r3, [pc, #500]	; (8001508 <StartDiagnosisTask+0x2a8>)
 8001314:	edd3 7a00 	vldr	s15, [r3]
 8001318:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800131c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001320:	d525      	bpl.n	800136e <StartDiagnosisTask+0x10e>
 8001322:	4b81      	ldr	r3, [pc, #516]	; (8001528 <StartDiagnosisTask+0x2c8>)
 8001324:	ed93 7a00 	vldr	s14, [r3]
 8001328:	4b77      	ldr	r3, [pc, #476]	; (8001508 <StartDiagnosisTask+0x2a8>)
 800132a:	edd3 7a00 	vldr	s15, [r3]
 800132e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001336:	d51a      	bpl.n	800136e <StartDiagnosisTask+0x10e>
 8001338:	4b7b      	ldr	r3, [pc, #492]	; (8001528 <StartDiagnosisTask+0x2c8>)
 800133a:	ed93 7a00 	vldr	s14, [r3]
 800133e:	4b74      	ldr	r3, [pc, #464]	; (8001510 <StartDiagnosisTask+0x2b0>)
 8001340:	edd3 7a00 	vldr	s15, [r3]
 8001344:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134c:	dd0f      	ble.n	800136e <StartDiagnosisTask+0x10e>
		{
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 800134e:	2201      	movs	r2, #1
 8001350:	2101      	movs	r1, #1
 8001352:	4876      	ldr	r0, [pc, #472]	; (800152c <StartDiagnosisTask+0x2cc>)
 8001354:	f005 ff04 	bl	8007160 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	2102      	movs	r1, #2
 800135c:	4874      	ldr	r0, [pc, #464]	; (8001530 <StartDiagnosisTask+0x2d0>)
 800135e:	f005 feff 	bl	8007160 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001368:	4870      	ldr	r0, [pc, #448]	; (800152c <StartDiagnosisTask+0x2cc>)
 800136a:	f005 fef9 	bl	8007160 <HAL_GPIO_WritePin>
		}
		if(voltage <= minValue || voltage >= maxValue)
 800136e:	4b6d      	ldr	r3, [pc, #436]	; (8001524 <StartDiagnosisTask+0x2c4>)
 8001370:	ed93 7a00 	vldr	s14, [r3]
 8001374:	4b66      	ldr	r3, [pc, #408]	; (8001510 <StartDiagnosisTask+0x2b0>)
 8001376:	edd3 7a00 	vldr	s15, [r3]
 800137a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800137e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001382:	d90a      	bls.n	800139a <StartDiagnosisTask+0x13a>
 8001384:	4b67      	ldr	r3, [pc, #412]	; (8001524 <StartDiagnosisTask+0x2c4>)
 8001386:	ed93 7a00 	vldr	s14, [r3]
 800138a:	4b5f      	ldr	r3, [pc, #380]	; (8001508 <StartDiagnosisTask+0x2a8>)
 800138c:	edd3 7a00 	vldr	s15, [r3]
 8001390:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001398:	db29      	blt.n	80013ee <StartDiagnosisTask+0x18e>
		{
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	2101      	movs	r1, #1
 800139e:	4863      	ldr	r0, [pc, #396]	; (800152c <StartDiagnosisTask+0x2cc>)
 80013a0:	f005 fede 	bl	8007160 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	2102      	movs	r1, #2
 80013a8:	4861      	ldr	r0, [pc, #388]	; (8001530 <StartDiagnosisTask+0x2d0>)
 80013aa:	f005 fed9 	bl	8007160 <HAL_GPIO_WritePin>
			if (voltage <= minValue){
 80013ae:	4b5d      	ldr	r3, [pc, #372]	; (8001524 <StartDiagnosisTask+0x2c4>)
 80013b0:	ed93 7a00 	vldr	s14, [r3]
 80013b4:	4b56      	ldr	r3, [pc, #344]	; (8001510 <StartDiagnosisTask+0x2b0>)
 80013b6:	edd3 7a00 	vldr	s15, [r3]
 80013ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c2:	d80a      	bhi.n	80013da <StartDiagnosisTask+0x17a>
				//Under voltage
				statusMessage.statusflag = 0x1;
 80013c4:	2301      	movs	r3, #1
 80013c6:	81bb      	strh	r3, [r7, #12]
				osMessageQueuePut(canDiagnosisQueueHandle,&statusMessage, NULL, 50);
 80013c8:	4b5a      	ldr	r3, [pc, #360]	; (8001534 <StartDiagnosisTask+0x2d4>)
 80013ca:	6818      	ldr	r0, [r3, #0]
 80013cc:	f107 010c 	add.w	r1, r7, #12
 80013d0:	2332      	movs	r3, #50	; 0x32
 80013d2:	2200      	movs	r2, #0
 80013d4:	f00b fe7a 	bl	800d0cc <osMessageQueuePut>
 80013d8:	e009      	b.n	80013ee <StartDiagnosisTask+0x18e>
			}
			else{
				//Over voltage
				statusMessage.statusflag = 0x2;
 80013da:	2302      	movs	r3, #2
 80013dc:	81bb      	strh	r3, [r7, #12]
				osMessageQueuePut(canDiagnosisQueueHandle, &statusMessage, NULL, 50);
 80013de:	4b55      	ldr	r3, [pc, #340]	; (8001534 <StartDiagnosisTask+0x2d4>)
 80013e0:	6818      	ldr	r0, [r3, #0]
 80013e2:	f107 010c 	add.w	r1, r7, #12
 80013e6:	2332      	movs	r3, #50	; 0x32
 80013e8:	2200      	movs	r2, #0
 80013ea:	f00b fe6f 	bl	800d0cc <osMessageQueuePut>
			}
		}
		if(current >= maxValue || current <= minValue)
 80013ee:	4b4e      	ldr	r3, [pc, #312]	; (8001528 <StartDiagnosisTask+0x2c8>)
 80013f0:	ed93 7a00 	vldr	s14, [r3]
 80013f4:	4b44      	ldr	r3, [pc, #272]	; (8001508 <StartDiagnosisTask+0x2a8>)
 80013f6:	edd3 7a00 	vldr	s15, [r3]
 80013fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001402:	da0a      	bge.n	800141a <StartDiagnosisTask+0x1ba>
 8001404:	4b48      	ldr	r3, [pc, #288]	; (8001528 <StartDiagnosisTask+0x2c8>)
 8001406:	ed93 7a00 	vldr	s14, [r3]
 800140a:	4b41      	ldr	r3, [pc, #260]	; (8001510 <StartDiagnosisTask+0x2b0>)
 800140c:	edd3 7a00 	vldr	s15, [r3]
 8001410:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001418:	d82a      	bhi.n	8001470 <StartDiagnosisTask+0x210>
		{
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 800141a:	2200      	movs	r2, #0
 800141c:	2101      	movs	r1, #1
 800141e:	4843      	ldr	r0, [pc, #268]	; (800152c <StartDiagnosisTask+0x2cc>)
 8001420:	f005 fe9e 	bl	8007160 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8001424:	2201      	movs	r2, #1
 8001426:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800142a:	4840      	ldr	r0, [pc, #256]	; (800152c <StartDiagnosisTask+0x2cc>)
 800142c:	f005 fe98 	bl	8007160 <HAL_GPIO_WritePin>
			if (current <= minValue){
 8001430:	4b3d      	ldr	r3, [pc, #244]	; (8001528 <StartDiagnosisTask+0x2c8>)
 8001432:	ed93 7a00 	vldr	s14, [r3]
 8001436:	4b36      	ldr	r3, [pc, #216]	; (8001510 <StartDiagnosisTask+0x2b0>)
 8001438:	edd3 7a00 	vldr	s15, [r3]
 800143c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001444:	d80a      	bhi.n	800145c <StartDiagnosisTask+0x1fc>
				//Under current
				statusMessage.statusflag = 0x3;
 8001446:	2303      	movs	r3, #3
 8001448:	81bb      	strh	r3, [r7, #12]
				osMessageQueuePut(canDiagnosisQueueHandle, &statusMessage, NULL, 50);
 800144a:	4b3a      	ldr	r3, [pc, #232]	; (8001534 <StartDiagnosisTask+0x2d4>)
 800144c:	6818      	ldr	r0, [r3, #0]
 800144e:	f107 010c 	add.w	r1, r7, #12
 8001452:	2332      	movs	r3, #50	; 0x32
 8001454:	2200      	movs	r2, #0
 8001456:	f00b fe39 	bl	800d0cc <osMessageQueuePut>
 800145a:	e009      	b.n	8001470 <StartDiagnosisTask+0x210>
			}
			else{
							//Over current
				statusMessage.statusflag = 0x4;
 800145c:	2304      	movs	r3, #4
 800145e:	81bb      	strh	r3, [r7, #12]
				osMessageQueuePut(canDiagnosisQueueHandle, &statusMessage, NULL, 50);
 8001460:	4b34      	ldr	r3, [pc, #208]	; (8001534 <StartDiagnosisTask+0x2d4>)
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	f107 010c 	add.w	r1, r7, #12
 8001468:	2332      	movs	r3, #50	; 0x32
 800146a:	2200      	movs	r2, #0
 800146c:	f00b fe2e 	bl	800d0cc <osMessageQueuePut>
			}
		}
		if(voltage > minValue && voltage < maxValue)
 8001470:	4b2c      	ldr	r3, [pc, #176]	; (8001524 <StartDiagnosisTask+0x2c4>)
 8001472:	ed93 7a00 	vldr	s14, [r3]
 8001476:	4b26      	ldr	r3, [pc, #152]	; (8001510 <StartDiagnosisTask+0x2b0>)
 8001478:	edd3 7a00 	vldr	s15, [r3]
 800147c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001484:	dd0f      	ble.n	80014a6 <StartDiagnosisTask+0x246>
 8001486:	4b27      	ldr	r3, [pc, #156]	; (8001524 <StartDiagnosisTask+0x2c4>)
 8001488:	ed93 7a00 	vldr	s14, [r3]
 800148c:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <StartDiagnosisTask+0x2a8>)
 800148e:	edd3 7a00 	vldr	s15, [r3]
 8001492:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149a:	d504      	bpl.n	80014a6 <StartDiagnosisTask+0x246>
		{
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	2102      	movs	r1, #2
 80014a0:	4823      	ldr	r0, [pc, #140]	; (8001530 <StartDiagnosisTask+0x2d0>)
 80014a2:	f005 fe5d 	bl	8007160 <HAL_GPIO_WritePin>
		}
		if(current < maxValue && current > minValue)
 80014a6:	4b20      	ldr	r3, [pc, #128]	; (8001528 <StartDiagnosisTask+0x2c8>)
 80014a8:	ed93 7a00 	vldr	s14, [r3]
 80014ac:	4b16      	ldr	r3, [pc, #88]	; (8001508 <StartDiagnosisTask+0x2a8>)
 80014ae:	edd3 7a00 	vldr	s15, [r3]
 80014b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ba:	d510      	bpl.n	80014de <StartDiagnosisTask+0x27e>
 80014bc:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <StartDiagnosisTask+0x2c8>)
 80014be:	ed93 7a00 	vldr	s14, [r3]
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <StartDiagnosisTask+0x2b0>)
 80014c4:	edd3 7a00 	vldr	s15, [r3]
 80014c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d0:	dd05      	ble.n	80014de <StartDiagnosisTask+0x27e>
		{

			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014d8:	4814      	ldr	r0, [pc, #80]	; (800152c <StartDiagnosisTask+0x2cc>)
 80014da:	f005 fe41 	bl	8007160 <HAL_GPIO_WritePin>
		}

			  //Ends ADC
		HAL_ADC_Stop(&hadc1);
 80014de:	480d      	ldr	r0, [pc, #52]	; (8001514 <StartDiagnosisTask+0x2b4>)
 80014e0:	f001 fa1a 	bl	8002918 <HAL_ADC_Stop>
		HAL_ADC_Stop(&hadc2);
 80014e4:	480d      	ldr	r0, [pc, #52]	; (800151c <StartDiagnosisTask+0x2bc>)
 80014e6:	f001 fa17 	bl	8002918 <HAL_ADC_Stop>

		osDelay(300);
 80014ea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80014ee:	f00b fd5f 	bl	800cfb0 <osDelay>
		maxValue = 2.6; //Volts
 80014f2:	e6b9      	b.n	8001268 <StartDiagnosisTask+0x8>
 80014f4:	f3af 8000 	nop.w
 80014f8:	66666666 	.word	0x66666666
 80014fc:	400a6666 	.word	0x400a6666
 8001500:	00000000 	.word	0x00000000
 8001504:	40f00000 	.word	0x40f00000
 8001508:	24004e78 	.word	0x24004e78
 800150c:	40266666 	.word	0x40266666
 8001510:	24004974 	.word	0x24004974
 8001514:	24004ee4 	.word	0x24004ee4
 8001518:	24004ed4 	.word	0x24004ed4
 800151c:	24004a08 	.word	0x24004a08
 8001520:	24004f54 	.word	0x24004f54
 8001524:	24004edc 	.word	0x24004edc
 8001528:	24004f50 	.word	0x24004f50
 800152c:	58020400 	.word	0x58020400
 8001530:	58021000 	.word	0x58021000
 8001534:	24004ee0 	.word	0x24004ee0

08001538 <StartCanRxTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCanRxTask */
void StartCanRxTask(void *argument)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCanRxTask */
	/* Infinite loop */
	for (;;) {
		/* Retrieve Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8001540:	4b0e      	ldr	r3, [pc, #56]	; (800157c <StartCanRxTask+0x44>)
 8001542:	4a0f      	ldr	r2, [pc, #60]	; (8001580 <StartCanRxTask+0x48>)
 8001544:	2140      	movs	r1, #64	; 0x40
 8001546:	480f      	ldr	r0, [pc, #60]	; (8001584 <StartCanRxTask+0x4c>)
 8001548:	f004 fd5a 	bl	8006000 <HAL_FDCAN_GetRxMessage>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10f      	bne.n	8001572 <StartCanRxTask+0x3a>
		{
			//if ((RxHeader.Identifier == 0x255) && (RxHeader.IdType == FDCAN_STANDARD_ID) && (RxHeader.DataLength == FDCAN_DLC_BYTES_8))
			if(RxHeader.Identifier == 0x100)
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <StartCanRxTask+0x48>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800155a:	d10a      	bne.n	8001572 <StartCanRxTask+0x3a>
			{
				HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_6);
 800155c:	2140      	movs	r1, #64	; 0x40
 800155e:	480a      	ldr	r0, [pc, #40]	; (8001588 <StartCanRxTask+0x50>)
 8001560:	f005 fe17 	bl	8007192 <HAL_GPIO_TogglePin>
				//RxHeader.DataLength = FDCAN_DLC_BYTES_0;
				HAL_UART_Transmit(&huart3, RxData, 8, HAL_MAX_DELAY);
 8001564:	f04f 33ff 	mov.w	r3, #4294967295
 8001568:	2208      	movs	r2, #8
 800156a:	4904      	ldr	r1, [pc, #16]	; (800157c <StartCanRxTask+0x44>)
 800156c:	4807      	ldr	r0, [pc, #28]	; (800158c <StartCanRxTask+0x54>)
 800156e:	f00a f8eb 	bl	800b748 <HAL_UART_Transmit>
		}
		else
		{
		/* Reception Error */
		}
		osDelay(250);
 8001572:	20fa      	movs	r0, #250	; 0xfa
 8001574:	f00b fd1c 	bl	800cfb0 <osDelay>
		if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8001578:	e7e2      	b.n	8001540 <StartCanRxTask+0x8>
 800157a:	bf00      	nop
 800157c:	2400507c 	.word	0x2400507c
 8001580:	2400516c 	.word	0x2400516c
 8001584:	24004fd4 	.word	0x24004fd4
 8001588:	58021800 	.word	0x58021800
 800158c:	24004978 	.word	0x24004978

08001590 <StartCanTxTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCanTxTask */
void StartCanTxTask(void *argument)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	status statusMessage;

	for (;;) {

		//Send diagnosis message if there is an error
		diagnosisError = osMessageQueueGet(canDiagnosisQueueHandle, &statusMessage , NULL, 100);
 8001598:	4b23      	ldr	r3, [pc, #140]	; (8001628 <StartCanTxTask+0x98>)
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	f107 0108 	add.w	r1, r7, #8
 80015a0:	2364      	movs	r3, #100	; 0x64
 80015a2:	2200      	movs	r2, #0
 80015a4:	f00b fdf2 	bl	800d18c <osMessageQueueGet>
 80015a8:	60f8      	str	r0, [r7, #12]

		if(diagnosisError == osOK){
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d135      	bne.n	800161c <StartCanTxTask+0x8c>
			TxHeader.Identifier = 0x159;
 80015b0:	4b1e      	ldr	r3, [pc, #120]	; (800162c <StartCanTxTask+0x9c>)
 80015b2:	f240 1259 	movw	r2, #345	; 0x159
 80015b6:	601a      	str	r2, [r3, #0]
			if(statusMessage.statusflag == 0x1){
 80015b8:	893b      	ldrh	r3, [r7, #8]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d103      	bne.n	80015c6 <StartCanTxTask+0x36>
				TxDataError[0] = 'a';
 80015be:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <StartCanTxTask+0xa0>)
 80015c0:	2261      	movs	r2, #97	; 0x61
 80015c2:	701a      	strb	r2, [r3, #0]
 80015c4:	e01a      	b.n	80015fc <StartCanTxTask+0x6c>
			}
			else if (statusMessage.statusflag == 0x2){
 80015c6:	893b      	ldrh	r3, [r7, #8]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d103      	bne.n	80015d4 <StartCanTxTask+0x44>
				TxDataError[0] = 'b';
 80015cc:	4b18      	ldr	r3, [pc, #96]	; (8001630 <StartCanTxTask+0xa0>)
 80015ce:	2262      	movs	r2, #98	; 0x62
 80015d0:	701a      	strb	r2, [r3, #0]
 80015d2:	e013      	b.n	80015fc <StartCanTxTask+0x6c>
			}
			else if (statusMessage.statusflag == 0x3){
 80015d4:	893b      	ldrh	r3, [r7, #8]
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	d103      	bne.n	80015e2 <StartCanTxTask+0x52>
				TxDataError[0] = 'c';
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <StartCanTxTask+0xa0>)
 80015dc:	2263      	movs	r2, #99	; 0x63
 80015de:	701a      	strb	r2, [r3, #0]
 80015e0:	e00c      	b.n	80015fc <StartCanTxTask+0x6c>
			}
			else if (statusMessage.statusflag == 0x4){
 80015e2:	893b      	ldrh	r3, [r7, #8]
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d103      	bne.n	80015f0 <StartCanTxTask+0x60>
				TxDataError[0] = 'd';
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <StartCanTxTask+0xa0>)
 80015ea:	2264      	movs	r2, #100	; 0x64
 80015ec:	701a      	strb	r2, [r3, #0]
 80015ee:	e005      	b.n	80015fc <StartCanTxTask+0x6c>
			}
			else if (statusMessage.statusflag == 0x5){
 80015f0:	893b      	ldrh	r3, [r7, #8]
 80015f2:	2b05      	cmp	r3, #5
 80015f4:	d102      	bne.n	80015fc <StartCanTxTask+0x6c>
				TxDataError[0] = 'e';
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <StartCanTxTask+0xa0>)
 80015f8:	2265      	movs	r2, #101	; 0x65
 80015fa:	701a      	strb	r2, [r3, #0]
			}
			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxDataError) != HAL_OK){
 80015fc:	4a0c      	ldr	r2, [pc, #48]	; (8001630 <StartCanTxTask+0xa0>)
 80015fe:	490b      	ldr	r1, [pc, #44]	; (800162c <StartCanTxTask+0x9c>)
 8001600:	480c      	ldr	r0, [pc, #48]	; (8001634 <StartCanTxTask+0xa4>)
 8001602:	f004 fca2 	bl	8005f4a <HAL_FDCAN_AddMessageToTxFifoQ>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d002      	beq.n	8001612 <StartCanTxTask+0x82>
				Error_Handler();
 800160c:	f000 f816 	bl	800163c <Error_Handler>
 8001610:	e004      	b.n	800161c <StartCanTxTask+0x8c>
			}
			else{
				HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_11);
 8001612:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001616:	4808      	ldr	r0, [pc, #32]	; (8001638 <StartCanTxTask+0xa8>)
 8001618:	f005 fdbb 	bl	8007192 <HAL_GPIO_TogglePin>
		}
		else{
			HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_14);
		}
		*/
		osDelay(500);
 800161c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001620:	f00b fcc6 	bl	800cfb0 <osDelay>
		diagnosisError = osMessageQueueGet(canDiagnosisQueueHandle, &statusMessage , NULL, 100);
 8001624:	e7b8      	b.n	8001598 <StartCanTxTask+0x8>
 8001626:	bf00      	nop
 8001628:	24004ee0 	.word	0x24004ee0
 800162c:	24005148 	.word	0x24005148
 8001630:	24000010 	.word	0x24000010
 8001634:	24004fd4 	.word	0x24004fd4
 8001638:	58021000 	.word	0x58021000

0800163c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <HAL_MspInit+0x38>)
 8001654:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001658:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <HAL_MspInit+0x38>)
 800165a:	f043 0302 	orr.w	r3, r3, #2
 800165e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <HAL_MspInit+0x38>)
 8001664:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001670:	2200      	movs	r2, #0
 8001672:	210f      	movs	r1, #15
 8001674:	f06f 0001 	mvn.w	r0, #1
 8001678:	f002 fced 	bl	8004056 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	58024400 	.word	0x58024400

08001688 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08c      	sub	sp, #48	; 0x30
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 031c 	add.w	r3, r7, #28
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a71      	ldr	r2, [pc, #452]	; (800186c <HAL_ADC_MspInit+0x1e4>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d16c      	bne.n	8001784 <HAL_ADC_MspInit+0xfc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80016aa:	4b71      	ldr	r3, [pc, #452]	; (8001870 <HAL_ADC_MspInit+0x1e8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	3301      	adds	r3, #1
 80016b0:	4a6f      	ldr	r2, [pc, #444]	; (8001870 <HAL_ADC_MspInit+0x1e8>)
 80016b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80016b4:	4b6e      	ldr	r3, [pc, #440]	; (8001870 <HAL_ADC_MspInit+0x1e8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d10e      	bne.n	80016da <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80016bc:	4b6d      	ldr	r3, [pc, #436]	; (8001874 <HAL_ADC_MspInit+0x1ec>)
 80016be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80016c2:	4a6c      	ldr	r2, [pc, #432]	; (8001874 <HAL_ADC_MspInit+0x1ec>)
 80016c4:	f043 0320 	orr.w	r3, r3, #32
 80016c8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80016cc:	4b69      	ldr	r3, [pc, #420]	; (8001874 <HAL_ADC_MspInit+0x1ec>)
 80016ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80016d2:	f003 0320 	and.w	r3, r3, #32
 80016d6:	61bb      	str	r3, [r7, #24]
 80016d8:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016da:	4b66      	ldr	r3, [pc, #408]	; (8001874 <HAL_ADC_MspInit+0x1ec>)
 80016dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e0:	4a64      	ldr	r2, [pc, #400]	; (8001874 <HAL_ADC_MspInit+0x1ec>)
 80016e2:	f043 0320 	orr.w	r3, r3, #32
 80016e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ea:	4b62      	ldr	r3, [pc, #392]	; (8001874 <HAL_ADC_MspInit+0x1ec>)
 80016ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f0:	f003 0320 	and.w	r3, r3, #32
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80016f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fe:	2303      	movs	r3, #3
 8001700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4619      	mov	r1, r3
 800170c:	485a      	ldr	r0, [pc, #360]	; (8001878 <HAL_ADC_MspInit+0x1f0>)
 800170e:	f005 fb77 	bl	8006e00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001712:	4b5a      	ldr	r3, [pc, #360]	; (800187c <HAL_ADC_MspInit+0x1f4>)
 8001714:	4a5a      	ldr	r2, [pc, #360]	; (8001880 <HAL_ADC_MspInit+0x1f8>)
 8001716:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001718:	4b58      	ldr	r3, [pc, #352]	; (800187c <HAL_ADC_MspInit+0x1f4>)
 800171a:	2209      	movs	r2, #9
 800171c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800171e:	4b57      	ldr	r3, [pc, #348]	; (800187c <HAL_ADC_MspInit+0x1f4>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001724:	4b55      	ldr	r3, [pc, #340]	; (800187c <HAL_ADC_MspInit+0x1f4>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800172a:	4b54      	ldr	r3, [pc, #336]	; (800187c <HAL_ADC_MspInit+0x1f4>)
 800172c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001730:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001732:	4b52      	ldr	r3, [pc, #328]	; (800187c <HAL_ADC_MspInit+0x1f4>)
 8001734:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001738:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800173a:	4b50      	ldr	r3, [pc, #320]	; (800187c <HAL_ADC_MspInit+0x1f4>)
 800173c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001740:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001742:	4b4e      	ldr	r3, [pc, #312]	; (800187c <HAL_ADC_MspInit+0x1f4>)
 8001744:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001748:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800174a:	4b4c      	ldr	r3, [pc, #304]	; (800187c <HAL_ADC_MspInit+0x1f4>)
 800174c:	2200      	movs	r2, #0
 800174e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001750:	4b4a      	ldr	r3, [pc, #296]	; (800187c <HAL_ADC_MspInit+0x1f4>)
 8001752:	2200      	movs	r2, #0
 8001754:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001756:	4849      	ldr	r0, [pc, #292]	; (800187c <HAL_ADC_MspInit+0x1f4>)
 8001758:	f002 fcb2 	bl	80040c0 <HAL_DMA_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 8001762:	f7ff ff6b 	bl	800163c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a44      	ldr	r2, [pc, #272]	; (800187c <HAL_ADC_MspInit+0x1f4>)
 800176a:	64da      	str	r2, [r3, #76]	; 0x4c
 800176c:	4a43      	ldr	r2, [pc, #268]	; (800187c <HAL_ADC_MspInit+0x1f4>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2105      	movs	r1, #5
 8001776:	2012      	movs	r0, #18
 8001778:	f002 fc6d 	bl	8004056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800177c:	2012      	movs	r0, #18
 800177e:	f002 fc84 	bl	800408a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001782:	e06e      	b.n	8001862 <HAL_ADC_MspInit+0x1da>
  else if(hadc->Instance==ADC2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a3e      	ldr	r2, [pc, #248]	; (8001884 <HAL_ADC_MspInit+0x1fc>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d169      	bne.n	8001862 <HAL_ADC_MspInit+0x1da>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800178e:	4b38      	ldr	r3, [pc, #224]	; (8001870 <HAL_ADC_MspInit+0x1e8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	3301      	adds	r3, #1
 8001794:	4a36      	ldr	r2, [pc, #216]	; (8001870 <HAL_ADC_MspInit+0x1e8>)
 8001796:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001798:	4b35      	ldr	r3, [pc, #212]	; (8001870 <HAL_ADC_MspInit+0x1e8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d10e      	bne.n	80017be <HAL_ADC_MspInit+0x136>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80017a0:	4b34      	ldr	r3, [pc, #208]	; (8001874 <HAL_ADC_MspInit+0x1ec>)
 80017a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017a6:	4a33      	ldr	r2, [pc, #204]	; (8001874 <HAL_ADC_MspInit+0x1ec>)
 80017a8:	f043 0320 	orr.w	r3, r3, #32
 80017ac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017b0:	4b30      	ldr	r3, [pc, #192]	; (8001874 <HAL_ADC_MspInit+0x1ec>)
 80017b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017b6:	f003 0320 	and.w	r3, r3, #32
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	4b2d      	ldr	r3, [pc, #180]	; (8001874 <HAL_ADC_MspInit+0x1ec>)
 80017c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c4:	4a2b      	ldr	r2, [pc, #172]	; (8001874 <HAL_ADC_MspInit+0x1ec>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ce:	4b29      	ldr	r3, [pc, #164]	; (8001874 <HAL_ADC_MspInit+0x1ec>)
 80017d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017dc:	2340      	movs	r3, #64	; 0x40
 80017de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017e0:	2303      	movs	r3, #3
 80017e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e8:	f107 031c 	add.w	r3, r7, #28
 80017ec:	4619      	mov	r1, r3
 80017ee:	4826      	ldr	r0, [pc, #152]	; (8001888 <HAL_ADC_MspInit+0x200>)
 80017f0:	f005 fb06 	bl	8006e00 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 80017f4:	4b25      	ldr	r3, [pc, #148]	; (800188c <HAL_ADC_MspInit+0x204>)
 80017f6:	4a26      	ldr	r2, [pc, #152]	; (8001890 <HAL_ADC_MspInit+0x208>)
 80017f8:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80017fa:	4b24      	ldr	r3, [pc, #144]	; (800188c <HAL_ADC_MspInit+0x204>)
 80017fc:	220a      	movs	r2, #10
 80017fe:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001800:	4b22      	ldr	r3, [pc, #136]	; (800188c <HAL_ADC_MspInit+0x204>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001806:	4b21      	ldr	r3, [pc, #132]	; (800188c <HAL_ADC_MspInit+0x204>)
 8001808:	2200      	movs	r2, #0
 800180a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800180c:	4b1f      	ldr	r3, [pc, #124]	; (800188c <HAL_ADC_MspInit+0x204>)
 800180e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001812:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001814:	4b1d      	ldr	r3, [pc, #116]	; (800188c <HAL_ADC_MspInit+0x204>)
 8001816:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800181a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800181c:	4b1b      	ldr	r3, [pc, #108]	; (800188c <HAL_ADC_MspInit+0x204>)
 800181e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001822:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8001824:	4b19      	ldr	r3, [pc, #100]	; (800188c <HAL_ADC_MspInit+0x204>)
 8001826:	2200      	movs	r2, #0
 8001828:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800182a:	4b18      	ldr	r3, [pc, #96]	; (800188c <HAL_ADC_MspInit+0x204>)
 800182c:	2200      	movs	r2, #0
 800182e:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001830:	4b16      	ldr	r3, [pc, #88]	; (800188c <HAL_ADC_MspInit+0x204>)
 8001832:	2200      	movs	r2, #0
 8001834:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001836:	4815      	ldr	r0, [pc, #84]	; (800188c <HAL_ADC_MspInit+0x204>)
 8001838:	f002 fc42 	bl	80040c0 <HAL_DMA_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_ADC_MspInit+0x1be>
      Error_Handler();
 8001842:	f7ff fefb 	bl	800163c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a10      	ldr	r2, [pc, #64]	; (800188c <HAL_ADC_MspInit+0x204>)
 800184a:	64da      	str	r2, [r3, #76]	; 0x4c
 800184c:	4a0f      	ldr	r2, [pc, #60]	; (800188c <HAL_ADC_MspInit+0x204>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2105      	movs	r1, #5
 8001856:	2012      	movs	r0, #18
 8001858:	f002 fbfd 	bl	8004056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800185c:	2012      	movs	r0, #18
 800185e:	f002 fc14 	bl	800408a <HAL_NVIC_EnableIRQ>
}
 8001862:	bf00      	nop
 8001864:	3730      	adds	r7, #48	; 0x30
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40022000 	.word	0x40022000
 8001870:	24000040 	.word	0x24000040
 8001874:	58024400 	.word	0x58024400
 8001878:	58021400 	.word	0x58021400
 800187c:	24004f58 	.word	0x24004f58
 8001880:	40020010 	.word	0x40020010
 8001884:	40022100 	.word	0x40022100
 8001888:	58020000 	.word	0x58020000
 800188c:	240050d0 	.word	0x240050d0
 8001890:	40020028 	.word	0x40020028

08001894 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b0b8      	sub	sp, #224	; 0xe0
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018ac:	f107 0310 	add.w	r3, r7, #16
 80018b0:	22bc      	movs	r2, #188	; 0xbc
 80018b2:	2100      	movs	r1, #0
 80018b4:	4618      	mov	r0, r3
 80018b6:	f00e fa0b 	bl	800fcd0 <memset>
  if(hfdcan->Instance==FDCAN1)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a29      	ldr	r2, [pc, #164]	; (8001964 <HAL_FDCAN_MspInit+0xd0>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d14a      	bne.n	800195a <HAL_FDCAN_MspInit+0xc6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80018c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018c8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80018ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80018ce:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018d0:	f107 0310 	add.w	r3, r7, #16
 80018d4:	4618      	mov	r0, r3
 80018d6:	f006 fdf3 	bl	80084c0 <HAL_RCCEx_PeriphCLKConfig>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80018e0:	f7ff feac 	bl	800163c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80018e4:	4b20      	ldr	r3, [pc, #128]	; (8001968 <HAL_FDCAN_MspInit+0xd4>)
 80018e6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80018ea:	4a1f      	ldr	r2, [pc, #124]	; (8001968 <HAL_FDCAN_MspInit+0xd4>)
 80018ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80018f4:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <HAL_FDCAN_MspInit+0xd4>)
 80018f6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80018fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001902:	4b19      	ldr	r3, [pc, #100]	; (8001968 <HAL_FDCAN_MspInit+0xd4>)
 8001904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001908:	4a17      	ldr	r2, [pc, #92]	; (8001968 <HAL_FDCAN_MspInit+0xd4>)
 800190a:	f043 0308 	orr.w	r3, r3, #8
 800190e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_FDCAN_MspInit+0xd4>)
 8001914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001920:	2303      	movs	r3, #3
 8001922:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001926:	2302      	movs	r3, #2
 8001928:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	2300      	movs	r3, #0
 8001934:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001938:	2309      	movs	r3, #9
 800193a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800193e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001942:	4619      	mov	r1, r3
 8001944:	4809      	ldr	r0, [pc, #36]	; (800196c <HAL_FDCAN_MspInit+0xd8>)
 8001946:	f005 fa5b 	bl	8006e00 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 800194a:	2200      	movs	r2, #0
 800194c:	2105      	movs	r1, #5
 800194e:	2013      	movs	r0, #19
 8001950:	f002 fb81 	bl	8004056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001954:	2013      	movs	r0, #19
 8001956:	f002 fb98 	bl	800408a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800195a:	bf00      	nop
 800195c:	37e0      	adds	r7, #224	; 0xe0
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	4000a000 	.word	0x4000a000
 8001968:	58024400 	.word	0x58024400
 800196c:	58020c00 	.word	0x58020c00

08001970 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08a      	sub	sp, #40	; 0x28
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001990:	d154      	bne.n	8001a3c <HAL_TIM_Encoder_MspInit+0xcc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001992:	4b2c      	ldr	r3, [pc, #176]	; (8001a44 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001994:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001998:	4a2a      	ldr	r2, [pc, #168]	; (8001a44 <HAL_TIM_Encoder_MspInit+0xd4>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019a2:	4b28      	ldr	r3, [pc, #160]	; (8001a44 <HAL_TIM_Encoder_MspInit+0xd4>)
 80019a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b0:	4b24      	ldr	r3, [pc, #144]	; (8001a44 <HAL_TIM_Encoder_MspInit+0xd4>)
 80019b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b6:	4a23      	ldr	r2, [pc, #140]	; (8001a44 <HAL_TIM_Encoder_MspInit+0xd4>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019c0:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HAL_TIM_Encoder_MspInit+0xd4>)
 80019c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ce:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <HAL_TIM_Encoder_MspInit+0xd4>)
 80019d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d4:	4a1b      	ldr	r2, [pc, #108]	; (8001a44 <HAL_TIM_Encoder_MspInit+0xd4>)
 80019d6:	f043 0302 	orr.w	r3, r3, #2
 80019da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019de:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <HAL_TIM_Encoder_MspInit+0xd4>)
 80019e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019ec:	2301      	movs	r3, #1
 80019ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019f4:	2301      	movs	r3, #1
 80019f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f8:	2300      	movs	r3, #0
 80019fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019fc:	2301      	movs	r3, #1
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	4619      	mov	r1, r3
 8001a06:	4810      	ldr	r0, [pc, #64]	; (8001a48 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001a08:	f005 f9fa 	bl	8006e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a10:	2302      	movs	r3, #2
 8001a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a14:	2301      	movs	r3, #1
 8001a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	4619      	mov	r1, r3
 8001a26:	4809      	ldr	r0, [pc, #36]	; (8001a4c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a28:	f005 f9ea 	bl	8006e00 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2105      	movs	r1, #5
 8001a30:	201c      	movs	r0, #28
 8001a32:	f002 fb10 	bl	8004056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a36:	201c      	movs	r0, #28
 8001a38:	f002 fb27 	bl	800408a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a3c:	bf00      	nop
 8001a3e:	3728      	adds	r7, #40	; 0x28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	58024400 	.word	0x58024400
 8001a48:	58020000 	.word	0x58020000
 8001a4c:	58020400 	.word	0x58020400

08001a50 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a0b      	ldr	r2, [pc, #44]	; (8001a8c <HAL_TIM_PWM_MspInit+0x3c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d10e      	bne.n	8001a80 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a62:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <HAL_TIM_PWM_MspInit+0x40>)
 8001a64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a68:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <HAL_TIM_PWM_MspInit+0x40>)
 8001a6a:	f043 0302 	orr.w	r3, r3, #2
 8001a6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a72:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <HAL_TIM_PWM_MspInit+0x40>)
 8001a74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a80:	bf00      	nop
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	40000400 	.word	0x40000400
 8001a90:	58024400 	.word	0x58024400

08001a94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	; 0x28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a22      	ldr	r2, [pc, #136]	; (8001b3c <HAL_TIM_MspPostInit+0xa8>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d13e      	bne.n	8001b34 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab6:	4b22      	ldr	r3, [pc, #136]	; (8001b40 <HAL_TIM_MspPostInit+0xac>)
 8001ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001abc:	4a20      	ldr	r2, [pc, #128]	; (8001b40 <HAL_TIM_MspPostInit+0xac>)
 8001abe:	f043 0302 	orr.w	r3, r3, #2
 8001ac2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ac6:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <HAL_TIM_MspPostInit+0xac>)
 8001ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <HAL_TIM_MspPostInit+0xac>)
 8001ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ada:	4a19      	ldr	r2, [pc, #100]	; (8001b40 <HAL_TIM_MspPostInit+0xac>)
 8001adc:	f043 0304 	orr.w	r3, r3, #4
 8001ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ae4:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <HAL_TIM_MspPostInit+0xac>)
 8001ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001af2:	2302      	movs	r3, #2
 8001af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2300      	movs	r3, #0
 8001b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b02:	2302      	movs	r3, #2
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	480d      	ldr	r0, [pc, #52]	; (8001b44 <HAL_TIM_MspPostInit+0xb0>)
 8001b0e:	f005 f977 	bl	8006e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b20:	2300      	movs	r3, #0
 8001b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b24:	2302      	movs	r3, #2
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4806      	ldr	r0, [pc, #24]	; (8001b48 <HAL_TIM_MspPostInit+0xb4>)
 8001b30:	f005 f966 	bl	8006e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b34:	bf00      	nop
 8001b36:	3728      	adds	r7, #40	; 0x28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40000400 	.word	0x40000400
 8001b40:	58024400 	.word	0x58024400
 8001b44:	58020400 	.word	0x58020400
 8001b48:	58020800 	.word	0x58020800

08001b4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b0b8      	sub	sp, #224	; 0xe0
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	22bc      	movs	r2, #188	; 0xbc
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f00e f8af 	bl	800fcd0 <memset>
  if(huart->Instance==USART3)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a25      	ldr	r2, [pc, #148]	; (8001c0c <HAL_UART_MspInit+0xc0>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d142      	bne.n	8001c02 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b80:	2300      	movs	r3, #0
 8001b82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b86:	f107 0310 	add.w	r3, r7, #16
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f006 fc98 	bl	80084c0 <HAL_RCCEx_PeriphCLKConfig>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b96:	f7ff fd51 	bl	800163c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b9a:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <HAL_UART_MspInit+0xc4>)
 8001b9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ba0:	4a1b      	ldr	r2, [pc, #108]	; (8001c10 <HAL_UART_MspInit+0xc4>)
 8001ba2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001baa:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <HAL_UART_MspInit+0xc4>)
 8001bac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bb8:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <HAL_UART_MspInit+0xc4>)
 8001bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bbe:	4a14      	ldr	r2, [pc, #80]	; (8001c10 <HAL_UART_MspInit+0xc4>)
 8001bc0:	f043 0308 	orr.w	r3, r3, #8
 8001bc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <HAL_UART_MspInit+0xc4>)
 8001bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001bd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bde:	2302      	movs	r3, #2
 8001be0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bf0:	2307      	movs	r3, #7
 8001bf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bf6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4805      	ldr	r0, [pc, #20]	; (8001c14 <HAL_UART_MspInit+0xc8>)
 8001bfe:	f005 f8ff 	bl	8006e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c02:	bf00      	nop
 8001c04:	37e0      	adds	r7, #224	; 0xe0
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40004800 	.word	0x40004800
 8001c10:	58024400 	.word	0x58024400
 8001c14:	58020c00 	.word	0x58020c00

08001c18 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b0b8      	sub	sp, #224	; 0xe0
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c30:	f107 0310 	add.w	r3, r7, #16
 8001c34:	22bc      	movs	r2, #188	; 0xbc
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f00e f849 	bl	800fcd0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a37      	ldr	r2, [pc, #220]	; (8001d20 <HAL_PCD_MspInit+0x108>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d166      	bne.n	8001d16 <HAL_PCD_MspInit+0xfe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001c48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001c4c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001c52:	2312      	movs	r3, #18
 8001c54:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001c56:	2302      	movs	r3, #2
 8001c58:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001c62:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c66:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8001c68:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c6c:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001c6e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c76:	f107 0310 	add.w	r3, r7, #16
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f006 fc20 	bl	80084c0 <HAL_RCCEx_PeriphCLKConfig>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8001c86:	f7ff fcd9 	bl	800163c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001c8a:	f005 fc6d 	bl	8007568 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8e:	4b25      	ldr	r3, [pc, #148]	; (8001d24 <HAL_PCD_MspInit+0x10c>)
 8001c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c94:	4a23      	ldr	r2, [pc, #140]	; (8001d24 <HAL_PCD_MspInit+0x10c>)
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c9e:	4b21      	ldr	r3, [pc, #132]	; (8001d24 <HAL_PCD_MspInit+0x10c>)
 8001ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001cac:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001cb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001cc6:	230a      	movs	r3, #10
 8001cc8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ccc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4815      	ldr	r0, [pc, #84]	; (8001d28 <HAL_PCD_MspInit+0x110>)
 8001cd4:	f005 f894 	bl	8006e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	480d      	ldr	r0, [pc, #52]	; (8001d28 <HAL_PCD_MspInit+0x110>)
 8001cf4:	f005 f884 	bl	8006e00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <HAL_PCD_MspInit+0x10c>)
 8001cfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cfe:	4a09      	ldr	r2, [pc, #36]	; (8001d24 <HAL_PCD_MspInit+0x10c>)
 8001d00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d04:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_PCD_MspInit+0x10c>)
 8001d0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001d16:	bf00      	nop
 8001d18:	37e0      	adds	r7, #224	; 0xe0
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40080000 	.word	0x40080000
 8001d24:	58024400 	.word	0x58024400
 8001d28:	58020000 	.word	0x58020000

08001d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <NMI_Handler+0x4>

08001d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d36:	e7fe      	b.n	8001d36 <HardFault_Handler+0x4>

08001d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <MemManage_Handler+0x4>

08001d3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d42:	e7fe      	b.n	8001d42 <BusFault_Handler+0x4>

08001d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <UsageFault_Handler+0x4>

08001d4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d5c:	f000 f8dc 	bl	8001f18 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001d60:	f00d fb56 	bl	800f410 <xTaskGetSchedulerState>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d001      	beq.n	8001d6e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001d6a:	f00b fefd 	bl	800db68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d78:	4802      	ldr	r0, [pc, #8]	; (8001d84 <DMA1_Stream0_IRQHandler+0x10>)
 8001d7a:	f002 fcfd 	bl	8004778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	24004f58 	.word	0x24004f58

08001d88 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001d8c:	4802      	ldr	r0, [pc, #8]	; (8001d98 <DMA1_Stream1_IRQHandler+0x10>)
 8001d8e:	f002 fcf3 	bl	8004778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	240050d0 	.word	0x240050d0

08001d9c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001da0:	4803      	ldr	r0, [pc, #12]	; (8001db0 <ADC_IRQHandler+0x14>)
 8001da2:	f000 feef 	bl	8002b84 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001da6:	4803      	ldr	r0, [pc, #12]	; (8001db4 <ADC_IRQHandler+0x18>)
 8001da8:	f000 feec 	bl	8002b84 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	24004ee4 	.word	0x24004ee4
 8001db4:	24004a08 	.word	0x24004a08

08001db8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <FDCAN1_IT0_IRQHandler+0x10>)
 8001dbe:	f004 fb07 	bl	80063d0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	24004fd4 	.word	0x24004fd4

08001dcc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <TIM2_IRQHandler+0x10>)
 8001dd2:	f008 fdf9 	bl	800a9c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	24005084 	.word	0x24005084

08001de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001de4:	f7fe fbf8 	bl	80005d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001de8:	480c      	ldr	r0, [pc, #48]	; (8001e1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dea:	490d      	ldr	r1, [pc, #52]	; (8001e20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dec:	4a0d      	ldr	r2, [pc, #52]	; (8001e24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df0:	e002      	b.n	8001df8 <LoopCopyDataInit>

08001df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001df6:	3304      	adds	r3, #4

08001df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dfc:	d3f9      	bcc.n	8001df2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dfe:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e00:	4c0a      	ldr	r4, [pc, #40]	; (8001e2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e04:	e001      	b.n	8001e0a <LoopFillZerobss>

08001e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e08:	3204      	adds	r2, #4

08001e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e0c:	d3fb      	bcc.n	8001e06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e0e:	f00d ff2d 	bl	800fc6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e12:	f7fe fc7b 	bl	800070c <main>
  bx  lr
 8001e16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e18:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001e1c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e20:	24000024 	.word	0x24000024
  ldr r2, =_sidata
 8001e24:	0800ffb8 	.word	0x0800ffb8
  ldr r2, =_sbss
 8001e28:	24000024 	.word	0x24000024
  ldr r4, =_ebss
 8001e2c:	240051d8 	.word	0x240051d8

08001e30 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e30:	e7fe      	b.n	8001e30 <ADC3_IRQHandler>
	...

08001e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e3a:	2003      	movs	r0, #3
 8001e3c:	f002 f900 	bl	8004040 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e40:	f006 f968 	bl	8008114 <HAL_RCC_GetSysClockFreq>
 8001e44:	4602      	mov	r2, r0
 8001e46:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <HAL_Init+0x68>)
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	0a1b      	lsrs	r3, r3, #8
 8001e4c:	f003 030f 	and.w	r3, r3, #15
 8001e50:	4913      	ldr	r1, [pc, #76]	; (8001ea0 <HAL_Init+0x6c>)
 8001e52:	5ccb      	ldrb	r3, [r1, r3]
 8001e54:	f003 031f 	and.w	r3, r3, #31
 8001e58:	fa22 f303 	lsr.w	r3, r2, r3
 8001e5c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e5e:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <HAL_Init+0x68>)
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	4a0e      	ldr	r2, [pc, #56]	; (8001ea0 <HAL_Init+0x6c>)
 8001e68:	5cd3      	ldrb	r3, [r2, r3]
 8001e6a:	f003 031f 	and.w	r3, r3, #31
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	fa22 f303 	lsr.w	r3, r2, r3
 8001e74:	4a0b      	ldr	r2, [pc, #44]	; (8001ea4 <HAL_Init+0x70>)
 8001e76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e78:	4a0b      	ldr	r2, [pc, #44]	; (8001ea8 <HAL_Init+0x74>)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e7e:	200f      	movs	r0, #15
 8001e80:	f000 f814 	bl	8001eac <HAL_InitTick>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e002      	b.n	8001e94 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e8e:	f7ff fbdd 	bl	800164c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	58024400 	.word	0x58024400
 8001ea0:	0800fe14 	.word	0x0800fe14
 8001ea4:	24000004 	.word	0x24000004
 8001ea8:	24000000 	.word	0x24000000

08001eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001eb4:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <HAL_InitTick+0x60>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e021      	b.n	8001f04 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ec0:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <HAL_InitTick+0x64>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <HAL_InitTick+0x60>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f002 f8e5 	bl	80040a6 <HAL_SYSTICK_Config>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e00e      	b.n	8001f04 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b0f      	cmp	r3, #15
 8001eea:	d80a      	bhi.n	8001f02 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eec:	2200      	movs	r2, #0
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef4:	f002 f8af 	bl	8004056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef8:	4a06      	ldr	r2, [pc, #24]	; (8001f14 <HAL_InitTick+0x68>)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
 8001f00:	e000      	b.n	8001f04 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	2400001c 	.word	0x2400001c
 8001f10:	24000000 	.word	0x24000000
 8001f14:	24000018 	.word	0x24000018

08001f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_IncTick+0x20>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_IncTick+0x24>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4413      	add	r3, r2
 8001f28:	4a04      	ldr	r2, [pc, #16]	; (8001f3c <HAL_IncTick+0x24>)
 8001f2a:	6013      	str	r3, [r2, #0]
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	2400001c 	.word	0x2400001c
 8001f3c:	24005194 	.word	0x24005194

08001f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return uwTick;
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <HAL_GetTick+0x14>)
 8001f46:	681b      	ldr	r3, [r3, #0]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	24005194 	.word	0x24005194

08001f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f60:	f7ff ffee 	bl	8001f40 <HAL_GetTick>
 8001f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f70:	d005      	beq.n	8001f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f72:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <HAL_Delay+0x44>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f7e:	bf00      	nop
 8001f80:	f7ff ffde 	bl	8001f40 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d8f7      	bhi.n	8001f80 <HAL_Delay+0x28>
  {
  }
}
 8001f90:	bf00      	nop
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	2400001c 	.word	0x2400001c

08001fa0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001fa4:	4b03      	ldr	r3, [pc, #12]	; (8001fb4 <HAL_GetREVID+0x14>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	0c1b      	lsrs	r3, r3, #16
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	5c001000 	.word	0x5c001000

08001fb8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	609a      	str	r2, [r3, #8]
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002020:	b480      	push	{r7}
 8002022:	b087      	sub	sp, #28
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	3360      	adds	r3, #96	; 0x60
 8002032:	461a      	mov	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	430b      	orrs	r3, r1
 800204e:	431a      	orrs	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002054:	bf00      	nop
 8002056:	371c      	adds	r7, #28
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	f003 031f 	and.w	r3, r3, #31
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	fa01 f303 	lsl.w	r3, r1, r3
 8002080:	431a      	orrs	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	611a      	str	r2, [r3, #16]
}
 8002086:	bf00      	nop
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002092:	b480      	push	{r7}
 8002094:	b087      	sub	sp, #28
 8002096:	af00      	add	r7, sp, #0
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	3360      	adds	r3, #96	; 0x60
 80020a2:	461a      	mov	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	431a      	orrs	r2, r3
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	601a      	str	r2, [r3, #0]
  }
}
 80020bc:	bf00      	nop
 80020be:	371c      	adds	r7, #28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80020dc:	2301      	movs	r3, #1
 80020de:	e000      	b.n	80020e2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b087      	sub	sp, #28
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	3330      	adds	r3, #48	; 0x30
 80020fe:	461a      	mov	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	0a1b      	lsrs	r3, r3, #8
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	4413      	add	r3, r2
 800210c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	f003 031f 	and.w	r3, r3, #31
 8002118:	211f      	movs	r1, #31
 800211a:	fa01 f303 	lsl.w	r3, r1, r3
 800211e:	43db      	mvns	r3, r3
 8002120:	401a      	ands	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	0e9b      	lsrs	r3, r3, #26
 8002126:	f003 011f 	and.w	r1, r3, #31
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	f003 031f 	and.w	r3, r3, #31
 8002130:	fa01 f303 	lsl.w	r3, r1, r3
 8002134:	431a      	orrs	r2, r3
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800213a:	bf00      	nop
 800213c:	371c      	adds	r7, #28
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002152:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800216c:	b480      	push	{r7}
 800216e:	b087      	sub	sp, #28
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	3314      	adds	r3, #20
 800217c:	461a      	mov	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	0e5b      	lsrs	r3, r3, #25
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	4413      	add	r3, r2
 800218a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	0d1b      	lsrs	r3, r3, #20
 8002194:	f003 031f 	and.w	r3, r3, #31
 8002198:	2107      	movs	r1, #7
 800219a:	fa01 f303 	lsl.w	r3, r1, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	401a      	ands	r2, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	0d1b      	lsrs	r3, r3, #20
 80021a6:	f003 031f 	and.w	r3, r3, #31
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	431a      	orrs	r2, r3
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021b6:	bf00      	nop
 80021b8:	371c      	adds	r7, #28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021dc:	43db      	mvns	r3, r3
 80021de:	401a      	ands	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f003 0318 	and.w	r3, r3, #24
 80021e6:	4908      	ldr	r1, [pc, #32]	; (8002208 <LL_ADC_SetChannelSingleDiff+0x44>)
 80021e8:	40d9      	lsrs	r1, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	400b      	ands	r3, r1
 80021ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021f2:	431a      	orrs	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	000fffff 	.word	0x000fffff

0800220c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 031f 	and.w	r3, r3, #31
}
 800221c:	4618      	mov	r0, r3
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	4b04      	ldr	r3, [pc, #16]	; (8002264 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002252:	4013      	ands	r3, r2
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6093      	str	r3, [r2, #8]
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	5fffffc0 	.word	0x5fffffc0

08002268 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800227c:	d101      	bne.n	8002282 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <LL_ADC_EnableInternalRegulator+0x24>)
 800229e:	4013      	ands	r3, r2
 80022a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	6fffffc0 	.word	0x6fffffc0

080022b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022cc:	d101      	bne.n	80022d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <LL_ADC_Enable+0x24>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	f043 0201 	orr.w	r2, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	7fffffc0 	.word	0x7fffffc0

08002308 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	4b05      	ldr	r3, [pc, #20]	; (800232c <LL_ADC_Disable+0x24>)
 8002316:	4013      	ands	r3, r2
 8002318:	f043 0202 	orr.w	r2, r3, #2
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	7fffffc0 	.word	0x7fffffc0

08002330 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b01      	cmp	r3, #1
 8002342:	d101      	bne.n	8002348 <LL_ADC_IsEnabled+0x18>
 8002344:	2301      	movs	r3, #1
 8002346:	e000      	b.n	800234a <LL_ADC_IsEnabled+0x1a>
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b02      	cmp	r3, #2
 8002368:	d101      	bne.n	800236e <LL_ADC_IsDisableOngoing+0x18>
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <LL_ADC_IsDisableOngoing+0x1a>
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <LL_ADC_REG_StartConversion+0x24>)
 800238a:	4013      	ands	r3, r2
 800238c:	f043 0204 	orr.w	r2, r3, #4
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	7fffffc0 	.word	0x7fffffc0

080023a4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <LL_ADC_REG_StopConversion+0x24>)
 80023b2:	4013      	ands	r3, r2
 80023b4:	f043 0210 	orr.w	r2, r3, #16
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	7fffffc0 	.word	0x7fffffc0

080023cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d101      	bne.n	80023e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
	...

080023f4 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	4b05      	ldr	r3, [pc, #20]	; (8002418 <LL_ADC_INJ_StopConversion+0x24>)
 8002402:	4013      	ands	r3, r2
 8002404:	f043 0220 	orr.w	r2, r3, #32
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	7fffffc0 	.word	0x7fffffc0

0800241c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b08      	cmp	r3, #8
 800242e:	d101      	bne.n	8002434 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002444:	b590      	push	{r4, r7, lr}
 8002446:	b089      	sub	sp, #36	; 0x24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002450:	2300      	movs	r3, #0
 8002452:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e18e      	b.n	800277c <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002468:	2b00      	cmp	r3, #0
 800246a:	d109      	bne.n	8002480 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff f90b 	bl	8001688 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff feef 	bl	8002268 <LL_ADC_IsDeepPowerDownEnabled>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d004      	beq.n	800249a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fed5 	bl	8002244 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff ff0a 	bl	80022b8 <LL_ADC_IsInternalRegulatorEnabled>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d114      	bne.n	80024d4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff feee 	bl	8002290 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024b4:	4b9a      	ldr	r3, [pc, #616]	; (8002720 <HAL_ADC_Init+0x2dc>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	099b      	lsrs	r3, r3, #6
 80024ba:	4a9a      	ldr	r2, [pc, #616]	; (8002724 <HAL_ADC_Init+0x2e0>)
 80024bc:	fba2 2303 	umull	r2, r3, r2, r3
 80024c0:	099b      	lsrs	r3, r3, #6
 80024c2:	3301      	adds	r3, #1
 80024c4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024c6:	e002      	b.n	80024ce <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f9      	bne.n	80024c8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff feed 	bl	80022b8 <LL_ADC_IsInternalRegulatorEnabled>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10d      	bne.n	8002500 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e8:	f043 0210 	orr.w	r2, r3, #16
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f4:	f043 0201 	orr.w	r2, r3, #1
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ff61 	bl	80023cc <LL_ADC_REG_IsConversionOngoing>
 800250a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002510:	f003 0310 	and.w	r3, r3, #16
 8002514:	2b00      	cmp	r3, #0
 8002516:	f040 8128 	bne.w	800276a <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2b00      	cmp	r3, #0
 800251e:	f040 8124 	bne.w	800276a <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002526:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800252a:	f043 0202 	orr.w	r2, r3, #2
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff fefa 	bl	8002330 <LL_ADC_IsEnabled>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d136      	bne.n	80025b0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a78      	ldr	r2, [pc, #480]	; (8002728 <HAL_ADC_Init+0x2e4>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d004      	beq.n	8002556 <HAL_ADC_Init+0x112>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a76      	ldr	r2, [pc, #472]	; (800272c <HAL_ADC_Init+0x2e8>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d10e      	bne.n	8002574 <HAL_ADC_Init+0x130>
 8002556:	4874      	ldr	r0, [pc, #464]	; (8002728 <HAL_ADC_Init+0x2e4>)
 8002558:	f7ff feea 	bl	8002330 <LL_ADC_IsEnabled>
 800255c:	4604      	mov	r4, r0
 800255e:	4873      	ldr	r0, [pc, #460]	; (800272c <HAL_ADC_Init+0x2e8>)
 8002560:	f7ff fee6 	bl	8002330 <LL_ADC_IsEnabled>
 8002564:	4603      	mov	r3, r0
 8002566:	4323      	orrs	r3, r4
 8002568:	2b00      	cmp	r3, #0
 800256a:	bf0c      	ite	eq
 800256c:	2301      	moveq	r3, #1
 800256e:	2300      	movne	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	e008      	b.n	8002586 <HAL_ADC_Init+0x142>
 8002574:	486e      	ldr	r0, [pc, #440]	; (8002730 <HAL_ADC_Init+0x2ec>)
 8002576:	f7ff fedb 	bl	8002330 <LL_ADC_IsEnabled>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	bf0c      	ite	eq
 8002580:	2301      	moveq	r3, #1
 8002582:	2300      	movne	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d012      	beq.n	80025b0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a66      	ldr	r2, [pc, #408]	; (8002728 <HAL_ADC_Init+0x2e4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d004      	beq.n	800259e <HAL_ADC_Init+0x15a>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a64      	ldr	r2, [pc, #400]	; (800272c <HAL_ADC_Init+0x2e8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d101      	bne.n	80025a2 <HAL_ADC_Init+0x15e>
 800259e:	4a65      	ldr	r2, [pc, #404]	; (8002734 <HAL_ADC_Init+0x2f0>)
 80025a0:	e000      	b.n	80025a4 <HAL_ADC_Init+0x160>
 80025a2:	4a65      	ldr	r2, [pc, #404]	; (8002738 <HAL_ADC_Init+0x2f4>)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	4619      	mov	r1, r3
 80025aa:	4610      	mov	r0, r2
 80025ac:	f7ff fd04 	bl	8001fb8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80025b0:	f7ff fcf6 	bl	8001fa0 <HAL_GetREVID>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f241 0203 	movw	r2, #4099	; 0x1003
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d914      	bls.n	80025e8 <HAL_ADC_Init+0x1a4>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b10      	cmp	r3, #16
 80025c4:	d110      	bne.n	80025e8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	7d5b      	ldrb	r3, [r3, #21]
 80025ca:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80025d0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80025d6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	7f1b      	ldrb	r3, [r3, #28]
 80025dc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80025de:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80025e0:	f043 030c 	orr.w	r3, r3, #12
 80025e4:	61bb      	str	r3, [r7, #24]
 80025e6:	e00d      	b.n	8002604 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	7d5b      	ldrb	r3, [r3, #21]
 80025ec:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80025f2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80025f8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	7f1b      	ldrb	r3, [r3, #28]
 80025fe:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002600:	4313      	orrs	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	7f1b      	ldrb	r3, [r3, #28]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d106      	bne.n	800261a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	3b01      	subs	r3, #1
 8002612:	045b      	lsls	r3, r3, #17
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	2b00      	cmp	r3, #0
 8002620:	d009      	beq.n	8002636 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68da      	ldr	r2, [r3, #12]
 800263c:	4b3f      	ldr	r3, [pc, #252]	; (800273c <HAL_ADC_Init+0x2f8>)
 800263e:	4013      	ands	r3, r2
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	69b9      	ldr	r1, [r7, #24]
 8002646:	430b      	orrs	r3, r1
 8002648:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff febc 	bl	80023cc <LL_ADC_REG_IsConversionOngoing>
 8002654:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fede 	bl	800241c <LL_ADC_INJ_IsConversionOngoing>
 8002660:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d14a      	bne.n	80026fe <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d147      	bne.n	80026fe <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	7d1b      	ldrb	r3, [r3, #20]
 8002672:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	4b2f      	ldr	r3, [pc, #188]	; (8002740 <HAL_ADC_Init+0x2fc>)
 8002684:	4013      	ands	r3, r2
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	69b9      	ldr	r1, [r7, #24]
 800268c:	430b      	orrs	r3, r1
 800268e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002696:	2b01      	cmp	r3, #1
 8002698:	d11b      	bne.n	80026d2 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691a      	ldr	r2, [r3, #16]
 80026a6:	4b27      	ldr	r3, [pc, #156]	; (8002744 <HAL_ADC_Init+0x300>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026ae:	3a01      	subs	r2, #1
 80026b0:	0411      	lsls	r1, r2, #16
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026b6:	4311      	orrs	r1, r2
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80026bc:	4311      	orrs	r1, r2
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80026c2:	430a      	orrs	r2, r1
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	611a      	str	r2, [r3, #16]
 80026d0:	e007      	b.n	80026e2 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0201 	bic.w	r2, r2, #1
 80026e0:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f001 f991 	bl	8003a20 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d120      	bne.n	8002748 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270c:	f023 010f 	bic.w	r1, r3, #15
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	1e5a      	subs	r2, r3, #1
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	631a      	str	r2, [r3, #48]	; 0x30
 800271e:	e01b      	b.n	8002758 <HAL_ADC_Init+0x314>
 8002720:	24000000 	.word	0x24000000
 8002724:	053e2d63 	.word	0x053e2d63
 8002728:	40022000 	.word	0x40022000
 800272c:	40022100 	.word	0x40022100
 8002730:	58026000 	.word	0x58026000
 8002734:	40022300 	.word	0x40022300
 8002738:	58026300 	.word	0x58026300
 800273c:	fff0c003 	.word	0xfff0c003
 8002740:	ffffbffc 	.word	0xffffbffc
 8002744:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 020f 	bic.w	r2, r2, #15
 8002756:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275c:	f023 0303 	bic.w	r3, r3, #3
 8002760:	f043 0201 	orr.w	r2, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	655a      	str	r2, [r3, #84]	; 0x54
 8002768:	e007      	b.n	800277a <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276e:	f043 0210 	orr.w	r2, r3, #16
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800277a:	7ffb      	ldrb	r3, [r7, #31]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3724      	adds	r7, #36	; 0x24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd90      	pop	{r4, r7, pc}

08002784 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a5c      	ldr	r2, [pc, #368]	; (8002904 <HAL_ADC_Start+0x180>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d004      	beq.n	80027a0 <HAL_ADC_Start+0x1c>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a5b      	ldr	r2, [pc, #364]	; (8002908 <HAL_ADC_Start+0x184>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d101      	bne.n	80027a4 <HAL_ADC_Start+0x20>
 80027a0:	4b5a      	ldr	r3, [pc, #360]	; (800290c <HAL_ADC_Start+0x188>)
 80027a2:	e000      	b.n	80027a6 <HAL_ADC_Start+0x22>
 80027a4:	4b5a      	ldr	r3, [pc, #360]	; (8002910 <HAL_ADC_Start+0x18c>)
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fd30 	bl	800220c <LL_ADC_GetMultimode>
 80027ac:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff fe0a 	bl	80023cc <LL_ADC_REG_IsConversionOngoing>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f040 809a 	bne.w	80028f4 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_ADC_Start+0x4a>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e095      	b.n	80028fa <HAL_ADC_Start+0x176>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f001 f838 	bl	800384c <ADC_Enable>
 80027dc:	4603      	mov	r3, r0
 80027de:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80027e0:	7dfb      	ldrb	r3, [r7, #23]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f040 8081 	bne.w	80028ea <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027ec:	4b49      	ldr	r3, [pc, #292]	; (8002914 <HAL_ADC_Start+0x190>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a42      	ldr	r2, [pc, #264]	; (8002908 <HAL_ADC_Start+0x184>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d002      	beq.n	8002808 <HAL_ADC_Start+0x84>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	e000      	b.n	800280a <HAL_ADC_Start+0x86>
 8002808:	4b3e      	ldr	r3, [pc, #248]	; (8002904 <HAL_ADC_Start+0x180>)
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	4293      	cmp	r3, r2
 8002810:	d002      	beq.n	8002818 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d105      	bne.n	8002824 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002828:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800282c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002830:	d106      	bne.n	8002840 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002836:	f023 0206 	bic.w	r2, r3, #6
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	659a      	str	r2, [r3, #88]	; 0x58
 800283e:	e002      	b.n	8002846 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	221c      	movs	r2, #28
 800284c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a2b      	ldr	r2, [pc, #172]	; (8002908 <HAL_ADC_Start+0x184>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d002      	beq.n	8002866 <HAL_ADC_Start+0xe2>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	e000      	b.n	8002868 <HAL_ADC_Start+0xe4>
 8002866:	4b27      	ldr	r3, [pc, #156]	; (8002904 <HAL_ADC_Start+0x180>)
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6812      	ldr	r2, [r2, #0]
 800286c:	4293      	cmp	r3, r2
 800286e:	d008      	beq.n	8002882 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d005      	beq.n	8002882 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	2b05      	cmp	r3, #5
 800287a:	d002      	beq.n	8002882 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	2b09      	cmp	r3, #9
 8002880:	d114      	bne.n	80028ac <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d007      	beq.n	80028a0 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002894:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002898:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff fd69 	bl	800237c <LL_ADC_REG_StartConversion>
 80028aa:	e025      	b.n	80028f8 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a12      	ldr	r2, [pc, #72]	; (8002908 <HAL_ADC_Start+0x184>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d002      	beq.n	80028c8 <HAL_ADC_Start+0x144>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	e000      	b.n	80028ca <HAL_ADC_Start+0x146>
 80028c8:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <HAL_ADC_Start+0x180>)
 80028ca:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00f      	beq.n	80028f8 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	655a      	str	r2, [r3, #84]	; 0x54
 80028e8:	e006      	b.n	80028f8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80028f2:	e001      	b.n	80028f8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028f4:	2302      	movs	r3, #2
 80028f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80028f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40022000 	.word	0x40022000
 8002908:	40022100 	.word	0x40022100
 800290c:	40022300 	.word	0x40022300
 8002910:	58026300 	.word	0x58026300
 8002914:	fffff0fe 	.word	0xfffff0fe

08002918 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002926:	2b01      	cmp	r3, #1
 8002928:	d101      	bne.n	800292e <HAL_ADC_Stop+0x16>
 800292a:	2302      	movs	r3, #2
 800292c:	e021      	b.n	8002972 <HAL_ADC_Stop+0x5a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002936:	2103      	movs	r1, #3
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 fecb 	bl	80036d4 <ADC_ConversionStop>
 800293e:	4603      	mov	r3, r0
 8002940:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10f      	bne.n	8002968 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f001 f809 	bl	8003960 <ADC_Disable>
 800294e:	4603      	mov	r3, r0
 8002950:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d107      	bne.n	8002968 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800295c:	4b07      	ldr	r3, [pc, #28]	; (800297c <HAL_ADC_Stop+0x64>)
 800295e:	4013      	ands	r3, r2
 8002960:	f043 0201 	orr.w	r2, r3, #1
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002970:	7bfb      	ldrb	r3, [r7, #15]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	ffffeefe 	.word	0xffffeefe

08002980 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b088      	sub	sp, #32
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a72      	ldr	r2, [pc, #456]	; (8002b58 <HAL_ADC_PollForConversion+0x1d8>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d004      	beq.n	800299e <HAL_ADC_PollForConversion+0x1e>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a70      	ldr	r2, [pc, #448]	; (8002b5c <HAL_ADC_PollForConversion+0x1dc>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d101      	bne.n	80029a2 <HAL_ADC_PollForConversion+0x22>
 800299e:	4b70      	ldr	r3, [pc, #448]	; (8002b60 <HAL_ADC_PollForConversion+0x1e0>)
 80029a0:	e000      	b.n	80029a4 <HAL_ADC_PollForConversion+0x24>
 80029a2:	4b70      	ldr	r3, [pc, #448]	; (8002b64 <HAL_ADC_PollForConversion+0x1e4>)
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff fc31 	bl	800220c <LL_ADC_GetMultimode>
 80029aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d102      	bne.n	80029ba <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80029b4:	2308      	movs	r3, #8
 80029b6:	61fb      	str	r3, [r7, #28]
 80029b8:	e037      	b.n	8002a2a <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	2b05      	cmp	r3, #5
 80029c4:	d002      	beq.n	80029cc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2b09      	cmp	r3, #9
 80029ca:	d111      	bne.n	80029f0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d007      	beq.n	80029ea <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029de:	f043 0220 	orr.w	r2, r3, #32
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e0b1      	b.n	8002b4e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80029ea:	2304      	movs	r3, #4
 80029ec:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80029ee:	e01c      	b.n	8002a2a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a58      	ldr	r2, [pc, #352]	; (8002b58 <HAL_ADC_PollForConversion+0x1d8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d004      	beq.n	8002a04 <HAL_ADC_PollForConversion+0x84>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a57      	ldr	r2, [pc, #348]	; (8002b5c <HAL_ADC_PollForConversion+0x1dc>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d101      	bne.n	8002a08 <HAL_ADC_PollForConversion+0x88>
 8002a04:	4b56      	ldr	r3, [pc, #344]	; (8002b60 <HAL_ADC_PollForConversion+0x1e0>)
 8002a06:	e000      	b.n	8002a0a <HAL_ADC_PollForConversion+0x8a>
 8002a08:	4b56      	ldr	r3, [pc, #344]	; (8002b64 <HAL_ADC_PollForConversion+0x1e4>)
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff fc0c 	bl	8002228 <LL_ADC_GetMultiDMATransfer>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d007      	beq.n	8002a26 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1a:	f043 0220 	orr.w	r2, r3, #32
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e093      	b.n	8002b4e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002a26:	2304      	movs	r3, #4
 8002a28:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002a2a:	f7ff fa89 	bl	8001f40 <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a30:	e021      	b.n	8002a76 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a38:	d01d      	beq.n	8002a76 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002a3a:	f7ff fa81 	bl	8001f40 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d302      	bcc.n	8002a50 <HAL_ADC_PollForConversion+0xd0>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d112      	bne.n	8002a76 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10b      	bne.n	8002a76 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a62:	f043 0204 	orr.w	r2, r3, #4
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e06b      	b.n	8002b4e <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0d6      	beq.n	8002a32 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a88:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fb17 	bl	80020c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d01c      	beq.n	8002ada <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	7d5b      	ldrb	r3, [r3, #21]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d118      	bne.n	8002ada <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	d111      	bne.n	8002ada <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d105      	bne.n	8002ada <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad2:	f043 0201 	orr.w	r2, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1f      	ldr	r2, [pc, #124]	; (8002b5c <HAL_ADC_PollForConversion+0x1dc>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d002      	beq.n	8002aea <HAL_ADC_PollForConversion+0x16a>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	e000      	b.n	8002aec <HAL_ADC_PollForConversion+0x16c>
 8002aea:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <HAL_ADC_PollForConversion+0x1d8>)
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d008      	beq.n	8002b06 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d005      	beq.n	8002b06 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2b05      	cmp	r3, #5
 8002afe:	d002      	beq.n	8002b06 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	2b09      	cmp	r3, #9
 8002b04:	d104      	bne.n	8002b10 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	61bb      	str	r3, [r7, #24]
 8002b0e:	e00c      	b.n	8002b2a <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a11      	ldr	r2, [pc, #68]	; (8002b5c <HAL_ADC_PollForConversion+0x1dc>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d002      	beq.n	8002b20 <HAL_ADC_PollForConversion+0x1a0>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	e000      	b.n	8002b22 <HAL_ADC_PollForConversion+0x1a2>
 8002b20:	4b0d      	ldr	r3, [pc, #52]	; (8002b58 <HAL_ADC_PollForConversion+0x1d8>)
 8002b22:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d104      	bne.n	8002b3a <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2208      	movs	r2, #8
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	e008      	b.n	8002b4c <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d103      	bne.n	8002b4c <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	220c      	movs	r2, #12
 8002b4a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3720      	adds	r7, #32
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40022000 	.word	0x40022000
 8002b5c:	40022100 	.word	0x40022100
 8002b60:	40022300 	.word	0x40022300
 8002b64:	58026300 	.word	0x58026300

08002b68 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
	...

08002b84 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08a      	sub	sp, #40	; 0x28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a87      	ldr	r2, [pc, #540]	; (8002dc4 <HAL_ADC_IRQHandler+0x240>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d004      	beq.n	8002bb4 <HAL_ADC_IRQHandler+0x30>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a86      	ldr	r2, [pc, #536]	; (8002dc8 <HAL_ADC_IRQHandler+0x244>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d101      	bne.n	8002bb8 <HAL_ADC_IRQHandler+0x34>
 8002bb4:	4b85      	ldr	r3, [pc, #532]	; (8002dcc <HAL_ADC_IRQHandler+0x248>)
 8002bb6:	e000      	b.n	8002bba <HAL_ADC_IRQHandler+0x36>
 8002bb8:	4b85      	ldr	r3, [pc, #532]	; (8002dd0 <HAL_ADC_IRQHandler+0x24c>)
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff fb26 	bl	800220c <LL_ADC_GetMultimode>
 8002bc0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d017      	beq.n	8002bfc <HAL_ADC_IRQHandler+0x78>
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d012      	beq.n	8002bfc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bda:	f003 0310 	and.w	r3, r3, #16
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d105      	bne.n	8002bee <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f001 f86e 	bl	8003cd0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d004      	beq.n	8002c10 <HAL_ADC_IRQHandler+0x8c>
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10a      	bne.n	8002c26 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 8083 	beq.w	8002d22 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d07d      	beq.n	8002d22 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2a:	f003 0310 	and.w	r3, r3, #16
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d105      	bne.n	8002c3e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c36:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff fa40 	bl	80020c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d062      	beq.n	8002d14 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a5d      	ldr	r2, [pc, #372]	; (8002dc8 <HAL_ADC_IRQHandler+0x244>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d002      	beq.n	8002c5e <HAL_ADC_IRQHandler+0xda>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	e000      	b.n	8002c60 <HAL_ADC_IRQHandler+0xdc>
 8002c5e:	4b59      	ldr	r3, [pc, #356]	; (8002dc4 <HAL_ADC_IRQHandler+0x240>)
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6812      	ldr	r2, [r2, #0]
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d008      	beq.n	8002c7a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2b05      	cmp	r3, #5
 8002c72:	d002      	beq.n	8002c7a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2b09      	cmp	r3, #9
 8002c78:	d104      	bne.n	8002c84 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	623b      	str	r3, [r7, #32]
 8002c82:	e00c      	b.n	8002c9e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a4f      	ldr	r2, [pc, #316]	; (8002dc8 <HAL_ADC_IRQHandler+0x244>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d002      	beq.n	8002c94 <HAL_ADC_IRQHandler+0x110>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	e000      	b.n	8002c96 <HAL_ADC_IRQHandler+0x112>
 8002c94:	4b4b      	ldr	r3, [pc, #300]	; (8002dc4 <HAL_ADC_IRQHandler+0x240>)
 8002c96:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d135      	bne.n	8002d14 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d12e      	bne.n	8002d14 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff fb86 	bl	80023cc <LL_ADC_REG_IsConversionOngoing>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d11a      	bne.n	8002cfc <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 020c 	bic.w	r2, r2, #12
 8002cd4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d112      	bne.n	8002d14 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf2:	f043 0201 	orr.w	r2, r3, #1
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	655a      	str	r2, [r3, #84]	; 0x54
 8002cfa:	e00b      	b.n	8002d14 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d00:	f043 0210 	orr.w	r2, r3, #16
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0c:	f043 0201 	orr.w	r2, r3, #1
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f96f 	bl	8002ff8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	220c      	movs	r2, #12
 8002d20:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 0320 	and.w	r3, r3, #32
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d004      	beq.n	8002d36 <HAL_ADC_IRQHandler+0x1b2>
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	f003 0320 	and.w	r3, r3, #32
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10b      	bne.n	8002d4e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 80a0 	beq.w	8002e82 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 809a 	beq.w	8002e82 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d52:	f003 0310 	and.w	r3, r3, #16
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d105      	bne.n	8002d66 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff f9eb 	bl	8002146 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002d70:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff f9a6 	bl	80020c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d7c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a11      	ldr	r2, [pc, #68]	; (8002dc8 <HAL_ADC_IRQHandler+0x244>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d002      	beq.n	8002d8e <HAL_ADC_IRQHandler+0x20a>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	e000      	b.n	8002d90 <HAL_ADC_IRQHandler+0x20c>
 8002d8e:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <HAL_ADC_IRQHandler+0x240>)
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d008      	beq.n	8002daa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d005      	beq.n	8002daa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2b06      	cmp	r3, #6
 8002da2:	d002      	beq.n	8002daa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	2b07      	cmp	r3, #7
 8002da8:	d104      	bne.n	8002db4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	623b      	str	r3, [r7, #32]
 8002db2:	e014      	b.n	8002dde <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a03      	ldr	r2, [pc, #12]	; (8002dc8 <HAL_ADC_IRQHandler+0x244>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d00a      	beq.n	8002dd4 <HAL_ADC_IRQHandler+0x250>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	e008      	b.n	8002dd6 <HAL_ADC_IRQHandler+0x252>
 8002dc4:	40022000 	.word	0x40022000
 8002dc8:	40022100 	.word	0x40022100
 8002dcc:	40022300 	.word	0x40022300
 8002dd0:	58026300 	.word	0x58026300
 8002dd4:	4b84      	ldr	r3, [pc, #528]	; (8002fe8 <HAL_ADC_IRQHandler+0x464>)
 8002dd6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10c      	bne.n	8002dfe <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d142      	bne.n	8002e74 <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d03f      	beq.n	8002e74 <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d13a      	bne.n	8002e74 <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e08:	2b40      	cmp	r3, #64	; 0x40
 8002e0a:	d133      	bne.n	8002e74 <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d12e      	bne.n	8002e74 <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff fafe 	bl	800241c <LL_ADC_INJ_IsConversionOngoing>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d11a      	bne.n	8002e5c <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e34:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d112      	bne.n	8002e74 <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e52:	f043 0201 	orr.w	r2, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	655a      	str	r2, [r3, #84]	; 0x54
 8002e5a:	e00b      	b.n	8002e74 <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e60:	f043 0210 	orr.w	r2, r3, #16
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6c:	f043 0201 	orr.w	r2, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 ff03 	bl	8003c80 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2260      	movs	r2, #96	; 0x60
 8002e80:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d011      	beq.n	8002eb0 <HAL_ADC_IRQHandler+0x32c>
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00c      	beq.n	8002eb0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f8b2 	bl	800300c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2280      	movs	r2, #128	; 0x80
 8002eae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d012      	beq.n	8002ee0 <HAL_ADC_IRQHandler+0x35c>
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00d      	beq.n	8002ee0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 fee9 	bl	8003ca8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ede:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d012      	beq.n	8002f10 <HAL_ADC_IRQHandler+0x38c>
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00d      	beq.n	8002f10 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 fedb 	bl	8003cbc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f0e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f003 0310 	and.w	r3, r3, #16
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d043      	beq.n	8002fa2 <HAL_ADC_IRQHandler+0x41e>
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	f003 0310 	and.w	r3, r3, #16
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d03e      	beq.n	8002fa2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d102      	bne.n	8002f32 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f30:	e021      	b.n	8002f76 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d015      	beq.n	8002f64 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a2a      	ldr	r2, [pc, #168]	; (8002fe8 <HAL_ADC_IRQHandler+0x464>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d004      	beq.n	8002f4c <HAL_ADC_IRQHandler+0x3c8>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a29      	ldr	r2, [pc, #164]	; (8002fec <HAL_ADC_IRQHandler+0x468>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d101      	bne.n	8002f50 <HAL_ADC_IRQHandler+0x3cc>
 8002f4c:	4b28      	ldr	r3, [pc, #160]	; (8002ff0 <HAL_ADC_IRQHandler+0x46c>)
 8002f4e:	e000      	b.n	8002f52 <HAL_ADC_IRQHandler+0x3ce>
 8002f50:	4b28      	ldr	r3, [pc, #160]	; (8002ff4 <HAL_ADC_IRQHandler+0x470>)
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff f968 	bl	8002228 <LL_ADC_GetMultiDMATransfer>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00b      	beq.n	8002f76 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
 8002f62:	e008      	b.n	8002f76 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002f72:	2301      	movs	r3, #1
 8002f74:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d10e      	bne.n	8002f9a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8c:	f043 0202 	orr.w	r2, r3, #2
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f843 	bl	8003020 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2210      	movs	r2, #16
 8002fa0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d018      	beq.n	8002fde <HAL_ADC_IRQHandler+0x45a>
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d013      	beq.n	8002fde <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fba:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc6:	f043 0208 	orr.w	r2, r3, #8
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fd6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 fe5b 	bl	8003c94 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002fde:	bf00      	nop
 8002fe0:	3728      	adds	r7, #40	; 0x28
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40022000 	.word	0x40022000
 8002fec:	40022100 	.word	0x40022100
 8002ff0:	40022300 	.word	0x40022300
 8002ff4:	58026300 	.word	0x58026300

08002ff8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003034:	b590      	push	{r4, r7, lr}
 8003036:	b0a1      	sub	sp, #132	; 0x84
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003044:	2300      	movs	r3, #0
 8003046:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	4a9d      	ldr	r2, [pc, #628]	; (80032c4 <HAL_ADC_ConfigChannel+0x290>)
 800304e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_ADC_ConfigChannel+0x2a>
 800305a:	2302      	movs	r3, #2
 800305c:	e321      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x66e>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff f9ae 	bl	80023cc <LL_ADC_REG_IsConversionOngoing>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	f040 8306 	bne.w	8003684 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003080:	2b00      	cmp	r3, #0
 8003082:	d108      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x62>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	0e9b      	lsrs	r3, r3, #26
 800308a:	f003 031f 	and.w	r3, r3, #31
 800308e:	2201      	movs	r2, #1
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	e016      	b.n	80030c4 <HAL_ADC_ConfigChannel+0x90>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800309e:	fa93 f3a3 	rbit	r3, r3
 80030a2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030a6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80030a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80030ae:	2320      	movs	r3, #32
 80030b0:	e003      	b.n	80030ba <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80030b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030b4:	fab3 f383 	clz	r3, r3
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	f003 031f 	and.w	r3, r3, #31
 80030be:	2201      	movs	r2, #1
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6812      	ldr	r2, [r2, #0]
 80030c8:	69d1      	ldr	r1, [r2, #28]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6812      	ldr	r2, [r2, #0]
 80030ce:	430b      	orrs	r3, r1
 80030d0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	6859      	ldr	r1, [r3, #4]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	f7ff f805 	bl	80020ee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff f96f 	bl	80023cc <LL_ADC_REG_IsConversionOngoing>
 80030ee:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff f991 	bl	800241c <LL_ADC_INJ_IsConversionOngoing>
 80030fa:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f040 80b3 	bne.w	800326a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003104:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003106:	2b00      	cmp	r3, #0
 8003108:	f040 80af 	bne.w	800326a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6818      	ldr	r0, [r3, #0]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	6819      	ldr	r1, [r3, #0]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	461a      	mov	r2, r3
 800311a:	f7ff f827 	bl	800216c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800311e:	4b6a      	ldr	r3, [pc, #424]	; (80032c8 <HAL_ADC_ConfigChannel+0x294>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003126:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800312a:	d10b      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x110>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	695a      	ldr	r2, [r3, #20]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	089b      	lsrs	r3, r3, #2
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	e01d      	b.n	8003180 <HAL_ADC_ConfigChannel+0x14c>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f003 0310 	and.w	r3, r3, #16
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10b      	bne.n	800316a <HAL_ADC_ConfigChannel+0x136>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	695a      	ldr	r2, [r3, #20]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	089b      	lsrs	r3, r3, #2
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	e00a      	b.n	8003180 <HAL_ADC_ConfigChannel+0x14c>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	695a      	ldr	r2, [r3, #20]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	089b      	lsrs	r3, r3, #2
 8003176:	f003 0304 	and.w	r3, r3, #4
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	2b04      	cmp	r3, #4
 8003188:	d027      	beq.n	80031da <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6818      	ldr	r0, [r3, #0]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	6919      	ldr	r1, [r3, #16]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003198:	f7fe ff42 	bl	8002020 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	6919      	ldr	r1, [r3, #16]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	7e5b      	ldrb	r3, [r3, #25]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d102      	bne.n	80031b2 <HAL_ADC_ConfigChannel+0x17e>
 80031ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80031b0:	e000      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x180>
 80031b2:	2300      	movs	r3, #0
 80031b4:	461a      	mov	r2, r3
 80031b6:	f7fe ff6c 	bl	8002092 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	6919      	ldr	r1, [r3, #16]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	7e1b      	ldrb	r3, [r3, #24]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d102      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x19c>
 80031ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031ce:	e000      	b.n	80031d2 <HAL_ADC_ConfigChannel+0x19e>
 80031d0:	2300      	movs	r3, #0
 80031d2:	461a      	mov	r2, r3
 80031d4:	f7fe ff44 	bl	8002060 <LL_ADC_SetDataRightShift>
 80031d8:	e047      	b.n	800326a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	069b      	lsls	r3, r3, #26
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d107      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031fc:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003204:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	069b      	lsls	r3, r3, #26
 800320e:	429a      	cmp	r2, r3
 8003210:	d107      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003220:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003228:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	069b      	lsls	r3, r3, #26
 8003232:	429a      	cmp	r2, r3
 8003234:	d107      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003244:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800324c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	069b      	lsls	r3, r3, #26
 8003256:	429a      	cmp	r2, r3
 8003258:	d107      	bne.n	800326a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003268:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff f85e 	bl	8002330 <LL_ADC_IsEnabled>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	f040 820d 	bne.w	8003696 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6818      	ldr	r0, [r3, #0]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	6819      	ldr	r1, [r3, #0]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	461a      	mov	r2, r3
 800328a:	f7fe ff9b 	bl	80021c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	4a0c      	ldr	r2, [pc, #48]	; (80032c4 <HAL_ADC_ConfigChannel+0x290>)
 8003294:	4293      	cmp	r3, r2
 8003296:	f040 8133 	bne.w	8003500 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d110      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x298>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	0e9b      	lsrs	r3, r3, #26
 80032b0:	3301      	adds	r3, #1
 80032b2:	f003 031f 	and.w	r3, r3, #31
 80032b6:	2b09      	cmp	r3, #9
 80032b8:	bf94      	ite	ls
 80032ba:	2301      	movls	r3, #1
 80032bc:	2300      	movhi	r3, #0
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	e01e      	b.n	8003300 <HAL_ADC_ConfigChannel+0x2cc>
 80032c2:	bf00      	nop
 80032c4:	47ff0000 	.word	0x47ff0000
 80032c8:	5c001000 	.word	0x5c001000
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032d4:	fa93 f3a3 	rbit	r3, r3
 80032d8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80032da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80032de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80032e4:	2320      	movs	r3, #32
 80032e6:	e003      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80032e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032ea:	fab3 f383 	clz	r3, r3
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	3301      	adds	r3, #1
 80032f2:	f003 031f 	and.w	r3, r3, #31
 80032f6:	2b09      	cmp	r3, #9
 80032f8:	bf94      	ite	ls
 80032fa:	2301      	movls	r3, #1
 80032fc:	2300      	movhi	r3, #0
 80032fe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003300:	2b00      	cmp	r3, #0
 8003302:	d079      	beq.n	80033f8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800330c:	2b00      	cmp	r3, #0
 800330e:	d107      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x2ec>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	0e9b      	lsrs	r3, r3, #26
 8003316:	3301      	adds	r3, #1
 8003318:	069b      	lsls	r3, r3, #26
 800331a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800331e:	e015      	b.n	800334c <HAL_ADC_ConfigChannel+0x318>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003328:	fa93 f3a3 	rbit	r3, r3
 800332c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800332e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003330:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003338:	2320      	movs	r3, #32
 800333a:	e003      	b.n	8003344 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800333c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800333e:	fab3 f383 	clz	r3, r3
 8003342:	b2db      	uxtb	r3, r3
 8003344:	3301      	adds	r3, #1
 8003346:	069b      	lsls	r3, r3, #26
 8003348:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003354:	2b00      	cmp	r3, #0
 8003356:	d109      	bne.n	800336c <HAL_ADC_ConfigChannel+0x338>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	0e9b      	lsrs	r3, r3, #26
 800335e:	3301      	adds	r3, #1
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	2101      	movs	r1, #1
 8003366:	fa01 f303 	lsl.w	r3, r1, r3
 800336a:	e017      	b.n	800339c <HAL_ADC_ConfigChannel+0x368>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003374:	fa93 f3a3 	rbit	r3, r3
 8003378:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800337a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800337c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800337e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003384:	2320      	movs	r3, #32
 8003386:	e003      	b.n	8003390 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800338a:	fab3 f383 	clz	r3, r3
 800338e:	b2db      	uxtb	r3, r3
 8003390:	3301      	adds	r3, #1
 8003392:	f003 031f 	and.w	r3, r3, #31
 8003396:	2101      	movs	r1, #1
 8003398:	fa01 f303 	lsl.w	r3, r1, r3
 800339c:	ea42 0103 	orr.w	r1, r2, r3
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10a      	bne.n	80033c2 <HAL_ADC_ConfigChannel+0x38e>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	0e9b      	lsrs	r3, r3, #26
 80033b2:	3301      	adds	r3, #1
 80033b4:	f003 021f 	and.w	r2, r3, #31
 80033b8:	4613      	mov	r3, r2
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	4413      	add	r3, r2
 80033be:	051b      	lsls	r3, r3, #20
 80033c0:	e018      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x3c0>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ca:	fa93 f3a3 	rbit	r3, r3
 80033ce:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80033d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80033d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80033da:	2320      	movs	r3, #32
 80033dc:	e003      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80033de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e0:	fab3 f383 	clz	r3, r3
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	3301      	adds	r3, #1
 80033e8:	f003 021f 	and.w	r2, r3, #31
 80033ec:	4613      	mov	r3, r2
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	4413      	add	r3, r2
 80033f2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033f4:	430b      	orrs	r3, r1
 80033f6:	e07e      	b.n	80034f6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003400:	2b00      	cmp	r3, #0
 8003402:	d107      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x3e0>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	0e9b      	lsrs	r3, r3, #26
 800340a:	3301      	adds	r3, #1
 800340c:	069b      	lsls	r3, r3, #26
 800340e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003412:	e015      	b.n	8003440 <HAL_ADC_ConfigChannel+0x40c>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341c:	fa93 f3a3 	rbit	r3, r3
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800342c:	2320      	movs	r3, #32
 800342e:	e003      	b.n	8003438 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003432:	fab3 f383 	clz	r3, r3
 8003436:	b2db      	uxtb	r3, r3
 8003438:	3301      	adds	r3, #1
 800343a:	069b      	lsls	r3, r3, #26
 800343c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003448:	2b00      	cmp	r3, #0
 800344a:	d109      	bne.n	8003460 <HAL_ADC_ConfigChannel+0x42c>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	0e9b      	lsrs	r3, r3, #26
 8003452:	3301      	adds	r3, #1
 8003454:	f003 031f 	and.w	r3, r3, #31
 8003458:	2101      	movs	r1, #1
 800345a:	fa01 f303 	lsl.w	r3, r1, r3
 800345e:	e017      	b.n	8003490 <HAL_ADC_ConfigChannel+0x45c>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	fa93 f3a3 	rbit	r3, r3
 800346c:	61bb      	str	r3, [r7, #24]
  return result;
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003478:	2320      	movs	r3, #32
 800347a:	e003      	b.n	8003484 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	fab3 f383 	clz	r3, r3
 8003482:	b2db      	uxtb	r3, r3
 8003484:	3301      	adds	r3, #1
 8003486:	f003 031f 	and.w	r3, r3, #31
 800348a:	2101      	movs	r1, #1
 800348c:	fa01 f303 	lsl.w	r3, r1, r3
 8003490:	ea42 0103 	orr.w	r1, r2, r3
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10d      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x488>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	0e9b      	lsrs	r3, r3, #26
 80034a6:	3301      	adds	r3, #1
 80034a8:	f003 021f 	and.w	r2, r3, #31
 80034ac:	4613      	mov	r3, r2
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	4413      	add	r3, r2
 80034b2:	3b1e      	subs	r3, #30
 80034b4:	051b      	lsls	r3, r3, #20
 80034b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034ba:	e01b      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x4c0>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	fa93 f3a3 	rbit	r3, r3
 80034c8:	60fb      	str	r3, [r7, #12]
  return result;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80034d4:	2320      	movs	r3, #32
 80034d6:	e003      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	fab3 f383 	clz	r3, r3
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	3301      	adds	r3, #1
 80034e2:	f003 021f 	and.w	r2, r3, #31
 80034e6:	4613      	mov	r3, r2
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	4413      	add	r3, r2
 80034ec:	3b1e      	subs	r3, #30
 80034ee:	051b      	lsls	r3, r3, #20
 80034f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034f4:	430b      	orrs	r3, r1
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	6892      	ldr	r2, [r2, #8]
 80034fa:	4619      	mov	r1, r3
 80034fc:	f7fe fe36 	bl	800216c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	f280 80c6 	bge.w	8003696 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a67      	ldr	r2, [pc, #412]	; (80036ac <HAL_ADC_ConfigChannel+0x678>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d004      	beq.n	800351e <HAL_ADC_ConfigChannel+0x4ea>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a65      	ldr	r2, [pc, #404]	; (80036b0 <HAL_ADC_ConfigChannel+0x67c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d101      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x4ee>
 800351e:	4b65      	ldr	r3, [pc, #404]	; (80036b4 <HAL_ADC_ConfigChannel+0x680>)
 8003520:	e000      	b.n	8003524 <HAL_ADC_ConfigChannel+0x4f0>
 8003522:	4b65      	ldr	r3, [pc, #404]	; (80036b8 <HAL_ADC_ConfigChannel+0x684>)
 8003524:	4618      	mov	r0, r3
 8003526:	f7fe fd6d 	bl	8002004 <LL_ADC_GetCommonPathInternalCh>
 800352a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a5e      	ldr	r2, [pc, #376]	; (80036ac <HAL_ADC_ConfigChannel+0x678>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d004      	beq.n	8003540 <HAL_ADC_ConfigChannel+0x50c>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a5d      	ldr	r2, [pc, #372]	; (80036b0 <HAL_ADC_ConfigChannel+0x67c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d10e      	bne.n	800355e <HAL_ADC_ConfigChannel+0x52a>
 8003540:	485a      	ldr	r0, [pc, #360]	; (80036ac <HAL_ADC_ConfigChannel+0x678>)
 8003542:	f7fe fef5 	bl	8002330 <LL_ADC_IsEnabled>
 8003546:	4604      	mov	r4, r0
 8003548:	4859      	ldr	r0, [pc, #356]	; (80036b0 <HAL_ADC_ConfigChannel+0x67c>)
 800354a:	f7fe fef1 	bl	8002330 <LL_ADC_IsEnabled>
 800354e:	4603      	mov	r3, r0
 8003550:	4323      	orrs	r3, r4
 8003552:	2b00      	cmp	r3, #0
 8003554:	bf0c      	ite	eq
 8003556:	2301      	moveq	r3, #1
 8003558:	2300      	movne	r3, #0
 800355a:	b2db      	uxtb	r3, r3
 800355c:	e008      	b.n	8003570 <HAL_ADC_ConfigChannel+0x53c>
 800355e:	4857      	ldr	r0, [pc, #348]	; (80036bc <HAL_ADC_ConfigChannel+0x688>)
 8003560:	f7fe fee6 	bl	8002330 <LL_ADC_IsEnabled>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	bf0c      	ite	eq
 800356a:	2301      	moveq	r3, #1
 800356c:	2300      	movne	r3, #0
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d07d      	beq.n	8003670 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a51      	ldr	r2, [pc, #324]	; (80036c0 <HAL_ADC_ConfigChannel+0x68c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d130      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x5ac>
 800357e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003580:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d12b      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a4b      	ldr	r2, [pc, #300]	; (80036bc <HAL_ADC_ConfigChannel+0x688>)
 800358e:	4293      	cmp	r3, r2
 8003590:	f040 8081 	bne.w	8003696 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a44      	ldr	r2, [pc, #272]	; (80036ac <HAL_ADC_ConfigChannel+0x678>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d004      	beq.n	80035a8 <HAL_ADC_ConfigChannel+0x574>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a43      	ldr	r2, [pc, #268]	; (80036b0 <HAL_ADC_ConfigChannel+0x67c>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d101      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x578>
 80035a8:	4a42      	ldr	r2, [pc, #264]	; (80036b4 <HAL_ADC_ConfigChannel+0x680>)
 80035aa:	e000      	b.n	80035ae <HAL_ADC_ConfigChannel+0x57a>
 80035ac:	4a42      	ldr	r2, [pc, #264]	; (80036b8 <HAL_ADC_ConfigChannel+0x684>)
 80035ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035b4:	4619      	mov	r1, r3
 80035b6:	4610      	mov	r0, r2
 80035b8:	f7fe fd11 	bl	8001fde <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035bc:	4b41      	ldr	r3, [pc, #260]	; (80036c4 <HAL_ADC_ConfigChannel+0x690>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	099b      	lsrs	r3, r3, #6
 80035c2:	4a41      	ldr	r2, [pc, #260]	; (80036c8 <HAL_ADC_ConfigChannel+0x694>)
 80035c4:	fba2 2303 	umull	r2, r3, r2, r3
 80035c8:	099b      	lsrs	r3, r3, #6
 80035ca:	3301      	adds	r3, #1
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80035d0:	e002      	b.n	80035d8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	3b01      	subs	r3, #1
 80035d6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f9      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035de:	e05a      	b.n	8003696 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a39      	ldr	r2, [pc, #228]	; (80036cc <HAL_ADC_ConfigChannel+0x698>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d11e      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x5f4>
 80035ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d119      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a30      	ldr	r2, [pc, #192]	; (80036bc <HAL_ADC_ConfigChannel+0x688>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d14b      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a2a      	ldr	r2, [pc, #168]	; (80036ac <HAL_ADC_ConfigChannel+0x678>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d004      	beq.n	8003612 <HAL_ADC_ConfigChannel+0x5de>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a28      	ldr	r2, [pc, #160]	; (80036b0 <HAL_ADC_ConfigChannel+0x67c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d101      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x5e2>
 8003612:	4a28      	ldr	r2, [pc, #160]	; (80036b4 <HAL_ADC_ConfigChannel+0x680>)
 8003614:	e000      	b.n	8003618 <HAL_ADC_ConfigChannel+0x5e4>
 8003616:	4a28      	ldr	r2, [pc, #160]	; (80036b8 <HAL_ADC_ConfigChannel+0x684>)
 8003618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800361a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800361e:	4619      	mov	r1, r3
 8003620:	4610      	mov	r0, r2
 8003622:	f7fe fcdc 	bl	8001fde <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003626:	e036      	b.n	8003696 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a28      	ldr	r2, [pc, #160]	; (80036d0 <HAL_ADC_ConfigChannel+0x69c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d131      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x662>
 8003632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003634:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d12c      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a1e      	ldr	r2, [pc, #120]	; (80036bc <HAL_ADC_ConfigChannel+0x688>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d127      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a18      	ldr	r2, [pc, #96]	; (80036ac <HAL_ADC_ConfigChannel+0x678>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d004      	beq.n	800365a <HAL_ADC_ConfigChannel+0x626>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a16      	ldr	r2, [pc, #88]	; (80036b0 <HAL_ADC_ConfigChannel+0x67c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d101      	bne.n	800365e <HAL_ADC_ConfigChannel+0x62a>
 800365a:	4a16      	ldr	r2, [pc, #88]	; (80036b4 <HAL_ADC_ConfigChannel+0x680>)
 800365c:	e000      	b.n	8003660 <HAL_ADC_ConfigChannel+0x62c>
 800365e:	4a16      	ldr	r2, [pc, #88]	; (80036b8 <HAL_ADC_ConfigChannel+0x684>)
 8003660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003662:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003666:	4619      	mov	r1, r3
 8003668:	4610      	mov	r0, r2
 800366a:	f7fe fcb8 	bl	8001fde <LL_ADC_SetCommonPathInternalCh>
 800366e:	e012      	b.n	8003696 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003674:	f043 0220 	orr.w	r2, r3, #32
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003682:	e008      	b.n	8003696 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003688:	f043 0220 	orr.w	r2, r3, #32
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800369e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3784      	adds	r7, #132	; 0x84
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd90      	pop	{r4, r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40022000 	.word	0x40022000
 80036b0:	40022100 	.word	0x40022100
 80036b4:	40022300 	.word	0x40022300
 80036b8:	58026300 	.word	0x58026300
 80036bc:	58026000 	.word	0x58026000
 80036c0:	cb840000 	.word	0xcb840000
 80036c4:	24000000 	.word	0x24000000
 80036c8:	053e2d63 	.word	0x053e2d63
 80036cc:	c7520000 	.word	0xc7520000
 80036d0:	cfb80000 	.word	0xcfb80000

080036d4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b088      	sub	sp, #32
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fe fe6e 	bl	80023cc <LL_ADC_REG_IsConversionOngoing>
 80036f0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fe fe90 	bl	800241c <LL_ADC_INJ_IsConversionOngoing>
 80036fc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d103      	bne.n	800370c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 8098 	beq.w	800383c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d02a      	beq.n	8003770 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	7d5b      	ldrb	r3, [r3, #21]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d126      	bne.n	8003770 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	7d1b      	ldrb	r3, [r3, #20]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d122      	bne.n	8003770 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800372a:	2301      	movs	r3, #1
 800372c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800372e:	e014      	b.n	800375a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	4a45      	ldr	r2, [pc, #276]	; (8003848 <ADC_ConversionStop+0x174>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d90d      	bls.n	8003754 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373c:	f043 0210 	orr.w	r2, r3, #16
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003748:	f043 0201 	orr.w	r2, r3, #1
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e074      	b.n	800383e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	3301      	adds	r3, #1
 8003758:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003764:	2b40      	cmp	r3, #64	; 0x40
 8003766:	d1e3      	bne.n	8003730 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2240      	movs	r2, #64	; 0x40
 800376e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d014      	beq.n	80037a0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f7fe fe26 	bl	80023cc <LL_ADC_REG_IsConversionOngoing>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00c      	beq.n	80037a0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f7fe fde3 	bl	8002356 <LL_ADC_IsDisableOngoing>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d104      	bne.n	80037a0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f7fe fe02 	bl	80023a4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d014      	beq.n	80037d0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fe fe36 	bl	800241c <LL_ADC_INJ_IsConversionOngoing>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00c      	beq.n	80037d0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fe fdcb 	bl	8002356 <LL_ADC_IsDisableOngoing>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d104      	bne.n	80037d0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fe fe12 	bl	80023f4 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d005      	beq.n	80037e2 <ADC_ConversionStop+0x10e>
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	2b03      	cmp	r3, #3
 80037da:	d105      	bne.n	80037e8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80037dc:	230c      	movs	r3, #12
 80037de:	617b      	str	r3, [r7, #20]
        break;
 80037e0:	e005      	b.n	80037ee <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80037e2:	2308      	movs	r3, #8
 80037e4:	617b      	str	r3, [r7, #20]
        break;
 80037e6:	e002      	b.n	80037ee <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80037e8:	2304      	movs	r3, #4
 80037ea:	617b      	str	r3, [r7, #20]
        break;
 80037ec:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80037ee:	f7fe fba7 	bl	8001f40 <HAL_GetTick>
 80037f2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80037f4:	e01b      	b.n	800382e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80037f6:	f7fe fba3 	bl	8001f40 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b05      	cmp	r3, #5
 8003802:	d914      	bls.n	800382e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	4013      	ands	r3, r2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00d      	beq.n	800382e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003816:	f043 0210 	orr.w	r2, r3, #16
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003822:	f043 0201 	orr.w	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e007      	b.n	800383e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	4013      	ands	r3, r2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1dc      	bne.n	80037f6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3720      	adds	r7, #32
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	000cdbff 	.word	0x000cdbff

0800384c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f7fe fd69 	bl	8002330 <LL_ADC_IsEnabled>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d16e      	bne.n	8003942 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689a      	ldr	r2, [r3, #8]
 800386a:	4b38      	ldr	r3, [pc, #224]	; (800394c <ADC_Enable+0x100>)
 800386c:	4013      	ands	r3, r2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00d      	beq.n	800388e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003876:	f043 0210 	orr.w	r2, r3, #16
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003882:	f043 0201 	orr.w	r2, r3, #1
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e05a      	b.n	8003944 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7fe fd24 	bl	80022e0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003898:	f7fe fb52 	bl	8001f40 <HAL_GetTick>
 800389c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a2b      	ldr	r2, [pc, #172]	; (8003950 <ADC_Enable+0x104>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d004      	beq.n	80038b2 <ADC_Enable+0x66>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a29      	ldr	r2, [pc, #164]	; (8003954 <ADC_Enable+0x108>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d101      	bne.n	80038b6 <ADC_Enable+0x6a>
 80038b2:	4b29      	ldr	r3, [pc, #164]	; (8003958 <ADC_Enable+0x10c>)
 80038b4:	e000      	b.n	80038b8 <ADC_Enable+0x6c>
 80038b6:	4b29      	ldr	r3, [pc, #164]	; (800395c <ADC_Enable+0x110>)
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fe fca7 	bl	800220c <LL_ADC_GetMultimode>
 80038be:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a23      	ldr	r2, [pc, #140]	; (8003954 <ADC_Enable+0x108>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d002      	beq.n	80038d0 <ADC_Enable+0x84>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	e000      	b.n	80038d2 <ADC_Enable+0x86>
 80038d0:	4b1f      	ldr	r3, [pc, #124]	; (8003950 <ADC_Enable+0x104>)
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6812      	ldr	r2, [r2, #0]
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d02c      	beq.n	8003934 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d130      	bne.n	8003942 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038e0:	e028      	b.n	8003934 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fe fd22 	bl	8002330 <LL_ADC_IsEnabled>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d104      	bne.n	80038fc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fe fcf2 	bl	80022e0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038fc:	f7fe fb20 	bl	8001f40 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d914      	bls.n	8003934 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b01      	cmp	r3, #1
 8003916:	d00d      	beq.n	8003934 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391c:	f043 0210 	orr.w	r2, r3, #16
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003928:	f043 0201 	orr.w	r2, r3, #1
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e007      	b.n	8003944 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b01      	cmp	r3, #1
 8003940:	d1cf      	bne.n	80038e2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	8000003f 	.word	0x8000003f
 8003950:	40022000 	.word	0x40022000
 8003954:	40022100 	.word	0x40022100
 8003958:	40022300 	.word	0x40022300
 800395c:	58026300 	.word	0x58026300

08003960 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f7fe fcf2 	bl	8002356 <LL_ADC_IsDisableOngoing>
 8003972:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4618      	mov	r0, r3
 800397a:	f7fe fcd9 	bl	8002330 <LL_ADC_IsEnabled>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d047      	beq.n	8003a14 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d144      	bne.n	8003a14 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 030d 	and.w	r3, r3, #13
 8003994:	2b01      	cmp	r3, #1
 8003996:	d10c      	bne.n	80039b2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f7fe fcb3 	bl	8002308 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2203      	movs	r2, #3
 80039a8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039aa:	f7fe fac9 	bl	8001f40 <HAL_GetTick>
 80039ae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039b0:	e029      	b.n	8003a06 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b6:	f043 0210 	orr.w	r2, r3, #16
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c2:	f043 0201 	orr.w	r2, r3, #1
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e023      	b.n	8003a16 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039ce:	f7fe fab7 	bl	8001f40 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d914      	bls.n	8003a06 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00d      	beq.n	8003a06 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ee:	f043 0210 	orr.w	r2, r3, #16
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fa:	f043 0201 	orr.w	r2, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e007      	b.n	8003a16 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1dc      	bne.n	80039ce <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a79      	ldr	r2, [pc, #484]	; (8003c14 <ADC_ConfigureBoostMode+0x1f4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d004      	beq.n	8003a3c <ADC_ConfigureBoostMode+0x1c>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a78      	ldr	r2, [pc, #480]	; (8003c18 <ADC_ConfigureBoostMode+0x1f8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d109      	bne.n	8003a50 <ADC_ConfigureBoostMode+0x30>
 8003a3c:	4b77      	ldr	r3, [pc, #476]	; (8003c1c <ADC_ConfigureBoostMode+0x1fc>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	bf14      	ite	ne
 8003a48:	2301      	movne	r3, #1
 8003a4a:	2300      	moveq	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	e008      	b.n	8003a62 <ADC_ConfigureBoostMode+0x42>
 8003a50:	4b73      	ldr	r3, [pc, #460]	; (8003c20 <ADC_ConfigureBoostMode+0x200>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	bf14      	ite	ne
 8003a5c:	2301      	movne	r3, #1
 8003a5e:	2300      	moveq	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d01c      	beq.n	8003aa0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003a66:	f004 fccf 	bl	8008408 <HAL_RCC_GetHCLKFreq>
 8003a6a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a74:	d010      	beq.n	8003a98 <ADC_ConfigureBoostMode+0x78>
 8003a76:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a7a:	d871      	bhi.n	8003b60 <ADC_ConfigureBoostMode+0x140>
 8003a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a80:	d002      	beq.n	8003a88 <ADC_ConfigureBoostMode+0x68>
 8003a82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a86:	d16b      	bne.n	8003b60 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	0c1b      	lsrs	r3, r3, #16
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a94:	60fb      	str	r3, [r7, #12]
        break;
 8003a96:	e066      	b.n	8003b66 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	089b      	lsrs	r3, r3, #2
 8003a9c:	60fb      	str	r3, [r7, #12]
        break;
 8003a9e:	e062      	b.n	8003b66 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003aa0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003aa4:	f005 fc4c 	bl	8009340 <HAL_RCCEx_GetPeriphCLKFreq>
 8003aa8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003ab2:	d051      	beq.n	8003b58 <ADC_ConfigureBoostMode+0x138>
 8003ab4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003ab8:	d854      	bhi.n	8003b64 <ADC_ConfigureBoostMode+0x144>
 8003aba:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003abe:	d047      	beq.n	8003b50 <ADC_ConfigureBoostMode+0x130>
 8003ac0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003ac4:	d84e      	bhi.n	8003b64 <ADC_ConfigureBoostMode+0x144>
 8003ac6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003aca:	d03d      	beq.n	8003b48 <ADC_ConfigureBoostMode+0x128>
 8003acc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003ad0:	d848      	bhi.n	8003b64 <ADC_ConfigureBoostMode+0x144>
 8003ad2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ad6:	d033      	beq.n	8003b40 <ADC_ConfigureBoostMode+0x120>
 8003ad8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003adc:	d842      	bhi.n	8003b64 <ADC_ConfigureBoostMode+0x144>
 8003ade:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003ae2:	d029      	beq.n	8003b38 <ADC_ConfigureBoostMode+0x118>
 8003ae4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003ae8:	d83c      	bhi.n	8003b64 <ADC_ConfigureBoostMode+0x144>
 8003aea:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003aee:	d01a      	beq.n	8003b26 <ADC_ConfigureBoostMode+0x106>
 8003af0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003af4:	d836      	bhi.n	8003b64 <ADC_ConfigureBoostMode+0x144>
 8003af6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003afa:	d014      	beq.n	8003b26 <ADC_ConfigureBoostMode+0x106>
 8003afc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003b00:	d830      	bhi.n	8003b64 <ADC_ConfigureBoostMode+0x144>
 8003b02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b06:	d00e      	beq.n	8003b26 <ADC_ConfigureBoostMode+0x106>
 8003b08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b0c:	d82a      	bhi.n	8003b64 <ADC_ConfigureBoostMode+0x144>
 8003b0e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b12:	d008      	beq.n	8003b26 <ADC_ConfigureBoostMode+0x106>
 8003b14:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b18:	d824      	bhi.n	8003b64 <ADC_ConfigureBoostMode+0x144>
 8003b1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b1e:	d002      	beq.n	8003b26 <ADC_ConfigureBoostMode+0x106>
 8003b20:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b24:	d11e      	bne.n	8003b64 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	0c9b      	lsrs	r3, r3, #18
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b34:	60fb      	str	r3, [r7, #12]
        break;
 8003b36:	e016      	b.n	8003b66 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	091b      	lsrs	r3, r3, #4
 8003b3c:	60fb      	str	r3, [r7, #12]
        break;
 8003b3e:	e012      	b.n	8003b66 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	60fb      	str	r3, [r7, #12]
        break;
 8003b46:	e00e      	b.n	8003b66 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	099b      	lsrs	r3, r3, #6
 8003b4c:	60fb      	str	r3, [r7, #12]
        break;
 8003b4e:	e00a      	b.n	8003b66 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	09db      	lsrs	r3, r3, #7
 8003b54:	60fb      	str	r3, [r7, #12]
        break;
 8003b56:	e006      	b.n	8003b66 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	0a1b      	lsrs	r3, r3, #8
 8003b5c:	60fb      	str	r3, [r7, #12]
        break;
 8003b5e:	e002      	b.n	8003b66 <ADC_ConfigureBoostMode+0x146>
        break;
 8003b60:	bf00      	nop
 8003b62:	e000      	b.n	8003b66 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003b64:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003b66:	f7fe fa1b 	bl	8001fa0 <HAL_GetREVID>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d815      	bhi.n	8003ba0 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4a2b      	ldr	r2, [pc, #172]	; (8003c24 <ADC_ConfigureBoostMode+0x204>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d908      	bls.n	8003b8e <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689a      	ldr	r2, [r3, #8]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b8a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003b8c:	e03e      	b.n	8003c0c <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b9c:	609a      	str	r2, [r3, #8]
}
 8003b9e:	e035      	b.n	8003c0c <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	085b      	lsrs	r3, r3, #1
 8003ba4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	4a1f      	ldr	r2, [pc, #124]	; (8003c28 <ADC_ConfigureBoostMode+0x208>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d808      	bhi.n	8003bc0 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003bbc:	609a      	str	r2, [r3, #8]
}
 8003bbe:	e025      	b.n	8003c0c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4a1a      	ldr	r2, [pc, #104]	; (8003c2c <ADC_ConfigureBoostMode+0x20c>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d80a      	bhi.n	8003bde <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bda:	609a      	str	r2, [r3, #8]
}
 8003bdc:	e016      	b.n	8003c0c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4a13      	ldr	r2, [pc, #76]	; (8003c30 <ADC_ConfigureBoostMode+0x210>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d80a      	bhi.n	8003bfc <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf8:	609a      	str	r2, [r3, #8]
}
 8003bfa:	e007      	b.n	8003c0c <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689a      	ldr	r2, [r3, #8]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003c0a:	609a      	str	r2, [r3, #8]
}
 8003c0c:	bf00      	nop
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40022000 	.word	0x40022000
 8003c18:	40022100 	.word	0x40022100
 8003c1c:	40022300 	.word	0x40022300
 8003c20:	58026300 	.word	0x58026300
 8003c24:	01312d00 	.word	0x01312d00
 8003c28:	005f5e10 	.word	0x005f5e10
 8003c2c:	00bebc20 	.word	0x00bebc20
 8003c30:	017d7840 	.word	0x017d7840

08003c34 <LL_ADC_IsEnabled>:
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <LL_ADC_IsEnabled+0x18>
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e000      	b.n	8003c4e <LL_ADC_IsEnabled+0x1a>
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <LL_ADC_REG_IsConversionOngoing>:
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 0304 	and.w	r3, r3, #4
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d101      	bne.n	8003c72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e000      	b.n	8003c74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003ce4:	b590      	push	{r4, r7, lr}
 8003ce6:	b09f      	sub	sp, #124	; 0x7c
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d101      	bne.n	8003d02 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003cfe:	2302      	movs	r3, #2
 8003d00:	e0be      	b.n	8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a5c      	ldr	r2, [pc, #368]	; (8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d102      	bne.n	8003d22 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d1c:	4b5b      	ldr	r3, [pc, #364]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d1e:	60bb      	str	r3, [r7, #8]
 8003d20:	e001      	b.n	8003d26 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d22:	2300      	movs	r3, #0
 8003d24:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10b      	bne.n	8003d44 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d30:	f043 0220 	orr.w	r2, r3, #32
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e09d      	b.n	8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff ff87 	bl	8003c5a <LL_ADC_REG_IsConversionOngoing>
 8003d4c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff ff81 	bl	8003c5a <LL_ADC_REG_IsConversionOngoing>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d17f      	bne.n	8003e5e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003d5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d17c      	bne.n	8003e5e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a47      	ldr	r2, [pc, #284]	; (8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d004      	beq.n	8003d78 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a46      	ldr	r2, [pc, #280]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d101      	bne.n	8003d7c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003d78:	4b45      	ldr	r3, [pc, #276]	; (8003e90 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003d7a:	e000      	b.n	8003d7e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003d7c:	4b45      	ldr	r3, [pc, #276]	; (8003e94 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003d7e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d039      	beq.n	8003dfc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	431a      	orrs	r2, r3
 8003d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d98:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a3a      	ldr	r2, [pc, #232]	; (8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d004      	beq.n	8003dae <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a38      	ldr	r2, [pc, #224]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d10e      	bne.n	8003dcc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003dae:	4836      	ldr	r0, [pc, #216]	; (8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003db0:	f7ff ff40 	bl	8003c34 <LL_ADC_IsEnabled>
 8003db4:	4604      	mov	r4, r0
 8003db6:	4835      	ldr	r0, [pc, #212]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003db8:	f7ff ff3c 	bl	8003c34 <LL_ADC_IsEnabled>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	4323      	orrs	r3, r4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	bf0c      	ite	eq
 8003dc4:	2301      	moveq	r3, #1
 8003dc6:	2300      	movne	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	e008      	b.n	8003dde <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003dcc:	4832      	ldr	r0, [pc, #200]	; (8003e98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003dce:	f7ff ff31 	bl	8003c34 <LL_ADC_IsEnabled>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	bf0c      	ite	eq
 8003dd8:	2301      	moveq	r3, #1
 8003dda:	2300      	movne	r3, #0
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d047      	beq.n	8003e72 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	4b2d      	ldr	r3, [pc, #180]	; (8003e9c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003de8:	4013      	ands	r3, r2
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	6811      	ldr	r1, [r2, #0]
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	6892      	ldr	r2, [r2, #8]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	431a      	orrs	r2, r3
 8003df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dfa:	e03a      	b.n	8003e72 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e06:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a1e      	ldr	r2, [pc, #120]	; (8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d004      	beq.n	8003e1c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a1d      	ldr	r2, [pc, #116]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d10e      	bne.n	8003e3a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003e1c:	481a      	ldr	r0, [pc, #104]	; (8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e1e:	f7ff ff09 	bl	8003c34 <LL_ADC_IsEnabled>
 8003e22:	4604      	mov	r4, r0
 8003e24:	4819      	ldr	r0, [pc, #100]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e26:	f7ff ff05 	bl	8003c34 <LL_ADC_IsEnabled>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	4323      	orrs	r3, r4
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	bf0c      	ite	eq
 8003e32:	2301      	moveq	r3, #1
 8003e34:	2300      	movne	r3, #0
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	e008      	b.n	8003e4c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003e3a:	4817      	ldr	r0, [pc, #92]	; (8003e98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003e3c:	f7ff fefa 	bl	8003c34 <LL_ADC_IsEnabled>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	bf0c      	ite	eq
 8003e46:	2301      	moveq	r3, #1
 8003e48:	2300      	movne	r3, #0
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d010      	beq.n	8003e72 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	4b11      	ldr	r3, [pc, #68]	; (8003e9c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003e56:	4013      	ands	r3, r2
 8003e58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e5a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e5c:	e009      	b.n	8003e72 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e62:	f043 0220 	orr.w	r2, r3, #32
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003e70:	e000      	b.n	8003e74 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e72:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e7c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	377c      	adds	r7, #124	; 0x7c
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd90      	pop	{r4, r7, pc}
 8003e88:	40022000 	.word	0x40022000
 8003e8c:	40022100 	.word	0x40022100
 8003e90:	40022300 	.word	0x40022300
 8003e94:	58026300 	.word	0x58026300
 8003e98:	58026000 	.word	0x58026000
 8003e9c:	fffff0e0 	.word	0xfffff0e0

08003ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ec8:	4b06      	ldr	r3, [pc, #24]	; (8003ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ece:	4a04      	ldr	r2, [pc, #16]	; (8003ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	60d3      	str	r3, [r2, #12]
}
 8003ed4:	bf00      	nop
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	e000ed00 	.word	0xe000ed00
 8003ee4:	05fa0000 	.word	0x05fa0000

08003ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003eec:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <__NVIC_GetPriorityGrouping+0x18>)
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	0a1b      	lsrs	r3, r3, #8
 8003ef2:	f003 0307 	and.w	r3, r3, #7
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	e000ed00 	.word	0xe000ed00

08003f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	db0b      	blt.n	8003f2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f16:	88fb      	ldrh	r3, [r7, #6]
 8003f18:	f003 021f 	and.w	r2, r3, #31
 8003f1c:	4907      	ldr	r1, [pc, #28]	; (8003f3c <__NVIC_EnableIRQ+0x38>)
 8003f1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	2001      	movs	r0, #1
 8003f26:	fa00 f202 	lsl.w	r2, r0, r2
 8003f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	e000e100 	.word	0xe000e100

08003f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	6039      	str	r1, [r7, #0]
 8003f4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	db0a      	blt.n	8003f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	490c      	ldr	r1, [pc, #48]	; (8003f8c <__NVIC_SetPriority+0x4c>)
 8003f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f5e:	0112      	lsls	r2, r2, #4
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	440b      	add	r3, r1
 8003f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f68:	e00a      	b.n	8003f80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	4908      	ldr	r1, [pc, #32]	; (8003f90 <__NVIC_SetPriority+0x50>)
 8003f70:	88fb      	ldrh	r3, [r7, #6]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	3b04      	subs	r3, #4
 8003f78:	0112      	lsls	r2, r2, #4
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	761a      	strb	r2, [r3, #24]
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	e000e100 	.word	0xe000e100
 8003f90:	e000ed00 	.word	0xe000ed00

08003f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b089      	sub	sp, #36	; 0x24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f1c3 0307 	rsb	r3, r3, #7
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	bf28      	it	cs
 8003fb2:	2304      	movcs	r3, #4
 8003fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	2b06      	cmp	r3, #6
 8003fbc:	d902      	bls.n	8003fc4 <NVIC_EncodePriority+0x30>
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	3b03      	subs	r3, #3
 8003fc2:	e000      	b.n	8003fc6 <NVIC_EncodePriority+0x32>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	43da      	mvns	r2, r3
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	401a      	ands	r2, r3
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe6:	43d9      	mvns	r1, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fec:	4313      	orrs	r3, r2
         );
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3724      	adds	r7, #36	; 0x24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
	...

08003ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3b01      	subs	r3, #1
 8004008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800400c:	d301      	bcc.n	8004012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800400e:	2301      	movs	r3, #1
 8004010:	e00f      	b.n	8004032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004012:	4a0a      	ldr	r2, [pc, #40]	; (800403c <SysTick_Config+0x40>)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3b01      	subs	r3, #1
 8004018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800401a:	210f      	movs	r1, #15
 800401c:	f04f 30ff 	mov.w	r0, #4294967295
 8004020:	f7ff ff8e 	bl	8003f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004024:	4b05      	ldr	r3, [pc, #20]	; (800403c <SysTick_Config+0x40>)
 8004026:	2200      	movs	r2, #0
 8004028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800402a:	4b04      	ldr	r3, [pc, #16]	; (800403c <SysTick_Config+0x40>)
 800402c:	2207      	movs	r2, #7
 800402e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	e000e010 	.word	0xe000e010

08004040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7ff ff29 	bl	8003ea0 <__NVIC_SetPriorityGrouping>
}
 800404e:	bf00      	nop
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b086      	sub	sp, #24
 800405a:	af00      	add	r7, sp, #0
 800405c:	4603      	mov	r3, r0
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	607a      	str	r2, [r7, #4]
 8004062:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004064:	f7ff ff40 	bl	8003ee8 <__NVIC_GetPriorityGrouping>
 8004068:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	68b9      	ldr	r1, [r7, #8]
 800406e:	6978      	ldr	r0, [r7, #20]
 8004070:	f7ff ff90 	bl	8003f94 <NVIC_EncodePriority>
 8004074:	4602      	mov	r2, r0
 8004076:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800407a:	4611      	mov	r1, r2
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff ff5f 	bl	8003f40 <__NVIC_SetPriority>
}
 8004082:	bf00      	nop
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	4603      	mov	r3, r0
 8004092:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004094:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff ff33 	bl	8003f04 <__NVIC_EnableIRQ>
}
 800409e:	bf00      	nop
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b082      	sub	sp, #8
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7ff ffa4 	bl	8003ffc <SysTick_Config>
 80040b4:	4603      	mov	r3, r0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80040c8:	f7fd ff3a 	bl	8001f40 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e316      	b.n	8004706 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a66      	ldr	r2, [pc, #408]	; (8004278 <HAL_DMA_Init+0x1b8>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d04a      	beq.n	8004178 <HAL_DMA_Init+0xb8>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a65      	ldr	r2, [pc, #404]	; (800427c <HAL_DMA_Init+0x1bc>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d045      	beq.n	8004178 <HAL_DMA_Init+0xb8>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a63      	ldr	r2, [pc, #396]	; (8004280 <HAL_DMA_Init+0x1c0>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d040      	beq.n	8004178 <HAL_DMA_Init+0xb8>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a62      	ldr	r2, [pc, #392]	; (8004284 <HAL_DMA_Init+0x1c4>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d03b      	beq.n	8004178 <HAL_DMA_Init+0xb8>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a60      	ldr	r2, [pc, #384]	; (8004288 <HAL_DMA_Init+0x1c8>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d036      	beq.n	8004178 <HAL_DMA_Init+0xb8>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a5f      	ldr	r2, [pc, #380]	; (800428c <HAL_DMA_Init+0x1cc>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d031      	beq.n	8004178 <HAL_DMA_Init+0xb8>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a5d      	ldr	r2, [pc, #372]	; (8004290 <HAL_DMA_Init+0x1d0>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d02c      	beq.n	8004178 <HAL_DMA_Init+0xb8>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a5c      	ldr	r2, [pc, #368]	; (8004294 <HAL_DMA_Init+0x1d4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d027      	beq.n	8004178 <HAL_DMA_Init+0xb8>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a5a      	ldr	r2, [pc, #360]	; (8004298 <HAL_DMA_Init+0x1d8>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d022      	beq.n	8004178 <HAL_DMA_Init+0xb8>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a59      	ldr	r2, [pc, #356]	; (800429c <HAL_DMA_Init+0x1dc>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d01d      	beq.n	8004178 <HAL_DMA_Init+0xb8>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a57      	ldr	r2, [pc, #348]	; (80042a0 <HAL_DMA_Init+0x1e0>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d018      	beq.n	8004178 <HAL_DMA_Init+0xb8>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a56      	ldr	r2, [pc, #344]	; (80042a4 <HAL_DMA_Init+0x1e4>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d013      	beq.n	8004178 <HAL_DMA_Init+0xb8>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a54      	ldr	r2, [pc, #336]	; (80042a8 <HAL_DMA_Init+0x1e8>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d00e      	beq.n	8004178 <HAL_DMA_Init+0xb8>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a53      	ldr	r2, [pc, #332]	; (80042ac <HAL_DMA_Init+0x1ec>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d009      	beq.n	8004178 <HAL_DMA_Init+0xb8>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a51      	ldr	r2, [pc, #324]	; (80042b0 <HAL_DMA_Init+0x1f0>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d004      	beq.n	8004178 <HAL_DMA_Init+0xb8>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a50      	ldr	r2, [pc, #320]	; (80042b4 <HAL_DMA_Init+0x1f4>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d101      	bne.n	800417c <HAL_DMA_Init+0xbc>
 8004178:	2301      	movs	r3, #1
 800417a:	e000      	b.n	800417e <HAL_DMA_Init+0xbe>
 800417c:	2300      	movs	r3, #0
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 813b 	beq.w	80043fa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a37      	ldr	r2, [pc, #220]	; (8004278 <HAL_DMA_Init+0x1b8>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d04a      	beq.n	8004234 <HAL_DMA_Init+0x174>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a36      	ldr	r2, [pc, #216]	; (800427c <HAL_DMA_Init+0x1bc>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d045      	beq.n	8004234 <HAL_DMA_Init+0x174>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a34      	ldr	r2, [pc, #208]	; (8004280 <HAL_DMA_Init+0x1c0>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d040      	beq.n	8004234 <HAL_DMA_Init+0x174>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a33      	ldr	r2, [pc, #204]	; (8004284 <HAL_DMA_Init+0x1c4>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d03b      	beq.n	8004234 <HAL_DMA_Init+0x174>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a31      	ldr	r2, [pc, #196]	; (8004288 <HAL_DMA_Init+0x1c8>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d036      	beq.n	8004234 <HAL_DMA_Init+0x174>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a30      	ldr	r2, [pc, #192]	; (800428c <HAL_DMA_Init+0x1cc>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d031      	beq.n	8004234 <HAL_DMA_Init+0x174>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a2e      	ldr	r2, [pc, #184]	; (8004290 <HAL_DMA_Init+0x1d0>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d02c      	beq.n	8004234 <HAL_DMA_Init+0x174>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a2d      	ldr	r2, [pc, #180]	; (8004294 <HAL_DMA_Init+0x1d4>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d027      	beq.n	8004234 <HAL_DMA_Init+0x174>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a2b      	ldr	r2, [pc, #172]	; (8004298 <HAL_DMA_Init+0x1d8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d022      	beq.n	8004234 <HAL_DMA_Init+0x174>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a2a      	ldr	r2, [pc, #168]	; (800429c <HAL_DMA_Init+0x1dc>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d01d      	beq.n	8004234 <HAL_DMA_Init+0x174>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a28      	ldr	r2, [pc, #160]	; (80042a0 <HAL_DMA_Init+0x1e0>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d018      	beq.n	8004234 <HAL_DMA_Init+0x174>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a27      	ldr	r2, [pc, #156]	; (80042a4 <HAL_DMA_Init+0x1e4>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d013      	beq.n	8004234 <HAL_DMA_Init+0x174>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a25      	ldr	r2, [pc, #148]	; (80042a8 <HAL_DMA_Init+0x1e8>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d00e      	beq.n	8004234 <HAL_DMA_Init+0x174>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a24      	ldr	r2, [pc, #144]	; (80042ac <HAL_DMA_Init+0x1ec>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d009      	beq.n	8004234 <HAL_DMA_Init+0x174>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a22      	ldr	r2, [pc, #136]	; (80042b0 <HAL_DMA_Init+0x1f0>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d004      	beq.n	8004234 <HAL_DMA_Init+0x174>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a21      	ldr	r2, [pc, #132]	; (80042b4 <HAL_DMA_Init+0x1f4>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d108      	bne.n	8004246 <HAL_DMA_Init+0x186>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0201 	bic.w	r2, r2, #1
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	e007      	b.n	8004256 <HAL_DMA_Init+0x196>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0201 	bic.w	r2, r2, #1
 8004254:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004256:	e02f      	b.n	80042b8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004258:	f7fd fe72 	bl	8001f40 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b05      	cmp	r3, #5
 8004264:	d928      	bls.n	80042b8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2220      	movs	r2, #32
 800426a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2203      	movs	r2, #3
 8004270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e246      	b.n	8004706 <HAL_DMA_Init+0x646>
 8004278:	40020010 	.word	0x40020010
 800427c:	40020028 	.word	0x40020028
 8004280:	40020040 	.word	0x40020040
 8004284:	40020058 	.word	0x40020058
 8004288:	40020070 	.word	0x40020070
 800428c:	40020088 	.word	0x40020088
 8004290:	400200a0 	.word	0x400200a0
 8004294:	400200b8 	.word	0x400200b8
 8004298:	40020410 	.word	0x40020410
 800429c:	40020428 	.word	0x40020428
 80042a0:	40020440 	.word	0x40020440
 80042a4:	40020458 	.word	0x40020458
 80042a8:	40020470 	.word	0x40020470
 80042ac:	40020488 	.word	0x40020488
 80042b0:	400204a0 	.word	0x400204a0
 80042b4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1c8      	bne.n	8004258 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	4b83      	ldr	r3, [pc, #524]	; (80044e0 <HAL_DMA_Init+0x420>)
 80042d2:	4013      	ands	r3, r2
 80042d4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80042de:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042f6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	4313      	orrs	r3, r2
 8004302:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	2b04      	cmp	r3, #4
 800430a:	d107      	bne.n	800431c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004314:	4313      	orrs	r3, r2
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	4313      	orrs	r3, r2
 800431a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800431c:	4b71      	ldr	r3, [pc, #452]	; (80044e4 <HAL_DMA_Init+0x424>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	4b71      	ldr	r3, [pc, #452]	; (80044e8 <HAL_DMA_Init+0x428>)
 8004322:	4013      	ands	r3, r2
 8004324:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004328:	d328      	bcc.n	800437c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b28      	cmp	r3, #40	; 0x28
 8004330:	d903      	bls.n	800433a <HAL_DMA_Init+0x27a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b2e      	cmp	r3, #46	; 0x2e
 8004338:	d917      	bls.n	800436a <HAL_DMA_Init+0x2aa>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	2b3e      	cmp	r3, #62	; 0x3e
 8004340:	d903      	bls.n	800434a <HAL_DMA_Init+0x28a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2b42      	cmp	r3, #66	; 0x42
 8004348:	d90f      	bls.n	800436a <HAL_DMA_Init+0x2aa>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2b46      	cmp	r3, #70	; 0x46
 8004350:	d903      	bls.n	800435a <HAL_DMA_Init+0x29a>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2b48      	cmp	r3, #72	; 0x48
 8004358:	d907      	bls.n	800436a <HAL_DMA_Init+0x2aa>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b4e      	cmp	r3, #78	; 0x4e
 8004360:	d905      	bls.n	800436e <HAL_DMA_Init+0x2ae>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2b52      	cmp	r3, #82	; 0x52
 8004368:	d801      	bhi.n	800436e <HAL_DMA_Init+0x2ae>
 800436a:	2301      	movs	r3, #1
 800436c:	e000      	b.n	8004370 <HAL_DMA_Init+0x2b0>
 800436e:	2300      	movs	r3, #0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800437a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f023 0307 	bic.w	r3, r3, #7
 8004392:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	4313      	orrs	r3, r2
 800439c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d117      	bne.n	80043d6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00e      	beq.n	80043d6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f001 f9b9 	bl	8005730 <DMA_CheckFifoParam>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d008      	beq.n	80043d6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2240      	movs	r2, #64	; 0x40
 80043c8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e197      	b.n	8004706 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f001 f8f4 	bl	80055cc <DMA_CalcBaseAndBitshift>
 80043e4:	4603      	mov	r3, r0
 80043e6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ec:	f003 031f 	and.w	r3, r3, #31
 80043f0:	223f      	movs	r2, #63	; 0x3f
 80043f2:	409a      	lsls	r2, r3
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	609a      	str	r2, [r3, #8]
 80043f8:	e0cd      	b.n	8004596 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a3b      	ldr	r2, [pc, #236]	; (80044ec <HAL_DMA_Init+0x42c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d022      	beq.n	800444a <HAL_DMA_Init+0x38a>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a39      	ldr	r2, [pc, #228]	; (80044f0 <HAL_DMA_Init+0x430>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d01d      	beq.n	800444a <HAL_DMA_Init+0x38a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a38      	ldr	r2, [pc, #224]	; (80044f4 <HAL_DMA_Init+0x434>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d018      	beq.n	800444a <HAL_DMA_Init+0x38a>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a36      	ldr	r2, [pc, #216]	; (80044f8 <HAL_DMA_Init+0x438>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d013      	beq.n	800444a <HAL_DMA_Init+0x38a>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a35      	ldr	r2, [pc, #212]	; (80044fc <HAL_DMA_Init+0x43c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d00e      	beq.n	800444a <HAL_DMA_Init+0x38a>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a33      	ldr	r2, [pc, #204]	; (8004500 <HAL_DMA_Init+0x440>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d009      	beq.n	800444a <HAL_DMA_Init+0x38a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a32      	ldr	r2, [pc, #200]	; (8004504 <HAL_DMA_Init+0x444>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d004      	beq.n	800444a <HAL_DMA_Init+0x38a>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a30      	ldr	r2, [pc, #192]	; (8004508 <HAL_DMA_Init+0x448>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d101      	bne.n	800444e <HAL_DMA_Init+0x38e>
 800444a:	2301      	movs	r3, #1
 800444c:	e000      	b.n	8004450 <HAL_DMA_Init+0x390>
 800444e:	2300      	movs	r3, #0
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 8097 	beq.w	8004584 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a24      	ldr	r2, [pc, #144]	; (80044ec <HAL_DMA_Init+0x42c>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d021      	beq.n	80044a4 <HAL_DMA_Init+0x3e4>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a22      	ldr	r2, [pc, #136]	; (80044f0 <HAL_DMA_Init+0x430>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d01c      	beq.n	80044a4 <HAL_DMA_Init+0x3e4>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a21      	ldr	r2, [pc, #132]	; (80044f4 <HAL_DMA_Init+0x434>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d017      	beq.n	80044a4 <HAL_DMA_Init+0x3e4>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a1f      	ldr	r2, [pc, #124]	; (80044f8 <HAL_DMA_Init+0x438>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d012      	beq.n	80044a4 <HAL_DMA_Init+0x3e4>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a1e      	ldr	r2, [pc, #120]	; (80044fc <HAL_DMA_Init+0x43c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d00d      	beq.n	80044a4 <HAL_DMA_Init+0x3e4>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a1c      	ldr	r2, [pc, #112]	; (8004500 <HAL_DMA_Init+0x440>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d008      	beq.n	80044a4 <HAL_DMA_Init+0x3e4>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a1b      	ldr	r2, [pc, #108]	; (8004504 <HAL_DMA_Init+0x444>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d003      	beq.n	80044a4 <HAL_DMA_Init+0x3e4>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a19      	ldr	r2, [pc, #100]	; (8004508 <HAL_DMA_Init+0x448>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2202      	movs	r2, #2
 80044b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	4b12      	ldr	r3, [pc, #72]	; (800450c <HAL_DMA_Init+0x44c>)
 80044c2:	4013      	ands	r3, r2
 80044c4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	2b40      	cmp	r3, #64	; 0x40
 80044cc:	d020      	beq.n	8004510 <HAL_DMA_Init+0x450>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	2b80      	cmp	r3, #128	; 0x80
 80044d4:	d102      	bne.n	80044dc <HAL_DMA_Init+0x41c>
 80044d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044da:	e01a      	b.n	8004512 <HAL_DMA_Init+0x452>
 80044dc:	2300      	movs	r3, #0
 80044de:	e018      	b.n	8004512 <HAL_DMA_Init+0x452>
 80044e0:	fe10803f 	.word	0xfe10803f
 80044e4:	5c001000 	.word	0x5c001000
 80044e8:	ffff0000 	.word	0xffff0000
 80044ec:	58025408 	.word	0x58025408
 80044f0:	5802541c 	.word	0x5802541c
 80044f4:	58025430 	.word	0x58025430
 80044f8:	58025444 	.word	0x58025444
 80044fc:	58025458 	.word	0x58025458
 8004500:	5802546c 	.word	0x5802546c
 8004504:	58025480 	.word	0x58025480
 8004508:	58025494 	.word	0x58025494
 800450c:	fffe000f 	.word	0xfffe000f
 8004510:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	68d2      	ldr	r2, [r2, #12]
 8004516:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004518:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004520:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004528:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004530:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004538:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004540:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	4313      	orrs	r3, r2
 8004546:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	461a      	mov	r2, r3
 8004556:	4b6e      	ldr	r3, [pc, #440]	; (8004710 <HAL_DMA_Init+0x650>)
 8004558:	4413      	add	r3, r2
 800455a:	4a6e      	ldr	r2, [pc, #440]	; (8004714 <HAL_DMA_Init+0x654>)
 800455c:	fba2 2303 	umull	r2, r3, r2, r3
 8004560:	091b      	lsrs	r3, r3, #4
 8004562:	009a      	lsls	r2, r3, #2
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f001 f82f 	bl	80055cc <DMA_CalcBaseAndBitshift>
 800456e:	4603      	mov	r3, r0
 8004570:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004576:	f003 031f 	and.w	r3, r3, #31
 800457a:	2201      	movs	r2, #1
 800457c:	409a      	lsls	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	605a      	str	r2, [r3, #4]
 8004582:	e008      	b.n	8004596 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2240      	movs	r2, #64	; 0x40
 8004588:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2203      	movs	r2, #3
 800458e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e0b7      	b.n	8004706 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a5f      	ldr	r2, [pc, #380]	; (8004718 <HAL_DMA_Init+0x658>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d072      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a5d      	ldr	r2, [pc, #372]	; (800471c <HAL_DMA_Init+0x65c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d06d      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a5c      	ldr	r2, [pc, #368]	; (8004720 <HAL_DMA_Init+0x660>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d068      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a5a      	ldr	r2, [pc, #360]	; (8004724 <HAL_DMA_Init+0x664>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d063      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a59      	ldr	r2, [pc, #356]	; (8004728 <HAL_DMA_Init+0x668>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d05e      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a57      	ldr	r2, [pc, #348]	; (800472c <HAL_DMA_Init+0x66c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d059      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a56      	ldr	r2, [pc, #344]	; (8004730 <HAL_DMA_Init+0x670>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d054      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a54      	ldr	r2, [pc, #336]	; (8004734 <HAL_DMA_Init+0x674>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d04f      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a53      	ldr	r2, [pc, #332]	; (8004738 <HAL_DMA_Init+0x678>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d04a      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a51      	ldr	r2, [pc, #324]	; (800473c <HAL_DMA_Init+0x67c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d045      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a50      	ldr	r2, [pc, #320]	; (8004740 <HAL_DMA_Init+0x680>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d040      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a4e      	ldr	r2, [pc, #312]	; (8004744 <HAL_DMA_Init+0x684>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d03b      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a4d      	ldr	r2, [pc, #308]	; (8004748 <HAL_DMA_Init+0x688>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d036      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a4b      	ldr	r2, [pc, #300]	; (800474c <HAL_DMA_Init+0x68c>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d031      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a4a      	ldr	r2, [pc, #296]	; (8004750 <HAL_DMA_Init+0x690>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d02c      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a48      	ldr	r2, [pc, #288]	; (8004754 <HAL_DMA_Init+0x694>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d027      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a47      	ldr	r2, [pc, #284]	; (8004758 <HAL_DMA_Init+0x698>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d022      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a45      	ldr	r2, [pc, #276]	; (800475c <HAL_DMA_Init+0x69c>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d01d      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a44      	ldr	r2, [pc, #272]	; (8004760 <HAL_DMA_Init+0x6a0>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d018      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a42      	ldr	r2, [pc, #264]	; (8004764 <HAL_DMA_Init+0x6a4>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d013      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a41      	ldr	r2, [pc, #260]	; (8004768 <HAL_DMA_Init+0x6a8>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d00e      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a3f      	ldr	r2, [pc, #252]	; (800476c <HAL_DMA_Init+0x6ac>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d009      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a3e      	ldr	r2, [pc, #248]	; (8004770 <HAL_DMA_Init+0x6b0>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d004      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a3c      	ldr	r2, [pc, #240]	; (8004774 <HAL_DMA_Init+0x6b4>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d101      	bne.n	800468a <HAL_DMA_Init+0x5ca>
 8004686:	2301      	movs	r3, #1
 8004688:	e000      	b.n	800468c <HAL_DMA_Init+0x5cc>
 800468a:	2300      	movs	r3, #0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d032      	beq.n	80046f6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f001 f8c9 	bl	8005828 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2b80      	cmp	r3, #128	; 0x80
 800469c:	d102      	bne.n	80046a4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ac:	b2d2      	uxtb	r2, r2
 80046ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80046b8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d010      	beq.n	80046e4 <HAL_DMA_Init+0x624>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b08      	cmp	r3, #8
 80046c8:	d80c      	bhi.n	80046e4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f001 f946 	bl	800595c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046d4:	2200      	movs	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80046e0:	605a      	str	r2, [r3, #4]
 80046e2:	e008      	b.n	80046f6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	a7fdabf8 	.word	0xa7fdabf8
 8004714:	cccccccd 	.word	0xcccccccd
 8004718:	40020010 	.word	0x40020010
 800471c:	40020028 	.word	0x40020028
 8004720:	40020040 	.word	0x40020040
 8004724:	40020058 	.word	0x40020058
 8004728:	40020070 	.word	0x40020070
 800472c:	40020088 	.word	0x40020088
 8004730:	400200a0 	.word	0x400200a0
 8004734:	400200b8 	.word	0x400200b8
 8004738:	40020410 	.word	0x40020410
 800473c:	40020428 	.word	0x40020428
 8004740:	40020440 	.word	0x40020440
 8004744:	40020458 	.word	0x40020458
 8004748:	40020470 	.word	0x40020470
 800474c:	40020488 	.word	0x40020488
 8004750:	400204a0 	.word	0x400204a0
 8004754:	400204b8 	.word	0x400204b8
 8004758:	58025408 	.word	0x58025408
 800475c:	5802541c 	.word	0x5802541c
 8004760:	58025430 	.word	0x58025430
 8004764:	58025444 	.word	0x58025444
 8004768:	58025458 	.word	0x58025458
 800476c:	5802546c 	.word	0x5802546c
 8004770:	58025480 	.word	0x58025480
 8004774:	58025494 	.word	0x58025494

08004778 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b08a      	sub	sp, #40	; 0x28
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004784:	4b67      	ldr	r3, [pc, #412]	; (8004924 <HAL_DMA_IRQHandler+0x1ac>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a67      	ldr	r2, [pc, #412]	; (8004928 <HAL_DMA_IRQHandler+0x1b0>)
 800478a:	fba2 2303 	umull	r2, r3, r2, r3
 800478e:	0a9b      	lsrs	r3, r3, #10
 8004790:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004796:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a5f      	ldr	r2, [pc, #380]	; (800492c <HAL_DMA_IRQHandler+0x1b4>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d04a      	beq.n	800484a <HAL_DMA_IRQHandler+0xd2>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a5d      	ldr	r2, [pc, #372]	; (8004930 <HAL_DMA_IRQHandler+0x1b8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d045      	beq.n	800484a <HAL_DMA_IRQHandler+0xd2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a5c      	ldr	r2, [pc, #368]	; (8004934 <HAL_DMA_IRQHandler+0x1bc>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d040      	beq.n	800484a <HAL_DMA_IRQHandler+0xd2>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a5a      	ldr	r2, [pc, #360]	; (8004938 <HAL_DMA_IRQHandler+0x1c0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d03b      	beq.n	800484a <HAL_DMA_IRQHandler+0xd2>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a59      	ldr	r2, [pc, #356]	; (800493c <HAL_DMA_IRQHandler+0x1c4>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d036      	beq.n	800484a <HAL_DMA_IRQHandler+0xd2>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a57      	ldr	r2, [pc, #348]	; (8004940 <HAL_DMA_IRQHandler+0x1c8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d031      	beq.n	800484a <HAL_DMA_IRQHandler+0xd2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a56      	ldr	r2, [pc, #344]	; (8004944 <HAL_DMA_IRQHandler+0x1cc>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d02c      	beq.n	800484a <HAL_DMA_IRQHandler+0xd2>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a54      	ldr	r2, [pc, #336]	; (8004948 <HAL_DMA_IRQHandler+0x1d0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d027      	beq.n	800484a <HAL_DMA_IRQHandler+0xd2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a53      	ldr	r2, [pc, #332]	; (800494c <HAL_DMA_IRQHandler+0x1d4>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d022      	beq.n	800484a <HAL_DMA_IRQHandler+0xd2>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a51      	ldr	r2, [pc, #324]	; (8004950 <HAL_DMA_IRQHandler+0x1d8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d01d      	beq.n	800484a <HAL_DMA_IRQHandler+0xd2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a50      	ldr	r2, [pc, #320]	; (8004954 <HAL_DMA_IRQHandler+0x1dc>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d018      	beq.n	800484a <HAL_DMA_IRQHandler+0xd2>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a4e      	ldr	r2, [pc, #312]	; (8004958 <HAL_DMA_IRQHandler+0x1e0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d013      	beq.n	800484a <HAL_DMA_IRQHandler+0xd2>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a4d      	ldr	r2, [pc, #308]	; (800495c <HAL_DMA_IRQHandler+0x1e4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00e      	beq.n	800484a <HAL_DMA_IRQHandler+0xd2>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a4b      	ldr	r2, [pc, #300]	; (8004960 <HAL_DMA_IRQHandler+0x1e8>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d009      	beq.n	800484a <HAL_DMA_IRQHandler+0xd2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a4a      	ldr	r2, [pc, #296]	; (8004964 <HAL_DMA_IRQHandler+0x1ec>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d004      	beq.n	800484a <HAL_DMA_IRQHandler+0xd2>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a48      	ldr	r2, [pc, #288]	; (8004968 <HAL_DMA_IRQHandler+0x1f0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d101      	bne.n	800484e <HAL_DMA_IRQHandler+0xd6>
 800484a:	2301      	movs	r3, #1
 800484c:	e000      	b.n	8004850 <HAL_DMA_IRQHandler+0xd8>
 800484e:	2300      	movs	r3, #0
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 842b 	beq.w	80050ac <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800485a:	f003 031f 	and.w	r3, r3, #31
 800485e:	2208      	movs	r2, #8
 8004860:	409a      	lsls	r2, r3
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	4013      	ands	r3, r2
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 80a2 	beq.w	80049b0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a2e      	ldr	r2, [pc, #184]	; (800492c <HAL_DMA_IRQHandler+0x1b4>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d04a      	beq.n	800490c <HAL_DMA_IRQHandler+0x194>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a2d      	ldr	r2, [pc, #180]	; (8004930 <HAL_DMA_IRQHandler+0x1b8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d045      	beq.n	800490c <HAL_DMA_IRQHandler+0x194>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a2b      	ldr	r2, [pc, #172]	; (8004934 <HAL_DMA_IRQHandler+0x1bc>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d040      	beq.n	800490c <HAL_DMA_IRQHandler+0x194>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a2a      	ldr	r2, [pc, #168]	; (8004938 <HAL_DMA_IRQHandler+0x1c0>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d03b      	beq.n	800490c <HAL_DMA_IRQHandler+0x194>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a28      	ldr	r2, [pc, #160]	; (800493c <HAL_DMA_IRQHandler+0x1c4>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d036      	beq.n	800490c <HAL_DMA_IRQHandler+0x194>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a27      	ldr	r2, [pc, #156]	; (8004940 <HAL_DMA_IRQHandler+0x1c8>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d031      	beq.n	800490c <HAL_DMA_IRQHandler+0x194>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a25      	ldr	r2, [pc, #148]	; (8004944 <HAL_DMA_IRQHandler+0x1cc>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d02c      	beq.n	800490c <HAL_DMA_IRQHandler+0x194>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a24      	ldr	r2, [pc, #144]	; (8004948 <HAL_DMA_IRQHandler+0x1d0>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d027      	beq.n	800490c <HAL_DMA_IRQHandler+0x194>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a22      	ldr	r2, [pc, #136]	; (800494c <HAL_DMA_IRQHandler+0x1d4>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d022      	beq.n	800490c <HAL_DMA_IRQHandler+0x194>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a21      	ldr	r2, [pc, #132]	; (8004950 <HAL_DMA_IRQHandler+0x1d8>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d01d      	beq.n	800490c <HAL_DMA_IRQHandler+0x194>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a1f      	ldr	r2, [pc, #124]	; (8004954 <HAL_DMA_IRQHandler+0x1dc>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d018      	beq.n	800490c <HAL_DMA_IRQHandler+0x194>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a1e      	ldr	r2, [pc, #120]	; (8004958 <HAL_DMA_IRQHandler+0x1e0>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d013      	beq.n	800490c <HAL_DMA_IRQHandler+0x194>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a1c      	ldr	r2, [pc, #112]	; (800495c <HAL_DMA_IRQHandler+0x1e4>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d00e      	beq.n	800490c <HAL_DMA_IRQHandler+0x194>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a1b      	ldr	r2, [pc, #108]	; (8004960 <HAL_DMA_IRQHandler+0x1e8>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d009      	beq.n	800490c <HAL_DMA_IRQHandler+0x194>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a19      	ldr	r2, [pc, #100]	; (8004964 <HAL_DMA_IRQHandler+0x1ec>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d004      	beq.n	800490c <HAL_DMA_IRQHandler+0x194>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a18      	ldr	r2, [pc, #96]	; (8004968 <HAL_DMA_IRQHandler+0x1f0>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d12f      	bne.n	800496c <HAL_DMA_IRQHandler+0x1f4>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	2b00      	cmp	r3, #0
 8004918:	bf14      	ite	ne
 800491a:	2301      	movne	r3, #1
 800491c:	2300      	moveq	r3, #0
 800491e:	b2db      	uxtb	r3, r3
 8004920:	e02e      	b.n	8004980 <HAL_DMA_IRQHandler+0x208>
 8004922:	bf00      	nop
 8004924:	24000000 	.word	0x24000000
 8004928:	1b4e81b5 	.word	0x1b4e81b5
 800492c:	40020010 	.word	0x40020010
 8004930:	40020028 	.word	0x40020028
 8004934:	40020040 	.word	0x40020040
 8004938:	40020058 	.word	0x40020058
 800493c:	40020070 	.word	0x40020070
 8004940:	40020088 	.word	0x40020088
 8004944:	400200a0 	.word	0x400200a0
 8004948:	400200b8 	.word	0x400200b8
 800494c:	40020410 	.word	0x40020410
 8004950:	40020428 	.word	0x40020428
 8004954:	40020440 	.word	0x40020440
 8004958:	40020458 	.word	0x40020458
 800495c:	40020470 	.word	0x40020470
 8004960:	40020488 	.word	0x40020488
 8004964:	400204a0 	.word	0x400204a0
 8004968:	400204b8 	.word	0x400204b8
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0308 	and.w	r3, r3, #8
 8004976:	2b00      	cmp	r3, #0
 8004978:	bf14      	ite	ne
 800497a:	2301      	movne	r3, #1
 800497c:	2300      	moveq	r3, #0
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d015      	beq.n	80049b0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0204 	bic.w	r2, r2, #4
 8004992:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004998:	f003 031f 	and.w	r3, r3, #31
 800499c:	2208      	movs	r2, #8
 800499e:	409a      	lsls	r2, r3
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a8:	f043 0201 	orr.w	r2, r3, #1
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b4:	f003 031f 	and.w	r3, r3, #31
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	fa22 f303 	lsr.w	r3, r2, r3
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d06e      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a69      	ldr	r2, [pc, #420]	; (8004b70 <HAL_DMA_IRQHandler+0x3f8>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d04a      	beq.n	8004a66 <HAL_DMA_IRQHandler+0x2ee>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a67      	ldr	r2, [pc, #412]	; (8004b74 <HAL_DMA_IRQHandler+0x3fc>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d045      	beq.n	8004a66 <HAL_DMA_IRQHandler+0x2ee>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a66      	ldr	r2, [pc, #408]	; (8004b78 <HAL_DMA_IRQHandler+0x400>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d040      	beq.n	8004a66 <HAL_DMA_IRQHandler+0x2ee>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a64      	ldr	r2, [pc, #400]	; (8004b7c <HAL_DMA_IRQHandler+0x404>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d03b      	beq.n	8004a66 <HAL_DMA_IRQHandler+0x2ee>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a63      	ldr	r2, [pc, #396]	; (8004b80 <HAL_DMA_IRQHandler+0x408>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d036      	beq.n	8004a66 <HAL_DMA_IRQHandler+0x2ee>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a61      	ldr	r2, [pc, #388]	; (8004b84 <HAL_DMA_IRQHandler+0x40c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d031      	beq.n	8004a66 <HAL_DMA_IRQHandler+0x2ee>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a60      	ldr	r2, [pc, #384]	; (8004b88 <HAL_DMA_IRQHandler+0x410>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d02c      	beq.n	8004a66 <HAL_DMA_IRQHandler+0x2ee>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a5e      	ldr	r2, [pc, #376]	; (8004b8c <HAL_DMA_IRQHandler+0x414>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d027      	beq.n	8004a66 <HAL_DMA_IRQHandler+0x2ee>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a5d      	ldr	r2, [pc, #372]	; (8004b90 <HAL_DMA_IRQHandler+0x418>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d022      	beq.n	8004a66 <HAL_DMA_IRQHandler+0x2ee>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a5b      	ldr	r2, [pc, #364]	; (8004b94 <HAL_DMA_IRQHandler+0x41c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d01d      	beq.n	8004a66 <HAL_DMA_IRQHandler+0x2ee>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a5a      	ldr	r2, [pc, #360]	; (8004b98 <HAL_DMA_IRQHandler+0x420>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d018      	beq.n	8004a66 <HAL_DMA_IRQHandler+0x2ee>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a58      	ldr	r2, [pc, #352]	; (8004b9c <HAL_DMA_IRQHandler+0x424>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d013      	beq.n	8004a66 <HAL_DMA_IRQHandler+0x2ee>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a57      	ldr	r2, [pc, #348]	; (8004ba0 <HAL_DMA_IRQHandler+0x428>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d00e      	beq.n	8004a66 <HAL_DMA_IRQHandler+0x2ee>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a55      	ldr	r2, [pc, #340]	; (8004ba4 <HAL_DMA_IRQHandler+0x42c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d009      	beq.n	8004a66 <HAL_DMA_IRQHandler+0x2ee>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a54      	ldr	r2, [pc, #336]	; (8004ba8 <HAL_DMA_IRQHandler+0x430>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d004      	beq.n	8004a66 <HAL_DMA_IRQHandler+0x2ee>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a52      	ldr	r2, [pc, #328]	; (8004bac <HAL_DMA_IRQHandler+0x434>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d10a      	bne.n	8004a7c <HAL_DMA_IRQHandler+0x304>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	bf14      	ite	ne
 8004a74:	2301      	movne	r3, #1
 8004a76:	2300      	moveq	r3, #0
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	e003      	b.n	8004a84 <HAL_DMA_IRQHandler+0x30c>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2300      	movs	r3, #0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00d      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8c:	f003 031f 	and.w	r3, r3, #31
 8004a90:	2201      	movs	r2, #1
 8004a92:	409a      	lsls	r2, r3
 8004a94:	6a3b      	ldr	r3, [r7, #32]
 8004a96:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9c:	f043 0202 	orr.w	r2, r3, #2
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa8:	f003 031f 	and.w	r3, r3, #31
 8004aac:	2204      	movs	r2, #4
 8004aae:	409a      	lsls	r2, r3
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 808f 	beq.w	8004bd8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a2c      	ldr	r2, [pc, #176]	; (8004b70 <HAL_DMA_IRQHandler+0x3f8>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d04a      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x3e2>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a2a      	ldr	r2, [pc, #168]	; (8004b74 <HAL_DMA_IRQHandler+0x3fc>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d045      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x3e2>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a29      	ldr	r2, [pc, #164]	; (8004b78 <HAL_DMA_IRQHandler+0x400>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d040      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x3e2>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a27      	ldr	r2, [pc, #156]	; (8004b7c <HAL_DMA_IRQHandler+0x404>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d03b      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x3e2>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a26      	ldr	r2, [pc, #152]	; (8004b80 <HAL_DMA_IRQHandler+0x408>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d036      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x3e2>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a24      	ldr	r2, [pc, #144]	; (8004b84 <HAL_DMA_IRQHandler+0x40c>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d031      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x3e2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a23      	ldr	r2, [pc, #140]	; (8004b88 <HAL_DMA_IRQHandler+0x410>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d02c      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x3e2>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a21      	ldr	r2, [pc, #132]	; (8004b8c <HAL_DMA_IRQHandler+0x414>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d027      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x3e2>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a20      	ldr	r2, [pc, #128]	; (8004b90 <HAL_DMA_IRQHandler+0x418>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d022      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x3e2>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a1e      	ldr	r2, [pc, #120]	; (8004b94 <HAL_DMA_IRQHandler+0x41c>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d01d      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x3e2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a1d      	ldr	r2, [pc, #116]	; (8004b98 <HAL_DMA_IRQHandler+0x420>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d018      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x3e2>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a1b      	ldr	r2, [pc, #108]	; (8004b9c <HAL_DMA_IRQHandler+0x424>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d013      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x3e2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a1a      	ldr	r2, [pc, #104]	; (8004ba0 <HAL_DMA_IRQHandler+0x428>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d00e      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x3e2>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a18      	ldr	r2, [pc, #96]	; (8004ba4 <HAL_DMA_IRQHandler+0x42c>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d009      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x3e2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a17      	ldr	r2, [pc, #92]	; (8004ba8 <HAL_DMA_IRQHandler+0x430>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d004      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x3e2>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a15      	ldr	r2, [pc, #84]	; (8004bac <HAL_DMA_IRQHandler+0x434>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d12a      	bne.n	8004bb0 <HAL_DMA_IRQHandler+0x438>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	bf14      	ite	ne
 8004b68:	2301      	movne	r3, #1
 8004b6a:	2300      	moveq	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	e023      	b.n	8004bb8 <HAL_DMA_IRQHandler+0x440>
 8004b70:	40020010 	.word	0x40020010
 8004b74:	40020028 	.word	0x40020028
 8004b78:	40020040 	.word	0x40020040
 8004b7c:	40020058 	.word	0x40020058
 8004b80:	40020070 	.word	0x40020070
 8004b84:	40020088 	.word	0x40020088
 8004b88:	400200a0 	.word	0x400200a0
 8004b8c:	400200b8 	.word	0x400200b8
 8004b90:	40020410 	.word	0x40020410
 8004b94:	40020428 	.word	0x40020428
 8004b98:	40020440 	.word	0x40020440
 8004b9c:	40020458 	.word	0x40020458
 8004ba0:	40020470 	.word	0x40020470
 8004ba4:	40020488 	.word	0x40020488
 8004ba8:	400204a0 	.word	0x400204a0
 8004bac:	400204b8 	.word	0x400204b8
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00d      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc0:	f003 031f 	and.w	r3, r3, #31
 8004bc4:	2204      	movs	r2, #4
 8004bc6:	409a      	lsls	r2, r3
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd0:	f043 0204 	orr.w	r2, r3, #4
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bdc:	f003 031f 	and.w	r3, r3, #31
 8004be0:	2210      	movs	r2, #16
 8004be2:	409a      	lsls	r2, r3
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	4013      	ands	r3, r2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 80a6 	beq.w	8004d3a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a85      	ldr	r2, [pc, #532]	; (8004e08 <HAL_DMA_IRQHandler+0x690>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d04a      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x516>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a83      	ldr	r2, [pc, #524]	; (8004e0c <HAL_DMA_IRQHandler+0x694>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d045      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x516>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a82      	ldr	r2, [pc, #520]	; (8004e10 <HAL_DMA_IRQHandler+0x698>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d040      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x516>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a80      	ldr	r2, [pc, #512]	; (8004e14 <HAL_DMA_IRQHandler+0x69c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d03b      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x516>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a7f      	ldr	r2, [pc, #508]	; (8004e18 <HAL_DMA_IRQHandler+0x6a0>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d036      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x516>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a7d      	ldr	r2, [pc, #500]	; (8004e1c <HAL_DMA_IRQHandler+0x6a4>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d031      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x516>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a7c      	ldr	r2, [pc, #496]	; (8004e20 <HAL_DMA_IRQHandler+0x6a8>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d02c      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x516>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a7a      	ldr	r2, [pc, #488]	; (8004e24 <HAL_DMA_IRQHandler+0x6ac>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d027      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x516>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a79      	ldr	r2, [pc, #484]	; (8004e28 <HAL_DMA_IRQHandler+0x6b0>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d022      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x516>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a77      	ldr	r2, [pc, #476]	; (8004e2c <HAL_DMA_IRQHandler+0x6b4>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d01d      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x516>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a76      	ldr	r2, [pc, #472]	; (8004e30 <HAL_DMA_IRQHandler+0x6b8>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d018      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x516>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a74      	ldr	r2, [pc, #464]	; (8004e34 <HAL_DMA_IRQHandler+0x6bc>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d013      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x516>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a73      	ldr	r2, [pc, #460]	; (8004e38 <HAL_DMA_IRQHandler+0x6c0>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00e      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x516>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a71      	ldr	r2, [pc, #452]	; (8004e3c <HAL_DMA_IRQHandler+0x6c4>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d009      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x516>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a70      	ldr	r2, [pc, #448]	; (8004e40 <HAL_DMA_IRQHandler+0x6c8>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d004      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x516>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a6e      	ldr	r2, [pc, #440]	; (8004e44 <HAL_DMA_IRQHandler+0x6cc>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d10a      	bne.n	8004ca4 <HAL_DMA_IRQHandler+0x52c>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0308 	and.w	r3, r3, #8
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	bf14      	ite	ne
 8004c9c:	2301      	movne	r3, #1
 8004c9e:	2300      	moveq	r3, #0
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	e009      	b.n	8004cb8 <HAL_DMA_IRQHandler+0x540>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0304 	and.w	r3, r3, #4
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	bf14      	ite	ne
 8004cb2:	2301      	movne	r3, #1
 8004cb4:	2300      	moveq	r3, #0
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d03e      	beq.n	8004d3a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc0:	f003 031f 	and.w	r3, r3, #31
 8004cc4:	2210      	movs	r2, #16
 8004cc6:	409a      	lsls	r2, r3
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d018      	beq.n	8004d0c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d108      	bne.n	8004cfa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d024      	beq.n	8004d3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	4798      	blx	r3
 8004cf8:	e01f      	b.n	8004d3a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d01b      	beq.n	8004d3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	4798      	blx	r3
 8004d0a:	e016      	b.n	8004d3a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d107      	bne.n	8004d2a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0208 	bic.w	r2, r2, #8
 8004d28:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d003      	beq.n	8004d3a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d3e:	f003 031f 	and.w	r3, r3, #31
 8004d42:	2220      	movs	r2, #32
 8004d44:	409a      	lsls	r2, r3
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f000 8110 	beq.w	8004f70 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a2c      	ldr	r2, [pc, #176]	; (8004e08 <HAL_DMA_IRQHandler+0x690>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d04a      	beq.n	8004df0 <HAL_DMA_IRQHandler+0x678>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a2b      	ldr	r2, [pc, #172]	; (8004e0c <HAL_DMA_IRQHandler+0x694>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d045      	beq.n	8004df0 <HAL_DMA_IRQHandler+0x678>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a29      	ldr	r2, [pc, #164]	; (8004e10 <HAL_DMA_IRQHandler+0x698>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d040      	beq.n	8004df0 <HAL_DMA_IRQHandler+0x678>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a28      	ldr	r2, [pc, #160]	; (8004e14 <HAL_DMA_IRQHandler+0x69c>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d03b      	beq.n	8004df0 <HAL_DMA_IRQHandler+0x678>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a26      	ldr	r2, [pc, #152]	; (8004e18 <HAL_DMA_IRQHandler+0x6a0>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d036      	beq.n	8004df0 <HAL_DMA_IRQHandler+0x678>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a25      	ldr	r2, [pc, #148]	; (8004e1c <HAL_DMA_IRQHandler+0x6a4>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d031      	beq.n	8004df0 <HAL_DMA_IRQHandler+0x678>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a23      	ldr	r2, [pc, #140]	; (8004e20 <HAL_DMA_IRQHandler+0x6a8>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d02c      	beq.n	8004df0 <HAL_DMA_IRQHandler+0x678>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a22      	ldr	r2, [pc, #136]	; (8004e24 <HAL_DMA_IRQHandler+0x6ac>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d027      	beq.n	8004df0 <HAL_DMA_IRQHandler+0x678>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a20      	ldr	r2, [pc, #128]	; (8004e28 <HAL_DMA_IRQHandler+0x6b0>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d022      	beq.n	8004df0 <HAL_DMA_IRQHandler+0x678>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a1f      	ldr	r2, [pc, #124]	; (8004e2c <HAL_DMA_IRQHandler+0x6b4>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d01d      	beq.n	8004df0 <HAL_DMA_IRQHandler+0x678>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a1d      	ldr	r2, [pc, #116]	; (8004e30 <HAL_DMA_IRQHandler+0x6b8>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d018      	beq.n	8004df0 <HAL_DMA_IRQHandler+0x678>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a1c      	ldr	r2, [pc, #112]	; (8004e34 <HAL_DMA_IRQHandler+0x6bc>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d013      	beq.n	8004df0 <HAL_DMA_IRQHandler+0x678>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a1a      	ldr	r2, [pc, #104]	; (8004e38 <HAL_DMA_IRQHandler+0x6c0>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00e      	beq.n	8004df0 <HAL_DMA_IRQHandler+0x678>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a19      	ldr	r2, [pc, #100]	; (8004e3c <HAL_DMA_IRQHandler+0x6c4>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d009      	beq.n	8004df0 <HAL_DMA_IRQHandler+0x678>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a17      	ldr	r2, [pc, #92]	; (8004e40 <HAL_DMA_IRQHandler+0x6c8>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d004      	beq.n	8004df0 <HAL_DMA_IRQHandler+0x678>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a16      	ldr	r2, [pc, #88]	; (8004e44 <HAL_DMA_IRQHandler+0x6cc>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d12b      	bne.n	8004e48 <HAL_DMA_IRQHandler+0x6d0>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0310 	and.w	r3, r3, #16
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	bf14      	ite	ne
 8004dfe:	2301      	movne	r3, #1
 8004e00:	2300      	moveq	r3, #0
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	e02a      	b.n	8004e5c <HAL_DMA_IRQHandler+0x6e4>
 8004e06:	bf00      	nop
 8004e08:	40020010 	.word	0x40020010
 8004e0c:	40020028 	.word	0x40020028
 8004e10:	40020040 	.word	0x40020040
 8004e14:	40020058 	.word	0x40020058
 8004e18:	40020070 	.word	0x40020070
 8004e1c:	40020088 	.word	0x40020088
 8004e20:	400200a0 	.word	0x400200a0
 8004e24:	400200b8 	.word	0x400200b8
 8004e28:	40020410 	.word	0x40020410
 8004e2c:	40020428 	.word	0x40020428
 8004e30:	40020440 	.word	0x40020440
 8004e34:	40020458 	.word	0x40020458
 8004e38:	40020470 	.word	0x40020470
 8004e3c:	40020488 	.word	0x40020488
 8004e40:	400204a0 	.word	0x400204a0
 8004e44:	400204b8 	.word	0x400204b8
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	bf14      	ite	ne
 8004e56:	2301      	movne	r3, #1
 8004e58:	2300      	moveq	r3, #0
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 8087 	beq.w	8004f70 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e66:	f003 031f 	and.w	r3, r3, #31
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	409a      	lsls	r2, r3
 8004e6e:	6a3b      	ldr	r3, [r7, #32]
 8004e70:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	d139      	bne.n	8004ef2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 0216 	bic.w	r2, r2, #22
 8004e8c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	695a      	ldr	r2, [r3, #20]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e9c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d103      	bne.n	8004eae <HAL_DMA_IRQHandler+0x736>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d007      	beq.n	8004ebe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 0208 	bic.w	r2, r2, #8
 8004ebc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec2:	f003 031f 	and.w	r3, r3, #31
 8004ec6:	223f      	movs	r2, #63	; 0x3f
 8004ec8:	409a      	lsls	r2, r3
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 834a 	beq.w	800557c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	4798      	blx	r3
          }
          return;
 8004ef0:	e344      	b.n	800557c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d018      	beq.n	8004f32 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d108      	bne.n	8004f20 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d02c      	beq.n	8004f70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	4798      	blx	r3
 8004f1e:	e027      	b.n	8004f70 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d023      	beq.n	8004f70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	4798      	blx	r3
 8004f30:	e01e      	b.n	8004f70 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10f      	bne.n	8004f60 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0210 	bic.w	r2, r2, #16
 8004f4e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d003      	beq.n	8004f70 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 8306 	beq.w	8005586 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 8088 	beq.w	8005098 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2204      	movs	r2, #4
 8004f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a7a      	ldr	r2, [pc, #488]	; (8005180 <HAL_DMA_IRQHandler+0xa08>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d04a      	beq.n	8005030 <HAL_DMA_IRQHandler+0x8b8>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a79      	ldr	r2, [pc, #484]	; (8005184 <HAL_DMA_IRQHandler+0xa0c>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d045      	beq.n	8005030 <HAL_DMA_IRQHandler+0x8b8>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a77      	ldr	r2, [pc, #476]	; (8005188 <HAL_DMA_IRQHandler+0xa10>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d040      	beq.n	8005030 <HAL_DMA_IRQHandler+0x8b8>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a76      	ldr	r2, [pc, #472]	; (800518c <HAL_DMA_IRQHandler+0xa14>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d03b      	beq.n	8005030 <HAL_DMA_IRQHandler+0x8b8>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a74      	ldr	r2, [pc, #464]	; (8005190 <HAL_DMA_IRQHandler+0xa18>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d036      	beq.n	8005030 <HAL_DMA_IRQHandler+0x8b8>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a73      	ldr	r2, [pc, #460]	; (8005194 <HAL_DMA_IRQHandler+0xa1c>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d031      	beq.n	8005030 <HAL_DMA_IRQHandler+0x8b8>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a71      	ldr	r2, [pc, #452]	; (8005198 <HAL_DMA_IRQHandler+0xa20>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d02c      	beq.n	8005030 <HAL_DMA_IRQHandler+0x8b8>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a70      	ldr	r2, [pc, #448]	; (800519c <HAL_DMA_IRQHandler+0xa24>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d027      	beq.n	8005030 <HAL_DMA_IRQHandler+0x8b8>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a6e      	ldr	r2, [pc, #440]	; (80051a0 <HAL_DMA_IRQHandler+0xa28>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d022      	beq.n	8005030 <HAL_DMA_IRQHandler+0x8b8>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a6d      	ldr	r2, [pc, #436]	; (80051a4 <HAL_DMA_IRQHandler+0xa2c>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d01d      	beq.n	8005030 <HAL_DMA_IRQHandler+0x8b8>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a6b      	ldr	r2, [pc, #428]	; (80051a8 <HAL_DMA_IRQHandler+0xa30>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d018      	beq.n	8005030 <HAL_DMA_IRQHandler+0x8b8>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a6a      	ldr	r2, [pc, #424]	; (80051ac <HAL_DMA_IRQHandler+0xa34>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d013      	beq.n	8005030 <HAL_DMA_IRQHandler+0x8b8>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a68      	ldr	r2, [pc, #416]	; (80051b0 <HAL_DMA_IRQHandler+0xa38>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d00e      	beq.n	8005030 <HAL_DMA_IRQHandler+0x8b8>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a67      	ldr	r2, [pc, #412]	; (80051b4 <HAL_DMA_IRQHandler+0xa3c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d009      	beq.n	8005030 <HAL_DMA_IRQHandler+0x8b8>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a65      	ldr	r2, [pc, #404]	; (80051b8 <HAL_DMA_IRQHandler+0xa40>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d004      	beq.n	8005030 <HAL_DMA_IRQHandler+0x8b8>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a64      	ldr	r2, [pc, #400]	; (80051bc <HAL_DMA_IRQHandler+0xa44>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d108      	bne.n	8005042 <HAL_DMA_IRQHandler+0x8ca>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 0201 	bic.w	r2, r2, #1
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	e007      	b.n	8005052 <HAL_DMA_IRQHandler+0x8da>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0201 	bic.w	r2, r2, #1
 8005050:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	3301      	adds	r3, #1
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800505a:	429a      	cmp	r2, r3
 800505c:	d307      	bcc.n	800506e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1f2      	bne.n	8005052 <HAL_DMA_IRQHandler+0x8da>
 800506c:	e000      	b.n	8005070 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800506e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d004      	beq.n	8005090 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2203      	movs	r2, #3
 800508a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800508e:	e003      	b.n	8005098 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 8272 	beq.w	8005586 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	4798      	blx	r3
 80050aa:	e26c      	b.n	8005586 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a43      	ldr	r2, [pc, #268]	; (80051c0 <HAL_DMA_IRQHandler+0xa48>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d022      	beq.n	80050fc <HAL_DMA_IRQHandler+0x984>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a42      	ldr	r2, [pc, #264]	; (80051c4 <HAL_DMA_IRQHandler+0xa4c>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d01d      	beq.n	80050fc <HAL_DMA_IRQHandler+0x984>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a40      	ldr	r2, [pc, #256]	; (80051c8 <HAL_DMA_IRQHandler+0xa50>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d018      	beq.n	80050fc <HAL_DMA_IRQHandler+0x984>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a3f      	ldr	r2, [pc, #252]	; (80051cc <HAL_DMA_IRQHandler+0xa54>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d013      	beq.n	80050fc <HAL_DMA_IRQHandler+0x984>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a3d      	ldr	r2, [pc, #244]	; (80051d0 <HAL_DMA_IRQHandler+0xa58>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d00e      	beq.n	80050fc <HAL_DMA_IRQHandler+0x984>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a3c      	ldr	r2, [pc, #240]	; (80051d4 <HAL_DMA_IRQHandler+0xa5c>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d009      	beq.n	80050fc <HAL_DMA_IRQHandler+0x984>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a3a      	ldr	r2, [pc, #232]	; (80051d8 <HAL_DMA_IRQHandler+0xa60>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d004      	beq.n	80050fc <HAL_DMA_IRQHandler+0x984>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a39      	ldr	r2, [pc, #228]	; (80051dc <HAL_DMA_IRQHandler+0xa64>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d101      	bne.n	8005100 <HAL_DMA_IRQHandler+0x988>
 80050fc:	2301      	movs	r3, #1
 80050fe:	e000      	b.n	8005102 <HAL_DMA_IRQHandler+0x98a>
 8005100:	2300      	movs	r3, #0
 8005102:	2b00      	cmp	r3, #0
 8005104:	f000 823f 	beq.w	8005586 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005114:	f003 031f 	and.w	r3, r3, #31
 8005118:	2204      	movs	r2, #4
 800511a:	409a      	lsls	r2, r3
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	4013      	ands	r3, r2
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 80cd 	beq.w	80052c0 <HAL_DMA_IRQHandler+0xb48>
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 80c7 	beq.w	80052c0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005136:	f003 031f 	and.w	r3, r3, #31
 800513a:	2204      	movs	r2, #4
 800513c:	409a      	lsls	r2, r3
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d049      	beq.n	80051e0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d109      	bne.n	800516a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 8210 	beq.w	8005580 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005168:	e20a      	b.n	8005580 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 8206 	beq.w	8005580 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800517c:	e200      	b.n	8005580 <HAL_DMA_IRQHandler+0xe08>
 800517e:	bf00      	nop
 8005180:	40020010 	.word	0x40020010
 8005184:	40020028 	.word	0x40020028
 8005188:	40020040 	.word	0x40020040
 800518c:	40020058 	.word	0x40020058
 8005190:	40020070 	.word	0x40020070
 8005194:	40020088 	.word	0x40020088
 8005198:	400200a0 	.word	0x400200a0
 800519c:	400200b8 	.word	0x400200b8
 80051a0:	40020410 	.word	0x40020410
 80051a4:	40020428 	.word	0x40020428
 80051a8:	40020440 	.word	0x40020440
 80051ac:	40020458 	.word	0x40020458
 80051b0:	40020470 	.word	0x40020470
 80051b4:	40020488 	.word	0x40020488
 80051b8:	400204a0 	.word	0x400204a0
 80051bc:	400204b8 	.word	0x400204b8
 80051c0:	58025408 	.word	0x58025408
 80051c4:	5802541c 	.word	0x5802541c
 80051c8:	58025430 	.word	0x58025430
 80051cc:	58025444 	.word	0x58025444
 80051d0:	58025458 	.word	0x58025458
 80051d4:	5802546c 	.word	0x5802546c
 80051d8:	58025480 	.word	0x58025480
 80051dc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f003 0320 	and.w	r3, r3, #32
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d160      	bne.n	80052ac <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a8c      	ldr	r2, [pc, #560]	; (8005420 <HAL_DMA_IRQHandler+0xca8>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d04a      	beq.n	800528a <HAL_DMA_IRQHandler+0xb12>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a8a      	ldr	r2, [pc, #552]	; (8005424 <HAL_DMA_IRQHandler+0xcac>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d045      	beq.n	800528a <HAL_DMA_IRQHandler+0xb12>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a89      	ldr	r2, [pc, #548]	; (8005428 <HAL_DMA_IRQHandler+0xcb0>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d040      	beq.n	800528a <HAL_DMA_IRQHandler+0xb12>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a87      	ldr	r2, [pc, #540]	; (800542c <HAL_DMA_IRQHandler+0xcb4>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d03b      	beq.n	800528a <HAL_DMA_IRQHandler+0xb12>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a86      	ldr	r2, [pc, #536]	; (8005430 <HAL_DMA_IRQHandler+0xcb8>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d036      	beq.n	800528a <HAL_DMA_IRQHandler+0xb12>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a84      	ldr	r2, [pc, #528]	; (8005434 <HAL_DMA_IRQHandler+0xcbc>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d031      	beq.n	800528a <HAL_DMA_IRQHandler+0xb12>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a83      	ldr	r2, [pc, #524]	; (8005438 <HAL_DMA_IRQHandler+0xcc0>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d02c      	beq.n	800528a <HAL_DMA_IRQHandler+0xb12>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a81      	ldr	r2, [pc, #516]	; (800543c <HAL_DMA_IRQHandler+0xcc4>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d027      	beq.n	800528a <HAL_DMA_IRQHandler+0xb12>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a80      	ldr	r2, [pc, #512]	; (8005440 <HAL_DMA_IRQHandler+0xcc8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d022      	beq.n	800528a <HAL_DMA_IRQHandler+0xb12>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a7e      	ldr	r2, [pc, #504]	; (8005444 <HAL_DMA_IRQHandler+0xccc>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d01d      	beq.n	800528a <HAL_DMA_IRQHandler+0xb12>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a7d      	ldr	r2, [pc, #500]	; (8005448 <HAL_DMA_IRQHandler+0xcd0>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d018      	beq.n	800528a <HAL_DMA_IRQHandler+0xb12>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a7b      	ldr	r2, [pc, #492]	; (800544c <HAL_DMA_IRQHandler+0xcd4>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d013      	beq.n	800528a <HAL_DMA_IRQHandler+0xb12>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a7a      	ldr	r2, [pc, #488]	; (8005450 <HAL_DMA_IRQHandler+0xcd8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d00e      	beq.n	800528a <HAL_DMA_IRQHandler+0xb12>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a78      	ldr	r2, [pc, #480]	; (8005454 <HAL_DMA_IRQHandler+0xcdc>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d009      	beq.n	800528a <HAL_DMA_IRQHandler+0xb12>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a77      	ldr	r2, [pc, #476]	; (8005458 <HAL_DMA_IRQHandler+0xce0>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d004      	beq.n	800528a <HAL_DMA_IRQHandler+0xb12>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a75      	ldr	r2, [pc, #468]	; (800545c <HAL_DMA_IRQHandler+0xce4>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d108      	bne.n	800529c <HAL_DMA_IRQHandler+0xb24>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0208 	bic.w	r2, r2, #8
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	e007      	b.n	80052ac <HAL_DMA_IRQHandler+0xb34>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 0204 	bic.w	r2, r2, #4
 80052aa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 8165 	beq.w	8005580 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052be:	e15f      	b.n	8005580 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c4:	f003 031f 	and.w	r3, r3, #31
 80052c8:	2202      	movs	r2, #2
 80052ca:	409a      	lsls	r2, r3
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	4013      	ands	r3, r2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 80c5 	beq.w	8005460 <HAL_DMA_IRQHandler+0xce8>
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 80bf 	beq.w	8005460 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e6:	f003 031f 	and.w	r3, r3, #31
 80052ea:	2202      	movs	r2, #2
 80052ec:	409a      	lsls	r2, r3
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d018      	beq.n	800532e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d109      	bne.n	800531a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 813a 	beq.w	8005584 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005318:	e134      	b.n	8005584 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 8130 	beq.w	8005584 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800532c:	e12a      	b.n	8005584 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f003 0320 	and.w	r3, r3, #32
 8005334:	2b00      	cmp	r3, #0
 8005336:	d168      	bne.n	800540a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a38      	ldr	r2, [pc, #224]	; (8005420 <HAL_DMA_IRQHandler+0xca8>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d04a      	beq.n	80053d8 <HAL_DMA_IRQHandler+0xc60>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a37      	ldr	r2, [pc, #220]	; (8005424 <HAL_DMA_IRQHandler+0xcac>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d045      	beq.n	80053d8 <HAL_DMA_IRQHandler+0xc60>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a35      	ldr	r2, [pc, #212]	; (8005428 <HAL_DMA_IRQHandler+0xcb0>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d040      	beq.n	80053d8 <HAL_DMA_IRQHandler+0xc60>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a34      	ldr	r2, [pc, #208]	; (800542c <HAL_DMA_IRQHandler+0xcb4>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d03b      	beq.n	80053d8 <HAL_DMA_IRQHandler+0xc60>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a32      	ldr	r2, [pc, #200]	; (8005430 <HAL_DMA_IRQHandler+0xcb8>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d036      	beq.n	80053d8 <HAL_DMA_IRQHandler+0xc60>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a31      	ldr	r2, [pc, #196]	; (8005434 <HAL_DMA_IRQHandler+0xcbc>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d031      	beq.n	80053d8 <HAL_DMA_IRQHandler+0xc60>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a2f      	ldr	r2, [pc, #188]	; (8005438 <HAL_DMA_IRQHandler+0xcc0>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d02c      	beq.n	80053d8 <HAL_DMA_IRQHandler+0xc60>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a2e      	ldr	r2, [pc, #184]	; (800543c <HAL_DMA_IRQHandler+0xcc4>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d027      	beq.n	80053d8 <HAL_DMA_IRQHandler+0xc60>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a2c      	ldr	r2, [pc, #176]	; (8005440 <HAL_DMA_IRQHandler+0xcc8>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d022      	beq.n	80053d8 <HAL_DMA_IRQHandler+0xc60>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a2b      	ldr	r2, [pc, #172]	; (8005444 <HAL_DMA_IRQHandler+0xccc>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d01d      	beq.n	80053d8 <HAL_DMA_IRQHandler+0xc60>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a29      	ldr	r2, [pc, #164]	; (8005448 <HAL_DMA_IRQHandler+0xcd0>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d018      	beq.n	80053d8 <HAL_DMA_IRQHandler+0xc60>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a28      	ldr	r2, [pc, #160]	; (800544c <HAL_DMA_IRQHandler+0xcd4>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d013      	beq.n	80053d8 <HAL_DMA_IRQHandler+0xc60>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a26      	ldr	r2, [pc, #152]	; (8005450 <HAL_DMA_IRQHandler+0xcd8>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00e      	beq.n	80053d8 <HAL_DMA_IRQHandler+0xc60>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a25      	ldr	r2, [pc, #148]	; (8005454 <HAL_DMA_IRQHandler+0xcdc>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d009      	beq.n	80053d8 <HAL_DMA_IRQHandler+0xc60>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a23      	ldr	r2, [pc, #140]	; (8005458 <HAL_DMA_IRQHandler+0xce0>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d004      	beq.n	80053d8 <HAL_DMA_IRQHandler+0xc60>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a22      	ldr	r2, [pc, #136]	; (800545c <HAL_DMA_IRQHandler+0xce4>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d108      	bne.n	80053ea <HAL_DMA_IRQHandler+0xc72>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0214 	bic.w	r2, r2, #20
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	e007      	b.n	80053fa <HAL_DMA_IRQHandler+0xc82>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 020a 	bic.w	r2, r2, #10
 80053f8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540e:	2b00      	cmp	r3, #0
 8005410:	f000 80b8 	beq.w	8005584 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800541c:	e0b2      	b.n	8005584 <HAL_DMA_IRQHandler+0xe0c>
 800541e:	bf00      	nop
 8005420:	40020010 	.word	0x40020010
 8005424:	40020028 	.word	0x40020028
 8005428:	40020040 	.word	0x40020040
 800542c:	40020058 	.word	0x40020058
 8005430:	40020070 	.word	0x40020070
 8005434:	40020088 	.word	0x40020088
 8005438:	400200a0 	.word	0x400200a0
 800543c:	400200b8 	.word	0x400200b8
 8005440:	40020410 	.word	0x40020410
 8005444:	40020428 	.word	0x40020428
 8005448:	40020440 	.word	0x40020440
 800544c:	40020458 	.word	0x40020458
 8005450:	40020470 	.word	0x40020470
 8005454:	40020488 	.word	0x40020488
 8005458:	400204a0 	.word	0x400204a0
 800545c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005464:	f003 031f 	and.w	r3, r3, #31
 8005468:	2208      	movs	r2, #8
 800546a:	409a      	lsls	r2, r3
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	4013      	ands	r3, r2
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 8088 	beq.w	8005586 <HAL_DMA_IRQHandler+0xe0e>
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 8082 	beq.w	8005586 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a41      	ldr	r2, [pc, #260]	; (800558c <HAL_DMA_IRQHandler+0xe14>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d04a      	beq.n	8005522 <HAL_DMA_IRQHandler+0xdaa>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a3f      	ldr	r2, [pc, #252]	; (8005590 <HAL_DMA_IRQHandler+0xe18>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d045      	beq.n	8005522 <HAL_DMA_IRQHandler+0xdaa>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a3e      	ldr	r2, [pc, #248]	; (8005594 <HAL_DMA_IRQHandler+0xe1c>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d040      	beq.n	8005522 <HAL_DMA_IRQHandler+0xdaa>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a3c      	ldr	r2, [pc, #240]	; (8005598 <HAL_DMA_IRQHandler+0xe20>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d03b      	beq.n	8005522 <HAL_DMA_IRQHandler+0xdaa>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a3b      	ldr	r2, [pc, #236]	; (800559c <HAL_DMA_IRQHandler+0xe24>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d036      	beq.n	8005522 <HAL_DMA_IRQHandler+0xdaa>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a39      	ldr	r2, [pc, #228]	; (80055a0 <HAL_DMA_IRQHandler+0xe28>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d031      	beq.n	8005522 <HAL_DMA_IRQHandler+0xdaa>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a38      	ldr	r2, [pc, #224]	; (80055a4 <HAL_DMA_IRQHandler+0xe2c>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d02c      	beq.n	8005522 <HAL_DMA_IRQHandler+0xdaa>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a36      	ldr	r2, [pc, #216]	; (80055a8 <HAL_DMA_IRQHandler+0xe30>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d027      	beq.n	8005522 <HAL_DMA_IRQHandler+0xdaa>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a35      	ldr	r2, [pc, #212]	; (80055ac <HAL_DMA_IRQHandler+0xe34>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d022      	beq.n	8005522 <HAL_DMA_IRQHandler+0xdaa>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a33      	ldr	r2, [pc, #204]	; (80055b0 <HAL_DMA_IRQHandler+0xe38>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d01d      	beq.n	8005522 <HAL_DMA_IRQHandler+0xdaa>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a32      	ldr	r2, [pc, #200]	; (80055b4 <HAL_DMA_IRQHandler+0xe3c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d018      	beq.n	8005522 <HAL_DMA_IRQHandler+0xdaa>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a30      	ldr	r2, [pc, #192]	; (80055b8 <HAL_DMA_IRQHandler+0xe40>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d013      	beq.n	8005522 <HAL_DMA_IRQHandler+0xdaa>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a2f      	ldr	r2, [pc, #188]	; (80055bc <HAL_DMA_IRQHandler+0xe44>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d00e      	beq.n	8005522 <HAL_DMA_IRQHandler+0xdaa>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a2d      	ldr	r2, [pc, #180]	; (80055c0 <HAL_DMA_IRQHandler+0xe48>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d009      	beq.n	8005522 <HAL_DMA_IRQHandler+0xdaa>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a2c      	ldr	r2, [pc, #176]	; (80055c4 <HAL_DMA_IRQHandler+0xe4c>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d004      	beq.n	8005522 <HAL_DMA_IRQHandler+0xdaa>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a2a      	ldr	r2, [pc, #168]	; (80055c8 <HAL_DMA_IRQHandler+0xe50>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d108      	bne.n	8005534 <HAL_DMA_IRQHandler+0xdbc>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 021c 	bic.w	r2, r2, #28
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	e007      	b.n	8005544 <HAL_DMA_IRQHandler+0xdcc>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 020e 	bic.w	r2, r2, #14
 8005542:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005548:	f003 031f 	and.w	r3, r3, #31
 800554c:	2201      	movs	r2, #1
 800554e:	409a      	lsls	r2, r3
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800556e:	2b00      	cmp	r3, #0
 8005570:	d009      	beq.n	8005586 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	4798      	blx	r3
 800557a:	e004      	b.n	8005586 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800557c:	bf00      	nop
 800557e:	e002      	b.n	8005586 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005580:	bf00      	nop
 8005582:	e000      	b.n	8005586 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005584:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005586:	3728      	adds	r7, #40	; 0x28
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	40020010 	.word	0x40020010
 8005590:	40020028 	.word	0x40020028
 8005594:	40020040 	.word	0x40020040
 8005598:	40020058 	.word	0x40020058
 800559c:	40020070 	.word	0x40020070
 80055a0:	40020088 	.word	0x40020088
 80055a4:	400200a0 	.word	0x400200a0
 80055a8:	400200b8 	.word	0x400200b8
 80055ac:	40020410 	.word	0x40020410
 80055b0:	40020428 	.word	0x40020428
 80055b4:	40020440 	.word	0x40020440
 80055b8:	40020458 	.word	0x40020458
 80055bc:	40020470 	.word	0x40020470
 80055c0:	40020488 	.word	0x40020488
 80055c4:	400204a0 	.word	0x400204a0
 80055c8:	400204b8 	.word	0x400204b8

080055cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a42      	ldr	r2, [pc, #264]	; (80056e4 <DMA_CalcBaseAndBitshift+0x118>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d04a      	beq.n	8005674 <DMA_CalcBaseAndBitshift+0xa8>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a41      	ldr	r2, [pc, #260]	; (80056e8 <DMA_CalcBaseAndBitshift+0x11c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d045      	beq.n	8005674 <DMA_CalcBaseAndBitshift+0xa8>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a3f      	ldr	r2, [pc, #252]	; (80056ec <DMA_CalcBaseAndBitshift+0x120>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d040      	beq.n	8005674 <DMA_CalcBaseAndBitshift+0xa8>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a3e      	ldr	r2, [pc, #248]	; (80056f0 <DMA_CalcBaseAndBitshift+0x124>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d03b      	beq.n	8005674 <DMA_CalcBaseAndBitshift+0xa8>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a3c      	ldr	r2, [pc, #240]	; (80056f4 <DMA_CalcBaseAndBitshift+0x128>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d036      	beq.n	8005674 <DMA_CalcBaseAndBitshift+0xa8>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a3b      	ldr	r2, [pc, #236]	; (80056f8 <DMA_CalcBaseAndBitshift+0x12c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d031      	beq.n	8005674 <DMA_CalcBaseAndBitshift+0xa8>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a39      	ldr	r2, [pc, #228]	; (80056fc <DMA_CalcBaseAndBitshift+0x130>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d02c      	beq.n	8005674 <DMA_CalcBaseAndBitshift+0xa8>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a38      	ldr	r2, [pc, #224]	; (8005700 <DMA_CalcBaseAndBitshift+0x134>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d027      	beq.n	8005674 <DMA_CalcBaseAndBitshift+0xa8>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a36      	ldr	r2, [pc, #216]	; (8005704 <DMA_CalcBaseAndBitshift+0x138>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d022      	beq.n	8005674 <DMA_CalcBaseAndBitshift+0xa8>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a35      	ldr	r2, [pc, #212]	; (8005708 <DMA_CalcBaseAndBitshift+0x13c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d01d      	beq.n	8005674 <DMA_CalcBaseAndBitshift+0xa8>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a33      	ldr	r2, [pc, #204]	; (800570c <DMA_CalcBaseAndBitshift+0x140>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d018      	beq.n	8005674 <DMA_CalcBaseAndBitshift+0xa8>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a32      	ldr	r2, [pc, #200]	; (8005710 <DMA_CalcBaseAndBitshift+0x144>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d013      	beq.n	8005674 <DMA_CalcBaseAndBitshift+0xa8>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a30      	ldr	r2, [pc, #192]	; (8005714 <DMA_CalcBaseAndBitshift+0x148>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d00e      	beq.n	8005674 <DMA_CalcBaseAndBitshift+0xa8>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a2f      	ldr	r2, [pc, #188]	; (8005718 <DMA_CalcBaseAndBitshift+0x14c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d009      	beq.n	8005674 <DMA_CalcBaseAndBitshift+0xa8>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a2d      	ldr	r2, [pc, #180]	; (800571c <DMA_CalcBaseAndBitshift+0x150>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d004      	beq.n	8005674 <DMA_CalcBaseAndBitshift+0xa8>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a2c      	ldr	r2, [pc, #176]	; (8005720 <DMA_CalcBaseAndBitshift+0x154>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d101      	bne.n	8005678 <DMA_CalcBaseAndBitshift+0xac>
 8005674:	2301      	movs	r3, #1
 8005676:	e000      	b.n	800567a <DMA_CalcBaseAndBitshift+0xae>
 8005678:	2300      	movs	r3, #0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d024      	beq.n	80056c8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	b2db      	uxtb	r3, r3
 8005684:	3b10      	subs	r3, #16
 8005686:	4a27      	ldr	r2, [pc, #156]	; (8005724 <DMA_CalcBaseAndBitshift+0x158>)
 8005688:	fba2 2303 	umull	r2, r3, r2, r3
 800568c:	091b      	lsrs	r3, r3, #4
 800568e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f003 0307 	and.w	r3, r3, #7
 8005696:	4a24      	ldr	r2, [pc, #144]	; (8005728 <DMA_CalcBaseAndBitshift+0x15c>)
 8005698:	5cd3      	ldrb	r3, [r2, r3]
 800569a:	461a      	mov	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2b03      	cmp	r3, #3
 80056a4:	d908      	bls.n	80056b8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	461a      	mov	r2, r3
 80056ac:	4b1f      	ldr	r3, [pc, #124]	; (800572c <DMA_CalcBaseAndBitshift+0x160>)
 80056ae:	4013      	ands	r3, r2
 80056b0:	1d1a      	adds	r2, r3, #4
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	659a      	str	r2, [r3, #88]	; 0x58
 80056b6:	e00d      	b.n	80056d4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	461a      	mov	r2, r3
 80056be:	4b1b      	ldr	r3, [pc, #108]	; (800572c <DMA_CalcBaseAndBitshift+0x160>)
 80056c0:	4013      	ands	r3, r2
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	6593      	str	r3, [r2, #88]	; 0x58
 80056c6:	e005      	b.n	80056d4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	40020010 	.word	0x40020010
 80056e8:	40020028 	.word	0x40020028
 80056ec:	40020040 	.word	0x40020040
 80056f0:	40020058 	.word	0x40020058
 80056f4:	40020070 	.word	0x40020070
 80056f8:	40020088 	.word	0x40020088
 80056fc:	400200a0 	.word	0x400200a0
 8005700:	400200b8 	.word	0x400200b8
 8005704:	40020410 	.word	0x40020410
 8005708:	40020428 	.word	0x40020428
 800570c:	40020440 	.word	0x40020440
 8005710:	40020458 	.word	0x40020458
 8005714:	40020470 	.word	0x40020470
 8005718:	40020488 	.word	0x40020488
 800571c:	400204a0 	.word	0x400204a0
 8005720:	400204b8 	.word	0x400204b8
 8005724:	aaaaaaab 	.word	0xaaaaaaab
 8005728:	0800ff68 	.word	0x0800ff68
 800572c:	fffffc00 	.word	0xfffffc00

08005730 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005738:	2300      	movs	r3, #0
 800573a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d120      	bne.n	8005786 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005748:	2b03      	cmp	r3, #3
 800574a:	d858      	bhi.n	80057fe <DMA_CheckFifoParam+0xce>
 800574c:	a201      	add	r2, pc, #4	; (adr r2, 8005754 <DMA_CheckFifoParam+0x24>)
 800574e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005752:	bf00      	nop
 8005754:	08005765 	.word	0x08005765
 8005758:	08005777 	.word	0x08005777
 800575c:	08005765 	.word	0x08005765
 8005760:	080057ff 	.word	0x080057ff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005768:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d048      	beq.n	8005802 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005774:	e045      	b.n	8005802 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800577e:	d142      	bne.n	8005806 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005784:	e03f      	b.n	8005806 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800578e:	d123      	bne.n	80057d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005794:	2b03      	cmp	r3, #3
 8005796:	d838      	bhi.n	800580a <DMA_CheckFifoParam+0xda>
 8005798:	a201      	add	r2, pc, #4	; (adr r2, 80057a0 <DMA_CheckFifoParam+0x70>)
 800579a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579e:	bf00      	nop
 80057a0:	080057b1 	.word	0x080057b1
 80057a4:	080057b7 	.word	0x080057b7
 80057a8:	080057b1 	.word	0x080057b1
 80057ac:	080057c9 	.word	0x080057c9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	73fb      	strb	r3, [r7, #15]
        break;
 80057b4:	e030      	b.n	8005818 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d025      	beq.n	800580e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057c6:	e022      	b.n	800580e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057d0:	d11f      	bne.n	8005812 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057d6:	e01c      	b.n	8005812 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d902      	bls.n	80057e6 <DMA_CheckFifoParam+0xb6>
 80057e0:	2b03      	cmp	r3, #3
 80057e2:	d003      	beq.n	80057ec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80057e4:	e018      	b.n	8005818 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	73fb      	strb	r3, [r7, #15]
        break;
 80057ea:	e015      	b.n	8005818 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00e      	beq.n	8005816 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	73fb      	strb	r3, [r7, #15]
    break;
 80057fc:	e00b      	b.n	8005816 <DMA_CheckFifoParam+0xe6>
        break;
 80057fe:	bf00      	nop
 8005800:	e00a      	b.n	8005818 <DMA_CheckFifoParam+0xe8>
        break;
 8005802:	bf00      	nop
 8005804:	e008      	b.n	8005818 <DMA_CheckFifoParam+0xe8>
        break;
 8005806:	bf00      	nop
 8005808:	e006      	b.n	8005818 <DMA_CheckFifoParam+0xe8>
        break;
 800580a:	bf00      	nop
 800580c:	e004      	b.n	8005818 <DMA_CheckFifoParam+0xe8>
        break;
 800580e:	bf00      	nop
 8005810:	e002      	b.n	8005818 <DMA_CheckFifoParam+0xe8>
        break;
 8005812:	bf00      	nop
 8005814:	e000      	b.n	8005818 <DMA_CheckFifoParam+0xe8>
    break;
 8005816:	bf00      	nop
    }
  }

  return status;
 8005818:	7bfb      	ldrb	r3, [r7, #15]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop

08005828 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a38      	ldr	r2, [pc, #224]	; (800591c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d022      	beq.n	8005886 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a36      	ldr	r2, [pc, #216]	; (8005920 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d01d      	beq.n	8005886 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a35      	ldr	r2, [pc, #212]	; (8005924 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d018      	beq.n	8005886 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a33      	ldr	r2, [pc, #204]	; (8005928 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d013      	beq.n	8005886 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a32      	ldr	r2, [pc, #200]	; (800592c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d00e      	beq.n	8005886 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a30      	ldr	r2, [pc, #192]	; (8005930 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d009      	beq.n	8005886 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a2f      	ldr	r2, [pc, #188]	; (8005934 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d004      	beq.n	8005886 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a2d      	ldr	r2, [pc, #180]	; (8005938 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d101      	bne.n	800588a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005886:	2301      	movs	r3, #1
 8005888:	e000      	b.n	800588c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800588a:	2300      	movs	r3, #0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d01a      	beq.n	80058c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	b2db      	uxtb	r3, r3
 8005896:	3b08      	subs	r3, #8
 8005898:	4a28      	ldr	r2, [pc, #160]	; (800593c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800589a:	fba2 2303 	umull	r2, r3, r2, r3
 800589e:	091b      	lsrs	r3, r3, #4
 80058a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	4b26      	ldr	r3, [pc, #152]	; (8005940 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80058a6:	4413      	add	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	461a      	mov	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a24      	ldr	r2, [pc, #144]	; (8005944 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80058b4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f003 031f 	and.w	r3, r3, #31
 80058bc:	2201      	movs	r2, #1
 80058be:	409a      	lsls	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80058c4:	e024      	b.n	8005910 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	3b10      	subs	r3, #16
 80058ce:	4a1e      	ldr	r2, [pc, #120]	; (8005948 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80058d0:	fba2 2303 	umull	r2, r3, r2, r3
 80058d4:	091b      	lsrs	r3, r3, #4
 80058d6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	4a1c      	ldr	r2, [pc, #112]	; (800594c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d806      	bhi.n	80058ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	4a1b      	ldr	r2, [pc, #108]	; (8005950 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d902      	bls.n	80058ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	3308      	adds	r3, #8
 80058ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4b18      	ldr	r3, [pc, #96]	; (8005954 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80058f2:	4413      	add	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	461a      	mov	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a16      	ldr	r2, [pc, #88]	; (8005958 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005900:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f003 031f 	and.w	r3, r3, #31
 8005908:	2201      	movs	r2, #1
 800590a:	409a      	lsls	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005910:	bf00      	nop
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	58025408 	.word	0x58025408
 8005920:	5802541c 	.word	0x5802541c
 8005924:	58025430 	.word	0x58025430
 8005928:	58025444 	.word	0x58025444
 800592c:	58025458 	.word	0x58025458
 8005930:	5802546c 	.word	0x5802546c
 8005934:	58025480 	.word	0x58025480
 8005938:	58025494 	.word	0x58025494
 800593c:	cccccccd 	.word	0xcccccccd
 8005940:	16009600 	.word	0x16009600
 8005944:	58025880 	.word	0x58025880
 8005948:	aaaaaaab 	.word	0xaaaaaaab
 800594c:	400204b8 	.word	0x400204b8
 8005950:	4002040f 	.word	0x4002040f
 8005954:	10008200 	.word	0x10008200
 8005958:	40020880 	.word	0x40020880

0800595c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	b2db      	uxtb	r3, r3
 800596a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d04a      	beq.n	8005a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2b08      	cmp	r3, #8
 8005976:	d847      	bhi.n	8005a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a25      	ldr	r2, [pc, #148]	; (8005a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d022      	beq.n	80059c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a24      	ldr	r2, [pc, #144]	; (8005a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d01d      	beq.n	80059c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a22      	ldr	r2, [pc, #136]	; (8005a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d018      	beq.n	80059c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a21      	ldr	r2, [pc, #132]	; (8005a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d013      	beq.n	80059c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a1f      	ldr	r2, [pc, #124]	; (8005a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d00e      	beq.n	80059c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a1e      	ldr	r2, [pc, #120]	; (8005a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d009      	beq.n	80059c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a1c      	ldr	r2, [pc, #112]	; (8005a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d004      	beq.n	80059c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a1b      	ldr	r2, [pc, #108]	; (8005a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d101      	bne.n	80059cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80059c8:	2301      	movs	r3, #1
 80059ca:	e000      	b.n	80059ce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80059cc:	2300      	movs	r3, #0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	4b17      	ldr	r3, [pc, #92]	; (8005a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80059d6:	4413      	add	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	461a      	mov	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a15      	ldr	r2, [pc, #84]	; (8005a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80059e4:	671a      	str	r2, [r3, #112]	; 0x70
 80059e6:	e009      	b.n	80059fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	4b14      	ldr	r3, [pc, #80]	; (8005a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80059ec:	4413      	add	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	461a      	mov	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a11      	ldr	r2, [pc, #68]	; (8005a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80059fa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	3b01      	subs	r3, #1
 8005a00:	2201      	movs	r2, #1
 8005a02:	409a      	lsls	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005a08:	bf00      	nop
 8005a0a:	3714      	adds	r7, #20
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	58025408 	.word	0x58025408
 8005a18:	5802541c 	.word	0x5802541c
 8005a1c:	58025430 	.word	0x58025430
 8005a20:	58025444 	.word	0x58025444
 8005a24:	58025458 	.word	0x58025458
 8005a28:	5802546c 	.word	0x5802546c
 8005a2c:	58025480 	.word	0x58025480
 8005a30:	58025494 	.word	0x58025494
 8005a34:	1600963f 	.word	0x1600963f
 8005a38:	58025940 	.word	0x58025940
 8005a3c:	1000823f 	.word	0x1000823f
 8005a40:	40020940 	.word	0x40020940

08005a44 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b098      	sub	sp, #96	; 0x60
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005a4c:	4a84      	ldr	r2, [pc, #528]	; (8005c60 <HAL_FDCAN_Init+0x21c>)
 8005a4e:	f107 030c 	add.w	r3, r7, #12
 8005a52:	4611      	mov	r1, r2
 8005a54:	224c      	movs	r2, #76	; 0x4c
 8005a56:	4618      	mov	r0, r3
 8005a58:	f00a f92c 	bl	800fcb4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e1ca      	b.n	8005dfc <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a7e      	ldr	r2, [pc, #504]	; (8005c64 <HAL_FDCAN_Init+0x220>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d106      	bne.n	8005a7e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005a78:	461a      	mov	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d106      	bne.n	8005a98 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7fb fefe 	bl	8001894 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	699a      	ldr	r2, [r3, #24]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f022 0210 	bic.w	r2, r2, #16
 8005aa6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005aa8:	f7fc fa4a 	bl	8001f40 <HAL_GetTick>
 8005aac:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005aae:	e014      	b.n	8005ada <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005ab0:	f7fc fa46 	bl	8001f40 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	2b0a      	cmp	r3, #10
 8005abc:	d90d      	bls.n	8005ada <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ac4:	f043 0201 	orr.w	r2, r3, #1
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2203      	movs	r2, #3
 8005ad2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e190      	b.n	8005dfc <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	f003 0308 	and.w	r3, r3, #8
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d0e3      	beq.n	8005ab0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	699a      	ldr	r2, [r3, #24]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0201 	orr.w	r2, r2, #1
 8005af6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005af8:	f7fc fa22 	bl	8001f40 <HAL_GetTick>
 8005afc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005afe:	e014      	b.n	8005b2a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005b00:	f7fc fa1e 	bl	8001f40 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b0a      	cmp	r3, #10
 8005b0c:	d90d      	bls.n	8005b2a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b14:	f043 0201 	orr.w	r2, r3, #1
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2203      	movs	r2, #3
 8005b22:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e168      	b.n	8005dfc <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d0e3      	beq.n	8005b00 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	699a      	ldr	r2, [r3, #24]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0202 	orr.w	r2, r2, #2
 8005b46:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	7c1b      	ldrb	r3, [r3, #16]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d108      	bne.n	8005b62 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	699a      	ldr	r2, [r3, #24]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b5e:	619a      	str	r2, [r3, #24]
 8005b60:	e007      	b.n	8005b72 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	699a      	ldr	r2, [r3, #24]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b70:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	7c5b      	ldrb	r3, [r3, #17]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d108      	bne.n	8005b8c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	699a      	ldr	r2, [r3, #24]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b88:	619a      	str	r2, [r3, #24]
 8005b8a:	e007      	b.n	8005b9c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	699a      	ldr	r2, [r3, #24]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b9a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	7c9b      	ldrb	r3, [r3, #18]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d108      	bne.n	8005bb6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	699a      	ldr	r2, [r3, #24]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bb2:	619a      	str	r2, [r3, #24]
 8005bb4:	e007      	b.n	8005bc6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	699a      	ldr	r2, [r3, #24]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bc4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	699a      	ldr	r2, [r3, #24]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005bea:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	691a      	ldr	r2, [r3, #16]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0210 	bic.w	r2, r2, #16
 8005bfa:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d108      	bne.n	8005c16 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699a      	ldr	r2, [r3, #24]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0204 	orr.w	r2, r2, #4
 8005c12:	619a      	str	r2, [r3, #24]
 8005c14:	e030      	b.n	8005c78 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d02c      	beq.n	8005c78 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d020      	beq.n	8005c68 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	699a      	ldr	r2, [r3, #24]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c34:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	691a      	ldr	r2, [r3, #16]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f042 0210 	orr.w	r2, r2, #16
 8005c44:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	2b03      	cmp	r3, #3
 8005c4c:	d114      	bne.n	8005c78 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	699a      	ldr	r2, [r3, #24]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f042 0220 	orr.w	r2, r2, #32
 8005c5c:	619a      	str	r2, [r3, #24]
 8005c5e:	e00b      	b.n	8005c78 <HAL_FDCAN_Init+0x234>
 8005c60:	0800fdb0 	.word	0x0800fdb0
 8005c64:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	699a      	ldr	r2, [r3, #24]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0220 	orr.w	r2, r2, #32
 8005c76:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	69db      	ldr	r3, [r3, #28]
 8005c84:	3b01      	subs	r3, #1
 8005c86:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c88:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005c90:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005ca0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005ca2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cac:	d115      	bne.n	8005cda <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005cbc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005cc6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005cd6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005cd8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00a      	beq.n	8005cf8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d00:	4413      	add	r3, r2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d012      	beq.n	8005d2c <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005d0e:	f023 0107 	bic.w	r1, r3, #7
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d012      	beq.n	8005d5a <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005d3c:	f023 0107 	bic.w	r1, r3, #7
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d013      	beq.n	8005d8a <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005d6a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005d78:	4413      	add	r3, r2
 8005d7a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005d7e:	011a      	lsls	r2, r3, #4
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d013      	beq.n	8005dba <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005d9a:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005da8:	4413      	add	r3, r2
 8005daa:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005dae:	021a      	lsls	r2, r3, #8
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a11      	ldr	r2, [pc, #68]	; (8005e04 <HAL_FDCAN_Init+0x3c0>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d107      	bne.n	8005dd4 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	689a      	ldr	r2, [r3, #8]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f022 0203 	bic.w	r2, r2, #3
 8005dd2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 fe03 	bl	80069f8 <FDCAN_CalcultateRamBlockAddresses>
 8005df2:	4603      	mov	r3, r0
 8005df4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005df8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3760      	adds	r7, #96	; 0x60
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	4000a000 	.word	0x4000a000

08005e08 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b087      	sub	sp, #28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005e18:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005e1a:	7bfb      	ldrb	r3, [r7, #15]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d002      	beq.n	8005e26 <HAL_FDCAN_ConfigFilter+0x1e>
 8005e20:	7bfb      	ldrb	r3, [r7, #15]
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d157      	bne.n	8005ed6 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d12b      	bne.n	8005e86 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	2b07      	cmp	r3, #7
 8005e34:	d10d      	bne.n	8005e52 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8005e42:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005e48:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8005e4a:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8005e4e:	617b      	str	r3, [r7, #20]
 8005e50:	e00e      	b.n	8005e70 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005e5e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8005e66:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	4413      	add	r3, r2
 8005e7c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	601a      	str	r2, [r3, #0]
 8005e84:	e025      	b.n	8005ed2 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	075a      	lsls	r2, r3, #29
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	2b07      	cmp	r3, #7
 8005e9a:	d103      	bne.n	8005ea4 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	613b      	str	r3, [r7, #16]
 8005ea2:	e006      	b.n	8005eb2 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	079a      	lsls	r2, r3, #30
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	4413      	add	r3, r2
 8005ebe:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	3304      	adds	r3, #4
 8005eca:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	e008      	b.n	8005ee8 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005edc:	f043 0202 	orr.w	r2, r3, #2
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
  }
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	371c      	adds	r7, #28
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d111      	bne.n	8005f2c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	699a      	ldr	r2, [r3, #24]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 0201 	bic.w	r2, r2, #1
 8005f1e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	e008      	b.n	8005f3e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f32:	f043 0204 	orr.w	r2, r3, #4
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
  }
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b086      	sub	sp, #24
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	60f8      	str	r0, [r7, #12]
 8005f52:	60b9      	str	r1, [r7, #8]
 8005f54:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d141      	bne.n	8005fe6 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005f6a:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d109      	bne.n	8005f86 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f78:	f043 0220 	orr.w	r2, r3, #32
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e038      	b.n	8005ff8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d009      	beq.n	8005faa <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f9c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e026      	b.n	8005ff8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005fb2:	0c1b      	lsrs	r3, r3, #16
 8005fb4:	f003 031f 	and.w	r3, r3, #31
 8005fb8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	68b9      	ldr	r1, [r7, #8]
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f000 fe9f 	bl	8006d04 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2101      	movs	r1, #1
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	fa01 f202 	lsl.w	r2, r1, r2
 8005fd2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	409a      	lsls	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	e008      	b.n	8005ff8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fec:	f043 0208 	orr.w	r2, r3, #8
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
  }
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3718      	adds	r7, #24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006000:	b480      	push	{r7}
 8006002:	b08b      	sub	sp, #44	; 0x2c
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
 800600c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800600e:	2300      	movs	r3, #0
 8006010:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006018:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800601a:	7efb      	ldrb	r3, [r7, #27]
 800601c:	2b02      	cmp	r3, #2
 800601e:	f040 814b 	bne.w	80062b8 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2b40      	cmp	r3, #64	; 0x40
 8006026:	d14d      	bne.n	80060c4 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006030:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d109      	bne.n	800604c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800603e:	f043 0220 	orr.w	r2, r3, #32
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e13e      	b.n	80062ca <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006058:	2b00      	cmp	r3, #0
 800605a:	d109      	bne.n	8006070 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006062:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e12c      	b.n	80062ca <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006078:	0e1b      	lsrs	r3, r3, #24
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b01      	cmp	r3, #1
 8006080:	d10b      	bne.n	800609a <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800608a:	0fdb      	lsrs	r3, r3, #31
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006094:	d101      	bne.n	800609a <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006096:	2301      	movs	r3, #1
 8006098:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80060a2:	0a1b      	lsrs	r3, r3, #8
 80060a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060a8:	69fa      	ldr	r2, [r7, #28]
 80060aa:	4413      	add	r3, r2
 80060ac:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b6:	69f9      	ldr	r1, [r7, #28]
 80060b8:	fb01 f303 	mul.w	r3, r1, r3
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	627b      	str	r3, [r7, #36]	; 0x24
 80060c2:	e069      	b.n	8006198 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2b41      	cmp	r3, #65	; 0x41
 80060c8:	d14d      	bne.n	8006166 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d109      	bne.n	80060ee <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060e0:	f043 0220 	orr.w	r2, r3, #32
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e0ed      	b.n	80062ca <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80060f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d109      	bne.n	8006112 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006104:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e0db      	b.n	80062ca <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800611a:	0e1b      	lsrs	r3, r3, #24
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	2b01      	cmp	r3, #1
 8006122:	d10b      	bne.n	800613c <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800612c:	0fdb      	lsrs	r3, r3, #31
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006136:	d101      	bne.n	800613c <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006138:	2301      	movs	r3, #1
 800613a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006144:	0a1b      	lsrs	r3, r3, #8
 8006146:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800614a:	69fa      	ldr	r2, [r7, #28]
 800614c:	4413      	add	r3, r2
 800614e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006158:	69f9      	ldr	r1, [r7, #28]
 800615a:	fb01 f303 	mul.w	r3, r1, r3
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	627b      	str	r3, [r7, #36]	; 0x24
 8006164:	e018      	b.n	8006198 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	429a      	cmp	r2, r3
 800616e:	d309      	bcc.n	8006184 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006176:	f043 0220 	orr.w	r2, r3, #32
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e0a2      	b.n	80062ca <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800618c:	68b9      	ldr	r1, [r7, #8]
 800618e:	fb01 f303 	mul.w	r3, r1, r3
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4413      	add	r3, r2
 8006196:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d107      	bne.n	80061bc <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80061ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	0c9b      	lsrs	r3, r3, #18
 80061b2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	601a      	str	r2, [r3, #0]
 80061ba:	e005      	b.n	80061c8 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	3304      	adds	r3, #4
 80061e4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80061e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	0e1b      	lsrs	r3, r3, #24
 800621a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	0fda      	lsrs	r2, r3, #31
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	3304      	adds	r3, #4
 8006230:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8006236:	2300      	movs	r3, #0
 8006238:	623b      	str	r3, [r7, #32]
 800623a:	e00a      	b.n	8006252 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	441a      	add	r2, r3
 8006242:	6839      	ldr	r1, [r7, #0]
 8006244:	6a3b      	ldr	r3, [r7, #32]
 8006246:	440b      	add	r3, r1
 8006248:	7812      	ldrb	r2, [r2, #0]
 800624a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	3301      	adds	r3, #1
 8006250:	623b      	str	r3, [r7, #32]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	0c1b      	lsrs	r3, r3, #16
 8006258:	4a1f      	ldr	r2, [pc, #124]	; (80062d8 <HAL_FDCAN_GetRxMessage+0x2d8>)
 800625a:	5cd3      	ldrb	r3, [r2, r3]
 800625c:	461a      	mov	r2, r3
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	4293      	cmp	r3, r2
 8006262:	d3eb      	bcc.n	800623c <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2b40      	cmp	r3, #64	; 0x40
 8006268:	d105      	bne.n	8006276 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	69fa      	ldr	r2, [r7, #28]
 8006270:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8006274:	e01e      	b.n	80062b4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	2b41      	cmp	r3, #65	; 0x41
 800627a:	d105      	bne.n	8006288 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	69fa      	ldr	r2, [r7, #28]
 8006282:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8006286:	e015      	b.n	80062b4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	2b1f      	cmp	r3, #31
 800628c:	d808      	bhi.n	80062a0 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2101      	movs	r1, #1
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	fa01 f202 	lsl.w	r2, r1, r2
 800629a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800629e:	e009      	b.n	80062b4 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	f003 021f 	and.w	r2, r3, #31
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2101      	movs	r1, #1
 80062ac:	fa01 f202 	lsl.w	r2, r1, r2
 80062b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80062b4:	2300      	movs	r3, #0
 80062b6:	e008      	b.n	80062ca <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062be:	f043 0208 	orr.w	r2, r3, #8
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
  }
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	372c      	adds	r7, #44	; 0x2c
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	0800ff70 	.word	0x0800ff70

080062dc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80062dc:	b480      	push	{r7}
 80062de:	b087      	sub	sp, #28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80062ee:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80062f0:	7dfb      	ldrb	r3, [r7, #23]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d002      	beq.n	80062fc <HAL_FDCAN_ActivateNotification+0x20>
 80062f6:	7dfb      	ldrb	r3, [r7, #23]
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d155      	bne.n	80063a8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	4013      	ands	r3, r2
 8006306:	2b00      	cmp	r3, #0
 8006308:	d108      	bne.n	800631c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f042 0201 	orr.w	r2, r2, #1
 8006318:	65da      	str	r2, [r3, #92]	; 0x5c
 800631a:	e014      	b.n	8006346 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	4013      	ands	r3, r2
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	429a      	cmp	r2, r3
 800632a:	d108      	bne.n	800633e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f042 0202 	orr.w	r2, r2, #2
 800633a:	65da      	str	r2, [r3, #92]	; 0x5c
 800633c:	e003      	b.n	8006346 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2203      	movs	r2, #3
 8006344:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800634c:	2b00      	cmp	r3, #0
 800634e:	d009      	beq.n	8006364 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	430a      	orrs	r2, r1
 8006360:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800636a:	2b00      	cmp	r3, #0
 800636c:	d009      	beq.n	8006382 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	430a      	orrs	r2, r1
 800637e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	4b0f      	ldr	r3, [pc, #60]	; (80063c8 <HAL_FDCAN_ActivateNotification+0xec>)
 800638c:	4013      	ands	r3, r2
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	6812      	ldr	r2, [r2, #0]
 8006392:	430b      	orrs	r3, r1
 8006394:	6553      	str	r3, [r2, #84]	; 0x54
 8006396:	4b0d      	ldr	r3, [pc, #52]	; (80063cc <HAL_FDCAN_ActivateNotification+0xf0>)
 8006398:	695a      	ldr	r2, [r3, #20]
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	0f9b      	lsrs	r3, r3, #30
 800639e:	490b      	ldr	r1, [pc, #44]	; (80063cc <HAL_FDCAN_ActivateNotification+0xf0>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80063a4:	2300      	movs	r3, #0
 80063a6:	e008      	b.n	80063ba <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063ae:	f043 0202 	orr.w	r2, r3, #2
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
  }
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	371c      	adds	r7, #28
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	3fcfffff 	.word	0x3fcfffff
 80063cc:	4000a800 	.word	0x4000a800

080063d0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b092      	sub	sp, #72	; 0x48
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80063d8:	4b90      	ldr	r3, [pc, #576]	; (800661c <HAL_FDCAN_IRQHandler+0x24c>)
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	079b      	lsls	r3, r3, #30
 80063de:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80063e0:	4b8e      	ldr	r3, [pc, #568]	; (800661c <HAL_FDCAN_IRQHandler+0x24c>)
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	079b      	lsls	r3, r3, #30
 80063e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063e8:	4013      	ands	r3, r2
 80063ea:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80063f6:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006400:	4013      	ands	r3, r2
 8006402:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800640a:	f003 030f 	and.w	r3, r3, #15
 800640e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006416:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006418:	4013      	ands	r3, r2
 800641a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006422:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006426:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800642e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006430:	4013      	ands	r3, r2
 8006432:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800643a:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800643e:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006446:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006448:	4013      	ands	r3, r2
 800644a:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006452:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8006456:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800645e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006460:	4013      	ands	r3, r2
 8006462:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800646a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800646e:	2b00      	cmp	r3, #0
 8006470:	d011      	beq.n	8006496 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00a      	beq.n	8006496 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006488:	651a      	str	r2, [r3, #80]	; 0x50
 800648a:	4b64      	ldr	r3, [pc, #400]	; (800661c <HAL_FDCAN_IRQHandler+0x24c>)
 800648c:	2200      	movs	r2, #0
 800648e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 fa65 	bl	8006960 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800649c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d01e      	beq.n	80064e2 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d017      	beq.n	80064e2 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80064ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80064c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064c6:	4013      	ands	r3, r2
 80064c8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064d2:	651a      	str	r2, [r3, #80]	; 0x50
 80064d4:	4b51      	ldr	r3, [pc, #324]	; (800661c <HAL_FDCAN_IRQHandler+0x24c>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80064da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 fa16 	bl	800690e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80064e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00d      	beq.n	8006504 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80064ee:	4b4c      	ldr	r3, [pc, #304]	; (8006620 <HAL_FDCAN_IRQHandler+0x250>)
 80064f0:	400b      	ands	r3, r1
 80064f2:	6513      	str	r3, [r2, #80]	; 0x50
 80064f4:	4a49      	ldr	r2, [pc, #292]	; (800661c <HAL_FDCAN_IRQHandler+0x24c>)
 80064f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064f8:	0f9b      	lsrs	r3, r3, #30
 80064fa:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80064fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f9c4 	bl	800688c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00d      	beq.n	8006526 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006510:	4b43      	ldr	r3, [pc, #268]	; (8006620 <HAL_FDCAN_IRQHandler+0x250>)
 8006512:	400b      	ands	r3, r1
 8006514:	6513      	str	r3, [r2, #80]	; 0x50
 8006516:	4a41      	ldr	r2, [pc, #260]	; (800661c <HAL_FDCAN_IRQHandler+0x24c>)
 8006518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800651a:	0f9b      	lsrs	r3, r3, #30
 800651c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800651e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f9be 	bl	80068a2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8006526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00d      	beq.n	8006548 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006532:	4b3b      	ldr	r3, [pc, #236]	; (8006620 <HAL_FDCAN_IRQHandler+0x250>)
 8006534:	400b      	ands	r3, r1
 8006536:	6513      	str	r3, [r2, #80]	; 0x50
 8006538:	4a38      	ldr	r2, [pc, #224]	; (800661c <HAL_FDCAN_IRQHandler+0x24c>)
 800653a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800653c:	0f9b      	lsrs	r3, r3, #30
 800653e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006540:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f9b8 	bl	80068b8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00d      	beq.n	800656a <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006554:	4b32      	ldr	r3, [pc, #200]	; (8006620 <HAL_FDCAN_IRQHandler+0x250>)
 8006556:	400b      	ands	r3, r1
 8006558:	6513      	str	r3, [r2, #80]	; 0x50
 800655a:	4a30      	ldr	r2, [pc, #192]	; (800661c <HAL_FDCAN_IRQHandler+0x24c>)
 800655c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655e:	0f9b      	lsrs	r3, r3, #30
 8006560:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006562:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f9b2 	bl	80068ce <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006574:	2b00      	cmp	r3, #0
 8006576:	d011      	beq.n	800659c <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800657e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00a      	beq.n	800659c <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800658e:	651a      	str	r2, [r3, #80]	; 0x50
 8006590:	4b22      	ldr	r3, [pc, #136]	; (800661c <HAL_FDCAN_IRQHandler+0x24c>)
 8006592:	2200      	movs	r2, #0
 8006594:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f9a4 	bl	80068e4 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d01e      	beq.n	80065e8 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d017      	beq.n	80065e8 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80065c0:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065cc:	4013      	ands	r3, r2
 80065ce:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065d8:	651a      	str	r2, [r3, #80]	; 0x50
 80065da:	4b10      	ldr	r3, [pc, #64]	; (800661c <HAL_FDCAN_IRQHandler+0x24c>)
 80065dc:	2200      	movs	r2, #0
 80065de:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80065e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f988 	bl	80068f8 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d016      	beq.n	8006624 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00f      	beq.n	8006624 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800660c:	651a      	str	r2, [r3, #80]	; 0x50
 800660e:	4b03      	ldr	r3, [pc, #12]	; (800661c <HAL_FDCAN_IRQHandler+0x24c>)
 8006610:	2200      	movs	r2, #0
 8006612:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 f985 	bl	8006924 <HAL_FDCAN_RxBufferNewMessageCallback>
 800661a:	e003      	b.n	8006624 <HAL_FDCAN_IRQHandler+0x254>
 800661c:	4000a800 	.word	0x4000a800
 8006620:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800662a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d011      	beq.n	8006656 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00a      	beq.n	8006656 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006648:	651a      	str	r2, [r3, #80]	; 0x50
 800664a:	4b8d      	ldr	r3, [pc, #564]	; (8006880 <HAL_FDCAN_IRQHandler+0x4b0>)
 800664c:	2200      	movs	r2, #0
 800664e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f971 	bl	8006938 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800665c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d011      	beq.n	8006688 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800666a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00a      	beq.n	8006688 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800667a:	651a      	str	r2, [r3, #80]	; 0x50
 800667c:	4b80      	ldr	r3, [pc, #512]	; (8006880 <HAL_FDCAN_IRQHandler+0x4b0>)
 800667e:	2200      	movs	r2, #0
 8006680:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f962 	bl	800694c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800668e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d016      	beq.n	80066c4 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800669c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00f      	beq.n	80066c4 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80066ac:	651a      	str	r2, [r3, #80]	; 0x50
 80066ae:	4b74      	ldr	r3, [pc, #464]	; (8006880 <HAL_FDCAN_IRQHandler+0x4b0>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066ba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80066c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00d      	beq.n	80066e6 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066d0:	4b6c      	ldr	r3, [pc, #432]	; (8006884 <HAL_FDCAN_IRQHandler+0x4b4>)
 80066d2:	400b      	ands	r3, r1
 80066d4:	6513      	str	r3, [r2, #80]	; 0x50
 80066d6:	4a6a      	ldr	r2, [pc, #424]	; (8006880 <HAL_FDCAN_IRQHandler+0x4b0>)
 80066d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066da:	0f9b      	lsrs	r3, r3, #30
 80066dc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80066de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 f951 	bl	8006988 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80066e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d011      	beq.n	8006710 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80066f2:	4b64      	ldr	r3, [pc, #400]	; (8006884 <HAL_FDCAN_IRQHandler+0x4b4>)
 80066f4:	400b      	ands	r3, r1
 80066f6:	6513      	str	r3, [r2, #80]	; 0x50
 80066f8:	4a61      	ldr	r2, [pc, #388]	; (8006880 <HAL_FDCAN_IRQHandler+0x4b0>)
 80066fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066fc:	0f9b      	lsrs	r3, r3, #30
 80066fe:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006708:	431a      	orrs	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a5c      	ldr	r2, [pc, #368]	; (8006888 <HAL_FDCAN_IRQHandler+0x4b8>)
 8006716:	4293      	cmp	r3, r2
 8006718:	f040 80a6 	bne.w	8006868 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f003 0303 	and.w	r3, r3, #3
 8006726:	2b00      	cmp	r3, #0
 8006728:	f000 809e 	beq.w	8006868 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	f003 030f 	and.w	r3, r3, #15
 8006736:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006740:	4013      	ands	r3, r2
 8006742:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800674e:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006756:	6a3a      	ldr	r2, [r7, #32]
 8006758:	4013      	ands	r3, r2
 800675a:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006766:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676e:	69fa      	ldr	r2, [r7, #28]
 8006770:	4013      	ands	r3, r2
 8006772:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 800677e:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	69ba      	ldr	r2, [r7, #24]
 8006788:	4013      	ands	r3, r2
 800678a:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8006796:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	4013      	ands	r3, r2
 80067a2:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d007      	beq.n	80067ba <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067b0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80067b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f8f2 	bl	800699e <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d007      	beq.n	80067d0 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	6a3a      	ldr	r2, [r7, #32]
 80067c6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80067c8:	6a39      	ldr	r1, [r7, #32]
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f8f2 	bl	80069b4 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d01b      	beq.n	8006816 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	6a1b      	ldr	r3, [r3, #32]
 80067e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d014      	beq.n	8006816 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f2:	0c1b      	lsrs	r3, r3, #16
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006802:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	2240      	movs	r2, #64	; 0x40
 800680a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	6939      	ldr	r1, [r7, #16]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 f8da 	bl	80069ca <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d007      	beq.n	800682c <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	69fa      	ldr	r2, [r7, #28]
 8006822:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8006824:	69f9      	ldr	r1, [r7, #28]
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f8db 	bl	80069e2 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00b      	beq.n	800684a <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	69ba      	ldr	r2, [r7, #24]
 8006838:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	431a      	orrs	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00b      	beq.n	8006868 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	431a      	orrs	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800686e:	2b00      	cmp	r3, #0
 8006870:	d002      	beq.n	8006878 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f87e 	bl	8006974 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006878:	bf00      	nop
 800687a:	3748      	adds	r7, #72	; 0x48
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	4000a800 	.word	0x4000a800
 8006884:	3fcfffff 	.word	0x3fcfffff
 8006888:	4000a000 	.word	0x4000a000

0800688c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8006896:	bf00      	nop
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b083      	sub	sp, #12
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
 80068aa:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80068c2:	bf00      	nop
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006902:	bf00      	nop
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800690e:	b480      	push	{r7}
 8006910:	b083      	sub	sp, #12
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
 8006916:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006992:	bf00      	nop
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr

0800699e <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800699e:	b480      	push	{r7}
 80069a0:	b083      	sub	sp, #12
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
 80069a6:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80069be:	bf00      	nop
 80069c0:	370c      	adds	r7, #12
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr

080069ca <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b085      	sub	sp, #20
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	60f8      	str	r0, [r7, #12]
 80069d2:	60b9      	str	r1, [r7, #8]
 80069d4:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80069d6:	bf00      	nop
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80069e2:	b480      	push	{r7}
 80069e4:	b083      	sub	sp, #12
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a04:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006a0e:	4ba7      	ldr	r3, [pc, #668]	; (8006cac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006a10:	4013      	ands	r3, r2
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	0091      	lsls	r1, r2, #2
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	6812      	ldr	r2, [r2, #0]
 8006a1a:	430b      	orrs	r3, r1
 8006a1c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a28:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a30:	041a      	lsls	r2, r3, #16
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	4413      	add	r3, r2
 8006a44:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006a4e:	4b97      	ldr	r3, [pc, #604]	; (8006cac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006a50:	4013      	ands	r3, r2
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	0091      	lsls	r1, r2, #2
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	6812      	ldr	r2, [r2, #0]
 8006a5a:	430b      	orrs	r3, r1
 8006a5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a68:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a70:	041a      	lsls	r2, r3, #16
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	430a      	orrs	r2, r1
 8006a78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a80:	005b      	lsls	r3, r3, #1
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	4413      	add	r3, r2
 8006a86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006a90:	4b86      	ldr	r3, [pc, #536]	; (8006cac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006a92:	4013      	ands	r3, r2
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	0091      	lsls	r1, r2, #2
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	6812      	ldr	r2, [r2, #0]
 8006a9c:	430b      	orrs	r3, r1
 8006a9e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006aaa:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab2:	041a      	lsls	r2, r3, #16
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006ac6:	fb02 f303 	mul.w	r3, r2, r3
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	4413      	add	r3, r2
 8006ace:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006ad8:	4b74      	ldr	r3, [pc, #464]	; (8006cac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006ada:	4013      	ands	r3, r2
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	0091      	lsls	r1, r2, #2
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	6812      	ldr	r2, [r2, #0]
 8006ae4:	430b      	orrs	r3, r1
 8006ae6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006af2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006afa:	041a      	lsls	r2, r3, #16
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	430a      	orrs	r2, r1
 8006b02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006b0e:	fb02 f303 	mul.w	r3, r2, r3
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	4413      	add	r3, r2
 8006b16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006b20:	4b62      	ldr	r3, [pc, #392]	; (8006cac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006b22:	4013      	ands	r3, r2
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	0091      	lsls	r1, r2, #2
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	6812      	ldr	r2, [r2, #0]
 8006b2c:	430b      	orrs	r3, r1
 8006b2e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006b3a:	fb02 f303 	mul.w	r3, r2, r3
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	4413      	add	r3, r2
 8006b42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006b4c:	4b57      	ldr	r3, [pc, #348]	; (8006cac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006b4e:	4013      	ands	r3, r2
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	0091      	lsls	r1, r2, #2
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	6812      	ldr	r2, [r2, #0]
 8006b58:	430b      	orrs	r3, r1
 8006b5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b66:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b6e:	041a      	lsls	r2, r3, #16
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	430a      	orrs	r2, r1
 8006b76:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b7e:	005b      	lsls	r3, r3, #1
 8006b80:	68ba      	ldr	r2, [r7, #8]
 8006b82:	4413      	add	r3, r2
 8006b84:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006b8e:	4b47      	ldr	r3, [pc, #284]	; (8006cac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006b90:	4013      	ands	r3, r2
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	0091      	lsls	r1, r2, #2
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	6812      	ldr	r2, [r2, #0]
 8006b9a:	430b      	orrs	r3, r1
 8006b9c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006ba8:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb0:	041a      	lsls	r2, r3, #16
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006bc4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bcc:	061a      	lsls	r2, r3, #24
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bdc:	4b34      	ldr	r3, [pc, #208]	; (8006cb0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006bde:	4413      	add	r3, r2
 8006be0:	009a      	lsls	r2, r3, #2
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	441a      	add	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bfe:	00db      	lsls	r3, r3, #3
 8006c00:	441a      	add	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0e:	6879      	ldr	r1, [r7, #4]
 8006c10:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8006c12:	fb01 f303 	mul.w	r3, r1, r3
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	441a      	add	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c26:	6879      	ldr	r1, [r7, #4]
 8006c28:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8006c2a:	fb01 f303 	mul.w	r3, r1, r3
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	441a      	add	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c3e:	6879      	ldr	r1, [r7, #4]
 8006c40:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8006c42:	fb01 f303 	mul.w	r3, r1, r3
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	441a      	add	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c5a:	00db      	lsls	r3, r3, #3
 8006c5c:	441a      	add	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c6e:	6879      	ldr	r1, [r7, #4]
 8006c70:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006c72:	fb01 f303 	mul.w	r3, r1, r3
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	441a      	add	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c8a:	6879      	ldr	r1, [r7, #4]
 8006c8c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006c8e:	fb01 f303 	mul.w	r3, r1, r3
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	441a      	add	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca2:	4a04      	ldr	r2, [pc, #16]	; (8006cb4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d915      	bls.n	8006cd4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006ca8:	e006      	b.n	8006cb8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006caa:	bf00      	nop
 8006cac:	ffff0003 	.word	0xffff0003
 8006cb0:	10002b00 	.word	0x10002b00
 8006cb4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006cbe:	f043 0220 	orr.w	r2, r3, #32
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2203      	movs	r2, #3
 8006ccc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e010      	b.n	8006cf6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cd8:	60fb      	str	r3, [r7, #12]
 8006cda:	e005      	b.n	8006ce8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	3304      	adds	r3, #4
 8006ce6:	60fb      	str	r3, [r7, #12]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d3f3      	bcc.n	8006cdc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3714      	adds	r7, #20
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop

08006d04 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b089      	sub	sp, #36	; 0x24
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
 8006d10:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10a      	bne.n	8006d30 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006d22:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	61fb      	str	r3, [r7, #28]
 8006d2e:	e00a      	b.n	8006d46 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006d38:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006d3e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006d40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d44:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8006d50:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8006d56:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006d5c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8006d62:	4313      	orrs	r3, r2
 8006d64:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	fb01 f303 	mul.w	r3, r1, r3
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	69fa      	ldr	r2, [r7, #28]
 8006d80:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	3304      	adds	r3, #4
 8006d86:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	3304      	adds	r3, #4
 8006d92:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8006d94:	2300      	movs	r3, #0
 8006d96:	617b      	str	r3, [r7, #20]
 8006d98:	e020      	b.n	8006ddc <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	3303      	adds	r3, #3
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	4413      	add	r3, r2
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	3302      	adds	r3, #2
 8006daa:	6879      	ldr	r1, [r7, #4]
 8006dac:	440b      	add	r3, r1
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8006db2:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	3301      	adds	r3, #1
 8006db8:	6879      	ldr	r1, [r7, #4]
 8006dba:	440b      	add	r3, r1
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8006dc0:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006dc2:	6879      	ldr	r1, [r7, #4]
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	440a      	add	r2, r1
 8006dc8:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8006dca:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	3304      	adds	r3, #4
 8006dd4:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	3304      	adds	r3, #4
 8006dda:	617b      	str	r3, [r7, #20]
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	0c1b      	lsrs	r3, r3, #16
 8006de2:	4a06      	ldr	r2, [pc, #24]	; (8006dfc <FDCAN_CopyMessageToRAM+0xf8>)
 8006de4:	5cd3      	ldrb	r3, [r2, r3]
 8006de6:	461a      	mov	r2, r3
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d3d5      	bcc.n	8006d9a <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8006dee:	bf00      	nop
 8006df0:	bf00      	nop
 8006df2:	3724      	adds	r7, #36	; 0x24
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	0800ff70 	.word	0x0800ff70

08006e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b089      	sub	sp, #36	; 0x24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006e0e:	4b89      	ldr	r3, [pc, #548]	; (8007034 <HAL_GPIO_Init+0x234>)
 8006e10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006e12:	e194      	b.n	800713e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	2101      	movs	r1, #1
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e20:	4013      	ands	r3, r2
 8006e22:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f000 8186 	beq.w	8007138 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d00b      	beq.n	8006e4c <HAL_GPIO_Init+0x4c>
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d007      	beq.n	8006e4c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006e40:	2b11      	cmp	r3, #17
 8006e42:	d003      	beq.n	8006e4c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	2b12      	cmp	r3, #18
 8006e4a:	d130      	bne.n	8006eae <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	005b      	lsls	r3, r3, #1
 8006e56:	2203      	movs	r2, #3
 8006e58:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5c:	43db      	mvns	r3, r3
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	4013      	ands	r3, r2
 8006e62:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	68da      	ldr	r2, [r3, #12]
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	005b      	lsls	r3, r3, #1
 8006e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e70:	69ba      	ldr	r2, [r7, #24]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	69ba      	ldr	r2, [r7, #24]
 8006e7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006e82:	2201      	movs	r2, #1
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	fa02 f303 	lsl.w	r3, r2, r3
 8006e8a:	43db      	mvns	r3, r3
 8006e8c:	69ba      	ldr	r2, [r7, #24]
 8006e8e:	4013      	ands	r3, r2
 8006e90:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	091b      	lsrs	r3, r3, #4
 8006e98:	f003 0201 	and.w	r2, r3, #1
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea2:	69ba      	ldr	r2, [r7, #24]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	69ba      	ldr	r2, [r7, #24]
 8006eac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	005b      	lsls	r3, r3, #1
 8006eb8:	2203      	movs	r2, #3
 8006eba:	fa02 f303 	lsl.w	r3, r2, r3
 8006ebe:	43db      	mvns	r3, r3
 8006ec0:	69ba      	ldr	r2, [r7, #24]
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	689a      	ldr	r2, [r3, #8]
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	005b      	lsls	r3, r3, #1
 8006ece:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed2:	69ba      	ldr	r2, [r7, #24]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	69ba      	ldr	r2, [r7, #24]
 8006edc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d003      	beq.n	8006eee <HAL_GPIO_Init+0xee>
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	2b12      	cmp	r3, #18
 8006eec:	d123      	bne.n	8006f36 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	08da      	lsrs	r2, r3, #3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	3208      	adds	r2, #8
 8006ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	f003 0307 	and.w	r3, r3, #7
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	220f      	movs	r2, #15
 8006f06:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0a:	43db      	mvns	r3, r3
 8006f0c:	69ba      	ldr	r2, [r7, #24]
 8006f0e:	4013      	ands	r3, r2
 8006f10:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	691a      	ldr	r2, [r3, #16]
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	f003 0307 	and.w	r3, r3, #7
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f22:	69ba      	ldr	r2, [r7, #24]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	08da      	lsrs	r2, r3, #3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	3208      	adds	r2, #8
 8006f30:	69b9      	ldr	r1, [r7, #24]
 8006f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	005b      	lsls	r3, r3, #1
 8006f40:	2203      	movs	r2, #3
 8006f42:	fa02 f303 	lsl.w	r3, r2, r3
 8006f46:	43db      	mvns	r3, r3
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f003 0203 	and.w	r2, r3, #3
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	005b      	lsls	r3, r3, #1
 8006f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5e:	69ba      	ldr	r2, [r7, #24]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	69ba      	ldr	r2, [r7, #24]
 8006f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f000 80e0 	beq.w	8007138 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f78:	4b2f      	ldr	r3, [pc, #188]	; (8007038 <HAL_GPIO_Init+0x238>)
 8006f7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f7e:	4a2e      	ldr	r2, [pc, #184]	; (8007038 <HAL_GPIO_Init+0x238>)
 8006f80:	f043 0302 	orr.w	r3, r3, #2
 8006f84:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006f88:	4b2b      	ldr	r3, [pc, #172]	; (8007038 <HAL_GPIO_Init+0x238>)
 8006f8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f8e:	f003 0302 	and.w	r3, r3, #2
 8006f92:	60fb      	str	r3, [r7, #12]
 8006f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f96:	4a29      	ldr	r2, [pc, #164]	; (800703c <HAL_GPIO_Init+0x23c>)
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	089b      	lsrs	r3, r3, #2
 8006f9c:	3302      	adds	r3, #2
 8006f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	f003 0303 	and.w	r3, r3, #3
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	220f      	movs	r2, #15
 8006fae:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb2:	43db      	mvns	r3, r3
 8006fb4:	69ba      	ldr	r2, [r7, #24]
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a20      	ldr	r2, [pc, #128]	; (8007040 <HAL_GPIO_Init+0x240>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d052      	beq.n	8007068 <HAL_GPIO_Init+0x268>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a1f      	ldr	r2, [pc, #124]	; (8007044 <HAL_GPIO_Init+0x244>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d031      	beq.n	800702e <HAL_GPIO_Init+0x22e>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a1e      	ldr	r2, [pc, #120]	; (8007048 <HAL_GPIO_Init+0x248>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d02b      	beq.n	800702a <HAL_GPIO_Init+0x22a>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a1d      	ldr	r2, [pc, #116]	; (800704c <HAL_GPIO_Init+0x24c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d025      	beq.n	8007026 <HAL_GPIO_Init+0x226>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a1c      	ldr	r2, [pc, #112]	; (8007050 <HAL_GPIO_Init+0x250>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d01f      	beq.n	8007022 <HAL_GPIO_Init+0x222>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a1b      	ldr	r2, [pc, #108]	; (8007054 <HAL_GPIO_Init+0x254>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d019      	beq.n	800701e <HAL_GPIO_Init+0x21e>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a1a      	ldr	r2, [pc, #104]	; (8007058 <HAL_GPIO_Init+0x258>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d013      	beq.n	800701a <HAL_GPIO_Init+0x21a>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a19      	ldr	r2, [pc, #100]	; (800705c <HAL_GPIO_Init+0x25c>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d00d      	beq.n	8007016 <HAL_GPIO_Init+0x216>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a18      	ldr	r2, [pc, #96]	; (8007060 <HAL_GPIO_Init+0x260>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d007      	beq.n	8007012 <HAL_GPIO_Init+0x212>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a17      	ldr	r2, [pc, #92]	; (8007064 <HAL_GPIO_Init+0x264>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d101      	bne.n	800700e <HAL_GPIO_Init+0x20e>
 800700a:	2309      	movs	r3, #9
 800700c:	e02d      	b.n	800706a <HAL_GPIO_Init+0x26a>
 800700e:	230a      	movs	r3, #10
 8007010:	e02b      	b.n	800706a <HAL_GPIO_Init+0x26a>
 8007012:	2308      	movs	r3, #8
 8007014:	e029      	b.n	800706a <HAL_GPIO_Init+0x26a>
 8007016:	2307      	movs	r3, #7
 8007018:	e027      	b.n	800706a <HAL_GPIO_Init+0x26a>
 800701a:	2306      	movs	r3, #6
 800701c:	e025      	b.n	800706a <HAL_GPIO_Init+0x26a>
 800701e:	2305      	movs	r3, #5
 8007020:	e023      	b.n	800706a <HAL_GPIO_Init+0x26a>
 8007022:	2304      	movs	r3, #4
 8007024:	e021      	b.n	800706a <HAL_GPIO_Init+0x26a>
 8007026:	2303      	movs	r3, #3
 8007028:	e01f      	b.n	800706a <HAL_GPIO_Init+0x26a>
 800702a:	2302      	movs	r3, #2
 800702c:	e01d      	b.n	800706a <HAL_GPIO_Init+0x26a>
 800702e:	2301      	movs	r3, #1
 8007030:	e01b      	b.n	800706a <HAL_GPIO_Init+0x26a>
 8007032:	bf00      	nop
 8007034:	58000080 	.word	0x58000080
 8007038:	58024400 	.word	0x58024400
 800703c:	58000400 	.word	0x58000400
 8007040:	58020000 	.word	0x58020000
 8007044:	58020400 	.word	0x58020400
 8007048:	58020800 	.word	0x58020800
 800704c:	58020c00 	.word	0x58020c00
 8007050:	58021000 	.word	0x58021000
 8007054:	58021400 	.word	0x58021400
 8007058:	58021800 	.word	0x58021800
 800705c:	58021c00 	.word	0x58021c00
 8007060:	58022000 	.word	0x58022000
 8007064:	58022400 	.word	0x58022400
 8007068:	2300      	movs	r3, #0
 800706a:	69fa      	ldr	r2, [r7, #28]
 800706c:	f002 0203 	and.w	r2, r2, #3
 8007070:	0092      	lsls	r2, r2, #2
 8007072:	4093      	lsls	r3, r2
 8007074:	69ba      	ldr	r2, [r7, #24]
 8007076:	4313      	orrs	r3, r2
 8007078:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800707a:	4938      	ldr	r1, [pc, #224]	; (800715c <HAL_GPIO_Init+0x35c>)
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	089b      	lsrs	r3, r3, #2
 8007080:	3302      	adds	r3, #2
 8007082:	69ba      	ldr	r2, [r7, #24]
 8007084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	43db      	mvns	r3, r3
 8007092:	69ba      	ldr	r2, [r7, #24]
 8007094:	4013      	ands	r3, r2
 8007096:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d003      	beq.n	80070ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80070a4:	69ba      	ldr	r2, [r7, #24]
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	69ba      	ldr	r2, [r7, #24]
 80070b0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	43db      	mvns	r3, r3
 80070bc:	69ba      	ldr	r2, [r7, #24]
 80070be:	4013      	ands	r3, r2
 80070c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d003      	beq.n	80070d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80070ce:	69ba      	ldr	r2, [r7, #24]
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	69ba      	ldr	r2, [r7, #24]
 80070da:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80070dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	43db      	mvns	r3, r3
 80070e8:	69ba      	ldr	r2, [r7, #24]
 80070ea:	4013      	ands	r3, r2
 80070ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80070fa:	69ba      	ldr	r2, [r7, #24]
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	4313      	orrs	r3, r2
 8007100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007102:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800710a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	43db      	mvns	r3, r3
 8007116:	69ba      	ldr	r2, [r7, #24]
 8007118:	4013      	ands	r3, r2
 800711a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d003      	beq.n	8007130 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8007128:	69ba      	ldr	r2, [r7, #24]
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	4313      	orrs	r3, r2
 800712e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007130:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	3301      	adds	r3, #1
 800713c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	fa22 f303 	lsr.w	r3, r2, r3
 8007148:	2b00      	cmp	r3, #0
 800714a:	f47f ae63 	bne.w	8006e14 <HAL_GPIO_Init+0x14>
  }
}
 800714e:	bf00      	nop
 8007150:	bf00      	nop
 8007152:	3724      	adds	r7, #36	; 0x24
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	58000400 	.word	0x58000400

08007160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	460b      	mov	r3, r1
 800716a:	807b      	strh	r3, [r7, #2]
 800716c:	4613      	mov	r3, r2
 800716e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007170:	787b      	ldrb	r3, [r7, #1]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007176:	887a      	ldrh	r2, [r7, #2]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800717c:	e003      	b.n	8007186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800717e:	887b      	ldrh	r3, [r7, #2]
 8007180:	041a      	lsls	r2, r3, #16
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	619a      	str	r2, [r3, #24]
}
 8007186:	bf00      	nop
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007192:	b480      	push	{r7}
 8007194:	b085      	sub	sp, #20
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	460b      	mov	r3, r1
 800719c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80071a4:	887a      	ldrh	r2, [r7, #2]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	4013      	ands	r3, r2
 80071aa:	041a      	lsls	r2, r3, #16
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	43d9      	mvns	r1, r3
 80071b0:	887b      	ldrh	r3, [r7, #2]
 80071b2:	400b      	ands	r3, r1
 80071b4:	431a      	orrs	r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	619a      	str	r2, [r3, #24]
}
 80071ba:	bf00      	nop
 80071bc:	3714      	adds	r7, #20
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
	...

080071c8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80071d0:	4a08      	ldr	r2, [pc, #32]	; (80071f4 <HAL_HSEM_FastTake+0x2c>)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	3320      	adds	r3, #32
 80071d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071da:	4a07      	ldr	r2, [pc, #28]	; (80071f8 <HAL_HSEM_FastTake+0x30>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d101      	bne.n	80071e4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80071e0:	2300      	movs	r3, #0
 80071e2:	e000      	b.n	80071e6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	58026400 	.word	0x58026400
 80071f8:	80000300 	.word	0x80000300

080071fc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007206:	4906      	ldr	r1, [pc, #24]	; (8007220 <HAL_HSEM_Release+0x24>)
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	58026400 	.word	0x58026400

08007224 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007226:	b08f      	sub	sp, #60	; 0x3c
 8007228:	af0a      	add	r7, sp, #40	; 0x28
 800722a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e116      	b.n	8007464 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007242:	b2db      	uxtb	r3, r3
 8007244:	2b00      	cmp	r3, #0
 8007246:	d106      	bne.n	8007256 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f7fa fce1 	bl	8001c18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2203      	movs	r2, #3
 800725a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007266:	2b00      	cmp	r3, #0
 8007268:	d102      	bne.n	8007270 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4618      	mov	r0, r3
 8007276:	f005 fb3b 	bl	800c8f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	603b      	str	r3, [r7, #0]
 8007280:	687e      	ldr	r6, [r7, #4]
 8007282:	466d      	mov	r5, sp
 8007284:	f106 0410 	add.w	r4, r6, #16
 8007288:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800728a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800728c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800728e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007290:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007294:	e885 0003 	stmia.w	r5, {r0, r1}
 8007298:	1d33      	adds	r3, r6, #4
 800729a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800729c:	6838      	ldr	r0, [r7, #0]
 800729e:	f005 fab9 	bl	800c814 <USB_CoreInit>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d005      	beq.n	80072b4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2202      	movs	r2, #2
 80072ac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e0d7      	b.n	8007464 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2100      	movs	r1, #0
 80072ba:	4618      	mov	r0, r3
 80072bc:	f005 fb29 	bl	800c912 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072c0:	2300      	movs	r3, #0
 80072c2:	73fb      	strb	r3, [r7, #15]
 80072c4:	e04a      	b.n	800735c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80072c6:	7bfa      	ldrb	r2, [r7, #15]
 80072c8:	6879      	ldr	r1, [r7, #4]
 80072ca:	4613      	mov	r3, r2
 80072cc:	00db      	lsls	r3, r3, #3
 80072ce:	1a9b      	subs	r3, r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	440b      	add	r3, r1
 80072d4:	333d      	adds	r3, #61	; 0x3d
 80072d6:	2201      	movs	r2, #1
 80072d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80072da:	7bfa      	ldrb	r2, [r7, #15]
 80072dc:	6879      	ldr	r1, [r7, #4]
 80072de:	4613      	mov	r3, r2
 80072e0:	00db      	lsls	r3, r3, #3
 80072e2:	1a9b      	subs	r3, r3, r2
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	440b      	add	r3, r1
 80072e8:	333c      	adds	r3, #60	; 0x3c
 80072ea:	7bfa      	ldrb	r2, [r7, #15]
 80072ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80072ee:	7bfa      	ldrb	r2, [r7, #15]
 80072f0:	7bfb      	ldrb	r3, [r7, #15]
 80072f2:	b298      	uxth	r0, r3
 80072f4:	6879      	ldr	r1, [r7, #4]
 80072f6:	4613      	mov	r3, r2
 80072f8:	00db      	lsls	r3, r3, #3
 80072fa:	1a9b      	subs	r3, r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	440b      	add	r3, r1
 8007300:	3342      	adds	r3, #66	; 0x42
 8007302:	4602      	mov	r2, r0
 8007304:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007306:	7bfa      	ldrb	r2, [r7, #15]
 8007308:	6879      	ldr	r1, [r7, #4]
 800730a:	4613      	mov	r3, r2
 800730c:	00db      	lsls	r3, r3, #3
 800730e:	1a9b      	subs	r3, r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	440b      	add	r3, r1
 8007314:	333f      	adds	r3, #63	; 0x3f
 8007316:	2200      	movs	r2, #0
 8007318:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800731a:	7bfa      	ldrb	r2, [r7, #15]
 800731c:	6879      	ldr	r1, [r7, #4]
 800731e:	4613      	mov	r3, r2
 8007320:	00db      	lsls	r3, r3, #3
 8007322:	1a9b      	subs	r3, r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	440b      	add	r3, r1
 8007328:	3344      	adds	r3, #68	; 0x44
 800732a:	2200      	movs	r2, #0
 800732c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800732e:	7bfa      	ldrb	r2, [r7, #15]
 8007330:	6879      	ldr	r1, [r7, #4]
 8007332:	4613      	mov	r3, r2
 8007334:	00db      	lsls	r3, r3, #3
 8007336:	1a9b      	subs	r3, r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	440b      	add	r3, r1
 800733c:	3348      	adds	r3, #72	; 0x48
 800733e:	2200      	movs	r2, #0
 8007340:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007342:	7bfa      	ldrb	r2, [r7, #15]
 8007344:	6879      	ldr	r1, [r7, #4]
 8007346:	4613      	mov	r3, r2
 8007348:	00db      	lsls	r3, r3, #3
 800734a:	1a9b      	subs	r3, r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	440b      	add	r3, r1
 8007350:	3350      	adds	r3, #80	; 0x50
 8007352:	2200      	movs	r2, #0
 8007354:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007356:	7bfb      	ldrb	r3, [r7, #15]
 8007358:	3301      	adds	r3, #1
 800735a:	73fb      	strb	r3, [r7, #15]
 800735c:	7bfa      	ldrb	r2, [r7, #15]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	429a      	cmp	r2, r3
 8007364:	d3af      	bcc.n	80072c6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007366:	2300      	movs	r3, #0
 8007368:	73fb      	strb	r3, [r7, #15]
 800736a:	e044      	b.n	80073f6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800736c:	7bfa      	ldrb	r2, [r7, #15]
 800736e:	6879      	ldr	r1, [r7, #4]
 8007370:	4613      	mov	r3, r2
 8007372:	00db      	lsls	r3, r3, #3
 8007374:	1a9b      	subs	r3, r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	440b      	add	r3, r1
 800737a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800737e:	2200      	movs	r2, #0
 8007380:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007382:	7bfa      	ldrb	r2, [r7, #15]
 8007384:	6879      	ldr	r1, [r7, #4]
 8007386:	4613      	mov	r3, r2
 8007388:	00db      	lsls	r3, r3, #3
 800738a:	1a9b      	subs	r3, r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	440b      	add	r3, r1
 8007390:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007394:	7bfa      	ldrb	r2, [r7, #15]
 8007396:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007398:	7bfa      	ldrb	r2, [r7, #15]
 800739a:	6879      	ldr	r1, [r7, #4]
 800739c:	4613      	mov	r3, r2
 800739e:	00db      	lsls	r3, r3, #3
 80073a0:	1a9b      	subs	r3, r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	440b      	add	r3, r1
 80073a6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80073aa:	2200      	movs	r2, #0
 80073ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80073ae:	7bfa      	ldrb	r2, [r7, #15]
 80073b0:	6879      	ldr	r1, [r7, #4]
 80073b2:	4613      	mov	r3, r2
 80073b4:	00db      	lsls	r3, r3, #3
 80073b6:	1a9b      	subs	r3, r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	440b      	add	r3, r1
 80073bc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80073c0:	2200      	movs	r2, #0
 80073c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80073c4:	7bfa      	ldrb	r2, [r7, #15]
 80073c6:	6879      	ldr	r1, [r7, #4]
 80073c8:	4613      	mov	r3, r2
 80073ca:	00db      	lsls	r3, r3, #3
 80073cc:	1a9b      	subs	r3, r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	440b      	add	r3, r1
 80073d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80073d6:	2200      	movs	r2, #0
 80073d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80073da:	7bfa      	ldrb	r2, [r7, #15]
 80073dc:	6879      	ldr	r1, [r7, #4]
 80073de:	4613      	mov	r3, r2
 80073e0:	00db      	lsls	r3, r3, #3
 80073e2:	1a9b      	subs	r3, r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	440b      	add	r3, r1
 80073e8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80073ec:	2200      	movs	r2, #0
 80073ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073f0:	7bfb      	ldrb	r3, [r7, #15]
 80073f2:	3301      	adds	r3, #1
 80073f4:	73fb      	strb	r3, [r7, #15]
 80073f6:	7bfa      	ldrb	r2, [r7, #15]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d3b5      	bcc.n	800736c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	603b      	str	r3, [r7, #0]
 8007406:	687e      	ldr	r6, [r7, #4]
 8007408:	466d      	mov	r5, sp
 800740a:	f106 0410 	add.w	r4, r6, #16
 800740e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007410:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007412:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007414:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007416:	e894 0003 	ldmia.w	r4, {r0, r1}
 800741a:	e885 0003 	stmia.w	r5, {r0, r1}
 800741e:	1d33      	adds	r3, r6, #4
 8007420:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007422:	6838      	ldr	r0, [r7, #0]
 8007424:	f005 faa0 	bl	800c968 <USB_DevInit>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d005      	beq.n	800743a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2202      	movs	r2, #2
 8007432:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e014      	b.n	8007464 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744e:	2b01      	cmp	r3, #1
 8007450:	d102      	bne.n	8007458 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f80a 	bl	800746c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4618      	mov	r0, r3
 800745e:	f005 fc42 	bl	800cce6 <USB_DevDisconnect>

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800746c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800749a:	4b05      	ldr	r3, [pc, #20]	; (80074b0 <HAL_PCDEx_ActivateLPM+0x44>)
 800749c:	4313      	orrs	r3, r2
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	10000003 	.word	0x10000003

080074b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80074bc:	4b29      	ldr	r3, [pc, #164]	; (8007564 <HAL_PWREx_ConfigSupply+0xb0>)
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	f003 0307 	and.w	r3, r3, #7
 80074c4:	2b06      	cmp	r3, #6
 80074c6:	d00a      	beq.n	80074de <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80074c8:	4b26      	ldr	r3, [pc, #152]	; (8007564 <HAL_PWREx_ConfigSupply+0xb0>)
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d001      	beq.n	80074da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e040      	b.n	800755c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	e03e      	b.n	800755c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80074de:	4b21      	ldr	r3, [pc, #132]	; (8007564 <HAL_PWREx_ConfigSupply+0xb0>)
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80074e6:	491f      	ldr	r1, [pc, #124]	; (8007564 <HAL_PWREx_ConfigSupply+0xb0>)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80074ee:	f7fa fd27 	bl	8001f40 <HAL_GetTick>
 80074f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80074f4:	e009      	b.n	800750a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80074f6:	f7fa fd23 	bl	8001f40 <HAL_GetTick>
 80074fa:	4602      	mov	r2, r0
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007504:	d901      	bls.n	800750a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e028      	b.n	800755c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800750a:	4b16      	ldr	r3, [pc, #88]	; (8007564 <HAL_PWREx_ConfigSupply+0xb0>)
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007516:	d1ee      	bne.n	80074f6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b1e      	cmp	r3, #30
 800751c:	d008      	beq.n	8007530 <HAL_PWREx_ConfigSupply+0x7c>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b2e      	cmp	r3, #46	; 0x2e
 8007522:	d005      	beq.n	8007530 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b1d      	cmp	r3, #29
 8007528:	d002      	beq.n	8007530 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2b2d      	cmp	r3, #45	; 0x2d
 800752e:	d114      	bne.n	800755a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007530:	f7fa fd06 	bl	8001f40 <HAL_GetTick>
 8007534:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007536:	e009      	b.n	800754c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007538:	f7fa fd02 	bl	8001f40 <HAL_GetTick>
 800753c:	4602      	mov	r2, r0
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007546:	d901      	bls.n	800754c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e007      	b.n	800755c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800754c:	4b05      	ldr	r3, [pc, #20]	; (8007564 <HAL_PWREx_ConfigSupply+0xb0>)
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007558:	d1ee      	bne.n	8007538 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	58024800 	.word	0x58024800

08007568 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007568:	b480      	push	{r7}
 800756a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800756c:	4b05      	ldr	r3, [pc, #20]	; (8007584 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	4a04      	ldr	r2, [pc, #16]	; (8007584 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007572:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007576:	60d3      	str	r3, [r2, #12]
}
 8007578:	bf00      	nop
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	58024800 	.word	0x58024800

08007588 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b08c      	sub	sp, #48	; 0x30
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e3ff      	b.n	8007d9a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f000 8087 	beq.w	80076b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075a8:	4b99      	ldr	r3, [pc, #612]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80075b2:	4b97      	ldr	r3, [pc, #604]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 80075b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80075b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ba:	2b10      	cmp	r3, #16
 80075bc:	d007      	beq.n	80075ce <HAL_RCC_OscConfig+0x46>
 80075be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c0:	2b18      	cmp	r3, #24
 80075c2:	d110      	bne.n	80075e6 <HAL_RCC_OscConfig+0x5e>
 80075c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c6:	f003 0303 	and.w	r3, r3, #3
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d10b      	bne.n	80075e6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075ce:	4b90      	ldr	r3, [pc, #576]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d06c      	beq.n	80076b4 <HAL_RCC_OscConfig+0x12c>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d168      	bne.n	80076b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e3d9      	b.n	8007d9a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ee:	d106      	bne.n	80075fe <HAL_RCC_OscConfig+0x76>
 80075f0:	4b87      	ldr	r3, [pc, #540]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a86      	ldr	r2, [pc, #536]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 80075f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075fa:	6013      	str	r3, [r2, #0]
 80075fc:	e02e      	b.n	800765c <HAL_RCC_OscConfig+0xd4>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d10c      	bne.n	8007620 <HAL_RCC_OscConfig+0x98>
 8007606:	4b82      	ldr	r3, [pc, #520]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a81      	ldr	r2, [pc, #516]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 800760c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007610:	6013      	str	r3, [r2, #0]
 8007612:	4b7f      	ldr	r3, [pc, #508]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a7e      	ldr	r2, [pc, #504]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 8007618:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800761c:	6013      	str	r3, [r2, #0]
 800761e:	e01d      	b.n	800765c <HAL_RCC_OscConfig+0xd4>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007628:	d10c      	bne.n	8007644 <HAL_RCC_OscConfig+0xbc>
 800762a:	4b79      	ldr	r3, [pc, #484]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a78      	ldr	r2, [pc, #480]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 8007630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007634:	6013      	str	r3, [r2, #0]
 8007636:	4b76      	ldr	r3, [pc, #472]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a75      	ldr	r2, [pc, #468]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 800763c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007640:	6013      	str	r3, [r2, #0]
 8007642:	e00b      	b.n	800765c <HAL_RCC_OscConfig+0xd4>
 8007644:	4b72      	ldr	r3, [pc, #456]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a71      	ldr	r2, [pc, #452]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 800764a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800764e:	6013      	str	r3, [r2, #0]
 8007650:	4b6f      	ldr	r3, [pc, #444]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a6e      	ldr	r2, [pc, #440]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 8007656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800765a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d013      	beq.n	800768c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007664:	f7fa fc6c 	bl	8001f40 <HAL_GetTick>
 8007668:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800766a:	e008      	b.n	800767e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800766c:	f7fa fc68 	bl	8001f40 <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	2b64      	cmp	r3, #100	; 0x64
 8007678:	d901      	bls.n	800767e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	e38d      	b.n	8007d9a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800767e:	4b64      	ldr	r3, [pc, #400]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d0f0      	beq.n	800766c <HAL_RCC_OscConfig+0xe4>
 800768a:	e014      	b.n	80076b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800768c:	f7fa fc58 	bl	8001f40 <HAL_GetTick>
 8007690:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007692:	e008      	b.n	80076a6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007694:	f7fa fc54 	bl	8001f40 <HAL_GetTick>
 8007698:	4602      	mov	r2, r0
 800769a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	2b64      	cmp	r3, #100	; 0x64
 80076a0:	d901      	bls.n	80076a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e379      	b.n	8007d9a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80076a6:	4b5a      	ldr	r3, [pc, #360]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1f0      	bne.n	8007694 <HAL_RCC_OscConfig+0x10c>
 80076b2:	e000      	b.n	80076b6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 0302 	and.w	r3, r3, #2
 80076be:	2b00      	cmp	r3, #0
 80076c0:	f000 80ae 	beq.w	8007820 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076c4:	4b52      	ldr	r3, [pc, #328]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80076ce:	4b50      	ldr	r3, [pc, #320]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 80076d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80076d4:	6a3b      	ldr	r3, [r7, #32]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d007      	beq.n	80076ea <HAL_RCC_OscConfig+0x162>
 80076da:	6a3b      	ldr	r3, [r7, #32]
 80076dc:	2b18      	cmp	r3, #24
 80076de:	d13a      	bne.n	8007756 <HAL_RCC_OscConfig+0x1ce>
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	f003 0303 	and.w	r3, r3, #3
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d135      	bne.n	8007756 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076ea:	4b49      	ldr	r3, [pc, #292]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0304 	and.w	r3, r3, #4
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d005      	beq.n	8007702 <HAL_RCC_OscConfig+0x17a>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d101      	bne.n	8007702 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e34b      	b.n	8007d9a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007702:	f7fa fc4d 	bl	8001fa0 <HAL_GetREVID>
 8007706:	4603      	mov	r3, r0
 8007708:	f241 0203 	movw	r2, #4099	; 0x1003
 800770c:	4293      	cmp	r3, r2
 800770e:	d817      	bhi.n	8007740 <HAL_RCC_OscConfig+0x1b8>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	2b40      	cmp	r3, #64	; 0x40
 8007716:	d108      	bne.n	800772a <HAL_RCC_OscConfig+0x1a2>
 8007718:	4b3d      	ldr	r3, [pc, #244]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007720:	4a3b      	ldr	r2, [pc, #236]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 8007722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007726:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007728:	e07a      	b.n	8007820 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800772a:	4b39      	ldr	r3, [pc, #228]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	031b      	lsls	r3, r3, #12
 8007738:	4935      	ldr	r1, [pc, #212]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 800773a:	4313      	orrs	r3, r2
 800773c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800773e:	e06f      	b.n	8007820 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007740:	4b33      	ldr	r3, [pc, #204]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	061b      	lsls	r3, r3, #24
 800774e:	4930      	ldr	r1, [pc, #192]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 8007750:	4313      	orrs	r3, r2
 8007752:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007754:	e064      	b.n	8007820 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d045      	beq.n	80077ea <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800775e:	4b2c      	ldr	r3, [pc, #176]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f023 0219 	bic.w	r2, r3, #25
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	4929      	ldr	r1, [pc, #164]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 800776c:	4313      	orrs	r3, r2
 800776e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007770:	f7fa fbe6 	bl	8001f40 <HAL_GetTick>
 8007774:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007776:	e008      	b.n	800778a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007778:	f7fa fbe2 	bl	8001f40 <HAL_GetTick>
 800777c:	4602      	mov	r2, r0
 800777e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	2b02      	cmp	r3, #2
 8007784:	d901      	bls.n	800778a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8007786:	2303      	movs	r3, #3
 8007788:	e307      	b.n	8007d9a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800778a:	4b21      	ldr	r3, [pc, #132]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 0304 	and.w	r3, r3, #4
 8007792:	2b00      	cmp	r3, #0
 8007794:	d0f0      	beq.n	8007778 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007796:	f7fa fc03 	bl	8001fa0 <HAL_GetREVID>
 800779a:	4603      	mov	r3, r0
 800779c:	f241 0203 	movw	r2, #4099	; 0x1003
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d817      	bhi.n	80077d4 <HAL_RCC_OscConfig+0x24c>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	2b40      	cmp	r3, #64	; 0x40
 80077aa:	d108      	bne.n	80077be <HAL_RCC_OscConfig+0x236>
 80077ac:	4b18      	ldr	r3, [pc, #96]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80077b4:	4a16      	ldr	r2, [pc, #88]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 80077b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077ba:	6053      	str	r3, [r2, #4]
 80077bc:	e030      	b.n	8007820 <HAL_RCC_OscConfig+0x298>
 80077be:	4b14      	ldr	r3, [pc, #80]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	031b      	lsls	r3, r3, #12
 80077cc:	4910      	ldr	r1, [pc, #64]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	604b      	str	r3, [r1, #4]
 80077d2:	e025      	b.n	8007820 <HAL_RCC_OscConfig+0x298>
 80077d4:	4b0e      	ldr	r3, [pc, #56]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	061b      	lsls	r3, r3, #24
 80077e2:	490b      	ldr	r1, [pc, #44]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 80077e4:	4313      	orrs	r3, r2
 80077e6:	604b      	str	r3, [r1, #4]
 80077e8:	e01a      	b.n	8007820 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077ea:	4b09      	ldr	r3, [pc, #36]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a08      	ldr	r2, [pc, #32]	; (8007810 <HAL_RCC_OscConfig+0x288>)
 80077f0:	f023 0301 	bic.w	r3, r3, #1
 80077f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077f6:	f7fa fba3 	bl	8001f40 <HAL_GetTick>
 80077fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80077fc:	e00a      	b.n	8007814 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077fe:	f7fa fb9f 	bl	8001f40 <HAL_GetTick>
 8007802:	4602      	mov	r2, r0
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	2b02      	cmp	r3, #2
 800780a:	d903      	bls.n	8007814 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800780c:	2303      	movs	r3, #3
 800780e:	e2c4      	b.n	8007d9a <HAL_RCC_OscConfig+0x812>
 8007810:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007814:	4ba4      	ldr	r3, [pc, #656]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0304 	and.w	r3, r3, #4
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1ee      	bne.n	80077fe <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 0310 	and.w	r3, r3, #16
 8007828:	2b00      	cmp	r3, #0
 800782a:	f000 80a9 	beq.w	8007980 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800782e:	4b9e      	ldr	r3, [pc, #632]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007836:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007838:	4b9b      	ldr	r3, [pc, #620]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 800783a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	2b08      	cmp	r3, #8
 8007842:	d007      	beq.n	8007854 <HAL_RCC_OscConfig+0x2cc>
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	2b18      	cmp	r3, #24
 8007848:	d13a      	bne.n	80078c0 <HAL_RCC_OscConfig+0x338>
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	f003 0303 	and.w	r3, r3, #3
 8007850:	2b01      	cmp	r3, #1
 8007852:	d135      	bne.n	80078c0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007854:	4b94      	ldr	r3, [pc, #592]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800785c:	2b00      	cmp	r3, #0
 800785e:	d005      	beq.n	800786c <HAL_RCC_OscConfig+0x2e4>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	69db      	ldr	r3, [r3, #28]
 8007864:	2b80      	cmp	r3, #128	; 0x80
 8007866:	d001      	beq.n	800786c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	e296      	b.n	8007d9a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800786c:	f7fa fb98 	bl	8001fa0 <HAL_GetREVID>
 8007870:	4603      	mov	r3, r0
 8007872:	f241 0203 	movw	r2, #4099	; 0x1003
 8007876:	4293      	cmp	r3, r2
 8007878:	d817      	bhi.n	80078aa <HAL_RCC_OscConfig+0x322>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a1b      	ldr	r3, [r3, #32]
 800787e:	2b20      	cmp	r3, #32
 8007880:	d108      	bne.n	8007894 <HAL_RCC_OscConfig+0x30c>
 8007882:	4b89      	ldr	r3, [pc, #548]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800788a:	4a87      	ldr	r2, [pc, #540]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 800788c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007890:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007892:	e075      	b.n	8007980 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007894:	4b84      	ldr	r3, [pc, #528]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6a1b      	ldr	r3, [r3, #32]
 80078a0:	069b      	lsls	r3, r3, #26
 80078a2:	4981      	ldr	r1, [pc, #516]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80078a8:	e06a      	b.n	8007980 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80078aa:	4b7f      	ldr	r3, [pc, #508]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	061b      	lsls	r3, r3, #24
 80078b8:	497b      	ldr	r1, [pc, #492]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80078be:	e05f      	b.n	8007980 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	69db      	ldr	r3, [r3, #28]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d042      	beq.n	800794e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80078c8:	4b77      	ldr	r3, [pc, #476]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a76      	ldr	r2, [pc, #472]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 80078ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078d4:	f7fa fb34 	bl	8001f40 <HAL_GetTick>
 80078d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80078da:	e008      	b.n	80078ee <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80078dc:	f7fa fb30 	bl	8001f40 <HAL_GetTick>
 80078e0:	4602      	mov	r2, r0
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d901      	bls.n	80078ee <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e255      	b.n	8007d9a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80078ee:	4b6e      	ldr	r3, [pc, #440]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d0f0      	beq.n	80078dc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80078fa:	f7fa fb51 	bl	8001fa0 <HAL_GetREVID>
 80078fe:	4603      	mov	r3, r0
 8007900:	f241 0203 	movw	r2, #4099	; 0x1003
 8007904:	4293      	cmp	r3, r2
 8007906:	d817      	bhi.n	8007938 <HAL_RCC_OscConfig+0x3b0>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a1b      	ldr	r3, [r3, #32]
 800790c:	2b20      	cmp	r3, #32
 800790e:	d108      	bne.n	8007922 <HAL_RCC_OscConfig+0x39a>
 8007910:	4b65      	ldr	r3, [pc, #404]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007918:	4a63      	ldr	r2, [pc, #396]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 800791a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800791e:	6053      	str	r3, [r2, #4]
 8007920:	e02e      	b.n	8007980 <HAL_RCC_OscConfig+0x3f8>
 8007922:	4b61      	ldr	r3, [pc, #388]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	069b      	lsls	r3, r3, #26
 8007930:	495d      	ldr	r1, [pc, #372]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 8007932:	4313      	orrs	r3, r2
 8007934:	604b      	str	r3, [r1, #4]
 8007936:	e023      	b.n	8007980 <HAL_RCC_OscConfig+0x3f8>
 8007938:	4b5b      	ldr	r3, [pc, #364]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a1b      	ldr	r3, [r3, #32]
 8007944:	061b      	lsls	r3, r3, #24
 8007946:	4958      	ldr	r1, [pc, #352]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 8007948:	4313      	orrs	r3, r2
 800794a:	60cb      	str	r3, [r1, #12]
 800794c:	e018      	b.n	8007980 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800794e:	4b56      	ldr	r3, [pc, #344]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a55      	ldr	r2, [pc, #340]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 8007954:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800795a:	f7fa faf1 	bl	8001f40 <HAL_GetTick>
 800795e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007960:	e008      	b.n	8007974 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007962:	f7fa faed 	bl	8001f40 <HAL_GetTick>
 8007966:	4602      	mov	r2, r0
 8007968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	2b02      	cmp	r3, #2
 800796e:	d901      	bls.n	8007974 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007970:	2303      	movs	r3, #3
 8007972:	e212      	b.n	8007d9a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007974:	4b4c      	ldr	r3, [pc, #304]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1f0      	bne.n	8007962 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 0308 	and.w	r3, r3, #8
 8007988:	2b00      	cmp	r3, #0
 800798a:	d036      	beq.n	80079fa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d019      	beq.n	80079c8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007994:	4b44      	ldr	r3, [pc, #272]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 8007996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007998:	4a43      	ldr	r2, [pc, #268]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 800799a:	f043 0301 	orr.w	r3, r3, #1
 800799e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079a0:	f7fa face 	bl	8001f40 <HAL_GetTick>
 80079a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80079a6:	e008      	b.n	80079ba <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079a8:	f7fa faca 	bl	8001f40 <HAL_GetTick>
 80079ac:	4602      	mov	r2, r0
 80079ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d901      	bls.n	80079ba <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e1ef      	b.n	8007d9a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80079ba:	4b3b      	ldr	r3, [pc, #236]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 80079bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d0f0      	beq.n	80079a8 <HAL_RCC_OscConfig+0x420>
 80079c6:	e018      	b.n	80079fa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079c8:	4b37      	ldr	r3, [pc, #220]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 80079ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079cc:	4a36      	ldr	r2, [pc, #216]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 80079ce:	f023 0301 	bic.w	r3, r3, #1
 80079d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079d4:	f7fa fab4 	bl	8001f40 <HAL_GetTick>
 80079d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80079da:	e008      	b.n	80079ee <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079dc:	f7fa fab0 	bl	8001f40 <HAL_GetTick>
 80079e0:	4602      	mov	r2, r0
 80079e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d901      	bls.n	80079ee <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80079ea:	2303      	movs	r3, #3
 80079ec:	e1d5      	b.n	8007d9a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80079ee:	4b2e      	ldr	r3, [pc, #184]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 80079f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079f2:	f003 0302 	and.w	r3, r3, #2
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1f0      	bne.n	80079dc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0320 	and.w	r3, r3, #32
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d036      	beq.n	8007a74 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d019      	beq.n	8007a42 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007a0e:	4b26      	ldr	r3, [pc, #152]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a25      	ldr	r2, [pc, #148]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 8007a14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a18:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007a1a:	f7fa fa91 	bl	8001f40 <HAL_GetTick>
 8007a1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007a20:	e008      	b.n	8007a34 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007a22:	f7fa fa8d 	bl	8001f40 <HAL_GetTick>
 8007a26:	4602      	mov	r2, r0
 8007a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2a:	1ad3      	subs	r3, r2, r3
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d901      	bls.n	8007a34 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007a30:	2303      	movs	r3, #3
 8007a32:	e1b2      	b.n	8007d9a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007a34:	4b1c      	ldr	r3, [pc, #112]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d0f0      	beq.n	8007a22 <HAL_RCC_OscConfig+0x49a>
 8007a40:	e018      	b.n	8007a74 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007a42:	4b19      	ldr	r3, [pc, #100]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a18      	ldr	r2, [pc, #96]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 8007a48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a4c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007a4e:	f7fa fa77 	bl	8001f40 <HAL_GetTick>
 8007a52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007a54:	e008      	b.n	8007a68 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007a56:	f7fa fa73 	bl	8001f40 <HAL_GetTick>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5e:	1ad3      	subs	r3, r2, r3
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d901      	bls.n	8007a68 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8007a64:	2303      	movs	r3, #3
 8007a66:	e198      	b.n	8007d9a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007a68:	4b0f      	ldr	r3, [pc, #60]	; (8007aa8 <HAL_RCC_OscConfig+0x520>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1f0      	bne.n	8007a56 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0304 	and.w	r3, r3, #4
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 8085 	beq.w	8007b8c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007a82:	4b0a      	ldr	r3, [pc, #40]	; (8007aac <HAL_RCC_OscConfig+0x524>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a09      	ldr	r2, [pc, #36]	; (8007aac <HAL_RCC_OscConfig+0x524>)
 8007a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a8e:	f7fa fa57 	bl	8001f40 <HAL_GetTick>
 8007a92:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a94:	e00c      	b.n	8007ab0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007a96:	f7fa fa53 	bl	8001f40 <HAL_GetTick>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	2b64      	cmp	r3, #100	; 0x64
 8007aa2:	d905      	bls.n	8007ab0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	e178      	b.n	8007d9a <HAL_RCC_OscConfig+0x812>
 8007aa8:	58024400 	.word	0x58024400
 8007aac:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ab0:	4b96      	ldr	r3, [pc, #600]	; (8007d0c <HAL_RCC_OscConfig+0x784>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d0ec      	beq.n	8007a96 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d106      	bne.n	8007ad2 <HAL_RCC_OscConfig+0x54a>
 8007ac4:	4b92      	ldr	r3, [pc, #584]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac8:	4a91      	ldr	r2, [pc, #580]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007aca:	f043 0301 	orr.w	r3, r3, #1
 8007ace:	6713      	str	r3, [r2, #112]	; 0x70
 8007ad0:	e02d      	b.n	8007b2e <HAL_RCC_OscConfig+0x5a6>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10c      	bne.n	8007af4 <HAL_RCC_OscConfig+0x56c>
 8007ada:	4b8d      	ldr	r3, [pc, #564]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ade:	4a8c      	ldr	r2, [pc, #560]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007ae0:	f023 0301 	bic.w	r3, r3, #1
 8007ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8007ae6:	4b8a      	ldr	r3, [pc, #552]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aea:	4a89      	ldr	r2, [pc, #548]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007aec:	f023 0304 	bic.w	r3, r3, #4
 8007af0:	6713      	str	r3, [r2, #112]	; 0x70
 8007af2:	e01c      	b.n	8007b2e <HAL_RCC_OscConfig+0x5a6>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	2b05      	cmp	r3, #5
 8007afa:	d10c      	bne.n	8007b16 <HAL_RCC_OscConfig+0x58e>
 8007afc:	4b84      	ldr	r3, [pc, #528]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b00:	4a83      	ldr	r2, [pc, #524]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007b02:	f043 0304 	orr.w	r3, r3, #4
 8007b06:	6713      	str	r3, [r2, #112]	; 0x70
 8007b08:	4b81      	ldr	r3, [pc, #516]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b0c:	4a80      	ldr	r2, [pc, #512]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007b0e:	f043 0301 	orr.w	r3, r3, #1
 8007b12:	6713      	str	r3, [r2, #112]	; 0x70
 8007b14:	e00b      	b.n	8007b2e <HAL_RCC_OscConfig+0x5a6>
 8007b16:	4b7e      	ldr	r3, [pc, #504]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b1a:	4a7d      	ldr	r2, [pc, #500]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007b1c:	f023 0301 	bic.w	r3, r3, #1
 8007b20:	6713      	str	r3, [r2, #112]	; 0x70
 8007b22:	4b7b      	ldr	r3, [pc, #492]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b26:	4a7a      	ldr	r2, [pc, #488]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007b28:	f023 0304 	bic.w	r3, r3, #4
 8007b2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d015      	beq.n	8007b62 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b36:	f7fa fa03 	bl	8001f40 <HAL_GetTick>
 8007b3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b3c:	e00a      	b.n	8007b54 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b3e:	f7fa f9ff 	bl	8001f40 <HAL_GetTick>
 8007b42:	4602      	mov	r2, r0
 8007b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d901      	bls.n	8007b54 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e122      	b.n	8007d9a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b54:	4b6e      	ldr	r3, [pc, #440]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b58:	f003 0302 	and.w	r3, r3, #2
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d0ee      	beq.n	8007b3e <HAL_RCC_OscConfig+0x5b6>
 8007b60:	e014      	b.n	8007b8c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b62:	f7fa f9ed 	bl	8001f40 <HAL_GetTick>
 8007b66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007b68:	e00a      	b.n	8007b80 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b6a:	f7fa f9e9 	bl	8001f40 <HAL_GetTick>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d901      	bls.n	8007b80 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e10c      	b.n	8007d9a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007b80:	4b63      	ldr	r3, [pc, #396]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b84:	f003 0302 	and.w	r3, r3, #2
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1ee      	bne.n	8007b6a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f000 8101 	beq.w	8007d98 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007b96:	4b5e      	ldr	r3, [pc, #376]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b9e:	2b18      	cmp	r3, #24
 8007ba0:	f000 80bc 	beq.w	8007d1c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	f040 8095 	bne.w	8007cd8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bae:	4b58      	ldr	r3, [pc, #352]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a57      	ldr	r2, [pc, #348]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007bb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007bb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bba:	f7fa f9c1 	bl	8001f40 <HAL_GetTick>
 8007bbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007bc0:	e008      	b.n	8007bd4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bc2:	f7fa f9bd 	bl	8001f40 <HAL_GetTick>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bca:	1ad3      	subs	r3, r2, r3
 8007bcc:	2b02      	cmp	r3, #2
 8007bce:	d901      	bls.n	8007bd4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	e0e2      	b.n	8007d9a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007bd4:	4b4e      	ldr	r3, [pc, #312]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1f0      	bne.n	8007bc2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007be0:	4b4b      	ldr	r3, [pc, #300]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007be2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007be4:	4b4b      	ldr	r3, [pc, #300]	; (8007d14 <HAL_RCC_OscConfig+0x78c>)
 8007be6:	4013      	ands	r3, r2
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007bf0:	0112      	lsls	r2, r2, #4
 8007bf2:	430a      	orrs	r2, r1
 8007bf4:	4946      	ldr	r1, [pc, #280]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	628b      	str	r3, [r1, #40]	; 0x28
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	025b      	lsls	r3, r3, #9
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	431a      	orrs	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c14:	3b01      	subs	r3, #1
 8007c16:	041b      	lsls	r3, r3, #16
 8007c18:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c1c:	431a      	orrs	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c22:	3b01      	subs	r3, #1
 8007c24:	061b      	lsls	r3, r3, #24
 8007c26:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c2a:	4939      	ldr	r1, [pc, #228]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007c30:	4b37      	ldr	r3, [pc, #220]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c34:	4a36      	ldr	r2, [pc, #216]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007c36:	f023 0301 	bic.w	r3, r3, #1
 8007c3a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007c3c:	4b34      	ldr	r3, [pc, #208]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c40:	4b35      	ldr	r3, [pc, #212]	; (8007d18 <HAL_RCC_OscConfig+0x790>)
 8007c42:	4013      	ands	r3, r2
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007c48:	00d2      	lsls	r2, r2, #3
 8007c4a:	4931      	ldr	r1, [pc, #196]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007c50:	4b2f      	ldr	r3, [pc, #188]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c54:	f023 020c 	bic.w	r2, r3, #12
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5c:	492c      	ldr	r1, [pc, #176]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007c62:	4b2b      	ldr	r3, [pc, #172]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c66:	f023 0202 	bic.w	r2, r3, #2
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c6e:	4928      	ldr	r1, [pc, #160]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007c70:	4313      	orrs	r3, r2
 8007c72:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007c74:	4b26      	ldr	r3, [pc, #152]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c78:	4a25      	ldr	r2, [pc, #148]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c80:	4b23      	ldr	r3, [pc, #140]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c84:	4a22      	ldr	r2, [pc, #136]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007c86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007c8c:	4b20      	ldr	r3, [pc, #128]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c90:	4a1f      	ldr	r2, [pc, #124]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007c92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007c98:	4b1d      	ldr	r3, [pc, #116]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9c:	4a1c      	ldr	r2, [pc, #112]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007c9e:	f043 0301 	orr.w	r3, r3, #1
 8007ca2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ca4:	4b1a      	ldr	r3, [pc, #104]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a19      	ldr	r2, [pc, #100]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007caa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007cae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cb0:	f7fa f946 	bl	8001f40 <HAL_GetTick>
 8007cb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007cb6:	e008      	b.n	8007cca <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007cb8:	f7fa f942 	bl	8001f40 <HAL_GetTick>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d901      	bls.n	8007cca <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e067      	b.n	8007d9a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007cca:	4b11      	ldr	r3, [pc, #68]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d0f0      	beq.n	8007cb8 <HAL_RCC_OscConfig+0x730>
 8007cd6:	e05f      	b.n	8007d98 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cd8:	4b0d      	ldr	r3, [pc, #52]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a0c      	ldr	r2, [pc, #48]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007cde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ce4:	f7fa f92c 	bl	8001f40 <HAL_GetTick>
 8007ce8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007cea:	e008      	b.n	8007cfe <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007cec:	f7fa f928 	bl	8001f40 <HAL_GetTick>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d901      	bls.n	8007cfe <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e04d      	b.n	8007d9a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007cfe:	4b04      	ldr	r3, [pc, #16]	; (8007d10 <HAL_RCC_OscConfig+0x788>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1f0      	bne.n	8007cec <HAL_RCC_OscConfig+0x764>
 8007d0a:	e045      	b.n	8007d98 <HAL_RCC_OscConfig+0x810>
 8007d0c:	58024800 	.word	0x58024800
 8007d10:	58024400 	.word	0x58024400
 8007d14:	fffffc0c 	.word	0xfffffc0c
 8007d18:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007d1c:	4b21      	ldr	r3, [pc, #132]	; (8007da4 <HAL_RCC_OscConfig+0x81c>)
 8007d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d20:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007d22:	4b20      	ldr	r3, [pc, #128]	; (8007da4 <HAL_RCC_OscConfig+0x81c>)
 8007d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d26:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d031      	beq.n	8007d94 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	f003 0203 	and.w	r2, r3, #3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d12a      	bne.n	8007d94 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	091b      	lsrs	r3, r3, #4
 8007d42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d122      	bne.n	8007d94 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d58:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d11a      	bne.n	8007d94 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	0a5b      	lsrs	r3, r3, #9
 8007d62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d6a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d111      	bne.n	8007d94 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	0c1b      	lsrs	r3, r3, #16
 8007d74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d108      	bne.n	8007d94 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	0e1b      	lsrs	r3, r3, #24
 8007d86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d8e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d001      	beq.n	8007d98 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	e000      	b.n	8007d9a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3730      	adds	r7, #48	; 0x30
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	58024400 	.word	0x58024400

08007da8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d101      	bne.n	8007dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	e19c      	b.n	80080f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007dbc:	4b8a      	ldr	r3, [pc, #552]	; (8007fe8 <HAL_RCC_ClockConfig+0x240>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 030f 	and.w	r3, r3, #15
 8007dc4:	683a      	ldr	r2, [r7, #0]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d910      	bls.n	8007dec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dca:	4b87      	ldr	r3, [pc, #540]	; (8007fe8 <HAL_RCC_ClockConfig+0x240>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f023 020f 	bic.w	r2, r3, #15
 8007dd2:	4985      	ldr	r1, [pc, #532]	; (8007fe8 <HAL_RCC_ClockConfig+0x240>)
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dda:	4b83      	ldr	r3, [pc, #524]	; (8007fe8 <HAL_RCC_ClockConfig+0x240>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 030f 	and.w	r3, r3, #15
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d001      	beq.n	8007dec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e184      	b.n	80080f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 0304 	and.w	r3, r3, #4
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d010      	beq.n	8007e1a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	691a      	ldr	r2, [r3, #16]
 8007dfc:	4b7b      	ldr	r3, [pc, #492]	; (8007fec <HAL_RCC_ClockConfig+0x244>)
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d908      	bls.n	8007e1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007e08:	4b78      	ldr	r3, [pc, #480]	; (8007fec <HAL_RCC_ClockConfig+0x244>)
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	4975      	ldr	r1, [pc, #468]	; (8007fec <HAL_RCC_ClockConfig+0x244>)
 8007e16:	4313      	orrs	r3, r2
 8007e18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 0308 	and.w	r3, r3, #8
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d010      	beq.n	8007e48 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	695a      	ldr	r2, [r3, #20]
 8007e2a:	4b70      	ldr	r3, [pc, #448]	; (8007fec <HAL_RCC_ClockConfig+0x244>)
 8007e2c:	69db      	ldr	r3, [r3, #28]
 8007e2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d908      	bls.n	8007e48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007e36:	4b6d      	ldr	r3, [pc, #436]	; (8007fec <HAL_RCC_ClockConfig+0x244>)
 8007e38:	69db      	ldr	r3, [r3, #28]
 8007e3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	496a      	ldr	r1, [pc, #424]	; (8007fec <HAL_RCC_ClockConfig+0x244>)
 8007e44:	4313      	orrs	r3, r2
 8007e46:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 0310 	and.w	r3, r3, #16
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d010      	beq.n	8007e76 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	699a      	ldr	r2, [r3, #24]
 8007e58:	4b64      	ldr	r3, [pc, #400]	; (8007fec <HAL_RCC_ClockConfig+0x244>)
 8007e5a:	69db      	ldr	r3, [r3, #28]
 8007e5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d908      	bls.n	8007e76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007e64:	4b61      	ldr	r3, [pc, #388]	; (8007fec <HAL_RCC_ClockConfig+0x244>)
 8007e66:	69db      	ldr	r3, [r3, #28]
 8007e68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	699b      	ldr	r3, [r3, #24]
 8007e70:	495e      	ldr	r1, [pc, #376]	; (8007fec <HAL_RCC_ClockConfig+0x244>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 0320 	and.w	r3, r3, #32
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d010      	beq.n	8007ea4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	69da      	ldr	r2, [r3, #28]
 8007e86:	4b59      	ldr	r3, [pc, #356]	; (8007fec <HAL_RCC_ClockConfig+0x244>)
 8007e88:	6a1b      	ldr	r3, [r3, #32]
 8007e8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d908      	bls.n	8007ea4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007e92:	4b56      	ldr	r3, [pc, #344]	; (8007fec <HAL_RCC_ClockConfig+0x244>)
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	69db      	ldr	r3, [r3, #28]
 8007e9e:	4953      	ldr	r1, [pc, #332]	; (8007fec <HAL_RCC_ClockConfig+0x244>)
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 0302 	and.w	r3, r3, #2
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d010      	beq.n	8007ed2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	68da      	ldr	r2, [r3, #12]
 8007eb4:	4b4d      	ldr	r3, [pc, #308]	; (8007fec <HAL_RCC_ClockConfig+0x244>)
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	f003 030f 	and.w	r3, r3, #15
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d908      	bls.n	8007ed2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ec0:	4b4a      	ldr	r3, [pc, #296]	; (8007fec <HAL_RCC_ClockConfig+0x244>)
 8007ec2:	699b      	ldr	r3, [r3, #24]
 8007ec4:	f023 020f 	bic.w	r2, r3, #15
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	4947      	ldr	r1, [pc, #284]	; (8007fec <HAL_RCC_ClockConfig+0x244>)
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d055      	beq.n	8007f8a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007ede:	4b43      	ldr	r3, [pc, #268]	; (8007fec <HAL_RCC_ClockConfig+0x244>)
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	4940      	ldr	r1, [pc, #256]	; (8007fec <HAL_RCC_ClockConfig+0x244>)
 8007eec:	4313      	orrs	r3, r2
 8007eee:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	d107      	bne.n	8007f08 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ef8:	4b3c      	ldr	r3, [pc, #240]	; (8007fec <HAL_RCC_ClockConfig+0x244>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d121      	bne.n	8007f48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	e0f6      	b.n	80080f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	2b03      	cmp	r3, #3
 8007f0e:	d107      	bne.n	8007f20 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f10:	4b36      	ldr	r3, [pc, #216]	; (8007fec <HAL_RCC_ClockConfig+0x244>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d115      	bne.n	8007f48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e0ea      	b.n	80080f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d107      	bne.n	8007f38 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007f28:	4b30      	ldr	r3, [pc, #192]	; (8007fec <HAL_RCC_ClockConfig+0x244>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d109      	bne.n	8007f48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e0de      	b.n	80080f6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f38:	4b2c      	ldr	r3, [pc, #176]	; (8007fec <HAL_RCC_ClockConfig+0x244>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0304 	and.w	r3, r3, #4
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d101      	bne.n	8007f48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e0d6      	b.n	80080f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007f48:	4b28      	ldr	r3, [pc, #160]	; (8007fec <HAL_RCC_ClockConfig+0x244>)
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	f023 0207 	bic.w	r2, r3, #7
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	4925      	ldr	r1, [pc, #148]	; (8007fec <HAL_RCC_ClockConfig+0x244>)
 8007f56:	4313      	orrs	r3, r2
 8007f58:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f5a:	f7f9 fff1 	bl	8001f40 <HAL_GetTick>
 8007f5e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f60:	e00a      	b.n	8007f78 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f62:	f7f9 ffed 	bl	8001f40 <HAL_GetTick>
 8007f66:	4602      	mov	r2, r0
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d901      	bls.n	8007f78 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007f74:	2303      	movs	r3, #3
 8007f76:	e0be      	b.n	80080f6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f78:	4b1c      	ldr	r3, [pc, #112]	; (8007fec <HAL_RCC_ClockConfig+0x244>)
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	00db      	lsls	r3, r3, #3
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d1eb      	bne.n	8007f62 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 0302 	and.w	r3, r3, #2
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d010      	beq.n	8007fb8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	68da      	ldr	r2, [r3, #12]
 8007f9a:	4b14      	ldr	r3, [pc, #80]	; (8007fec <HAL_RCC_ClockConfig+0x244>)
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	f003 030f 	and.w	r3, r3, #15
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d208      	bcs.n	8007fb8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fa6:	4b11      	ldr	r3, [pc, #68]	; (8007fec <HAL_RCC_ClockConfig+0x244>)
 8007fa8:	699b      	ldr	r3, [r3, #24]
 8007faa:	f023 020f 	bic.w	r2, r3, #15
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	490e      	ldr	r1, [pc, #56]	; (8007fec <HAL_RCC_ClockConfig+0x244>)
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007fb8:	4b0b      	ldr	r3, [pc, #44]	; (8007fe8 <HAL_RCC_ClockConfig+0x240>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 030f 	and.w	r3, r3, #15
 8007fc0:	683a      	ldr	r2, [r7, #0]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d214      	bcs.n	8007ff0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fc6:	4b08      	ldr	r3, [pc, #32]	; (8007fe8 <HAL_RCC_ClockConfig+0x240>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f023 020f 	bic.w	r2, r3, #15
 8007fce:	4906      	ldr	r1, [pc, #24]	; (8007fe8 <HAL_RCC_ClockConfig+0x240>)
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fd6:	4b04      	ldr	r3, [pc, #16]	; (8007fe8 <HAL_RCC_ClockConfig+0x240>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f003 030f 	and.w	r3, r3, #15
 8007fde:	683a      	ldr	r2, [r7, #0]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d005      	beq.n	8007ff0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e086      	b.n	80080f6 <HAL_RCC_ClockConfig+0x34e>
 8007fe8:	52002000 	.word	0x52002000
 8007fec:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 0304 	and.w	r3, r3, #4
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d010      	beq.n	800801e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	691a      	ldr	r2, [r3, #16]
 8008000:	4b3f      	ldr	r3, [pc, #252]	; (8008100 <HAL_RCC_ClockConfig+0x358>)
 8008002:	699b      	ldr	r3, [r3, #24]
 8008004:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008008:	429a      	cmp	r2, r3
 800800a:	d208      	bcs.n	800801e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800800c:	4b3c      	ldr	r3, [pc, #240]	; (8008100 <HAL_RCC_ClockConfig+0x358>)
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	4939      	ldr	r1, [pc, #228]	; (8008100 <HAL_RCC_ClockConfig+0x358>)
 800801a:	4313      	orrs	r3, r2
 800801c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0308 	and.w	r3, r3, #8
 8008026:	2b00      	cmp	r3, #0
 8008028:	d010      	beq.n	800804c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	695a      	ldr	r2, [r3, #20]
 800802e:	4b34      	ldr	r3, [pc, #208]	; (8008100 <HAL_RCC_ClockConfig+0x358>)
 8008030:	69db      	ldr	r3, [r3, #28]
 8008032:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008036:	429a      	cmp	r2, r3
 8008038:	d208      	bcs.n	800804c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800803a:	4b31      	ldr	r3, [pc, #196]	; (8008100 <HAL_RCC_ClockConfig+0x358>)
 800803c:	69db      	ldr	r3, [r3, #28]
 800803e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	695b      	ldr	r3, [r3, #20]
 8008046:	492e      	ldr	r1, [pc, #184]	; (8008100 <HAL_RCC_ClockConfig+0x358>)
 8008048:	4313      	orrs	r3, r2
 800804a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 0310 	and.w	r3, r3, #16
 8008054:	2b00      	cmp	r3, #0
 8008056:	d010      	beq.n	800807a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	699a      	ldr	r2, [r3, #24]
 800805c:	4b28      	ldr	r3, [pc, #160]	; (8008100 <HAL_RCC_ClockConfig+0x358>)
 800805e:	69db      	ldr	r3, [r3, #28]
 8008060:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008064:	429a      	cmp	r2, r3
 8008066:	d208      	bcs.n	800807a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008068:	4b25      	ldr	r3, [pc, #148]	; (8008100 <HAL_RCC_ClockConfig+0x358>)
 800806a:	69db      	ldr	r3, [r3, #28]
 800806c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	699b      	ldr	r3, [r3, #24]
 8008074:	4922      	ldr	r1, [pc, #136]	; (8008100 <HAL_RCC_ClockConfig+0x358>)
 8008076:	4313      	orrs	r3, r2
 8008078:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f003 0320 	and.w	r3, r3, #32
 8008082:	2b00      	cmp	r3, #0
 8008084:	d010      	beq.n	80080a8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	69da      	ldr	r2, [r3, #28]
 800808a:	4b1d      	ldr	r3, [pc, #116]	; (8008100 <HAL_RCC_ClockConfig+0x358>)
 800808c:	6a1b      	ldr	r3, [r3, #32]
 800808e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008092:	429a      	cmp	r2, r3
 8008094:	d208      	bcs.n	80080a8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008096:	4b1a      	ldr	r3, [pc, #104]	; (8008100 <HAL_RCC_ClockConfig+0x358>)
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	69db      	ldr	r3, [r3, #28]
 80080a2:	4917      	ldr	r1, [pc, #92]	; (8008100 <HAL_RCC_ClockConfig+0x358>)
 80080a4:	4313      	orrs	r3, r2
 80080a6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80080a8:	f000 f834 	bl	8008114 <HAL_RCC_GetSysClockFreq>
 80080ac:	4602      	mov	r2, r0
 80080ae:	4b14      	ldr	r3, [pc, #80]	; (8008100 <HAL_RCC_ClockConfig+0x358>)
 80080b0:	699b      	ldr	r3, [r3, #24]
 80080b2:	0a1b      	lsrs	r3, r3, #8
 80080b4:	f003 030f 	and.w	r3, r3, #15
 80080b8:	4912      	ldr	r1, [pc, #72]	; (8008104 <HAL_RCC_ClockConfig+0x35c>)
 80080ba:	5ccb      	ldrb	r3, [r1, r3]
 80080bc:	f003 031f 	and.w	r3, r3, #31
 80080c0:	fa22 f303 	lsr.w	r3, r2, r3
 80080c4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80080c6:	4b0e      	ldr	r3, [pc, #56]	; (8008100 <HAL_RCC_ClockConfig+0x358>)
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	f003 030f 	and.w	r3, r3, #15
 80080ce:	4a0d      	ldr	r2, [pc, #52]	; (8008104 <HAL_RCC_ClockConfig+0x35c>)
 80080d0:	5cd3      	ldrb	r3, [r2, r3]
 80080d2:	f003 031f 	and.w	r3, r3, #31
 80080d6:	693a      	ldr	r2, [r7, #16]
 80080d8:	fa22 f303 	lsr.w	r3, r2, r3
 80080dc:	4a0a      	ldr	r2, [pc, #40]	; (8008108 <HAL_RCC_ClockConfig+0x360>)
 80080de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80080e0:	4a0a      	ldr	r2, [pc, #40]	; (800810c <HAL_RCC_ClockConfig+0x364>)
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80080e6:	4b0a      	ldr	r3, [pc, #40]	; (8008110 <HAL_RCC_ClockConfig+0x368>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7f9 fede 	bl	8001eac <HAL_InitTick>
 80080f0:	4603      	mov	r3, r0
 80080f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80080f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3718      	adds	r7, #24
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	58024400 	.word	0x58024400
 8008104:	0800fe14 	.word	0x0800fe14
 8008108:	24000004 	.word	0x24000004
 800810c:	24000000 	.word	0x24000000
 8008110:	24000018 	.word	0x24000018

08008114 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008114:	b480      	push	{r7}
 8008116:	b089      	sub	sp, #36	; 0x24
 8008118:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800811a:	4bb3      	ldr	r3, [pc, #716]	; (80083e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008122:	2b18      	cmp	r3, #24
 8008124:	f200 8155 	bhi.w	80083d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8008128:	a201      	add	r2, pc, #4	; (adr r2, 8008130 <HAL_RCC_GetSysClockFreq+0x1c>)
 800812a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812e:	bf00      	nop
 8008130:	08008195 	.word	0x08008195
 8008134:	080083d3 	.word	0x080083d3
 8008138:	080083d3 	.word	0x080083d3
 800813c:	080083d3 	.word	0x080083d3
 8008140:	080083d3 	.word	0x080083d3
 8008144:	080083d3 	.word	0x080083d3
 8008148:	080083d3 	.word	0x080083d3
 800814c:	080083d3 	.word	0x080083d3
 8008150:	080081bb 	.word	0x080081bb
 8008154:	080083d3 	.word	0x080083d3
 8008158:	080083d3 	.word	0x080083d3
 800815c:	080083d3 	.word	0x080083d3
 8008160:	080083d3 	.word	0x080083d3
 8008164:	080083d3 	.word	0x080083d3
 8008168:	080083d3 	.word	0x080083d3
 800816c:	080083d3 	.word	0x080083d3
 8008170:	080081c1 	.word	0x080081c1
 8008174:	080083d3 	.word	0x080083d3
 8008178:	080083d3 	.word	0x080083d3
 800817c:	080083d3 	.word	0x080083d3
 8008180:	080083d3 	.word	0x080083d3
 8008184:	080083d3 	.word	0x080083d3
 8008188:	080083d3 	.word	0x080083d3
 800818c:	080083d3 	.word	0x080083d3
 8008190:	080081c7 	.word	0x080081c7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008194:	4b94      	ldr	r3, [pc, #592]	; (80083e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 0320 	and.w	r3, r3, #32
 800819c:	2b00      	cmp	r3, #0
 800819e:	d009      	beq.n	80081b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80081a0:	4b91      	ldr	r3, [pc, #580]	; (80083e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	08db      	lsrs	r3, r3, #3
 80081a6:	f003 0303 	and.w	r3, r3, #3
 80081aa:	4a90      	ldr	r2, [pc, #576]	; (80083ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80081ac:	fa22 f303 	lsr.w	r3, r2, r3
 80081b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80081b2:	e111      	b.n	80083d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80081b4:	4b8d      	ldr	r3, [pc, #564]	; (80083ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80081b6:	61bb      	str	r3, [r7, #24]
    break;
 80081b8:	e10e      	b.n	80083d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80081ba:	4b8d      	ldr	r3, [pc, #564]	; (80083f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80081bc:	61bb      	str	r3, [r7, #24]
    break;
 80081be:	e10b      	b.n	80083d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80081c0:	4b8c      	ldr	r3, [pc, #560]	; (80083f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80081c2:	61bb      	str	r3, [r7, #24]
    break;
 80081c4:	e108      	b.n	80083d8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081c6:	4b88      	ldr	r3, [pc, #544]	; (80083e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ca:	f003 0303 	and.w	r3, r3, #3
 80081ce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80081d0:	4b85      	ldr	r3, [pc, #532]	; (80083e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d4:	091b      	lsrs	r3, r3, #4
 80081d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081da:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80081dc:	4b82      	ldr	r3, [pc, #520]	; (80083e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80081e6:	4b80      	ldr	r3, [pc, #512]	; (80083e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ea:	08db      	lsrs	r3, r3, #3
 80081ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	fb02 f303 	mul.w	r3, r2, r3
 80081f6:	ee07 3a90 	vmov	s15, r3
 80081fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081fe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	2b00      	cmp	r3, #0
 8008206:	f000 80e1 	beq.w	80083cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	2b02      	cmp	r3, #2
 800820e:	f000 8083 	beq.w	8008318 <HAL_RCC_GetSysClockFreq+0x204>
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	2b02      	cmp	r3, #2
 8008216:	f200 80a1 	bhi.w	800835c <HAL_RCC_GetSysClockFreq+0x248>
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d003      	beq.n	8008228 <HAL_RCC_GetSysClockFreq+0x114>
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d056      	beq.n	80082d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008226:	e099      	b.n	800835c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008228:	4b6f      	ldr	r3, [pc, #444]	; (80083e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 0320 	and.w	r3, r3, #32
 8008230:	2b00      	cmp	r3, #0
 8008232:	d02d      	beq.n	8008290 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008234:	4b6c      	ldr	r3, [pc, #432]	; (80083e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	08db      	lsrs	r3, r3, #3
 800823a:	f003 0303 	and.w	r3, r3, #3
 800823e:	4a6b      	ldr	r2, [pc, #428]	; (80083ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008240:	fa22 f303 	lsr.w	r3, r2, r3
 8008244:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	ee07 3a90 	vmov	s15, r3
 800824c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	ee07 3a90 	vmov	s15, r3
 8008256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800825a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800825e:	4b62      	ldr	r3, [pc, #392]	; (80083e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008266:	ee07 3a90 	vmov	s15, r3
 800826a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800826e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008272:	eddf 5a61 	vldr	s11, [pc, #388]	; 80083f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800827a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800827e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800828a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800828e:	e087      	b.n	80083a0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	ee07 3a90 	vmov	s15, r3
 8008296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800829a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80083fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800829e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082a2:	4b51      	ldr	r3, [pc, #324]	; (80083e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082aa:	ee07 3a90 	vmov	s15, r3
 80082ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80082b6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80083f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80082ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082d2:	e065      	b.n	80083a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	ee07 3a90 	vmov	s15, r3
 80082da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082de:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008400 <HAL_RCC_GetSysClockFreq+0x2ec>
 80082e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082e6:	4b40      	ldr	r3, [pc, #256]	; (80083e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ee:	ee07 3a90 	vmov	s15, r3
 80082f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80082fa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80083f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80082fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800830a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800830e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008312:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008316:	e043      	b.n	80083a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	ee07 3a90 	vmov	s15, r3
 800831e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008322:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008404 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800832a:	4b2f      	ldr	r3, [pc, #188]	; (80083e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800832c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800832e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008332:	ee07 3a90 	vmov	s15, r3
 8008336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800833a:	ed97 6a02 	vldr	s12, [r7, #8]
 800833e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80083f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800834a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800834e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008356:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800835a:	e021      	b.n	80083a0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	ee07 3a90 	vmov	s15, r3
 8008362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008366:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008400 <HAL_RCC_GetSysClockFreq+0x2ec>
 800836a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800836e:	4b1e      	ldr	r3, [pc, #120]	; (80083e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008376:	ee07 3a90 	vmov	s15, r3
 800837a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800837e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008382:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80083f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800838a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800838e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800839a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800839e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80083a0:	4b11      	ldr	r3, [pc, #68]	; (80083e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083a4:	0a5b      	lsrs	r3, r3, #9
 80083a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083aa:	3301      	adds	r3, #1
 80083ac:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	ee07 3a90 	vmov	s15, r3
 80083b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80083b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80083bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083c4:	ee17 3a90 	vmov	r3, s15
 80083c8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80083ca:	e005      	b.n	80083d8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80083cc:	2300      	movs	r3, #0
 80083ce:	61bb      	str	r3, [r7, #24]
    break;
 80083d0:	e002      	b.n	80083d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80083d2:	4b07      	ldr	r3, [pc, #28]	; (80083f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80083d4:	61bb      	str	r3, [r7, #24]
    break;
 80083d6:	bf00      	nop
  }

  return sysclockfreq;
 80083d8:	69bb      	ldr	r3, [r7, #24]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3724      	adds	r7, #36	; 0x24
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	58024400 	.word	0x58024400
 80083ec:	03d09000 	.word	0x03d09000
 80083f0:	003d0900 	.word	0x003d0900
 80083f4:	007a1200 	.word	0x007a1200
 80083f8:	46000000 	.word	0x46000000
 80083fc:	4c742400 	.word	0x4c742400
 8008400:	4a742400 	.word	0x4a742400
 8008404:	4af42400 	.word	0x4af42400

08008408 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800840e:	f7ff fe81 	bl	8008114 <HAL_RCC_GetSysClockFreq>
 8008412:	4602      	mov	r2, r0
 8008414:	4b10      	ldr	r3, [pc, #64]	; (8008458 <HAL_RCC_GetHCLKFreq+0x50>)
 8008416:	699b      	ldr	r3, [r3, #24]
 8008418:	0a1b      	lsrs	r3, r3, #8
 800841a:	f003 030f 	and.w	r3, r3, #15
 800841e:	490f      	ldr	r1, [pc, #60]	; (800845c <HAL_RCC_GetHCLKFreq+0x54>)
 8008420:	5ccb      	ldrb	r3, [r1, r3]
 8008422:	f003 031f 	and.w	r3, r3, #31
 8008426:	fa22 f303 	lsr.w	r3, r2, r3
 800842a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800842c:	4b0a      	ldr	r3, [pc, #40]	; (8008458 <HAL_RCC_GetHCLKFreq+0x50>)
 800842e:	699b      	ldr	r3, [r3, #24]
 8008430:	f003 030f 	and.w	r3, r3, #15
 8008434:	4a09      	ldr	r2, [pc, #36]	; (800845c <HAL_RCC_GetHCLKFreq+0x54>)
 8008436:	5cd3      	ldrb	r3, [r2, r3]
 8008438:	f003 031f 	and.w	r3, r3, #31
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	fa22 f303 	lsr.w	r3, r2, r3
 8008442:	4a07      	ldr	r2, [pc, #28]	; (8008460 <HAL_RCC_GetHCLKFreq+0x58>)
 8008444:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008446:	4a07      	ldr	r2, [pc, #28]	; (8008464 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800844c:	4b04      	ldr	r3, [pc, #16]	; (8008460 <HAL_RCC_GetHCLKFreq+0x58>)
 800844e:	681b      	ldr	r3, [r3, #0]
}
 8008450:	4618      	mov	r0, r3
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	58024400 	.word	0x58024400
 800845c:	0800fe14 	.word	0x0800fe14
 8008460:	24000004 	.word	0x24000004
 8008464:	24000000 	.word	0x24000000

08008468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800846c:	f7ff ffcc 	bl	8008408 <HAL_RCC_GetHCLKFreq>
 8008470:	4602      	mov	r2, r0
 8008472:	4b06      	ldr	r3, [pc, #24]	; (800848c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008474:	69db      	ldr	r3, [r3, #28]
 8008476:	091b      	lsrs	r3, r3, #4
 8008478:	f003 0307 	and.w	r3, r3, #7
 800847c:	4904      	ldr	r1, [pc, #16]	; (8008490 <HAL_RCC_GetPCLK1Freq+0x28>)
 800847e:	5ccb      	ldrb	r3, [r1, r3]
 8008480:	f003 031f 	and.w	r3, r3, #31
 8008484:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008488:	4618      	mov	r0, r3
 800848a:	bd80      	pop	{r7, pc}
 800848c:	58024400 	.word	0x58024400
 8008490:	0800fe14 	.word	0x0800fe14

08008494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008498:	f7ff ffb6 	bl	8008408 <HAL_RCC_GetHCLKFreq>
 800849c:	4602      	mov	r2, r0
 800849e:	4b06      	ldr	r3, [pc, #24]	; (80084b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80084a0:	69db      	ldr	r3, [r3, #28]
 80084a2:	0a1b      	lsrs	r3, r3, #8
 80084a4:	f003 0307 	and.w	r3, r3, #7
 80084a8:	4904      	ldr	r1, [pc, #16]	; (80084bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80084aa:	5ccb      	ldrb	r3, [r1, r3]
 80084ac:	f003 031f 	and.w	r3, r3, #31
 80084b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	58024400 	.word	0x58024400
 80084bc:	0800fe14 	.word	0x0800fe14

080084c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80084c8:	2300      	movs	r3, #0
 80084ca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80084cc:	2300      	movs	r3, #0
 80084ce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d03f      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80084e4:	d02a      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80084e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80084ea:	d824      	bhi.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80084ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084f0:	d018      	beq.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80084f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084f6:	d81e      	bhi.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d003      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80084fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008500:	d007      	beq.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008502:	e018      	b.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008504:	4bab      	ldr	r3, [pc, #684]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008508:	4aaa      	ldr	r2, [pc, #680]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800850a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800850e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008510:	e015      	b.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	3304      	adds	r3, #4
 8008516:	2102      	movs	r1, #2
 8008518:	4618      	mov	r0, r3
 800851a:	f001 fff3 	bl	800a504 <RCCEx_PLL2_Config>
 800851e:	4603      	mov	r3, r0
 8008520:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008522:	e00c      	b.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	3324      	adds	r3, #36	; 0x24
 8008528:	2102      	movs	r1, #2
 800852a:	4618      	mov	r0, r3
 800852c:	f002 f89c 	bl	800a668 <RCCEx_PLL3_Config>
 8008530:	4603      	mov	r3, r0
 8008532:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008534:	e003      	b.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	75fb      	strb	r3, [r7, #23]
      break;
 800853a:	e000      	b.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800853c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800853e:	7dfb      	ldrb	r3, [r7, #23]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d109      	bne.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008544:	4b9b      	ldr	r3, [pc, #620]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008548:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008550:	4998      	ldr	r1, [pc, #608]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008552:	4313      	orrs	r3, r2
 8008554:	650b      	str	r3, [r1, #80]	; 0x50
 8008556:	e001      	b.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008558:	7dfb      	ldrb	r3, [r7, #23]
 800855a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008564:	2b00      	cmp	r3, #0
 8008566:	d03d      	beq.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800856c:	2b04      	cmp	r3, #4
 800856e:	d826      	bhi.n	80085be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008570:	a201      	add	r2, pc, #4	; (adr r2, 8008578 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008576:	bf00      	nop
 8008578:	0800858d 	.word	0x0800858d
 800857c:	0800859b 	.word	0x0800859b
 8008580:	080085ad 	.word	0x080085ad
 8008584:	080085c5 	.word	0x080085c5
 8008588:	080085c5 	.word	0x080085c5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800858c:	4b89      	ldr	r3, [pc, #548]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800858e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008590:	4a88      	ldr	r2, [pc, #544]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008596:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008598:	e015      	b.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	3304      	adds	r3, #4
 800859e:	2100      	movs	r1, #0
 80085a0:	4618      	mov	r0, r3
 80085a2:	f001 ffaf 	bl	800a504 <RCCEx_PLL2_Config>
 80085a6:	4603      	mov	r3, r0
 80085a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80085aa:	e00c      	b.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	3324      	adds	r3, #36	; 0x24
 80085b0:	2100      	movs	r1, #0
 80085b2:	4618      	mov	r0, r3
 80085b4:	f002 f858 	bl	800a668 <RCCEx_PLL3_Config>
 80085b8:	4603      	mov	r3, r0
 80085ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80085bc:	e003      	b.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	75fb      	strb	r3, [r7, #23]
      break;
 80085c2:	e000      	b.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80085c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085c6:	7dfb      	ldrb	r3, [r7, #23]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d109      	bne.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80085cc:	4b79      	ldr	r3, [pc, #484]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085d0:	f023 0207 	bic.w	r2, r3, #7
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085d8:	4976      	ldr	r1, [pc, #472]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085da:	4313      	orrs	r3, r2
 80085dc:	650b      	str	r3, [r1, #80]	; 0x50
 80085de:	e001      	b.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085e0:	7dfb      	ldrb	r3, [r7, #23]
 80085e2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d042      	beq.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085f8:	d02b      	beq.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80085fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085fe:	d825      	bhi.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008600:	2bc0      	cmp	r3, #192	; 0xc0
 8008602:	d028      	beq.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008604:	2bc0      	cmp	r3, #192	; 0xc0
 8008606:	d821      	bhi.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008608:	2b80      	cmp	r3, #128	; 0x80
 800860a:	d016      	beq.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800860c:	2b80      	cmp	r3, #128	; 0x80
 800860e:	d81d      	bhi.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008610:	2b00      	cmp	r3, #0
 8008612:	d002      	beq.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008614:	2b40      	cmp	r3, #64	; 0x40
 8008616:	d007      	beq.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008618:	e018      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800861a:	4b66      	ldr	r3, [pc, #408]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800861c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861e:	4a65      	ldr	r2, [pc, #404]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008624:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008626:	e017      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	3304      	adds	r3, #4
 800862c:	2100      	movs	r1, #0
 800862e:	4618      	mov	r0, r3
 8008630:	f001 ff68 	bl	800a504 <RCCEx_PLL2_Config>
 8008634:	4603      	mov	r3, r0
 8008636:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008638:	e00e      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	3324      	adds	r3, #36	; 0x24
 800863e:	2100      	movs	r1, #0
 8008640:	4618      	mov	r0, r3
 8008642:	f002 f811 	bl	800a668 <RCCEx_PLL3_Config>
 8008646:	4603      	mov	r3, r0
 8008648:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800864a:	e005      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	75fb      	strb	r3, [r7, #23]
      break;
 8008650:	e002      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008652:	bf00      	nop
 8008654:	e000      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008656:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008658:	7dfb      	ldrb	r3, [r7, #23]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d109      	bne.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800865e:	4b55      	ldr	r3, [pc, #340]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008662:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800866a:	4952      	ldr	r1, [pc, #328]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800866c:	4313      	orrs	r3, r2
 800866e:	650b      	str	r3, [r1, #80]	; 0x50
 8008670:	e001      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008672:	7dfb      	ldrb	r3, [r7, #23]
 8008674:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800867e:	2b00      	cmp	r3, #0
 8008680:	d049      	beq.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008688:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800868c:	d030      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800868e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008692:	d82a      	bhi.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008694:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008698:	d02c      	beq.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800869a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800869e:	d824      	bhi.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80086a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086a4:	d018      	beq.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80086a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086aa:	d81e      	bhi.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d003      	beq.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80086b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086b4:	d007      	beq.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80086b6:	e018      	b.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086b8:	4b3e      	ldr	r3, [pc, #248]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80086ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086bc:	4a3d      	ldr	r2, [pc, #244]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80086be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80086c4:	e017      	b.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	3304      	adds	r3, #4
 80086ca:	2100      	movs	r1, #0
 80086cc:	4618      	mov	r0, r3
 80086ce:	f001 ff19 	bl	800a504 <RCCEx_PLL2_Config>
 80086d2:	4603      	mov	r3, r0
 80086d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80086d6:	e00e      	b.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	3324      	adds	r3, #36	; 0x24
 80086dc:	2100      	movs	r1, #0
 80086de:	4618      	mov	r0, r3
 80086e0:	f001 ffc2 	bl	800a668 <RCCEx_PLL3_Config>
 80086e4:	4603      	mov	r3, r0
 80086e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80086e8:	e005      	b.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	75fb      	strb	r3, [r7, #23]
      break;
 80086ee:	e002      	b.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80086f0:	bf00      	nop
 80086f2:	e000      	b.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80086f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086f6:	7dfb      	ldrb	r3, [r7, #23]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d10a      	bne.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80086fc:	4b2d      	ldr	r3, [pc, #180]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80086fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008700:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800870a:	492a      	ldr	r1, [pc, #168]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800870c:	4313      	orrs	r3, r2
 800870e:	658b      	str	r3, [r1, #88]	; 0x58
 8008710:	e001      	b.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008712:	7dfb      	ldrb	r3, [r7, #23]
 8008714:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800871e:	2b00      	cmp	r3, #0
 8008720:	d04c      	beq.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008728:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800872c:	d030      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800872e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008732:	d82a      	bhi.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008734:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008738:	d02c      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800873a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800873e:	d824      	bhi.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008740:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008744:	d018      	beq.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008746:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800874a:	d81e      	bhi.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800874c:	2b00      	cmp	r3, #0
 800874e:	d003      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008754:	d007      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008756:	e018      	b.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008758:	4b16      	ldr	r3, [pc, #88]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800875a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875c:	4a15      	ldr	r2, [pc, #84]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800875e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008762:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008764:	e017      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	3304      	adds	r3, #4
 800876a:	2100      	movs	r1, #0
 800876c:	4618      	mov	r0, r3
 800876e:	f001 fec9 	bl	800a504 <RCCEx_PLL2_Config>
 8008772:	4603      	mov	r3, r0
 8008774:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008776:	e00e      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	3324      	adds	r3, #36	; 0x24
 800877c:	2100      	movs	r1, #0
 800877e:	4618      	mov	r0, r3
 8008780:	f001 ff72 	bl	800a668 <RCCEx_PLL3_Config>
 8008784:	4603      	mov	r3, r0
 8008786:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008788:	e005      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	75fb      	strb	r3, [r7, #23]
      break;
 800878e:	e002      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008790:	bf00      	nop
 8008792:	e000      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008794:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008796:	7dfb      	ldrb	r3, [r7, #23]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d10d      	bne.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800879c:	4b05      	ldr	r3, [pc, #20]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800879e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087a0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80087aa:	4902      	ldr	r1, [pc, #8]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80087ac:	4313      	orrs	r3, r2
 80087ae:	658b      	str	r3, [r1, #88]	; 0x58
 80087b0:	e004      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80087b2:	bf00      	nop
 80087b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087b8:	7dfb      	ldrb	r3, [r7, #23]
 80087ba:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d032      	beq.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087cc:	2b30      	cmp	r3, #48	; 0x30
 80087ce:	d01c      	beq.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80087d0:	2b30      	cmp	r3, #48	; 0x30
 80087d2:	d817      	bhi.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80087d4:	2b20      	cmp	r3, #32
 80087d6:	d00c      	beq.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80087d8:	2b20      	cmp	r3, #32
 80087da:	d813      	bhi.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d016      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80087e0:	2b10      	cmp	r3, #16
 80087e2:	d10f      	bne.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087e4:	4baf      	ldr	r3, [pc, #700]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80087e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e8:	4aae      	ldr	r2, [pc, #696]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80087ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80087f0:	e00e      	b.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	3304      	adds	r3, #4
 80087f6:	2102      	movs	r1, #2
 80087f8:	4618      	mov	r0, r3
 80087fa:	f001 fe83 	bl	800a504 <RCCEx_PLL2_Config>
 80087fe:	4603      	mov	r3, r0
 8008800:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008802:	e005      	b.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	75fb      	strb	r3, [r7, #23]
      break;
 8008808:	e002      	b.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800880a:	bf00      	nop
 800880c:	e000      	b.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800880e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008810:	7dfb      	ldrb	r3, [r7, #23]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d109      	bne.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008816:	4ba3      	ldr	r3, [pc, #652]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800881a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008822:	49a0      	ldr	r1, [pc, #640]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008824:	4313      	orrs	r3, r2
 8008826:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008828:	e001      	b.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800882a:	7dfb      	ldrb	r3, [r7, #23]
 800882c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d047      	beq.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800883e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008842:	d030      	beq.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008844:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008848:	d82a      	bhi.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800884a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800884e:	d02c      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8008850:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008854:	d824      	bhi.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800885a:	d018      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800885c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008860:	d81e      	bhi.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008862:	2b00      	cmp	r3, #0
 8008864:	d003      	beq.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8008866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800886a:	d007      	beq.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800886c:	e018      	b.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800886e:	4b8d      	ldr	r3, [pc, #564]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008872:	4a8c      	ldr	r2, [pc, #560]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008878:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800887a:	e017      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	3304      	adds	r3, #4
 8008880:	2100      	movs	r1, #0
 8008882:	4618      	mov	r0, r3
 8008884:	f001 fe3e 	bl	800a504 <RCCEx_PLL2_Config>
 8008888:	4603      	mov	r3, r0
 800888a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800888c:	e00e      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	3324      	adds	r3, #36	; 0x24
 8008892:	2100      	movs	r1, #0
 8008894:	4618      	mov	r0, r3
 8008896:	f001 fee7 	bl	800a668 <RCCEx_PLL3_Config>
 800889a:	4603      	mov	r3, r0
 800889c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800889e:	e005      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	75fb      	strb	r3, [r7, #23]
      break;
 80088a4:	e002      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80088a6:	bf00      	nop
 80088a8:	e000      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80088aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088ac:	7dfb      	ldrb	r3, [r7, #23]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d109      	bne.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80088b2:	4b7c      	ldr	r3, [pc, #496]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80088b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088b6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088be:	4979      	ldr	r1, [pc, #484]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80088c0:	4313      	orrs	r3, r2
 80088c2:	650b      	str	r3, [r1, #80]	; 0x50
 80088c4:	e001      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088c6:	7dfb      	ldrb	r3, [r7, #23]
 80088c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d049      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80088de:	d02e      	beq.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80088e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80088e4:	d828      	bhi.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80088e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80088ea:	d02a      	beq.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80088ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80088f0:	d822      	bhi.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80088f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80088f6:	d026      	beq.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80088f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80088fc:	d81c      	bhi.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80088fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008902:	d010      	beq.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8008904:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008908:	d816      	bhi.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800890a:	2b00      	cmp	r3, #0
 800890c:	d01d      	beq.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800890e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008912:	d111      	bne.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	3304      	adds	r3, #4
 8008918:	2101      	movs	r1, #1
 800891a:	4618      	mov	r0, r3
 800891c:	f001 fdf2 	bl	800a504 <RCCEx_PLL2_Config>
 8008920:	4603      	mov	r3, r0
 8008922:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008924:	e012      	b.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	3324      	adds	r3, #36	; 0x24
 800892a:	2101      	movs	r1, #1
 800892c:	4618      	mov	r0, r3
 800892e:	f001 fe9b 	bl	800a668 <RCCEx_PLL3_Config>
 8008932:	4603      	mov	r3, r0
 8008934:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008936:	e009      	b.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	75fb      	strb	r3, [r7, #23]
      break;
 800893c:	e006      	b.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800893e:	bf00      	nop
 8008940:	e004      	b.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008942:	bf00      	nop
 8008944:	e002      	b.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008946:	bf00      	nop
 8008948:	e000      	b.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800894a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800894c:	7dfb      	ldrb	r3, [r7, #23]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d109      	bne.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008952:	4b54      	ldr	r3, [pc, #336]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008956:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800895e:	4951      	ldr	r1, [pc, #324]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008960:	4313      	orrs	r3, r2
 8008962:	650b      	str	r3, [r1, #80]	; 0x50
 8008964:	e001      	b.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008966:	7dfb      	ldrb	r3, [r7, #23]
 8008968:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008972:	2b00      	cmp	r3, #0
 8008974:	d04b      	beq.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800897c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008980:	d02e      	beq.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8008982:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008986:	d828      	bhi.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800898c:	d02a      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800898e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008992:	d822      	bhi.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008994:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008998:	d026      	beq.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800899a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800899e:	d81c      	bhi.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80089a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089a4:	d010      	beq.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80089a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089aa:	d816      	bhi.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d01d      	beq.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80089b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089b4:	d111      	bne.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	3304      	adds	r3, #4
 80089ba:	2101      	movs	r1, #1
 80089bc:	4618      	mov	r0, r3
 80089be:	f001 fda1 	bl	800a504 <RCCEx_PLL2_Config>
 80089c2:	4603      	mov	r3, r0
 80089c4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80089c6:	e012      	b.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	3324      	adds	r3, #36	; 0x24
 80089cc:	2101      	movs	r1, #1
 80089ce:	4618      	mov	r0, r3
 80089d0:	f001 fe4a 	bl	800a668 <RCCEx_PLL3_Config>
 80089d4:	4603      	mov	r3, r0
 80089d6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80089d8:	e009      	b.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	75fb      	strb	r3, [r7, #23]
      break;
 80089de:	e006      	b.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80089e0:	bf00      	nop
 80089e2:	e004      	b.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80089e4:	bf00      	nop
 80089e6:	e002      	b.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80089e8:	bf00      	nop
 80089ea:	e000      	b.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80089ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089ee:	7dfb      	ldrb	r3, [r7, #23]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10a      	bne.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80089f4:	4b2b      	ldr	r3, [pc, #172]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80089f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089f8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008a02:	4928      	ldr	r1, [pc, #160]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008a04:	4313      	orrs	r3, r2
 8008a06:	658b      	str	r3, [r1, #88]	; 0x58
 8008a08:	e001      	b.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a0a:	7dfb      	ldrb	r3, [r7, #23]
 8008a0c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d02f      	beq.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a22:	d00e      	beq.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008a24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a28:	d814      	bhi.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d015      	beq.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008a2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a32:	d10f      	bne.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a34:	4b1b      	ldr	r3, [pc, #108]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a38:	4a1a      	ldr	r2, [pc, #104]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008a40:	e00c      	b.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	3304      	adds	r3, #4
 8008a46:	2101      	movs	r1, #1
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f001 fd5b 	bl	800a504 <RCCEx_PLL2_Config>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008a52:	e003      	b.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	75fb      	strb	r3, [r7, #23]
      break;
 8008a58:	e000      	b.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8008a5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a5c:	7dfb      	ldrb	r3, [r7, #23]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d109      	bne.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008a62:	4b10      	ldr	r3, [pc, #64]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a6e:	490d      	ldr	r1, [pc, #52]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008a70:	4313      	orrs	r3, r2
 8008a72:	650b      	str	r3, [r1, #80]	; 0x50
 8008a74:	e001      	b.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a76:	7dfb      	ldrb	r3, [r7, #23]
 8008a78:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d033      	beq.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a8a:	2b03      	cmp	r3, #3
 8008a8c:	d81c      	bhi.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008a8e:	a201      	add	r2, pc, #4	; (adr r2, 8008a94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8008a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a94:	08008acf 	.word	0x08008acf
 8008a98:	08008aa9 	.word	0x08008aa9
 8008a9c:	08008ab7 	.word	0x08008ab7
 8008aa0:	08008acf 	.word	0x08008acf
 8008aa4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008aa8:	4bb8      	ldr	r3, [pc, #736]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aac:	4ab7      	ldr	r2, [pc, #732]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ab2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008ab4:	e00c      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	3304      	adds	r3, #4
 8008aba:	2102      	movs	r1, #2
 8008abc:	4618      	mov	r0, r3
 8008abe:	f001 fd21 	bl	800a504 <RCCEx_PLL2_Config>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008ac6:	e003      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	75fb      	strb	r3, [r7, #23]
      break;
 8008acc:	e000      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008ace:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ad0:	7dfb      	ldrb	r3, [r7, #23]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d109      	bne.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008ad6:	4bad      	ldr	r3, [pc, #692]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ada:	f023 0203 	bic.w	r2, r3, #3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ae2:	49aa      	ldr	r1, [pc, #680]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008ae8:	e001      	b.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aea:	7dfb      	ldrb	r3, [r7, #23]
 8008aec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	f000 8086 	beq.w	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008afc:	4ba4      	ldr	r3, [pc, #656]	; (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4aa3      	ldr	r2, [pc, #652]	; (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b08:	f7f9 fa1a 	bl	8001f40 <HAL_GetTick>
 8008b0c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b0e:	e009      	b.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b10:	f7f9 fa16 	bl	8001f40 <HAL_GetTick>
 8008b14:	4602      	mov	r2, r0
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	2b64      	cmp	r3, #100	; 0x64
 8008b1c:	d902      	bls.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008b1e:	2303      	movs	r3, #3
 8008b20:	75fb      	strb	r3, [r7, #23]
        break;
 8008b22:	e005      	b.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b24:	4b9a      	ldr	r3, [pc, #616]	; (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d0ef      	beq.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008b30:	7dfb      	ldrb	r3, [r7, #23]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d166      	bne.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008b36:	4b95      	ldr	r3, [pc, #596]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008b38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b40:	4053      	eors	r3, r2
 8008b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d013      	beq.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008b4a:	4b90      	ldr	r3, [pc, #576]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b52:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008b54:	4b8d      	ldr	r3, [pc, #564]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b58:	4a8c      	ldr	r2, [pc, #560]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b5e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008b60:	4b8a      	ldr	r3, [pc, #552]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b64:	4a89      	ldr	r2, [pc, #548]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b6a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008b6c:	4a87      	ldr	r2, [pc, #540]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b7c:	d115      	bne.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b7e:	f7f9 f9df 	bl	8001f40 <HAL_GetTick>
 8008b82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b84:	e00b      	b.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b86:	f7f9 f9db 	bl	8001f40 <HAL_GetTick>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	1ad3      	subs	r3, r2, r3
 8008b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d902      	bls.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008b98:	2303      	movs	r3, #3
 8008b9a:	75fb      	strb	r3, [r7, #23]
            break;
 8008b9c:	e005      	b.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b9e:	4b7b      	ldr	r3, [pc, #492]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ba2:	f003 0302 	and.w	r3, r3, #2
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d0ed      	beq.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008baa:	7dfb      	ldrb	r3, [r7, #23]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d126      	bne.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bbe:	d10d      	bne.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008bc0:	4b72      	ldr	r3, [pc, #456]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008bce:	0919      	lsrs	r1, r3, #4
 8008bd0:	4b70      	ldr	r3, [pc, #448]	; (8008d94 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8008bd2:	400b      	ands	r3, r1
 8008bd4:	496d      	ldr	r1, [pc, #436]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	610b      	str	r3, [r1, #16]
 8008bda:	e005      	b.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008bdc:	4b6b      	ldr	r3, [pc, #428]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008bde:	691b      	ldr	r3, [r3, #16]
 8008be0:	4a6a      	ldr	r2, [pc, #424]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008be2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008be6:	6113      	str	r3, [r2, #16]
 8008be8:	4b68      	ldr	r3, [pc, #416]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008bea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bf6:	4965      	ldr	r1, [pc, #404]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	670b      	str	r3, [r1, #112]	; 0x70
 8008bfc:	e004      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008bfe:	7dfb      	ldrb	r3, [r7, #23]
 8008c00:	75bb      	strb	r3, [r7, #22]
 8008c02:	e001      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c04:	7dfb      	ldrb	r3, [r7, #23]
 8008c06:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f003 0301 	and.w	r3, r3, #1
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d07e      	beq.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c18:	2b28      	cmp	r3, #40	; 0x28
 8008c1a:	d867      	bhi.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008c1c:	a201      	add	r2, pc, #4	; (adr r2, 8008c24 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c22:	bf00      	nop
 8008c24:	08008cf3 	.word	0x08008cf3
 8008c28:	08008ced 	.word	0x08008ced
 8008c2c:	08008ced 	.word	0x08008ced
 8008c30:	08008ced 	.word	0x08008ced
 8008c34:	08008ced 	.word	0x08008ced
 8008c38:	08008ced 	.word	0x08008ced
 8008c3c:	08008ced 	.word	0x08008ced
 8008c40:	08008ced 	.word	0x08008ced
 8008c44:	08008cc9 	.word	0x08008cc9
 8008c48:	08008ced 	.word	0x08008ced
 8008c4c:	08008ced 	.word	0x08008ced
 8008c50:	08008ced 	.word	0x08008ced
 8008c54:	08008ced 	.word	0x08008ced
 8008c58:	08008ced 	.word	0x08008ced
 8008c5c:	08008ced 	.word	0x08008ced
 8008c60:	08008ced 	.word	0x08008ced
 8008c64:	08008cdb 	.word	0x08008cdb
 8008c68:	08008ced 	.word	0x08008ced
 8008c6c:	08008ced 	.word	0x08008ced
 8008c70:	08008ced 	.word	0x08008ced
 8008c74:	08008ced 	.word	0x08008ced
 8008c78:	08008ced 	.word	0x08008ced
 8008c7c:	08008ced 	.word	0x08008ced
 8008c80:	08008ced 	.word	0x08008ced
 8008c84:	08008cf3 	.word	0x08008cf3
 8008c88:	08008ced 	.word	0x08008ced
 8008c8c:	08008ced 	.word	0x08008ced
 8008c90:	08008ced 	.word	0x08008ced
 8008c94:	08008ced 	.word	0x08008ced
 8008c98:	08008ced 	.word	0x08008ced
 8008c9c:	08008ced 	.word	0x08008ced
 8008ca0:	08008ced 	.word	0x08008ced
 8008ca4:	08008cf3 	.word	0x08008cf3
 8008ca8:	08008ced 	.word	0x08008ced
 8008cac:	08008ced 	.word	0x08008ced
 8008cb0:	08008ced 	.word	0x08008ced
 8008cb4:	08008ced 	.word	0x08008ced
 8008cb8:	08008ced 	.word	0x08008ced
 8008cbc:	08008ced 	.word	0x08008ced
 8008cc0:	08008ced 	.word	0x08008ced
 8008cc4:	08008cf3 	.word	0x08008cf3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	3304      	adds	r3, #4
 8008ccc:	2101      	movs	r1, #1
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f001 fc18 	bl	800a504 <RCCEx_PLL2_Config>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008cd8:	e00c      	b.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	3324      	adds	r3, #36	; 0x24
 8008cde:	2101      	movs	r1, #1
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f001 fcc1 	bl	800a668 <RCCEx_PLL3_Config>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008cea:	e003      	b.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	75fb      	strb	r3, [r7, #23]
      break;
 8008cf0:	e000      	b.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8008cf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cf4:	7dfb      	ldrb	r3, [r7, #23]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d109      	bne.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008cfa:	4b24      	ldr	r3, [pc, #144]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cfe:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d06:	4921      	ldr	r1, [pc, #132]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	654b      	str	r3, [r1, #84]	; 0x54
 8008d0c:	e001      	b.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d0e:	7dfb      	ldrb	r3, [r7, #23]
 8008d10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 0302 	and.w	r3, r3, #2
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d03e      	beq.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d22:	2b05      	cmp	r3, #5
 8008d24:	d820      	bhi.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8008d26:	a201      	add	r2, pc, #4	; (adr r2, 8008d2c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8008d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d2c:	08008d6f 	.word	0x08008d6f
 8008d30:	08008d45 	.word	0x08008d45
 8008d34:	08008d57 	.word	0x08008d57
 8008d38:	08008d6f 	.word	0x08008d6f
 8008d3c:	08008d6f 	.word	0x08008d6f
 8008d40:	08008d6f 	.word	0x08008d6f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	3304      	adds	r3, #4
 8008d48:	2101      	movs	r1, #1
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f001 fbda 	bl	800a504 <RCCEx_PLL2_Config>
 8008d50:	4603      	mov	r3, r0
 8008d52:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008d54:	e00c      	b.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	3324      	adds	r3, #36	; 0x24
 8008d5a:	2101      	movs	r1, #1
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f001 fc83 	bl	800a668 <RCCEx_PLL3_Config>
 8008d62:	4603      	mov	r3, r0
 8008d64:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008d66:	e003      	b.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8008d6c:	e000      	b.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8008d6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d70:	7dfb      	ldrb	r3, [r7, #23]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d110      	bne.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008d76:	4b05      	ldr	r3, [pc, #20]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d7a:	f023 0207 	bic.w	r2, r3, #7
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d82:	4902      	ldr	r1, [pc, #8]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008d84:	4313      	orrs	r3, r2
 8008d86:	654b      	str	r3, [r1, #84]	; 0x54
 8008d88:	e008      	b.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8008d8a:	bf00      	nop
 8008d8c:	58024400 	.word	0x58024400
 8008d90:	58024800 	.word	0x58024800
 8008d94:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d98:	7dfb      	ldrb	r3, [r7, #23]
 8008d9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f003 0304 	and.w	r3, r3, #4
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d039      	beq.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dae:	2b05      	cmp	r3, #5
 8008db0:	d820      	bhi.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8008db2:	a201      	add	r2, pc, #4	; (adr r2, 8008db8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8008db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db8:	08008dfb 	.word	0x08008dfb
 8008dbc:	08008dd1 	.word	0x08008dd1
 8008dc0:	08008de3 	.word	0x08008de3
 8008dc4:	08008dfb 	.word	0x08008dfb
 8008dc8:	08008dfb 	.word	0x08008dfb
 8008dcc:	08008dfb 	.word	0x08008dfb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	3304      	adds	r3, #4
 8008dd4:	2101      	movs	r1, #1
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f001 fb94 	bl	800a504 <RCCEx_PLL2_Config>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008de0:	e00c      	b.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	3324      	adds	r3, #36	; 0x24
 8008de6:	2101      	movs	r1, #1
 8008de8:	4618      	mov	r0, r3
 8008dea:	f001 fc3d 	bl	800a668 <RCCEx_PLL3_Config>
 8008dee:	4603      	mov	r3, r0
 8008df0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008df2:	e003      	b.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	75fb      	strb	r3, [r7, #23]
      break;
 8008df8:	e000      	b.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8008dfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dfc:	7dfb      	ldrb	r3, [r7, #23]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d10a      	bne.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008e02:	4bb7      	ldr	r3, [pc, #732]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e06:	f023 0207 	bic.w	r2, r3, #7
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e10:	49b3      	ldr	r1, [pc, #716]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008e12:	4313      	orrs	r3, r2
 8008e14:	658b      	str	r3, [r1, #88]	; 0x58
 8008e16:	e001      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e18:	7dfb      	ldrb	r3, [r7, #23]
 8008e1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f003 0320 	and.w	r3, r3, #32
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d04b      	beq.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e32:	d02e      	beq.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8008e34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e38:	d828      	bhi.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e3e:	d02a      	beq.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e44:	d822      	bhi.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008e46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e4a:	d026      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008e4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e50:	d81c      	bhi.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e56:	d010      	beq.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008e58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e5c:	d816      	bhi.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d01d      	beq.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008e62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e66:	d111      	bne.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	3304      	adds	r3, #4
 8008e6c:	2100      	movs	r1, #0
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f001 fb48 	bl	800a504 <RCCEx_PLL2_Config>
 8008e74:	4603      	mov	r3, r0
 8008e76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008e78:	e012      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	3324      	adds	r3, #36	; 0x24
 8008e7e:	2102      	movs	r1, #2
 8008e80:	4618      	mov	r0, r3
 8008e82:	f001 fbf1 	bl	800a668 <RCCEx_PLL3_Config>
 8008e86:	4603      	mov	r3, r0
 8008e88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008e8a:	e009      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8008e90:	e006      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008e92:	bf00      	nop
 8008e94:	e004      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008e96:	bf00      	nop
 8008e98:	e002      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008e9a:	bf00      	nop
 8008e9c:	e000      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008e9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ea0:	7dfb      	ldrb	r3, [r7, #23]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d10a      	bne.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ea6:	4b8e      	ldr	r3, [pc, #568]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eaa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008eb4:	498a      	ldr	r1, [pc, #552]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	654b      	str	r3, [r1, #84]	; 0x54
 8008eba:	e001      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ebc:	7dfb      	ldrb	r3, [r7, #23]
 8008ebe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d04b      	beq.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008ed2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008ed6:	d02e      	beq.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8008ed8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008edc:	d828      	bhi.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ee2:	d02a      	beq.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ee8:	d822      	bhi.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008eea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008eee:	d026      	beq.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008ef0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ef4:	d81c      	bhi.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008ef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008efa:	d010      	beq.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008efc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f00:	d816      	bhi.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d01d      	beq.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f0a:	d111      	bne.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	3304      	adds	r3, #4
 8008f10:	2100      	movs	r1, #0
 8008f12:	4618      	mov	r0, r3
 8008f14:	f001 faf6 	bl	800a504 <RCCEx_PLL2_Config>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008f1c:	e012      	b.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	3324      	adds	r3, #36	; 0x24
 8008f22:	2102      	movs	r1, #2
 8008f24:	4618      	mov	r0, r3
 8008f26:	f001 fb9f 	bl	800a668 <RCCEx_PLL3_Config>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008f2e:	e009      	b.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	75fb      	strb	r3, [r7, #23]
      break;
 8008f34:	e006      	b.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008f36:	bf00      	nop
 8008f38:	e004      	b.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008f3a:	bf00      	nop
 8008f3c:	e002      	b.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008f3e:	bf00      	nop
 8008f40:	e000      	b.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008f42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f44:	7dfb      	ldrb	r3, [r7, #23]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10a      	bne.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008f4a:	4b65      	ldr	r3, [pc, #404]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f4e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008f58:	4961      	ldr	r1, [pc, #388]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	658b      	str	r3, [r1, #88]	; 0x58
 8008f5e:	e001      	b.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f60:	7dfb      	ldrb	r3, [r7, #23]
 8008f62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d04b      	beq.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f76:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008f7a:	d02e      	beq.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008f7c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008f80:	d828      	bhi.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008f82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f86:	d02a      	beq.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f8c:	d822      	bhi.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008f8e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008f92:	d026      	beq.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008f94:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008f98:	d81c      	bhi.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008f9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f9e:	d010      	beq.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008fa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fa4:	d816      	bhi.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d01d      	beq.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fae:	d111      	bne.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	3304      	adds	r3, #4
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f001 faa4 	bl	800a504 <RCCEx_PLL2_Config>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008fc0:	e012      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	3324      	adds	r3, #36	; 0x24
 8008fc6:	2102      	movs	r1, #2
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f001 fb4d 	bl	800a668 <RCCEx_PLL3_Config>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008fd2:	e009      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8008fd8:	e006      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008fda:	bf00      	nop
 8008fdc:	e004      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008fde:	bf00      	nop
 8008fe0:	e002      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008fe2:	bf00      	nop
 8008fe4:	e000      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fe8:	7dfb      	ldrb	r3, [r7, #23]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10a      	bne.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008fee:	4b3c      	ldr	r3, [pc, #240]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ff2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ffc:	4938      	ldr	r1, [pc, #224]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008ffe:	4313      	orrs	r3, r2
 8009000:	658b      	str	r3, [r1, #88]	; 0x58
 8009002:	e001      	b.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009004:	7dfb      	ldrb	r3, [r7, #23]
 8009006:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f003 0308 	and.w	r3, r3, #8
 8009010:	2b00      	cmp	r3, #0
 8009012:	d01a      	beq.n	800904a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800901a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800901e:	d10a      	bne.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	3324      	adds	r3, #36	; 0x24
 8009024:	2102      	movs	r1, #2
 8009026:	4618      	mov	r0, r3
 8009028:	f001 fb1e 	bl	800a668 <RCCEx_PLL3_Config>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d001      	beq.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009036:	4b2a      	ldr	r3, [pc, #168]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800903a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009044:	4926      	ldr	r1, [pc, #152]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009046:	4313      	orrs	r3, r2
 8009048:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f003 0310 	and.w	r3, r3, #16
 8009052:	2b00      	cmp	r3, #0
 8009054:	d01a      	beq.n	800908c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800905c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009060:	d10a      	bne.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	3324      	adds	r3, #36	; 0x24
 8009066:	2102      	movs	r1, #2
 8009068:	4618      	mov	r0, r3
 800906a:	f001 fafd 	bl	800a668 <RCCEx_PLL3_Config>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d001      	beq.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8009074:	2301      	movs	r3, #1
 8009076:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009078:	4b19      	ldr	r3, [pc, #100]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800907a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800907c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009086:	4916      	ldr	r1, [pc, #88]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009088:	4313      	orrs	r3, r2
 800908a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009094:	2b00      	cmp	r3, #0
 8009096:	d036      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800909e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090a2:	d01f      	beq.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80090a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090a8:	d817      	bhi.n	80090da <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d003      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80090ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090b2:	d009      	beq.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80090b4:	e011      	b.n	80090da <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	3304      	adds	r3, #4
 80090ba:	2100      	movs	r1, #0
 80090bc:	4618      	mov	r0, r3
 80090be:	f001 fa21 	bl	800a504 <RCCEx_PLL2_Config>
 80090c2:	4603      	mov	r3, r0
 80090c4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80090c6:	e00e      	b.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	3324      	adds	r3, #36	; 0x24
 80090cc:	2102      	movs	r1, #2
 80090ce:	4618      	mov	r0, r3
 80090d0:	f001 faca 	bl	800a668 <RCCEx_PLL3_Config>
 80090d4:	4603      	mov	r3, r0
 80090d6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80090d8:	e005      	b.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	75fb      	strb	r3, [r7, #23]
      break;
 80090de:	e002      	b.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80090e0:	58024400 	.word	0x58024400
      break;
 80090e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090e6:	7dfb      	ldrb	r3, [r7, #23]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d10a      	bne.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80090ec:	4b93      	ldr	r3, [pc, #588]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80090fa:	4990      	ldr	r1, [pc, #576]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090fc:	4313      	orrs	r3, r2
 80090fe:	658b      	str	r3, [r1, #88]	; 0x58
 8009100:	e001      	b.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009102:	7dfb      	ldrb	r3, [r7, #23]
 8009104:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800910e:	2b00      	cmp	r3, #0
 8009110:	d033      	beq.n	800917a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009118:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800911c:	d01c      	beq.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800911e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009122:	d816      	bhi.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8009124:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009128:	d003      	beq.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800912a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800912e:	d007      	beq.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8009130:	e00f      	b.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009132:	4b82      	ldr	r3, [pc, #520]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009136:	4a81      	ldr	r2, [pc, #516]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800913c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800913e:	e00c      	b.n	800915a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	3324      	adds	r3, #36	; 0x24
 8009144:	2101      	movs	r1, #1
 8009146:	4618      	mov	r0, r3
 8009148:	f001 fa8e 	bl	800a668 <RCCEx_PLL3_Config>
 800914c:	4603      	mov	r3, r0
 800914e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009150:	e003      	b.n	800915a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	75fb      	strb	r3, [r7, #23]
      break;
 8009156:	e000      	b.n	800915a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8009158:	bf00      	nop
    }

    if(ret == HAL_OK)
 800915a:	7dfb      	ldrb	r3, [r7, #23]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d10a      	bne.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009160:	4b76      	ldr	r3, [pc, #472]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009164:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800916e:	4973      	ldr	r1, [pc, #460]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009170:	4313      	orrs	r3, r2
 8009172:	654b      	str	r3, [r1, #84]	; 0x54
 8009174:	e001      	b.n	800917a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009176:	7dfb      	ldrb	r3, [r7, #23]
 8009178:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009182:	2b00      	cmp	r3, #0
 8009184:	d029      	beq.n	80091da <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800918a:	2b00      	cmp	r3, #0
 800918c:	d003      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800918e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009192:	d007      	beq.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8009194:	e00f      	b.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009196:	4b69      	ldr	r3, [pc, #420]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800919a:	4a68      	ldr	r2, [pc, #416]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800919c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80091a2:	e00b      	b.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	3304      	adds	r3, #4
 80091a8:	2102      	movs	r1, #2
 80091aa:	4618      	mov	r0, r3
 80091ac:	f001 f9aa 	bl	800a504 <RCCEx_PLL2_Config>
 80091b0:	4603      	mov	r3, r0
 80091b2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80091b4:	e002      	b.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	75fb      	strb	r3, [r7, #23]
      break;
 80091ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091bc:	7dfb      	ldrb	r3, [r7, #23]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d109      	bne.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80091c2:	4b5e      	ldr	r3, [pc, #376]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80091c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091ce:	495b      	ldr	r1, [pc, #364]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80091d0:	4313      	orrs	r3, r2
 80091d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80091d4:	e001      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091d6:	7dfb      	ldrb	r3, [r7, #23]
 80091d8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00a      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	3324      	adds	r3, #36	; 0x24
 80091ea:	2102      	movs	r1, #2
 80091ec:	4618      	mov	r0, r3
 80091ee:	f001 fa3b 	bl	800a668 <RCCEx_PLL3_Config>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d001      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009204:	2b00      	cmp	r3, #0
 8009206:	d030      	beq.n	800926a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800920c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009210:	d017      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8009212:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009216:	d811      	bhi.n	800923c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800921c:	d013      	beq.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800921e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009222:	d80b      	bhi.n	800923c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009224:	2b00      	cmp	r3, #0
 8009226:	d010      	beq.n	800924a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800922c:	d106      	bne.n	800923c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800922e:	4b43      	ldr	r3, [pc, #268]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009232:	4a42      	ldr	r2, [pc, #264]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009238:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800923a:	e007      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800923c:	2301      	movs	r3, #1
 800923e:	75fb      	strb	r3, [r7, #23]
      break;
 8009240:	e004      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009242:	bf00      	nop
 8009244:	e002      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009246:	bf00      	nop
 8009248:	e000      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800924a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800924c:	7dfb      	ldrb	r3, [r7, #23]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d109      	bne.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009252:	4b3a      	ldr	r3, [pc, #232]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009256:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800925e:	4937      	ldr	r1, [pc, #220]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009260:	4313      	orrs	r3, r2
 8009262:	654b      	str	r3, [r1, #84]	; 0x54
 8009264:	e001      	b.n	800926a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009266:	7dfb      	ldrb	r3, [r7, #23]
 8009268:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009272:	2b00      	cmp	r3, #0
 8009274:	d008      	beq.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009276:	4b31      	ldr	r3, [pc, #196]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800927a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009282:	492e      	ldr	r1, [pc, #184]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009284:	4313      	orrs	r3, r2
 8009286:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009290:	2b00      	cmp	r3, #0
 8009292:	d009      	beq.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009294:	4b29      	ldr	r3, [pc, #164]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80092a2:	4926      	ldr	r1, [pc, #152]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80092a4:	4313      	orrs	r3, r2
 80092a6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d008      	beq.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80092b4:	4b21      	ldr	r3, [pc, #132]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80092b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092c0:	491e      	ldr	r1, [pc, #120]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80092c2:	4313      	orrs	r3, r2
 80092c4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00d      	beq.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80092d2:	4b1a      	ldr	r3, [pc, #104]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	4a19      	ldr	r2, [pc, #100]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80092d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80092dc:	6113      	str	r3, [r2, #16]
 80092de:	4b17      	ldr	r3, [pc, #92]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80092e0:	691a      	ldr	r2, [r3, #16]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80092e8:	4914      	ldr	r1, [pc, #80]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80092ea:	4313      	orrs	r3, r2
 80092ec:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	da08      	bge.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80092f6:	4b11      	ldr	r3, [pc, #68]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80092f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009302:	490e      	ldr	r1, [pc, #56]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009304:	4313      	orrs	r3, r2
 8009306:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009310:	2b00      	cmp	r3, #0
 8009312:	d009      	beq.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009314:	4b09      	ldr	r3, [pc, #36]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009318:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009322:	4906      	ldr	r1, [pc, #24]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009324:	4313      	orrs	r3, r2
 8009326:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009328:	7dbb      	ldrb	r3, [r7, #22]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d101      	bne.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800932e:	2300      	movs	r3, #0
 8009330:	e000      	b.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8009332:	2301      	movs	r3, #1
}
 8009334:	4618      	mov	r0, r3
 8009336:	3718      	adds	r7, #24
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	58024400 	.word	0x58024400

08009340 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b090      	sub	sp, #64	; 0x40
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800934e:	f040 8095 	bne.w	800947c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009352:	4bae      	ldr	r3, [pc, #696]	; (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009356:	f003 0307 	and.w	r3, r3, #7
 800935a:	633b      	str	r3, [r7, #48]	; 0x30
 800935c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935e:	2b04      	cmp	r3, #4
 8009360:	f200 8088 	bhi.w	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8009364:	a201      	add	r2, pc, #4	; (adr r2, 800936c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8009366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800936a:	bf00      	nop
 800936c:	08009381 	.word	0x08009381
 8009370:	080093a9 	.word	0x080093a9
 8009374:	080093d1 	.word	0x080093d1
 8009378:	0800946d 	.word	0x0800946d
 800937c:	080093f9 	.word	0x080093f9

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009380:	4ba2      	ldr	r3, [pc, #648]	; (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009388:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800938c:	d108      	bne.n	80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800938e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009392:	4618      	mov	r0, r3
 8009394:	f000 ff64 	bl	800a260 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8009398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800939c:	f000 bc95 	b.w	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80093a0:	2300      	movs	r3, #0
 80093a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093a4:	f000 bc91 	b.w	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80093a8:	4b98      	ldr	r3, [pc, #608]	; (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093b4:	d108      	bne.n	80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093b6:	f107 0318 	add.w	r3, r7, #24
 80093ba:	4618      	mov	r0, r3
 80093bc:	f000 fca8 	bl	8009d10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80093c0:	69bb      	ldr	r3, [r7, #24]
 80093c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80093c4:	f000 bc81 	b.w	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80093c8:	2300      	movs	r3, #0
 80093ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093cc:	f000 bc7d 	b.w	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093d0:	4b8e      	ldr	r3, [pc, #568]	; (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093dc:	d108      	bne.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093de:	f107 030c 	add.w	r3, r7, #12
 80093e2:	4618      	mov	r0, r3
 80093e4:	f000 fde8 	bl	8009fb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80093ec:	f000 bc6d 	b.w	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80093f0:	2300      	movs	r3, #0
 80093f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093f4:	f000 bc69 	b.w	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80093f8:	4b84      	ldr	r3, [pc, #528]	; (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80093fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009400:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009402:	4b82      	ldr	r3, [pc, #520]	; (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 0304 	and.w	r3, r3, #4
 800940a:	2b04      	cmp	r3, #4
 800940c:	d10c      	bne.n	8009428 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800940e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009410:	2b00      	cmp	r3, #0
 8009412:	d109      	bne.n	8009428 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009414:	4b7d      	ldr	r3, [pc, #500]	; (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	08db      	lsrs	r3, r3, #3
 800941a:	f003 0303 	and.w	r3, r3, #3
 800941e:	4a7c      	ldr	r2, [pc, #496]	; (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8009420:	fa22 f303 	lsr.w	r3, r2, r3
 8009424:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009426:	e01f      	b.n	8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009428:	4b78      	ldr	r3, [pc, #480]	; (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009434:	d106      	bne.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8009436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009438:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800943c:	d102      	bne.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800943e:	4b75      	ldr	r3, [pc, #468]	; (8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009440:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009442:	e011      	b.n	8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009444:	4b71      	ldr	r3, [pc, #452]	; (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800944c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009450:	d106      	bne.n	8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8009452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009458:	d102      	bne.n	8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800945a:	4b6f      	ldr	r3, [pc, #444]	; (8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800945c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800945e:	e003      	b.n	8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009460:	2300      	movs	r3, #0
 8009462:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009464:	f000 bc31 	b.w	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009468:	f000 bc2f 	b.w	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800946c:	4b6b      	ldr	r3, [pc, #428]	; (800961c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800946e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009470:	f000 bc2b 	b.w	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009474:	2300      	movs	r3, #0
 8009476:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009478:	f000 bc27 	b.w	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009482:	f040 8095 	bne.w	80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009486:	4b61      	ldr	r3, [pc, #388]	; (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800948a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800948e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009496:	d04d      	beq.n	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8009498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800949e:	f200 8084 	bhi.w	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80094a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a4:	2bc0      	cmp	r3, #192	; 0xc0
 80094a6:	d07d      	beq.n	80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80094a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094aa:	2bc0      	cmp	r3, #192	; 0xc0
 80094ac:	d87d      	bhi.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80094ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b0:	2b80      	cmp	r3, #128	; 0x80
 80094b2:	d02d      	beq.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80094b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b6:	2b80      	cmp	r3, #128	; 0x80
 80094b8:	d877      	bhi.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80094ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d003      	beq.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80094c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c2:	2b40      	cmp	r3, #64	; 0x40
 80094c4:	d012      	beq.n	80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80094c6:	e070      	b.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80094c8:	4b50      	ldr	r3, [pc, #320]	; (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094d4:	d107      	bne.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094da:	4618      	mov	r0, r3
 80094dc:	f000 fec0 	bl	800a260 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80094e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80094e4:	e3f1      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80094e6:	2300      	movs	r3, #0
 80094e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094ea:	e3ee      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094ec:	4b47      	ldr	r3, [pc, #284]	; (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094f8:	d107      	bne.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094fa:	f107 0318 	add.w	r3, r7, #24
 80094fe:	4618      	mov	r0, r3
 8009500:	f000 fc06 	bl	8009d10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009508:	e3df      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800950a:	2300      	movs	r3, #0
 800950c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800950e:	e3dc      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009510:	4b3e      	ldr	r3, [pc, #248]	; (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009518:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800951c:	d107      	bne.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800951e:	f107 030c 	add.w	r3, r7, #12
 8009522:	4618      	mov	r0, r3
 8009524:	f000 fd48 	bl	8009fb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800952c:	e3cd      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800952e:	2300      	movs	r3, #0
 8009530:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009532:	e3ca      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009534:	4b35      	ldr	r3, [pc, #212]	; (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009538:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800953c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800953e:	4b33      	ldr	r3, [pc, #204]	; (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f003 0304 	and.w	r3, r3, #4
 8009546:	2b04      	cmp	r3, #4
 8009548:	d10c      	bne.n	8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800954a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800954c:	2b00      	cmp	r3, #0
 800954e:	d109      	bne.n	8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009550:	4b2e      	ldr	r3, [pc, #184]	; (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	08db      	lsrs	r3, r3, #3
 8009556:	f003 0303 	and.w	r3, r3, #3
 800955a:	4a2d      	ldr	r2, [pc, #180]	; (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800955c:	fa22 f303 	lsr.w	r3, r2, r3
 8009560:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009562:	e01e      	b.n	80095a2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009564:	4b29      	ldr	r3, [pc, #164]	; (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800956c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009570:	d106      	bne.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8009572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009574:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009578:	d102      	bne.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800957a:	4b26      	ldr	r3, [pc, #152]	; (8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800957c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800957e:	e010      	b.n	80095a2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009580:	4b22      	ldr	r3, [pc, #136]	; (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009588:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800958c:	d106      	bne.n	800959c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800958e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009590:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009594:	d102      	bne.n	800959c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009596:	4b20      	ldr	r3, [pc, #128]	; (8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8009598:	63fb      	str	r3, [r7, #60]	; 0x3c
 800959a:	e002      	b.n	80095a2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800959c:	2300      	movs	r3, #0
 800959e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80095a0:	e393      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80095a2:	e392      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80095a4:	4b1d      	ldr	r3, [pc, #116]	; (800961c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80095a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095a8:	e38f      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80095aa:	2300      	movs	r3, #0
 80095ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095ae:	e38c      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095b6:	f040 80a7 	bne.w	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80095ba:	4b14      	ldr	r3, [pc, #80]	; (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80095bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095be:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80095c2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80095c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80095ca:	d05f      	beq.n	800968c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80095cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80095d2:	f200 8096 	bhi.w	8009702 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80095d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80095dc:	f000 808e 	beq.w	80096fc <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80095e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80095e6:	f200 808c 	bhi.w	8009702 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80095ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095f0:	d03a      	beq.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80095f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095f8:	f200 8083 	bhi.w	8009702 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80095fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d00e      	beq.n	8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8009602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009604:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009608:	d01c      	beq.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800960a:	e07a      	b.n	8009702 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800960c:	58024400 	.word	0x58024400
 8009610:	03d09000 	.word	0x03d09000
 8009614:	003d0900 	.word	0x003d0900
 8009618:	007a1200 	.word	0x007a1200
 800961c:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009620:	4baa      	ldr	r3, [pc, #680]	; (80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009628:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800962c:	d107      	bne.n	800963e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800962e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009632:	4618      	mov	r0, r3
 8009634:	f000 fe14 	bl	800a260 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800963c:	e345      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800963e:	2300      	movs	r3, #0
 8009640:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009642:	e342      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009644:	4ba1      	ldr	r3, [pc, #644]	; (80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800964c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009650:	d107      	bne.n	8009662 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009652:	f107 0318 	add.w	r3, r7, #24
 8009656:	4618      	mov	r0, r3
 8009658:	f000 fb5a 	bl	8009d10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009660:	e333      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009662:	2300      	movs	r3, #0
 8009664:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009666:	e330      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009668:	4b98      	ldr	r3, [pc, #608]	; (80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009670:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009674:	d107      	bne.n	8009686 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009676:	f107 030c 	add.w	r3, r7, #12
 800967a:	4618      	mov	r0, r3
 800967c:	f000 fc9c 	bl	8009fb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009684:	e321      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009686:	2300      	movs	r3, #0
 8009688:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800968a:	e31e      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800968c:	4b8f      	ldr	r3, [pc, #572]	; (80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800968e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009690:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009694:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009696:	4b8d      	ldr	r3, [pc, #564]	; (80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f003 0304 	and.w	r3, r3, #4
 800969e:	2b04      	cmp	r3, #4
 80096a0:	d10c      	bne.n	80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80096a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d109      	bne.n	80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80096a8:	4b88      	ldr	r3, [pc, #544]	; (80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	08db      	lsrs	r3, r3, #3
 80096ae:	f003 0303 	and.w	r3, r3, #3
 80096b2:	4a87      	ldr	r2, [pc, #540]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80096b4:	fa22 f303 	lsr.w	r3, r2, r3
 80096b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096ba:	e01e      	b.n	80096fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80096bc:	4b83      	ldr	r3, [pc, #524]	; (80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096c8:	d106      	bne.n	80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 80096ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096d0:	d102      	bne.n	80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80096d2:	4b80      	ldr	r3, [pc, #512]	; (80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80096d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096d6:	e010      	b.n	80096fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80096d8:	4b7c      	ldr	r3, [pc, #496]	; (80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096e4:	d106      	bne.n	80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 80096e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096ec:	d102      	bne.n	80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80096ee:	4b7a      	ldr	r3, [pc, #488]	; (80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80096f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096f2:	e002      	b.n	80096fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80096f4:	2300      	movs	r3, #0
 80096f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80096f8:	e2e7      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80096fa:	e2e6      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80096fc:	4b77      	ldr	r3, [pc, #476]	; (80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80096fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009700:	e2e3      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009702:	2300      	movs	r3, #0
 8009704:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009706:	e2e0      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800970e:	f040 809c 	bne.w	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009712:	4b6e      	ldr	r3, [pc, #440]	; (80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009716:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800971a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800971c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009722:	d054      	beq.n	80097ce <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8009724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009726:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800972a:	f200 808b 	bhi.w	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800972e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009730:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009734:	f000 8083 	beq.w	800983e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8009738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800973e:	f200 8081 	bhi.w	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8009742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009744:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009748:	d02f      	beq.n	80097aa <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800974a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009750:	d878      	bhi.n	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8009752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009754:	2b00      	cmp	r3, #0
 8009756:	d004      	beq.n	8009762 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800975e:	d012      	beq.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8009760:	e070      	b.n	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009762:	4b5a      	ldr	r3, [pc, #360]	; (80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800976a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800976e:	d107      	bne.n	8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009774:	4618      	mov	r0, r3
 8009776:	f000 fd73 	bl	800a260 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800977a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800977e:	e2a4      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009780:	2300      	movs	r3, #0
 8009782:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009784:	e2a1      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009786:	4b51      	ldr	r3, [pc, #324]	; (80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800978e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009792:	d107      	bne.n	80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009794:	f107 0318 	add.w	r3, r7, #24
 8009798:	4618      	mov	r0, r3
 800979a:	f000 fab9 	bl	8009d10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80097a2:	e292      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80097a4:	2300      	movs	r3, #0
 80097a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097a8:	e28f      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80097aa:	4b48      	ldr	r3, [pc, #288]	; (80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097b6:	d107      	bne.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097b8:	f107 030c 	add.w	r3, r7, #12
 80097bc:	4618      	mov	r0, r3
 80097be:	f000 fbfb 	bl	8009fb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80097c6:	e280      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80097c8:	2300      	movs	r3, #0
 80097ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097cc:	e27d      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80097ce:	4b3f      	ldr	r3, [pc, #252]	; (80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80097d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80097d6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097d8:	4b3c      	ldr	r3, [pc, #240]	; (80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f003 0304 	and.w	r3, r3, #4
 80097e0:	2b04      	cmp	r3, #4
 80097e2:	d10c      	bne.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80097e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d109      	bne.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80097ea:	4b38      	ldr	r3, [pc, #224]	; (80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	08db      	lsrs	r3, r3, #3
 80097f0:	f003 0303 	and.w	r3, r3, #3
 80097f4:	4a36      	ldr	r2, [pc, #216]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80097f6:	fa22 f303 	lsr.w	r3, r2, r3
 80097fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097fc:	e01e      	b.n	800983c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097fe:	4b33      	ldr	r3, [pc, #204]	; (80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800980a:	d106      	bne.n	800981a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800980c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800980e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009812:	d102      	bne.n	800981a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009814:	4b2f      	ldr	r3, [pc, #188]	; (80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009816:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009818:	e010      	b.n	800983c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800981a:	4b2c      	ldr	r3, [pc, #176]	; (80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009822:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009826:	d106      	bne.n	8009836 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8009828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800982a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800982e:	d102      	bne.n	8009836 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009830:	4b29      	ldr	r3, [pc, #164]	; (80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009834:	e002      	b.n	800983c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009836:	2300      	movs	r3, #0
 8009838:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800983a:	e246      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800983c:	e245      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800983e:	4b27      	ldr	r3, [pc, #156]	; (80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009840:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009842:	e242      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009844:	2300      	movs	r3, #0
 8009846:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009848:	e23f      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009850:	f040 80a8 	bne.w	80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009854:	4b1d      	ldr	r3, [pc, #116]	; (80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009858:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800985c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800985e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009860:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009864:	d060      	beq.n	8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8009866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009868:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800986c:	f200 8097 	bhi.w	800999e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009872:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009876:	f000 808f 	beq.w	8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800987a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009880:	f200 808d 	bhi.w	800999e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800988a:	d03b      	beq.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800988c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009892:	f200 8084 	bhi.w	800999e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009898:	2b00      	cmp	r3, #0
 800989a:	d004      	beq.n	80098a6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800989c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098a2:	d01d      	beq.n	80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 80098a4:	e07b      	b.n	800999e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80098a6:	4b09      	ldr	r3, [pc, #36]	; (80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098b2:	d107      	bne.n	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098b8:	4618      	mov	r0, r3
 80098ba:	f000 fcd1 	bl	800a260 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80098be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80098c2:	e202      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80098c4:	2300      	movs	r3, #0
 80098c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098c8:	e1ff      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80098ca:	bf00      	nop
 80098cc:	58024400 	.word	0x58024400
 80098d0:	03d09000 	.word	0x03d09000
 80098d4:	003d0900 	.word	0x003d0900
 80098d8:	007a1200 	.word	0x007a1200
 80098dc:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098e0:	4ba3      	ldr	r3, [pc, #652]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80098ec:	d107      	bne.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098ee:	f107 0318 	add.w	r3, r7, #24
 80098f2:	4618      	mov	r0, r3
 80098f4:	f000 fa0c 	bl	8009d10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80098f8:	69bb      	ldr	r3, [r7, #24]
 80098fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80098fc:	e1e5      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80098fe:	2300      	movs	r3, #0
 8009900:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009902:	e1e2      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009904:	4b9a      	ldr	r3, [pc, #616]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800990c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009910:	d107      	bne.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009912:	f107 030c 	add.w	r3, r7, #12
 8009916:	4618      	mov	r0, r3
 8009918:	f000 fb4e 	bl	8009fb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009920:	e1d3      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009922:	2300      	movs	r3, #0
 8009924:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009926:	e1d0      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009928:	4b91      	ldr	r3, [pc, #580]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800992a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800992c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009930:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009932:	4b8f      	ldr	r3, [pc, #572]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f003 0304 	and.w	r3, r3, #4
 800993a:	2b04      	cmp	r3, #4
 800993c:	d10c      	bne.n	8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800993e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009940:	2b00      	cmp	r3, #0
 8009942:	d109      	bne.n	8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009944:	4b8a      	ldr	r3, [pc, #552]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	08db      	lsrs	r3, r3, #3
 800994a:	f003 0303 	and.w	r3, r3, #3
 800994e:	4a89      	ldr	r2, [pc, #548]	; (8009b74 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009950:	fa22 f303 	lsr.w	r3, r2, r3
 8009954:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009956:	e01e      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009958:	4b85      	ldr	r3, [pc, #532]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009964:	d106      	bne.n	8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8009966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009968:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800996c:	d102      	bne.n	8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800996e:	4b82      	ldr	r3, [pc, #520]	; (8009b78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009970:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009972:	e010      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009974:	4b7e      	ldr	r3, [pc, #504]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800997c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009980:	d106      	bne.n	8009990 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009988:	d102      	bne.n	8009990 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800998a:	4b7c      	ldr	r3, [pc, #496]	; (8009b7c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800998c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800998e:	e002      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009990:	2300      	movs	r3, #0
 8009992:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009994:	e199      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009996:	e198      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009998:	4b79      	ldr	r3, [pc, #484]	; (8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800999a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800999c:	e195      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800999e:	2300      	movs	r3, #0
 80099a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099a2:	e192      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80099aa:	d173      	bne.n	8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80099ac:	4b70      	ldr	r3, [pc, #448]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80099ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80099b4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80099b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099bc:	d02f      	beq.n	8009a1e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80099be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099c4:	d863      	bhi.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80099c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d004      	beq.n	80099d6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80099cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099d2:	d012      	beq.n	80099fa <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 80099d4:	e05b      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099d6:	4b66      	ldr	r3, [pc, #408]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099e2:	d107      	bne.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099e4:	f107 0318 	add.w	r3, r7, #24
 80099e8:	4618      	mov	r0, r3
 80099ea:	f000 f991 	bl	8009d10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80099ee:	69bb      	ldr	r3, [r7, #24]
 80099f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80099f2:	e16a      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80099f4:	2300      	movs	r3, #0
 80099f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099f8:	e167      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80099fa:	4b5d      	ldr	r3, [pc, #372]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a06:	d107      	bne.n	8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a08:	f107 030c 	add.w	r3, r7, #12
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f000 fad3 	bl	8009fb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009a16:	e158      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a1c:	e155      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009a1e:	4b54      	ldr	r3, [pc, #336]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009a26:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a28:	4b51      	ldr	r3, [pc, #324]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f003 0304 	and.w	r3, r3, #4
 8009a30:	2b04      	cmp	r3, #4
 8009a32:	d10c      	bne.n	8009a4e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8009a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d109      	bne.n	8009a4e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a3a:	4b4d      	ldr	r3, [pc, #308]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	08db      	lsrs	r3, r3, #3
 8009a40:	f003 0303 	and.w	r3, r3, #3
 8009a44:	4a4b      	ldr	r2, [pc, #300]	; (8009b74 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009a46:	fa22 f303 	lsr.w	r3, r2, r3
 8009a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a4c:	e01e      	b.n	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a4e:	4b48      	ldr	r3, [pc, #288]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a5a:	d106      	bne.n	8009a6a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8009a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a62:	d102      	bne.n	8009a6a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009a64:	4b44      	ldr	r3, [pc, #272]	; (8009b78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009a66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a68:	e010      	b.n	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a6a:	4b41      	ldr	r3, [pc, #260]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a76:	d106      	bne.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8009a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a7e:	d102      	bne.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009a80:	4b3e      	ldr	r3, [pc, #248]	; (8009b7c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009a82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a84:	e002      	b.n	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009a86:	2300      	movs	r3, #0
 8009a88:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009a8a:	e11e      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009a8c:	e11d      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a92:	e11a      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a9a:	d133      	bne.n	8009b04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009a9c:	4b34      	ldr	r3, [pc, #208]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009aa4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d004      	beq.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8009aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ab2:	d012      	beq.n	8009ada <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8009ab4:	e023      	b.n	8009afe <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ab6:	4b2e      	ldr	r3, [pc, #184]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009abe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ac2:	d107      	bne.n	8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f000 fbc9 	bl	800a260 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009ad2:	e0fa      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ad8:	e0f7      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ada:	4b25      	ldr	r3, [pc, #148]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ae2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ae6:	d107      	bne.n	8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ae8:	f107 0318 	add.w	r3, r7, #24
 8009aec:	4618      	mov	r0, r3
 8009aee:	f000 f90f 	bl	8009d10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009af2:	6a3b      	ldr	r3, [r7, #32]
 8009af4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009af6:	e0e8      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009af8:	2300      	movs	r3, #0
 8009afa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009afc:	e0e5      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009afe:	2300      	movs	r3, #0
 8009b00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b02:	e0e2      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b0a:	f040 808f 	bne.w	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009b0e:	4b18      	ldr	r3, [pc, #96]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b12:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009b16:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b1e:	d075      	beq.n	8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8009b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b26:	d87e      	bhi.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b2e:	d060      	beq.n	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8009b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b36:	d876      	bhi.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b3e:	d045      	beq.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8009b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b46:	d86e      	bhi.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b4e:	d02b      	beq.n	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8009b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b56:	d866      	bhi.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d004      	beq.n	8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8009b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b64:	d00e      	beq.n	8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009b66:	e05e      	b.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009b68:	f000 f8bc 	bl	8009ce4 <HAL_RCCEx_GetD3PCLK1Freq>
 8009b6c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009b6e:	e0ac      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009b70:	58024400 	.word	0x58024400
 8009b74:	03d09000 	.word	0x03d09000
 8009b78:	003d0900 	.word	0x003d0900
 8009b7c:	007a1200 	.word	0x007a1200
 8009b80:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b84:	4b53      	ldr	r3, [pc, #332]	; (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b90:	d107      	bne.n	8009ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b92:	f107 0318 	add.w	r3, r7, #24
 8009b96:	4618      	mov	r0, r3
 8009b98:	f000 f8ba 	bl	8009d10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009ba0:	e093      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ba6:	e090      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ba8:	4b4a      	ldr	r3, [pc, #296]	; (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bb4:	d107      	bne.n	8009bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bb6:	f107 030c 	add.w	r3, r7, #12
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f000 f9fc 	bl	8009fb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009bc4:	e081      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bca:	e07e      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009bcc:	4b41      	ldr	r3, [pc, #260]	; (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f003 0304 	and.w	r3, r3, #4
 8009bd4:	2b04      	cmp	r3, #4
 8009bd6:	d109      	bne.n	8009bec <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009bd8:	4b3e      	ldr	r3, [pc, #248]	; (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	08db      	lsrs	r3, r3, #3
 8009bde:	f003 0303 	and.w	r3, r3, #3
 8009be2:	4a3d      	ldr	r2, [pc, #244]	; (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009be4:	fa22 f303 	lsr.w	r3, r2, r3
 8009be8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009bea:	e06e      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009bec:	2300      	movs	r3, #0
 8009bee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bf0:	e06b      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009bf2:	4b38      	ldr	r3, [pc, #224]	; (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bfe:	d102      	bne.n	8009c06 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8009c00:	4b36      	ldr	r3, [pc, #216]	; (8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009c02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009c04:	e061      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009c06:	2300      	movs	r3, #0
 8009c08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c0a:	e05e      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009c0c:	4b31      	ldr	r3, [pc, #196]	; (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c18:	d102      	bne.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8009c1a:	4b31      	ldr	r3, [pc, #196]	; (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009c1e:	e054      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009c20:	2300      	movs	r3, #0
 8009c22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c24:	e051      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8009c26:	2300      	movs	r3, #0
 8009c28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c2a:	e04e      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c32:	d148      	bne.n	8009cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009c34:	4b27      	ldr	r3, [pc, #156]	; (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009c3c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c44:	d02a      	beq.n	8009c9c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8009c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c4c:	d838      	bhi.n	8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8009c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d004      	beq.n	8009c5e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c5a:	d00d      	beq.n	8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8009c5c:	e030      	b.n	8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009c5e:	4b1d      	ldr	r3, [pc, #116]	; (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c6a:	d102      	bne.n	8009c72 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8009c6c:	4b1c      	ldr	r3, [pc, #112]	; (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009c70:	e02b      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009c72:	2300      	movs	r3, #0
 8009c74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c76:	e028      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c78:	4b16      	ldr	r3, [pc, #88]	; (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c84:	d107      	bne.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f000 fae8 	bl	800a260 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009c94:	e019      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009c96:	2300      	movs	r3, #0
 8009c98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c9a:	e016      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c9c:	4b0d      	ldr	r3, [pc, #52]	; (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ca4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ca8:	d107      	bne.n	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009caa:	f107 0318 	add.w	r3, r7, #24
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f000 f82e 	bl	8009d10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009cb8:	e007      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009cbe:	e004      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009cc4:	e001      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3740      	adds	r7, #64	; 0x40
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	58024400 	.word	0x58024400
 8009cd8:	03d09000 	.word	0x03d09000
 8009cdc:	003d0900 	.word	0x003d0900
 8009ce0:	007a1200 	.word	0x007a1200

08009ce4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009ce8:	f7fe fb8e 	bl	8008408 <HAL_RCC_GetHCLKFreq>
 8009cec:	4602      	mov	r2, r0
 8009cee:	4b06      	ldr	r3, [pc, #24]	; (8009d08 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009cf0:	6a1b      	ldr	r3, [r3, #32]
 8009cf2:	091b      	lsrs	r3, r3, #4
 8009cf4:	f003 0307 	and.w	r3, r3, #7
 8009cf8:	4904      	ldr	r1, [pc, #16]	; (8009d0c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009cfa:	5ccb      	ldrb	r3, [r1, r3]
 8009cfc:	f003 031f 	and.w	r3, r3, #31
 8009d00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	58024400 	.word	0x58024400
 8009d0c:	0800fe14 	.word	0x0800fe14

08009d10 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b089      	sub	sp, #36	; 0x24
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d18:	4ba1      	ldr	r3, [pc, #644]	; (8009fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d1c:	f003 0303 	and.w	r3, r3, #3
 8009d20:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009d22:	4b9f      	ldr	r3, [pc, #636]	; (8009fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d26:	0b1b      	lsrs	r3, r3, #12
 8009d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d2c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009d2e:	4b9c      	ldr	r3, [pc, #624]	; (8009fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d32:	091b      	lsrs	r3, r3, #4
 8009d34:	f003 0301 	and.w	r3, r3, #1
 8009d38:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009d3a:	4b99      	ldr	r3, [pc, #612]	; (8009fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d3e:	08db      	lsrs	r3, r3, #3
 8009d40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d44:	693a      	ldr	r2, [r7, #16]
 8009d46:	fb02 f303 	mul.w	r3, r2, r3
 8009d4a:	ee07 3a90 	vmov	s15, r3
 8009d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f000 8111 	beq.w	8009f80 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009d5e:	69bb      	ldr	r3, [r7, #24]
 8009d60:	2b02      	cmp	r3, #2
 8009d62:	f000 8083 	beq.w	8009e6c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	2b02      	cmp	r3, #2
 8009d6a:	f200 80a1 	bhi.w	8009eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009d6e:	69bb      	ldr	r3, [r7, #24]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d003      	beq.n	8009d7c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009d74:	69bb      	ldr	r3, [r7, #24]
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d056      	beq.n	8009e28 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009d7a:	e099      	b.n	8009eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d7c:	4b88      	ldr	r3, [pc, #544]	; (8009fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f003 0320 	and.w	r3, r3, #32
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d02d      	beq.n	8009de4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d88:	4b85      	ldr	r3, [pc, #532]	; (8009fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	08db      	lsrs	r3, r3, #3
 8009d8e:	f003 0303 	and.w	r3, r3, #3
 8009d92:	4a84      	ldr	r2, [pc, #528]	; (8009fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009d94:	fa22 f303 	lsr.w	r3, r2, r3
 8009d98:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	ee07 3a90 	vmov	s15, r3
 8009da0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	ee07 3a90 	vmov	s15, r3
 8009daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009db2:	4b7b      	ldr	r3, [pc, #492]	; (8009fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dba:	ee07 3a90 	vmov	s15, r3
 8009dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dc6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dde:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009de2:	e087      	b.n	8009ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	ee07 3a90 	vmov	s15, r3
 8009dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009fac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009df6:	4b6a      	ldr	r3, [pc, #424]	; (8009fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dfe:	ee07 3a90 	vmov	s15, r3
 8009e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e06:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e0a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e26:	e065      	b.n	8009ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	ee07 3a90 	vmov	s15, r3
 8009e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e32:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e3a:	4b59      	ldr	r3, [pc, #356]	; (8009fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e42:	ee07 3a90 	vmov	s15, r3
 8009e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e4e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e6a:	e043      	b.n	8009ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	ee07 3a90 	vmov	s15, r3
 8009e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e76:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e7e:	4b48      	ldr	r3, [pc, #288]	; (8009fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e86:	ee07 3a90 	vmov	s15, r3
 8009e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e92:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eaa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009eae:	e021      	b.n	8009ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	ee07 3a90 	vmov	s15, r3
 8009eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ec2:	4b37      	ldr	r3, [pc, #220]	; (8009fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eca:	ee07 3a90 	vmov	s15, r3
 8009ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ed2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ed6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ee2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ef2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009ef4:	4b2a      	ldr	r3, [pc, #168]	; (8009fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef8:	0a5b      	lsrs	r3, r3, #9
 8009efa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009efe:	ee07 3a90 	vmov	s15, r3
 8009f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f1a:	ee17 2a90 	vmov	r2, s15
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009f22:	4b1f      	ldr	r3, [pc, #124]	; (8009fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f26:	0c1b      	lsrs	r3, r3, #16
 8009f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f2c:	ee07 3a90 	vmov	s15, r3
 8009f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f48:	ee17 2a90 	vmov	r2, s15
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009f50:	4b13      	ldr	r3, [pc, #76]	; (8009fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f54:	0e1b      	lsrs	r3, r3, #24
 8009f56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f5a:	ee07 3a90 	vmov	s15, r3
 8009f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f76:	ee17 2a90 	vmov	r2, s15
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009f7e:	e008      	b.n	8009f92 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	609a      	str	r2, [r3, #8]
}
 8009f92:	bf00      	nop
 8009f94:	3724      	adds	r7, #36	; 0x24
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr
 8009f9e:	bf00      	nop
 8009fa0:	58024400 	.word	0x58024400
 8009fa4:	03d09000 	.word	0x03d09000
 8009fa8:	46000000 	.word	0x46000000
 8009fac:	4c742400 	.word	0x4c742400
 8009fb0:	4a742400 	.word	0x4a742400
 8009fb4:	4af42400 	.word	0x4af42400

08009fb8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b089      	sub	sp, #36	; 0x24
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009fc0:	4ba1      	ldr	r3, [pc, #644]	; (800a248 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fc4:	f003 0303 	and.w	r3, r3, #3
 8009fc8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009fca:	4b9f      	ldr	r3, [pc, #636]	; (800a248 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fce:	0d1b      	lsrs	r3, r3, #20
 8009fd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009fd4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009fd6:	4b9c      	ldr	r3, [pc, #624]	; (800a248 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fda:	0a1b      	lsrs	r3, r3, #8
 8009fdc:	f003 0301 	and.w	r3, r3, #1
 8009fe0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009fe2:	4b99      	ldr	r3, [pc, #612]	; (800a248 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fe6:	08db      	lsrs	r3, r3, #3
 8009fe8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009fec:	693a      	ldr	r2, [r7, #16]
 8009fee:	fb02 f303 	mul.w	r3, r2, r3
 8009ff2:	ee07 3a90 	vmov	s15, r3
 8009ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ffa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	2b00      	cmp	r3, #0
 800a002:	f000 8111 	beq.w	800a228 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a006:	69bb      	ldr	r3, [r7, #24]
 800a008:	2b02      	cmp	r3, #2
 800a00a:	f000 8083 	beq.w	800a114 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a00e:	69bb      	ldr	r3, [r7, #24]
 800a010:	2b02      	cmp	r3, #2
 800a012:	f200 80a1 	bhi.w	800a158 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d003      	beq.n	800a024 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a01c:	69bb      	ldr	r3, [r7, #24]
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d056      	beq.n	800a0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a022:	e099      	b.n	800a158 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a024:	4b88      	ldr	r3, [pc, #544]	; (800a248 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f003 0320 	and.w	r3, r3, #32
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d02d      	beq.n	800a08c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a030:	4b85      	ldr	r3, [pc, #532]	; (800a248 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	08db      	lsrs	r3, r3, #3
 800a036:	f003 0303 	and.w	r3, r3, #3
 800a03a:	4a84      	ldr	r2, [pc, #528]	; (800a24c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a03c:	fa22 f303 	lsr.w	r3, r2, r3
 800a040:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	ee07 3a90 	vmov	s15, r3
 800a048:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	ee07 3a90 	vmov	s15, r3
 800a052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a05a:	4b7b      	ldr	r3, [pc, #492]	; (800a248 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a05c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a05e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a062:	ee07 3a90 	vmov	s15, r3
 800a066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a06a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a06e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a250 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a07a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a07e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a082:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a086:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a08a:	e087      	b.n	800a19c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	ee07 3a90 	vmov	s15, r3
 800a092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a096:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a254 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a09a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a09e:	4b6a      	ldr	r3, [pc, #424]	; (800a248 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0a6:	ee07 3a90 	vmov	s15, r3
 800a0aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a250 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0ce:	e065      	b.n	800a19c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	ee07 3a90 	vmov	s15, r3
 800a0d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a258 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a0de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0e2:	4b59      	ldr	r3, [pc, #356]	; (800a248 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0ea:	ee07 3a90 	vmov	s15, r3
 800a0ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a250 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a10a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a10e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a112:	e043      	b.n	800a19c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	ee07 3a90 	vmov	s15, r3
 800a11a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a11e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a25c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a126:	4b48      	ldr	r3, [pc, #288]	; (800a248 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a12a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a12e:	ee07 3a90 	vmov	s15, r3
 800a132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a136:	ed97 6a03 	vldr	s12, [r7, #12]
 800a13a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a250 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a13e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a14a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a14e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a152:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a156:	e021      	b.n	800a19c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	ee07 3a90 	vmov	s15, r3
 800a15e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a162:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a258 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a16a:	4b37      	ldr	r3, [pc, #220]	; (800a248 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a16e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a172:	ee07 3a90 	vmov	s15, r3
 800a176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a17a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a17e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a250 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a18a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a18e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a192:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a196:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a19a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a19c:	4b2a      	ldr	r3, [pc, #168]	; (800a248 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a19e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a0:	0a5b      	lsrs	r3, r3, #9
 800a1a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1a6:	ee07 3a90 	vmov	s15, r3
 800a1aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1c2:	ee17 2a90 	vmov	r2, s15
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a1ca:	4b1f      	ldr	r3, [pc, #124]	; (800a248 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ce:	0c1b      	lsrs	r3, r3, #16
 800a1d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1d4:	ee07 3a90 	vmov	s15, r3
 800a1d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1e4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1f0:	ee17 2a90 	vmov	r2, s15
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a1f8:	4b13      	ldr	r3, [pc, #76]	; (800a248 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1fc:	0e1b      	lsrs	r3, r3, #24
 800a1fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a202:	ee07 3a90 	vmov	s15, r3
 800a206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a20a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a20e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a212:	edd7 6a07 	vldr	s13, [r7, #28]
 800a216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a21a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a21e:	ee17 2a90 	vmov	r2, s15
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a226:	e008      	b.n	800a23a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2200      	movs	r2, #0
 800a232:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	609a      	str	r2, [r3, #8]
}
 800a23a:	bf00      	nop
 800a23c:	3724      	adds	r7, #36	; 0x24
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop
 800a248:	58024400 	.word	0x58024400
 800a24c:	03d09000 	.word	0x03d09000
 800a250:	46000000 	.word	0x46000000
 800a254:	4c742400 	.word	0x4c742400
 800a258:	4a742400 	.word	0x4a742400
 800a25c:	4af42400 	.word	0x4af42400

0800a260 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a260:	b480      	push	{r7}
 800a262:	b089      	sub	sp, #36	; 0x24
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a268:	4ba0      	ldr	r3, [pc, #640]	; (800a4ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a26a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a26c:	f003 0303 	and.w	r3, r3, #3
 800a270:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a272:	4b9e      	ldr	r3, [pc, #632]	; (800a4ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a276:	091b      	lsrs	r3, r3, #4
 800a278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a27c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a27e:	4b9b      	ldr	r3, [pc, #620]	; (800a4ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a282:	f003 0301 	and.w	r3, r3, #1
 800a286:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a288:	4b98      	ldr	r3, [pc, #608]	; (800a4ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a28a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a28c:	08db      	lsrs	r3, r3, #3
 800a28e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a292:	693a      	ldr	r2, [r7, #16]
 800a294:	fb02 f303 	mul.w	r3, r2, r3
 800a298:	ee07 3a90 	vmov	s15, r3
 800a29c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2a0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	f000 8111 	beq.w	800a4ce <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	2b02      	cmp	r3, #2
 800a2b0:	f000 8083 	beq.w	800a3ba <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a2b4:	69bb      	ldr	r3, [r7, #24]
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	f200 80a1 	bhi.w	800a3fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a2bc:	69bb      	ldr	r3, [r7, #24]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d003      	beq.n	800a2ca <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a2c2:	69bb      	ldr	r3, [r7, #24]
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d056      	beq.n	800a376 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a2c8:	e099      	b.n	800a3fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2ca:	4b88      	ldr	r3, [pc, #544]	; (800a4ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f003 0320 	and.w	r3, r3, #32
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d02d      	beq.n	800a332 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a2d6:	4b85      	ldr	r3, [pc, #532]	; (800a4ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	08db      	lsrs	r3, r3, #3
 800a2dc:	f003 0303 	and.w	r3, r3, #3
 800a2e0:	4a83      	ldr	r2, [pc, #524]	; (800a4f0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a2e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a2e6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	ee07 3a90 	vmov	s15, r3
 800a2ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	ee07 3a90 	vmov	s15, r3
 800a2f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a300:	4b7a      	ldr	r3, [pc, #488]	; (800a4ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a308:	ee07 3a90 	vmov	s15, r3
 800a30c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a310:	ed97 6a03 	vldr	s12, [r7, #12]
 800a314:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a4f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a318:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a31c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a320:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a324:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a32c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a330:	e087      	b.n	800a442 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	ee07 3a90 	vmov	s15, r3
 800a338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a33c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a4f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a340:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a344:	4b69      	ldr	r3, [pc, #420]	; (800a4ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a34c:	ee07 3a90 	vmov	s15, r3
 800a350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a354:	ed97 6a03 	vldr	s12, [r7, #12]
 800a358:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a4f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a35c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a360:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a364:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a368:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a36c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a370:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a374:	e065      	b.n	800a442 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	ee07 3a90 	vmov	s15, r3
 800a37c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a380:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a4fc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a384:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a388:	4b58      	ldr	r3, [pc, #352]	; (800a4ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a38a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a38c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a390:	ee07 3a90 	vmov	s15, r3
 800a394:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a398:	ed97 6a03 	vldr	s12, [r7, #12]
 800a39c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a4f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a3a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a3b8:	e043      	b.n	800a442 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	ee07 3a90 	vmov	s15, r3
 800a3c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3c4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a500 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a3c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3cc:	4b47      	ldr	r3, [pc, #284]	; (800a4ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3d4:	ee07 3a90 	vmov	s15, r3
 800a3d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3e0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a4f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a3e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a3fc:	e021      	b.n	800a442 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	ee07 3a90 	vmov	s15, r3
 800a404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a408:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a4f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a40c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a410:	4b36      	ldr	r3, [pc, #216]	; (800a4ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a418:	ee07 3a90 	vmov	s15, r3
 800a41c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a420:	ed97 6a03 	vldr	s12, [r7, #12]
 800a424:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a4f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a428:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a42c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a430:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a434:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a43c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a440:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a442:	4b2a      	ldr	r3, [pc, #168]	; (800a4ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a446:	0a5b      	lsrs	r3, r3, #9
 800a448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a44c:	ee07 3a90 	vmov	s15, r3
 800a450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a454:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a458:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a45c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a468:	ee17 2a90 	vmov	r2, s15
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a470:	4b1e      	ldr	r3, [pc, #120]	; (800a4ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a474:	0c1b      	lsrs	r3, r3, #16
 800a476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a47a:	ee07 3a90 	vmov	s15, r3
 800a47e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a482:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a486:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a48a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a48e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a496:	ee17 2a90 	vmov	r2, s15
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a49e:	4b13      	ldr	r3, [pc, #76]	; (800a4ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a4a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4a2:	0e1b      	lsrs	r3, r3, #24
 800a4a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4a8:	ee07 3a90 	vmov	s15, r3
 800a4ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4c4:	ee17 2a90 	vmov	r2, s15
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a4cc:	e008      	b.n	800a4e0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	609a      	str	r2, [r3, #8]
}
 800a4e0:	bf00      	nop
 800a4e2:	3724      	adds	r7, #36	; 0x24
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr
 800a4ec:	58024400 	.word	0x58024400
 800a4f0:	03d09000 	.word	0x03d09000
 800a4f4:	46000000 	.word	0x46000000
 800a4f8:	4c742400 	.word	0x4c742400
 800a4fc:	4a742400 	.word	0x4a742400
 800a500:	4af42400 	.word	0x4af42400

0800a504 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a50e:	2300      	movs	r3, #0
 800a510:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a512:	4b53      	ldr	r3, [pc, #332]	; (800a660 <RCCEx_PLL2_Config+0x15c>)
 800a514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a516:	f003 0303 	and.w	r3, r3, #3
 800a51a:	2b03      	cmp	r3, #3
 800a51c:	d101      	bne.n	800a522 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	e099      	b.n	800a656 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a522:	4b4f      	ldr	r3, [pc, #316]	; (800a660 <RCCEx_PLL2_Config+0x15c>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a4e      	ldr	r2, [pc, #312]	; (800a660 <RCCEx_PLL2_Config+0x15c>)
 800a528:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a52c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a52e:	f7f7 fd07 	bl	8001f40 <HAL_GetTick>
 800a532:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a534:	e008      	b.n	800a548 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a536:	f7f7 fd03 	bl	8001f40 <HAL_GetTick>
 800a53a:	4602      	mov	r2, r0
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	1ad3      	subs	r3, r2, r3
 800a540:	2b02      	cmp	r3, #2
 800a542:	d901      	bls.n	800a548 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a544:	2303      	movs	r3, #3
 800a546:	e086      	b.n	800a656 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a548:	4b45      	ldr	r3, [pc, #276]	; (800a660 <RCCEx_PLL2_Config+0x15c>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a550:	2b00      	cmp	r3, #0
 800a552:	d1f0      	bne.n	800a536 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a554:	4b42      	ldr	r3, [pc, #264]	; (800a660 <RCCEx_PLL2_Config+0x15c>)
 800a556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a558:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	031b      	lsls	r3, r3, #12
 800a562:	493f      	ldr	r1, [pc, #252]	; (800a660 <RCCEx_PLL2_Config+0x15c>)
 800a564:	4313      	orrs	r3, r2
 800a566:	628b      	str	r3, [r1, #40]	; 0x28
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	3b01      	subs	r3, #1
 800a56e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	3b01      	subs	r3, #1
 800a578:	025b      	lsls	r3, r3, #9
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	431a      	orrs	r2, r3
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	68db      	ldr	r3, [r3, #12]
 800a582:	3b01      	subs	r3, #1
 800a584:	041b      	lsls	r3, r3, #16
 800a586:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a58a:	431a      	orrs	r2, r3
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	691b      	ldr	r3, [r3, #16]
 800a590:	3b01      	subs	r3, #1
 800a592:	061b      	lsls	r3, r3, #24
 800a594:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a598:	4931      	ldr	r1, [pc, #196]	; (800a660 <RCCEx_PLL2_Config+0x15c>)
 800a59a:	4313      	orrs	r3, r2
 800a59c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a59e:	4b30      	ldr	r3, [pc, #192]	; (800a660 <RCCEx_PLL2_Config+0x15c>)
 800a5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	695b      	ldr	r3, [r3, #20]
 800a5aa:	492d      	ldr	r1, [pc, #180]	; (800a660 <RCCEx_PLL2_Config+0x15c>)
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a5b0:	4b2b      	ldr	r3, [pc, #172]	; (800a660 <RCCEx_PLL2_Config+0x15c>)
 800a5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b4:	f023 0220 	bic.w	r2, r3, #32
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	699b      	ldr	r3, [r3, #24]
 800a5bc:	4928      	ldr	r1, [pc, #160]	; (800a660 <RCCEx_PLL2_Config+0x15c>)
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a5c2:	4b27      	ldr	r3, [pc, #156]	; (800a660 <RCCEx_PLL2_Config+0x15c>)
 800a5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c6:	4a26      	ldr	r2, [pc, #152]	; (800a660 <RCCEx_PLL2_Config+0x15c>)
 800a5c8:	f023 0310 	bic.w	r3, r3, #16
 800a5cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a5ce:	4b24      	ldr	r3, [pc, #144]	; (800a660 <RCCEx_PLL2_Config+0x15c>)
 800a5d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5d2:	4b24      	ldr	r3, [pc, #144]	; (800a664 <RCCEx_PLL2_Config+0x160>)
 800a5d4:	4013      	ands	r3, r2
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	69d2      	ldr	r2, [r2, #28]
 800a5da:	00d2      	lsls	r2, r2, #3
 800a5dc:	4920      	ldr	r1, [pc, #128]	; (800a660 <RCCEx_PLL2_Config+0x15c>)
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a5e2:	4b1f      	ldr	r3, [pc, #124]	; (800a660 <RCCEx_PLL2_Config+0x15c>)
 800a5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e6:	4a1e      	ldr	r2, [pc, #120]	; (800a660 <RCCEx_PLL2_Config+0x15c>)
 800a5e8:	f043 0310 	orr.w	r3, r3, #16
 800a5ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d106      	bne.n	800a602 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a5f4:	4b1a      	ldr	r3, [pc, #104]	; (800a660 <RCCEx_PLL2_Config+0x15c>)
 800a5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f8:	4a19      	ldr	r2, [pc, #100]	; (800a660 <RCCEx_PLL2_Config+0x15c>)
 800a5fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a5fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a600:	e00f      	b.n	800a622 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	2b01      	cmp	r3, #1
 800a606:	d106      	bne.n	800a616 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a608:	4b15      	ldr	r3, [pc, #84]	; (800a660 <RCCEx_PLL2_Config+0x15c>)
 800a60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a60c:	4a14      	ldr	r2, [pc, #80]	; (800a660 <RCCEx_PLL2_Config+0x15c>)
 800a60e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a612:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a614:	e005      	b.n	800a622 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a616:	4b12      	ldr	r3, [pc, #72]	; (800a660 <RCCEx_PLL2_Config+0x15c>)
 800a618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a61a:	4a11      	ldr	r2, [pc, #68]	; (800a660 <RCCEx_PLL2_Config+0x15c>)
 800a61c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a620:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a622:	4b0f      	ldr	r3, [pc, #60]	; (800a660 <RCCEx_PLL2_Config+0x15c>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4a0e      	ldr	r2, [pc, #56]	; (800a660 <RCCEx_PLL2_Config+0x15c>)
 800a628:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a62c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a62e:	f7f7 fc87 	bl	8001f40 <HAL_GetTick>
 800a632:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a634:	e008      	b.n	800a648 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a636:	f7f7 fc83 	bl	8001f40 <HAL_GetTick>
 800a63a:	4602      	mov	r2, r0
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	1ad3      	subs	r3, r2, r3
 800a640:	2b02      	cmp	r3, #2
 800a642:	d901      	bls.n	800a648 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a644:	2303      	movs	r3, #3
 800a646:	e006      	b.n	800a656 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a648:	4b05      	ldr	r3, [pc, #20]	; (800a660 <RCCEx_PLL2_Config+0x15c>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a650:	2b00      	cmp	r3, #0
 800a652:	d0f0      	beq.n	800a636 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a654:	7bfb      	ldrb	r3, [r7, #15]
}
 800a656:	4618      	mov	r0, r3
 800a658:	3710      	adds	r7, #16
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	58024400 	.word	0x58024400
 800a664:	ffff0007 	.word	0xffff0007

0800a668 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b084      	sub	sp, #16
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a672:	2300      	movs	r3, #0
 800a674:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a676:	4b53      	ldr	r3, [pc, #332]	; (800a7c4 <RCCEx_PLL3_Config+0x15c>)
 800a678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a67a:	f003 0303 	and.w	r3, r3, #3
 800a67e:	2b03      	cmp	r3, #3
 800a680:	d101      	bne.n	800a686 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a682:	2301      	movs	r3, #1
 800a684:	e099      	b.n	800a7ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a686:	4b4f      	ldr	r3, [pc, #316]	; (800a7c4 <RCCEx_PLL3_Config+0x15c>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a4e      	ldr	r2, [pc, #312]	; (800a7c4 <RCCEx_PLL3_Config+0x15c>)
 800a68c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a690:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a692:	f7f7 fc55 	bl	8001f40 <HAL_GetTick>
 800a696:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a698:	e008      	b.n	800a6ac <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a69a:	f7f7 fc51 	bl	8001f40 <HAL_GetTick>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	1ad3      	subs	r3, r2, r3
 800a6a4:	2b02      	cmp	r3, #2
 800a6a6:	d901      	bls.n	800a6ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a6a8:	2303      	movs	r3, #3
 800a6aa:	e086      	b.n	800a7ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a6ac:	4b45      	ldr	r3, [pc, #276]	; (800a7c4 <RCCEx_PLL3_Config+0x15c>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d1f0      	bne.n	800a69a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a6b8:	4b42      	ldr	r3, [pc, #264]	; (800a7c4 <RCCEx_PLL3_Config+0x15c>)
 800a6ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6bc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	051b      	lsls	r3, r3, #20
 800a6c6:	493f      	ldr	r1, [pc, #252]	; (800a7c4 <RCCEx_PLL3_Config+0x15c>)
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	628b      	str	r3, [r1, #40]	; 0x28
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	3b01      	subs	r3, #1
 800a6d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	3b01      	subs	r3, #1
 800a6dc:	025b      	lsls	r3, r3, #9
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	431a      	orrs	r2, r3
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	68db      	ldr	r3, [r3, #12]
 800a6e6:	3b01      	subs	r3, #1
 800a6e8:	041b      	lsls	r3, r3, #16
 800a6ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a6ee:	431a      	orrs	r2, r3
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	691b      	ldr	r3, [r3, #16]
 800a6f4:	3b01      	subs	r3, #1
 800a6f6:	061b      	lsls	r3, r3, #24
 800a6f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a6fc:	4931      	ldr	r1, [pc, #196]	; (800a7c4 <RCCEx_PLL3_Config+0x15c>)
 800a6fe:	4313      	orrs	r3, r2
 800a700:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a702:	4b30      	ldr	r3, [pc, #192]	; (800a7c4 <RCCEx_PLL3_Config+0x15c>)
 800a704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a706:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	695b      	ldr	r3, [r3, #20]
 800a70e:	492d      	ldr	r1, [pc, #180]	; (800a7c4 <RCCEx_PLL3_Config+0x15c>)
 800a710:	4313      	orrs	r3, r2
 800a712:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a714:	4b2b      	ldr	r3, [pc, #172]	; (800a7c4 <RCCEx_PLL3_Config+0x15c>)
 800a716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a718:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	699b      	ldr	r3, [r3, #24]
 800a720:	4928      	ldr	r1, [pc, #160]	; (800a7c4 <RCCEx_PLL3_Config+0x15c>)
 800a722:	4313      	orrs	r3, r2
 800a724:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a726:	4b27      	ldr	r3, [pc, #156]	; (800a7c4 <RCCEx_PLL3_Config+0x15c>)
 800a728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a72a:	4a26      	ldr	r2, [pc, #152]	; (800a7c4 <RCCEx_PLL3_Config+0x15c>)
 800a72c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a730:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a732:	4b24      	ldr	r3, [pc, #144]	; (800a7c4 <RCCEx_PLL3_Config+0x15c>)
 800a734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a736:	4b24      	ldr	r3, [pc, #144]	; (800a7c8 <RCCEx_PLL3_Config+0x160>)
 800a738:	4013      	ands	r3, r2
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	69d2      	ldr	r2, [r2, #28]
 800a73e:	00d2      	lsls	r2, r2, #3
 800a740:	4920      	ldr	r1, [pc, #128]	; (800a7c4 <RCCEx_PLL3_Config+0x15c>)
 800a742:	4313      	orrs	r3, r2
 800a744:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a746:	4b1f      	ldr	r3, [pc, #124]	; (800a7c4 <RCCEx_PLL3_Config+0x15c>)
 800a748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a74a:	4a1e      	ldr	r2, [pc, #120]	; (800a7c4 <RCCEx_PLL3_Config+0x15c>)
 800a74c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a750:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d106      	bne.n	800a766 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a758:	4b1a      	ldr	r3, [pc, #104]	; (800a7c4 <RCCEx_PLL3_Config+0x15c>)
 800a75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a75c:	4a19      	ldr	r2, [pc, #100]	; (800a7c4 <RCCEx_PLL3_Config+0x15c>)
 800a75e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a762:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a764:	e00f      	b.n	800a786 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d106      	bne.n	800a77a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a76c:	4b15      	ldr	r3, [pc, #84]	; (800a7c4 <RCCEx_PLL3_Config+0x15c>)
 800a76e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a770:	4a14      	ldr	r2, [pc, #80]	; (800a7c4 <RCCEx_PLL3_Config+0x15c>)
 800a772:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a776:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a778:	e005      	b.n	800a786 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a77a:	4b12      	ldr	r3, [pc, #72]	; (800a7c4 <RCCEx_PLL3_Config+0x15c>)
 800a77c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a77e:	4a11      	ldr	r2, [pc, #68]	; (800a7c4 <RCCEx_PLL3_Config+0x15c>)
 800a780:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a784:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a786:	4b0f      	ldr	r3, [pc, #60]	; (800a7c4 <RCCEx_PLL3_Config+0x15c>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a0e      	ldr	r2, [pc, #56]	; (800a7c4 <RCCEx_PLL3_Config+0x15c>)
 800a78c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a790:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a792:	f7f7 fbd5 	bl	8001f40 <HAL_GetTick>
 800a796:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a798:	e008      	b.n	800a7ac <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a79a:	f7f7 fbd1 	bl	8001f40 <HAL_GetTick>
 800a79e:	4602      	mov	r2, r0
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	1ad3      	subs	r3, r2, r3
 800a7a4:	2b02      	cmp	r3, #2
 800a7a6:	d901      	bls.n	800a7ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a7a8:	2303      	movs	r3, #3
 800a7aa:	e006      	b.n	800a7ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a7ac:	4b05      	ldr	r3, [pc, #20]	; (800a7c4 <RCCEx_PLL3_Config+0x15c>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d0f0      	beq.n	800a79a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a7b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3710      	adds	r7, #16
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	58024400 	.word	0x58024400
 800a7c8:	ffff0007 	.word	0xffff0007

0800a7cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d101      	bne.n	800a7de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a7da:	2301      	movs	r3, #1
 800a7dc:	e049      	b.n	800a872 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d106      	bne.n	800a7f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f7f7 f92c 	bl	8001a50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2202      	movs	r2, #2
 800a7fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	3304      	adds	r3, #4
 800a808:	4619      	mov	r1, r3
 800a80a:	4610      	mov	r0, r2
 800a80c:	f000 fb3e 	bl	800ae8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2201      	movs	r2, #1
 800a82c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2201      	movs	r2, #1
 800a834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2201      	movs	r2, #1
 800a83c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2201      	movs	r2, #1
 800a854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2201      	movs	r2, #1
 800a85c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2201      	movs	r2, #1
 800a864:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2201      	movs	r2, #1
 800a86c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a870:	2300      	movs	r3, #0
}
 800a872:	4618      	mov	r0, r3
 800a874:	3708      	adds	r7, #8
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
	...

0800a87c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b086      	sub	sp, #24
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d101      	bne.n	800a890 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a88c:	2301      	movs	r3, #1
 800a88e:	e08f      	b.n	800a9b0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a896:	b2db      	uxtb	r3, r3
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d106      	bne.n	800a8aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f7f7 f863 	bl	8001970 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2202      	movs	r2, #2
 800a8ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	6899      	ldr	r1, [r3, #8]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	4b3e      	ldr	r3, [pc, #248]	; (800a9b8 <HAL_TIM_Encoder_Init+0x13c>)
 800a8be:	400b      	ands	r3, r1
 800a8c0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	3304      	adds	r3, #4
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	4610      	mov	r0, r2
 800a8ce:	f000 fadd 	bl	800ae8c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	699b      	ldr	r3, [r3, #24]
 800a8e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	6a1b      	ldr	r3, [r3, #32]
 800a8e8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	697a      	ldr	r2, [r7, #20]
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a8f4:	693a      	ldr	r2, [r7, #16]
 800a8f6:	4b31      	ldr	r3, [pc, #196]	; (800a9bc <HAL_TIM_Encoder_Init+0x140>)
 800a8f8:	4013      	ands	r3, r2
 800a8fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	689a      	ldr	r2, [r3, #8]
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	699b      	ldr	r3, [r3, #24]
 800a904:	021b      	lsls	r3, r3, #8
 800a906:	4313      	orrs	r3, r2
 800a908:	693a      	ldr	r2, [r7, #16]
 800a90a:	4313      	orrs	r3, r2
 800a90c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a90e:	693a      	ldr	r2, [r7, #16]
 800a910:	4b2b      	ldr	r3, [pc, #172]	; (800a9c0 <HAL_TIM_Encoder_Init+0x144>)
 800a912:	4013      	ands	r3, r2
 800a914:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a916:	693a      	ldr	r2, [r7, #16]
 800a918:	4b2a      	ldr	r3, [pc, #168]	; (800a9c4 <HAL_TIM_Encoder_Init+0x148>)
 800a91a:	4013      	ands	r3, r2
 800a91c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	68da      	ldr	r2, [r3, #12]
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	69db      	ldr	r3, [r3, #28]
 800a926:	021b      	lsls	r3, r3, #8
 800a928:	4313      	orrs	r3, r2
 800a92a:	693a      	ldr	r2, [r7, #16]
 800a92c:	4313      	orrs	r3, r2
 800a92e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	691b      	ldr	r3, [r3, #16]
 800a934:	011a      	lsls	r2, r3, #4
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	6a1b      	ldr	r3, [r3, #32]
 800a93a:	031b      	lsls	r3, r3, #12
 800a93c:	4313      	orrs	r3, r2
 800a93e:	693a      	ldr	r2, [r7, #16]
 800a940:	4313      	orrs	r3, r2
 800a942:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a94a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a952:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	685a      	ldr	r2, [r3, #4]
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	695b      	ldr	r3, [r3, #20]
 800a95c:	011b      	lsls	r3, r3, #4
 800a95e:	4313      	orrs	r3, r2
 800a960:	68fa      	ldr	r2, [r7, #12]
 800a962:	4313      	orrs	r3, r2
 800a964:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	697a      	ldr	r2, [r7, #20]
 800a96c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	693a      	ldr	r2, [r7, #16]
 800a974:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	68fa      	ldr	r2, [r7, #12]
 800a97c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2201      	movs	r2, #1
 800a982:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2201      	movs	r2, #1
 800a98a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2201      	movs	r2, #1
 800a992:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2201      	movs	r2, #1
 800a99a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a9ae:	2300      	movs	r3, #0
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3718      	adds	r7, #24
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	fffebff8 	.word	0xfffebff8
 800a9bc:	fffffcfc 	.word	0xfffffcfc
 800a9c0:	fffff3f3 	.word	0xfffff3f3
 800a9c4:	ffff0f0f 	.word	0xffff0f0f

0800a9c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	691b      	ldr	r3, [r3, #16]
 800a9d6:	f003 0302 	and.w	r3, r3, #2
 800a9da:	2b02      	cmp	r3, #2
 800a9dc:	d122      	bne.n	800aa24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	f003 0302 	and.w	r3, r3, #2
 800a9e8:	2b02      	cmp	r3, #2
 800a9ea:	d11b      	bne.n	800aa24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f06f 0202 	mvn.w	r2, #2
 800a9f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	699b      	ldr	r3, [r3, #24]
 800aa02:	f003 0303 	and.w	r3, r3, #3
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d003      	beq.n	800aa12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 fa20 	bl	800ae50 <HAL_TIM_IC_CaptureCallback>
 800aa10:	e005      	b.n	800aa1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 fa12 	bl	800ae3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 fa23 	bl	800ae64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2200      	movs	r2, #0
 800aa22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	691b      	ldr	r3, [r3, #16]
 800aa2a:	f003 0304 	and.w	r3, r3, #4
 800aa2e:	2b04      	cmp	r3, #4
 800aa30:	d122      	bne.n	800aa78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	68db      	ldr	r3, [r3, #12]
 800aa38:	f003 0304 	and.w	r3, r3, #4
 800aa3c:	2b04      	cmp	r3, #4
 800aa3e:	d11b      	bne.n	800aa78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f06f 0204 	mvn.w	r2, #4
 800aa48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2202      	movs	r2, #2
 800aa4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	699b      	ldr	r3, [r3, #24]
 800aa56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d003      	beq.n	800aa66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 f9f6 	bl	800ae50 <HAL_TIM_IC_CaptureCallback>
 800aa64:	e005      	b.n	800aa72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 f9e8 	bl	800ae3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f000 f9f9 	bl	800ae64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2200      	movs	r2, #0
 800aa76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	691b      	ldr	r3, [r3, #16]
 800aa7e:	f003 0308 	and.w	r3, r3, #8
 800aa82:	2b08      	cmp	r3, #8
 800aa84:	d122      	bne.n	800aacc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	68db      	ldr	r3, [r3, #12]
 800aa8c:	f003 0308 	and.w	r3, r3, #8
 800aa90:	2b08      	cmp	r3, #8
 800aa92:	d11b      	bne.n	800aacc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f06f 0208 	mvn.w	r2, #8
 800aa9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2204      	movs	r2, #4
 800aaa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	69db      	ldr	r3, [r3, #28]
 800aaaa:	f003 0303 	and.w	r3, r3, #3
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d003      	beq.n	800aaba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 f9cc 	bl	800ae50 <HAL_TIM_IC_CaptureCallback>
 800aab8:	e005      	b.n	800aac6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 f9be 	bl	800ae3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f000 f9cf 	bl	800ae64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2200      	movs	r2, #0
 800aaca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	691b      	ldr	r3, [r3, #16]
 800aad2:	f003 0310 	and.w	r3, r3, #16
 800aad6:	2b10      	cmp	r3, #16
 800aad8:	d122      	bne.n	800ab20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	68db      	ldr	r3, [r3, #12]
 800aae0:	f003 0310 	and.w	r3, r3, #16
 800aae4:	2b10      	cmp	r3, #16
 800aae6:	d11b      	bne.n	800ab20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f06f 0210 	mvn.w	r2, #16
 800aaf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2208      	movs	r2, #8
 800aaf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	69db      	ldr	r3, [r3, #28]
 800aafe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d003      	beq.n	800ab0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 f9a2 	bl	800ae50 <HAL_TIM_IC_CaptureCallback>
 800ab0c:	e005      	b.n	800ab1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 f994 	bl	800ae3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 f9a5 	bl	800ae64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	691b      	ldr	r3, [r3, #16]
 800ab26:	f003 0301 	and.w	r3, r3, #1
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d10e      	bne.n	800ab4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	f003 0301 	and.w	r3, r3, #1
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	d107      	bne.n	800ab4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f06f 0201 	mvn.w	r2, #1
 800ab44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 f96e 	bl	800ae28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	691b      	ldr	r3, [r3, #16]
 800ab52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab56:	2b80      	cmp	r3, #128	; 0x80
 800ab58:	d10e      	bne.n	800ab78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab64:	2b80      	cmp	r3, #128	; 0x80
 800ab66:	d107      	bne.n	800ab78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ab70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 fd84 	bl	800b680 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	691b      	ldr	r3, [r3, #16]
 800ab7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab86:	d10e      	bne.n	800aba6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	68db      	ldr	r3, [r3, #12]
 800ab8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab92:	2b80      	cmp	r3, #128	; 0x80
 800ab94:	d107      	bne.n	800aba6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ab9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 fd77 	bl	800b694 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	691b      	ldr	r3, [r3, #16]
 800abac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abb0:	2b40      	cmp	r3, #64	; 0x40
 800abb2:	d10e      	bne.n	800abd2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abbe:	2b40      	cmp	r3, #64	; 0x40
 800abc0:	d107      	bne.n	800abd2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800abca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 f953 	bl	800ae78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	691b      	ldr	r3, [r3, #16]
 800abd8:	f003 0320 	and.w	r3, r3, #32
 800abdc:	2b20      	cmp	r3, #32
 800abde:	d10e      	bne.n	800abfe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	f003 0320 	and.w	r3, r3, #32
 800abea:	2b20      	cmp	r3, #32
 800abec:	d107      	bne.n	800abfe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f06f 0220 	mvn.w	r2, #32
 800abf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f000 fd37 	bl	800b66c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800abfe:	bf00      	nop
 800ac00:	3708      	adds	r7, #8
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
	...

0800ac08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	60b9      	str	r1, [r7, #8]
 800ac12:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d101      	bne.n	800ac22 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ac1e:	2302      	movs	r3, #2
 800ac20:	e0fd      	b.n	800ae1e <HAL_TIM_PWM_ConfigChannel+0x216>
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	2201      	movs	r2, #1
 800ac26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2b14      	cmp	r3, #20
 800ac2e:	f200 80f0 	bhi.w	800ae12 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800ac32:	a201      	add	r2, pc, #4	; (adr r2, 800ac38 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800ac34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac38:	0800ac8d 	.word	0x0800ac8d
 800ac3c:	0800ae13 	.word	0x0800ae13
 800ac40:	0800ae13 	.word	0x0800ae13
 800ac44:	0800ae13 	.word	0x0800ae13
 800ac48:	0800accd 	.word	0x0800accd
 800ac4c:	0800ae13 	.word	0x0800ae13
 800ac50:	0800ae13 	.word	0x0800ae13
 800ac54:	0800ae13 	.word	0x0800ae13
 800ac58:	0800ad0f 	.word	0x0800ad0f
 800ac5c:	0800ae13 	.word	0x0800ae13
 800ac60:	0800ae13 	.word	0x0800ae13
 800ac64:	0800ae13 	.word	0x0800ae13
 800ac68:	0800ad4f 	.word	0x0800ad4f
 800ac6c:	0800ae13 	.word	0x0800ae13
 800ac70:	0800ae13 	.word	0x0800ae13
 800ac74:	0800ae13 	.word	0x0800ae13
 800ac78:	0800ad91 	.word	0x0800ad91
 800ac7c:	0800ae13 	.word	0x0800ae13
 800ac80:	0800ae13 	.word	0x0800ae13
 800ac84:	0800ae13 	.word	0x0800ae13
 800ac88:	0800add1 	.word	0x0800add1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	68b9      	ldr	r1, [r7, #8]
 800ac92:	4618      	mov	r0, r3
 800ac94:	f000 f994 	bl	800afc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	699a      	ldr	r2, [r3, #24]
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f042 0208 	orr.w	r2, r2, #8
 800aca6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	699a      	ldr	r2, [r3, #24]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f022 0204 	bic.w	r2, r2, #4
 800acb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	6999      	ldr	r1, [r3, #24]
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	691a      	ldr	r2, [r3, #16]
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	430a      	orrs	r2, r1
 800acc8:	619a      	str	r2, [r3, #24]
      break;
 800acca:	e0a3      	b.n	800ae14 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	68b9      	ldr	r1, [r7, #8]
 800acd2:	4618      	mov	r0, r3
 800acd4:	f000 fa04 	bl	800b0e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	699a      	ldr	r2, [r3, #24]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ace6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	699a      	ldr	r2, [r3, #24]
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800acf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	6999      	ldr	r1, [r3, #24]
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	691b      	ldr	r3, [r3, #16]
 800ad02:	021a      	lsls	r2, r3, #8
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	430a      	orrs	r2, r1
 800ad0a:	619a      	str	r2, [r3, #24]
      break;
 800ad0c:	e082      	b.n	800ae14 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	68b9      	ldr	r1, [r7, #8]
 800ad14:	4618      	mov	r0, r3
 800ad16:	f000 fa6d 	bl	800b1f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	69da      	ldr	r2, [r3, #28]
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f042 0208 	orr.w	r2, r2, #8
 800ad28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	69da      	ldr	r2, [r3, #28]
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f022 0204 	bic.w	r2, r2, #4
 800ad38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	69d9      	ldr	r1, [r3, #28]
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	691a      	ldr	r2, [r3, #16]
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	430a      	orrs	r2, r1
 800ad4a:	61da      	str	r2, [r3, #28]
      break;
 800ad4c:	e062      	b.n	800ae14 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	68b9      	ldr	r1, [r7, #8]
 800ad54:	4618      	mov	r0, r3
 800ad56:	f000 fad3 	bl	800b300 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	69da      	ldr	r2, [r3, #28]
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	69da      	ldr	r2, [r3, #28]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	69d9      	ldr	r1, [r3, #28]
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	691b      	ldr	r3, [r3, #16]
 800ad84:	021a      	lsls	r2, r3, #8
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	430a      	orrs	r2, r1
 800ad8c:	61da      	str	r2, [r3, #28]
      break;
 800ad8e:	e041      	b.n	800ae14 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	68b9      	ldr	r1, [r7, #8]
 800ad96:	4618      	mov	r0, r3
 800ad98:	f000 fb1a 	bl	800b3d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f042 0208 	orr.w	r2, r2, #8
 800adaa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f022 0204 	bic.w	r2, r2, #4
 800adba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	691a      	ldr	r2, [r3, #16]
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	430a      	orrs	r2, r1
 800adcc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800adce:	e021      	b.n	800ae14 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	68b9      	ldr	r1, [r7, #8]
 800add6:	4618      	mov	r0, r3
 800add8:	f000 fb5c 	bl	800b494 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800adea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800adfa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	691b      	ldr	r3, [r3, #16]
 800ae06:	021a      	lsls	r2, r3, #8
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	430a      	orrs	r2, r1
 800ae0e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ae10:	e000      	b.n	800ae14 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800ae12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2200      	movs	r2, #0
 800ae18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ae1c:	2300      	movs	r3, #0
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3710      	adds	r7, #16
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop

0800ae28 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b083      	sub	sp, #12
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ae30:	bf00      	nop
 800ae32:	370c      	adds	r7, #12
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr

0800ae3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ae44:	bf00      	nop
 800ae46:	370c      	adds	r7, #12
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr

0800ae50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b083      	sub	sp, #12
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae58:	bf00      	nop
 800ae5a:	370c      	adds	r7, #12
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b083      	sub	sp, #12
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae6c:	bf00      	nop
 800ae6e:	370c      	adds	r7, #12
 800ae70:	46bd      	mov	sp, r7
 800ae72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae76:	4770      	bx	lr

0800ae78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b083      	sub	sp, #12
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae80:	bf00      	nop
 800ae82:	370c      	adds	r7, #12
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr

0800ae8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b085      	sub	sp, #20
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	4a40      	ldr	r2, [pc, #256]	; (800afa0 <TIM_Base_SetConfig+0x114>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d013      	beq.n	800aecc <TIM_Base_SetConfig+0x40>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aeaa:	d00f      	beq.n	800aecc <TIM_Base_SetConfig+0x40>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	4a3d      	ldr	r2, [pc, #244]	; (800afa4 <TIM_Base_SetConfig+0x118>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d00b      	beq.n	800aecc <TIM_Base_SetConfig+0x40>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	4a3c      	ldr	r2, [pc, #240]	; (800afa8 <TIM_Base_SetConfig+0x11c>)
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d007      	beq.n	800aecc <TIM_Base_SetConfig+0x40>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	4a3b      	ldr	r2, [pc, #236]	; (800afac <TIM_Base_SetConfig+0x120>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d003      	beq.n	800aecc <TIM_Base_SetConfig+0x40>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	4a3a      	ldr	r2, [pc, #232]	; (800afb0 <TIM_Base_SetConfig+0x124>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d108      	bne.n	800aede <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	68fa      	ldr	r2, [r7, #12]
 800aeda:	4313      	orrs	r3, r2
 800aedc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	4a2f      	ldr	r2, [pc, #188]	; (800afa0 <TIM_Base_SetConfig+0x114>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d01f      	beq.n	800af26 <TIM_Base_SetConfig+0x9a>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aeec:	d01b      	beq.n	800af26 <TIM_Base_SetConfig+0x9a>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	4a2c      	ldr	r2, [pc, #176]	; (800afa4 <TIM_Base_SetConfig+0x118>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d017      	beq.n	800af26 <TIM_Base_SetConfig+0x9a>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	4a2b      	ldr	r2, [pc, #172]	; (800afa8 <TIM_Base_SetConfig+0x11c>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d013      	beq.n	800af26 <TIM_Base_SetConfig+0x9a>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4a2a      	ldr	r2, [pc, #168]	; (800afac <TIM_Base_SetConfig+0x120>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d00f      	beq.n	800af26 <TIM_Base_SetConfig+0x9a>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	4a29      	ldr	r2, [pc, #164]	; (800afb0 <TIM_Base_SetConfig+0x124>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d00b      	beq.n	800af26 <TIM_Base_SetConfig+0x9a>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	4a28      	ldr	r2, [pc, #160]	; (800afb4 <TIM_Base_SetConfig+0x128>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d007      	beq.n	800af26 <TIM_Base_SetConfig+0x9a>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	4a27      	ldr	r2, [pc, #156]	; (800afb8 <TIM_Base_SetConfig+0x12c>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d003      	beq.n	800af26 <TIM_Base_SetConfig+0x9a>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	4a26      	ldr	r2, [pc, #152]	; (800afbc <TIM_Base_SetConfig+0x130>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d108      	bne.n	800af38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	68db      	ldr	r3, [r3, #12]
 800af32:	68fa      	ldr	r2, [r7, #12]
 800af34:	4313      	orrs	r3, r2
 800af36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	695b      	ldr	r3, [r3, #20]
 800af42:	4313      	orrs	r3, r2
 800af44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	68fa      	ldr	r2, [r7, #12]
 800af4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	689a      	ldr	r2, [r3, #8]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	4a10      	ldr	r2, [pc, #64]	; (800afa0 <TIM_Base_SetConfig+0x114>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d00f      	beq.n	800af84 <TIM_Base_SetConfig+0xf8>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	4a12      	ldr	r2, [pc, #72]	; (800afb0 <TIM_Base_SetConfig+0x124>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	d00b      	beq.n	800af84 <TIM_Base_SetConfig+0xf8>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	4a11      	ldr	r2, [pc, #68]	; (800afb4 <TIM_Base_SetConfig+0x128>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d007      	beq.n	800af84 <TIM_Base_SetConfig+0xf8>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	4a10      	ldr	r2, [pc, #64]	; (800afb8 <TIM_Base_SetConfig+0x12c>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d003      	beq.n	800af84 <TIM_Base_SetConfig+0xf8>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	4a0f      	ldr	r2, [pc, #60]	; (800afbc <TIM_Base_SetConfig+0x130>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d103      	bne.n	800af8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	691a      	ldr	r2, [r3, #16]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2201      	movs	r2, #1
 800af90:	615a      	str	r2, [r3, #20]
}
 800af92:	bf00      	nop
 800af94:	3714      	adds	r7, #20
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr
 800af9e:	bf00      	nop
 800afa0:	40010000 	.word	0x40010000
 800afa4:	40000400 	.word	0x40000400
 800afa8:	40000800 	.word	0x40000800
 800afac:	40000c00 	.word	0x40000c00
 800afb0:	40010400 	.word	0x40010400
 800afb4:	40014000 	.word	0x40014000
 800afb8:	40014400 	.word	0x40014400
 800afbc:	40014800 	.word	0x40014800

0800afc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b087      	sub	sp, #28
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6a1b      	ldr	r3, [r3, #32]
 800afce:	f023 0201 	bic.w	r2, r3, #1
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a1b      	ldr	r3, [r3, #32]
 800afda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	699b      	ldr	r3, [r3, #24]
 800afe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800afe8:	68fa      	ldr	r2, [r7, #12]
 800afea:	4b37      	ldr	r3, [pc, #220]	; (800b0c8 <TIM_OC1_SetConfig+0x108>)
 800afec:	4013      	ands	r3, r2
 800afee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f023 0303 	bic.w	r3, r3, #3
 800aff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	68fa      	ldr	r2, [r7, #12]
 800affe:	4313      	orrs	r3, r2
 800b000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	f023 0302 	bic.w	r3, r3, #2
 800b008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	697a      	ldr	r2, [r7, #20]
 800b010:	4313      	orrs	r3, r2
 800b012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	4a2d      	ldr	r2, [pc, #180]	; (800b0cc <TIM_OC1_SetConfig+0x10c>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d00f      	beq.n	800b03c <TIM_OC1_SetConfig+0x7c>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	4a2c      	ldr	r2, [pc, #176]	; (800b0d0 <TIM_OC1_SetConfig+0x110>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d00b      	beq.n	800b03c <TIM_OC1_SetConfig+0x7c>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	4a2b      	ldr	r2, [pc, #172]	; (800b0d4 <TIM_OC1_SetConfig+0x114>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d007      	beq.n	800b03c <TIM_OC1_SetConfig+0x7c>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	4a2a      	ldr	r2, [pc, #168]	; (800b0d8 <TIM_OC1_SetConfig+0x118>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d003      	beq.n	800b03c <TIM_OC1_SetConfig+0x7c>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	4a29      	ldr	r2, [pc, #164]	; (800b0dc <TIM_OC1_SetConfig+0x11c>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d10c      	bne.n	800b056 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	f023 0308 	bic.w	r3, r3, #8
 800b042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	68db      	ldr	r3, [r3, #12]
 800b048:	697a      	ldr	r2, [r7, #20]
 800b04a:	4313      	orrs	r3, r2
 800b04c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	f023 0304 	bic.w	r3, r3, #4
 800b054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	4a1c      	ldr	r2, [pc, #112]	; (800b0cc <TIM_OC1_SetConfig+0x10c>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d00f      	beq.n	800b07e <TIM_OC1_SetConfig+0xbe>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	4a1b      	ldr	r2, [pc, #108]	; (800b0d0 <TIM_OC1_SetConfig+0x110>)
 800b062:	4293      	cmp	r3, r2
 800b064:	d00b      	beq.n	800b07e <TIM_OC1_SetConfig+0xbe>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	4a1a      	ldr	r2, [pc, #104]	; (800b0d4 <TIM_OC1_SetConfig+0x114>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d007      	beq.n	800b07e <TIM_OC1_SetConfig+0xbe>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	4a19      	ldr	r2, [pc, #100]	; (800b0d8 <TIM_OC1_SetConfig+0x118>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d003      	beq.n	800b07e <TIM_OC1_SetConfig+0xbe>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	4a18      	ldr	r2, [pc, #96]	; (800b0dc <TIM_OC1_SetConfig+0x11c>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d111      	bne.n	800b0a2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b084:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b08c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	695b      	ldr	r3, [r3, #20]
 800b092:	693a      	ldr	r2, [r7, #16]
 800b094:	4313      	orrs	r3, r2
 800b096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	699b      	ldr	r3, [r3, #24]
 800b09c:	693a      	ldr	r2, [r7, #16]
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	693a      	ldr	r2, [r7, #16]
 800b0a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	68fa      	ldr	r2, [r7, #12]
 800b0ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	685a      	ldr	r2, [r3, #4]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	697a      	ldr	r2, [r7, #20]
 800b0ba:	621a      	str	r2, [r3, #32]
}
 800b0bc:	bf00      	nop
 800b0be:	371c      	adds	r7, #28
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr
 800b0c8:	fffeff8f 	.word	0xfffeff8f
 800b0cc:	40010000 	.word	0x40010000
 800b0d0:	40010400 	.word	0x40010400
 800b0d4:	40014000 	.word	0x40014000
 800b0d8:	40014400 	.word	0x40014400
 800b0dc:	40014800 	.word	0x40014800

0800b0e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b087      	sub	sp, #28
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6a1b      	ldr	r3, [r3, #32]
 800b0ee:	f023 0210 	bic.w	r2, r3, #16
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6a1b      	ldr	r3, [r3, #32]
 800b0fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	699b      	ldr	r3, [r3, #24]
 800b106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b108:	68fa      	ldr	r2, [r7, #12]
 800b10a:	4b34      	ldr	r3, [pc, #208]	; (800b1dc <TIM_OC2_SetConfig+0xfc>)
 800b10c:	4013      	ands	r3, r2
 800b10e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	021b      	lsls	r3, r3, #8
 800b11e:	68fa      	ldr	r2, [r7, #12]
 800b120:	4313      	orrs	r3, r2
 800b122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	f023 0320 	bic.w	r3, r3, #32
 800b12a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	689b      	ldr	r3, [r3, #8]
 800b130:	011b      	lsls	r3, r3, #4
 800b132:	697a      	ldr	r2, [r7, #20]
 800b134:	4313      	orrs	r3, r2
 800b136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	4a29      	ldr	r2, [pc, #164]	; (800b1e0 <TIM_OC2_SetConfig+0x100>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d003      	beq.n	800b148 <TIM_OC2_SetConfig+0x68>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	4a28      	ldr	r2, [pc, #160]	; (800b1e4 <TIM_OC2_SetConfig+0x104>)
 800b144:	4293      	cmp	r3, r2
 800b146:	d10d      	bne.n	800b164 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b14e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	68db      	ldr	r3, [r3, #12]
 800b154:	011b      	lsls	r3, r3, #4
 800b156:	697a      	ldr	r2, [r7, #20]
 800b158:	4313      	orrs	r3, r2
 800b15a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b162:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	4a1e      	ldr	r2, [pc, #120]	; (800b1e0 <TIM_OC2_SetConfig+0x100>)
 800b168:	4293      	cmp	r3, r2
 800b16a:	d00f      	beq.n	800b18c <TIM_OC2_SetConfig+0xac>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	4a1d      	ldr	r2, [pc, #116]	; (800b1e4 <TIM_OC2_SetConfig+0x104>)
 800b170:	4293      	cmp	r3, r2
 800b172:	d00b      	beq.n	800b18c <TIM_OC2_SetConfig+0xac>
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	4a1c      	ldr	r2, [pc, #112]	; (800b1e8 <TIM_OC2_SetConfig+0x108>)
 800b178:	4293      	cmp	r3, r2
 800b17a:	d007      	beq.n	800b18c <TIM_OC2_SetConfig+0xac>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	4a1b      	ldr	r2, [pc, #108]	; (800b1ec <TIM_OC2_SetConfig+0x10c>)
 800b180:	4293      	cmp	r3, r2
 800b182:	d003      	beq.n	800b18c <TIM_OC2_SetConfig+0xac>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	4a1a      	ldr	r2, [pc, #104]	; (800b1f0 <TIM_OC2_SetConfig+0x110>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	d113      	bne.n	800b1b4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b192:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b19a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	695b      	ldr	r3, [r3, #20]
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	693a      	ldr	r2, [r7, #16]
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	699b      	ldr	r3, [r3, #24]
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	693a      	ldr	r2, [r7, #16]
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	693a      	ldr	r2, [r7, #16]
 800b1b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	68fa      	ldr	r2, [r7, #12]
 800b1be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	685a      	ldr	r2, [r3, #4]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	697a      	ldr	r2, [r7, #20]
 800b1cc:	621a      	str	r2, [r3, #32]
}
 800b1ce:	bf00      	nop
 800b1d0:	371c      	adds	r7, #28
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr
 800b1da:	bf00      	nop
 800b1dc:	feff8fff 	.word	0xfeff8fff
 800b1e0:	40010000 	.word	0x40010000
 800b1e4:	40010400 	.word	0x40010400
 800b1e8:	40014000 	.word	0x40014000
 800b1ec:	40014400 	.word	0x40014400
 800b1f0:	40014800 	.word	0x40014800

0800b1f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b087      	sub	sp, #28
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6a1b      	ldr	r3, [r3, #32]
 800b202:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6a1b      	ldr	r3, [r3, #32]
 800b20e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	69db      	ldr	r3, [r3, #28]
 800b21a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f023 0303 	bic.w	r3, r3, #3
 800b22a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	68fa      	ldr	r2, [r7, #12]
 800b232:	4313      	orrs	r3, r2
 800b234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b23c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	689b      	ldr	r3, [r3, #8]
 800b242:	021b      	lsls	r3, r3, #8
 800b244:	697a      	ldr	r2, [r7, #20]
 800b246:	4313      	orrs	r3, r2
 800b248:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	4a27      	ldr	r2, [pc, #156]	; (800b2ec <TIM_OC3_SetConfig+0xf8>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d003      	beq.n	800b25a <TIM_OC3_SetConfig+0x66>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	4a26      	ldr	r2, [pc, #152]	; (800b2f0 <TIM_OC3_SetConfig+0xfc>)
 800b256:	4293      	cmp	r3, r2
 800b258:	d10d      	bne.n	800b276 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b260:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	68db      	ldr	r3, [r3, #12]
 800b266:	021b      	lsls	r3, r3, #8
 800b268:	697a      	ldr	r2, [r7, #20]
 800b26a:	4313      	orrs	r3, r2
 800b26c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	4a1c      	ldr	r2, [pc, #112]	; (800b2ec <TIM_OC3_SetConfig+0xf8>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d00f      	beq.n	800b29e <TIM_OC3_SetConfig+0xaa>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	4a1b      	ldr	r2, [pc, #108]	; (800b2f0 <TIM_OC3_SetConfig+0xfc>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d00b      	beq.n	800b29e <TIM_OC3_SetConfig+0xaa>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4a1a      	ldr	r2, [pc, #104]	; (800b2f4 <TIM_OC3_SetConfig+0x100>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d007      	beq.n	800b29e <TIM_OC3_SetConfig+0xaa>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4a19      	ldr	r2, [pc, #100]	; (800b2f8 <TIM_OC3_SetConfig+0x104>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d003      	beq.n	800b29e <TIM_OC3_SetConfig+0xaa>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4a18      	ldr	r2, [pc, #96]	; (800b2fc <TIM_OC3_SetConfig+0x108>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d113      	bne.n	800b2c6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b2ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	695b      	ldr	r3, [r3, #20]
 800b2b2:	011b      	lsls	r3, r3, #4
 800b2b4:	693a      	ldr	r2, [r7, #16]
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	699b      	ldr	r3, [r3, #24]
 800b2be:	011b      	lsls	r3, r3, #4
 800b2c0:	693a      	ldr	r2, [r7, #16]
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	693a      	ldr	r2, [r7, #16]
 800b2ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	685a      	ldr	r2, [r3, #4]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	697a      	ldr	r2, [r7, #20]
 800b2de:	621a      	str	r2, [r3, #32]
}
 800b2e0:	bf00      	nop
 800b2e2:	371c      	adds	r7, #28
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr
 800b2ec:	40010000 	.word	0x40010000
 800b2f0:	40010400 	.word	0x40010400
 800b2f4:	40014000 	.word	0x40014000
 800b2f8:	40014400 	.word	0x40014400
 800b2fc:	40014800 	.word	0x40014800

0800b300 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b300:	b480      	push	{r7}
 800b302:	b087      	sub	sp, #28
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6a1b      	ldr	r3, [r3, #32]
 800b30e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6a1b      	ldr	r3, [r3, #32]
 800b31a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	69db      	ldr	r3, [r3, #28]
 800b326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b32e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	021b      	lsls	r3, r3, #8
 800b33e:	68fa      	ldr	r2, [r7, #12]
 800b340:	4313      	orrs	r3, r2
 800b342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b34a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	689b      	ldr	r3, [r3, #8]
 800b350:	031b      	lsls	r3, r3, #12
 800b352:	693a      	ldr	r2, [r7, #16]
 800b354:	4313      	orrs	r3, r2
 800b356:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	4a18      	ldr	r2, [pc, #96]	; (800b3bc <TIM_OC4_SetConfig+0xbc>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d00f      	beq.n	800b380 <TIM_OC4_SetConfig+0x80>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	4a17      	ldr	r2, [pc, #92]	; (800b3c0 <TIM_OC4_SetConfig+0xc0>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d00b      	beq.n	800b380 <TIM_OC4_SetConfig+0x80>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	4a16      	ldr	r2, [pc, #88]	; (800b3c4 <TIM_OC4_SetConfig+0xc4>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d007      	beq.n	800b380 <TIM_OC4_SetConfig+0x80>
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	4a15      	ldr	r2, [pc, #84]	; (800b3c8 <TIM_OC4_SetConfig+0xc8>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d003      	beq.n	800b380 <TIM_OC4_SetConfig+0x80>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	4a14      	ldr	r2, [pc, #80]	; (800b3cc <TIM_OC4_SetConfig+0xcc>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d109      	bne.n	800b394 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b386:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	695b      	ldr	r3, [r3, #20]
 800b38c:	019b      	lsls	r3, r3, #6
 800b38e:	697a      	ldr	r2, [r7, #20]
 800b390:	4313      	orrs	r3, r2
 800b392:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	697a      	ldr	r2, [r7, #20]
 800b398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	68fa      	ldr	r2, [r7, #12]
 800b39e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	685a      	ldr	r2, [r3, #4]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	693a      	ldr	r2, [r7, #16]
 800b3ac:	621a      	str	r2, [r3, #32]
}
 800b3ae:	bf00      	nop
 800b3b0:	371c      	adds	r7, #28
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr
 800b3ba:	bf00      	nop
 800b3bc:	40010000 	.word	0x40010000
 800b3c0:	40010400 	.word	0x40010400
 800b3c4:	40014000 	.word	0x40014000
 800b3c8:	40014400 	.word	0x40014400
 800b3cc:	40014800 	.word	0x40014800

0800b3d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b087      	sub	sp, #28
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6a1b      	ldr	r3, [r3, #32]
 800b3de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6a1b      	ldr	r3, [r3, #32]
 800b3ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	68fa      	ldr	r2, [r7, #12]
 800b406:	4313      	orrs	r3, r2
 800b408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b410:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	689b      	ldr	r3, [r3, #8]
 800b416:	041b      	lsls	r3, r3, #16
 800b418:	693a      	ldr	r2, [r7, #16]
 800b41a:	4313      	orrs	r3, r2
 800b41c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	4a17      	ldr	r2, [pc, #92]	; (800b480 <TIM_OC5_SetConfig+0xb0>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d00f      	beq.n	800b446 <TIM_OC5_SetConfig+0x76>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	4a16      	ldr	r2, [pc, #88]	; (800b484 <TIM_OC5_SetConfig+0xb4>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d00b      	beq.n	800b446 <TIM_OC5_SetConfig+0x76>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	4a15      	ldr	r2, [pc, #84]	; (800b488 <TIM_OC5_SetConfig+0xb8>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d007      	beq.n	800b446 <TIM_OC5_SetConfig+0x76>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	4a14      	ldr	r2, [pc, #80]	; (800b48c <TIM_OC5_SetConfig+0xbc>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d003      	beq.n	800b446 <TIM_OC5_SetConfig+0x76>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	4a13      	ldr	r2, [pc, #76]	; (800b490 <TIM_OC5_SetConfig+0xc0>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d109      	bne.n	800b45a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b44c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	695b      	ldr	r3, [r3, #20]
 800b452:	021b      	lsls	r3, r3, #8
 800b454:	697a      	ldr	r2, [r7, #20]
 800b456:	4313      	orrs	r3, r2
 800b458:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	697a      	ldr	r2, [r7, #20]
 800b45e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	685a      	ldr	r2, [r3, #4]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	693a      	ldr	r2, [r7, #16]
 800b472:	621a      	str	r2, [r3, #32]
}
 800b474:	bf00      	nop
 800b476:	371c      	adds	r7, #28
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr
 800b480:	40010000 	.word	0x40010000
 800b484:	40010400 	.word	0x40010400
 800b488:	40014000 	.word	0x40014000
 800b48c:	40014400 	.word	0x40014400
 800b490:	40014800 	.word	0x40014800

0800b494 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b494:	b480      	push	{r7}
 800b496:	b087      	sub	sp, #28
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a1b      	ldr	r3, [r3, #32]
 800b4a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6a1b      	ldr	r3, [r3, #32]
 800b4ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	021b      	lsls	r3, r3, #8
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b4d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	689b      	ldr	r3, [r3, #8]
 800b4dc:	051b      	lsls	r3, r3, #20
 800b4de:	693a      	ldr	r2, [r7, #16]
 800b4e0:	4313      	orrs	r3, r2
 800b4e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	4a18      	ldr	r2, [pc, #96]	; (800b548 <TIM_OC6_SetConfig+0xb4>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d00f      	beq.n	800b50c <TIM_OC6_SetConfig+0x78>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	4a17      	ldr	r2, [pc, #92]	; (800b54c <TIM_OC6_SetConfig+0xb8>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d00b      	beq.n	800b50c <TIM_OC6_SetConfig+0x78>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	4a16      	ldr	r2, [pc, #88]	; (800b550 <TIM_OC6_SetConfig+0xbc>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d007      	beq.n	800b50c <TIM_OC6_SetConfig+0x78>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	4a15      	ldr	r2, [pc, #84]	; (800b554 <TIM_OC6_SetConfig+0xc0>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d003      	beq.n	800b50c <TIM_OC6_SetConfig+0x78>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	4a14      	ldr	r2, [pc, #80]	; (800b558 <TIM_OC6_SetConfig+0xc4>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d109      	bne.n	800b520 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b512:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	695b      	ldr	r3, [r3, #20]
 800b518:	029b      	lsls	r3, r3, #10
 800b51a:	697a      	ldr	r2, [r7, #20]
 800b51c:	4313      	orrs	r3, r2
 800b51e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	697a      	ldr	r2, [r7, #20]
 800b524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	68fa      	ldr	r2, [r7, #12]
 800b52a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	685a      	ldr	r2, [r3, #4]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	693a      	ldr	r2, [r7, #16]
 800b538:	621a      	str	r2, [r3, #32]
}
 800b53a:	bf00      	nop
 800b53c:	371c      	adds	r7, #28
 800b53e:	46bd      	mov	sp, r7
 800b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b544:	4770      	bx	lr
 800b546:	bf00      	nop
 800b548:	40010000 	.word	0x40010000
 800b54c:	40010400 	.word	0x40010400
 800b550:	40014000 	.word	0x40014000
 800b554:	40014400 	.word	0x40014400
 800b558:	40014800 	.word	0x40014800

0800b55c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b085      	sub	sp, #20
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d101      	bne.n	800b574 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b570:	2302      	movs	r3, #2
 800b572:	e068      	b.n	800b646 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2201      	movs	r2, #1
 800b578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2202      	movs	r2, #2
 800b580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4a2e      	ldr	r2, [pc, #184]	; (800b654 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d004      	beq.n	800b5a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4a2d      	ldr	r2, [pc, #180]	; (800b658 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d108      	bne.n	800b5ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b5ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	68fa      	ldr	r2, [r7, #12]
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	68fa      	ldr	r2, [r7, #12]
 800b5c8:	4313      	orrs	r3, r2
 800b5ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	68fa      	ldr	r2, [r7, #12]
 800b5d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	4a1e      	ldr	r2, [pc, #120]	; (800b654 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d01d      	beq.n	800b61a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5e6:	d018      	beq.n	800b61a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4a1b      	ldr	r2, [pc, #108]	; (800b65c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d013      	beq.n	800b61a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4a1a      	ldr	r2, [pc, #104]	; (800b660 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d00e      	beq.n	800b61a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a18      	ldr	r2, [pc, #96]	; (800b664 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d009      	beq.n	800b61a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a13      	ldr	r2, [pc, #76]	; (800b658 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d004      	beq.n	800b61a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a14      	ldr	r2, [pc, #80]	; (800b668 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d10c      	bne.n	800b634 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b620:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	689b      	ldr	r3, [r3, #8]
 800b626:	68ba      	ldr	r2, [r7, #8]
 800b628:	4313      	orrs	r3, r2
 800b62a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	68ba      	ldr	r2, [r7, #8]
 800b632:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2201      	movs	r2, #1
 800b638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b644:	2300      	movs	r3, #0
}
 800b646:	4618      	mov	r0, r3
 800b648:	3714      	adds	r7, #20
 800b64a:	46bd      	mov	sp, r7
 800b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b650:	4770      	bx	lr
 800b652:	bf00      	nop
 800b654:	40010000 	.word	0x40010000
 800b658:	40010400 	.word	0x40010400
 800b65c:	40000400 	.word	0x40000400
 800b660:	40000800 	.word	0x40000800
 800b664:	40000c00 	.word	0x40000c00
 800b668:	40001800 	.word	0x40001800

0800b66c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b674:	bf00      	nop
 800b676:	370c      	adds	r7, #12
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr

0800b680 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b680:	b480      	push	{r7}
 800b682:	b083      	sub	sp, #12
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b688:	bf00      	nop
 800b68a:	370c      	adds	r7, #12
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b69c:	bf00      	nop
 800b69e:	370c      	adds	r7, #12
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr

0800b6a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d101      	bne.n	800b6ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	e042      	b.n	800b740 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d106      	bne.n	800b6d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f7f6 fa3d 	bl	8001b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2224      	movs	r2, #36	; 0x24
 800b6d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f022 0201 	bic.w	r2, r2, #1
 800b6e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 f8c2 	bl	800b874 <UART_SetConfig>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d101      	bne.n	800b6fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	e022      	b.n	800b740 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d002      	beq.n	800b708 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 fe16 	bl	800c334 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	685a      	ldr	r2, [r3, #4]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b716:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	689a      	ldr	r2, [r3, #8]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b726:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f042 0201 	orr.w	r2, r2, #1
 800b736:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 fe9d 	bl	800c478 <UART_CheckIdleState>
 800b73e:	4603      	mov	r3, r0
}
 800b740:	4618      	mov	r0, r3
 800b742:	3708      	adds	r7, #8
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b08a      	sub	sp, #40	; 0x28
 800b74c:	af02      	add	r7, sp, #8
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	60b9      	str	r1, [r7, #8]
 800b752:	603b      	str	r3, [r7, #0]
 800b754:	4613      	mov	r3, r2
 800b756:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b75e:	2b20      	cmp	r3, #32
 800b760:	f040 8083 	bne.w	800b86a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d002      	beq.n	800b770 <HAL_UART_Transmit+0x28>
 800b76a:	88fb      	ldrh	r3, [r7, #6]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d101      	bne.n	800b774 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b770:	2301      	movs	r3, #1
 800b772:	e07b      	b.n	800b86c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d101      	bne.n	800b782 <HAL_UART_Transmit+0x3a>
 800b77e:	2302      	movs	r3, #2
 800b780:	e074      	b.n	800b86c <HAL_UART_Transmit+0x124>
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2201      	movs	r2, #1
 800b786:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	2200      	movs	r2, #0
 800b78e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2221      	movs	r2, #33	; 0x21
 800b796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b79a:	f7f6 fbd1 	bl	8001f40 <HAL_GetTick>
 800b79e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	88fa      	ldrh	r2, [r7, #6]
 800b7a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	88fa      	ldrh	r2, [r7, #6]
 800b7ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	689b      	ldr	r3, [r3, #8]
 800b7b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7b8:	d108      	bne.n	800b7cc <HAL_UART_Transmit+0x84>
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	691b      	ldr	r3, [r3, #16]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d104      	bne.n	800b7cc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	61bb      	str	r3, [r7, #24]
 800b7ca:	e003      	b.n	800b7d4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800b7dc:	e02c      	b.n	800b838 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	9300      	str	r3, [sp, #0]
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	2180      	movs	r1, #128	; 0x80
 800b7e8:	68f8      	ldr	r0, [r7, #12]
 800b7ea:	f000 fe90 	bl	800c50e <UART_WaitOnFlagUntilTimeout>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d001      	beq.n	800b7f8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800b7f4:	2303      	movs	r3, #3
 800b7f6:	e039      	b.n	800b86c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800b7f8:	69fb      	ldr	r3, [r7, #28]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d10b      	bne.n	800b816 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b7fe:	69bb      	ldr	r3, [r7, #24]
 800b800:	881b      	ldrh	r3, [r3, #0]
 800b802:	461a      	mov	r2, r3
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b80c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b80e:	69bb      	ldr	r3, [r7, #24]
 800b810:	3302      	adds	r3, #2
 800b812:	61bb      	str	r3, [r7, #24]
 800b814:	e007      	b.n	800b826 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b816:	69fb      	ldr	r3, [r7, #28]
 800b818:	781a      	ldrb	r2, [r3, #0]
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b820:	69fb      	ldr	r3, [r7, #28]
 800b822:	3301      	adds	r3, #1
 800b824:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b82c:	b29b      	uxth	r3, r3
 800b82e:	3b01      	subs	r3, #1
 800b830:	b29a      	uxth	r2, r3
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b83e:	b29b      	uxth	r3, r3
 800b840:	2b00      	cmp	r3, #0
 800b842:	d1cc      	bne.n	800b7de <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	9300      	str	r3, [sp, #0]
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	2200      	movs	r2, #0
 800b84c:	2140      	movs	r1, #64	; 0x40
 800b84e:	68f8      	ldr	r0, [r7, #12]
 800b850:	f000 fe5d 	bl	800c50e <UART_WaitOnFlagUntilTimeout>
 800b854:	4603      	mov	r3, r0
 800b856:	2b00      	cmp	r3, #0
 800b858:	d001      	beq.n	800b85e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800b85a:	2303      	movs	r3, #3
 800b85c:	e006      	b.n	800b86c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2220      	movs	r2, #32
 800b862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800b866:	2300      	movs	r3, #0
 800b868:	e000      	b.n	800b86c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800b86a:	2302      	movs	r3, #2
  }
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3720      	adds	r7, #32
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b874:	b5b0      	push	{r4, r5, r7, lr}
 800b876:	b08e      	sub	sp, #56	; 0x38
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b87c:	2300      	movs	r3, #0
 800b87e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	689a      	ldr	r2, [r3, #8]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	691b      	ldr	r3, [r3, #16]
 800b88a:	431a      	orrs	r2, r3
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	695b      	ldr	r3, [r3, #20]
 800b890:	431a      	orrs	r2, r3
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	69db      	ldr	r3, [r3, #28]
 800b896:	4313      	orrs	r3, r2
 800b898:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	681a      	ldr	r2, [r3, #0]
 800b8a0:	4bbf      	ldr	r3, [pc, #764]	; (800bba0 <UART_SetConfig+0x32c>)
 800b8a2:	4013      	ands	r3, r2
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	6812      	ldr	r2, [r2, #0]
 800b8a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b8aa:	430b      	orrs	r3, r1
 800b8ac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	68da      	ldr	r2, [r3, #12]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	430a      	orrs	r2, r1
 800b8c2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	699b      	ldr	r3, [r3, #24]
 800b8c8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4ab5      	ldr	r2, [pc, #724]	; (800bba4 <UART_SetConfig+0x330>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d004      	beq.n	800b8de <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6a1b      	ldr	r3, [r3, #32]
 800b8d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	689a      	ldr	r2, [r3, #8]
 800b8e4:	4bb0      	ldr	r3, [pc, #704]	; (800bba8 <UART_SetConfig+0x334>)
 800b8e6:	4013      	ands	r3, r2
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	6812      	ldr	r2, [r2, #0]
 800b8ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b8ee:	430b      	orrs	r3, r1
 800b8f0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f8:	f023 010f 	bic.w	r1, r3, #15
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	430a      	orrs	r2, r1
 800b906:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4aa7      	ldr	r2, [pc, #668]	; (800bbac <UART_SetConfig+0x338>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d176      	bne.n	800ba00 <UART_SetConfig+0x18c>
 800b912:	4ba7      	ldr	r3, [pc, #668]	; (800bbb0 <UART_SetConfig+0x33c>)
 800b914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b916:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b91a:	2b28      	cmp	r3, #40	; 0x28
 800b91c:	d86c      	bhi.n	800b9f8 <UART_SetConfig+0x184>
 800b91e:	a201      	add	r2, pc, #4	; (adr r2, 800b924 <UART_SetConfig+0xb0>)
 800b920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b924:	0800b9c9 	.word	0x0800b9c9
 800b928:	0800b9f9 	.word	0x0800b9f9
 800b92c:	0800b9f9 	.word	0x0800b9f9
 800b930:	0800b9f9 	.word	0x0800b9f9
 800b934:	0800b9f9 	.word	0x0800b9f9
 800b938:	0800b9f9 	.word	0x0800b9f9
 800b93c:	0800b9f9 	.word	0x0800b9f9
 800b940:	0800b9f9 	.word	0x0800b9f9
 800b944:	0800b9d1 	.word	0x0800b9d1
 800b948:	0800b9f9 	.word	0x0800b9f9
 800b94c:	0800b9f9 	.word	0x0800b9f9
 800b950:	0800b9f9 	.word	0x0800b9f9
 800b954:	0800b9f9 	.word	0x0800b9f9
 800b958:	0800b9f9 	.word	0x0800b9f9
 800b95c:	0800b9f9 	.word	0x0800b9f9
 800b960:	0800b9f9 	.word	0x0800b9f9
 800b964:	0800b9d9 	.word	0x0800b9d9
 800b968:	0800b9f9 	.word	0x0800b9f9
 800b96c:	0800b9f9 	.word	0x0800b9f9
 800b970:	0800b9f9 	.word	0x0800b9f9
 800b974:	0800b9f9 	.word	0x0800b9f9
 800b978:	0800b9f9 	.word	0x0800b9f9
 800b97c:	0800b9f9 	.word	0x0800b9f9
 800b980:	0800b9f9 	.word	0x0800b9f9
 800b984:	0800b9e1 	.word	0x0800b9e1
 800b988:	0800b9f9 	.word	0x0800b9f9
 800b98c:	0800b9f9 	.word	0x0800b9f9
 800b990:	0800b9f9 	.word	0x0800b9f9
 800b994:	0800b9f9 	.word	0x0800b9f9
 800b998:	0800b9f9 	.word	0x0800b9f9
 800b99c:	0800b9f9 	.word	0x0800b9f9
 800b9a0:	0800b9f9 	.word	0x0800b9f9
 800b9a4:	0800b9e9 	.word	0x0800b9e9
 800b9a8:	0800b9f9 	.word	0x0800b9f9
 800b9ac:	0800b9f9 	.word	0x0800b9f9
 800b9b0:	0800b9f9 	.word	0x0800b9f9
 800b9b4:	0800b9f9 	.word	0x0800b9f9
 800b9b8:	0800b9f9 	.word	0x0800b9f9
 800b9bc:	0800b9f9 	.word	0x0800b9f9
 800b9c0:	0800b9f9 	.word	0x0800b9f9
 800b9c4:	0800b9f1 	.word	0x0800b9f1
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9ce:	e222      	b.n	800be16 <UART_SetConfig+0x5a2>
 800b9d0:	2304      	movs	r3, #4
 800b9d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9d6:	e21e      	b.n	800be16 <UART_SetConfig+0x5a2>
 800b9d8:	2308      	movs	r3, #8
 800b9da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9de:	e21a      	b.n	800be16 <UART_SetConfig+0x5a2>
 800b9e0:	2310      	movs	r3, #16
 800b9e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9e6:	e216      	b.n	800be16 <UART_SetConfig+0x5a2>
 800b9e8:	2320      	movs	r3, #32
 800b9ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9ee:	e212      	b.n	800be16 <UART_SetConfig+0x5a2>
 800b9f0:	2340      	movs	r3, #64	; 0x40
 800b9f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9f6:	e20e      	b.n	800be16 <UART_SetConfig+0x5a2>
 800b9f8:	2380      	movs	r3, #128	; 0x80
 800b9fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9fe:	e20a      	b.n	800be16 <UART_SetConfig+0x5a2>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	4a6b      	ldr	r2, [pc, #428]	; (800bbb4 <UART_SetConfig+0x340>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d130      	bne.n	800ba6c <UART_SetConfig+0x1f8>
 800ba0a:	4b69      	ldr	r3, [pc, #420]	; (800bbb0 <UART_SetConfig+0x33c>)
 800ba0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba0e:	f003 0307 	and.w	r3, r3, #7
 800ba12:	2b05      	cmp	r3, #5
 800ba14:	d826      	bhi.n	800ba64 <UART_SetConfig+0x1f0>
 800ba16:	a201      	add	r2, pc, #4	; (adr r2, 800ba1c <UART_SetConfig+0x1a8>)
 800ba18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba1c:	0800ba35 	.word	0x0800ba35
 800ba20:	0800ba3d 	.word	0x0800ba3d
 800ba24:	0800ba45 	.word	0x0800ba45
 800ba28:	0800ba4d 	.word	0x0800ba4d
 800ba2c:	0800ba55 	.word	0x0800ba55
 800ba30:	0800ba5d 	.word	0x0800ba5d
 800ba34:	2300      	movs	r3, #0
 800ba36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba3a:	e1ec      	b.n	800be16 <UART_SetConfig+0x5a2>
 800ba3c:	2304      	movs	r3, #4
 800ba3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba42:	e1e8      	b.n	800be16 <UART_SetConfig+0x5a2>
 800ba44:	2308      	movs	r3, #8
 800ba46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba4a:	e1e4      	b.n	800be16 <UART_SetConfig+0x5a2>
 800ba4c:	2310      	movs	r3, #16
 800ba4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba52:	e1e0      	b.n	800be16 <UART_SetConfig+0x5a2>
 800ba54:	2320      	movs	r3, #32
 800ba56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba5a:	e1dc      	b.n	800be16 <UART_SetConfig+0x5a2>
 800ba5c:	2340      	movs	r3, #64	; 0x40
 800ba5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba62:	e1d8      	b.n	800be16 <UART_SetConfig+0x5a2>
 800ba64:	2380      	movs	r3, #128	; 0x80
 800ba66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba6a:	e1d4      	b.n	800be16 <UART_SetConfig+0x5a2>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4a51      	ldr	r2, [pc, #324]	; (800bbb8 <UART_SetConfig+0x344>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d130      	bne.n	800bad8 <UART_SetConfig+0x264>
 800ba76:	4b4e      	ldr	r3, [pc, #312]	; (800bbb0 <UART_SetConfig+0x33c>)
 800ba78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba7a:	f003 0307 	and.w	r3, r3, #7
 800ba7e:	2b05      	cmp	r3, #5
 800ba80:	d826      	bhi.n	800bad0 <UART_SetConfig+0x25c>
 800ba82:	a201      	add	r2, pc, #4	; (adr r2, 800ba88 <UART_SetConfig+0x214>)
 800ba84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba88:	0800baa1 	.word	0x0800baa1
 800ba8c:	0800baa9 	.word	0x0800baa9
 800ba90:	0800bab1 	.word	0x0800bab1
 800ba94:	0800bab9 	.word	0x0800bab9
 800ba98:	0800bac1 	.word	0x0800bac1
 800ba9c:	0800bac9 	.word	0x0800bac9
 800baa0:	2300      	movs	r3, #0
 800baa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baa6:	e1b6      	b.n	800be16 <UART_SetConfig+0x5a2>
 800baa8:	2304      	movs	r3, #4
 800baaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baae:	e1b2      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bab0:	2308      	movs	r3, #8
 800bab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bab6:	e1ae      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bab8:	2310      	movs	r3, #16
 800baba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800babe:	e1aa      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bac0:	2320      	movs	r3, #32
 800bac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bac6:	e1a6      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bac8:	2340      	movs	r3, #64	; 0x40
 800baca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bace:	e1a2      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bad0:	2380      	movs	r3, #128	; 0x80
 800bad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bad6:	e19e      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4a37      	ldr	r2, [pc, #220]	; (800bbbc <UART_SetConfig+0x348>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d130      	bne.n	800bb44 <UART_SetConfig+0x2d0>
 800bae2:	4b33      	ldr	r3, [pc, #204]	; (800bbb0 <UART_SetConfig+0x33c>)
 800bae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bae6:	f003 0307 	and.w	r3, r3, #7
 800baea:	2b05      	cmp	r3, #5
 800baec:	d826      	bhi.n	800bb3c <UART_SetConfig+0x2c8>
 800baee:	a201      	add	r2, pc, #4	; (adr r2, 800baf4 <UART_SetConfig+0x280>)
 800baf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baf4:	0800bb0d 	.word	0x0800bb0d
 800baf8:	0800bb15 	.word	0x0800bb15
 800bafc:	0800bb1d 	.word	0x0800bb1d
 800bb00:	0800bb25 	.word	0x0800bb25
 800bb04:	0800bb2d 	.word	0x0800bb2d
 800bb08:	0800bb35 	.word	0x0800bb35
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb12:	e180      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bb14:	2304      	movs	r3, #4
 800bb16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb1a:	e17c      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bb1c:	2308      	movs	r3, #8
 800bb1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb22:	e178      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bb24:	2310      	movs	r3, #16
 800bb26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb2a:	e174      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bb2c:	2320      	movs	r3, #32
 800bb2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb32:	e170      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bb34:	2340      	movs	r3, #64	; 0x40
 800bb36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb3a:	e16c      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bb3c:	2380      	movs	r3, #128	; 0x80
 800bb3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb42:	e168      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	4a1d      	ldr	r2, [pc, #116]	; (800bbc0 <UART_SetConfig+0x34c>)
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d142      	bne.n	800bbd4 <UART_SetConfig+0x360>
 800bb4e:	4b18      	ldr	r3, [pc, #96]	; (800bbb0 <UART_SetConfig+0x33c>)
 800bb50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb52:	f003 0307 	and.w	r3, r3, #7
 800bb56:	2b05      	cmp	r3, #5
 800bb58:	d838      	bhi.n	800bbcc <UART_SetConfig+0x358>
 800bb5a:	a201      	add	r2, pc, #4	; (adr r2, 800bb60 <UART_SetConfig+0x2ec>)
 800bb5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb60:	0800bb79 	.word	0x0800bb79
 800bb64:	0800bb81 	.word	0x0800bb81
 800bb68:	0800bb89 	.word	0x0800bb89
 800bb6c:	0800bb91 	.word	0x0800bb91
 800bb70:	0800bb99 	.word	0x0800bb99
 800bb74:	0800bbc5 	.word	0x0800bbc5
 800bb78:	2300      	movs	r3, #0
 800bb7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb7e:	e14a      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bb80:	2304      	movs	r3, #4
 800bb82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb86:	e146      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bb88:	2308      	movs	r3, #8
 800bb8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb8e:	e142      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bb90:	2310      	movs	r3, #16
 800bb92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb96:	e13e      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bb98:	2320      	movs	r3, #32
 800bb9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb9e:	e13a      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bba0:	cfff69f3 	.word	0xcfff69f3
 800bba4:	58000c00 	.word	0x58000c00
 800bba8:	11fff4ff 	.word	0x11fff4ff
 800bbac:	40011000 	.word	0x40011000
 800bbb0:	58024400 	.word	0x58024400
 800bbb4:	40004400 	.word	0x40004400
 800bbb8:	40004800 	.word	0x40004800
 800bbbc:	40004c00 	.word	0x40004c00
 800bbc0:	40005000 	.word	0x40005000
 800bbc4:	2340      	movs	r3, #64	; 0x40
 800bbc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbca:	e124      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bbcc:	2380      	movs	r3, #128	; 0x80
 800bbce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbd2:	e120      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	4acc      	ldr	r2, [pc, #816]	; (800bf0c <UART_SetConfig+0x698>)
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	d176      	bne.n	800bccc <UART_SetConfig+0x458>
 800bbde:	4bcc      	ldr	r3, [pc, #816]	; (800bf10 <UART_SetConfig+0x69c>)
 800bbe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbe2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bbe6:	2b28      	cmp	r3, #40	; 0x28
 800bbe8:	d86c      	bhi.n	800bcc4 <UART_SetConfig+0x450>
 800bbea:	a201      	add	r2, pc, #4	; (adr r2, 800bbf0 <UART_SetConfig+0x37c>)
 800bbec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbf0:	0800bc95 	.word	0x0800bc95
 800bbf4:	0800bcc5 	.word	0x0800bcc5
 800bbf8:	0800bcc5 	.word	0x0800bcc5
 800bbfc:	0800bcc5 	.word	0x0800bcc5
 800bc00:	0800bcc5 	.word	0x0800bcc5
 800bc04:	0800bcc5 	.word	0x0800bcc5
 800bc08:	0800bcc5 	.word	0x0800bcc5
 800bc0c:	0800bcc5 	.word	0x0800bcc5
 800bc10:	0800bc9d 	.word	0x0800bc9d
 800bc14:	0800bcc5 	.word	0x0800bcc5
 800bc18:	0800bcc5 	.word	0x0800bcc5
 800bc1c:	0800bcc5 	.word	0x0800bcc5
 800bc20:	0800bcc5 	.word	0x0800bcc5
 800bc24:	0800bcc5 	.word	0x0800bcc5
 800bc28:	0800bcc5 	.word	0x0800bcc5
 800bc2c:	0800bcc5 	.word	0x0800bcc5
 800bc30:	0800bca5 	.word	0x0800bca5
 800bc34:	0800bcc5 	.word	0x0800bcc5
 800bc38:	0800bcc5 	.word	0x0800bcc5
 800bc3c:	0800bcc5 	.word	0x0800bcc5
 800bc40:	0800bcc5 	.word	0x0800bcc5
 800bc44:	0800bcc5 	.word	0x0800bcc5
 800bc48:	0800bcc5 	.word	0x0800bcc5
 800bc4c:	0800bcc5 	.word	0x0800bcc5
 800bc50:	0800bcad 	.word	0x0800bcad
 800bc54:	0800bcc5 	.word	0x0800bcc5
 800bc58:	0800bcc5 	.word	0x0800bcc5
 800bc5c:	0800bcc5 	.word	0x0800bcc5
 800bc60:	0800bcc5 	.word	0x0800bcc5
 800bc64:	0800bcc5 	.word	0x0800bcc5
 800bc68:	0800bcc5 	.word	0x0800bcc5
 800bc6c:	0800bcc5 	.word	0x0800bcc5
 800bc70:	0800bcb5 	.word	0x0800bcb5
 800bc74:	0800bcc5 	.word	0x0800bcc5
 800bc78:	0800bcc5 	.word	0x0800bcc5
 800bc7c:	0800bcc5 	.word	0x0800bcc5
 800bc80:	0800bcc5 	.word	0x0800bcc5
 800bc84:	0800bcc5 	.word	0x0800bcc5
 800bc88:	0800bcc5 	.word	0x0800bcc5
 800bc8c:	0800bcc5 	.word	0x0800bcc5
 800bc90:	0800bcbd 	.word	0x0800bcbd
 800bc94:	2301      	movs	r3, #1
 800bc96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc9a:	e0bc      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bc9c:	2304      	movs	r3, #4
 800bc9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bca2:	e0b8      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bca4:	2308      	movs	r3, #8
 800bca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcaa:	e0b4      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bcac:	2310      	movs	r3, #16
 800bcae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcb2:	e0b0      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bcb4:	2320      	movs	r3, #32
 800bcb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcba:	e0ac      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bcbc:	2340      	movs	r3, #64	; 0x40
 800bcbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcc2:	e0a8      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bcc4:	2380      	movs	r3, #128	; 0x80
 800bcc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcca:	e0a4      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4a90      	ldr	r2, [pc, #576]	; (800bf14 <UART_SetConfig+0x6a0>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d130      	bne.n	800bd38 <UART_SetConfig+0x4c4>
 800bcd6:	4b8e      	ldr	r3, [pc, #568]	; (800bf10 <UART_SetConfig+0x69c>)
 800bcd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcda:	f003 0307 	and.w	r3, r3, #7
 800bcde:	2b05      	cmp	r3, #5
 800bce0:	d826      	bhi.n	800bd30 <UART_SetConfig+0x4bc>
 800bce2:	a201      	add	r2, pc, #4	; (adr r2, 800bce8 <UART_SetConfig+0x474>)
 800bce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bce8:	0800bd01 	.word	0x0800bd01
 800bcec:	0800bd09 	.word	0x0800bd09
 800bcf0:	0800bd11 	.word	0x0800bd11
 800bcf4:	0800bd19 	.word	0x0800bd19
 800bcf8:	0800bd21 	.word	0x0800bd21
 800bcfc:	0800bd29 	.word	0x0800bd29
 800bd00:	2300      	movs	r3, #0
 800bd02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd06:	e086      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bd08:	2304      	movs	r3, #4
 800bd0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd0e:	e082      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bd10:	2308      	movs	r3, #8
 800bd12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd16:	e07e      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bd18:	2310      	movs	r3, #16
 800bd1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd1e:	e07a      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bd20:	2320      	movs	r3, #32
 800bd22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd26:	e076      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bd28:	2340      	movs	r3, #64	; 0x40
 800bd2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd2e:	e072      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bd30:	2380      	movs	r3, #128	; 0x80
 800bd32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd36:	e06e      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	4a76      	ldr	r2, [pc, #472]	; (800bf18 <UART_SetConfig+0x6a4>)
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d130      	bne.n	800bda4 <UART_SetConfig+0x530>
 800bd42:	4b73      	ldr	r3, [pc, #460]	; (800bf10 <UART_SetConfig+0x69c>)
 800bd44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd46:	f003 0307 	and.w	r3, r3, #7
 800bd4a:	2b05      	cmp	r3, #5
 800bd4c:	d826      	bhi.n	800bd9c <UART_SetConfig+0x528>
 800bd4e:	a201      	add	r2, pc, #4	; (adr r2, 800bd54 <UART_SetConfig+0x4e0>)
 800bd50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd54:	0800bd6d 	.word	0x0800bd6d
 800bd58:	0800bd75 	.word	0x0800bd75
 800bd5c:	0800bd7d 	.word	0x0800bd7d
 800bd60:	0800bd85 	.word	0x0800bd85
 800bd64:	0800bd8d 	.word	0x0800bd8d
 800bd68:	0800bd95 	.word	0x0800bd95
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd72:	e050      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bd74:	2304      	movs	r3, #4
 800bd76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd7a:	e04c      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bd7c:	2308      	movs	r3, #8
 800bd7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd82:	e048      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bd84:	2310      	movs	r3, #16
 800bd86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd8a:	e044      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bd8c:	2320      	movs	r3, #32
 800bd8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd92:	e040      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bd94:	2340      	movs	r3, #64	; 0x40
 800bd96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd9a:	e03c      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bd9c:	2380      	movs	r3, #128	; 0x80
 800bd9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bda2:	e038      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	4a5c      	ldr	r2, [pc, #368]	; (800bf1c <UART_SetConfig+0x6a8>)
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d130      	bne.n	800be10 <UART_SetConfig+0x59c>
 800bdae:	4b58      	ldr	r3, [pc, #352]	; (800bf10 <UART_SetConfig+0x69c>)
 800bdb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdb2:	f003 0307 	and.w	r3, r3, #7
 800bdb6:	2b05      	cmp	r3, #5
 800bdb8:	d826      	bhi.n	800be08 <UART_SetConfig+0x594>
 800bdba:	a201      	add	r2, pc, #4	; (adr r2, 800bdc0 <UART_SetConfig+0x54c>)
 800bdbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdc0:	0800bdd9 	.word	0x0800bdd9
 800bdc4:	0800bde1 	.word	0x0800bde1
 800bdc8:	0800bde9 	.word	0x0800bde9
 800bdcc:	0800bdf1 	.word	0x0800bdf1
 800bdd0:	0800bdf9 	.word	0x0800bdf9
 800bdd4:	0800be01 	.word	0x0800be01
 800bdd8:	2302      	movs	r3, #2
 800bdda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdde:	e01a      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bde0:	2304      	movs	r3, #4
 800bde2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bde6:	e016      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bde8:	2308      	movs	r3, #8
 800bdea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdee:	e012      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bdf0:	2310      	movs	r3, #16
 800bdf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdf6:	e00e      	b.n	800be16 <UART_SetConfig+0x5a2>
 800bdf8:	2320      	movs	r3, #32
 800bdfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdfe:	e00a      	b.n	800be16 <UART_SetConfig+0x5a2>
 800be00:	2340      	movs	r3, #64	; 0x40
 800be02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be06:	e006      	b.n	800be16 <UART_SetConfig+0x5a2>
 800be08:	2380      	movs	r3, #128	; 0x80
 800be0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be0e:	e002      	b.n	800be16 <UART_SetConfig+0x5a2>
 800be10:	2380      	movs	r3, #128	; 0x80
 800be12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a40      	ldr	r2, [pc, #256]	; (800bf1c <UART_SetConfig+0x6a8>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	f040 80ef 	bne.w	800c000 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800be22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800be26:	2b20      	cmp	r3, #32
 800be28:	dc46      	bgt.n	800beb8 <UART_SetConfig+0x644>
 800be2a:	2b02      	cmp	r3, #2
 800be2c:	f2c0 8081 	blt.w	800bf32 <UART_SetConfig+0x6be>
 800be30:	3b02      	subs	r3, #2
 800be32:	2b1e      	cmp	r3, #30
 800be34:	d87d      	bhi.n	800bf32 <UART_SetConfig+0x6be>
 800be36:	a201      	add	r2, pc, #4	; (adr r2, 800be3c <UART_SetConfig+0x5c8>)
 800be38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be3c:	0800bebf 	.word	0x0800bebf
 800be40:	0800bf33 	.word	0x0800bf33
 800be44:	0800bec7 	.word	0x0800bec7
 800be48:	0800bf33 	.word	0x0800bf33
 800be4c:	0800bf33 	.word	0x0800bf33
 800be50:	0800bf33 	.word	0x0800bf33
 800be54:	0800bed7 	.word	0x0800bed7
 800be58:	0800bf33 	.word	0x0800bf33
 800be5c:	0800bf33 	.word	0x0800bf33
 800be60:	0800bf33 	.word	0x0800bf33
 800be64:	0800bf33 	.word	0x0800bf33
 800be68:	0800bf33 	.word	0x0800bf33
 800be6c:	0800bf33 	.word	0x0800bf33
 800be70:	0800bf33 	.word	0x0800bf33
 800be74:	0800bee7 	.word	0x0800bee7
 800be78:	0800bf33 	.word	0x0800bf33
 800be7c:	0800bf33 	.word	0x0800bf33
 800be80:	0800bf33 	.word	0x0800bf33
 800be84:	0800bf33 	.word	0x0800bf33
 800be88:	0800bf33 	.word	0x0800bf33
 800be8c:	0800bf33 	.word	0x0800bf33
 800be90:	0800bf33 	.word	0x0800bf33
 800be94:	0800bf33 	.word	0x0800bf33
 800be98:	0800bf33 	.word	0x0800bf33
 800be9c:	0800bf33 	.word	0x0800bf33
 800bea0:	0800bf33 	.word	0x0800bf33
 800bea4:	0800bf33 	.word	0x0800bf33
 800bea8:	0800bf33 	.word	0x0800bf33
 800beac:	0800bf33 	.word	0x0800bf33
 800beb0:	0800bf33 	.word	0x0800bf33
 800beb4:	0800bf25 	.word	0x0800bf25
 800beb8:	2b40      	cmp	r3, #64	; 0x40
 800beba:	d036      	beq.n	800bf2a <UART_SetConfig+0x6b6>
 800bebc:	e039      	b.n	800bf32 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bebe:	f7fd ff11 	bl	8009ce4 <HAL_RCCEx_GetD3PCLK1Freq>
 800bec2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bec4:	e03b      	b.n	800bf3e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bec6:	f107 0314 	add.w	r3, r7, #20
 800beca:	4618      	mov	r0, r3
 800becc:	f7fd ff20 	bl	8009d10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bed0:	69bb      	ldr	r3, [r7, #24]
 800bed2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bed4:	e033      	b.n	800bf3e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bed6:	f107 0308 	add.w	r3, r7, #8
 800beda:	4618      	mov	r0, r3
 800bedc:	f7fe f86c 	bl	8009fb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bee4:	e02b      	b.n	800bf3e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bee6:	4b0a      	ldr	r3, [pc, #40]	; (800bf10 <UART_SetConfig+0x69c>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f003 0320 	and.w	r3, r3, #32
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d009      	beq.n	800bf06 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bef2:	4b07      	ldr	r3, [pc, #28]	; (800bf10 <UART_SetConfig+0x69c>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	08db      	lsrs	r3, r3, #3
 800bef8:	f003 0303 	and.w	r3, r3, #3
 800befc:	4a08      	ldr	r2, [pc, #32]	; (800bf20 <UART_SetConfig+0x6ac>)
 800befe:	fa22 f303 	lsr.w	r3, r2, r3
 800bf02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bf04:	e01b      	b.n	800bf3e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800bf06:	4b06      	ldr	r3, [pc, #24]	; (800bf20 <UART_SetConfig+0x6ac>)
 800bf08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bf0a:	e018      	b.n	800bf3e <UART_SetConfig+0x6ca>
 800bf0c:	40011400 	.word	0x40011400
 800bf10:	58024400 	.word	0x58024400
 800bf14:	40007800 	.word	0x40007800
 800bf18:	40007c00 	.word	0x40007c00
 800bf1c:	58000c00 	.word	0x58000c00
 800bf20:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bf24:	4bc4      	ldr	r3, [pc, #784]	; (800c238 <UART_SetConfig+0x9c4>)
 800bf26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bf28:	e009      	b.n	800bf3e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bf30:	e005      	b.n	800bf3e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800bf32:	2300      	movs	r3, #0
 800bf34:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800bf36:	2301      	movs	r3, #1
 800bf38:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800bf3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bf3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	f000 81da 	beq.w	800c2fa <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf4a:	4abc      	ldr	r2, [pc, #752]	; (800c23c <UART_SetConfig+0x9c8>)
 800bf4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf50:	461a      	mov	r2, r3
 800bf52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf54:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf58:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	685a      	ldr	r2, [r3, #4]
 800bf5e:	4613      	mov	r3, r2
 800bf60:	005b      	lsls	r3, r3, #1
 800bf62:	4413      	add	r3, r2
 800bf64:	6a3a      	ldr	r2, [r7, #32]
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d305      	bcc.n	800bf76 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf70:	6a3a      	ldr	r2, [r7, #32]
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d903      	bls.n	800bf7e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800bf76:	2301      	movs	r3, #1
 800bf78:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800bf7c:	e1bd      	b.n	800c2fa <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf80:	4618      	mov	r0, r3
 800bf82:	f04f 0100 	mov.w	r1, #0
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf8a:	4aac      	ldr	r2, [pc, #688]	; (800c23c <UART_SetConfig+0x9c8>)
 800bf8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf90:	b29a      	uxth	r2, r3
 800bf92:	f04f 0300 	mov.w	r3, #0
 800bf96:	f7f4 f9a3 	bl	80002e0 <__aeabi_uldivmod>
 800bf9a:	4602      	mov	r2, r0
 800bf9c:	460b      	mov	r3, r1
 800bf9e:	4610      	mov	r0, r2
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	f04f 0200 	mov.w	r2, #0
 800bfa6:	f04f 0300 	mov.w	r3, #0
 800bfaa:	020b      	lsls	r3, r1, #8
 800bfac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bfb0:	0202      	lsls	r2, r0, #8
 800bfb2:	6879      	ldr	r1, [r7, #4]
 800bfb4:	6849      	ldr	r1, [r1, #4]
 800bfb6:	0849      	lsrs	r1, r1, #1
 800bfb8:	4608      	mov	r0, r1
 800bfba:	f04f 0100 	mov.w	r1, #0
 800bfbe:	1814      	adds	r4, r2, r0
 800bfc0:	eb43 0501 	adc.w	r5, r3, r1
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	461a      	mov	r2, r3
 800bfca:	f04f 0300 	mov.w	r3, #0
 800bfce:	4620      	mov	r0, r4
 800bfd0:	4629      	mov	r1, r5
 800bfd2:	f7f4 f985 	bl	80002e0 <__aeabi_uldivmod>
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	460b      	mov	r3, r1
 800bfda:	4613      	mov	r3, r2
 800bfdc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bfde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfe4:	d308      	bcc.n	800bff8 <UART_SetConfig+0x784>
 800bfe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfec:	d204      	bcs.n	800bff8 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bff4:	60da      	str	r2, [r3, #12]
 800bff6:	e180      	b.n	800c2fa <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800bff8:	2301      	movs	r3, #1
 800bffa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800bffe:	e17c      	b.n	800c2fa <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	69db      	ldr	r3, [r3, #28]
 800c004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c008:	f040 80bf 	bne.w	800c18a <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800c00c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c010:	2b20      	cmp	r3, #32
 800c012:	dc49      	bgt.n	800c0a8 <UART_SetConfig+0x834>
 800c014:	2b00      	cmp	r3, #0
 800c016:	db7c      	blt.n	800c112 <UART_SetConfig+0x89e>
 800c018:	2b20      	cmp	r3, #32
 800c01a:	d87a      	bhi.n	800c112 <UART_SetConfig+0x89e>
 800c01c:	a201      	add	r2, pc, #4	; (adr r2, 800c024 <UART_SetConfig+0x7b0>)
 800c01e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c022:	bf00      	nop
 800c024:	0800c0af 	.word	0x0800c0af
 800c028:	0800c0b7 	.word	0x0800c0b7
 800c02c:	0800c113 	.word	0x0800c113
 800c030:	0800c113 	.word	0x0800c113
 800c034:	0800c0bf 	.word	0x0800c0bf
 800c038:	0800c113 	.word	0x0800c113
 800c03c:	0800c113 	.word	0x0800c113
 800c040:	0800c113 	.word	0x0800c113
 800c044:	0800c0cf 	.word	0x0800c0cf
 800c048:	0800c113 	.word	0x0800c113
 800c04c:	0800c113 	.word	0x0800c113
 800c050:	0800c113 	.word	0x0800c113
 800c054:	0800c113 	.word	0x0800c113
 800c058:	0800c113 	.word	0x0800c113
 800c05c:	0800c113 	.word	0x0800c113
 800c060:	0800c113 	.word	0x0800c113
 800c064:	0800c0df 	.word	0x0800c0df
 800c068:	0800c113 	.word	0x0800c113
 800c06c:	0800c113 	.word	0x0800c113
 800c070:	0800c113 	.word	0x0800c113
 800c074:	0800c113 	.word	0x0800c113
 800c078:	0800c113 	.word	0x0800c113
 800c07c:	0800c113 	.word	0x0800c113
 800c080:	0800c113 	.word	0x0800c113
 800c084:	0800c113 	.word	0x0800c113
 800c088:	0800c113 	.word	0x0800c113
 800c08c:	0800c113 	.word	0x0800c113
 800c090:	0800c113 	.word	0x0800c113
 800c094:	0800c113 	.word	0x0800c113
 800c098:	0800c113 	.word	0x0800c113
 800c09c:	0800c113 	.word	0x0800c113
 800c0a0:	0800c113 	.word	0x0800c113
 800c0a4:	0800c105 	.word	0x0800c105
 800c0a8:	2b40      	cmp	r3, #64	; 0x40
 800c0aa:	d02e      	beq.n	800c10a <UART_SetConfig+0x896>
 800c0ac:	e031      	b.n	800c112 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c0ae:	f7fc f9db 	bl	8008468 <HAL_RCC_GetPCLK1Freq>
 800c0b2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c0b4:	e033      	b.n	800c11e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c0b6:	f7fc f9ed 	bl	8008494 <HAL_RCC_GetPCLK2Freq>
 800c0ba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c0bc:	e02f      	b.n	800c11e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0be:	f107 0314 	add.w	r3, r7, #20
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f7fd fe24 	bl	8009d10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c0c8:	69bb      	ldr	r3, [r7, #24]
 800c0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c0cc:	e027      	b.n	800c11e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0ce:	f107 0308 	add.w	r3, r7, #8
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7fd ff70 	bl	8009fb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c0dc:	e01f      	b.n	800c11e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0de:	4b58      	ldr	r3, [pc, #352]	; (800c240 <UART_SetConfig+0x9cc>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f003 0320 	and.w	r3, r3, #32
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d009      	beq.n	800c0fe <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c0ea:	4b55      	ldr	r3, [pc, #340]	; (800c240 <UART_SetConfig+0x9cc>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	08db      	lsrs	r3, r3, #3
 800c0f0:	f003 0303 	and.w	r3, r3, #3
 800c0f4:	4a53      	ldr	r2, [pc, #332]	; (800c244 <UART_SetConfig+0x9d0>)
 800c0f6:	fa22 f303 	lsr.w	r3, r2, r3
 800c0fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c0fc:	e00f      	b.n	800c11e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800c0fe:	4b51      	ldr	r3, [pc, #324]	; (800c244 <UART_SetConfig+0x9d0>)
 800c100:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c102:	e00c      	b.n	800c11e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c104:	4b4c      	ldr	r3, [pc, #304]	; (800c238 <UART_SetConfig+0x9c4>)
 800c106:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c108:	e009      	b.n	800c11e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c10a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c10e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c110:	e005      	b.n	800c11e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800c112:	2300      	movs	r3, #0
 800c114:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c116:	2301      	movs	r3, #1
 800c118:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c11c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c120:	2b00      	cmp	r3, #0
 800c122:	f000 80ea 	beq.w	800c2fa <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c12a:	4a44      	ldr	r2, [pc, #272]	; (800c23c <UART_SetConfig+0x9c8>)
 800c12c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c130:	461a      	mov	r2, r3
 800c132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c134:	fbb3 f3f2 	udiv	r3, r3, r2
 800c138:	005a      	lsls	r2, r3, #1
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	085b      	lsrs	r3, r3, #1
 800c140:	441a      	add	r2, r3
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	685b      	ldr	r3, [r3, #4]
 800c146:	fbb2 f3f3 	udiv	r3, r2, r3
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c150:	2b0f      	cmp	r3, #15
 800c152:	d916      	bls.n	800c182 <UART_SetConfig+0x90e>
 800c154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c15a:	d212      	bcs.n	800c182 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c15e:	b29b      	uxth	r3, r3
 800c160:	f023 030f 	bic.w	r3, r3, #15
 800c164:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c168:	085b      	lsrs	r3, r3, #1
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	f003 0307 	and.w	r3, r3, #7
 800c170:	b29a      	uxth	r2, r3
 800c172:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c174:	4313      	orrs	r3, r2
 800c176:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c17e:	60da      	str	r2, [r3, #12]
 800c180:	e0bb      	b.n	800c2fa <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c182:	2301      	movs	r3, #1
 800c184:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c188:	e0b7      	b.n	800c2fa <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c18a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c18e:	2b20      	cmp	r3, #32
 800c190:	dc4a      	bgt.n	800c228 <UART_SetConfig+0x9b4>
 800c192:	2b00      	cmp	r3, #0
 800c194:	f2c0 8086 	blt.w	800c2a4 <UART_SetConfig+0xa30>
 800c198:	2b20      	cmp	r3, #32
 800c19a:	f200 8083 	bhi.w	800c2a4 <UART_SetConfig+0xa30>
 800c19e:	a201      	add	r2, pc, #4	; (adr r2, 800c1a4 <UART_SetConfig+0x930>)
 800c1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a4:	0800c22f 	.word	0x0800c22f
 800c1a8:	0800c249 	.word	0x0800c249
 800c1ac:	0800c2a5 	.word	0x0800c2a5
 800c1b0:	0800c2a5 	.word	0x0800c2a5
 800c1b4:	0800c251 	.word	0x0800c251
 800c1b8:	0800c2a5 	.word	0x0800c2a5
 800c1bc:	0800c2a5 	.word	0x0800c2a5
 800c1c0:	0800c2a5 	.word	0x0800c2a5
 800c1c4:	0800c261 	.word	0x0800c261
 800c1c8:	0800c2a5 	.word	0x0800c2a5
 800c1cc:	0800c2a5 	.word	0x0800c2a5
 800c1d0:	0800c2a5 	.word	0x0800c2a5
 800c1d4:	0800c2a5 	.word	0x0800c2a5
 800c1d8:	0800c2a5 	.word	0x0800c2a5
 800c1dc:	0800c2a5 	.word	0x0800c2a5
 800c1e0:	0800c2a5 	.word	0x0800c2a5
 800c1e4:	0800c271 	.word	0x0800c271
 800c1e8:	0800c2a5 	.word	0x0800c2a5
 800c1ec:	0800c2a5 	.word	0x0800c2a5
 800c1f0:	0800c2a5 	.word	0x0800c2a5
 800c1f4:	0800c2a5 	.word	0x0800c2a5
 800c1f8:	0800c2a5 	.word	0x0800c2a5
 800c1fc:	0800c2a5 	.word	0x0800c2a5
 800c200:	0800c2a5 	.word	0x0800c2a5
 800c204:	0800c2a5 	.word	0x0800c2a5
 800c208:	0800c2a5 	.word	0x0800c2a5
 800c20c:	0800c2a5 	.word	0x0800c2a5
 800c210:	0800c2a5 	.word	0x0800c2a5
 800c214:	0800c2a5 	.word	0x0800c2a5
 800c218:	0800c2a5 	.word	0x0800c2a5
 800c21c:	0800c2a5 	.word	0x0800c2a5
 800c220:	0800c2a5 	.word	0x0800c2a5
 800c224:	0800c297 	.word	0x0800c297
 800c228:	2b40      	cmp	r3, #64	; 0x40
 800c22a:	d037      	beq.n	800c29c <UART_SetConfig+0xa28>
 800c22c:	e03a      	b.n	800c2a4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c22e:	f7fc f91b 	bl	8008468 <HAL_RCC_GetPCLK1Freq>
 800c232:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c234:	e03c      	b.n	800c2b0 <UART_SetConfig+0xa3c>
 800c236:	bf00      	nop
 800c238:	003d0900 	.word	0x003d0900
 800c23c:	0800ff80 	.word	0x0800ff80
 800c240:	58024400 	.word	0x58024400
 800c244:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c248:	f7fc f924 	bl	8008494 <HAL_RCC_GetPCLK2Freq>
 800c24c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c24e:	e02f      	b.n	800c2b0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c250:	f107 0314 	add.w	r3, r7, #20
 800c254:	4618      	mov	r0, r3
 800c256:	f7fd fd5b 	bl	8009d10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c25a:	69bb      	ldr	r3, [r7, #24]
 800c25c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c25e:	e027      	b.n	800c2b0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c260:	f107 0308 	add.w	r3, r7, #8
 800c264:	4618      	mov	r0, r3
 800c266:	f7fd fea7 	bl	8009fb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c26e:	e01f      	b.n	800c2b0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c270:	4b2c      	ldr	r3, [pc, #176]	; (800c324 <UART_SetConfig+0xab0>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f003 0320 	and.w	r3, r3, #32
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d009      	beq.n	800c290 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c27c:	4b29      	ldr	r3, [pc, #164]	; (800c324 <UART_SetConfig+0xab0>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	08db      	lsrs	r3, r3, #3
 800c282:	f003 0303 	and.w	r3, r3, #3
 800c286:	4a28      	ldr	r2, [pc, #160]	; (800c328 <UART_SetConfig+0xab4>)
 800c288:	fa22 f303 	lsr.w	r3, r2, r3
 800c28c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c28e:	e00f      	b.n	800c2b0 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800c290:	4b25      	ldr	r3, [pc, #148]	; (800c328 <UART_SetConfig+0xab4>)
 800c292:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c294:	e00c      	b.n	800c2b0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c296:	4b25      	ldr	r3, [pc, #148]	; (800c32c <UART_SetConfig+0xab8>)
 800c298:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c29a:	e009      	b.n	800c2b0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c29c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c2a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c2a2:	e005      	b.n	800c2b0 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c2ae:	bf00      	nop
    }

    if (pclk != 0U)
 800c2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d021      	beq.n	800c2fa <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ba:	4a1d      	ldr	r2, [pc, #116]	; (800c330 <UART_SetConfig+0xabc>)
 800c2bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c4:	fbb3 f2f2 	udiv	r2, r3, r2
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	085b      	lsrs	r3, r3, #1
 800c2ce:	441a      	add	r2, r3
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2de:	2b0f      	cmp	r3, #15
 800c2e0:	d908      	bls.n	800c2f4 <UART_SetConfig+0xa80>
 800c2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2e8:	d204      	bcs.n	800c2f4 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2f0:	60da      	str	r2, [r3, #12]
 800c2f2:	e002      	b.n	800c2fa <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2201      	movs	r2, #1
 800c2fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2201      	movs	r2, #1
 800c306:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2200      	movs	r2, #0
 800c30e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2200      	movs	r2, #0
 800c314:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c316:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3738      	adds	r7, #56	; 0x38
 800c31e:	46bd      	mov	sp, r7
 800c320:	bdb0      	pop	{r4, r5, r7, pc}
 800c322:	bf00      	nop
 800c324:	58024400 	.word	0x58024400
 800c328:	03d09000 	.word	0x03d09000
 800c32c:	003d0900 	.word	0x003d0900
 800c330:	0800ff80 	.word	0x0800ff80

0800c334 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c334:	b480      	push	{r7}
 800c336:	b083      	sub	sp, #12
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c340:	f003 0301 	and.w	r3, r3, #1
 800c344:	2b00      	cmp	r3, #0
 800c346:	d00a      	beq.n	800c35e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	430a      	orrs	r2, r1
 800c35c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c362:	f003 0302 	and.w	r3, r3, #2
 800c366:	2b00      	cmp	r3, #0
 800c368:	d00a      	beq.n	800c380 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	430a      	orrs	r2, r1
 800c37e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c384:	f003 0304 	and.w	r3, r3, #4
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d00a      	beq.n	800c3a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	430a      	orrs	r2, r1
 800c3a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3a6:	f003 0308 	and.w	r3, r3, #8
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d00a      	beq.n	800c3c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	430a      	orrs	r2, r1
 800c3c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3c8:	f003 0310 	and.w	r3, r3, #16
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d00a      	beq.n	800c3e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	689b      	ldr	r3, [r3, #8]
 800c3d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	430a      	orrs	r2, r1
 800c3e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3ea:	f003 0320 	and.w	r3, r3, #32
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d00a      	beq.n	800c408 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	689b      	ldr	r3, [r3, #8]
 800c3f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	430a      	orrs	r2, r1
 800c406:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c40c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c410:	2b00      	cmp	r3, #0
 800c412:	d01a      	beq.n	800c44a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	430a      	orrs	r2, r1
 800c428:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c42e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c432:	d10a      	bne.n	800c44a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	685b      	ldr	r3, [r3, #4]
 800c43a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	430a      	orrs	r2, r1
 800c448:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c44e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c452:	2b00      	cmp	r3, #0
 800c454:	d00a      	beq.n	800c46c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	430a      	orrs	r2, r1
 800c46a:	605a      	str	r2, [r3, #4]
  }
}
 800c46c:	bf00      	nop
 800c46e:	370c      	adds	r7, #12
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr

0800c478 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b086      	sub	sp, #24
 800c47c:	af02      	add	r7, sp, #8
 800c47e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2200      	movs	r2, #0
 800c484:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c488:	f7f5 fd5a 	bl	8001f40 <HAL_GetTick>
 800c48c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f003 0308 	and.w	r3, r3, #8
 800c498:	2b08      	cmp	r3, #8
 800c49a:	d10e      	bne.n	800c4ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c49c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c4a0:	9300      	str	r3, [sp, #0]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 f82f 	bl	800c50e <UART_WaitOnFlagUntilTimeout>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d001      	beq.n	800c4ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c4b6:	2303      	movs	r3, #3
 800c4b8:	e025      	b.n	800c506 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f003 0304 	and.w	r3, r3, #4
 800c4c4:	2b04      	cmp	r3, #4
 800c4c6:	d10e      	bne.n	800c4e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c4c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c4cc:	9300      	str	r3, [sp, #0]
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 f819 	bl	800c50e <UART_WaitOnFlagUntilTimeout>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d001      	beq.n	800c4e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c4e2:	2303      	movs	r3, #3
 800c4e4:	e00f      	b.n	800c506 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2220      	movs	r2, #32
 800c4ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2220      	movs	r2, #32
 800c4f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2200      	movs	r2, #0
 800c500:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c504:	2300      	movs	r3, #0
}
 800c506:	4618      	mov	r0, r3
 800c508:	3710      	adds	r7, #16
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}

0800c50e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c50e:	b580      	push	{r7, lr}
 800c510:	b084      	sub	sp, #16
 800c512:	af00      	add	r7, sp, #0
 800c514:	60f8      	str	r0, [r7, #12]
 800c516:	60b9      	str	r1, [r7, #8]
 800c518:	603b      	str	r3, [r7, #0]
 800c51a:	4613      	mov	r3, r2
 800c51c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c51e:	e062      	b.n	800c5e6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c520:	69bb      	ldr	r3, [r7, #24]
 800c522:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c526:	d05e      	beq.n	800c5e6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c528:	f7f5 fd0a 	bl	8001f40 <HAL_GetTick>
 800c52c:	4602      	mov	r2, r0
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	1ad3      	subs	r3, r2, r3
 800c532:	69ba      	ldr	r2, [r7, #24]
 800c534:	429a      	cmp	r2, r3
 800c536:	d302      	bcc.n	800c53e <UART_WaitOnFlagUntilTimeout+0x30>
 800c538:	69bb      	ldr	r3, [r7, #24]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d11d      	bne.n	800c57a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	681a      	ldr	r2, [r3, #0]
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c54c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	689a      	ldr	r2, [r3, #8]
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f022 0201 	bic.w	r2, r2, #1
 800c55c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2220      	movs	r2, #32
 800c562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2220      	movs	r2, #32
 800c56a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2200      	movs	r2, #0
 800c572:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c576:	2303      	movs	r3, #3
 800c578:	e045      	b.n	800c606 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f003 0304 	and.w	r3, r3, #4
 800c584:	2b00      	cmp	r3, #0
 800c586:	d02e      	beq.n	800c5e6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	69db      	ldr	r3, [r3, #28]
 800c58e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c596:	d126      	bne.n	800c5e6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c5a0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	681a      	ldr	r2, [r3, #0]
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c5b0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	689a      	ldr	r2, [r3, #8]
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f022 0201 	bic.w	r2, r2, #1
 800c5c0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	2220      	movs	r2, #32
 800c5c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	2220      	movs	r2, #32
 800c5ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	2220      	movs	r2, #32
 800c5d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c5e2:	2303      	movs	r3, #3
 800c5e4:	e00f      	b.n	800c606 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	69da      	ldr	r2, [r3, #28]
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	4013      	ands	r3, r2
 800c5f0:	68ba      	ldr	r2, [r7, #8]
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	bf0c      	ite	eq
 800c5f6:	2301      	moveq	r3, #1
 800c5f8:	2300      	movne	r3, #0
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	461a      	mov	r2, r3
 800c5fe:	79fb      	ldrb	r3, [r7, #7]
 800c600:	429a      	cmp	r2, r3
 800c602:	d08d      	beq.n	800c520 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c604:	2300      	movs	r3, #0
}
 800c606:	4618      	mov	r0, r3
 800c608:	3710      	adds	r7, #16
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}

0800c60e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c60e:	b480      	push	{r7}
 800c610:	b085      	sub	sp, #20
 800c612:	af00      	add	r7, sp, #0
 800c614:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d101      	bne.n	800c624 <HAL_UARTEx_DisableFifoMode+0x16>
 800c620:	2302      	movs	r3, #2
 800c622:	e027      	b.n	800c674 <HAL_UARTEx_DisableFifoMode+0x66>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2201      	movs	r2, #1
 800c628:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2224      	movs	r2, #36	; 0x24
 800c630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	681a      	ldr	r2, [r3, #0]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f022 0201 	bic.w	r2, r2, #1
 800c64a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c652:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2200      	movs	r2, #0
 800c658:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	68fa      	ldr	r2, [r7, #12]
 800c660:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2220      	movs	r2, #32
 800c666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2200      	movs	r2, #0
 800c66e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c672:	2300      	movs	r3, #0
}
 800c674:	4618      	mov	r0, r3
 800c676:	3714      	adds	r7, #20
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c690:	2b01      	cmp	r3, #1
 800c692:	d101      	bne.n	800c698 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c694:	2302      	movs	r3, #2
 800c696:	e02d      	b.n	800c6f4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2201      	movs	r2, #1
 800c69c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2224      	movs	r2, #36	; 0x24
 800c6a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	681a      	ldr	r2, [r3, #0]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f022 0201 	bic.w	r2, r2, #1
 800c6be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	689b      	ldr	r3, [r3, #8]
 800c6c6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	683a      	ldr	r2, [r7, #0]
 800c6d0:	430a      	orrs	r2, r1
 800c6d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f000 f84f 	bl	800c778 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	68fa      	ldr	r2, [r7, #12]
 800c6e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2220      	movs	r2, #32
 800c6e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c6f2:	2300      	movs	r3, #0
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3710      	adds	r7, #16
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}

0800c6fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b084      	sub	sp, #16
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c70c:	2b01      	cmp	r3, #1
 800c70e:	d101      	bne.n	800c714 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c710:	2302      	movs	r3, #2
 800c712:	e02d      	b.n	800c770 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2201      	movs	r2, #1
 800c718:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2224      	movs	r2, #36	; 0x24
 800c720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	681a      	ldr	r2, [r3, #0]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f022 0201 	bic.w	r2, r2, #1
 800c73a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	689b      	ldr	r3, [r3, #8]
 800c742:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	683a      	ldr	r2, [r7, #0]
 800c74c:	430a      	orrs	r2, r1
 800c74e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f000 f811 	bl	800c778 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	68fa      	ldr	r2, [r7, #12]
 800c75c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2220      	movs	r2, #32
 800c762:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2200      	movs	r2, #0
 800c76a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c76e:	2300      	movs	r3, #0
}
 800c770:	4618      	mov	r0, r3
 800c772:	3710      	adds	r7, #16
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c778:	b480      	push	{r7}
 800c77a:	b085      	sub	sp, #20
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c784:	2b00      	cmp	r3, #0
 800c786:	d108      	bne.n	800c79a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2201      	movs	r2, #1
 800c78c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2201      	movs	r2, #1
 800c794:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c798:	e031      	b.n	800c7fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c79a:	2310      	movs	r3, #16
 800c79c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c79e:	2310      	movs	r3, #16
 800c7a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	689b      	ldr	r3, [r3, #8]
 800c7a8:	0e5b      	lsrs	r3, r3, #25
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	f003 0307 	and.w	r3, r3, #7
 800c7b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	689b      	ldr	r3, [r3, #8]
 800c7b8:	0f5b      	lsrs	r3, r3, #29
 800c7ba:	b2db      	uxtb	r3, r3
 800c7bc:	f003 0307 	and.w	r3, r3, #7
 800c7c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c7c2:	7bbb      	ldrb	r3, [r7, #14]
 800c7c4:	7b3a      	ldrb	r2, [r7, #12]
 800c7c6:	4911      	ldr	r1, [pc, #68]	; (800c80c <UARTEx_SetNbDataToProcess+0x94>)
 800c7c8:	5c8a      	ldrb	r2, [r1, r2]
 800c7ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c7ce:	7b3a      	ldrb	r2, [r7, #12]
 800c7d0:	490f      	ldr	r1, [pc, #60]	; (800c810 <UARTEx_SetNbDataToProcess+0x98>)
 800c7d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c7d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c7d8:	b29a      	uxth	r2, r3
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c7e0:	7bfb      	ldrb	r3, [r7, #15]
 800c7e2:	7b7a      	ldrb	r2, [r7, #13]
 800c7e4:	4909      	ldr	r1, [pc, #36]	; (800c80c <UARTEx_SetNbDataToProcess+0x94>)
 800c7e6:	5c8a      	ldrb	r2, [r1, r2]
 800c7e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c7ec:	7b7a      	ldrb	r2, [r7, #13]
 800c7ee:	4908      	ldr	r1, [pc, #32]	; (800c810 <UARTEx_SetNbDataToProcess+0x98>)
 800c7f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c7f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c7f6:	b29a      	uxth	r2, r3
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c7fe:	bf00      	nop
 800c800:	3714      	adds	r7, #20
 800c802:	46bd      	mov	sp, r7
 800c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c808:	4770      	bx	lr
 800c80a:	bf00      	nop
 800c80c:	0800ff98 	.word	0x0800ff98
 800c810:	0800ffa0 	.word	0x0800ffa0

0800c814 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c814:	b084      	sub	sp, #16
 800c816:	b580      	push	{r7, lr}
 800c818:	b084      	sub	sp, #16
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	6078      	str	r0, [r7, #4]
 800c81e:	f107 001c 	add.w	r0, r7, #28
 800c822:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c828:	2b01      	cmp	r3, #1
 800c82a:	d120      	bne.n	800c86e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c830:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	68da      	ldr	r2, [r3, #12]
 800c83c:	4b2a      	ldr	r3, [pc, #168]	; (800c8e8 <USB_CoreInit+0xd4>)
 800c83e:	4013      	ands	r3, r2
 800c840:	687a      	ldr	r2, [r7, #4]
 800c842:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	68db      	ldr	r3, [r3, #12]
 800c848:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c852:	2b01      	cmp	r3, #1
 800c854:	d105      	bne.n	800c862 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	68db      	ldr	r3, [r3, #12]
 800c85a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f000 fa60 	bl	800cd28 <USB_CoreReset>
 800c868:	4603      	mov	r3, r0
 800c86a:	73fb      	strb	r3, [r7, #15]
 800c86c:	e01a      	b.n	800c8a4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	68db      	ldr	r3, [r3, #12]
 800c872:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 fa54 	bl	800cd28 <USB_CoreReset>
 800c880:	4603      	mov	r3, r0
 800c882:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c886:	2b00      	cmp	r3, #0
 800c888:	d106      	bne.n	800c898 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c88e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	639a      	str	r2, [r3, #56]	; 0x38
 800c896:	e005      	b.n	800c8a4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c89c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a6:	2b01      	cmp	r3, #1
 800c8a8:	d116      	bne.n	800c8d8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8ae:	b29a      	uxth	r2, r3
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c8b8:	4b0c      	ldr	r3, [pc, #48]	; (800c8ec <USB_CoreInit+0xd8>)
 800c8ba:	4313      	orrs	r3, r2
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	689b      	ldr	r3, [r3, #8]
 800c8c4:	f043 0206 	orr.w	r2, r3, #6
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	689b      	ldr	r3, [r3, #8]
 800c8d0:	f043 0220 	orr.w	r2, r3, #32
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c8d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3710      	adds	r7, #16
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c8e4:	b004      	add	sp, #16
 800c8e6:	4770      	bx	lr
 800c8e8:	ffbdffbf 	.word	0xffbdffbf
 800c8ec:	03ee0000 	.word	0x03ee0000

0800c8f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b083      	sub	sp, #12
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	689b      	ldr	r3, [r3, #8]
 800c8fc:	f023 0201 	bic.w	r2, r3, #1
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c904:	2300      	movs	r3, #0
}
 800c906:	4618      	mov	r0, r3
 800c908:	370c      	adds	r7, #12
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr

0800c912 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c912:	b580      	push	{r7, lr}
 800c914:	b082      	sub	sp, #8
 800c916:	af00      	add	r7, sp, #0
 800c918:	6078      	str	r0, [r7, #4]
 800c91a:	460b      	mov	r3, r1
 800c91c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	68db      	ldr	r3, [r3, #12]
 800c922:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c92a:	78fb      	ldrb	r3, [r7, #3]
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d106      	bne.n	800c93e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	68db      	ldr	r3, [r3, #12]
 800c934:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	60da      	str	r2, [r3, #12]
 800c93c:	e00b      	b.n	800c956 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c93e:	78fb      	ldrb	r3, [r7, #3]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d106      	bne.n	800c952 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	68db      	ldr	r3, [r3, #12]
 800c948:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	60da      	str	r2, [r3, #12]
 800c950:	e001      	b.n	800c956 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c952:	2301      	movs	r3, #1
 800c954:	e003      	b.n	800c95e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c956:	2032      	movs	r0, #50	; 0x32
 800c958:	f7f5 fafe 	bl	8001f58 <HAL_Delay>

  return HAL_OK;
 800c95c:	2300      	movs	r3, #0
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3708      	adds	r7, #8
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
	...

0800c968 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c968:	b084      	sub	sp, #16
 800c96a:	b580      	push	{r7, lr}
 800c96c:	b086      	sub	sp, #24
 800c96e:	af00      	add	r7, sp, #0
 800c970:	6078      	str	r0, [r7, #4]
 800c972:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c976:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c97a:	2300      	movs	r3, #0
 800c97c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c982:	2300      	movs	r3, #0
 800c984:	613b      	str	r3, [r7, #16]
 800c986:	e009      	b.n	800c99c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c988:	687a      	ldr	r2, [r7, #4]
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	3340      	adds	r3, #64	; 0x40
 800c98e:	009b      	lsls	r3, r3, #2
 800c990:	4413      	add	r3, r2
 800c992:	2200      	movs	r2, #0
 800c994:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	3301      	adds	r3, #1
 800c99a:	613b      	str	r3, [r7, #16]
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	2b0e      	cmp	r3, #14
 800c9a0:	d9f2      	bls.n	800c988 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c9a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d11c      	bne.n	800c9e2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9ae:	685b      	ldr	r3, [r3, #4]
 800c9b0:	68fa      	ldr	r2, [r7, #12]
 800c9b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c9b6:	f043 0302 	orr.w	r3, r3, #2
 800c9ba:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9c0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	601a      	str	r2, [r3, #0]
 800c9e0:	e005      	b.n	800c9ee <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca00:	4619      	mov	r1, r3
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca08:	461a      	mov	r2, r3
 800ca0a:	680b      	ldr	r3, [r1, #0]
 800ca0c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ca0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	d10c      	bne.n	800ca2e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ca14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d104      	bne.n	800ca24 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ca1a:	2100      	movs	r1, #0
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f000 f949 	bl	800ccb4 <USB_SetDevSpeed>
 800ca22:	e008      	b.n	800ca36 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ca24:	2101      	movs	r1, #1
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f000 f944 	bl	800ccb4 <USB_SetDevSpeed>
 800ca2c:	e003      	b.n	800ca36 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ca2e:	2103      	movs	r1, #3
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f000 f93f 	bl	800ccb4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ca36:	2110      	movs	r1, #16
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f000 f8f3 	bl	800cc24 <USB_FlushTxFifo>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d001      	beq.n	800ca48 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ca44:	2301      	movs	r3, #1
 800ca46:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f000 f911 	bl	800cc70 <USB_FlushRxFifo>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d001      	beq.n	800ca58 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ca54:	2301      	movs	r3, #1
 800ca56:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca5e:	461a      	mov	r2, r3
 800ca60:	2300      	movs	r3, #0
 800ca62:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca76:	461a      	mov	r2, r3
 800ca78:	2300      	movs	r3, #0
 800ca7a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	613b      	str	r3, [r7, #16]
 800ca80:	e043      	b.n	800cb0a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	015a      	lsls	r2, r3, #5
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	4413      	add	r3, r2
 800ca8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca98:	d118      	bne.n	800cacc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d10a      	bne.n	800cab6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	015a      	lsls	r2, r3, #5
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	4413      	add	r3, r2
 800caa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caac:	461a      	mov	r2, r3
 800caae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cab2:	6013      	str	r3, [r2, #0]
 800cab4:	e013      	b.n	800cade <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cab6:	693b      	ldr	r3, [r7, #16]
 800cab8:	015a      	lsls	r2, r3, #5
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	4413      	add	r3, r2
 800cabe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cac2:	461a      	mov	r2, r3
 800cac4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cac8:	6013      	str	r3, [r2, #0]
 800caca:	e008      	b.n	800cade <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	015a      	lsls	r2, r3, #5
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	4413      	add	r3, r2
 800cad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cad8:	461a      	mov	r2, r3
 800cada:	2300      	movs	r3, #0
 800cadc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cade:	693b      	ldr	r3, [r7, #16]
 800cae0:	015a      	lsls	r2, r3, #5
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	4413      	add	r3, r2
 800cae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caea:	461a      	mov	r2, r3
 800caec:	2300      	movs	r3, #0
 800caee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	015a      	lsls	r2, r3, #5
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	4413      	add	r3, r2
 800caf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cafc:	461a      	mov	r2, r3
 800cafe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cb02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	3301      	adds	r3, #1
 800cb08:	613b      	str	r3, [r7, #16]
 800cb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0c:	693a      	ldr	r2, [r7, #16]
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d3b7      	bcc.n	800ca82 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cb12:	2300      	movs	r3, #0
 800cb14:	613b      	str	r3, [r7, #16]
 800cb16:	e043      	b.n	800cba0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	015a      	lsls	r2, r3, #5
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	4413      	add	r3, r2
 800cb20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb2e:	d118      	bne.n	800cb62 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d10a      	bne.n	800cb4c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	015a      	lsls	r2, r3, #5
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	4413      	add	r3, r2
 800cb3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb42:	461a      	mov	r2, r3
 800cb44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cb48:	6013      	str	r3, [r2, #0]
 800cb4a:	e013      	b.n	800cb74 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	015a      	lsls	r2, r3, #5
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	4413      	add	r3, r2
 800cb54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb58:	461a      	mov	r2, r3
 800cb5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cb5e:	6013      	str	r3, [r2, #0]
 800cb60:	e008      	b.n	800cb74 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	015a      	lsls	r2, r3, #5
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	4413      	add	r3, r2
 800cb6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb6e:	461a      	mov	r2, r3
 800cb70:	2300      	movs	r3, #0
 800cb72:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	015a      	lsls	r2, r3, #5
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	4413      	add	r3, r2
 800cb7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb80:	461a      	mov	r2, r3
 800cb82:	2300      	movs	r3, #0
 800cb84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	015a      	lsls	r2, r3, #5
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	4413      	add	r3, r2
 800cb8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb92:	461a      	mov	r2, r3
 800cb94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cb98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	3301      	adds	r3, #1
 800cb9e:	613b      	str	r3, [r7, #16]
 800cba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba2:	693a      	ldr	r2, [r7, #16]
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d3b7      	bcc.n	800cb18 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbae:	691b      	ldr	r3, [r3, #16]
 800cbb0:	68fa      	ldr	r2, [r7, #12]
 800cbb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cbb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cbba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cbc8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d105      	bne.n	800cbdc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	699b      	ldr	r3, [r3, #24]
 800cbd4:	f043 0210 	orr.w	r2, r3, #16
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	699a      	ldr	r2, [r3, #24]
 800cbe0:	4b0e      	ldr	r3, [pc, #56]	; (800cc1c <USB_DevInit+0x2b4>)
 800cbe2:	4313      	orrs	r3, r2
 800cbe4:	687a      	ldr	r2, [r7, #4]
 800cbe6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cbe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d005      	beq.n	800cbfa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	699b      	ldr	r3, [r3, #24]
 800cbf2:	f043 0208 	orr.w	r2, r3, #8
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cbfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbfc:	2b01      	cmp	r3, #1
 800cbfe:	d105      	bne.n	800cc0c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	699a      	ldr	r2, [r3, #24]
 800cc04:	4b06      	ldr	r3, [pc, #24]	; (800cc20 <USB_DevInit+0x2b8>)
 800cc06:	4313      	orrs	r3, r2
 800cc08:	687a      	ldr	r2, [r7, #4]
 800cc0a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cc0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3718      	adds	r7, #24
 800cc12:	46bd      	mov	sp, r7
 800cc14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cc18:	b004      	add	sp, #16
 800cc1a:	4770      	bx	lr
 800cc1c:	803c3800 	.word	0x803c3800
 800cc20:	40000004 	.word	0x40000004

0800cc24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cc24:	b480      	push	{r7}
 800cc26:	b085      	sub	sp, #20
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	019b      	lsls	r3, r3, #6
 800cc36:	f043 0220 	orr.w	r2, r3, #32
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	3301      	adds	r3, #1
 800cc42:	60fb      	str	r3, [r7, #12]
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	4a09      	ldr	r2, [pc, #36]	; (800cc6c <USB_FlushTxFifo+0x48>)
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d901      	bls.n	800cc50 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800cc4c:	2303      	movs	r3, #3
 800cc4e:	e006      	b.n	800cc5e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	691b      	ldr	r3, [r3, #16]
 800cc54:	f003 0320 	and.w	r3, r3, #32
 800cc58:	2b20      	cmp	r3, #32
 800cc5a:	d0f0      	beq.n	800cc3e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800cc5c:	2300      	movs	r3, #0
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3714      	adds	r7, #20
 800cc62:	46bd      	mov	sp, r7
 800cc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc68:	4770      	bx	lr
 800cc6a:	bf00      	nop
 800cc6c:	00030d40 	.word	0x00030d40

0800cc70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cc70:	b480      	push	{r7}
 800cc72:	b085      	sub	sp, #20
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2210      	movs	r2, #16
 800cc80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	3301      	adds	r3, #1
 800cc86:	60fb      	str	r3, [r7, #12]
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	4a09      	ldr	r2, [pc, #36]	; (800ccb0 <USB_FlushRxFifo+0x40>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d901      	bls.n	800cc94 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800cc90:	2303      	movs	r3, #3
 800cc92:	e006      	b.n	800cca2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	691b      	ldr	r3, [r3, #16]
 800cc98:	f003 0310 	and.w	r3, r3, #16
 800cc9c:	2b10      	cmp	r3, #16
 800cc9e:	d0f0      	beq.n	800cc82 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800cca0:	2300      	movs	r3, #0
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3714      	adds	r7, #20
 800cca6:	46bd      	mov	sp, r7
 800cca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccac:	4770      	bx	lr
 800ccae:	bf00      	nop
 800ccb0:	00030d40 	.word	0x00030d40

0800ccb4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b085      	sub	sp, #20
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	460b      	mov	r3, r1
 800ccbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccca:	681a      	ldr	r2, [r3, #0]
 800cccc:	78fb      	ldrb	r3, [r7, #3]
 800ccce:	68f9      	ldr	r1, [r7, #12]
 800ccd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ccd4:	4313      	orrs	r3, r2
 800ccd6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ccd8:	2300      	movs	r3, #0
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3714      	adds	r7, #20
 800ccde:	46bd      	mov	sp, r7
 800cce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce4:	4770      	bx	lr

0800cce6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cce6:	b480      	push	{r7}
 800cce8:	b085      	sub	sp, #20
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	68fa      	ldr	r2, [r7, #12]
 800ccfc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cd00:	f023 0303 	bic.w	r3, r3, #3
 800cd04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd0c:	685b      	ldr	r3, [r3, #4]
 800cd0e:	68fa      	ldr	r2, [r7, #12]
 800cd10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd14:	f043 0302 	orr.w	r3, r3, #2
 800cd18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cd1a:	2300      	movs	r3, #0
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3714      	adds	r7, #20
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr

0800cd28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b085      	sub	sp, #20
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800cd30:	2300      	movs	r3, #0
 800cd32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	3301      	adds	r3, #1
 800cd38:	60fb      	str	r3, [r7, #12]
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	4a13      	ldr	r2, [pc, #76]	; (800cd8c <USB_CoreReset+0x64>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d901      	bls.n	800cd46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cd42:	2303      	movs	r3, #3
 800cd44:	e01b      	b.n	800cd7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	691b      	ldr	r3, [r3, #16]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	daf2      	bge.n	800cd34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	691b      	ldr	r3, [r3, #16]
 800cd56:	f043 0201 	orr.w	r2, r3, #1
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	3301      	adds	r3, #1
 800cd62:	60fb      	str	r3, [r7, #12]
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	4a09      	ldr	r2, [pc, #36]	; (800cd8c <USB_CoreReset+0x64>)
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	d901      	bls.n	800cd70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cd6c:	2303      	movs	r3, #3
 800cd6e:	e006      	b.n	800cd7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	691b      	ldr	r3, [r3, #16]
 800cd74:	f003 0301 	and.w	r3, r3, #1
 800cd78:	2b01      	cmp	r3, #1
 800cd7a:	d0f0      	beq.n	800cd5e <USB_CoreReset+0x36>

  return HAL_OK;
 800cd7c:	2300      	movs	r3, #0
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3714      	adds	r7, #20
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr
 800cd8a:	bf00      	nop
 800cd8c:	00030d40 	.word	0x00030d40

0800cd90 <__NVIC_SetPriority>:
{
 800cd90:	b480      	push	{r7}
 800cd92:	b083      	sub	sp, #12
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	4603      	mov	r3, r0
 800cd98:	6039      	str	r1, [r7, #0]
 800cd9a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cd9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	db0a      	blt.n	800cdba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	b2da      	uxtb	r2, r3
 800cda8:	490c      	ldr	r1, [pc, #48]	; (800cddc <__NVIC_SetPriority+0x4c>)
 800cdaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cdae:	0112      	lsls	r2, r2, #4
 800cdb0:	b2d2      	uxtb	r2, r2
 800cdb2:	440b      	add	r3, r1
 800cdb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800cdb8:	e00a      	b.n	800cdd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	b2da      	uxtb	r2, r3
 800cdbe:	4908      	ldr	r1, [pc, #32]	; (800cde0 <__NVIC_SetPriority+0x50>)
 800cdc0:	88fb      	ldrh	r3, [r7, #6]
 800cdc2:	f003 030f 	and.w	r3, r3, #15
 800cdc6:	3b04      	subs	r3, #4
 800cdc8:	0112      	lsls	r2, r2, #4
 800cdca:	b2d2      	uxtb	r2, r2
 800cdcc:	440b      	add	r3, r1
 800cdce:	761a      	strb	r2, [r3, #24]
}
 800cdd0:	bf00      	nop
 800cdd2:	370c      	adds	r7, #12
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdda:	4770      	bx	lr
 800cddc:	e000e100 	.word	0xe000e100
 800cde0:	e000ed00 	.word	0xe000ed00

0800cde4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cde4:	b580      	push	{r7, lr}
 800cde6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cde8:	2100      	movs	r1, #0
 800cdea:	f06f 0004 	mvn.w	r0, #4
 800cdee:	f7ff ffcf 	bl	800cd90 <__NVIC_SetPriority>
#endif
}
 800cdf2:	bf00      	nop
 800cdf4:	bd80      	pop	{r7, pc}
	...

0800cdf8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cdfe:	f3ef 8305 	mrs	r3, IPSR
 800ce02:	603b      	str	r3, [r7, #0]
  return(result);
 800ce04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d003      	beq.n	800ce12 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ce0a:	f06f 0305 	mvn.w	r3, #5
 800ce0e:	607b      	str	r3, [r7, #4]
 800ce10:	e00c      	b.n	800ce2c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ce12:	4b0a      	ldr	r3, [pc, #40]	; (800ce3c <osKernelInitialize+0x44>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d105      	bne.n	800ce26 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ce1a:	4b08      	ldr	r3, [pc, #32]	; (800ce3c <osKernelInitialize+0x44>)
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ce20:	2300      	movs	r3, #0
 800ce22:	607b      	str	r3, [r7, #4]
 800ce24:	e002      	b.n	800ce2c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ce26:	f04f 33ff 	mov.w	r3, #4294967295
 800ce2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ce2c:	687b      	ldr	r3, [r7, #4]
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	370c      	adds	r7, #12
 800ce32:	46bd      	mov	sp, r7
 800ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce38:	4770      	bx	lr
 800ce3a:	bf00      	nop
 800ce3c:	24000044 	.word	0x24000044

0800ce40 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce46:	f3ef 8305 	mrs	r3, IPSR
 800ce4a:	603b      	str	r3, [r7, #0]
  return(result);
 800ce4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d003      	beq.n	800ce5a <osKernelStart+0x1a>
    stat = osErrorISR;
 800ce52:	f06f 0305 	mvn.w	r3, #5
 800ce56:	607b      	str	r3, [r7, #4]
 800ce58:	e010      	b.n	800ce7c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ce5a:	4b0b      	ldr	r3, [pc, #44]	; (800ce88 <osKernelStart+0x48>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	2b01      	cmp	r3, #1
 800ce60:	d109      	bne.n	800ce76 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ce62:	f7ff ffbf 	bl	800cde4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ce66:	4b08      	ldr	r3, [pc, #32]	; (800ce88 <osKernelStart+0x48>)
 800ce68:	2202      	movs	r2, #2
 800ce6a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ce6c:	f001 fe88 	bl	800eb80 <vTaskStartScheduler>
      stat = osOK;
 800ce70:	2300      	movs	r3, #0
 800ce72:	607b      	str	r3, [r7, #4]
 800ce74:	e002      	b.n	800ce7c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ce76:	f04f 33ff 	mov.w	r3, #4294967295
 800ce7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ce7c:	687b      	ldr	r3, [r7, #4]
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3708      	adds	r7, #8
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	bf00      	nop
 800ce88:	24000044 	.word	0x24000044

0800ce8c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b08e      	sub	sp, #56	; 0x38
 800ce90:	af04      	add	r7, sp, #16
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	60b9      	str	r1, [r7, #8]
 800ce96:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce9c:	f3ef 8305 	mrs	r3, IPSR
 800cea0:	617b      	str	r3, [r7, #20]
  return(result);
 800cea2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d17e      	bne.n	800cfa6 <osThreadNew+0x11a>
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d07b      	beq.n	800cfa6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ceae:	2380      	movs	r3, #128	; 0x80
 800ceb0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ceb2:	2318      	movs	r3, #24
 800ceb4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ceba:	f04f 33ff 	mov.w	r3, #4294967295
 800cebe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d045      	beq.n	800cf52 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d002      	beq.n	800ced4 <osThreadNew+0x48>
        name = attr->name;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	699b      	ldr	r3, [r3, #24]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d002      	beq.n	800cee2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	699b      	ldr	r3, [r3, #24]
 800cee0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cee2:	69fb      	ldr	r3, [r7, #28]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d008      	beq.n	800cefa <osThreadNew+0x6e>
 800cee8:	69fb      	ldr	r3, [r7, #28]
 800ceea:	2b38      	cmp	r3, #56	; 0x38
 800ceec:	d805      	bhi.n	800cefa <osThreadNew+0x6e>
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	685b      	ldr	r3, [r3, #4]
 800cef2:	f003 0301 	and.w	r3, r3, #1
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d001      	beq.n	800cefe <osThreadNew+0x72>
        return (NULL);
 800cefa:	2300      	movs	r3, #0
 800cefc:	e054      	b.n	800cfa8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	695b      	ldr	r3, [r3, #20]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d003      	beq.n	800cf0e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	695b      	ldr	r3, [r3, #20]
 800cf0a:	089b      	lsrs	r3, r3, #2
 800cf0c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	689b      	ldr	r3, [r3, #8]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d00e      	beq.n	800cf34 <osThreadNew+0xa8>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	68db      	ldr	r3, [r3, #12]
 800cf1a:	2b5b      	cmp	r3, #91	; 0x5b
 800cf1c:	d90a      	bls.n	800cf34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d006      	beq.n	800cf34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	695b      	ldr	r3, [r3, #20]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d002      	beq.n	800cf34 <osThreadNew+0xa8>
        mem = 1;
 800cf2e:	2301      	movs	r3, #1
 800cf30:	61bb      	str	r3, [r7, #24]
 800cf32:	e010      	b.n	800cf56 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d10c      	bne.n	800cf56 <osThreadNew+0xca>
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	68db      	ldr	r3, [r3, #12]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d108      	bne.n	800cf56 <osThreadNew+0xca>
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	691b      	ldr	r3, [r3, #16]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d104      	bne.n	800cf56 <osThreadNew+0xca>
          mem = 0;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	61bb      	str	r3, [r7, #24]
 800cf50:	e001      	b.n	800cf56 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800cf52:	2300      	movs	r3, #0
 800cf54:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cf56:	69bb      	ldr	r3, [r7, #24]
 800cf58:	2b01      	cmp	r3, #1
 800cf5a:	d110      	bne.n	800cf7e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800cf60:	687a      	ldr	r2, [r7, #4]
 800cf62:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cf64:	9202      	str	r2, [sp, #8]
 800cf66:	9301      	str	r3, [sp, #4]
 800cf68:	69fb      	ldr	r3, [r7, #28]
 800cf6a:	9300      	str	r3, [sp, #0]
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	6a3a      	ldr	r2, [r7, #32]
 800cf70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cf72:	68f8      	ldr	r0, [r7, #12]
 800cf74:	f001 fc2e 	bl	800e7d4 <xTaskCreateStatic>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	613b      	str	r3, [r7, #16]
 800cf7c:	e013      	b.n	800cfa6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800cf7e:	69bb      	ldr	r3, [r7, #24]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d110      	bne.n	800cfa6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cf84:	6a3b      	ldr	r3, [r7, #32]
 800cf86:	b29a      	uxth	r2, r3
 800cf88:	f107 0310 	add.w	r3, r7, #16
 800cf8c:	9301      	str	r3, [sp, #4]
 800cf8e:	69fb      	ldr	r3, [r7, #28]
 800cf90:	9300      	str	r3, [sp, #0]
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cf96:	68f8      	ldr	r0, [r7, #12]
 800cf98:	f001 fc79 	bl	800e88e <xTaskCreate>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	2b01      	cmp	r3, #1
 800cfa0:	d001      	beq.n	800cfa6 <osThreadNew+0x11a>
            hTask = NULL;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cfa6:	693b      	ldr	r3, [r7, #16]
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3728      	adds	r7, #40	; 0x28
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}

0800cfb0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b084      	sub	sp, #16
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfb8:	f3ef 8305 	mrs	r3, IPSR
 800cfbc:	60bb      	str	r3, [r7, #8]
  return(result);
 800cfbe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d003      	beq.n	800cfcc <osDelay+0x1c>
    stat = osErrorISR;
 800cfc4:	f06f 0305 	mvn.w	r3, #5
 800cfc8:	60fb      	str	r3, [r7, #12]
 800cfca:	e007      	b.n	800cfdc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d002      	beq.n	800cfdc <osDelay+0x2c>
      vTaskDelay(ticks);
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f001 fd9e 	bl	800eb18 <vTaskDelay>
    }
  }

  return (stat);
 800cfdc:	68fb      	ldr	r3, [r7, #12]
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3710      	adds	r7, #16
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}

0800cfe6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800cfe6:	b580      	push	{r7, lr}
 800cfe8:	b08a      	sub	sp, #40	; 0x28
 800cfea:	af02      	add	r7, sp, #8
 800cfec:	60f8      	str	r0, [r7, #12]
 800cfee:	60b9      	str	r1, [r7, #8]
 800cff0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800cff2:	2300      	movs	r3, #0
 800cff4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cff6:	f3ef 8305 	mrs	r3, IPSR
 800cffa:	613b      	str	r3, [r7, #16]
  return(result);
 800cffc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d15f      	bne.n	800d0c2 <osMessageQueueNew+0xdc>
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d05c      	beq.n	800d0c2 <osMessageQueueNew+0xdc>
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d059      	beq.n	800d0c2 <osMessageQueueNew+0xdc>
    mem = -1;
 800d00e:	f04f 33ff 	mov.w	r3, #4294967295
 800d012:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d029      	beq.n	800d06e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	689b      	ldr	r3, [r3, #8]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d012      	beq.n	800d048 <osMessageQueueNew+0x62>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	68db      	ldr	r3, [r3, #12]
 800d026:	2b4f      	cmp	r3, #79	; 0x4f
 800d028:	d90e      	bls.n	800d048 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d00a      	beq.n	800d048 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	695a      	ldr	r2, [r3, #20]
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	68b9      	ldr	r1, [r7, #8]
 800d03a:	fb01 f303 	mul.w	r3, r1, r3
 800d03e:	429a      	cmp	r2, r3
 800d040:	d302      	bcc.n	800d048 <osMessageQueueNew+0x62>
        mem = 1;
 800d042:	2301      	movs	r3, #1
 800d044:	61bb      	str	r3, [r7, #24]
 800d046:	e014      	b.n	800d072 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	689b      	ldr	r3, [r3, #8]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d110      	bne.n	800d072 <osMessageQueueNew+0x8c>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	68db      	ldr	r3, [r3, #12]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d10c      	bne.n	800d072 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d108      	bne.n	800d072 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	695b      	ldr	r3, [r3, #20]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d104      	bne.n	800d072 <osMessageQueueNew+0x8c>
          mem = 0;
 800d068:	2300      	movs	r3, #0
 800d06a:	61bb      	str	r3, [r7, #24]
 800d06c:	e001      	b.n	800d072 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800d06e:	2300      	movs	r3, #0
 800d070:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d072:	69bb      	ldr	r3, [r7, #24]
 800d074:	2b01      	cmp	r3, #1
 800d076:	d10b      	bne.n	800d090 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	691a      	ldr	r2, [r3, #16]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	689b      	ldr	r3, [r3, #8]
 800d080:	2100      	movs	r1, #0
 800d082:	9100      	str	r1, [sp, #0]
 800d084:	68b9      	ldr	r1, [r7, #8]
 800d086:	68f8      	ldr	r0, [r7, #12]
 800d088:	f000 fe66 	bl	800dd58 <xQueueGenericCreateStatic>
 800d08c:	61f8      	str	r0, [r7, #28]
 800d08e:	e008      	b.n	800d0a2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800d090:	69bb      	ldr	r3, [r7, #24]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d105      	bne.n	800d0a2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800d096:	2200      	movs	r2, #0
 800d098:	68b9      	ldr	r1, [r7, #8]
 800d09a:	68f8      	ldr	r0, [r7, #12]
 800d09c:	f000 fed4 	bl	800de48 <xQueueGenericCreate>
 800d0a0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d0a2:	69fb      	ldr	r3, [r7, #28]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d00c      	beq.n	800d0c2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d003      	beq.n	800d0b6 <osMessageQueueNew+0xd0>
        name = attr->name;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	617b      	str	r3, [r7, #20]
 800d0b4:	e001      	b.n	800d0ba <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800d0ba:	6979      	ldr	r1, [r7, #20]
 800d0bc:	69f8      	ldr	r0, [r7, #28]
 800d0be:	f001 fb2b 	bl	800e718 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d0c2:	69fb      	ldr	r3, [r7, #28]
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	3720      	adds	r7, #32
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}

0800d0cc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b088      	sub	sp, #32
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	60f8      	str	r0, [r7, #12]
 800d0d4:	60b9      	str	r1, [r7, #8]
 800d0d6:	603b      	str	r3, [r7, #0]
 800d0d8:	4613      	mov	r3, r2
 800d0da:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0e4:	f3ef 8305 	mrs	r3, IPSR
 800d0e8:	617b      	str	r3, [r7, #20]
  return(result);
 800d0ea:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d028      	beq.n	800d142 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d0f0:	69bb      	ldr	r3, [r7, #24]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d005      	beq.n	800d102 <osMessageQueuePut+0x36>
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d002      	beq.n	800d102 <osMessageQueuePut+0x36>
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d003      	beq.n	800d10a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800d102:	f06f 0303 	mvn.w	r3, #3
 800d106:	61fb      	str	r3, [r7, #28]
 800d108:	e038      	b.n	800d17c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800d10a:	2300      	movs	r3, #0
 800d10c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d10e:	f107 0210 	add.w	r2, r7, #16
 800d112:	2300      	movs	r3, #0
 800d114:	68b9      	ldr	r1, [r7, #8]
 800d116:	69b8      	ldr	r0, [r7, #24]
 800d118:	f000 fff2 	bl	800e100 <xQueueGenericSendFromISR>
 800d11c:	4603      	mov	r3, r0
 800d11e:	2b01      	cmp	r3, #1
 800d120:	d003      	beq.n	800d12a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800d122:	f06f 0302 	mvn.w	r3, #2
 800d126:	61fb      	str	r3, [r7, #28]
 800d128:	e028      	b.n	800d17c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d025      	beq.n	800d17c <osMessageQueuePut+0xb0>
 800d130:	4b15      	ldr	r3, [pc, #84]	; (800d188 <osMessageQueuePut+0xbc>)
 800d132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d136:	601a      	str	r2, [r3, #0]
 800d138:	f3bf 8f4f 	dsb	sy
 800d13c:	f3bf 8f6f 	isb	sy
 800d140:	e01c      	b.n	800d17c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d142:	69bb      	ldr	r3, [r7, #24]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d002      	beq.n	800d14e <osMessageQueuePut+0x82>
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d103      	bne.n	800d156 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800d14e:	f06f 0303 	mvn.w	r3, #3
 800d152:	61fb      	str	r3, [r7, #28]
 800d154:	e012      	b.n	800d17c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d156:	2300      	movs	r3, #0
 800d158:	683a      	ldr	r2, [r7, #0]
 800d15a:	68b9      	ldr	r1, [r7, #8]
 800d15c:	69b8      	ldr	r0, [r7, #24]
 800d15e:	f000 fed1 	bl	800df04 <xQueueGenericSend>
 800d162:	4603      	mov	r3, r0
 800d164:	2b01      	cmp	r3, #1
 800d166:	d009      	beq.n	800d17c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d003      	beq.n	800d176 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800d16e:	f06f 0301 	mvn.w	r3, #1
 800d172:	61fb      	str	r3, [r7, #28]
 800d174:	e002      	b.n	800d17c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800d176:	f06f 0302 	mvn.w	r3, #2
 800d17a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d17c:	69fb      	ldr	r3, [r7, #28]
}
 800d17e:	4618      	mov	r0, r3
 800d180:	3720      	adds	r7, #32
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}
 800d186:	bf00      	nop
 800d188:	e000ed04 	.word	0xe000ed04

0800d18c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b088      	sub	sp, #32
 800d190:	af00      	add	r7, sp, #0
 800d192:	60f8      	str	r0, [r7, #12]
 800d194:	60b9      	str	r1, [r7, #8]
 800d196:	607a      	str	r2, [r7, #4]
 800d198:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d1a2:	f3ef 8305 	mrs	r3, IPSR
 800d1a6:	617b      	str	r3, [r7, #20]
  return(result);
 800d1a8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d028      	beq.n	800d200 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d1ae:	69bb      	ldr	r3, [r7, #24]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d005      	beq.n	800d1c0 <osMessageQueueGet+0x34>
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d002      	beq.n	800d1c0 <osMessageQueueGet+0x34>
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d003      	beq.n	800d1c8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800d1c0:	f06f 0303 	mvn.w	r3, #3
 800d1c4:	61fb      	str	r3, [r7, #28]
 800d1c6:	e037      	b.n	800d238 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d1cc:	f107 0310 	add.w	r3, r7, #16
 800d1d0:	461a      	mov	r2, r3
 800d1d2:	68b9      	ldr	r1, [r7, #8]
 800d1d4:	69b8      	ldr	r0, [r7, #24]
 800d1d6:	f001 f90f 	bl	800e3f8 <xQueueReceiveFromISR>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	2b01      	cmp	r3, #1
 800d1de:	d003      	beq.n	800d1e8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800d1e0:	f06f 0302 	mvn.w	r3, #2
 800d1e4:	61fb      	str	r3, [r7, #28]
 800d1e6:	e027      	b.n	800d238 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d024      	beq.n	800d238 <osMessageQueueGet+0xac>
 800d1ee:	4b15      	ldr	r3, [pc, #84]	; (800d244 <osMessageQueueGet+0xb8>)
 800d1f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1f4:	601a      	str	r2, [r3, #0]
 800d1f6:	f3bf 8f4f 	dsb	sy
 800d1fa:	f3bf 8f6f 	isb	sy
 800d1fe:	e01b      	b.n	800d238 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d200:	69bb      	ldr	r3, [r7, #24]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d002      	beq.n	800d20c <osMessageQueueGet+0x80>
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d103      	bne.n	800d214 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800d20c:	f06f 0303 	mvn.w	r3, #3
 800d210:	61fb      	str	r3, [r7, #28]
 800d212:	e011      	b.n	800d238 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d214:	683a      	ldr	r2, [r7, #0]
 800d216:	68b9      	ldr	r1, [r7, #8]
 800d218:	69b8      	ldr	r0, [r7, #24]
 800d21a:	f001 f80d 	bl	800e238 <xQueueReceive>
 800d21e:	4603      	mov	r3, r0
 800d220:	2b01      	cmp	r3, #1
 800d222:	d009      	beq.n	800d238 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d003      	beq.n	800d232 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800d22a:	f06f 0301 	mvn.w	r3, #1
 800d22e:	61fb      	str	r3, [r7, #28]
 800d230:	e002      	b.n	800d238 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800d232:	f06f 0302 	mvn.w	r3, #2
 800d236:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d238:	69fb      	ldr	r3, [r7, #28]
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	3720      	adds	r7, #32
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	e000ed04 	.word	0xe000ed04

0800d248 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d248:	b480      	push	{r7}
 800d24a:	b085      	sub	sp, #20
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	60f8      	str	r0, [r7, #12]
 800d250:	60b9      	str	r1, [r7, #8]
 800d252:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	4a07      	ldr	r2, [pc, #28]	; (800d274 <vApplicationGetIdleTaskMemory+0x2c>)
 800d258:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	4a06      	ldr	r2, [pc, #24]	; (800d278 <vApplicationGetIdleTaskMemory+0x30>)
 800d25e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2280      	movs	r2, #128	; 0x80
 800d264:	601a      	str	r2, [r3, #0]
}
 800d266:	bf00      	nop
 800d268:	3714      	adds	r7, #20
 800d26a:	46bd      	mov	sp, r7
 800d26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d270:	4770      	bx	lr
 800d272:	bf00      	nop
 800d274:	24000048 	.word	0x24000048
 800d278:	240000a4 	.word	0x240000a4

0800d27c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d27c:	b480      	push	{r7}
 800d27e:	b085      	sub	sp, #20
 800d280:	af00      	add	r7, sp, #0
 800d282:	60f8      	str	r0, [r7, #12]
 800d284:	60b9      	str	r1, [r7, #8]
 800d286:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	4a07      	ldr	r2, [pc, #28]	; (800d2a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800d28c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	4a06      	ldr	r2, [pc, #24]	; (800d2ac <vApplicationGetTimerTaskMemory+0x30>)
 800d292:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d29a:	601a      	str	r2, [r3, #0]
}
 800d29c:	bf00      	nop
 800d29e:	3714      	adds	r7, #20
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a6:	4770      	bx	lr
 800d2a8:	240002a4 	.word	0x240002a4
 800d2ac:	24000300 	.word	0x24000300

0800d2b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b08a      	sub	sp, #40	; 0x28
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d2bc:	f001 fcc6 	bl	800ec4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d2c0:	4b5b      	ldr	r3, [pc, #364]	; (800d430 <pvPortMalloc+0x180>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d101      	bne.n	800d2cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d2c8:	f000 f920 	bl	800d50c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d2cc:	4b59      	ldr	r3, [pc, #356]	; (800d434 <pvPortMalloc+0x184>)
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	4013      	ands	r3, r2
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	f040 8093 	bne.w	800d400 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d01d      	beq.n	800d31c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d2e0:	2208      	movs	r2, #8
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	4413      	add	r3, r2
 800d2e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f003 0307 	and.w	r3, r3, #7
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d014      	beq.n	800d31c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	f023 0307 	bic.w	r3, r3, #7
 800d2f8:	3308      	adds	r3, #8
 800d2fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f003 0307 	and.w	r3, r3, #7
 800d302:	2b00      	cmp	r3, #0
 800d304:	d00a      	beq.n	800d31c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d30a:	f383 8811 	msr	BASEPRI, r3
 800d30e:	f3bf 8f6f 	isb	sy
 800d312:	f3bf 8f4f 	dsb	sy
 800d316:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d318:	bf00      	nop
 800d31a:	e7fe      	b.n	800d31a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d06e      	beq.n	800d400 <pvPortMalloc+0x150>
 800d322:	4b45      	ldr	r3, [pc, #276]	; (800d438 <pvPortMalloc+0x188>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	687a      	ldr	r2, [r7, #4]
 800d328:	429a      	cmp	r2, r3
 800d32a:	d869      	bhi.n	800d400 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d32c:	4b43      	ldr	r3, [pc, #268]	; (800d43c <pvPortMalloc+0x18c>)
 800d32e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d330:	4b42      	ldr	r3, [pc, #264]	; (800d43c <pvPortMalloc+0x18c>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d336:	e004      	b.n	800d342 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d344:	685b      	ldr	r3, [r3, #4]
 800d346:	687a      	ldr	r2, [r7, #4]
 800d348:	429a      	cmp	r2, r3
 800d34a:	d903      	bls.n	800d354 <pvPortMalloc+0xa4>
 800d34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d1f1      	bne.n	800d338 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d354:	4b36      	ldr	r3, [pc, #216]	; (800d430 <pvPortMalloc+0x180>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d050      	beq.n	800d400 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d35e:	6a3b      	ldr	r3, [r7, #32]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	2208      	movs	r2, #8
 800d364:	4413      	add	r3, r2
 800d366:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d36a:	681a      	ldr	r2, [r3, #0]
 800d36c:	6a3b      	ldr	r3, [r7, #32]
 800d36e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d372:	685a      	ldr	r2, [r3, #4]
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	1ad2      	subs	r2, r2, r3
 800d378:	2308      	movs	r3, #8
 800d37a:	005b      	lsls	r3, r3, #1
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d91f      	bls.n	800d3c0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	4413      	add	r3, r2
 800d386:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d388:	69bb      	ldr	r3, [r7, #24]
 800d38a:	f003 0307 	and.w	r3, r3, #7
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d00a      	beq.n	800d3a8 <pvPortMalloc+0xf8>
	__asm volatile
 800d392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d396:	f383 8811 	msr	BASEPRI, r3
 800d39a:	f3bf 8f6f 	isb	sy
 800d39e:	f3bf 8f4f 	dsb	sy
 800d3a2:	613b      	str	r3, [r7, #16]
}
 800d3a4:	bf00      	nop
 800d3a6:	e7fe      	b.n	800d3a6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3aa:	685a      	ldr	r2, [r3, #4]
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	1ad2      	subs	r2, r2, r3
 800d3b0:	69bb      	ldr	r3, [r7, #24]
 800d3b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b6:	687a      	ldr	r2, [r7, #4]
 800d3b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d3ba:	69b8      	ldr	r0, [r7, #24]
 800d3bc:	f000 f908 	bl	800d5d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d3c0:	4b1d      	ldr	r3, [pc, #116]	; (800d438 <pvPortMalloc+0x188>)
 800d3c2:	681a      	ldr	r2, [r3, #0]
 800d3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c6:	685b      	ldr	r3, [r3, #4]
 800d3c8:	1ad3      	subs	r3, r2, r3
 800d3ca:	4a1b      	ldr	r2, [pc, #108]	; (800d438 <pvPortMalloc+0x188>)
 800d3cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d3ce:	4b1a      	ldr	r3, [pc, #104]	; (800d438 <pvPortMalloc+0x188>)
 800d3d0:	681a      	ldr	r2, [r3, #0]
 800d3d2:	4b1b      	ldr	r3, [pc, #108]	; (800d440 <pvPortMalloc+0x190>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d203      	bcs.n	800d3e2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d3da:	4b17      	ldr	r3, [pc, #92]	; (800d438 <pvPortMalloc+0x188>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	4a18      	ldr	r2, [pc, #96]	; (800d440 <pvPortMalloc+0x190>)
 800d3e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e4:	685a      	ldr	r2, [r3, #4]
 800d3e6:	4b13      	ldr	r3, [pc, #76]	; (800d434 <pvPortMalloc+0x184>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	431a      	orrs	r2, r3
 800d3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d3f6:	4b13      	ldr	r3, [pc, #76]	; (800d444 <pvPortMalloc+0x194>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	3301      	adds	r3, #1
 800d3fc:	4a11      	ldr	r2, [pc, #68]	; (800d444 <pvPortMalloc+0x194>)
 800d3fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d400:	f001 fc32 	bl	800ec68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d404:	69fb      	ldr	r3, [r7, #28]
 800d406:	f003 0307 	and.w	r3, r3, #7
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d00a      	beq.n	800d424 <pvPortMalloc+0x174>
	__asm volatile
 800d40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d412:	f383 8811 	msr	BASEPRI, r3
 800d416:	f3bf 8f6f 	isb	sy
 800d41a:	f3bf 8f4f 	dsb	sy
 800d41e:	60fb      	str	r3, [r7, #12]
}
 800d420:	bf00      	nop
 800d422:	e7fe      	b.n	800d422 <pvPortMalloc+0x172>
	return pvReturn;
 800d424:	69fb      	ldr	r3, [r7, #28]
}
 800d426:	4618      	mov	r0, r3
 800d428:	3728      	adds	r7, #40	; 0x28
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd80      	pop	{r7, pc}
 800d42e:	bf00      	nop
 800d430:	24004308 	.word	0x24004308
 800d434:	2400431c 	.word	0x2400431c
 800d438:	2400430c 	.word	0x2400430c
 800d43c:	24004300 	.word	0x24004300
 800d440:	24004310 	.word	0x24004310
 800d444:	24004314 	.word	0x24004314

0800d448 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b086      	sub	sp, #24
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d04d      	beq.n	800d4f6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d45a:	2308      	movs	r3, #8
 800d45c:	425b      	negs	r3, r3
 800d45e:	697a      	ldr	r2, [r7, #20]
 800d460:	4413      	add	r3, r2
 800d462:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	685a      	ldr	r2, [r3, #4]
 800d46c:	4b24      	ldr	r3, [pc, #144]	; (800d500 <vPortFree+0xb8>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	4013      	ands	r3, r2
 800d472:	2b00      	cmp	r3, #0
 800d474:	d10a      	bne.n	800d48c <vPortFree+0x44>
	__asm volatile
 800d476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d47a:	f383 8811 	msr	BASEPRI, r3
 800d47e:	f3bf 8f6f 	isb	sy
 800d482:	f3bf 8f4f 	dsb	sy
 800d486:	60fb      	str	r3, [r7, #12]
}
 800d488:	bf00      	nop
 800d48a:	e7fe      	b.n	800d48a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d00a      	beq.n	800d4aa <vPortFree+0x62>
	__asm volatile
 800d494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d498:	f383 8811 	msr	BASEPRI, r3
 800d49c:	f3bf 8f6f 	isb	sy
 800d4a0:	f3bf 8f4f 	dsb	sy
 800d4a4:	60bb      	str	r3, [r7, #8]
}
 800d4a6:	bf00      	nop
 800d4a8:	e7fe      	b.n	800d4a8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	685a      	ldr	r2, [r3, #4]
 800d4ae:	4b14      	ldr	r3, [pc, #80]	; (800d500 <vPortFree+0xb8>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	4013      	ands	r3, r2
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d01e      	beq.n	800d4f6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d4b8:	693b      	ldr	r3, [r7, #16]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d11a      	bne.n	800d4f6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	685a      	ldr	r2, [r3, #4]
 800d4c4:	4b0e      	ldr	r3, [pc, #56]	; (800d500 <vPortFree+0xb8>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	43db      	mvns	r3, r3
 800d4ca:	401a      	ands	r2, r3
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d4d0:	f001 fbbc 	bl	800ec4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	685a      	ldr	r2, [r3, #4]
 800d4d8:	4b0a      	ldr	r3, [pc, #40]	; (800d504 <vPortFree+0xbc>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	4413      	add	r3, r2
 800d4de:	4a09      	ldr	r2, [pc, #36]	; (800d504 <vPortFree+0xbc>)
 800d4e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d4e2:	6938      	ldr	r0, [r7, #16]
 800d4e4:	f000 f874 	bl	800d5d0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d4e8:	4b07      	ldr	r3, [pc, #28]	; (800d508 <vPortFree+0xc0>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	3301      	adds	r3, #1
 800d4ee:	4a06      	ldr	r2, [pc, #24]	; (800d508 <vPortFree+0xc0>)
 800d4f0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d4f2:	f001 fbb9 	bl	800ec68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d4f6:	bf00      	nop
 800d4f8:	3718      	adds	r7, #24
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}
 800d4fe:	bf00      	nop
 800d500:	2400431c 	.word	0x2400431c
 800d504:	2400430c 	.word	0x2400430c
 800d508:	24004318 	.word	0x24004318

0800d50c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d50c:	b480      	push	{r7}
 800d50e:	b085      	sub	sp, #20
 800d510:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d512:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d516:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d518:	4b27      	ldr	r3, [pc, #156]	; (800d5b8 <prvHeapInit+0xac>)
 800d51a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	f003 0307 	and.w	r3, r3, #7
 800d522:	2b00      	cmp	r3, #0
 800d524:	d00c      	beq.n	800d540 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	3307      	adds	r3, #7
 800d52a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	f023 0307 	bic.w	r3, r3, #7
 800d532:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d534:	68ba      	ldr	r2, [r7, #8]
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	1ad3      	subs	r3, r2, r3
 800d53a:	4a1f      	ldr	r2, [pc, #124]	; (800d5b8 <prvHeapInit+0xac>)
 800d53c:	4413      	add	r3, r2
 800d53e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d544:	4a1d      	ldr	r2, [pc, #116]	; (800d5bc <prvHeapInit+0xb0>)
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d54a:	4b1c      	ldr	r3, [pc, #112]	; (800d5bc <prvHeapInit+0xb0>)
 800d54c:	2200      	movs	r2, #0
 800d54e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	68ba      	ldr	r2, [r7, #8]
 800d554:	4413      	add	r3, r2
 800d556:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d558:	2208      	movs	r2, #8
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	1a9b      	subs	r3, r3, r2
 800d55e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	f023 0307 	bic.w	r3, r3, #7
 800d566:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	4a15      	ldr	r2, [pc, #84]	; (800d5c0 <prvHeapInit+0xb4>)
 800d56c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d56e:	4b14      	ldr	r3, [pc, #80]	; (800d5c0 <prvHeapInit+0xb4>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	2200      	movs	r2, #0
 800d574:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d576:	4b12      	ldr	r3, [pc, #72]	; (800d5c0 <prvHeapInit+0xb4>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	2200      	movs	r2, #0
 800d57c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	68fa      	ldr	r2, [r7, #12]
 800d586:	1ad2      	subs	r2, r2, r3
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d58c:	4b0c      	ldr	r3, [pc, #48]	; (800d5c0 <prvHeapInit+0xb4>)
 800d58e:	681a      	ldr	r2, [r3, #0]
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	685b      	ldr	r3, [r3, #4]
 800d598:	4a0a      	ldr	r2, [pc, #40]	; (800d5c4 <prvHeapInit+0xb8>)
 800d59a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	685b      	ldr	r3, [r3, #4]
 800d5a0:	4a09      	ldr	r2, [pc, #36]	; (800d5c8 <prvHeapInit+0xbc>)
 800d5a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d5a4:	4b09      	ldr	r3, [pc, #36]	; (800d5cc <prvHeapInit+0xc0>)
 800d5a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d5aa:	601a      	str	r2, [r3, #0]
}
 800d5ac:	bf00      	nop
 800d5ae:	3714      	adds	r7, #20
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b6:	4770      	bx	lr
 800d5b8:	24000700 	.word	0x24000700
 800d5bc:	24004300 	.word	0x24004300
 800d5c0:	24004308 	.word	0x24004308
 800d5c4:	24004310 	.word	0x24004310
 800d5c8:	2400430c 	.word	0x2400430c
 800d5cc:	2400431c 	.word	0x2400431c

0800d5d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b085      	sub	sp, #20
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d5d8:	4b28      	ldr	r3, [pc, #160]	; (800d67c <prvInsertBlockIntoFreeList+0xac>)
 800d5da:	60fb      	str	r3, [r7, #12]
 800d5dc:	e002      	b.n	800d5e4 <prvInsertBlockIntoFreeList+0x14>
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	60fb      	str	r3, [r7, #12]
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	687a      	ldr	r2, [r7, #4]
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d8f7      	bhi.n	800d5de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	685b      	ldr	r3, [r3, #4]
 800d5f6:	68ba      	ldr	r2, [r7, #8]
 800d5f8:	4413      	add	r3, r2
 800d5fa:	687a      	ldr	r2, [r7, #4]
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d108      	bne.n	800d612 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	685a      	ldr	r2, [r3, #4]
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	685b      	ldr	r3, [r3, #4]
 800d608:	441a      	add	r2, r3
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	685b      	ldr	r3, [r3, #4]
 800d61a:	68ba      	ldr	r2, [r7, #8]
 800d61c:	441a      	add	r2, r3
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	429a      	cmp	r2, r3
 800d624:	d118      	bne.n	800d658 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	681a      	ldr	r2, [r3, #0]
 800d62a:	4b15      	ldr	r3, [pc, #84]	; (800d680 <prvInsertBlockIntoFreeList+0xb0>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	429a      	cmp	r2, r3
 800d630:	d00d      	beq.n	800d64e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	685a      	ldr	r2, [r3, #4]
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	685b      	ldr	r3, [r3, #4]
 800d63c:	441a      	add	r2, r3
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	681a      	ldr	r2, [r3, #0]
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	601a      	str	r2, [r3, #0]
 800d64c:	e008      	b.n	800d660 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d64e:	4b0c      	ldr	r3, [pc, #48]	; (800d680 <prvInsertBlockIntoFreeList+0xb0>)
 800d650:	681a      	ldr	r2, [r3, #0]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	601a      	str	r2, [r3, #0]
 800d656:	e003      	b.n	800d660 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	681a      	ldr	r2, [r3, #0]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d660:	68fa      	ldr	r2, [r7, #12]
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	429a      	cmp	r2, r3
 800d666:	d002      	beq.n	800d66e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	687a      	ldr	r2, [r7, #4]
 800d66c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d66e:	bf00      	nop
 800d670:	3714      	adds	r7, #20
 800d672:	46bd      	mov	sp, r7
 800d674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d678:	4770      	bx	lr
 800d67a:	bf00      	nop
 800d67c:	24004300 	.word	0x24004300
 800d680:	24004308 	.word	0x24004308

0800d684 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d684:	b480      	push	{r7}
 800d686:	b083      	sub	sp, #12
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f103 0208 	add.w	r2, r3, #8
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	f04f 32ff 	mov.w	r2, #4294967295
 800d69c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f103 0208 	add.w	r2, r3, #8
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f103 0208 	add.w	r2, r3, #8
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d6b8:	bf00      	nop
 800d6ba:	370c      	adds	r7, #12
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c2:	4770      	bx	lr

0800d6c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d6c4:	b480      	push	{r7}
 800d6c6:	b083      	sub	sp, #12
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d6d2:	bf00      	nop
 800d6d4:	370c      	adds	r7, #12
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6dc:	4770      	bx	lr

0800d6de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d6de:	b480      	push	{r7}
 800d6e0:	b085      	sub	sp, #20
 800d6e2:	af00      	add	r7, sp, #0
 800d6e4:	6078      	str	r0, [r7, #4]
 800d6e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	68fa      	ldr	r2, [r7, #12]
 800d6f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	689a      	ldr	r2, [r3, #8]
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	689b      	ldr	r3, [r3, #8]
 800d700:	683a      	ldr	r2, [r7, #0]
 800d702:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	683a      	ldr	r2, [r7, #0]
 800d708:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	687a      	ldr	r2, [r7, #4]
 800d70e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	1c5a      	adds	r2, r3, #1
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	601a      	str	r2, [r3, #0]
}
 800d71a:	bf00      	nop
 800d71c:	3714      	adds	r7, #20
 800d71e:	46bd      	mov	sp, r7
 800d720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d724:	4770      	bx	lr

0800d726 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d726:	b480      	push	{r7}
 800d728:	b085      	sub	sp, #20
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	6078      	str	r0, [r7, #4]
 800d72e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d73c:	d103      	bne.n	800d746 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	691b      	ldr	r3, [r3, #16]
 800d742:	60fb      	str	r3, [r7, #12]
 800d744:	e00c      	b.n	800d760 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	3308      	adds	r3, #8
 800d74a:	60fb      	str	r3, [r7, #12]
 800d74c:	e002      	b.n	800d754 <vListInsert+0x2e>
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	685b      	ldr	r3, [r3, #4]
 800d752:	60fb      	str	r3, [r7, #12]
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	685b      	ldr	r3, [r3, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	68ba      	ldr	r2, [r7, #8]
 800d75c:	429a      	cmp	r2, r3
 800d75e:	d2f6      	bcs.n	800d74e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	685a      	ldr	r2, [r3, #4]
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	685b      	ldr	r3, [r3, #4]
 800d76c:	683a      	ldr	r2, [r7, #0]
 800d76e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	68fa      	ldr	r2, [r7, #12]
 800d774:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	683a      	ldr	r2, [r7, #0]
 800d77a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	687a      	ldr	r2, [r7, #4]
 800d780:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	1c5a      	adds	r2, r3, #1
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	601a      	str	r2, [r3, #0]
}
 800d78c:	bf00      	nop
 800d78e:	3714      	adds	r7, #20
 800d790:	46bd      	mov	sp, r7
 800d792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d796:	4770      	bx	lr

0800d798 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d798:	b480      	push	{r7}
 800d79a:	b085      	sub	sp, #20
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	691b      	ldr	r3, [r3, #16]
 800d7a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	685b      	ldr	r3, [r3, #4]
 800d7aa:	687a      	ldr	r2, [r7, #4]
 800d7ac:	6892      	ldr	r2, [r2, #8]
 800d7ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	689b      	ldr	r3, [r3, #8]
 800d7b4:	687a      	ldr	r2, [r7, #4]
 800d7b6:	6852      	ldr	r2, [r2, #4]
 800d7b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	685b      	ldr	r3, [r3, #4]
 800d7be:	687a      	ldr	r2, [r7, #4]
 800d7c0:	429a      	cmp	r2, r3
 800d7c2:	d103      	bne.n	800d7cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	689a      	ldr	r2, [r3, #8]
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	1e5a      	subs	r2, r3, #1
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	681b      	ldr	r3, [r3, #0]
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3714      	adds	r7, #20
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ea:	4770      	bx	lr

0800d7ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d7ec:	b480      	push	{r7}
 800d7ee:	b085      	sub	sp, #20
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	60f8      	str	r0, [r7, #12]
 800d7f4:	60b9      	str	r1, [r7, #8]
 800d7f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	3b04      	subs	r3, #4
 800d7fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d804:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	3b04      	subs	r3, #4
 800d80a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	f023 0201 	bic.w	r2, r3, #1
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	3b04      	subs	r3, #4
 800d81a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d81c:	4a0c      	ldr	r2, [pc, #48]	; (800d850 <pxPortInitialiseStack+0x64>)
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	3b14      	subs	r3, #20
 800d826:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d828:	687a      	ldr	r2, [r7, #4]
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	3b04      	subs	r3, #4
 800d832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	f06f 0202 	mvn.w	r2, #2
 800d83a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	3b20      	subs	r3, #32
 800d840:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d842:	68fb      	ldr	r3, [r7, #12]
}
 800d844:	4618      	mov	r0, r3
 800d846:	3714      	adds	r7, #20
 800d848:	46bd      	mov	sp, r7
 800d84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84e:	4770      	bx	lr
 800d850:	0800d855 	.word	0x0800d855

0800d854 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d854:	b480      	push	{r7}
 800d856:	b085      	sub	sp, #20
 800d858:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d85a:	2300      	movs	r3, #0
 800d85c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d85e:	4b12      	ldr	r3, [pc, #72]	; (800d8a8 <prvTaskExitError+0x54>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d866:	d00a      	beq.n	800d87e <prvTaskExitError+0x2a>
	__asm volatile
 800d868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d86c:	f383 8811 	msr	BASEPRI, r3
 800d870:	f3bf 8f6f 	isb	sy
 800d874:	f3bf 8f4f 	dsb	sy
 800d878:	60fb      	str	r3, [r7, #12]
}
 800d87a:	bf00      	nop
 800d87c:	e7fe      	b.n	800d87c <prvTaskExitError+0x28>
	__asm volatile
 800d87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d882:	f383 8811 	msr	BASEPRI, r3
 800d886:	f3bf 8f6f 	isb	sy
 800d88a:	f3bf 8f4f 	dsb	sy
 800d88e:	60bb      	str	r3, [r7, #8]
}
 800d890:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d892:	bf00      	nop
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d0fc      	beq.n	800d894 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d89a:	bf00      	nop
 800d89c:	bf00      	nop
 800d89e:	3714      	adds	r7, #20
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a6:	4770      	bx	lr
 800d8a8:	24000020 	.word	0x24000020
 800d8ac:	00000000 	.word	0x00000000

0800d8b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d8b0:	4b07      	ldr	r3, [pc, #28]	; (800d8d0 <pxCurrentTCBConst2>)
 800d8b2:	6819      	ldr	r1, [r3, #0]
 800d8b4:	6808      	ldr	r0, [r1, #0]
 800d8b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8ba:	f380 8809 	msr	PSP, r0
 800d8be:	f3bf 8f6f 	isb	sy
 800d8c2:	f04f 0000 	mov.w	r0, #0
 800d8c6:	f380 8811 	msr	BASEPRI, r0
 800d8ca:	4770      	bx	lr
 800d8cc:	f3af 8000 	nop.w

0800d8d0 <pxCurrentTCBConst2>:
 800d8d0:	24004328 	.word	0x24004328
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d8d4:	bf00      	nop
 800d8d6:	bf00      	nop

0800d8d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d8d8:	4808      	ldr	r0, [pc, #32]	; (800d8fc <prvPortStartFirstTask+0x24>)
 800d8da:	6800      	ldr	r0, [r0, #0]
 800d8dc:	6800      	ldr	r0, [r0, #0]
 800d8de:	f380 8808 	msr	MSP, r0
 800d8e2:	f04f 0000 	mov.w	r0, #0
 800d8e6:	f380 8814 	msr	CONTROL, r0
 800d8ea:	b662      	cpsie	i
 800d8ec:	b661      	cpsie	f
 800d8ee:	f3bf 8f4f 	dsb	sy
 800d8f2:	f3bf 8f6f 	isb	sy
 800d8f6:	df00      	svc	0
 800d8f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d8fa:	bf00      	nop
 800d8fc:	e000ed08 	.word	0xe000ed08

0800d900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b086      	sub	sp, #24
 800d904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d906:	4b46      	ldr	r3, [pc, #280]	; (800da20 <xPortStartScheduler+0x120>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	4a46      	ldr	r2, [pc, #280]	; (800da24 <xPortStartScheduler+0x124>)
 800d90c:	4293      	cmp	r3, r2
 800d90e:	d10a      	bne.n	800d926 <xPortStartScheduler+0x26>
	__asm volatile
 800d910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d914:	f383 8811 	msr	BASEPRI, r3
 800d918:	f3bf 8f6f 	isb	sy
 800d91c:	f3bf 8f4f 	dsb	sy
 800d920:	613b      	str	r3, [r7, #16]
}
 800d922:	bf00      	nop
 800d924:	e7fe      	b.n	800d924 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d926:	4b3e      	ldr	r3, [pc, #248]	; (800da20 <xPortStartScheduler+0x120>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	4a3f      	ldr	r2, [pc, #252]	; (800da28 <xPortStartScheduler+0x128>)
 800d92c:	4293      	cmp	r3, r2
 800d92e:	d10a      	bne.n	800d946 <xPortStartScheduler+0x46>
	__asm volatile
 800d930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d934:	f383 8811 	msr	BASEPRI, r3
 800d938:	f3bf 8f6f 	isb	sy
 800d93c:	f3bf 8f4f 	dsb	sy
 800d940:	60fb      	str	r3, [r7, #12]
}
 800d942:	bf00      	nop
 800d944:	e7fe      	b.n	800d944 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d946:	4b39      	ldr	r3, [pc, #228]	; (800da2c <xPortStartScheduler+0x12c>)
 800d948:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	b2db      	uxtb	r3, r3
 800d950:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	22ff      	movs	r2, #255	; 0xff
 800d956:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	b2db      	uxtb	r3, r3
 800d95e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d960:	78fb      	ldrb	r3, [r7, #3]
 800d962:	b2db      	uxtb	r3, r3
 800d964:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d968:	b2da      	uxtb	r2, r3
 800d96a:	4b31      	ldr	r3, [pc, #196]	; (800da30 <xPortStartScheduler+0x130>)
 800d96c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d96e:	4b31      	ldr	r3, [pc, #196]	; (800da34 <xPortStartScheduler+0x134>)
 800d970:	2207      	movs	r2, #7
 800d972:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d974:	e009      	b.n	800d98a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d976:	4b2f      	ldr	r3, [pc, #188]	; (800da34 <xPortStartScheduler+0x134>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	3b01      	subs	r3, #1
 800d97c:	4a2d      	ldr	r2, [pc, #180]	; (800da34 <xPortStartScheduler+0x134>)
 800d97e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d980:	78fb      	ldrb	r3, [r7, #3]
 800d982:	b2db      	uxtb	r3, r3
 800d984:	005b      	lsls	r3, r3, #1
 800d986:	b2db      	uxtb	r3, r3
 800d988:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d98a:	78fb      	ldrb	r3, [r7, #3]
 800d98c:	b2db      	uxtb	r3, r3
 800d98e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d992:	2b80      	cmp	r3, #128	; 0x80
 800d994:	d0ef      	beq.n	800d976 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d996:	4b27      	ldr	r3, [pc, #156]	; (800da34 <xPortStartScheduler+0x134>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f1c3 0307 	rsb	r3, r3, #7
 800d99e:	2b04      	cmp	r3, #4
 800d9a0:	d00a      	beq.n	800d9b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9a6:	f383 8811 	msr	BASEPRI, r3
 800d9aa:	f3bf 8f6f 	isb	sy
 800d9ae:	f3bf 8f4f 	dsb	sy
 800d9b2:	60bb      	str	r3, [r7, #8]
}
 800d9b4:	bf00      	nop
 800d9b6:	e7fe      	b.n	800d9b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d9b8:	4b1e      	ldr	r3, [pc, #120]	; (800da34 <xPortStartScheduler+0x134>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	021b      	lsls	r3, r3, #8
 800d9be:	4a1d      	ldr	r2, [pc, #116]	; (800da34 <xPortStartScheduler+0x134>)
 800d9c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d9c2:	4b1c      	ldr	r3, [pc, #112]	; (800da34 <xPortStartScheduler+0x134>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d9ca:	4a1a      	ldr	r2, [pc, #104]	; (800da34 <xPortStartScheduler+0x134>)
 800d9cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	b2da      	uxtb	r2, r3
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d9d6:	4b18      	ldr	r3, [pc, #96]	; (800da38 <xPortStartScheduler+0x138>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	4a17      	ldr	r2, [pc, #92]	; (800da38 <xPortStartScheduler+0x138>)
 800d9dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d9e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d9e2:	4b15      	ldr	r3, [pc, #84]	; (800da38 <xPortStartScheduler+0x138>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	4a14      	ldr	r2, [pc, #80]	; (800da38 <xPortStartScheduler+0x138>)
 800d9e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d9ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d9ee:	f000 f8dd 	bl	800dbac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d9f2:	4b12      	ldr	r3, [pc, #72]	; (800da3c <xPortStartScheduler+0x13c>)
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d9f8:	f000 f8fc 	bl	800dbf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d9fc:	4b10      	ldr	r3, [pc, #64]	; (800da40 <xPortStartScheduler+0x140>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4a0f      	ldr	r2, [pc, #60]	; (800da40 <xPortStartScheduler+0x140>)
 800da02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800da06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800da08:	f7ff ff66 	bl	800d8d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800da0c:	f001 fa94 	bl	800ef38 <vTaskSwitchContext>
	prvTaskExitError();
 800da10:	f7ff ff20 	bl	800d854 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800da14:	2300      	movs	r3, #0
}
 800da16:	4618      	mov	r0, r3
 800da18:	3718      	adds	r7, #24
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	e000ed00 	.word	0xe000ed00
 800da24:	410fc271 	.word	0x410fc271
 800da28:	410fc270 	.word	0x410fc270
 800da2c:	e000e400 	.word	0xe000e400
 800da30:	24004320 	.word	0x24004320
 800da34:	24004324 	.word	0x24004324
 800da38:	e000ed20 	.word	0xe000ed20
 800da3c:	24000020 	.word	0x24000020
 800da40:	e000ef34 	.word	0xe000ef34

0800da44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800da44:	b480      	push	{r7}
 800da46:	b083      	sub	sp, #12
 800da48:	af00      	add	r7, sp, #0
	__asm volatile
 800da4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da4e:	f383 8811 	msr	BASEPRI, r3
 800da52:	f3bf 8f6f 	isb	sy
 800da56:	f3bf 8f4f 	dsb	sy
 800da5a:	607b      	str	r3, [r7, #4]
}
 800da5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800da5e:	4b0f      	ldr	r3, [pc, #60]	; (800da9c <vPortEnterCritical+0x58>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	3301      	adds	r3, #1
 800da64:	4a0d      	ldr	r2, [pc, #52]	; (800da9c <vPortEnterCritical+0x58>)
 800da66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800da68:	4b0c      	ldr	r3, [pc, #48]	; (800da9c <vPortEnterCritical+0x58>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d10f      	bne.n	800da90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800da70:	4b0b      	ldr	r3, [pc, #44]	; (800daa0 <vPortEnterCritical+0x5c>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	b2db      	uxtb	r3, r3
 800da76:	2b00      	cmp	r3, #0
 800da78:	d00a      	beq.n	800da90 <vPortEnterCritical+0x4c>
	__asm volatile
 800da7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da7e:	f383 8811 	msr	BASEPRI, r3
 800da82:	f3bf 8f6f 	isb	sy
 800da86:	f3bf 8f4f 	dsb	sy
 800da8a:	603b      	str	r3, [r7, #0]
}
 800da8c:	bf00      	nop
 800da8e:	e7fe      	b.n	800da8e <vPortEnterCritical+0x4a>
	}
}
 800da90:	bf00      	nop
 800da92:	370c      	adds	r7, #12
 800da94:	46bd      	mov	sp, r7
 800da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9a:	4770      	bx	lr
 800da9c:	24000020 	.word	0x24000020
 800daa0:	e000ed04 	.word	0xe000ed04

0800daa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800daa4:	b480      	push	{r7}
 800daa6:	b083      	sub	sp, #12
 800daa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800daaa:	4b12      	ldr	r3, [pc, #72]	; (800daf4 <vPortExitCritical+0x50>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d10a      	bne.n	800dac8 <vPortExitCritical+0x24>
	__asm volatile
 800dab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab6:	f383 8811 	msr	BASEPRI, r3
 800daba:	f3bf 8f6f 	isb	sy
 800dabe:	f3bf 8f4f 	dsb	sy
 800dac2:	607b      	str	r3, [r7, #4]
}
 800dac4:	bf00      	nop
 800dac6:	e7fe      	b.n	800dac6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dac8:	4b0a      	ldr	r3, [pc, #40]	; (800daf4 <vPortExitCritical+0x50>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	3b01      	subs	r3, #1
 800dace:	4a09      	ldr	r2, [pc, #36]	; (800daf4 <vPortExitCritical+0x50>)
 800dad0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dad2:	4b08      	ldr	r3, [pc, #32]	; (800daf4 <vPortExitCritical+0x50>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d105      	bne.n	800dae6 <vPortExitCritical+0x42>
 800dada:	2300      	movs	r3, #0
 800dadc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dae4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dae6:	bf00      	nop
 800dae8:	370c      	adds	r7, #12
 800daea:	46bd      	mov	sp, r7
 800daec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf0:	4770      	bx	lr
 800daf2:	bf00      	nop
 800daf4:	24000020 	.word	0x24000020
	...

0800db00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800db00:	f3ef 8009 	mrs	r0, PSP
 800db04:	f3bf 8f6f 	isb	sy
 800db08:	4b15      	ldr	r3, [pc, #84]	; (800db60 <pxCurrentTCBConst>)
 800db0a:	681a      	ldr	r2, [r3, #0]
 800db0c:	f01e 0f10 	tst.w	lr, #16
 800db10:	bf08      	it	eq
 800db12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800db16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db1a:	6010      	str	r0, [r2, #0]
 800db1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800db20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800db24:	f380 8811 	msr	BASEPRI, r0
 800db28:	f3bf 8f4f 	dsb	sy
 800db2c:	f3bf 8f6f 	isb	sy
 800db30:	f001 fa02 	bl	800ef38 <vTaskSwitchContext>
 800db34:	f04f 0000 	mov.w	r0, #0
 800db38:	f380 8811 	msr	BASEPRI, r0
 800db3c:	bc09      	pop	{r0, r3}
 800db3e:	6819      	ldr	r1, [r3, #0]
 800db40:	6808      	ldr	r0, [r1, #0]
 800db42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db46:	f01e 0f10 	tst.w	lr, #16
 800db4a:	bf08      	it	eq
 800db4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800db50:	f380 8809 	msr	PSP, r0
 800db54:	f3bf 8f6f 	isb	sy
 800db58:	4770      	bx	lr
 800db5a:	bf00      	nop
 800db5c:	f3af 8000 	nop.w

0800db60 <pxCurrentTCBConst>:
 800db60:	24004328 	.word	0x24004328
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800db64:	bf00      	nop
 800db66:	bf00      	nop

0800db68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b082      	sub	sp, #8
 800db6c:	af00      	add	r7, sp, #0
	__asm volatile
 800db6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db72:	f383 8811 	msr	BASEPRI, r3
 800db76:	f3bf 8f6f 	isb	sy
 800db7a:	f3bf 8f4f 	dsb	sy
 800db7e:	607b      	str	r3, [r7, #4]
}
 800db80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800db82:	f001 f91f 	bl	800edc4 <xTaskIncrementTick>
 800db86:	4603      	mov	r3, r0
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d003      	beq.n	800db94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800db8c:	4b06      	ldr	r3, [pc, #24]	; (800dba8 <xPortSysTickHandler+0x40>)
 800db8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db92:	601a      	str	r2, [r3, #0]
 800db94:	2300      	movs	r3, #0
 800db96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	f383 8811 	msr	BASEPRI, r3
}
 800db9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dba0:	bf00      	nop
 800dba2:	3708      	adds	r7, #8
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}
 800dba8:	e000ed04 	.word	0xe000ed04

0800dbac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dbac:	b480      	push	{r7}
 800dbae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dbb0:	4b0b      	ldr	r3, [pc, #44]	; (800dbe0 <vPortSetupTimerInterrupt+0x34>)
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dbb6:	4b0b      	ldr	r3, [pc, #44]	; (800dbe4 <vPortSetupTimerInterrupt+0x38>)
 800dbb8:	2200      	movs	r2, #0
 800dbba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dbbc:	4b0a      	ldr	r3, [pc, #40]	; (800dbe8 <vPortSetupTimerInterrupt+0x3c>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	4a0a      	ldr	r2, [pc, #40]	; (800dbec <vPortSetupTimerInterrupt+0x40>)
 800dbc2:	fba2 2303 	umull	r2, r3, r2, r3
 800dbc6:	099b      	lsrs	r3, r3, #6
 800dbc8:	4a09      	ldr	r2, [pc, #36]	; (800dbf0 <vPortSetupTimerInterrupt+0x44>)
 800dbca:	3b01      	subs	r3, #1
 800dbcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dbce:	4b04      	ldr	r3, [pc, #16]	; (800dbe0 <vPortSetupTimerInterrupt+0x34>)
 800dbd0:	2207      	movs	r2, #7
 800dbd2:	601a      	str	r2, [r3, #0]
}
 800dbd4:	bf00      	nop
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbdc:	4770      	bx	lr
 800dbde:	bf00      	nop
 800dbe0:	e000e010 	.word	0xe000e010
 800dbe4:	e000e018 	.word	0xe000e018
 800dbe8:	24000000 	.word	0x24000000
 800dbec:	10624dd3 	.word	0x10624dd3
 800dbf0:	e000e014 	.word	0xe000e014

0800dbf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dbf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dc04 <vPortEnableVFP+0x10>
 800dbf8:	6801      	ldr	r1, [r0, #0]
 800dbfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dbfe:	6001      	str	r1, [r0, #0]
 800dc00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dc02:	bf00      	nop
 800dc04:	e000ed88 	.word	0xe000ed88

0800dc08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dc08:	b480      	push	{r7}
 800dc0a:	b085      	sub	sp, #20
 800dc0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dc0e:	f3ef 8305 	mrs	r3, IPSR
 800dc12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	2b0f      	cmp	r3, #15
 800dc18:	d914      	bls.n	800dc44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dc1a:	4a17      	ldr	r2, [pc, #92]	; (800dc78 <vPortValidateInterruptPriority+0x70>)
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	4413      	add	r3, r2
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dc24:	4b15      	ldr	r3, [pc, #84]	; (800dc7c <vPortValidateInterruptPriority+0x74>)
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	7afa      	ldrb	r2, [r7, #11]
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d20a      	bcs.n	800dc44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800dc2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc32:	f383 8811 	msr	BASEPRI, r3
 800dc36:	f3bf 8f6f 	isb	sy
 800dc3a:	f3bf 8f4f 	dsb	sy
 800dc3e:	607b      	str	r3, [r7, #4]
}
 800dc40:	bf00      	nop
 800dc42:	e7fe      	b.n	800dc42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dc44:	4b0e      	ldr	r3, [pc, #56]	; (800dc80 <vPortValidateInterruptPriority+0x78>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dc4c:	4b0d      	ldr	r3, [pc, #52]	; (800dc84 <vPortValidateInterruptPriority+0x7c>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	429a      	cmp	r2, r3
 800dc52:	d90a      	bls.n	800dc6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800dc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc58:	f383 8811 	msr	BASEPRI, r3
 800dc5c:	f3bf 8f6f 	isb	sy
 800dc60:	f3bf 8f4f 	dsb	sy
 800dc64:	603b      	str	r3, [r7, #0]
}
 800dc66:	bf00      	nop
 800dc68:	e7fe      	b.n	800dc68 <vPortValidateInterruptPriority+0x60>
	}
 800dc6a:	bf00      	nop
 800dc6c:	3714      	adds	r7, #20
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc74:	4770      	bx	lr
 800dc76:	bf00      	nop
 800dc78:	e000e3f0 	.word	0xe000e3f0
 800dc7c:	24004320 	.word	0x24004320
 800dc80:	e000ed0c 	.word	0xe000ed0c
 800dc84:	24004324 	.word	0x24004324

0800dc88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b084      	sub	sp, #16
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d10a      	bne.n	800dcb2 <xQueueGenericReset+0x2a>
	__asm volatile
 800dc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca0:	f383 8811 	msr	BASEPRI, r3
 800dca4:	f3bf 8f6f 	isb	sy
 800dca8:	f3bf 8f4f 	dsb	sy
 800dcac:	60bb      	str	r3, [r7, #8]
}
 800dcae:	bf00      	nop
 800dcb0:	e7fe      	b.n	800dcb0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800dcb2:	f7ff fec7 	bl	800da44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	681a      	ldr	r2, [r3, #0]
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcbe:	68f9      	ldr	r1, [r7, #12]
 800dcc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dcc2:	fb01 f303 	mul.w	r3, r1, r3
 800dcc6:	441a      	add	r2, r3
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	2200      	movs	r2, #0
 800dcd0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	681a      	ldr	r2, [r3, #0]
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	681a      	ldr	r2, [r3, #0]
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dce2:	3b01      	subs	r3, #1
 800dce4:	68f9      	ldr	r1, [r7, #12]
 800dce6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dce8:	fb01 f303 	mul.w	r3, r1, r3
 800dcec:	441a      	add	r2, r3
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	22ff      	movs	r2, #255	; 0xff
 800dcf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	22ff      	movs	r2, #255	; 0xff
 800dcfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d114      	bne.n	800dd32 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	691b      	ldr	r3, [r3, #16]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d01a      	beq.n	800dd46 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	3310      	adds	r3, #16
 800dd14:	4618      	mov	r0, r3
 800dd16:	f001 f9bd 	bl	800f094 <xTaskRemoveFromEventList>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d012      	beq.n	800dd46 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800dd20:	4b0c      	ldr	r3, [pc, #48]	; (800dd54 <xQueueGenericReset+0xcc>)
 800dd22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd26:	601a      	str	r2, [r3, #0]
 800dd28:	f3bf 8f4f 	dsb	sy
 800dd2c:	f3bf 8f6f 	isb	sy
 800dd30:	e009      	b.n	800dd46 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	3310      	adds	r3, #16
 800dd36:	4618      	mov	r0, r3
 800dd38:	f7ff fca4 	bl	800d684 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	3324      	adds	r3, #36	; 0x24
 800dd40:	4618      	mov	r0, r3
 800dd42:	f7ff fc9f 	bl	800d684 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800dd46:	f7ff fead 	bl	800daa4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800dd4a:	2301      	movs	r3, #1
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3710      	adds	r7, #16
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}
 800dd54:	e000ed04 	.word	0xe000ed04

0800dd58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b08e      	sub	sp, #56	; 0x38
 800dd5c:	af02      	add	r7, sp, #8
 800dd5e:	60f8      	str	r0, [r7, #12]
 800dd60:	60b9      	str	r1, [r7, #8]
 800dd62:	607a      	str	r2, [r7, #4]
 800dd64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d10a      	bne.n	800dd82 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800dd6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd70:	f383 8811 	msr	BASEPRI, r3
 800dd74:	f3bf 8f6f 	isb	sy
 800dd78:	f3bf 8f4f 	dsb	sy
 800dd7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800dd7e:	bf00      	nop
 800dd80:	e7fe      	b.n	800dd80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d10a      	bne.n	800dd9e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800dd88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd8c:	f383 8811 	msr	BASEPRI, r3
 800dd90:	f3bf 8f6f 	isb	sy
 800dd94:	f3bf 8f4f 	dsb	sy
 800dd98:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dd9a:	bf00      	nop
 800dd9c:	e7fe      	b.n	800dd9c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d002      	beq.n	800ddaa <xQueueGenericCreateStatic+0x52>
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d001      	beq.n	800ddae <xQueueGenericCreateStatic+0x56>
 800ddaa:	2301      	movs	r3, #1
 800ddac:	e000      	b.n	800ddb0 <xQueueGenericCreateStatic+0x58>
 800ddae:	2300      	movs	r3, #0
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d10a      	bne.n	800ddca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ddb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb8:	f383 8811 	msr	BASEPRI, r3
 800ddbc:	f3bf 8f6f 	isb	sy
 800ddc0:	f3bf 8f4f 	dsb	sy
 800ddc4:	623b      	str	r3, [r7, #32]
}
 800ddc6:	bf00      	nop
 800ddc8:	e7fe      	b.n	800ddc8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d102      	bne.n	800ddd6 <xQueueGenericCreateStatic+0x7e>
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d101      	bne.n	800ddda <xQueueGenericCreateStatic+0x82>
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	e000      	b.n	800dddc <xQueueGenericCreateStatic+0x84>
 800ddda:	2300      	movs	r3, #0
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d10a      	bne.n	800ddf6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800dde0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dde4:	f383 8811 	msr	BASEPRI, r3
 800dde8:	f3bf 8f6f 	isb	sy
 800ddec:	f3bf 8f4f 	dsb	sy
 800ddf0:	61fb      	str	r3, [r7, #28]
}
 800ddf2:	bf00      	nop
 800ddf4:	e7fe      	b.n	800ddf4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ddf6:	2350      	movs	r3, #80	; 0x50
 800ddf8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ddfa:	697b      	ldr	r3, [r7, #20]
 800ddfc:	2b50      	cmp	r3, #80	; 0x50
 800ddfe:	d00a      	beq.n	800de16 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800de00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de04:	f383 8811 	msr	BASEPRI, r3
 800de08:	f3bf 8f6f 	isb	sy
 800de0c:	f3bf 8f4f 	dsb	sy
 800de10:	61bb      	str	r3, [r7, #24]
}
 800de12:	bf00      	nop
 800de14:	e7fe      	b.n	800de14 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800de16:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800de1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d00d      	beq.n	800de3e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800de22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de24:	2201      	movs	r2, #1
 800de26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800de2a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800de2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de30:	9300      	str	r3, [sp, #0]
 800de32:	4613      	mov	r3, r2
 800de34:	687a      	ldr	r2, [r7, #4]
 800de36:	68b9      	ldr	r1, [r7, #8]
 800de38:	68f8      	ldr	r0, [r7, #12]
 800de3a:	f000 f83f 	bl	800debc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800de3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800de40:	4618      	mov	r0, r3
 800de42:	3730      	adds	r7, #48	; 0x30
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}

0800de48 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b08a      	sub	sp, #40	; 0x28
 800de4c:	af02      	add	r7, sp, #8
 800de4e:	60f8      	str	r0, [r7, #12]
 800de50:	60b9      	str	r1, [r7, #8]
 800de52:	4613      	mov	r3, r2
 800de54:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d10a      	bne.n	800de72 <xQueueGenericCreate+0x2a>
	__asm volatile
 800de5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de60:	f383 8811 	msr	BASEPRI, r3
 800de64:	f3bf 8f6f 	isb	sy
 800de68:	f3bf 8f4f 	dsb	sy
 800de6c:	613b      	str	r3, [r7, #16]
}
 800de6e:	bf00      	nop
 800de70:	e7fe      	b.n	800de70 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	68ba      	ldr	r2, [r7, #8]
 800de76:	fb02 f303 	mul.w	r3, r2, r3
 800de7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800de7c:	69fb      	ldr	r3, [r7, #28]
 800de7e:	3350      	adds	r3, #80	; 0x50
 800de80:	4618      	mov	r0, r3
 800de82:	f7ff fa15 	bl	800d2b0 <pvPortMalloc>
 800de86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800de88:	69bb      	ldr	r3, [r7, #24]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d011      	beq.n	800deb2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800de8e:	69bb      	ldr	r3, [r7, #24]
 800de90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	3350      	adds	r3, #80	; 0x50
 800de96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800de98:	69bb      	ldr	r3, [r7, #24]
 800de9a:	2200      	movs	r2, #0
 800de9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dea0:	79fa      	ldrb	r2, [r7, #7]
 800dea2:	69bb      	ldr	r3, [r7, #24]
 800dea4:	9300      	str	r3, [sp, #0]
 800dea6:	4613      	mov	r3, r2
 800dea8:	697a      	ldr	r2, [r7, #20]
 800deaa:	68b9      	ldr	r1, [r7, #8]
 800deac:	68f8      	ldr	r0, [r7, #12]
 800deae:	f000 f805 	bl	800debc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800deb2:	69bb      	ldr	r3, [r7, #24]
	}
 800deb4:	4618      	mov	r0, r3
 800deb6:	3720      	adds	r7, #32
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}

0800debc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b084      	sub	sp, #16
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	60f8      	str	r0, [r7, #12]
 800dec4:	60b9      	str	r1, [r7, #8]
 800dec6:	607a      	str	r2, [r7, #4]
 800dec8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d103      	bne.n	800ded8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ded0:	69bb      	ldr	r3, [r7, #24]
 800ded2:	69ba      	ldr	r2, [r7, #24]
 800ded4:	601a      	str	r2, [r3, #0]
 800ded6:	e002      	b.n	800dede <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ded8:	69bb      	ldr	r3, [r7, #24]
 800deda:	687a      	ldr	r2, [r7, #4]
 800dedc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dede:	69bb      	ldr	r3, [r7, #24]
 800dee0:	68fa      	ldr	r2, [r7, #12]
 800dee2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dee4:	69bb      	ldr	r3, [r7, #24]
 800dee6:	68ba      	ldr	r2, [r7, #8]
 800dee8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800deea:	2101      	movs	r1, #1
 800deec:	69b8      	ldr	r0, [r7, #24]
 800deee:	f7ff fecb 	bl	800dc88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800def2:	69bb      	ldr	r3, [r7, #24]
 800def4:	78fa      	ldrb	r2, [r7, #3]
 800def6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800defa:	bf00      	nop
 800defc:	3710      	adds	r7, #16
 800defe:	46bd      	mov	sp, r7
 800df00:	bd80      	pop	{r7, pc}
	...

0800df04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b08e      	sub	sp, #56	; 0x38
 800df08:	af00      	add	r7, sp, #0
 800df0a:	60f8      	str	r0, [r7, #12]
 800df0c:	60b9      	str	r1, [r7, #8]
 800df0e:	607a      	str	r2, [r7, #4]
 800df10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800df12:	2300      	movs	r3, #0
 800df14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800df1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d10a      	bne.n	800df36 <xQueueGenericSend+0x32>
	__asm volatile
 800df20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df24:	f383 8811 	msr	BASEPRI, r3
 800df28:	f3bf 8f6f 	isb	sy
 800df2c:	f3bf 8f4f 	dsb	sy
 800df30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800df32:	bf00      	nop
 800df34:	e7fe      	b.n	800df34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d103      	bne.n	800df44 <xQueueGenericSend+0x40>
 800df3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df40:	2b00      	cmp	r3, #0
 800df42:	d101      	bne.n	800df48 <xQueueGenericSend+0x44>
 800df44:	2301      	movs	r3, #1
 800df46:	e000      	b.n	800df4a <xQueueGenericSend+0x46>
 800df48:	2300      	movs	r3, #0
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d10a      	bne.n	800df64 <xQueueGenericSend+0x60>
	__asm volatile
 800df4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df52:	f383 8811 	msr	BASEPRI, r3
 800df56:	f3bf 8f6f 	isb	sy
 800df5a:	f3bf 8f4f 	dsb	sy
 800df5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800df60:	bf00      	nop
 800df62:	e7fe      	b.n	800df62 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	2b02      	cmp	r3, #2
 800df68:	d103      	bne.n	800df72 <xQueueGenericSend+0x6e>
 800df6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df6e:	2b01      	cmp	r3, #1
 800df70:	d101      	bne.n	800df76 <xQueueGenericSend+0x72>
 800df72:	2301      	movs	r3, #1
 800df74:	e000      	b.n	800df78 <xQueueGenericSend+0x74>
 800df76:	2300      	movs	r3, #0
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d10a      	bne.n	800df92 <xQueueGenericSend+0x8e>
	__asm volatile
 800df7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df80:	f383 8811 	msr	BASEPRI, r3
 800df84:	f3bf 8f6f 	isb	sy
 800df88:	f3bf 8f4f 	dsb	sy
 800df8c:	623b      	str	r3, [r7, #32]
}
 800df8e:	bf00      	nop
 800df90:	e7fe      	b.n	800df90 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800df92:	f001 fa3d 	bl	800f410 <xTaskGetSchedulerState>
 800df96:	4603      	mov	r3, r0
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d102      	bne.n	800dfa2 <xQueueGenericSend+0x9e>
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d101      	bne.n	800dfa6 <xQueueGenericSend+0xa2>
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	e000      	b.n	800dfa8 <xQueueGenericSend+0xa4>
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d10a      	bne.n	800dfc2 <xQueueGenericSend+0xbe>
	__asm volatile
 800dfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfb0:	f383 8811 	msr	BASEPRI, r3
 800dfb4:	f3bf 8f6f 	isb	sy
 800dfb8:	f3bf 8f4f 	dsb	sy
 800dfbc:	61fb      	str	r3, [r7, #28]
}
 800dfbe:	bf00      	nop
 800dfc0:	e7fe      	b.n	800dfc0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dfc2:	f7ff fd3f 	bl	800da44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfce:	429a      	cmp	r2, r3
 800dfd0:	d302      	bcc.n	800dfd8 <xQueueGenericSend+0xd4>
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	2b02      	cmp	r3, #2
 800dfd6:	d129      	bne.n	800e02c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dfd8:	683a      	ldr	r2, [r7, #0]
 800dfda:	68b9      	ldr	r1, [r7, #8]
 800dfdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dfde:	f000 fa8b 	bl	800e4f8 <prvCopyDataToQueue>
 800dfe2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dfe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d010      	beq.n	800e00e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfee:	3324      	adds	r3, #36	; 0x24
 800dff0:	4618      	mov	r0, r3
 800dff2:	f001 f84f 	bl	800f094 <xTaskRemoveFromEventList>
 800dff6:	4603      	mov	r3, r0
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d013      	beq.n	800e024 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800dffc:	4b3f      	ldr	r3, [pc, #252]	; (800e0fc <xQueueGenericSend+0x1f8>)
 800dffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e002:	601a      	str	r2, [r3, #0]
 800e004:	f3bf 8f4f 	dsb	sy
 800e008:	f3bf 8f6f 	isb	sy
 800e00c:	e00a      	b.n	800e024 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e010:	2b00      	cmp	r3, #0
 800e012:	d007      	beq.n	800e024 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e014:	4b39      	ldr	r3, [pc, #228]	; (800e0fc <xQueueGenericSend+0x1f8>)
 800e016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e01a:	601a      	str	r2, [r3, #0]
 800e01c:	f3bf 8f4f 	dsb	sy
 800e020:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e024:	f7ff fd3e 	bl	800daa4 <vPortExitCritical>
				return pdPASS;
 800e028:	2301      	movs	r3, #1
 800e02a:	e063      	b.n	800e0f4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d103      	bne.n	800e03a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e032:	f7ff fd37 	bl	800daa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e036:	2300      	movs	r3, #0
 800e038:	e05c      	b.n	800e0f4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e03a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d106      	bne.n	800e04e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e040:	f107 0314 	add.w	r3, r7, #20
 800e044:	4618      	mov	r0, r3
 800e046:	f001 f889 	bl	800f15c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e04a:	2301      	movs	r3, #1
 800e04c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e04e:	f7ff fd29 	bl	800daa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e052:	f000 fdfb 	bl	800ec4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e056:	f7ff fcf5 	bl	800da44 <vPortEnterCritical>
 800e05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e05c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e060:	b25b      	sxtb	r3, r3
 800e062:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e066:	d103      	bne.n	800e070 <xQueueGenericSend+0x16c>
 800e068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e06a:	2200      	movs	r2, #0
 800e06c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e072:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e076:	b25b      	sxtb	r3, r3
 800e078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e07c:	d103      	bne.n	800e086 <xQueueGenericSend+0x182>
 800e07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e080:	2200      	movs	r2, #0
 800e082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e086:	f7ff fd0d 	bl	800daa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e08a:	1d3a      	adds	r2, r7, #4
 800e08c:	f107 0314 	add.w	r3, r7, #20
 800e090:	4611      	mov	r1, r2
 800e092:	4618      	mov	r0, r3
 800e094:	f001 f878 	bl	800f188 <xTaskCheckForTimeOut>
 800e098:	4603      	mov	r3, r0
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d124      	bne.n	800e0e8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e09e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e0a0:	f000 fb22 	bl	800e6e8 <prvIsQueueFull>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d018      	beq.n	800e0dc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ac:	3310      	adds	r3, #16
 800e0ae:	687a      	ldr	r2, [r7, #4]
 800e0b0:	4611      	mov	r1, r2
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f000 ff9e 	bl	800eff4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e0b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e0ba:	f000 faad 	bl	800e618 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e0be:	f000 fdd3 	bl	800ec68 <xTaskResumeAll>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	f47f af7c 	bne.w	800dfc2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e0ca:	4b0c      	ldr	r3, [pc, #48]	; (800e0fc <xQueueGenericSend+0x1f8>)
 800e0cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0d0:	601a      	str	r2, [r3, #0]
 800e0d2:	f3bf 8f4f 	dsb	sy
 800e0d6:	f3bf 8f6f 	isb	sy
 800e0da:	e772      	b.n	800dfc2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e0dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e0de:	f000 fa9b 	bl	800e618 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e0e2:	f000 fdc1 	bl	800ec68 <xTaskResumeAll>
 800e0e6:	e76c      	b.n	800dfc2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e0e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e0ea:	f000 fa95 	bl	800e618 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e0ee:	f000 fdbb 	bl	800ec68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e0f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3738      	adds	r7, #56	; 0x38
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}
 800e0fc:	e000ed04 	.word	0xe000ed04

0800e100 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b090      	sub	sp, #64	; 0x40
 800e104:	af00      	add	r7, sp, #0
 800e106:	60f8      	str	r0, [r7, #12]
 800e108:	60b9      	str	r1, [r7, #8]
 800e10a:	607a      	str	r2, [r7, #4]
 800e10c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e114:	2b00      	cmp	r3, #0
 800e116:	d10a      	bne.n	800e12e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e11c:	f383 8811 	msr	BASEPRI, r3
 800e120:	f3bf 8f6f 	isb	sy
 800e124:	f3bf 8f4f 	dsb	sy
 800e128:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e12a:	bf00      	nop
 800e12c:	e7fe      	b.n	800e12c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d103      	bne.n	800e13c <xQueueGenericSendFromISR+0x3c>
 800e134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d101      	bne.n	800e140 <xQueueGenericSendFromISR+0x40>
 800e13c:	2301      	movs	r3, #1
 800e13e:	e000      	b.n	800e142 <xQueueGenericSendFromISR+0x42>
 800e140:	2300      	movs	r3, #0
 800e142:	2b00      	cmp	r3, #0
 800e144:	d10a      	bne.n	800e15c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e14a:	f383 8811 	msr	BASEPRI, r3
 800e14e:	f3bf 8f6f 	isb	sy
 800e152:	f3bf 8f4f 	dsb	sy
 800e156:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e158:	bf00      	nop
 800e15a:	e7fe      	b.n	800e15a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	2b02      	cmp	r3, #2
 800e160:	d103      	bne.n	800e16a <xQueueGenericSendFromISR+0x6a>
 800e162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e166:	2b01      	cmp	r3, #1
 800e168:	d101      	bne.n	800e16e <xQueueGenericSendFromISR+0x6e>
 800e16a:	2301      	movs	r3, #1
 800e16c:	e000      	b.n	800e170 <xQueueGenericSendFromISR+0x70>
 800e16e:	2300      	movs	r3, #0
 800e170:	2b00      	cmp	r3, #0
 800e172:	d10a      	bne.n	800e18a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e178:	f383 8811 	msr	BASEPRI, r3
 800e17c:	f3bf 8f6f 	isb	sy
 800e180:	f3bf 8f4f 	dsb	sy
 800e184:	623b      	str	r3, [r7, #32]
}
 800e186:	bf00      	nop
 800e188:	e7fe      	b.n	800e188 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e18a:	f7ff fd3d 	bl	800dc08 <vPortValidateInterruptPriority>
	__asm volatile
 800e18e:	f3ef 8211 	mrs	r2, BASEPRI
 800e192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e196:	f383 8811 	msr	BASEPRI, r3
 800e19a:	f3bf 8f6f 	isb	sy
 800e19e:	f3bf 8f4f 	dsb	sy
 800e1a2:	61fa      	str	r2, [r7, #28]
 800e1a4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800e1a6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e1a8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1b2:	429a      	cmp	r2, r3
 800e1b4:	d302      	bcc.n	800e1bc <xQueueGenericSendFromISR+0xbc>
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	2b02      	cmp	r3, #2
 800e1ba:	d12f      	bne.n	800e21c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e1c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1ca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e1cc:	683a      	ldr	r2, [r7, #0]
 800e1ce:	68b9      	ldr	r1, [r7, #8]
 800e1d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e1d2:	f000 f991 	bl	800e4f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e1d6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e1da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1de:	d112      	bne.n	800e206 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d016      	beq.n	800e216 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ea:	3324      	adds	r3, #36	; 0x24
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f000 ff51 	bl	800f094 <xTaskRemoveFromEventList>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d00e      	beq.n	800e216 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d00b      	beq.n	800e216 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	2201      	movs	r2, #1
 800e202:	601a      	str	r2, [r3, #0]
 800e204:	e007      	b.n	800e216 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e206:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e20a:	3301      	adds	r3, #1
 800e20c:	b2db      	uxtb	r3, r3
 800e20e:	b25a      	sxtb	r2, r3
 800e210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e212:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e216:	2301      	movs	r3, #1
 800e218:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e21a:	e001      	b.n	800e220 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e21c:	2300      	movs	r3, #0
 800e21e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e222:	617b      	str	r3, [r7, #20]
	__asm volatile
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	f383 8811 	msr	BASEPRI, r3
}
 800e22a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e22c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e22e:	4618      	mov	r0, r3
 800e230:	3740      	adds	r7, #64	; 0x40
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}
	...

0800e238 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b08c      	sub	sp, #48	; 0x30
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	60f8      	str	r0, [r7, #12]
 800e240:	60b9      	str	r1, [r7, #8]
 800e242:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e244:	2300      	movs	r3, #0
 800e246:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d10a      	bne.n	800e268 <xQueueReceive+0x30>
	__asm volatile
 800e252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e256:	f383 8811 	msr	BASEPRI, r3
 800e25a:	f3bf 8f6f 	isb	sy
 800e25e:	f3bf 8f4f 	dsb	sy
 800e262:	623b      	str	r3, [r7, #32]
}
 800e264:	bf00      	nop
 800e266:	e7fe      	b.n	800e266 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e268:	68bb      	ldr	r3, [r7, #8]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d103      	bne.n	800e276 <xQueueReceive+0x3e>
 800e26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e272:	2b00      	cmp	r3, #0
 800e274:	d101      	bne.n	800e27a <xQueueReceive+0x42>
 800e276:	2301      	movs	r3, #1
 800e278:	e000      	b.n	800e27c <xQueueReceive+0x44>
 800e27a:	2300      	movs	r3, #0
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d10a      	bne.n	800e296 <xQueueReceive+0x5e>
	__asm volatile
 800e280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e284:	f383 8811 	msr	BASEPRI, r3
 800e288:	f3bf 8f6f 	isb	sy
 800e28c:	f3bf 8f4f 	dsb	sy
 800e290:	61fb      	str	r3, [r7, #28]
}
 800e292:	bf00      	nop
 800e294:	e7fe      	b.n	800e294 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e296:	f001 f8bb 	bl	800f410 <xTaskGetSchedulerState>
 800e29a:	4603      	mov	r3, r0
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d102      	bne.n	800e2a6 <xQueueReceive+0x6e>
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d101      	bne.n	800e2aa <xQueueReceive+0x72>
 800e2a6:	2301      	movs	r3, #1
 800e2a8:	e000      	b.n	800e2ac <xQueueReceive+0x74>
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d10a      	bne.n	800e2c6 <xQueueReceive+0x8e>
	__asm volatile
 800e2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b4:	f383 8811 	msr	BASEPRI, r3
 800e2b8:	f3bf 8f6f 	isb	sy
 800e2bc:	f3bf 8f4f 	dsb	sy
 800e2c0:	61bb      	str	r3, [r7, #24]
}
 800e2c2:	bf00      	nop
 800e2c4:	e7fe      	b.n	800e2c4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e2c6:	f7ff fbbd 	bl	800da44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d01f      	beq.n	800e316 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e2d6:	68b9      	ldr	r1, [r7, #8]
 800e2d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2da:	f000 f977 	bl	800e5cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e0:	1e5a      	subs	r2, r3, #1
 800e2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e8:	691b      	ldr	r3, [r3, #16]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d00f      	beq.n	800e30e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2f0:	3310      	adds	r3, #16
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f000 fece 	bl	800f094 <xTaskRemoveFromEventList>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d007      	beq.n	800e30e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e2fe:	4b3d      	ldr	r3, [pc, #244]	; (800e3f4 <xQueueReceive+0x1bc>)
 800e300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e304:	601a      	str	r2, [r3, #0]
 800e306:	f3bf 8f4f 	dsb	sy
 800e30a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e30e:	f7ff fbc9 	bl	800daa4 <vPortExitCritical>
				return pdPASS;
 800e312:	2301      	movs	r3, #1
 800e314:	e069      	b.n	800e3ea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d103      	bne.n	800e324 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e31c:	f7ff fbc2 	bl	800daa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e320:	2300      	movs	r3, #0
 800e322:	e062      	b.n	800e3ea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e326:	2b00      	cmp	r3, #0
 800e328:	d106      	bne.n	800e338 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e32a:	f107 0310 	add.w	r3, r7, #16
 800e32e:	4618      	mov	r0, r3
 800e330:	f000 ff14 	bl	800f15c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e334:	2301      	movs	r3, #1
 800e336:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e338:	f7ff fbb4 	bl	800daa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e33c:	f000 fc86 	bl	800ec4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e340:	f7ff fb80 	bl	800da44 <vPortEnterCritical>
 800e344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e346:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e34a:	b25b      	sxtb	r3, r3
 800e34c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e350:	d103      	bne.n	800e35a <xQueueReceive+0x122>
 800e352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e354:	2200      	movs	r2, #0
 800e356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e35c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e360:	b25b      	sxtb	r3, r3
 800e362:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e366:	d103      	bne.n	800e370 <xQueueReceive+0x138>
 800e368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36a:	2200      	movs	r2, #0
 800e36c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e370:	f7ff fb98 	bl	800daa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e374:	1d3a      	adds	r2, r7, #4
 800e376:	f107 0310 	add.w	r3, r7, #16
 800e37a:	4611      	mov	r1, r2
 800e37c:	4618      	mov	r0, r3
 800e37e:	f000 ff03 	bl	800f188 <xTaskCheckForTimeOut>
 800e382:	4603      	mov	r3, r0
 800e384:	2b00      	cmp	r3, #0
 800e386:	d123      	bne.n	800e3d0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e38a:	f000 f997 	bl	800e6bc <prvIsQueueEmpty>
 800e38e:	4603      	mov	r3, r0
 800e390:	2b00      	cmp	r3, #0
 800e392:	d017      	beq.n	800e3c4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e396:	3324      	adds	r3, #36	; 0x24
 800e398:	687a      	ldr	r2, [r7, #4]
 800e39a:	4611      	mov	r1, r2
 800e39c:	4618      	mov	r0, r3
 800e39e:	f000 fe29 	bl	800eff4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e3a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3a4:	f000 f938 	bl	800e618 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e3a8:	f000 fc5e 	bl	800ec68 <xTaskResumeAll>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d189      	bne.n	800e2c6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e3b2:	4b10      	ldr	r3, [pc, #64]	; (800e3f4 <xQueueReceive+0x1bc>)
 800e3b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3b8:	601a      	str	r2, [r3, #0]
 800e3ba:	f3bf 8f4f 	dsb	sy
 800e3be:	f3bf 8f6f 	isb	sy
 800e3c2:	e780      	b.n	800e2c6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e3c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3c6:	f000 f927 	bl	800e618 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e3ca:	f000 fc4d 	bl	800ec68 <xTaskResumeAll>
 800e3ce:	e77a      	b.n	800e2c6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e3d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3d2:	f000 f921 	bl	800e618 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e3d6:	f000 fc47 	bl	800ec68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e3da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3dc:	f000 f96e 	bl	800e6bc <prvIsQueueEmpty>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	f43f af6f 	beq.w	800e2c6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e3e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	3730      	adds	r7, #48	; 0x30
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}
 800e3f2:	bf00      	nop
 800e3f4:	e000ed04 	.word	0xe000ed04

0800e3f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b08e      	sub	sp, #56	; 0x38
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	60f8      	str	r0, [r7, #12]
 800e400:	60b9      	str	r1, [r7, #8]
 800e402:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d10a      	bne.n	800e424 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e412:	f383 8811 	msr	BASEPRI, r3
 800e416:	f3bf 8f6f 	isb	sy
 800e41a:	f3bf 8f4f 	dsb	sy
 800e41e:	623b      	str	r3, [r7, #32]
}
 800e420:	bf00      	nop
 800e422:	e7fe      	b.n	800e422 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d103      	bne.n	800e432 <xQueueReceiveFromISR+0x3a>
 800e42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e42c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d101      	bne.n	800e436 <xQueueReceiveFromISR+0x3e>
 800e432:	2301      	movs	r3, #1
 800e434:	e000      	b.n	800e438 <xQueueReceiveFromISR+0x40>
 800e436:	2300      	movs	r3, #0
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d10a      	bne.n	800e452 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e440:	f383 8811 	msr	BASEPRI, r3
 800e444:	f3bf 8f6f 	isb	sy
 800e448:	f3bf 8f4f 	dsb	sy
 800e44c:	61fb      	str	r3, [r7, #28]
}
 800e44e:	bf00      	nop
 800e450:	e7fe      	b.n	800e450 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e452:	f7ff fbd9 	bl	800dc08 <vPortValidateInterruptPriority>
	__asm volatile
 800e456:	f3ef 8211 	mrs	r2, BASEPRI
 800e45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e45e:	f383 8811 	msr	BASEPRI, r3
 800e462:	f3bf 8f6f 	isb	sy
 800e466:	f3bf 8f4f 	dsb	sy
 800e46a:	61ba      	str	r2, [r7, #24]
 800e46c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e46e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e470:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e476:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d02f      	beq.n	800e4de <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e480:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e488:	68b9      	ldr	r1, [r7, #8]
 800e48a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e48c:	f000 f89e 	bl	800e5cc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e492:	1e5a      	subs	r2, r3, #1
 800e494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e496:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e498:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e49c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4a0:	d112      	bne.n	800e4c8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4a4:	691b      	ldr	r3, [r3, #16]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d016      	beq.n	800e4d8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ac:	3310      	adds	r3, #16
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f000 fdf0 	bl	800f094 <xTaskRemoveFromEventList>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d00e      	beq.n	800e4d8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d00b      	beq.n	800e4d8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	601a      	str	r2, [r3, #0]
 800e4c6:	e007      	b.n	800e4d8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e4c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4cc:	3301      	adds	r3, #1
 800e4ce:	b2db      	uxtb	r3, r3
 800e4d0:	b25a      	sxtb	r2, r3
 800e4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e4d8:	2301      	movs	r3, #1
 800e4da:	637b      	str	r3, [r7, #52]	; 0x34
 800e4dc:	e001      	b.n	800e4e2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	637b      	str	r3, [r7, #52]	; 0x34
 800e4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e4e6:	693b      	ldr	r3, [r7, #16]
 800e4e8:	f383 8811 	msr	BASEPRI, r3
}
 800e4ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e4ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	3738      	adds	r7, #56	; 0x38
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}

0800e4f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b086      	sub	sp, #24
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	60f8      	str	r0, [r7, #12]
 800e500:	60b9      	str	r1, [r7, #8]
 800e502:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e504:	2300      	movs	r3, #0
 800e506:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e50c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e512:	2b00      	cmp	r3, #0
 800e514:	d10d      	bne.n	800e532 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d14d      	bne.n	800e5ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	689b      	ldr	r3, [r3, #8]
 800e522:	4618      	mov	r0, r3
 800e524:	f000 ff92 	bl	800f44c <xTaskPriorityDisinherit>
 800e528:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	2200      	movs	r2, #0
 800e52e:	609a      	str	r2, [r3, #8]
 800e530:	e043      	b.n	800e5ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d119      	bne.n	800e56c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	6858      	ldr	r0, [r3, #4]
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e540:	461a      	mov	r2, r3
 800e542:	68b9      	ldr	r1, [r7, #8]
 800e544:	f001 fbb6 	bl	800fcb4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	685a      	ldr	r2, [r3, #4]
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e550:	441a      	add	r2, r3
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	685a      	ldr	r2, [r3, #4]
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	689b      	ldr	r3, [r3, #8]
 800e55e:	429a      	cmp	r2, r3
 800e560:	d32b      	bcc.n	800e5ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	681a      	ldr	r2, [r3, #0]
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	605a      	str	r2, [r3, #4]
 800e56a:	e026      	b.n	800e5ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	68d8      	ldr	r0, [r3, #12]
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e574:	461a      	mov	r2, r3
 800e576:	68b9      	ldr	r1, [r7, #8]
 800e578:	f001 fb9c 	bl	800fcb4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	68da      	ldr	r2, [r3, #12]
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e584:	425b      	negs	r3, r3
 800e586:	441a      	add	r2, r3
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	68da      	ldr	r2, [r3, #12]
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	429a      	cmp	r2, r3
 800e596:	d207      	bcs.n	800e5a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	689a      	ldr	r2, [r3, #8]
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5a0:	425b      	negs	r3, r3
 800e5a2:	441a      	add	r2, r3
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2b02      	cmp	r3, #2
 800e5ac:	d105      	bne.n	800e5ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d002      	beq.n	800e5ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e5b4:	693b      	ldr	r3, [r7, #16]
 800e5b6:	3b01      	subs	r3, #1
 800e5b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e5ba:	693b      	ldr	r3, [r7, #16]
 800e5bc:	1c5a      	adds	r2, r3, #1
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e5c2:	697b      	ldr	r3, [r7, #20]
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3718      	adds	r7, #24
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b082      	sub	sp, #8
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d018      	beq.n	800e610 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	68da      	ldr	r2, [r3, #12]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5e6:	441a      	add	r2, r3
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	68da      	ldr	r2, [r3, #12]
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	689b      	ldr	r3, [r3, #8]
 800e5f4:	429a      	cmp	r2, r3
 800e5f6:	d303      	bcc.n	800e600 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681a      	ldr	r2, [r3, #0]
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	68d9      	ldr	r1, [r3, #12]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e608:	461a      	mov	r2, r3
 800e60a:	6838      	ldr	r0, [r7, #0]
 800e60c:	f001 fb52 	bl	800fcb4 <memcpy>
	}
}
 800e610:	bf00      	nop
 800e612:	3708      	adds	r7, #8
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}

0800e618 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b084      	sub	sp, #16
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e620:	f7ff fa10 	bl	800da44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e62a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e62c:	e011      	b.n	800e652 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e632:	2b00      	cmp	r3, #0
 800e634:	d012      	beq.n	800e65c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	3324      	adds	r3, #36	; 0x24
 800e63a:	4618      	mov	r0, r3
 800e63c:	f000 fd2a 	bl	800f094 <xTaskRemoveFromEventList>
 800e640:	4603      	mov	r3, r0
 800e642:	2b00      	cmp	r3, #0
 800e644:	d001      	beq.n	800e64a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e646:	f000 fe01 	bl	800f24c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e64a:	7bfb      	ldrb	r3, [r7, #15]
 800e64c:	3b01      	subs	r3, #1
 800e64e:	b2db      	uxtb	r3, r3
 800e650:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e656:	2b00      	cmp	r3, #0
 800e658:	dce9      	bgt.n	800e62e <prvUnlockQueue+0x16>
 800e65a:	e000      	b.n	800e65e <prvUnlockQueue+0x46>
					break;
 800e65c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	22ff      	movs	r2, #255	; 0xff
 800e662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e666:	f7ff fa1d 	bl	800daa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e66a:	f7ff f9eb 	bl	800da44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e674:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e676:	e011      	b.n	800e69c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	691b      	ldr	r3, [r3, #16]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d012      	beq.n	800e6a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	3310      	adds	r3, #16
 800e684:	4618      	mov	r0, r3
 800e686:	f000 fd05 	bl	800f094 <xTaskRemoveFromEventList>
 800e68a:	4603      	mov	r3, r0
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d001      	beq.n	800e694 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e690:	f000 fddc 	bl	800f24c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e694:	7bbb      	ldrb	r3, [r7, #14]
 800e696:	3b01      	subs	r3, #1
 800e698:	b2db      	uxtb	r3, r3
 800e69a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e69c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	dce9      	bgt.n	800e678 <prvUnlockQueue+0x60>
 800e6a4:	e000      	b.n	800e6a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e6a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	22ff      	movs	r2, #255	; 0xff
 800e6ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e6b0:	f7ff f9f8 	bl	800daa4 <vPortExitCritical>
}
 800e6b4:	bf00      	nop
 800e6b6:	3710      	adds	r7, #16
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}

0800e6bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b084      	sub	sp, #16
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e6c4:	f7ff f9be 	bl	800da44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d102      	bne.n	800e6d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	60fb      	str	r3, [r7, #12]
 800e6d4:	e001      	b.n	800e6da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e6da:	f7ff f9e3 	bl	800daa4 <vPortExitCritical>

	return xReturn;
 800e6de:	68fb      	ldr	r3, [r7, #12]
}
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	3710      	adds	r7, #16
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}

0800e6e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b084      	sub	sp, #16
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e6f0:	f7ff f9a8 	bl	800da44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	d102      	bne.n	800e706 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e700:	2301      	movs	r3, #1
 800e702:	60fb      	str	r3, [r7, #12]
 800e704:	e001      	b.n	800e70a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e706:	2300      	movs	r3, #0
 800e708:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e70a:	f7ff f9cb 	bl	800daa4 <vPortExitCritical>

	return xReturn;
 800e70e:	68fb      	ldr	r3, [r7, #12]
}
 800e710:	4618      	mov	r0, r3
 800e712:	3710      	adds	r7, #16
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}

0800e718 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e718:	b480      	push	{r7}
 800e71a:	b085      	sub	sp, #20
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
 800e720:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e722:	2300      	movs	r3, #0
 800e724:	60fb      	str	r3, [r7, #12]
 800e726:	e014      	b.n	800e752 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e728:	4a0f      	ldr	r2, [pc, #60]	; (800e768 <vQueueAddToRegistry+0x50>)
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d10b      	bne.n	800e74c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e734:	490c      	ldr	r1, [pc, #48]	; (800e768 <vQueueAddToRegistry+0x50>)
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	683a      	ldr	r2, [r7, #0]
 800e73a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e73e:	4a0a      	ldr	r2, [pc, #40]	; (800e768 <vQueueAddToRegistry+0x50>)
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	00db      	lsls	r3, r3, #3
 800e744:	4413      	add	r3, r2
 800e746:	687a      	ldr	r2, [r7, #4]
 800e748:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e74a:	e006      	b.n	800e75a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	3301      	adds	r3, #1
 800e750:	60fb      	str	r3, [r7, #12]
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	2b07      	cmp	r3, #7
 800e756:	d9e7      	bls.n	800e728 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e758:	bf00      	nop
 800e75a:	bf00      	nop
 800e75c:	3714      	adds	r7, #20
 800e75e:	46bd      	mov	sp, r7
 800e760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e764:	4770      	bx	lr
 800e766:	bf00      	nop
 800e768:	24005198 	.word	0x24005198

0800e76c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b086      	sub	sp, #24
 800e770:	af00      	add	r7, sp, #0
 800e772:	60f8      	str	r0, [r7, #12]
 800e774:	60b9      	str	r1, [r7, #8]
 800e776:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e77c:	f7ff f962 	bl	800da44 <vPortEnterCritical>
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e786:	b25b      	sxtb	r3, r3
 800e788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e78c:	d103      	bne.n	800e796 <vQueueWaitForMessageRestricted+0x2a>
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	2200      	movs	r2, #0
 800e792:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e796:	697b      	ldr	r3, [r7, #20]
 800e798:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e79c:	b25b      	sxtb	r3, r3
 800e79e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7a2:	d103      	bne.n	800e7ac <vQueueWaitForMessageRestricted+0x40>
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e7ac:	f7ff f97a 	bl	800daa4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d106      	bne.n	800e7c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	3324      	adds	r3, #36	; 0x24
 800e7bc:	687a      	ldr	r2, [r7, #4]
 800e7be:	68b9      	ldr	r1, [r7, #8]
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f000 fc3b 	bl	800f03c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e7c6:	6978      	ldr	r0, [r7, #20]
 800e7c8:	f7ff ff26 	bl	800e618 <prvUnlockQueue>
	}
 800e7cc:	bf00      	nop
 800e7ce:	3718      	adds	r7, #24
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}

0800e7d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b08e      	sub	sp, #56	; 0x38
 800e7d8:	af04      	add	r7, sp, #16
 800e7da:	60f8      	str	r0, [r7, #12]
 800e7dc:	60b9      	str	r1, [r7, #8]
 800e7de:	607a      	str	r2, [r7, #4]
 800e7e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e7e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d10a      	bne.n	800e7fe <xTaskCreateStatic+0x2a>
	__asm volatile
 800e7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ec:	f383 8811 	msr	BASEPRI, r3
 800e7f0:	f3bf 8f6f 	isb	sy
 800e7f4:	f3bf 8f4f 	dsb	sy
 800e7f8:	623b      	str	r3, [r7, #32]
}
 800e7fa:	bf00      	nop
 800e7fc:	e7fe      	b.n	800e7fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e800:	2b00      	cmp	r3, #0
 800e802:	d10a      	bne.n	800e81a <xTaskCreateStatic+0x46>
	__asm volatile
 800e804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e808:	f383 8811 	msr	BASEPRI, r3
 800e80c:	f3bf 8f6f 	isb	sy
 800e810:	f3bf 8f4f 	dsb	sy
 800e814:	61fb      	str	r3, [r7, #28]
}
 800e816:	bf00      	nop
 800e818:	e7fe      	b.n	800e818 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e81a:	235c      	movs	r3, #92	; 0x5c
 800e81c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e81e:	693b      	ldr	r3, [r7, #16]
 800e820:	2b5c      	cmp	r3, #92	; 0x5c
 800e822:	d00a      	beq.n	800e83a <xTaskCreateStatic+0x66>
	__asm volatile
 800e824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e828:	f383 8811 	msr	BASEPRI, r3
 800e82c:	f3bf 8f6f 	isb	sy
 800e830:	f3bf 8f4f 	dsb	sy
 800e834:	61bb      	str	r3, [r7, #24]
}
 800e836:	bf00      	nop
 800e838:	e7fe      	b.n	800e838 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e83a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d01e      	beq.n	800e880 <xTaskCreateStatic+0xac>
 800e842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e844:	2b00      	cmp	r3, #0
 800e846:	d01b      	beq.n	800e880 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e84a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e84e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e850:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e854:	2202      	movs	r2, #2
 800e856:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e85a:	2300      	movs	r3, #0
 800e85c:	9303      	str	r3, [sp, #12]
 800e85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e860:	9302      	str	r3, [sp, #8]
 800e862:	f107 0314 	add.w	r3, r7, #20
 800e866:	9301      	str	r3, [sp, #4]
 800e868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e86a:	9300      	str	r3, [sp, #0]
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	687a      	ldr	r2, [r7, #4]
 800e870:	68b9      	ldr	r1, [r7, #8]
 800e872:	68f8      	ldr	r0, [r7, #12]
 800e874:	f000 f850 	bl	800e918 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e878:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e87a:	f000 f8dd 	bl	800ea38 <prvAddNewTaskToReadyList>
 800e87e:	e001      	b.n	800e884 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e880:	2300      	movs	r3, #0
 800e882:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e884:	697b      	ldr	r3, [r7, #20]
	}
 800e886:	4618      	mov	r0, r3
 800e888:	3728      	adds	r7, #40	; 0x28
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}

0800e88e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e88e:	b580      	push	{r7, lr}
 800e890:	b08c      	sub	sp, #48	; 0x30
 800e892:	af04      	add	r7, sp, #16
 800e894:	60f8      	str	r0, [r7, #12]
 800e896:	60b9      	str	r1, [r7, #8]
 800e898:	603b      	str	r3, [r7, #0]
 800e89a:	4613      	mov	r3, r2
 800e89c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e89e:	88fb      	ldrh	r3, [r7, #6]
 800e8a0:	009b      	lsls	r3, r3, #2
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f7fe fd04 	bl	800d2b0 <pvPortMalloc>
 800e8a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d00e      	beq.n	800e8ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e8b0:	205c      	movs	r0, #92	; 0x5c
 800e8b2:	f7fe fcfd 	bl	800d2b0 <pvPortMalloc>
 800e8b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e8b8:	69fb      	ldr	r3, [r7, #28]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d003      	beq.n	800e8c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e8be:	69fb      	ldr	r3, [r7, #28]
 800e8c0:	697a      	ldr	r2, [r7, #20]
 800e8c2:	631a      	str	r2, [r3, #48]	; 0x30
 800e8c4:	e005      	b.n	800e8d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e8c6:	6978      	ldr	r0, [r7, #20]
 800e8c8:	f7fe fdbe 	bl	800d448 <vPortFree>
 800e8cc:	e001      	b.n	800e8d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e8d2:	69fb      	ldr	r3, [r7, #28]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d017      	beq.n	800e908 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e8d8:	69fb      	ldr	r3, [r7, #28]
 800e8da:	2200      	movs	r2, #0
 800e8dc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e8e0:	88fa      	ldrh	r2, [r7, #6]
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	9303      	str	r3, [sp, #12]
 800e8e6:	69fb      	ldr	r3, [r7, #28]
 800e8e8:	9302      	str	r3, [sp, #8]
 800e8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ec:	9301      	str	r3, [sp, #4]
 800e8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f0:	9300      	str	r3, [sp, #0]
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	68b9      	ldr	r1, [r7, #8]
 800e8f6:	68f8      	ldr	r0, [r7, #12]
 800e8f8:	f000 f80e 	bl	800e918 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e8fc:	69f8      	ldr	r0, [r7, #28]
 800e8fe:	f000 f89b 	bl	800ea38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e902:	2301      	movs	r3, #1
 800e904:	61bb      	str	r3, [r7, #24]
 800e906:	e002      	b.n	800e90e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e908:	f04f 33ff 	mov.w	r3, #4294967295
 800e90c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e90e:	69bb      	ldr	r3, [r7, #24]
	}
 800e910:	4618      	mov	r0, r3
 800e912:	3720      	adds	r7, #32
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}

0800e918 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b088      	sub	sp, #32
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	60f8      	str	r0, [r7, #12]
 800e920:	60b9      	str	r1, [r7, #8]
 800e922:	607a      	str	r2, [r7, #4]
 800e924:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e928:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	009b      	lsls	r3, r3, #2
 800e92e:	461a      	mov	r2, r3
 800e930:	21a5      	movs	r1, #165	; 0xa5
 800e932:	f001 f9cd 	bl	800fcd0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e938:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e93a:	6879      	ldr	r1, [r7, #4]
 800e93c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e940:	440b      	add	r3, r1
 800e942:	009b      	lsls	r3, r3, #2
 800e944:	4413      	add	r3, r2
 800e946:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e948:	69bb      	ldr	r3, [r7, #24]
 800e94a:	f023 0307 	bic.w	r3, r3, #7
 800e94e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e950:	69bb      	ldr	r3, [r7, #24]
 800e952:	f003 0307 	and.w	r3, r3, #7
 800e956:	2b00      	cmp	r3, #0
 800e958:	d00a      	beq.n	800e970 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e95e:	f383 8811 	msr	BASEPRI, r3
 800e962:	f3bf 8f6f 	isb	sy
 800e966:	f3bf 8f4f 	dsb	sy
 800e96a:	617b      	str	r3, [r7, #20]
}
 800e96c:	bf00      	nop
 800e96e:	e7fe      	b.n	800e96e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d01f      	beq.n	800e9b6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e976:	2300      	movs	r3, #0
 800e978:	61fb      	str	r3, [r7, #28]
 800e97a:	e012      	b.n	800e9a2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e97c:	68ba      	ldr	r2, [r7, #8]
 800e97e:	69fb      	ldr	r3, [r7, #28]
 800e980:	4413      	add	r3, r2
 800e982:	7819      	ldrb	r1, [r3, #0]
 800e984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e986:	69fb      	ldr	r3, [r7, #28]
 800e988:	4413      	add	r3, r2
 800e98a:	3334      	adds	r3, #52	; 0x34
 800e98c:	460a      	mov	r2, r1
 800e98e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e990:	68ba      	ldr	r2, [r7, #8]
 800e992:	69fb      	ldr	r3, [r7, #28]
 800e994:	4413      	add	r3, r2
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d006      	beq.n	800e9aa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e99c:	69fb      	ldr	r3, [r7, #28]
 800e99e:	3301      	adds	r3, #1
 800e9a0:	61fb      	str	r3, [r7, #28]
 800e9a2:	69fb      	ldr	r3, [r7, #28]
 800e9a4:	2b0f      	cmp	r3, #15
 800e9a6:	d9e9      	bls.n	800e97c <prvInitialiseNewTask+0x64>
 800e9a8:	e000      	b.n	800e9ac <prvInitialiseNewTask+0x94>
			{
				break;
 800e9aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e9b4:	e003      	b.n	800e9be <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c0:	2b37      	cmp	r3, #55	; 0x37
 800e9c2:	d901      	bls.n	800e9c8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e9c4:	2337      	movs	r3, #55	; 0x37
 800e9c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9dc:	3304      	adds	r3, #4
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f7fe fe70 	bl	800d6c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e6:	3318      	adds	r3, #24
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f7fe fe6b 	bl	800d6c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ea04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea06:	2200      	movs	r2, #0
 800ea08:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ea0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ea12:	683a      	ldr	r2, [r7, #0]
 800ea14:	68f9      	ldr	r1, [r7, #12]
 800ea16:	69b8      	ldr	r0, [r7, #24]
 800ea18:	f7fe fee8 	bl	800d7ec <pxPortInitialiseStack>
 800ea1c:	4602      	mov	r2, r0
 800ea1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea20:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ea22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d002      	beq.n	800ea2e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ea28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ea2e:	bf00      	nop
 800ea30:	3720      	adds	r7, #32
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}
	...

0800ea38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b082      	sub	sp, #8
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ea40:	f7ff f800 	bl	800da44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ea44:	4b2d      	ldr	r3, [pc, #180]	; (800eafc <prvAddNewTaskToReadyList+0xc4>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	3301      	adds	r3, #1
 800ea4a:	4a2c      	ldr	r2, [pc, #176]	; (800eafc <prvAddNewTaskToReadyList+0xc4>)
 800ea4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ea4e:	4b2c      	ldr	r3, [pc, #176]	; (800eb00 <prvAddNewTaskToReadyList+0xc8>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d109      	bne.n	800ea6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ea56:	4a2a      	ldr	r2, [pc, #168]	; (800eb00 <prvAddNewTaskToReadyList+0xc8>)
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ea5c:	4b27      	ldr	r3, [pc, #156]	; (800eafc <prvAddNewTaskToReadyList+0xc4>)
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	2b01      	cmp	r3, #1
 800ea62:	d110      	bne.n	800ea86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ea64:	f000 fc16 	bl	800f294 <prvInitialiseTaskLists>
 800ea68:	e00d      	b.n	800ea86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ea6a:	4b26      	ldr	r3, [pc, #152]	; (800eb04 <prvAddNewTaskToReadyList+0xcc>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d109      	bne.n	800ea86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ea72:	4b23      	ldr	r3, [pc, #140]	; (800eb00 <prvAddNewTaskToReadyList+0xc8>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	d802      	bhi.n	800ea86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ea80:	4a1f      	ldr	r2, [pc, #124]	; (800eb00 <prvAddNewTaskToReadyList+0xc8>)
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ea86:	4b20      	ldr	r3, [pc, #128]	; (800eb08 <prvAddNewTaskToReadyList+0xd0>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	3301      	adds	r3, #1
 800ea8c:	4a1e      	ldr	r2, [pc, #120]	; (800eb08 <prvAddNewTaskToReadyList+0xd0>)
 800ea8e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ea90:	4b1d      	ldr	r3, [pc, #116]	; (800eb08 <prvAddNewTaskToReadyList+0xd0>)
 800ea92:	681a      	ldr	r2, [r3, #0]
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea9c:	4b1b      	ldr	r3, [pc, #108]	; (800eb0c <prvAddNewTaskToReadyList+0xd4>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	429a      	cmp	r2, r3
 800eaa2:	d903      	bls.n	800eaac <prvAddNewTaskToReadyList+0x74>
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaa8:	4a18      	ldr	r2, [pc, #96]	; (800eb0c <prvAddNewTaskToReadyList+0xd4>)
 800eaaa:	6013      	str	r3, [r2, #0]
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eab0:	4613      	mov	r3, r2
 800eab2:	009b      	lsls	r3, r3, #2
 800eab4:	4413      	add	r3, r2
 800eab6:	009b      	lsls	r3, r3, #2
 800eab8:	4a15      	ldr	r2, [pc, #84]	; (800eb10 <prvAddNewTaskToReadyList+0xd8>)
 800eaba:	441a      	add	r2, r3
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	3304      	adds	r3, #4
 800eac0:	4619      	mov	r1, r3
 800eac2:	4610      	mov	r0, r2
 800eac4:	f7fe fe0b 	bl	800d6de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800eac8:	f7fe ffec 	bl	800daa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800eacc:	4b0d      	ldr	r3, [pc, #52]	; (800eb04 <prvAddNewTaskToReadyList+0xcc>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d00e      	beq.n	800eaf2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ead4:	4b0a      	ldr	r3, [pc, #40]	; (800eb00 <prvAddNewTaskToReadyList+0xc8>)
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eade:	429a      	cmp	r2, r3
 800eae0:	d207      	bcs.n	800eaf2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800eae2:	4b0c      	ldr	r3, [pc, #48]	; (800eb14 <prvAddNewTaskToReadyList+0xdc>)
 800eae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eae8:	601a      	str	r2, [r3, #0]
 800eaea:	f3bf 8f4f 	dsb	sy
 800eaee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eaf2:	bf00      	nop
 800eaf4:	3708      	adds	r7, #8
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}
 800eafa:	bf00      	nop
 800eafc:	240047fc 	.word	0x240047fc
 800eb00:	24004328 	.word	0x24004328
 800eb04:	24004808 	.word	0x24004808
 800eb08:	24004818 	.word	0x24004818
 800eb0c:	24004804 	.word	0x24004804
 800eb10:	2400432c 	.word	0x2400432c
 800eb14:	e000ed04 	.word	0xe000ed04

0800eb18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b084      	sub	sp, #16
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800eb20:	2300      	movs	r3, #0
 800eb22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d017      	beq.n	800eb5a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800eb2a:	4b13      	ldr	r3, [pc, #76]	; (800eb78 <vTaskDelay+0x60>)
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d00a      	beq.n	800eb48 <vTaskDelay+0x30>
	__asm volatile
 800eb32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb36:	f383 8811 	msr	BASEPRI, r3
 800eb3a:	f3bf 8f6f 	isb	sy
 800eb3e:	f3bf 8f4f 	dsb	sy
 800eb42:	60bb      	str	r3, [r7, #8]
}
 800eb44:	bf00      	nop
 800eb46:	e7fe      	b.n	800eb46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800eb48:	f000 f880 	bl	800ec4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800eb4c:	2100      	movs	r1, #0
 800eb4e:	6878      	ldr	r0, [r7, #4]
 800eb50:	f000 fcea 	bl	800f528 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800eb54:	f000 f888 	bl	800ec68 <xTaskResumeAll>
 800eb58:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d107      	bne.n	800eb70 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800eb60:	4b06      	ldr	r3, [pc, #24]	; (800eb7c <vTaskDelay+0x64>)
 800eb62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb66:	601a      	str	r2, [r3, #0]
 800eb68:	f3bf 8f4f 	dsb	sy
 800eb6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eb70:	bf00      	nop
 800eb72:	3710      	adds	r7, #16
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}
 800eb78:	24004824 	.word	0x24004824
 800eb7c:	e000ed04 	.word	0xe000ed04

0800eb80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b08a      	sub	sp, #40	; 0x28
 800eb84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800eb86:	2300      	movs	r3, #0
 800eb88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800eb8e:	463a      	mov	r2, r7
 800eb90:	1d39      	adds	r1, r7, #4
 800eb92:	f107 0308 	add.w	r3, r7, #8
 800eb96:	4618      	mov	r0, r3
 800eb98:	f7fe fb56 	bl	800d248 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800eb9c:	6839      	ldr	r1, [r7, #0]
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	68ba      	ldr	r2, [r7, #8]
 800eba2:	9202      	str	r2, [sp, #8]
 800eba4:	9301      	str	r3, [sp, #4]
 800eba6:	2300      	movs	r3, #0
 800eba8:	9300      	str	r3, [sp, #0]
 800ebaa:	2300      	movs	r3, #0
 800ebac:	460a      	mov	r2, r1
 800ebae:	4921      	ldr	r1, [pc, #132]	; (800ec34 <vTaskStartScheduler+0xb4>)
 800ebb0:	4821      	ldr	r0, [pc, #132]	; (800ec38 <vTaskStartScheduler+0xb8>)
 800ebb2:	f7ff fe0f 	bl	800e7d4 <xTaskCreateStatic>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	4a20      	ldr	r2, [pc, #128]	; (800ec3c <vTaskStartScheduler+0xbc>)
 800ebba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ebbc:	4b1f      	ldr	r3, [pc, #124]	; (800ec3c <vTaskStartScheduler+0xbc>)
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d002      	beq.n	800ebca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	617b      	str	r3, [r7, #20]
 800ebc8:	e001      	b.n	800ebce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ebca:	2300      	movs	r3, #0
 800ebcc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	2b01      	cmp	r3, #1
 800ebd2:	d102      	bne.n	800ebda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ebd4:	f000 fcfc 	bl	800f5d0 <xTimerCreateTimerTask>
 800ebd8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	2b01      	cmp	r3, #1
 800ebde:	d116      	bne.n	800ec0e <vTaskStartScheduler+0x8e>
	__asm volatile
 800ebe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebe4:	f383 8811 	msr	BASEPRI, r3
 800ebe8:	f3bf 8f6f 	isb	sy
 800ebec:	f3bf 8f4f 	dsb	sy
 800ebf0:	613b      	str	r3, [r7, #16]
}
 800ebf2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ebf4:	4b12      	ldr	r3, [pc, #72]	; (800ec40 <vTaskStartScheduler+0xc0>)
 800ebf6:	f04f 32ff 	mov.w	r2, #4294967295
 800ebfa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ebfc:	4b11      	ldr	r3, [pc, #68]	; (800ec44 <vTaskStartScheduler+0xc4>)
 800ebfe:	2201      	movs	r2, #1
 800ec00:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ec02:	4b11      	ldr	r3, [pc, #68]	; (800ec48 <vTaskStartScheduler+0xc8>)
 800ec04:	2200      	movs	r2, #0
 800ec06:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ec08:	f7fe fe7a 	bl	800d900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ec0c:	e00e      	b.n	800ec2c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec14:	d10a      	bne.n	800ec2c <vTaskStartScheduler+0xac>
	__asm volatile
 800ec16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec1a:	f383 8811 	msr	BASEPRI, r3
 800ec1e:	f3bf 8f6f 	isb	sy
 800ec22:	f3bf 8f4f 	dsb	sy
 800ec26:	60fb      	str	r3, [r7, #12]
}
 800ec28:	bf00      	nop
 800ec2a:	e7fe      	b.n	800ec2a <vTaskStartScheduler+0xaa>
}
 800ec2c:	bf00      	nop
 800ec2e:	3718      	adds	r7, #24
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd80      	pop	{r7, pc}
 800ec34:	0800fdfc 	.word	0x0800fdfc
 800ec38:	0800f265 	.word	0x0800f265
 800ec3c:	24004820 	.word	0x24004820
 800ec40:	2400481c 	.word	0x2400481c
 800ec44:	24004808 	.word	0x24004808
 800ec48:	24004800 	.word	0x24004800

0800ec4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ec50:	4b04      	ldr	r3, [pc, #16]	; (800ec64 <vTaskSuspendAll+0x18>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	3301      	adds	r3, #1
 800ec56:	4a03      	ldr	r2, [pc, #12]	; (800ec64 <vTaskSuspendAll+0x18>)
 800ec58:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ec5a:	bf00      	nop
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec62:	4770      	bx	lr
 800ec64:	24004824 	.word	0x24004824

0800ec68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b084      	sub	sp, #16
 800ec6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ec72:	2300      	movs	r3, #0
 800ec74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ec76:	4b42      	ldr	r3, [pc, #264]	; (800ed80 <xTaskResumeAll+0x118>)
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d10a      	bne.n	800ec94 <xTaskResumeAll+0x2c>
	__asm volatile
 800ec7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec82:	f383 8811 	msr	BASEPRI, r3
 800ec86:	f3bf 8f6f 	isb	sy
 800ec8a:	f3bf 8f4f 	dsb	sy
 800ec8e:	603b      	str	r3, [r7, #0]
}
 800ec90:	bf00      	nop
 800ec92:	e7fe      	b.n	800ec92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ec94:	f7fe fed6 	bl	800da44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ec98:	4b39      	ldr	r3, [pc, #228]	; (800ed80 <xTaskResumeAll+0x118>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	3b01      	subs	r3, #1
 800ec9e:	4a38      	ldr	r2, [pc, #224]	; (800ed80 <xTaskResumeAll+0x118>)
 800eca0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eca2:	4b37      	ldr	r3, [pc, #220]	; (800ed80 <xTaskResumeAll+0x118>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d162      	bne.n	800ed70 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ecaa:	4b36      	ldr	r3, [pc, #216]	; (800ed84 <xTaskResumeAll+0x11c>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d05e      	beq.n	800ed70 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ecb2:	e02f      	b.n	800ed14 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ecb4:	4b34      	ldr	r3, [pc, #208]	; (800ed88 <xTaskResumeAll+0x120>)
 800ecb6:	68db      	ldr	r3, [r3, #12]
 800ecb8:	68db      	ldr	r3, [r3, #12]
 800ecba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	3318      	adds	r3, #24
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f7fe fd69 	bl	800d798 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	3304      	adds	r3, #4
 800ecca:	4618      	mov	r0, r3
 800eccc:	f7fe fd64 	bl	800d798 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecd4:	4b2d      	ldr	r3, [pc, #180]	; (800ed8c <xTaskResumeAll+0x124>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	429a      	cmp	r2, r3
 800ecda:	d903      	bls.n	800ece4 <xTaskResumeAll+0x7c>
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ece0:	4a2a      	ldr	r2, [pc, #168]	; (800ed8c <xTaskResumeAll+0x124>)
 800ece2:	6013      	str	r3, [r2, #0]
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ece8:	4613      	mov	r3, r2
 800ecea:	009b      	lsls	r3, r3, #2
 800ecec:	4413      	add	r3, r2
 800ecee:	009b      	lsls	r3, r3, #2
 800ecf0:	4a27      	ldr	r2, [pc, #156]	; (800ed90 <xTaskResumeAll+0x128>)
 800ecf2:	441a      	add	r2, r3
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	3304      	adds	r3, #4
 800ecf8:	4619      	mov	r1, r3
 800ecfa:	4610      	mov	r0, r2
 800ecfc:	f7fe fcef 	bl	800d6de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed04:	4b23      	ldr	r3, [pc, #140]	; (800ed94 <xTaskResumeAll+0x12c>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed0a:	429a      	cmp	r2, r3
 800ed0c:	d302      	bcc.n	800ed14 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ed0e:	4b22      	ldr	r3, [pc, #136]	; (800ed98 <xTaskResumeAll+0x130>)
 800ed10:	2201      	movs	r2, #1
 800ed12:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ed14:	4b1c      	ldr	r3, [pc, #112]	; (800ed88 <xTaskResumeAll+0x120>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d1cb      	bne.n	800ecb4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d001      	beq.n	800ed26 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ed22:	f000 fb55 	bl	800f3d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ed26:	4b1d      	ldr	r3, [pc, #116]	; (800ed9c <xTaskResumeAll+0x134>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d010      	beq.n	800ed54 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ed32:	f000 f847 	bl	800edc4 <xTaskIncrementTick>
 800ed36:	4603      	mov	r3, r0
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d002      	beq.n	800ed42 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ed3c:	4b16      	ldr	r3, [pc, #88]	; (800ed98 <xTaskResumeAll+0x130>)
 800ed3e:	2201      	movs	r2, #1
 800ed40:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	3b01      	subs	r3, #1
 800ed46:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d1f1      	bne.n	800ed32 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ed4e:	4b13      	ldr	r3, [pc, #76]	; (800ed9c <xTaskResumeAll+0x134>)
 800ed50:	2200      	movs	r2, #0
 800ed52:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ed54:	4b10      	ldr	r3, [pc, #64]	; (800ed98 <xTaskResumeAll+0x130>)
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d009      	beq.n	800ed70 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ed60:	4b0f      	ldr	r3, [pc, #60]	; (800eda0 <xTaskResumeAll+0x138>)
 800ed62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed66:	601a      	str	r2, [r3, #0]
 800ed68:	f3bf 8f4f 	dsb	sy
 800ed6c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ed70:	f7fe fe98 	bl	800daa4 <vPortExitCritical>

	return xAlreadyYielded;
 800ed74:	68bb      	ldr	r3, [r7, #8]
}
 800ed76:	4618      	mov	r0, r3
 800ed78:	3710      	adds	r7, #16
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}
 800ed7e:	bf00      	nop
 800ed80:	24004824 	.word	0x24004824
 800ed84:	240047fc 	.word	0x240047fc
 800ed88:	240047bc 	.word	0x240047bc
 800ed8c:	24004804 	.word	0x24004804
 800ed90:	2400432c 	.word	0x2400432c
 800ed94:	24004328 	.word	0x24004328
 800ed98:	24004810 	.word	0x24004810
 800ed9c:	2400480c 	.word	0x2400480c
 800eda0:	e000ed04 	.word	0xe000ed04

0800eda4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800eda4:	b480      	push	{r7}
 800eda6:	b083      	sub	sp, #12
 800eda8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800edaa:	4b05      	ldr	r3, [pc, #20]	; (800edc0 <xTaskGetTickCount+0x1c>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800edb0:	687b      	ldr	r3, [r7, #4]
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	370c      	adds	r7, #12
 800edb6:	46bd      	mov	sp, r7
 800edb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbc:	4770      	bx	lr
 800edbe:	bf00      	nop
 800edc0:	24004800 	.word	0x24004800

0800edc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b086      	sub	sp, #24
 800edc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800edca:	2300      	movs	r3, #0
 800edcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800edce:	4b4f      	ldr	r3, [pc, #316]	; (800ef0c <xTaskIncrementTick+0x148>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	f040 808f 	bne.w	800eef6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800edd8:	4b4d      	ldr	r3, [pc, #308]	; (800ef10 <xTaskIncrementTick+0x14c>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	3301      	adds	r3, #1
 800edde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ede0:	4a4b      	ldr	r2, [pc, #300]	; (800ef10 <xTaskIncrementTick+0x14c>)
 800ede2:	693b      	ldr	r3, [r7, #16]
 800ede4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d120      	bne.n	800ee2e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800edec:	4b49      	ldr	r3, [pc, #292]	; (800ef14 <xTaskIncrementTick+0x150>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d00a      	beq.n	800ee0c <xTaskIncrementTick+0x48>
	__asm volatile
 800edf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edfa:	f383 8811 	msr	BASEPRI, r3
 800edfe:	f3bf 8f6f 	isb	sy
 800ee02:	f3bf 8f4f 	dsb	sy
 800ee06:	603b      	str	r3, [r7, #0]
}
 800ee08:	bf00      	nop
 800ee0a:	e7fe      	b.n	800ee0a <xTaskIncrementTick+0x46>
 800ee0c:	4b41      	ldr	r3, [pc, #260]	; (800ef14 <xTaskIncrementTick+0x150>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	60fb      	str	r3, [r7, #12]
 800ee12:	4b41      	ldr	r3, [pc, #260]	; (800ef18 <xTaskIncrementTick+0x154>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	4a3f      	ldr	r2, [pc, #252]	; (800ef14 <xTaskIncrementTick+0x150>)
 800ee18:	6013      	str	r3, [r2, #0]
 800ee1a:	4a3f      	ldr	r2, [pc, #252]	; (800ef18 <xTaskIncrementTick+0x154>)
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	6013      	str	r3, [r2, #0]
 800ee20:	4b3e      	ldr	r3, [pc, #248]	; (800ef1c <xTaskIncrementTick+0x158>)
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	3301      	adds	r3, #1
 800ee26:	4a3d      	ldr	r2, [pc, #244]	; (800ef1c <xTaskIncrementTick+0x158>)
 800ee28:	6013      	str	r3, [r2, #0]
 800ee2a:	f000 fad1 	bl	800f3d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ee2e:	4b3c      	ldr	r3, [pc, #240]	; (800ef20 <xTaskIncrementTick+0x15c>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	693a      	ldr	r2, [r7, #16]
 800ee34:	429a      	cmp	r2, r3
 800ee36:	d349      	bcc.n	800eecc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee38:	4b36      	ldr	r3, [pc, #216]	; (800ef14 <xTaskIncrementTick+0x150>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d104      	bne.n	800ee4c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee42:	4b37      	ldr	r3, [pc, #220]	; (800ef20 <xTaskIncrementTick+0x15c>)
 800ee44:	f04f 32ff 	mov.w	r2, #4294967295
 800ee48:	601a      	str	r2, [r3, #0]
					break;
 800ee4a:	e03f      	b.n	800eecc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee4c:	4b31      	ldr	r3, [pc, #196]	; (800ef14 <xTaskIncrementTick+0x150>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	68db      	ldr	r3, [r3, #12]
 800ee52:	68db      	ldr	r3, [r3, #12]
 800ee54:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	685b      	ldr	r3, [r3, #4]
 800ee5a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ee5c:	693a      	ldr	r2, [r7, #16]
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	429a      	cmp	r2, r3
 800ee62:	d203      	bcs.n	800ee6c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ee64:	4a2e      	ldr	r2, [pc, #184]	; (800ef20 <xTaskIncrementTick+0x15c>)
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ee6a:	e02f      	b.n	800eecc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	3304      	adds	r3, #4
 800ee70:	4618      	mov	r0, r3
 800ee72:	f7fe fc91 	bl	800d798 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d004      	beq.n	800ee88 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	3318      	adds	r3, #24
 800ee82:	4618      	mov	r0, r3
 800ee84:	f7fe fc88 	bl	800d798 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee8c:	4b25      	ldr	r3, [pc, #148]	; (800ef24 <xTaskIncrementTick+0x160>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d903      	bls.n	800ee9c <xTaskIncrementTick+0xd8>
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee98:	4a22      	ldr	r2, [pc, #136]	; (800ef24 <xTaskIncrementTick+0x160>)
 800ee9a:	6013      	str	r3, [r2, #0]
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eea0:	4613      	mov	r3, r2
 800eea2:	009b      	lsls	r3, r3, #2
 800eea4:	4413      	add	r3, r2
 800eea6:	009b      	lsls	r3, r3, #2
 800eea8:	4a1f      	ldr	r2, [pc, #124]	; (800ef28 <xTaskIncrementTick+0x164>)
 800eeaa:	441a      	add	r2, r3
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	3304      	adds	r3, #4
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	4610      	mov	r0, r2
 800eeb4:	f7fe fc13 	bl	800d6de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eebc:	4b1b      	ldr	r3, [pc, #108]	; (800ef2c <xTaskIncrementTick+0x168>)
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d3b8      	bcc.n	800ee38 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800eec6:	2301      	movs	r3, #1
 800eec8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eeca:	e7b5      	b.n	800ee38 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800eecc:	4b17      	ldr	r3, [pc, #92]	; (800ef2c <xTaskIncrementTick+0x168>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eed2:	4915      	ldr	r1, [pc, #84]	; (800ef28 <xTaskIncrementTick+0x164>)
 800eed4:	4613      	mov	r3, r2
 800eed6:	009b      	lsls	r3, r3, #2
 800eed8:	4413      	add	r3, r2
 800eeda:	009b      	lsls	r3, r3, #2
 800eedc:	440b      	add	r3, r1
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	2b01      	cmp	r3, #1
 800eee2:	d901      	bls.n	800eee8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800eee4:	2301      	movs	r3, #1
 800eee6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800eee8:	4b11      	ldr	r3, [pc, #68]	; (800ef30 <xTaskIncrementTick+0x16c>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d007      	beq.n	800ef00 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800eef0:	2301      	movs	r3, #1
 800eef2:	617b      	str	r3, [r7, #20]
 800eef4:	e004      	b.n	800ef00 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800eef6:	4b0f      	ldr	r3, [pc, #60]	; (800ef34 <xTaskIncrementTick+0x170>)
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	3301      	adds	r3, #1
 800eefc:	4a0d      	ldr	r2, [pc, #52]	; (800ef34 <xTaskIncrementTick+0x170>)
 800eefe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ef00:	697b      	ldr	r3, [r7, #20]
}
 800ef02:	4618      	mov	r0, r3
 800ef04:	3718      	adds	r7, #24
 800ef06:	46bd      	mov	sp, r7
 800ef08:	bd80      	pop	{r7, pc}
 800ef0a:	bf00      	nop
 800ef0c:	24004824 	.word	0x24004824
 800ef10:	24004800 	.word	0x24004800
 800ef14:	240047b4 	.word	0x240047b4
 800ef18:	240047b8 	.word	0x240047b8
 800ef1c:	24004814 	.word	0x24004814
 800ef20:	2400481c 	.word	0x2400481c
 800ef24:	24004804 	.word	0x24004804
 800ef28:	2400432c 	.word	0x2400432c
 800ef2c:	24004328 	.word	0x24004328
 800ef30:	24004810 	.word	0x24004810
 800ef34:	2400480c 	.word	0x2400480c

0800ef38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ef38:	b480      	push	{r7}
 800ef3a:	b085      	sub	sp, #20
 800ef3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ef3e:	4b28      	ldr	r3, [pc, #160]	; (800efe0 <vTaskSwitchContext+0xa8>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d003      	beq.n	800ef4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ef46:	4b27      	ldr	r3, [pc, #156]	; (800efe4 <vTaskSwitchContext+0xac>)
 800ef48:	2201      	movs	r2, #1
 800ef4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ef4c:	e041      	b.n	800efd2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ef4e:	4b25      	ldr	r3, [pc, #148]	; (800efe4 <vTaskSwitchContext+0xac>)
 800ef50:	2200      	movs	r2, #0
 800ef52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef54:	4b24      	ldr	r3, [pc, #144]	; (800efe8 <vTaskSwitchContext+0xb0>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	60fb      	str	r3, [r7, #12]
 800ef5a:	e010      	b.n	800ef7e <vTaskSwitchContext+0x46>
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d10a      	bne.n	800ef78 <vTaskSwitchContext+0x40>
	__asm volatile
 800ef62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef66:	f383 8811 	msr	BASEPRI, r3
 800ef6a:	f3bf 8f6f 	isb	sy
 800ef6e:	f3bf 8f4f 	dsb	sy
 800ef72:	607b      	str	r3, [r7, #4]
}
 800ef74:	bf00      	nop
 800ef76:	e7fe      	b.n	800ef76 <vTaskSwitchContext+0x3e>
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	3b01      	subs	r3, #1
 800ef7c:	60fb      	str	r3, [r7, #12]
 800ef7e:	491b      	ldr	r1, [pc, #108]	; (800efec <vTaskSwitchContext+0xb4>)
 800ef80:	68fa      	ldr	r2, [r7, #12]
 800ef82:	4613      	mov	r3, r2
 800ef84:	009b      	lsls	r3, r3, #2
 800ef86:	4413      	add	r3, r2
 800ef88:	009b      	lsls	r3, r3, #2
 800ef8a:	440b      	add	r3, r1
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d0e4      	beq.n	800ef5c <vTaskSwitchContext+0x24>
 800ef92:	68fa      	ldr	r2, [r7, #12]
 800ef94:	4613      	mov	r3, r2
 800ef96:	009b      	lsls	r3, r3, #2
 800ef98:	4413      	add	r3, r2
 800ef9a:	009b      	lsls	r3, r3, #2
 800ef9c:	4a13      	ldr	r2, [pc, #76]	; (800efec <vTaskSwitchContext+0xb4>)
 800ef9e:	4413      	add	r3, r2
 800efa0:	60bb      	str	r3, [r7, #8]
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	685b      	ldr	r3, [r3, #4]
 800efa6:	685a      	ldr	r2, [r3, #4]
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	605a      	str	r2, [r3, #4]
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	685a      	ldr	r2, [r3, #4]
 800efb0:	68bb      	ldr	r3, [r7, #8]
 800efb2:	3308      	adds	r3, #8
 800efb4:	429a      	cmp	r2, r3
 800efb6:	d104      	bne.n	800efc2 <vTaskSwitchContext+0x8a>
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	685b      	ldr	r3, [r3, #4]
 800efbc:	685a      	ldr	r2, [r3, #4]
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	605a      	str	r2, [r3, #4]
 800efc2:	68bb      	ldr	r3, [r7, #8]
 800efc4:	685b      	ldr	r3, [r3, #4]
 800efc6:	68db      	ldr	r3, [r3, #12]
 800efc8:	4a09      	ldr	r2, [pc, #36]	; (800eff0 <vTaskSwitchContext+0xb8>)
 800efca:	6013      	str	r3, [r2, #0]
 800efcc:	4a06      	ldr	r2, [pc, #24]	; (800efe8 <vTaskSwitchContext+0xb0>)
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	6013      	str	r3, [r2, #0]
}
 800efd2:	bf00      	nop
 800efd4:	3714      	adds	r7, #20
 800efd6:	46bd      	mov	sp, r7
 800efd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efdc:	4770      	bx	lr
 800efde:	bf00      	nop
 800efe0:	24004824 	.word	0x24004824
 800efe4:	24004810 	.word	0x24004810
 800efe8:	24004804 	.word	0x24004804
 800efec:	2400432c 	.word	0x2400432c
 800eff0:	24004328 	.word	0x24004328

0800eff4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b084      	sub	sp, #16
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
 800effc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d10a      	bne.n	800f01a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f008:	f383 8811 	msr	BASEPRI, r3
 800f00c:	f3bf 8f6f 	isb	sy
 800f010:	f3bf 8f4f 	dsb	sy
 800f014:	60fb      	str	r3, [r7, #12]
}
 800f016:	bf00      	nop
 800f018:	e7fe      	b.n	800f018 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f01a:	4b07      	ldr	r3, [pc, #28]	; (800f038 <vTaskPlaceOnEventList+0x44>)
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	3318      	adds	r3, #24
 800f020:	4619      	mov	r1, r3
 800f022:	6878      	ldr	r0, [r7, #4]
 800f024:	f7fe fb7f 	bl	800d726 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f028:	2101      	movs	r1, #1
 800f02a:	6838      	ldr	r0, [r7, #0]
 800f02c:	f000 fa7c 	bl	800f528 <prvAddCurrentTaskToDelayedList>
}
 800f030:	bf00      	nop
 800f032:	3710      	adds	r7, #16
 800f034:	46bd      	mov	sp, r7
 800f036:	bd80      	pop	{r7, pc}
 800f038:	24004328 	.word	0x24004328

0800f03c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b086      	sub	sp, #24
 800f040:	af00      	add	r7, sp, #0
 800f042:	60f8      	str	r0, [r7, #12]
 800f044:	60b9      	str	r1, [r7, #8]
 800f046:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d10a      	bne.n	800f064 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f052:	f383 8811 	msr	BASEPRI, r3
 800f056:	f3bf 8f6f 	isb	sy
 800f05a:	f3bf 8f4f 	dsb	sy
 800f05e:	617b      	str	r3, [r7, #20]
}
 800f060:	bf00      	nop
 800f062:	e7fe      	b.n	800f062 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f064:	4b0a      	ldr	r3, [pc, #40]	; (800f090 <vTaskPlaceOnEventListRestricted+0x54>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	3318      	adds	r3, #24
 800f06a:	4619      	mov	r1, r3
 800f06c:	68f8      	ldr	r0, [r7, #12]
 800f06e:	f7fe fb36 	bl	800d6de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d002      	beq.n	800f07e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f078:	f04f 33ff 	mov.w	r3, #4294967295
 800f07c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f07e:	6879      	ldr	r1, [r7, #4]
 800f080:	68b8      	ldr	r0, [r7, #8]
 800f082:	f000 fa51 	bl	800f528 <prvAddCurrentTaskToDelayedList>
	}
 800f086:	bf00      	nop
 800f088:	3718      	adds	r7, #24
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}
 800f08e:	bf00      	nop
 800f090:	24004328 	.word	0x24004328

0800f094 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b086      	sub	sp, #24
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	68db      	ldr	r3, [r3, #12]
 800f0a0:	68db      	ldr	r3, [r3, #12]
 800f0a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f0a4:	693b      	ldr	r3, [r7, #16]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d10a      	bne.n	800f0c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ae:	f383 8811 	msr	BASEPRI, r3
 800f0b2:	f3bf 8f6f 	isb	sy
 800f0b6:	f3bf 8f4f 	dsb	sy
 800f0ba:	60fb      	str	r3, [r7, #12]
}
 800f0bc:	bf00      	nop
 800f0be:	e7fe      	b.n	800f0be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f0c0:	693b      	ldr	r3, [r7, #16]
 800f0c2:	3318      	adds	r3, #24
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f7fe fb67 	bl	800d798 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f0ca:	4b1e      	ldr	r3, [pc, #120]	; (800f144 <xTaskRemoveFromEventList+0xb0>)
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d11d      	bne.n	800f10e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f0d2:	693b      	ldr	r3, [r7, #16]
 800f0d4:	3304      	adds	r3, #4
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f7fe fb5e 	bl	800d798 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f0dc:	693b      	ldr	r3, [r7, #16]
 800f0de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0e0:	4b19      	ldr	r3, [pc, #100]	; (800f148 <xTaskRemoveFromEventList+0xb4>)
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	d903      	bls.n	800f0f0 <xTaskRemoveFromEventList+0x5c>
 800f0e8:	693b      	ldr	r3, [r7, #16]
 800f0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0ec:	4a16      	ldr	r2, [pc, #88]	; (800f148 <xTaskRemoveFromEventList+0xb4>)
 800f0ee:	6013      	str	r3, [r2, #0]
 800f0f0:	693b      	ldr	r3, [r7, #16]
 800f0f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0f4:	4613      	mov	r3, r2
 800f0f6:	009b      	lsls	r3, r3, #2
 800f0f8:	4413      	add	r3, r2
 800f0fa:	009b      	lsls	r3, r3, #2
 800f0fc:	4a13      	ldr	r2, [pc, #76]	; (800f14c <xTaskRemoveFromEventList+0xb8>)
 800f0fe:	441a      	add	r2, r3
 800f100:	693b      	ldr	r3, [r7, #16]
 800f102:	3304      	adds	r3, #4
 800f104:	4619      	mov	r1, r3
 800f106:	4610      	mov	r0, r2
 800f108:	f7fe fae9 	bl	800d6de <vListInsertEnd>
 800f10c:	e005      	b.n	800f11a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f10e:	693b      	ldr	r3, [r7, #16]
 800f110:	3318      	adds	r3, #24
 800f112:	4619      	mov	r1, r3
 800f114:	480e      	ldr	r0, [pc, #56]	; (800f150 <xTaskRemoveFromEventList+0xbc>)
 800f116:	f7fe fae2 	bl	800d6de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f11a:	693b      	ldr	r3, [r7, #16]
 800f11c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f11e:	4b0d      	ldr	r3, [pc, #52]	; (800f154 <xTaskRemoveFromEventList+0xc0>)
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f124:	429a      	cmp	r2, r3
 800f126:	d905      	bls.n	800f134 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f128:	2301      	movs	r3, #1
 800f12a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f12c:	4b0a      	ldr	r3, [pc, #40]	; (800f158 <xTaskRemoveFromEventList+0xc4>)
 800f12e:	2201      	movs	r2, #1
 800f130:	601a      	str	r2, [r3, #0]
 800f132:	e001      	b.n	800f138 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f134:	2300      	movs	r3, #0
 800f136:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f138:	697b      	ldr	r3, [r7, #20]
}
 800f13a:	4618      	mov	r0, r3
 800f13c:	3718      	adds	r7, #24
 800f13e:	46bd      	mov	sp, r7
 800f140:	bd80      	pop	{r7, pc}
 800f142:	bf00      	nop
 800f144:	24004824 	.word	0x24004824
 800f148:	24004804 	.word	0x24004804
 800f14c:	2400432c 	.word	0x2400432c
 800f150:	240047bc 	.word	0x240047bc
 800f154:	24004328 	.word	0x24004328
 800f158:	24004810 	.word	0x24004810

0800f15c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f15c:	b480      	push	{r7}
 800f15e:	b083      	sub	sp, #12
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f164:	4b06      	ldr	r3, [pc, #24]	; (800f180 <vTaskInternalSetTimeOutState+0x24>)
 800f166:	681a      	ldr	r2, [r3, #0]
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f16c:	4b05      	ldr	r3, [pc, #20]	; (800f184 <vTaskInternalSetTimeOutState+0x28>)
 800f16e:	681a      	ldr	r2, [r3, #0]
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	605a      	str	r2, [r3, #4]
}
 800f174:	bf00      	nop
 800f176:	370c      	adds	r7, #12
 800f178:	46bd      	mov	sp, r7
 800f17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17e:	4770      	bx	lr
 800f180:	24004814 	.word	0x24004814
 800f184:	24004800 	.word	0x24004800

0800f188 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b088      	sub	sp, #32
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
 800f190:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d10a      	bne.n	800f1ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f19c:	f383 8811 	msr	BASEPRI, r3
 800f1a0:	f3bf 8f6f 	isb	sy
 800f1a4:	f3bf 8f4f 	dsb	sy
 800f1a8:	613b      	str	r3, [r7, #16]
}
 800f1aa:	bf00      	nop
 800f1ac:	e7fe      	b.n	800f1ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d10a      	bne.n	800f1ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b8:	f383 8811 	msr	BASEPRI, r3
 800f1bc:	f3bf 8f6f 	isb	sy
 800f1c0:	f3bf 8f4f 	dsb	sy
 800f1c4:	60fb      	str	r3, [r7, #12]
}
 800f1c6:	bf00      	nop
 800f1c8:	e7fe      	b.n	800f1c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f1ca:	f7fe fc3b 	bl	800da44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f1ce:	4b1d      	ldr	r3, [pc, #116]	; (800f244 <xTaskCheckForTimeOut+0xbc>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	685b      	ldr	r3, [r3, #4]
 800f1d8:	69ba      	ldr	r2, [r7, #24]
 800f1da:	1ad3      	subs	r3, r2, r3
 800f1dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1e6:	d102      	bne.n	800f1ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	61fb      	str	r3, [r7, #28]
 800f1ec:	e023      	b.n	800f236 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681a      	ldr	r2, [r3, #0]
 800f1f2:	4b15      	ldr	r3, [pc, #84]	; (800f248 <xTaskCheckForTimeOut+0xc0>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	429a      	cmp	r2, r3
 800f1f8:	d007      	beq.n	800f20a <xTaskCheckForTimeOut+0x82>
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	685b      	ldr	r3, [r3, #4]
 800f1fe:	69ba      	ldr	r2, [r7, #24]
 800f200:	429a      	cmp	r2, r3
 800f202:	d302      	bcc.n	800f20a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f204:	2301      	movs	r3, #1
 800f206:	61fb      	str	r3, [r7, #28]
 800f208:	e015      	b.n	800f236 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	697a      	ldr	r2, [r7, #20]
 800f210:	429a      	cmp	r2, r3
 800f212:	d20b      	bcs.n	800f22c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	681a      	ldr	r2, [r3, #0]
 800f218:	697b      	ldr	r3, [r7, #20]
 800f21a:	1ad2      	subs	r2, r2, r3
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f7ff ff9b 	bl	800f15c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f226:	2300      	movs	r3, #0
 800f228:	61fb      	str	r3, [r7, #28]
 800f22a:	e004      	b.n	800f236 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	2200      	movs	r2, #0
 800f230:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f232:	2301      	movs	r3, #1
 800f234:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f236:	f7fe fc35 	bl	800daa4 <vPortExitCritical>

	return xReturn;
 800f23a:	69fb      	ldr	r3, [r7, #28]
}
 800f23c:	4618      	mov	r0, r3
 800f23e:	3720      	adds	r7, #32
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}
 800f244:	24004800 	.word	0x24004800
 800f248:	24004814 	.word	0x24004814

0800f24c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f24c:	b480      	push	{r7}
 800f24e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f250:	4b03      	ldr	r3, [pc, #12]	; (800f260 <vTaskMissedYield+0x14>)
 800f252:	2201      	movs	r2, #1
 800f254:	601a      	str	r2, [r3, #0]
}
 800f256:	bf00      	nop
 800f258:	46bd      	mov	sp, r7
 800f25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25e:	4770      	bx	lr
 800f260:	24004810 	.word	0x24004810

0800f264 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b082      	sub	sp, #8
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f26c:	f000 f852 	bl	800f314 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f270:	4b06      	ldr	r3, [pc, #24]	; (800f28c <prvIdleTask+0x28>)
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	2b01      	cmp	r3, #1
 800f276:	d9f9      	bls.n	800f26c <prvIdleTask+0x8>
			{
				taskYIELD();
 800f278:	4b05      	ldr	r3, [pc, #20]	; (800f290 <prvIdleTask+0x2c>)
 800f27a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f27e:	601a      	str	r2, [r3, #0]
 800f280:	f3bf 8f4f 	dsb	sy
 800f284:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f288:	e7f0      	b.n	800f26c <prvIdleTask+0x8>
 800f28a:	bf00      	nop
 800f28c:	2400432c 	.word	0x2400432c
 800f290:	e000ed04 	.word	0xe000ed04

0800f294 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b082      	sub	sp, #8
 800f298:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f29a:	2300      	movs	r3, #0
 800f29c:	607b      	str	r3, [r7, #4]
 800f29e:	e00c      	b.n	800f2ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f2a0:	687a      	ldr	r2, [r7, #4]
 800f2a2:	4613      	mov	r3, r2
 800f2a4:	009b      	lsls	r3, r3, #2
 800f2a6:	4413      	add	r3, r2
 800f2a8:	009b      	lsls	r3, r3, #2
 800f2aa:	4a12      	ldr	r2, [pc, #72]	; (800f2f4 <prvInitialiseTaskLists+0x60>)
 800f2ac:	4413      	add	r3, r2
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f7fe f9e8 	bl	800d684 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	3301      	adds	r3, #1
 800f2b8:	607b      	str	r3, [r7, #4]
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2b37      	cmp	r3, #55	; 0x37
 800f2be:	d9ef      	bls.n	800f2a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f2c0:	480d      	ldr	r0, [pc, #52]	; (800f2f8 <prvInitialiseTaskLists+0x64>)
 800f2c2:	f7fe f9df 	bl	800d684 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f2c6:	480d      	ldr	r0, [pc, #52]	; (800f2fc <prvInitialiseTaskLists+0x68>)
 800f2c8:	f7fe f9dc 	bl	800d684 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f2cc:	480c      	ldr	r0, [pc, #48]	; (800f300 <prvInitialiseTaskLists+0x6c>)
 800f2ce:	f7fe f9d9 	bl	800d684 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f2d2:	480c      	ldr	r0, [pc, #48]	; (800f304 <prvInitialiseTaskLists+0x70>)
 800f2d4:	f7fe f9d6 	bl	800d684 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f2d8:	480b      	ldr	r0, [pc, #44]	; (800f308 <prvInitialiseTaskLists+0x74>)
 800f2da:	f7fe f9d3 	bl	800d684 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f2de:	4b0b      	ldr	r3, [pc, #44]	; (800f30c <prvInitialiseTaskLists+0x78>)
 800f2e0:	4a05      	ldr	r2, [pc, #20]	; (800f2f8 <prvInitialiseTaskLists+0x64>)
 800f2e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f2e4:	4b0a      	ldr	r3, [pc, #40]	; (800f310 <prvInitialiseTaskLists+0x7c>)
 800f2e6:	4a05      	ldr	r2, [pc, #20]	; (800f2fc <prvInitialiseTaskLists+0x68>)
 800f2e8:	601a      	str	r2, [r3, #0]
}
 800f2ea:	bf00      	nop
 800f2ec:	3708      	adds	r7, #8
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd80      	pop	{r7, pc}
 800f2f2:	bf00      	nop
 800f2f4:	2400432c 	.word	0x2400432c
 800f2f8:	2400478c 	.word	0x2400478c
 800f2fc:	240047a0 	.word	0x240047a0
 800f300:	240047bc 	.word	0x240047bc
 800f304:	240047d0 	.word	0x240047d0
 800f308:	240047e8 	.word	0x240047e8
 800f30c:	240047b4 	.word	0x240047b4
 800f310:	240047b8 	.word	0x240047b8

0800f314 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b082      	sub	sp, #8
 800f318:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f31a:	e019      	b.n	800f350 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f31c:	f7fe fb92 	bl	800da44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f320:	4b10      	ldr	r3, [pc, #64]	; (800f364 <prvCheckTasksWaitingTermination+0x50>)
 800f322:	68db      	ldr	r3, [r3, #12]
 800f324:	68db      	ldr	r3, [r3, #12]
 800f326:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	3304      	adds	r3, #4
 800f32c:	4618      	mov	r0, r3
 800f32e:	f7fe fa33 	bl	800d798 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f332:	4b0d      	ldr	r3, [pc, #52]	; (800f368 <prvCheckTasksWaitingTermination+0x54>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	3b01      	subs	r3, #1
 800f338:	4a0b      	ldr	r2, [pc, #44]	; (800f368 <prvCheckTasksWaitingTermination+0x54>)
 800f33a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f33c:	4b0b      	ldr	r3, [pc, #44]	; (800f36c <prvCheckTasksWaitingTermination+0x58>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	3b01      	subs	r3, #1
 800f342:	4a0a      	ldr	r2, [pc, #40]	; (800f36c <prvCheckTasksWaitingTermination+0x58>)
 800f344:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f346:	f7fe fbad 	bl	800daa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f000 f810 	bl	800f370 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f350:	4b06      	ldr	r3, [pc, #24]	; (800f36c <prvCheckTasksWaitingTermination+0x58>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d1e1      	bne.n	800f31c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f358:	bf00      	nop
 800f35a:	bf00      	nop
 800f35c:	3708      	adds	r7, #8
 800f35e:	46bd      	mov	sp, r7
 800f360:	bd80      	pop	{r7, pc}
 800f362:	bf00      	nop
 800f364:	240047d0 	.word	0x240047d0
 800f368:	240047fc 	.word	0x240047fc
 800f36c:	240047e4 	.word	0x240047e4

0800f370 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f370:	b580      	push	{r7, lr}
 800f372:	b084      	sub	sp, #16
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d108      	bne.n	800f394 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f386:	4618      	mov	r0, r3
 800f388:	f7fe f85e 	bl	800d448 <vPortFree>
				vPortFree( pxTCB );
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	f7fe f85b 	bl	800d448 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f392:	e018      	b.n	800f3c6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f39a:	2b01      	cmp	r3, #1
 800f39c:	d103      	bne.n	800f3a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f7fe f852 	bl	800d448 <vPortFree>
	}
 800f3a4:	e00f      	b.n	800f3c6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f3ac:	2b02      	cmp	r3, #2
 800f3ae:	d00a      	beq.n	800f3c6 <prvDeleteTCB+0x56>
	__asm volatile
 800f3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3b4:	f383 8811 	msr	BASEPRI, r3
 800f3b8:	f3bf 8f6f 	isb	sy
 800f3bc:	f3bf 8f4f 	dsb	sy
 800f3c0:	60fb      	str	r3, [r7, #12]
}
 800f3c2:	bf00      	nop
 800f3c4:	e7fe      	b.n	800f3c4 <prvDeleteTCB+0x54>
	}
 800f3c6:	bf00      	nop
 800f3c8:	3710      	adds	r7, #16
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	bd80      	pop	{r7, pc}
	...

0800f3d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f3d0:	b480      	push	{r7}
 800f3d2:	b083      	sub	sp, #12
 800f3d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f3d6:	4b0c      	ldr	r3, [pc, #48]	; (800f408 <prvResetNextTaskUnblockTime+0x38>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d104      	bne.n	800f3ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f3e0:	4b0a      	ldr	r3, [pc, #40]	; (800f40c <prvResetNextTaskUnblockTime+0x3c>)
 800f3e2:	f04f 32ff 	mov.w	r2, #4294967295
 800f3e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f3e8:	e008      	b.n	800f3fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3ea:	4b07      	ldr	r3, [pc, #28]	; (800f408 <prvResetNextTaskUnblockTime+0x38>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	68db      	ldr	r3, [r3, #12]
 800f3f0:	68db      	ldr	r3, [r3, #12]
 800f3f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	685b      	ldr	r3, [r3, #4]
 800f3f8:	4a04      	ldr	r2, [pc, #16]	; (800f40c <prvResetNextTaskUnblockTime+0x3c>)
 800f3fa:	6013      	str	r3, [r2, #0]
}
 800f3fc:	bf00      	nop
 800f3fe:	370c      	adds	r7, #12
 800f400:	46bd      	mov	sp, r7
 800f402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f406:	4770      	bx	lr
 800f408:	240047b4 	.word	0x240047b4
 800f40c:	2400481c 	.word	0x2400481c

0800f410 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f410:	b480      	push	{r7}
 800f412:	b083      	sub	sp, #12
 800f414:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f416:	4b0b      	ldr	r3, [pc, #44]	; (800f444 <xTaskGetSchedulerState+0x34>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d102      	bne.n	800f424 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f41e:	2301      	movs	r3, #1
 800f420:	607b      	str	r3, [r7, #4]
 800f422:	e008      	b.n	800f436 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f424:	4b08      	ldr	r3, [pc, #32]	; (800f448 <xTaskGetSchedulerState+0x38>)
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d102      	bne.n	800f432 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f42c:	2302      	movs	r3, #2
 800f42e:	607b      	str	r3, [r7, #4]
 800f430:	e001      	b.n	800f436 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f432:	2300      	movs	r3, #0
 800f434:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f436:	687b      	ldr	r3, [r7, #4]
	}
 800f438:	4618      	mov	r0, r3
 800f43a:	370c      	adds	r7, #12
 800f43c:	46bd      	mov	sp, r7
 800f43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f442:	4770      	bx	lr
 800f444:	24004808 	.word	0x24004808
 800f448:	24004824 	.word	0x24004824

0800f44c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b086      	sub	sp, #24
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f458:	2300      	movs	r3, #0
 800f45a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d056      	beq.n	800f510 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f462:	4b2e      	ldr	r3, [pc, #184]	; (800f51c <xTaskPriorityDisinherit+0xd0>)
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	693a      	ldr	r2, [r7, #16]
 800f468:	429a      	cmp	r2, r3
 800f46a:	d00a      	beq.n	800f482 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f470:	f383 8811 	msr	BASEPRI, r3
 800f474:	f3bf 8f6f 	isb	sy
 800f478:	f3bf 8f4f 	dsb	sy
 800f47c:	60fb      	str	r3, [r7, #12]
}
 800f47e:	bf00      	nop
 800f480:	e7fe      	b.n	800f480 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f482:	693b      	ldr	r3, [r7, #16]
 800f484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f486:	2b00      	cmp	r3, #0
 800f488:	d10a      	bne.n	800f4a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f48e:	f383 8811 	msr	BASEPRI, r3
 800f492:	f3bf 8f6f 	isb	sy
 800f496:	f3bf 8f4f 	dsb	sy
 800f49a:	60bb      	str	r3, [r7, #8]
}
 800f49c:	bf00      	nop
 800f49e:	e7fe      	b.n	800f49e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f4a0:	693b      	ldr	r3, [r7, #16]
 800f4a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4a4:	1e5a      	subs	r2, r3, #1
 800f4a6:	693b      	ldr	r3, [r7, #16]
 800f4a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4ae:	693b      	ldr	r3, [r7, #16]
 800f4b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f4b2:	429a      	cmp	r2, r3
 800f4b4:	d02c      	beq.n	800f510 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d128      	bne.n	800f510 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f4be:	693b      	ldr	r3, [r7, #16]
 800f4c0:	3304      	adds	r3, #4
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f7fe f968 	bl	800d798 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f4c8:	693b      	ldr	r3, [r7, #16]
 800f4ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f4cc:	693b      	ldr	r3, [r7, #16]
 800f4ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4d0:	693b      	ldr	r3, [r7, #16]
 800f4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f4d8:	693b      	ldr	r3, [r7, #16]
 800f4da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f4dc:	693b      	ldr	r3, [r7, #16]
 800f4de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4e0:	4b0f      	ldr	r3, [pc, #60]	; (800f520 <xTaskPriorityDisinherit+0xd4>)
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	d903      	bls.n	800f4f0 <xTaskPriorityDisinherit+0xa4>
 800f4e8:	693b      	ldr	r3, [r7, #16]
 800f4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4ec:	4a0c      	ldr	r2, [pc, #48]	; (800f520 <xTaskPriorityDisinherit+0xd4>)
 800f4ee:	6013      	str	r3, [r2, #0]
 800f4f0:	693b      	ldr	r3, [r7, #16]
 800f4f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4f4:	4613      	mov	r3, r2
 800f4f6:	009b      	lsls	r3, r3, #2
 800f4f8:	4413      	add	r3, r2
 800f4fa:	009b      	lsls	r3, r3, #2
 800f4fc:	4a09      	ldr	r2, [pc, #36]	; (800f524 <xTaskPriorityDisinherit+0xd8>)
 800f4fe:	441a      	add	r2, r3
 800f500:	693b      	ldr	r3, [r7, #16]
 800f502:	3304      	adds	r3, #4
 800f504:	4619      	mov	r1, r3
 800f506:	4610      	mov	r0, r2
 800f508:	f7fe f8e9 	bl	800d6de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f50c:	2301      	movs	r3, #1
 800f50e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f510:	697b      	ldr	r3, [r7, #20]
	}
 800f512:	4618      	mov	r0, r3
 800f514:	3718      	adds	r7, #24
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
 800f51a:	bf00      	nop
 800f51c:	24004328 	.word	0x24004328
 800f520:	24004804 	.word	0x24004804
 800f524:	2400432c 	.word	0x2400432c

0800f528 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b084      	sub	sp, #16
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f532:	4b21      	ldr	r3, [pc, #132]	; (800f5b8 <prvAddCurrentTaskToDelayedList+0x90>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f538:	4b20      	ldr	r3, [pc, #128]	; (800f5bc <prvAddCurrentTaskToDelayedList+0x94>)
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	3304      	adds	r3, #4
 800f53e:	4618      	mov	r0, r3
 800f540:	f7fe f92a 	bl	800d798 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f54a:	d10a      	bne.n	800f562 <prvAddCurrentTaskToDelayedList+0x3a>
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d007      	beq.n	800f562 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f552:	4b1a      	ldr	r3, [pc, #104]	; (800f5bc <prvAddCurrentTaskToDelayedList+0x94>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	3304      	adds	r3, #4
 800f558:	4619      	mov	r1, r3
 800f55a:	4819      	ldr	r0, [pc, #100]	; (800f5c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800f55c:	f7fe f8bf 	bl	800d6de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f560:	e026      	b.n	800f5b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f562:	68fa      	ldr	r2, [r7, #12]
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	4413      	add	r3, r2
 800f568:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f56a:	4b14      	ldr	r3, [pc, #80]	; (800f5bc <prvAddCurrentTaskToDelayedList+0x94>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	68ba      	ldr	r2, [r7, #8]
 800f570:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f572:	68ba      	ldr	r2, [r7, #8]
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	429a      	cmp	r2, r3
 800f578:	d209      	bcs.n	800f58e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f57a:	4b12      	ldr	r3, [pc, #72]	; (800f5c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f57c:	681a      	ldr	r2, [r3, #0]
 800f57e:	4b0f      	ldr	r3, [pc, #60]	; (800f5bc <prvAddCurrentTaskToDelayedList+0x94>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	3304      	adds	r3, #4
 800f584:	4619      	mov	r1, r3
 800f586:	4610      	mov	r0, r2
 800f588:	f7fe f8cd 	bl	800d726 <vListInsert>
}
 800f58c:	e010      	b.n	800f5b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f58e:	4b0e      	ldr	r3, [pc, #56]	; (800f5c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f590:	681a      	ldr	r2, [r3, #0]
 800f592:	4b0a      	ldr	r3, [pc, #40]	; (800f5bc <prvAddCurrentTaskToDelayedList+0x94>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	3304      	adds	r3, #4
 800f598:	4619      	mov	r1, r3
 800f59a:	4610      	mov	r0, r2
 800f59c:	f7fe f8c3 	bl	800d726 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f5a0:	4b0a      	ldr	r3, [pc, #40]	; (800f5cc <prvAddCurrentTaskToDelayedList+0xa4>)
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	68ba      	ldr	r2, [r7, #8]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d202      	bcs.n	800f5b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f5aa:	4a08      	ldr	r2, [pc, #32]	; (800f5cc <prvAddCurrentTaskToDelayedList+0xa4>)
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	6013      	str	r3, [r2, #0]
}
 800f5b0:	bf00      	nop
 800f5b2:	3710      	adds	r7, #16
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	bd80      	pop	{r7, pc}
 800f5b8:	24004800 	.word	0x24004800
 800f5bc:	24004328 	.word	0x24004328
 800f5c0:	240047e8 	.word	0x240047e8
 800f5c4:	240047b8 	.word	0x240047b8
 800f5c8:	240047b4 	.word	0x240047b4
 800f5cc:	2400481c 	.word	0x2400481c

0800f5d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b08a      	sub	sp, #40	; 0x28
 800f5d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f5da:	f000 fb07 	bl	800fbec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f5de:	4b1c      	ldr	r3, [pc, #112]	; (800f650 <xTimerCreateTimerTask+0x80>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d021      	beq.n	800f62a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f5ee:	1d3a      	adds	r2, r7, #4
 800f5f0:	f107 0108 	add.w	r1, r7, #8
 800f5f4:	f107 030c 	add.w	r3, r7, #12
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	f7fd fe3f 	bl	800d27c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f5fe:	6879      	ldr	r1, [r7, #4]
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	68fa      	ldr	r2, [r7, #12]
 800f604:	9202      	str	r2, [sp, #8]
 800f606:	9301      	str	r3, [sp, #4]
 800f608:	2302      	movs	r3, #2
 800f60a:	9300      	str	r3, [sp, #0]
 800f60c:	2300      	movs	r3, #0
 800f60e:	460a      	mov	r2, r1
 800f610:	4910      	ldr	r1, [pc, #64]	; (800f654 <xTimerCreateTimerTask+0x84>)
 800f612:	4811      	ldr	r0, [pc, #68]	; (800f658 <xTimerCreateTimerTask+0x88>)
 800f614:	f7ff f8de 	bl	800e7d4 <xTaskCreateStatic>
 800f618:	4603      	mov	r3, r0
 800f61a:	4a10      	ldr	r2, [pc, #64]	; (800f65c <xTimerCreateTimerTask+0x8c>)
 800f61c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f61e:	4b0f      	ldr	r3, [pc, #60]	; (800f65c <xTimerCreateTimerTask+0x8c>)
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d001      	beq.n	800f62a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f626:	2301      	movs	r3, #1
 800f628:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d10a      	bne.n	800f646 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f634:	f383 8811 	msr	BASEPRI, r3
 800f638:	f3bf 8f6f 	isb	sy
 800f63c:	f3bf 8f4f 	dsb	sy
 800f640:	613b      	str	r3, [r7, #16]
}
 800f642:	bf00      	nop
 800f644:	e7fe      	b.n	800f644 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f646:	697b      	ldr	r3, [r7, #20]
}
 800f648:	4618      	mov	r0, r3
 800f64a:	3718      	adds	r7, #24
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}
 800f650:	24004858 	.word	0x24004858
 800f654:	0800fe04 	.word	0x0800fe04
 800f658:	0800f795 	.word	0x0800f795
 800f65c:	2400485c 	.word	0x2400485c

0800f660 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b08a      	sub	sp, #40	; 0x28
 800f664:	af00      	add	r7, sp, #0
 800f666:	60f8      	str	r0, [r7, #12]
 800f668:	60b9      	str	r1, [r7, #8]
 800f66a:	607a      	str	r2, [r7, #4]
 800f66c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f66e:	2300      	movs	r3, #0
 800f670:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d10a      	bne.n	800f68e <xTimerGenericCommand+0x2e>
	__asm volatile
 800f678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f67c:	f383 8811 	msr	BASEPRI, r3
 800f680:	f3bf 8f6f 	isb	sy
 800f684:	f3bf 8f4f 	dsb	sy
 800f688:	623b      	str	r3, [r7, #32]
}
 800f68a:	bf00      	nop
 800f68c:	e7fe      	b.n	800f68c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f68e:	4b1a      	ldr	r3, [pc, #104]	; (800f6f8 <xTimerGenericCommand+0x98>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d02a      	beq.n	800f6ec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f696:	68bb      	ldr	r3, [r7, #8]
 800f698:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f6a2:	68bb      	ldr	r3, [r7, #8]
 800f6a4:	2b05      	cmp	r3, #5
 800f6a6:	dc18      	bgt.n	800f6da <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f6a8:	f7ff feb2 	bl	800f410 <xTaskGetSchedulerState>
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	2b02      	cmp	r3, #2
 800f6b0:	d109      	bne.n	800f6c6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f6b2:	4b11      	ldr	r3, [pc, #68]	; (800f6f8 <xTimerGenericCommand+0x98>)
 800f6b4:	6818      	ldr	r0, [r3, #0]
 800f6b6:	f107 0110 	add.w	r1, r7, #16
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6be:	f7fe fc21 	bl	800df04 <xQueueGenericSend>
 800f6c2:	6278      	str	r0, [r7, #36]	; 0x24
 800f6c4:	e012      	b.n	800f6ec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f6c6:	4b0c      	ldr	r3, [pc, #48]	; (800f6f8 <xTimerGenericCommand+0x98>)
 800f6c8:	6818      	ldr	r0, [r3, #0]
 800f6ca:	f107 0110 	add.w	r1, r7, #16
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	f7fe fc17 	bl	800df04 <xQueueGenericSend>
 800f6d6:	6278      	str	r0, [r7, #36]	; 0x24
 800f6d8:	e008      	b.n	800f6ec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f6da:	4b07      	ldr	r3, [pc, #28]	; (800f6f8 <xTimerGenericCommand+0x98>)
 800f6dc:	6818      	ldr	r0, [r3, #0]
 800f6de:	f107 0110 	add.w	r1, r7, #16
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	683a      	ldr	r2, [r7, #0]
 800f6e6:	f7fe fd0b 	bl	800e100 <xQueueGenericSendFromISR>
 800f6ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	3728      	adds	r7, #40	; 0x28
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}
 800f6f6:	bf00      	nop
 800f6f8:	24004858 	.word	0x24004858

0800f6fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b088      	sub	sp, #32
 800f700:	af02      	add	r7, sp, #8
 800f702:	6078      	str	r0, [r7, #4]
 800f704:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f706:	4b22      	ldr	r3, [pc, #136]	; (800f790 <prvProcessExpiredTimer+0x94>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	68db      	ldr	r3, [r3, #12]
 800f70c:	68db      	ldr	r3, [r3, #12]
 800f70e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	3304      	adds	r3, #4
 800f714:	4618      	mov	r0, r3
 800f716:	f7fe f83f 	bl	800d798 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f71a:	697b      	ldr	r3, [r7, #20]
 800f71c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f720:	f003 0304 	and.w	r3, r3, #4
 800f724:	2b00      	cmp	r3, #0
 800f726:	d022      	beq.n	800f76e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f728:	697b      	ldr	r3, [r7, #20]
 800f72a:	699a      	ldr	r2, [r3, #24]
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	18d1      	adds	r1, r2, r3
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	683a      	ldr	r2, [r7, #0]
 800f734:	6978      	ldr	r0, [r7, #20]
 800f736:	f000 f8d1 	bl	800f8dc <prvInsertTimerInActiveList>
 800f73a:	4603      	mov	r3, r0
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d01f      	beq.n	800f780 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f740:	2300      	movs	r3, #0
 800f742:	9300      	str	r3, [sp, #0]
 800f744:	2300      	movs	r3, #0
 800f746:	687a      	ldr	r2, [r7, #4]
 800f748:	2100      	movs	r1, #0
 800f74a:	6978      	ldr	r0, [r7, #20]
 800f74c:	f7ff ff88 	bl	800f660 <xTimerGenericCommand>
 800f750:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f752:	693b      	ldr	r3, [r7, #16]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d113      	bne.n	800f780 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f75c:	f383 8811 	msr	BASEPRI, r3
 800f760:	f3bf 8f6f 	isb	sy
 800f764:	f3bf 8f4f 	dsb	sy
 800f768:	60fb      	str	r3, [r7, #12]
}
 800f76a:	bf00      	nop
 800f76c:	e7fe      	b.n	800f76c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f76e:	697b      	ldr	r3, [r7, #20]
 800f770:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f774:	f023 0301 	bic.w	r3, r3, #1
 800f778:	b2da      	uxtb	r2, r3
 800f77a:	697b      	ldr	r3, [r7, #20]
 800f77c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	6a1b      	ldr	r3, [r3, #32]
 800f784:	6978      	ldr	r0, [r7, #20]
 800f786:	4798      	blx	r3
}
 800f788:	bf00      	nop
 800f78a:	3718      	adds	r7, #24
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}
 800f790:	24004850 	.word	0x24004850

0800f794 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b084      	sub	sp, #16
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f79c:	f107 0308 	add.w	r3, r7, #8
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	f000 f857 	bl	800f854 <prvGetNextExpireTime>
 800f7a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f7a8:	68bb      	ldr	r3, [r7, #8]
 800f7aa:	4619      	mov	r1, r3
 800f7ac:	68f8      	ldr	r0, [r7, #12]
 800f7ae:	f000 f803 	bl	800f7b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f7b2:	f000 f8d5 	bl	800f960 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f7b6:	e7f1      	b.n	800f79c <prvTimerTask+0x8>

0800f7b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b084      	sub	sp, #16
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
 800f7c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f7c2:	f7ff fa43 	bl	800ec4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f7c6:	f107 0308 	add.w	r3, r7, #8
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f000 f866 	bl	800f89c <prvSampleTimeNow>
 800f7d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f7d2:	68bb      	ldr	r3, [r7, #8]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d130      	bne.n	800f83a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d10a      	bne.n	800f7f4 <prvProcessTimerOrBlockTask+0x3c>
 800f7de:	687a      	ldr	r2, [r7, #4]
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	429a      	cmp	r2, r3
 800f7e4:	d806      	bhi.n	800f7f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f7e6:	f7ff fa3f 	bl	800ec68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f7ea:	68f9      	ldr	r1, [r7, #12]
 800f7ec:	6878      	ldr	r0, [r7, #4]
 800f7ee:	f7ff ff85 	bl	800f6fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f7f2:	e024      	b.n	800f83e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f7f4:	683b      	ldr	r3, [r7, #0]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d008      	beq.n	800f80c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f7fa:	4b13      	ldr	r3, [pc, #76]	; (800f848 <prvProcessTimerOrBlockTask+0x90>)
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d101      	bne.n	800f808 <prvProcessTimerOrBlockTask+0x50>
 800f804:	2301      	movs	r3, #1
 800f806:	e000      	b.n	800f80a <prvProcessTimerOrBlockTask+0x52>
 800f808:	2300      	movs	r3, #0
 800f80a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f80c:	4b0f      	ldr	r3, [pc, #60]	; (800f84c <prvProcessTimerOrBlockTask+0x94>)
 800f80e:	6818      	ldr	r0, [r3, #0]
 800f810:	687a      	ldr	r2, [r7, #4]
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	1ad3      	subs	r3, r2, r3
 800f816:	683a      	ldr	r2, [r7, #0]
 800f818:	4619      	mov	r1, r3
 800f81a:	f7fe ffa7 	bl	800e76c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f81e:	f7ff fa23 	bl	800ec68 <xTaskResumeAll>
 800f822:	4603      	mov	r3, r0
 800f824:	2b00      	cmp	r3, #0
 800f826:	d10a      	bne.n	800f83e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f828:	4b09      	ldr	r3, [pc, #36]	; (800f850 <prvProcessTimerOrBlockTask+0x98>)
 800f82a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f82e:	601a      	str	r2, [r3, #0]
 800f830:	f3bf 8f4f 	dsb	sy
 800f834:	f3bf 8f6f 	isb	sy
}
 800f838:	e001      	b.n	800f83e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f83a:	f7ff fa15 	bl	800ec68 <xTaskResumeAll>
}
 800f83e:	bf00      	nop
 800f840:	3710      	adds	r7, #16
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}
 800f846:	bf00      	nop
 800f848:	24004854 	.word	0x24004854
 800f84c:	24004858 	.word	0x24004858
 800f850:	e000ed04 	.word	0xe000ed04

0800f854 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f854:	b480      	push	{r7}
 800f856:	b085      	sub	sp, #20
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f85c:	4b0e      	ldr	r3, [pc, #56]	; (800f898 <prvGetNextExpireTime+0x44>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d101      	bne.n	800f86a <prvGetNextExpireTime+0x16>
 800f866:	2201      	movs	r2, #1
 800f868:	e000      	b.n	800f86c <prvGetNextExpireTime+0x18>
 800f86a:	2200      	movs	r2, #0
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d105      	bne.n	800f884 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f878:	4b07      	ldr	r3, [pc, #28]	; (800f898 <prvGetNextExpireTime+0x44>)
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	68db      	ldr	r3, [r3, #12]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	60fb      	str	r3, [r7, #12]
 800f882:	e001      	b.n	800f888 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f884:	2300      	movs	r3, #0
 800f886:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f888:	68fb      	ldr	r3, [r7, #12]
}
 800f88a:	4618      	mov	r0, r3
 800f88c:	3714      	adds	r7, #20
 800f88e:	46bd      	mov	sp, r7
 800f890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f894:	4770      	bx	lr
 800f896:	bf00      	nop
 800f898:	24004850 	.word	0x24004850

0800f89c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b084      	sub	sp, #16
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f8a4:	f7ff fa7e 	bl	800eda4 <xTaskGetTickCount>
 800f8a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f8aa:	4b0b      	ldr	r3, [pc, #44]	; (800f8d8 <prvSampleTimeNow+0x3c>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	68fa      	ldr	r2, [r7, #12]
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	d205      	bcs.n	800f8c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f8b4:	f000 f936 	bl	800fb24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	2201      	movs	r2, #1
 800f8bc:	601a      	str	r2, [r3, #0]
 800f8be:	e002      	b.n	800f8c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f8c6:	4a04      	ldr	r2, [pc, #16]	; (800f8d8 <prvSampleTimeNow+0x3c>)
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f8cc:	68fb      	ldr	r3, [r7, #12]
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	3710      	adds	r7, #16
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}
 800f8d6:	bf00      	nop
 800f8d8:	24004860 	.word	0x24004860

0800f8dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b086      	sub	sp, #24
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	60f8      	str	r0, [r7, #12]
 800f8e4:	60b9      	str	r1, [r7, #8]
 800f8e6:	607a      	str	r2, [r7, #4]
 800f8e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	68ba      	ldr	r2, [r7, #8]
 800f8f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	68fa      	ldr	r2, [r7, #12]
 800f8f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f8fa:	68ba      	ldr	r2, [r7, #8]
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	429a      	cmp	r2, r3
 800f900:	d812      	bhi.n	800f928 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f902:	687a      	ldr	r2, [r7, #4]
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	1ad2      	subs	r2, r2, r3
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	699b      	ldr	r3, [r3, #24]
 800f90c:	429a      	cmp	r2, r3
 800f90e:	d302      	bcc.n	800f916 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f910:	2301      	movs	r3, #1
 800f912:	617b      	str	r3, [r7, #20]
 800f914:	e01b      	b.n	800f94e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f916:	4b10      	ldr	r3, [pc, #64]	; (800f958 <prvInsertTimerInActiveList+0x7c>)
 800f918:	681a      	ldr	r2, [r3, #0]
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	3304      	adds	r3, #4
 800f91e:	4619      	mov	r1, r3
 800f920:	4610      	mov	r0, r2
 800f922:	f7fd ff00 	bl	800d726 <vListInsert>
 800f926:	e012      	b.n	800f94e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f928:	687a      	ldr	r2, [r7, #4]
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	429a      	cmp	r2, r3
 800f92e:	d206      	bcs.n	800f93e <prvInsertTimerInActiveList+0x62>
 800f930:	68ba      	ldr	r2, [r7, #8]
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	429a      	cmp	r2, r3
 800f936:	d302      	bcc.n	800f93e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f938:	2301      	movs	r3, #1
 800f93a:	617b      	str	r3, [r7, #20]
 800f93c:	e007      	b.n	800f94e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f93e:	4b07      	ldr	r3, [pc, #28]	; (800f95c <prvInsertTimerInActiveList+0x80>)
 800f940:	681a      	ldr	r2, [r3, #0]
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	3304      	adds	r3, #4
 800f946:	4619      	mov	r1, r3
 800f948:	4610      	mov	r0, r2
 800f94a:	f7fd feec 	bl	800d726 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f94e:	697b      	ldr	r3, [r7, #20]
}
 800f950:	4618      	mov	r0, r3
 800f952:	3718      	adds	r7, #24
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}
 800f958:	24004854 	.word	0x24004854
 800f95c:	24004850 	.word	0x24004850

0800f960 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b08e      	sub	sp, #56	; 0x38
 800f964:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f966:	e0ca      	b.n	800fafe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	da18      	bge.n	800f9a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f96e:	1d3b      	adds	r3, r7, #4
 800f970:	3304      	adds	r3, #4
 800f972:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f976:	2b00      	cmp	r3, #0
 800f978:	d10a      	bne.n	800f990 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f97e:	f383 8811 	msr	BASEPRI, r3
 800f982:	f3bf 8f6f 	isb	sy
 800f986:	f3bf 8f4f 	dsb	sy
 800f98a:	61fb      	str	r3, [r7, #28]
}
 800f98c:	bf00      	nop
 800f98e:	e7fe      	b.n	800f98e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f996:	6850      	ldr	r0, [r2, #4]
 800f998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f99a:	6892      	ldr	r2, [r2, #8]
 800f99c:	4611      	mov	r1, r2
 800f99e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	f2c0 80aa 	blt.w	800fafc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ae:	695b      	ldr	r3, [r3, #20]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d004      	beq.n	800f9be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9b6:	3304      	adds	r3, #4
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7fd feed 	bl	800d798 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f9be:	463b      	mov	r3, r7
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f7ff ff6b 	bl	800f89c <prvSampleTimeNow>
 800f9c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	2b09      	cmp	r3, #9
 800f9cc:	f200 8097 	bhi.w	800fafe <prvProcessReceivedCommands+0x19e>
 800f9d0:	a201      	add	r2, pc, #4	; (adr r2, 800f9d8 <prvProcessReceivedCommands+0x78>)
 800f9d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9d6:	bf00      	nop
 800f9d8:	0800fa01 	.word	0x0800fa01
 800f9dc:	0800fa01 	.word	0x0800fa01
 800f9e0:	0800fa01 	.word	0x0800fa01
 800f9e4:	0800fa75 	.word	0x0800fa75
 800f9e8:	0800fa89 	.word	0x0800fa89
 800f9ec:	0800fad3 	.word	0x0800fad3
 800f9f0:	0800fa01 	.word	0x0800fa01
 800f9f4:	0800fa01 	.word	0x0800fa01
 800f9f8:	0800fa75 	.word	0x0800fa75
 800f9fc:	0800fa89 	.word	0x0800fa89
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fa00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa06:	f043 0301 	orr.w	r3, r3, #1
 800fa0a:	b2da      	uxtb	r2, r3
 800fa0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fa12:	68ba      	ldr	r2, [r7, #8]
 800fa14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa16:	699b      	ldr	r3, [r3, #24]
 800fa18:	18d1      	adds	r1, r2, r3
 800fa1a:	68bb      	ldr	r3, [r7, #8]
 800fa1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa20:	f7ff ff5c 	bl	800f8dc <prvInsertTimerInActiveList>
 800fa24:	4603      	mov	r3, r0
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d069      	beq.n	800fafe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fa2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa2c:	6a1b      	ldr	r3, [r3, #32]
 800fa2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa30:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fa32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa38:	f003 0304 	and.w	r3, r3, #4
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d05e      	beq.n	800fafe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fa40:	68ba      	ldr	r2, [r7, #8]
 800fa42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa44:	699b      	ldr	r3, [r3, #24]
 800fa46:	441a      	add	r2, r3
 800fa48:	2300      	movs	r3, #0
 800fa4a:	9300      	str	r3, [sp, #0]
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	2100      	movs	r1, #0
 800fa50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa52:	f7ff fe05 	bl	800f660 <xTimerGenericCommand>
 800fa56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fa58:	6a3b      	ldr	r3, [r7, #32]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d14f      	bne.n	800fafe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800fa5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa62:	f383 8811 	msr	BASEPRI, r3
 800fa66:	f3bf 8f6f 	isb	sy
 800fa6a:	f3bf 8f4f 	dsb	sy
 800fa6e:	61bb      	str	r3, [r7, #24]
}
 800fa70:	bf00      	nop
 800fa72:	e7fe      	b.n	800fa72 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fa74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa7a:	f023 0301 	bic.w	r3, r3, #1
 800fa7e:	b2da      	uxtb	r2, r3
 800fa80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fa86:	e03a      	b.n	800fafe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fa88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa8e:	f043 0301 	orr.w	r3, r3, #1
 800fa92:	b2da      	uxtb	r2, r3
 800fa94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fa9a:	68ba      	ldr	r2, [r7, #8]
 800fa9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa9e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800faa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faa2:	699b      	ldr	r3, [r3, #24]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d10a      	bne.n	800fabe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800faa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faac:	f383 8811 	msr	BASEPRI, r3
 800fab0:	f3bf 8f6f 	isb	sy
 800fab4:	f3bf 8f4f 	dsb	sy
 800fab8:	617b      	str	r3, [r7, #20]
}
 800faba:	bf00      	nop
 800fabc:	e7fe      	b.n	800fabc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fac0:	699a      	ldr	r2, [r3, #24]
 800fac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac4:	18d1      	adds	r1, r2, r3
 800fac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800faca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800facc:	f7ff ff06 	bl	800f8dc <prvInsertTimerInActiveList>
					break;
 800fad0:	e015      	b.n	800fafe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fad4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fad8:	f003 0302 	and.w	r3, r3, #2
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d103      	bne.n	800fae8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800fae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fae2:	f7fd fcb1 	bl	800d448 <vPortFree>
 800fae6:	e00a      	b.n	800fafe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800faee:	f023 0301 	bic.w	r3, r3, #1
 800faf2:	b2da      	uxtb	r2, r3
 800faf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fafa:	e000      	b.n	800fafe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800fafc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fafe:	4b08      	ldr	r3, [pc, #32]	; (800fb20 <prvProcessReceivedCommands+0x1c0>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	1d39      	adds	r1, r7, #4
 800fb04:	2200      	movs	r2, #0
 800fb06:	4618      	mov	r0, r3
 800fb08:	f7fe fb96 	bl	800e238 <xQueueReceive>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	f47f af2a 	bne.w	800f968 <prvProcessReceivedCommands+0x8>
	}
}
 800fb14:	bf00      	nop
 800fb16:	bf00      	nop
 800fb18:	3730      	adds	r7, #48	; 0x30
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd80      	pop	{r7, pc}
 800fb1e:	bf00      	nop
 800fb20:	24004858 	.word	0x24004858

0800fb24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b088      	sub	sp, #32
 800fb28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fb2a:	e048      	b.n	800fbbe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fb2c:	4b2d      	ldr	r3, [pc, #180]	; (800fbe4 <prvSwitchTimerLists+0xc0>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	68db      	ldr	r3, [r3, #12]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb36:	4b2b      	ldr	r3, [pc, #172]	; (800fbe4 <prvSwitchTimerLists+0xc0>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	68db      	ldr	r3, [r3, #12]
 800fb3c:	68db      	ldr	r3, [r3, #12]
 800fb3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	3304      	adds	r3, #4
 800fb44:	4618      	mov	r0, r3
 800fb46:	f7fd fe27 	bl	800d798 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	6a1b      	ldr	r3, [r3, #32]
 800fb4e:	68f8      	ldr	r0, [r7, #12]
 800fb50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb58:	f003 0304 	and.w	r3, r3, #4
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d02e      	beq.n	800fbbe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	699b      	ldr	r3, [r3, #24]
 800fb64:	693a      	ldr	r2, [r7, #16]
 800fb66:	4413      	add	r3, r2
 800fb68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fb6a:	68ba      	ldr	r2, [r7, #8]
 800fb6c:	693b      	ldr	r3, [r7, #16]
 800fb6e:	429a      	cmp	r2, r3
 800fb70:	d90e      	bls.n	800fb90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	68ba      	ldr	r2, [r7, #8]
 800fb76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	68fa      	ldr	r2, [r7, #12]
 800fb7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fb7e:	4b19      	ldr	r3, [pc, #100]	; (800fbe4 <prvSwitchTimerLists+0xc0>)
 800fb80:	681a      	ldr	r2, [r3, #0]
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	3304      	adds	r3, #4
 800fb86:	4619      	mov	r1, r3
 800fb88:	4610      	mov	r0, r2
 800fb8a:	f7fd fdcc 	bl	800d726 <vListInsert>
 800fb8e:	e016      	b.n	800fbbe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fb90:	2300      	movs	r3, #0
 800fb92:	9300      	str	r3, [sp, #0]
 800fb94:	2300      	movs	r3, #0
 800fb96:	693a      	ldr	r2, [r7, #16]
 800fb98:	2100      	movs	r1, #0
 800fb9a:	68f8      	ldr	r0, [r7, #12]
 800fb9c:	f7ff fd60 	bl	800f660 <xTimerGenericCommand>
 800fba0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d10a      	bne.n	800fbbe <prvSwitchTimerLists+0x9a>
	__asm volatile
 800fba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbac:	f383 8811 	msr	BASEPRI, r3
 800fbb0:	f3bf 8f6f 	isb	sy
 800fbb4:	f3bf 8f4f 	dsb	sy
 800fbb8:	603b      	str	r3, [r7, #0]
}
 800fbba:	bf00      	nop
 800fbbc:	e7fe      	b.n	800fbbc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fbbe:	4b09      	ldr	r3, [pc, #36]	; (800fbe4 <prvSwitchTimerLists+0xc0>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d1b1      	bne.n	800fb2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fbc8:	4b06      	ldr	r3, [pc, #24]	; (800fbe4 <prvSwitchTimerLists+0xc0>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fbce:	4b06      	ldr	r3, [pc, #24]	; (800fbe8 <prvSwitchTimerLists+0xc4>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	4a04      	ldr	r2, [pc, #16]	; (800fbe4 <prvSwitchTimerLists+0xc0>)
 800fbd4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fbd6:	4a04      	ldr	r2, [pc, #16]	; (800fbe8 <prvSwitchTimerLists+0xc4>)
 800fbd8:	697b      	ldr	r3, [r7, #20]
 800fbda:	6013      	str	r3, [r2, #0]
}
 800fbdc:	bf00      	nop
 800fbde:	3718      	adds	r7, #24
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}
 800fbe4:	24004850 	.word	0x24004850
 800fbe8:	24004854 	.word	0x24004854

0800fbec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b082      	sub	sp, #8
 800fbf0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fbf2:	f7fd ff27 	bl	800da44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fbf6:	4b15      	ldr	r3, [pc, #84]	; (800fc4c <prvCheckForValidListAndQueue+0x60>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d120      	bne.n	800fc40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fbfe:	4814      	ldr	r0, [pc, #80]	; (800fc50 <prvCheckForValidListAndQueue+0x64>)
 800fc00:	f7fd fd40 	bl	800d684 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fc04:	4813      	ldr	r0, [pc, #76]	; (800fc54 <prvCheckForValidListAndQueue+0x68>)
 800fc06:	f7fd fd3d 	bl	800d684 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fc0a:	4b13      	ldr	r3, [pc, #76]	; (800fc58 <prvCheckForValidListAndQueue+0x6c>)
 800fc0c:	4a10      	ldr	r2, [pc, #64]	; (800fc50 <prvCheckForValidListAndQueue+0x64>)
 800fc0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fc10:	4b12      	ldr	r3, [pc, #72]	; (800fc5c <prvCheckForValidListAndQueue+0x70>)
 800fc12:	4a10      	ldr	r2, [pc, #64]	; (800fc54 <prvCheckForValidListAndQueue+0x68>)
 800fc14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fc16:	2300      	movs	r3, #0
 800fc18:	9300      	str	r3, [sp, #0]
 800fc1a:	4b11      	ldr	r3, [pc, #68]	; (800fc60 <prvCheckForValidListAndQueue+0x74>)
 800fc1c:	4a11      	ldr	r2, [pc, #68]	; (800fc64 <prvCheckForValidListAndQueue+0x78>)
 800fc1e:	2110      	movs	r1, #16
 800fc20:	200a      	movs	r0, #10
 800fc22:	f7fe f899 	bl	800dd58 <xQueueGenericCreateStatic>
 800fc26:	4603      	mov	r3, r0
 800fc28:	4a08      	ldr	r2, [pc, #32]	; (800fc4c <prvCheckForValidListAndQueue+0x60>)
 800fc2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fc2c:	4b07      	ldr	r3, [pc, #28]	; (800fc4c <prvCheckForValidListAndQueue+0x60>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d005      	beq.n	800fc40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fc34:	4b05      	ldr	r3, [pc, #20]	; (800fc4c <prvCheckForValidListAndQueue+0x60>)
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	490b      	ldr	r1, [pc, #44]	; (800fc68 <prvCheckForValidListAndQueue+0x7c>)
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f7fe fd6c 	bl	800e718 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fc40:	f7fd ff30 	bl	800daa4 <vPortExitCritical>
}
 800fc44:	bf00      	nop
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}
 800fc4a:	bf00      	nop
 800fc4c:	24004858 	.word	0x24004858
 800fc50:	24004828 	.word	0x24004828
 800fc54:	2400483c 	.word	0x2400483c
 800fc58:	24004850 	.word	0x24004850
 800fc5c:	24004854 	.word	0x24004854
 800fc60:	24004904 	.word	0x24004904
 800fc64:	24004864 	.word	0x24004864
 800fc68:	0800fe0c 	.word	0x0800fe0c

0800fc6c <__libc_init_array>:
 800fc6c:	b570      	push	{r4, r5, r6, lr}
 800fc6e:	4d0d      	ldr	r5, [pc, #52]	; (800fca4 <__libc_init_array+0x38>)
 800fc70:	4c0d      	ldr	r4, [pc, #52]	; (800fca8 <__libc_init_array+0x3c>)
 800fc72:	1b64      	subs	r4, r4, r5
 800fc74:	10a4      	asrs	r4, r4, #2
 800fc76:	2600      	movs	r6, #0
 800fc78:	42a6      	cmp	r6, r4
 800fc7a:	d109      	bne.n	800fc90 <__libc_init_array+0x24>
 800fc7c:	4d0b      	ldr	r5, [pc, #44]	; (800fcac <__libc_init_array+0x40>)
 800fc7e:	4c0c      	ldr	r4, [pc, #48]	; (800fcb0 <__libc_init_array+0x44>)
 800fc80:	f000 f82e 	bl	800fce0 <_init>
 800fc84:	1b64      	subs	r4, r4, r5
 800fc86:	10a4      	asrs	r4, r4, #2
 800fc88:	2600      	movs	r6, #0
 800fc8a:	42a6      	cmp	r6, r4
 800fc8c:	d105      	bne.n	800fc9a <__libc_init_array+0x2e>
 800fc8e:	bd70      	pop	{r4, r5, r6, pc}
 800fc90:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc94:	4798      	blx	r3
 800fc96:	3601      	adds	r6, #1
 800fc98:	e7ee      	b.n	800fc78 <__libc_init_array+0xc>
 800fc9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc9e:	4798      	blx	r3
 800fca0:	3601      	adds	r6, #1
 800fca2:	e7f2      	b.n	800fc8a <__libc_init_array+0x1e>
 800fca4:	0800ffb0 	.word	0x0800ffb0
 800fca8:	0800ffb0 	.word	0x0800ffb0
 800fcac:	0800ffb0 	.word	0x0800ffb0
 800fcb0:	0800ffb4 	.word	0x0800ffb4

0800fcb4 <memcpy>:
 800fcb4:	440a      	add	r2, r1
 800fcb6:	4291      	cmp	r1, r2
 800fcb8:	f100 33ff 	add.w	r3, r0, #4294967295
 800fcbc:	d100      	bne.n	800fcc0 <memcpy+0xc>
 800fcbe:	4770      	bx	lr
 800fcc0:	b510      	push	{r4, lr}
 800fcc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fcc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fcca:	4291      	cmp	r1, r2
 800fccc:	d1f9      	bne.n	800fcc2 <memcpy+0xe>
 800fcce:	bd10      	pop	{r4, pc}

0800fcd0 <memset>:
 800fcd0:	4402      	add	r2, r0
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	4293      	cmp	r3, r2
 800fcd6:	d100      	bne.n	800fcda <memset+0xa>
 800fcd8:	4770      	bx	lr
 800fcda:	f803 1b01 	strb.w	r1, [r3], #1
 800fcde:	e7f9      	b.n	800fcd4 <memset+0x4>

0800fce0 <_init>:
 800fce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fce2:	bf00      	nop
 800fce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fce6:	bc08      	pop	{r3}
 800fce8:	469e      	mov	lr, r3
 800fcea:	4770      	bx	lr

0800fcec <_fini>:
 800fcec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcee:	bf00      	nop
 800fcf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcf2:	bc08      	pop	{r3}
 800fcf4:	469e      	mov	lr, r3
 800fcf6:	4770      	bx	lr
