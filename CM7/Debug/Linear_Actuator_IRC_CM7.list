
Linear_Actuator_IRC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000137f4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000714  08013a98  08013a98  00023a98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080141ac  080141ac  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  080141ac  080141ac  000241ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080141b4  080141b4  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080141b4  080141b4  000241b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080141b8  080141b8  000241b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  24000000  080141bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000051e0  240001f4  080143b0  000301f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240053d4  080143b0  000353d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003e466  00000000  00000000  00030222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d00  00000000  00000000  0006e688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002510  00000000  00000000  00074388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002348  00000000  00000000  00076898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004066d  00000000  00000000  00078be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029c36  00000000  00000000  000b924d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001af927  00000000  00000000  000e2e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002927aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b15c  00000000  00000000  00292800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f4 	.word	0x240001f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013a7c 	.word	0x08013a7c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f8 	.word	0x240001f8
 80002dc:	08013a7c 	.word	0x08013a7c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800068c:	4b3f      	ldr	r3, [pc, #252]	; (800078c <SystemInit+0x104>)
 800068e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000692:	4a3e      	ldr	r2, [pc, #248]	; (800078c <SystemInit+0x104>)
 8000694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800069c:	4b3b      	ldr	r3, [pc, #236]	; (800078c <SystemInit+0x104>)
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	4a3a      	ldr	r2, [pc, #232]	; (800078c <SystemInit+0x104>)
 80006a2:	f043 0310 	orr.w	r3, r3, #16
 80006a6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0x108>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f003 030f 	and.w	r3, r3, #15
 80006b0:	2b06      	cmp	r3, #6
 80006b2:	d807      	bhi.n	80006c4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b4:	4b36      	ldr	r3, [pc, #216]	; (8000790 <SystemInit+0x108>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f023 030f 	bic.w	r3, r3, #15
 80006bc:	4a34      	ldr	r2, [pc, #208]	; (8000790 <SystemInit+0x108>)
 80006be:	f043 0307 	orr.w	r3, r3, #7
 80006c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c4:	4b33      	ldr	r3, [pc, #204]	; (8000794 <SystemInit+0x10c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x10c>)
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d0:	4b30      	ldr	r3, [pc, #192]	; (8000794 <SystemInit+0x10c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <SystemInit+0x10c>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	492e      	ldr	r1, [pc, #184]	; (8000794 <SystemInit+0x10c>)
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x110>)
 80006de:	4013      	ands	r3, r2
 80006e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <SystemInit+0x108>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d007      	beq.n	80006fe <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemInit+0x108>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f023 030f 	bic.w	r3, r3, #15
 80006f6:	4a26      	ldr	r2, [pc, #152]	; (8000790 <SystemInit+0x108>)
 80006f8:	f043 0307 	orr.w	r3, r3, #7
 80006fc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemInit+0x10c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <SystemInit+0x10c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemInit+0x10c>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000710:	4b20      	ldr	r3, [pc, #128]	; (8000794 <SystemInit+0x10c>)
 8000712:	4a22      	ldr	r2, [pc, #136]	; (800079c <SystemInit+0x114>)
 8000714:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemInit+0x10c>)
 8000718:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <SystemInit+0x118>)
 800071a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <SystemInit+0x10c>)
 800071e:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemInit+0x11c>)
 8000720:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <SystemInit+0x10c>)
 8000724:	2200      	movs	r2, #0
 8000726:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <SystemInit+0x10c>)
 800072a:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <SystemInit+0x11c>)
 800072c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <SystemInit+0x10c>)
 8000730:	2200      	movs	r2, #0
 8000732:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <SystemInit+0x10c>)
 8000736:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <SystemInit+0x11c>)
 8000738:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <SystemInit+0x10c>)
 800073c:	2200      	movs	r2, #0
 800073e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <SystemInit+0x10c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a13      	ldr	r2, [pc, #76]	; (8000794 <SystemInit+0x10c>)
 8000746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <SystemInit+0x10c>)
 800074e:	2200      	movs	r2, #0
 8000750:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <SystemInit+0x120>)
 8000754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000756:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <SystemInit+0x120>)
 8000758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x124>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <SystemInit+0x128>)
 8000764:	4013      	ands	r3, r2
 8000766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076a:	d202      	bcs.n	8000772 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x12c>)
 800076e:	2201      	movs	r2, #1
 8000770:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <SystemInit+0x130>)
 8000774:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000778:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SystemInit+0x104>)
 800077c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000780:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000ed00 	.word	0xe000ed00
 8000790:	52002000 	.word	0x52002000
 8000794:	58024400 	.word	0x58024400
 8000798:	eaf6ed7f 	.word	0xeaf6ed7f
 800079c:	02020200 	.word	0x02020200
 80007a0:	01ff0000 	.word	0x01ff0000
 80007a4:	01010280 	.word	0x01010280
 80007a8:	580000c0 	.word	0x580000c0
 80007ac:	5c001000 	.word	0x5c001000
 80007b0:	ffff0000 	.word	0xffff0000
 80007b4:	51008108 	.word	0x51008108
 80007b8:	52004000 	.word	0x52004000

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 80007c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007c6:	60fb      	str	r3, [r7, #12]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 80007c8:	bf00      	nop
 80007ca:	4b71      	ldr	r3, [pc, #452]	; (8000990 <main+0x1d4>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d004      	beq.n	80007e0 <main+0x24>
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	1e5a      	subs	r2, r3, #1
 80007da:	60fa      	str	r2, [r7, #12]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	dcf4      	bgt.n	80007ca <main+0xe>
		;
	if (timeout < 0) {
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	da01      	bge.n	80007ea <main+0x2e>
		Error_Handler();
 80007e6:	f001 fa69 	bl	8001cbc <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ea:	f001 ff29 	bl	8002640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ee:	f000 f917 	bl	8000a20 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007f2:	f000 f99b 	bl	8000b2c <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 80007f6:	4b66      	ldr	r3, [pc, #408]	; (8000990 <main+0x1d4>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	4a64      	ldr	r2, [pc, #400]	; (8000990 <main+0x1d4>)
 80007fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000806:	4b62      	ldr	r3, [pc, #392]	; (8000990 <main+0x1d4>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000814:	2000      	movs	r0, #0
 8000816:	f007 f8f5 	bl	8007a04 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 800081a:	2100      	movs	r1, #0
 800081c:	2000      	movs	r0, #0
 800081e:	f007 f90b 	bl	8007a38 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000826:	60fb      	str	r3, [r7, #12]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000828:	bf00      	nop
 800082a:	4b59      	ldr	r3, [pc, #356]	; (8000990 <main+0x1d4>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000832:	2b00      	cmp	r3, #0
 8000834:	d104      	bne.n	8000840 <main+0x84>
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	1e5a      	subs	r2, r3, #1
 800083a:	60fa      	str	r2, [r7, #12]
 800083c:	2b00      	cmp	r3, #0
 800083e:	dcf4      	bgt.n	800082a <main+0x6e>
		;
	if (timeout < 0) {
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	2b00      	cmp	r3, #0
 8000844:	da01      	bge.n	800084a <main+0x8e>
		Error_Handler();
 8000846:	f001 fa39 	bl	8001cbc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084a:	f000 fc8b 	bl	8001164 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800084e:	f000 fa79 	bl	8000d44 <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8000852:	f000 fb27 	bl	8000ea4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000856:	f000 fb79 	bl	8000f4c <MX_TIM3_Init>
  MX_USART3_UART_Init();
 800085a:	f000 fbdd 	bl	8001018 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800085e:	f000 fc27 	bl	80010b0 <MX_USB_OTG_FS_PCD_Init>
  MX_DMA_Init();
 8000862:	f000 fc57 	bl	8001114 <MX_DMA_Init>
  MX_ADC1_Init();
 8000866:	f000 f98f 	bl	8000b88 <MX_ADC1_Init>
  MX_ADC2_Init();
 800086a:	f000 fa05 	bl	8000c78 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

	for(int i=0; i<2; i++){
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	e01a      	b.n	80008aa <main+0xee>
		HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 8000874:	2101      	movs	r1, #1
 8000876:	4847      	ldr	r0, [pc, #284]	; (8000994 <main+0x1d8>)
 8000878:	f007 f8a9 	bl	80079ce <HAL_GPIO_TogglePin>
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxDataInit) != HAL_OK){
 800087c:	4a46      	ldr	r2, [pc, #280]	; (8000998 <main+0x1dc>)
 800087e:	4947      	ldr	r1, [pc, #284]	; (800099c <main+0x1e0>)
 8000880:	4847      	ldr	r0, [pc, #284]	; (80009a0 <main+0x1e4>)
 8000882:	f005 ff68 	bl	8006756 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d002      	beq.n	8000892 <main+0xd6>
			Error_Handler();
 800088c:	f001 fa16 	bl	8001cbc <Error_Handler>
 8000890:	e004      	b.n	800089c <main+0xe0>
		}
		else{
			HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 8000892:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000896:	483f      	ldr	r0, [pc, #252]	; (8000994 <main+0x1d8>)
 8000898:	f007 f899 	bl	80079ce <HAL_GPIO_TogglePin>
		}
		HAL_Delay(500);
 800089c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008a0:	f001 ff60 	bl	8002764 <HAL_Delay>
	for(int i=0; i<2; i++){
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	3301      	adds	r3, #1
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	dde1      	ble.n	8000874 <main+0xb8>

	}

	GoHome();
 80008b0:	f000 fd46 	bl	8001340 <GoHome>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008b4:	f00d f9b6 	bl	800dc24 <osKernelInitialize>
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of controlSempahore */
  controlSempahoreHandle = osSemaphoreNew(1, 1, &controlSempahore_attributes);
 80008b8:	4a3a      	ldr	r2, [pc, #232]	; (80009a4 <main+0x1e8>)
 80008ba:	2101      	movs	r1, #1
 80008bc:	2001      	movs	r0, #1
 80008be:	f00d faa8 	bl	800de12 <osSemaphoreNew>
 80008c2:	4603      	mov	r3, r0
 80008c4:	4a38      	ldr	r2, [pc, #224]	; (80009a8 <main+0x1ec>)
 80008c6:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of positionControlQueue */
  positionControlQueueHandle = osMessageQueueNew (16, sizeof(position), &positionControlQueue_attributes);
 80008c8:	4a38      	ldr	r2, [pc, #224]	; (80009ac <main+0x1f0>)
 80008ca:	2102      	movs	r1, #2
 80008cc:	2010      	movs	r0, #16
 80008ce:	f00d fb29 	bl	800df24 <osMessageQueueNew>
 80008d2:	4603      	mov	r3, r0
 80008d4:	4a36      	ldr	r2, [pc, #216]	; (80009b0 <main+0x1f4>)
 80008d6:	6013      	str	r3, [r2, #0]

  /* creation of positionCanQueue */
  positionCanQueueHandle = osMessageQueueNew (16, sizeof(position), &positionCanQueue_attributes);
 80008d8:	4a36      	ldr	r2, [pc, #216]	; (80009b4 <main+0x1f8>)
 80008da:	2102      	movs	r1, #2
 80008dc:	2010      	movs	r0, #16
 80008de:	f00d fb21 	bl	800df24 <osMessageQueueNew>
 80008e2:	4603      	mov	r3, r0
 80008e4:	4a34      	ldr	r2, [pc, #208]	; (80009b8 <main+0x1fc>)
 80008e6:	6013      	str	r3, [r2, #0]

  /* creation of doneQueue */
  doneQueueHandle = osMessageQueueNew (16, sizeof(status), &doneQueue_attributes);
 80008e8:	4a34      	ldr	r2, [pc, #208]	; (80009bc <main+0x200>)
 80008ea:	2102      	movs	r1, #2
 80008ec:	2010      	movs	r0, #16
 80008ee:	f00d fb19 	bl	800df24 <osMessageQueueNew>
 80008f2:	4603      	mov	r3, r0
 80008f4:	4a32      	ldr	r2, [pc, #200]	; (80009c0 <main+0x204>)
 80008f6:	6013      	str	r3, [r2, #0]

  /* creation of systemDiagnosisQueue */
  systemDiagnosisQueueHandle = osMessageQueueNew (16, sizeof(status), &systemDiagnosisQueue_attributes);
 80008f8:	4a32      	ldr	r2, [pc, #200]	; (80009c4 <main+0x208>)
 80008fa:	2102      	movs	r1, #2
 80008fc:	2010      	movs	r0, #16
 80008fe:	f00d fb11 	bl	800df24 <osMessageQueueNew>
 8000902:	4603      	mov	r3, r0
 8000904:	4a30      	ldr	r2, [pc, #192]	; (80009c8 <main+0x20c>)
 8000906:	6013      	str	r3, [r2, #0]

  /* creation of canDiagnosisQueue */
  canDiagnosisQueueHandle = osMessageQueueNew (16, sizeof(status), &canDiagnosisQueue_attributes);
 8000908:	4a30      	ldr	r2, [pc, #192]	; (80009cc <main+0x210>)
 800090a:	2102      	movs	r1, #2
 800090c:	2010      	movs	r0, #16
 800090e:	f00d fb09 	bl	800df24 <osMessageQueueNew>
 8000912:	4603      	mov	r3, r0
 8000914:	4a2e      	ldr	r2, [pc, #184]	; (80009d0 <main+0x214>)
 8000916:	6013      	str	r3, [r2, #0]

  /* creation of interCanQueue */
  interCanQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &interCanQueue_attributes);
 8000918:	4a2e      	ldr	r2, [pc, #184]	; (80009d4 <main+0x218>)
 800091a:	2102      	movs	r1, #2
 800091c:	2010      	movs	r0, #16
 800091e:	f00d fb01 	bl	800df24 <osMessageQueueNew>
 8000922:	4603      	mov	r3, r0
 8000924:	4a2c      	ldr	r2, [pc, #176]	; (80009d8 <main+0x21c>)
 8000926:	6013      	str	r3, [r2, #0]

  /* creation of desiredPositionQueue */
  desiredPositionQueueHandle = osMessageQueueNew (16, sizeof(position), &desiredPositionQueue_attributes);
 8000928:	4a2c      	ldr	r2, [pc, #176]	; (80009dc <main+0x220>)
 800092a:	2102      	movs	r1, #2
 800092c:	2010      	movs	r0, #16
 800092e:	f00d faf9 	bl	800df24 <osMessageQueueNew>
 8000932:	4603      	mov	r3, r0
 8000934:	4a2a      	ldr	r2, [pc, #168]	; (80009e0 <main+0x224>)
 8000936:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of readEncoderTask */
  readEncoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &readEncoderTask_attributes);
 8000938:	4a2a      	ldr	r2, [pc, #168]	; (80009e4 <main+0x228>)
 800093a:	2100      	movs	r1, #0
 800093c:	482a      	ldr	r0, [pc, #168]	; (80009e8 <main+0x22c>)
 800093e:	f00d f9bb 	bl	800dcb8 <osThreadNew>
 8000942:	4603      	mov	r3, r0
 8000944:	4a29      	ldr	r2, [pc, #164]	; (80009ec <main+0x230>)
 8000946:	6013      	str	r3, [r2, #0]

  /* creation of controlTask */
  controlTaskHandle = osThreadNew(StartControlTask, NULL, &controlTask_attributes);
 8000948:	4a29      	ldr	r2, [pc, #164]	; (80009f0 <main+0x234>)
 800094a:	2100      	movs	r1, #0
 800094c:	4829      	ldr	r0, [pc, #164]	; (80009f4 <main+0x238>)
 800094e:	f00d f9b3 	bl	800dcb8 <osThreadNew>
 8000952:	4603      	mov	r3, r0
 8000954:	4a28      	ldr	r2, [pc, #160]	; (80009f8 <main+0x23c>)
 8000956:	6013      	str	r3, [r2, #0]

  /* creation of diagnosisTask */
  diagnosisTaskHandle = osThreadNew(StartDiagnosisTask, NULL, &diagnosisTask_attributes);
 8000958:	4a28      	ldr	r2, [pc, #160]	; (80009fc <main+0x240>)
 800095a:	2100      	movs	r1, #0
 800095c:	4828      	ldr	r0, [pc, #160]	; (8000a00 <main+0x244>)
 800095e:	f00d f9ab 	bl	800dcb8 <osThreadNew>
 8000962:	4603      	mov	r3, r0
 8000964:	4a27      	ldr	r2, [pc, #156]	; (8000a04 <main+0x248>)
 8000966:	6013      	str	r3, [r2, #0]

  /* creation of canRxTask */
  canRxTaskHandle = osThreadNew(StartCanRxTask, NULL, &canRxTask_attributes);
 8000968:	4a27      	ldr	r2, [pc, #156]	; (8000a08 <main+0x24c>)
 800096a:	2100      	movs	r1, #0
 800096c:	4827      	ldr	r0, [pc, #156]	; (8000a0c <main+0x250>)
 800096e:	f00d f9a3 	bl	800dcb8 <osThreadNew>
 8000972:	4603      	mov	r3, r0
 8000974:	4a26      	ldr	r2, [pc, #152]	; (8000a10 <main+0x254>)
 8000976:	6013      	str	r3, [r2, #0]

  /* creation of canTxTask */
  canTxTaskHandle = osThreadNew(StartCanTxTask, NULL, &canTxTask_attributes);
 8000978:	4a26      	ldr	r2, [pc, #152]	; (8000a14 <main+0x258>)
 800097a:	2100      	movs	r1, #0
 800097c:	4826      	ldr	r0, [pc, #152]	; (8000a18 <main+0x25c>)
 800097e:	f00d f99b 	bl	800dcb8 <osThreadNew>
 8000982:	4603      	mov	r3, r0
 8000984:	4a25      	ldr	r2, [pc, #148]	; (8000a1c <main+0x260>)
 8000986:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000988:	f00d f970 	bl	800dc6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800098c:	e7fe      	b.n	800098c <main+0x1d0>
 800098e:	bf00      	nop
 8000990:	58024400 	.word	0x58024400
 8000994:	58020400 	.word	0x58020400
 8000998:	24000008 	.word	0x24000008
 800099c:	24005330 	.word	0x24005330
 80009a0:	240051bc 	.word	0x240051bc
 80009a4:	08013d7c 	.word	0x08013d7c
 80009a8:	2400537c 	.word	0x2400537c
 80009ac:	08013cd4 	.word	0x08013cd4
 80009b0:	2400525c 	.word	0x2400525c
 80009b4:	08013cec 	.word	0x08013cec
 80009b8:	240050bc 	.word	0x240050bc
 80009bc:	08013d04 	.word	0x08013d04
 80009c0:	240051b8 	.word	0x240051b8
 80009c4:	08013d1c 	.word	0x08013d1c
 80009c8:	24004c50 	.word	0x24004c50
 80009cc:	08013d34 	.word	0x08013d34
 80009d0:	240050c4 	.word	0x240050c4
 80009d4:	08013d4c 	.word	0x08013d4c
 80009d8:	2400512c 	.word	0x2400512c
 80009dc:	08013d64 	.word	0x08013d64
 80009e0:	24005134 	.word	0x24005134
 80009e4:	08013c20 	.word	0x08013c20
 80009e8:	080015b9 	.word	0x080015b9
 80009ec:	24005060 	.word	0x24005060
 80009f0:	08013c44 	.word	0x08013c44
 80009f4:	0800163d 	.word	0x0800163d
 80009f8:	24005260 	.word	0x24005260
 80009fc:	08013c68 	.word	0x08013c68
 8000a00:	08001869 	.word	0x08001869
 8000a04:	240050b4 	.word	0x240050b4
 8000a08:	08013c8c 	.word	0x08013c8c
 8000a0c:	08001b35 	.word	0x08001b35
 8000a10:	24005130 	.word	0x24005130
 8000a14:	08013cb0 	.word	0x08013cb0
 8000a18:	08001ba1 	.word	0x08001ba1
 8000a1c:	24005064 	.word	0x24005064

08000a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b09c      	sub	sp, #112	; 0x70
 8000a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2a:	224c      	movs	r2, #76	; 0x4c
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f010 fa26 	bl	8010e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	2220      	movs	r2, #32
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f010 fa20 	bl	8010e80 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a40:	2004      	movs	r0, #4
 8000a42:	f007 f955 	bl	8007cf0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4b35      	ldr	r3, [pc, #212]	; (8000b20 <SystemClock_Config+0x100>)
 8000a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a4e:	4a34      	ldr	r2, [pc, #208]	; (8000b20 <SystemClock_Config+0x100>)
 8000a50:	f023 0301 	bic.w	r3, r3, #1
 8000a54:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a56:	4b32      	ldr	r3, [pc, #200]	; (8000b20 <SystemClock_Config+0x100>)
 8000a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	4b30      	ldr	r3, [pc, #192]	; (8000b24 <SystemClock_Config+0x104>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a68:	4a2e      	ldr	r2, [pc, #184]	; (8000b24 <SystemClock_Config+0x104>)
 8000a6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6e:	6193      	str	r3, [r2, #24]
 8000a70:	4b2c      	ldr	r3, [pc, #176]	; (8000b24 <SystemClock_Config+0x104>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a7c:	bf00      	nop
 8000a7e:	4b29      	ldr	r3, [pc, #164]	; (8000b24 <SystemClock_Config+0x104>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a8a:	d1f8      	bne.n	8000a7e <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000a8c:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <SystemClock_Config+0x108>)
 8000a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a90:	f023 0303 	bic.w	r3, r3, #3
 8000a94:	4a24      	ldr	r2, [pc, #144]	; (8000b28 <SystemClock_Config+0x108>)
 8000a96:	f043 0302 	orr.w	r3, r3, #2
 8000a9a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000aa0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000ab2:	2314      	movs	r3, #20
 8000ab4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000aba:	2304      	movs	r3, #4
 8000abc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f007 f976 	bl	8007dc4 <HAL_RCC_OscConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ade:	f001 f8ed 	bl	8001cbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae2:	233f      	movs	r3, #63	; 0x3f
 8000ae4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000af6:	2340      	movs	r3, #64	; 0x40
 8000af8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2101      	movs	r1, #1
 8000b06:	4618      	mov	r0, r3
 8000b08:	f007 fd6c 	bl	80085e4 <HAL_RCC_ClockConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000b12:	f001 f8d3 	bl	8001cbc <Error_Handler>
  }
}
 8000b16:	bf00      	nop
 8000b18:	3770      	adds	r7, #112	; 0x70
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	58000400 	.word	0x58000400
 8000b24:	58024800 	.word	0x58024800
 8000b28:	58024400 	.word	0x58024400

08000b2c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b0b0      	sub	sp, #192	; 0xc0
 8000b30:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	22bc      	movs	r2, #188	; 0xbc
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f010 f9a1 	bl	8010e80 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b3e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000b42:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000b44:	2301      	movs	r3, #1
 8000b46:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000b48:	2312      	movs	r3, #18
 8000b4a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b50:	2302      	movs	r3, #2
 8000b52:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000b54:	2302      	movs	r3, #2
 8000b56:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000b58:	23c0      	movs	r3, #192	; 0xc0
 8000b5a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000b5c:	2320      	movs	r3, #32
 8000b5e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8000b60:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000b66:	2300      	movs	r3, #0
 8000b68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f008 f8c4 	bl	8008cfc <HAL_RCCEx_PeriphCLKConfig>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8000b7a:	f001 f89f 	bl	8001cbc <Error_Handler>
  }
}
 8000b7e:	bf00      	nop
 8000b80:	37c0      	adds	r7, #192	; 0xc0
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
 8000ba8:	615a      	str	r2, [r3, #20]
 8000baa:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bac:	4b2f      	ldr	r3, [pc, #188]	; (8000c6c <MX_ADC1_Init+0xe4>)
 8000bae:	4a30      	ldr	r2, [pc, #192]	; (8000c70 <MX_ADC1_Init+0xe8>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bb2:	4b2e      	ldr	r3, [pc, #184]	; (8000c6c <MX_ADC1_Init+0xe4>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000bb8:	4b2c      	ldr	r3, [pc, #176]	; (8000c6c <MX_ADC1_Init+0xe4>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bbe:	4b2b      	ldr	r3, [pc, #172]	; (8000c6c <MX_ADC1_Init+0xe4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bc4:	4b29      	ldr	r3, [pc, #164]	; (8000c6c <MX_ADC1_Init+0xe4>)
 8000bc6:	2204      	movs	r2, #4
 8000bc8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bca:	4b28      	ldr	r3, [pc, #160]	; (8000c6c <MX_ADC1_Init+0xe4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bd0:	4b26      	ldr	r3, [pc, #152]	; (8000c6c <MX_ADC1_Init+0xe4>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000bd6:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <MX_ADC1_Init+0xe4>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bdc:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <MX_ADC1_Init+0xe4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000be2:	4b22      	ldr	r3, [pc, #136]	; (8000c6c <MX_ADC1_Init+0xe4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000be8:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <MX_ADC1_Init+0xe4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000bee:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <MX_ADC1_Init+0xe4>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bf4:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <MX_ADC1_Init+0xe4>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <MX_ADC1_Init+0xe4>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c00:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <MX_ADC1_Init+0xe4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c08:	4818      	ldr	r0, [pc, #96]	; (8000c6c <MX_ADC1_Init+0xe4>)
 8000c0a:	f002 f821 	bl	8002c50 <HAL_ADC_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c14:	f001 f852 	bl	8001cbc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c1c:	f107 031c 	add.w	r3, r7, #28
 8000c20:	4619      	mov	r1, r3
 8000c22:	4812      	ldr	r0, [pc, #72]	; (8000c6c <MX_ADC1_Init+0xe4>)
 8000c24:	f003 fc64 	bl	80044f0 <HAL_ADCEx_MultiModeConfigChannel>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000c2e:	f001 f845 	bl	8001cbc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <MX_ADC1_Init+0xec>)
 8000c34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c36:	2306      	movs	r3, #6
 8000c38:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c3e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c42:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c44:	2304      	movs	r3, #4
 8000c46:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c50:	463b      	mov	r3, r7
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_ADC1_Init+0xe4>)
 8000c56:	f002 fdf3 	bl	8003840 <HAL_ADC_ConfigChannel>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000c60:	f001 f82c 	bl	8001cbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	3728      	adds	r7, #40	; 0x28
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	240050c8 	.word	0x240050c8
 8000c70:	40022000 	.word	0x40022000
 8000c74:	08600004 	.word	0x08600004

08000c78 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
 8000c8c:	615a      	str	r2, [r3, #20]
 8000c8e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c90:	4b29      	ldr	r3, [pc, #164]	; (8000d38 <MX_ADC2_Init+0xc0>)
 8000c92:	4a2a      	ldr	r2, [pc, #168]	; (8000d3c <MX_ADC2_Init+0xc4>)
 8000c94:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c96:	4b28      	ldr	r3, [pc, #160]	; (8000d38 <MX_ADC2_Init+0xc0>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000c9c:	4b26      	ldr	r3, [pc, #152]	; (8000d38 <MX_ADC2_Init+0xc0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ca2:	4b25      	ldr	r3, [pc, #148]	; (8000d38 <MX_ADC2_Init+0xc0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca8:	4b23      	ldr	r3, [pc, #140]	; (8000d38 <MX_ADC2_Init+0xc0>)
 8000caa:	2204      	movs	r2, #4
 8000cac:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000cae:	4b22      	ldr	r3, [pc, #136]	; (8000d38 <MX_ADC2_Init+0xc0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000cb4:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <MX_ADC2_Init+0xc0>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000cba:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <MX_ADC2_Init+0xc0>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <MX_ADC2_Init+0xc0>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <MX_ADC2_Init+0xc0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_ADC2_Init+0xc0>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <MX_ADC2_Init+0xc0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_ADC2_Init+0xc0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cde:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <MX_ADC2_Init+0xc0>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_ADC2_Init+0xc0>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000cec:	4812      	ldr	r0, [pc, #72]	; (8000d38 <MX_ADC2_Init+0xc0>)
 8000cee:	f001 ffaf 	bl	8002c50 <HAL_ADC_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000cf8:	f000 ffe0 	bl	8001cbc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000cfc:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <MX_ADC2_Init+0xc8>)
 8000cfe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d00:	2306      	movs	r3, #6
 8000d02:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d08:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d0c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d0e:	2304      	movs	r3, #4
 8000d10:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4806      	ldr	r0, [pc, #24]	; (8000d38 <MX_ADC2_Init+0xc0>)
 8000d20:	f002 fd8e 	bl	8003840 <HAL_ADC_ConfigChannel>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000d2a:	f000 ffc7 	bl	8001cbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	3720      	adds	r7, #32
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	24004bec 	.word	0x24004bec
 8000d3c:	40022100 	.word	0x40022100
 8000d40:	0c900008 	.word	0x0c900008

08000d44 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d48:	4b52      	ldr	r3, [pc, #328]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000d4a:	4a53      	ldr	r2, [pc, #332]	; (8000e98 <MX_FDCAN1_Init+0x154>)
 8000d4c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d4e:	4b51      	ldr	r3, [pc, #324]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d54:	4b4f      	ldr	r3, [pc, #316]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000d5a:	4b4e      	ldr	r3, [pc, #312]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d60:	4b4c      	ldr	r3, [pc, #304]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000d66:	4b4b      	ldr	r3, [pc, #300]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 0x1;
 8000d6c:	4b49      	ldr	r3, [pc, #292]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 0x8;
 8000d72:	4b48      	ldr	r3, [pc, #288]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000d74:	2208      	movs	r2, #8
 8000d76:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x1F;
 8000d78:	4b46      	ldr	r3, [pc, #280]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000d7a:	221f      	movs	r2, #31
 8000d7c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 0x8;
 8000d7e:	4b45      	ldr	r3, [pc, #276]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000d80:	2208      	movs	r2, #8
 8000d82:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000d84:	4b43      	ldr	r3, [pc, #268]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000d8a:	4b42      	ldr	r3, [pc, #264]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000d90:	4b40      	ldr	r3, [pc, #256]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000d96:	4b3f      	ldr	r3, [pc, #252]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000d9c:	4b3d      	ldr	r3, [pc, #244]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000da2:	4b3c      	ldr	r3, [pc, #240]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000da8:	4b3a      	ldr	r3, [pc, #232]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000dae:	4b39      	ldr	r3, [pc, #228]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000db4:	4b37      	ldr	r3, [pc, #220]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000db6:	2204      	movs	r2, #4
 8000db8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000dba:	4b36      	ldr	r3, [pc, #216]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000dc0:	4b34      	ldr	r3, [pc, #208]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000dc2:	2204      	movs	r2, #4
 8000dc4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000dc6:	4b33      	ldr	r3, [pc, #204]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000dcc:	4b31      	ldr	r3, [pc, #196]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000dce:	2204      	movs	r2, #4
 8000dd0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000dd2:	4b30      	ldr	r3, [pc, #192]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000dd8:	4b2e      	ldr	r3, [pc, #184]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000dde:	4b2d      	ldr	r3, [pc, #180]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000de4:	4b2b      	ldr	r3, [pc, #172]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000dea:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000dec:	2204      	movs	r2, #4
 8000dee:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000df0:	4828      	ldr	r0, [pc, #160]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000df2:	f005 fa2d 	bl	8006250 <HAL_FDCAN_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000dfc:	f000 ff5e 	bl	8001cbc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
	/* Configure Rx filter */
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000e00:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <MX_FDCAN1_Init+0x158>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIndex = 0;
 8000e06:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <MX_FDCAN1_Init+0x158>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000e0c:	4b23      	ldr	r3, [pc, #140]	; (8000e9c <MX_FDCAN1_Init+0x158>)
 8000e0e:	2202      	movs	r2, #2
 8000e10:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000e12:	4b22      	ldr	r3, [pc, #136]	; (8000e9c <MX_FDCAN1_Init+0x158>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterID1 = 0x140;
 8000e18:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <MX_FDCAN1_Init+0x158>)
 8000e1a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000e1e:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 8000e20:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <MX_FDCAN1_Init+0x158>)
 8000e22:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000e26:	615a      	str	r2, [r3, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000e28:	491c      	ldr	r1, [pc, #112]	; (8000e9c <MX_FDCAN1_Init+0x158>)
 8000e2a:	481a      	ldr	r0, [pc, #104]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000e2c:	f005 fbf2 	bl	8006614 <HAL_FDCAN_ConfigFilter>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_FDCAN1_Init+0xf6>
	{
	  /* Filter configuration Error */
	  Error_Handler();
 8000e36:	f000 ff41 	bl	8001cbc <Error_Handler>
	}

	 /* Start the FDCAN module */
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000e3a:	4816      	ldr	r0, [pc, #88]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000e3c:	f005 fc60 	bl	8006700 <HAL_FDCAN_Start>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d00a      	beq.n	8000e5c <MX_FDCAN1_Init+0x118>
	    /* Start Error */

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000e46:	2200      	movs	r2, #0
 8000e48:	2101      	movs	r1, #1
 8000e4a:	4812      	ldr	r0, [pc, #72]	; (8000e94 <MX_FDCAN1_Init+0x150>)
 8000e4c:	f005 fe4c 	bl	8006ae8 <HAL_FDCAN_ActivateNotification>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d002      	beq.n	8000e5c <MX_FDCAN1_Init+0x118>
	    /* Notification Error */

	  /* Prepare Tx Header */
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000e56:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <MX_FDCAN1_Init+0x15c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	605a      	str	r2, [r3, #4]
	TxHeader.Identifier = 0x140;
 8000e5c:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <MX_FDCAN1_Init+0x15c>)
 8000e5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000e62:	601a      	str	r2, [r3, #0]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000e64:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <MX_FDCAN1_Init+0x15c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <MX_FDCAN1_Init+0x15c>)
 8000e6c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e70:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000e72:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <MX_FDCAN1_Init+0x15c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000e78:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <MX_FDCAN1_Init+0x15c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000e7e:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <MX_FDCAN1_Init+0x15c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MX_FDCAN1_Init+0x15c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 8000e8a:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <MX_FDCAN1_Init+0x15c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	240051bc 	.word	0x240051bc
 8000e98:	4000a000 	.word	0x4000a000
 8000e9c:	24004b38 	.word	0x24004b38
 8000ea0:	24005330 	.word	0x24005330

08000ea4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08c      	sub	sp, #48	; 0x30
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	2224      	movs	r2, #36	; 0x24
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f00f ffe4 	bl	8010e80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb8:	463b      	mov	r3, r7
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ec2:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <MX_TIM2_Init+0xa4>)
 8000ec4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ec8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000eca:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <MX_TIM2_Init+0xa4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed0:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <MX_TIM2_Init+0xa4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <MX_TIM2_Init+0xa4>)
 8000ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8000edc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ede:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <MX_TIM2_Init+0xa4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee4:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <MX_TIM2_Init+0xa4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000eea:	2301      	movs	r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000efa:	230a      	movs	r3, #10
 8000efc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f02:	2301      	movs	r3, #1
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000f0a:	230a      	movs	r3, #10
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000f0e:	f107 030c 	add.w	r3, r7, #12
 8000f12:	4619      	mov	r1, r3
 8000f14:	480c      	ldr	r0, [pc, #48]	; (8000f48 <MX_TIM2_Init+0xa4>)
 8000f16:	f00a fa6d 	bl	800b3f4 <HAL_TIM_Encoder_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000f20:	f000 fecc 	bl	8001cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f24:	2300      	movs	r3, #0
 8000f26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4805      	ldr	r0, [pc, #20]	; (8000f48 <MX_TIM2_Init+0xa4>)
 8000f32:	f00b fa29 	bl	800c388 <HAL_TIMEx_MasterConfigSynchronization>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000f3c:	f000 febe 	bl	8001cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	3730      	adds	r7, #48	; 0x30
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	2400526c 	.word	0x2400526c

08000f4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f5e:	463b      	mov	r3, r7
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
 8000f6c:	615a      	str	r2, [r3, #20]
 8000f6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f70:	4b27      	ldr	r3, [pc, #156]	; (8001010 <MX_TIM3_Init+0xc4>)
 8000f72:	4a28      	ldr	r2, [pc, #160]	; (8001014 <MX_TIM3_Init+0xc8>)
 8000f74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8000f76:	4b26      	ldr	r3, [pc, #152]	; (8001010 <MX_TIM3_Init+0xc4>)
 8000f78:	2203      	movs	r2, #3
 8000f7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7c:	4b24      	ldr	r3, [pc, #144]	; (8001010 <MX_TIM3_Init+0xc4>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000f82:	4b23      	ldr	r3, [pc, #140]	; (8001010 <MX_TIM3_Init+0xc4>)
 8000f84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8a:	4b21      	ldr	r3, [pc, #132]	; (8001010 <MX_TIM3_Init+0xc4>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f90:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <MX_TIM3_Init+0xc4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f96:	481e      	ldr	r0, [pc, #120]	; (8001010 <MX_TIM3_Init+0xc4>)
 8000f98:	f00a f836 	bl	800b008 <HAL_TIM_PWM_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000fa2:	f000 fe8b 	bl	8001cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4816      	ldr	r0, [pc, #88]	; (8001010 <MX_TIM3_Init+0xc4>)
 8000fb6:	f00b f9e7 	bl	800c388 <HAL_TIMEx_MasterConfigSynchronization>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000fc0:	f000 fe7c 	bl	8001cbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fc4:	2360      	movs	r3, #96	; 0x60
 8000fc6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	2208      	movs	r2, #8
 8000fd8:	4619      	mov	r1, r3
 8000fda:	480d      	ldr	r0, [pc, #52]	; (8001010 <MX_TIM3_Init+0xc4>)
 8000fdc:	f00a fd04 	bl	800b9e8 <HAL_TIM_PWM_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000fe6:	f000 fe69 	bl	8001cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fea:	463b      	mov	r3, r7
 8000fec:	220c      	movs	r2, #12
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4807      	ldr	r0, [pc, #28]	; (8001010 <MX_TIM3_Init+0xc4>)
 8000ff2:	f00a fcf9 	bl	800b9e8 <HAL_TIM_PWM_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000ffc:	f000 fe5e 	bl	8001cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001000:	4803      	ldr	r0, [pc, #12]	; (8001010 <MX_TIM3_Init+0xc4>)
 8001002:	f001 f887 	bl	8002114 <HAL_TIM_MspPostInit>

}
 8001006:	bf00      	nop
 8001008:	3728      	adds	r7, #40	; 0x28
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	24005068 	.word	0x24005068
 8001014:	40000400 	.word	0x40000400

08001018 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800101c:	4b22      	ldr	r3, [pc, #136]	; (80010a8 <MX_USART3_UART_Init+0x90>)
 800101e:	4a23      	ldr	r2, [pc, #140]	; (80010ac <MX_USART3_UART_Init+0x94>)
 8001020:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001022:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <MX_USART3_UART_Init+0x90>)
 8001024:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001028:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800102a:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <MX_USART3_UART_Init+0x90>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001030:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <MX_USART3_UART_Init+0x90>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <MX_USART3_UART_Init+0x90>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800103c:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <MX_USART3_UART_Init+0x90>)
 800103e:	220c      	movs	r2, #12
 8001040:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001042:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <MX_USART3_UART_Init+0x90>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001048:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <MX_USART3_UART_Init+0x90>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <MX_USART3_UART_Init+0x90>)
 8001050:	2200      	movs	r2, #0
 8001052:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001054:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_USART3_UART_Init+0x90>)
 8001056:	2200      	movs	r2, #0
 8001058:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <MX_USART3_UART_Init+0x90>)
 800105c:	2200      	movs	r2, #0
 800105e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001060:	4811      	ldr	r0, [pc, #68]	; (80010a8 <MX_USART3_UART_Init+0x90>)
 8001062:	f00b fa37 	bl	800c4d4 <HAL_UART_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800106c:	f000 fe26 	bl	8001cbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001070:	2100      	movs	r1, #0
 8001072:	480d      	ldr	r0, [pc, #52]	; (80010a8 <MX_USART3_UART_Init+0x90>)
 8001074:	f00c fa1a 	bl	800d4ac <HAL_UARTEx_SetTxFifoThreshold>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800107e:	f000 fe1d 	bl	8001cbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001082:	2100      	movs	r1, #0
 8001084:	4808      	ldr	r0, [pc, #32]	; (80010a8 <MX_USART3_UART_Init+0x90>)
 8001086:	f00c fa4f 	bl	800d528 <HAL_UARTEx_SetRxFifoThreshold>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001090:	f000 fe14 	bl	8001cbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001094:	4804      	ldr	r0, [pc, #16]	; (80010a8 <MX_USART3_UART_Init+0x90>)
 8001096:	f00c f9d0 	bl	800d43a <HAL_UARTEx_DisableFifoMode>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80010a0:	f000 fe0c 	bl	8001cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	24004b5c 	.word	0x24004b5c
 80010ac:	40004800 	.word	0x40004800

080010b0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80010b4:	4b15      	ldr	r3, [pc, #84]	; (800110c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010b6:	4a16      	ldr	r2, [pc, #88]	; (8001110 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80010b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010bc:	2209      	movs	r2, #9
 80010be:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010c2:	2202      	movs	r2, #2
 80010c4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010ce:	2202      	movs	r2, #2
 80010d0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80010e4:	4b09      	ldr	r3, [pc, #36]	; (800110c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80010ea:	4b08      	ldr	r3, [pc, #32]	; (800110c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010f8:	f006 fcb2 	bl	8007a60 <HAL_PCD_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001102:	f000 fddb 	bl	8001cbc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	24004c54 	.word	0x24004c54
 8001110:	40080000 	.word	0x40080000

08001114 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_DMA_Init+0x4c>)
 800111c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001120:	4a0f      	ldr	r2, [pc, #60]	; (8001160 <MX_DMA_Init+0x4c>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800112a:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <MX_DMA_Init+0x4c>)
 800112c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	2105      	movs	r1, #5
 800113c:	200b      	movs	r0, #11
 800113e:	f003 fb90 	bl	8004862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001142:	200b      	movs	r0, #11
 8001144:	f003 fba7 	bl	8004896 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001148:	2200      	movs	r2, #0
 800114a:	2105      	movs	r1, #5
 800114c:	200c      	movs	r0, #12
 800114e:	f003 fb88 	bl	8004862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001152:	200c      	movs	r0, #12
 8001154:	f003 fb9f 	bl	8004896 <HAL_NVIC_EnableIRQ>

}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	58024400 	.word	0x58024400

08001164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08e      	sub	sp, #56	; 0x38
 8001168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117a:	4b6a      	ldr	r3, [pc, #424]	; (8001324 <MX_GPIO_Init+0x1c0>)
 800117c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001180:	4a68      	ldr	r2, [pc, #416]	; (8001324 <MX_GPIO_Init+0x1c0>)
 8001182:	f043 0304 	orr.w	r3, r3, #4
 8001186:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800118a:	4b66      	ldr	r3, [pc, #408]	; (8001324 <MX_GPIO_Init+0x1c0>)
 800118c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	623b      	str	r3, [r7, #32]
 8001196:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001198:	4b62      	ldr	r3, [pc, #392]	; (8001324 <MX_GPIO_Init+0x1c0>)
 800119a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119e:	4a61      	ldr	r2, [pc, #388]	; (8001324 <MX_GPIO_Init+0x1c0>)
 80011a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a8:	4b5e      	ldr	r3, [pc, #376]	; (8001324 <MX_GPIO_Init+0x1c0>)
 80011aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b2:	61fb      	str	r3, [r7, #28]
 80011b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4b5b      	ldr	r3, [pc, #364]	; (8001324 <MX_GPIO_Init+0x1c0>)
 80011b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011bc:	4a59      	ldr	r2, [pc, #356]	; (8001324 <MX_GPIO_Init+0x1c0>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c6:	4b57      	ldr	r3, [pc, #348]	; (8001324 <MX_GPIO_Init+0x1c0>)
 80011c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	61bb      	str	r3, [r7, #24]
 80011d2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d4:	4b53      	ldr	r3, [pc, #332]	; (8001324 <MX_GPIO_Init+0x1c0>)
 80011d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011da:	4a52      	ldr	r2, [pc, #328]	; (8001324 <MX_GPIO_Init+0x1c0>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011e4:	4b4f      	ldr	r3, [pc, #316]	; (8001324 <MX_GPIO_Init+0x1c0>)
 80011e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011f2:	4b4c      	ldr	r3, [pc, #304]	; (8001324 <MX_GPIO_Init+0x1c0>)
 80011f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f8:	4a4a      	ldr	r2, [pc, #296]	; (8001324 <MX_GPIO_Init+0x1c0>)
 80011fa:	f043 0320 	orr.w	r3, r3, #32
 80011fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001202:	4b48      	ldr	r3, [pc, #288]	; (8001324 <MX_GPIO_Init+0x1c0>)
 8001204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001208:	f003 0320 	and.w	r3, r3, #32
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001210:	4b44      	ldr	r3, [pc, #272]	; (8001324 <MX_GPIO_Init+0x1c0>)
 8001212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001216:	4a43      	ldr	r2, [pc, #268]	; (8001324 <MX_GPIO_Init+0x1c0>)
 8001218:	f043 0310 	orr.w	r3, r3, #16
 800121c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001220:	4b40      	ldr	r3, [pc, #256]	; (8001324 <MX_GPIO_Init+0x1c0>)
 8001222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001226:	f003 0310 	and.w	r3, r3, #16
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800122e:	4b3d      	ldr	r3, [pc, #244]	; (8001324 <MX_GPIO_Init+0x1c0>)
 8001230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001234:	4a3b      	ldr	r2, [pc, #236]	; (8001324 <MX_GPIO_Init+0x1c0>)
 8001236:	f043 0308 	orr.w	r3, r3, #8
 800123a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800123e:	4b39      	ldr	r3, [pc, #228]	; (8001324 <MX_GPIO_Init+0x1c0>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001244:	f003 0308 	and.w	r3, r3, #8
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800124c:	4b35      	ldr	r3, [pc, #212]	; (8001324 <MX_GPIO_Init+0x1c0>)
 800124e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001252:	4a34      	ldr	r2, [pc, #208]	; (8001324 <MX_GPIO_Init+0x1c0>)
 8001254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001258:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800125c:	4b31      	ldr	r3, [pc, #196]	; (8001324 <MX_GPIO_Init+0x1c0>)
 800125e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	f244 0101 	movw	r1, #16385	; 0x4001
 8001270:	482d      	ldr	r0, [pc, #180]	; (8001328 <MX_GPIO_Init+0x1c4>)
 8001272:	f006 fb93 	bl	800799c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11|LD2_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	f640 0102 	movw	r1, #2050	; 0x802
 800127c:	482b      	ldr	r0, [pc, #172]	; (800132c <MX_GPIO_Init+0x1c8>)
 800127e:	f006 fb8d 	bl	800799c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6|GPIO_PIN_14, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	f244 0140 	movw	r1, #16448	; 0x4040
 8001288:	4829      	ldr	r0, [pc, #164]	; (8001330 <MX_GPIO_Init+0x1cc>)
 800128a:	f006 fb87 	bl	800799c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800128e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001294:	2300      	movs	r3, #0
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800129c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a0:	4619      	mov	r1, r3
 80012a2:	4824      	ldr	r0, [pc, #144]	; (8001334 <MX_GPIO_Init+0x1d0>)
 80012a4:	f006 f9b2 	bl	800760c <HAL_GPIO_Init>

  /*Configure GPIO pin : Limit_Switch_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_Pin;
 80012a8:	2308      	movs	r3, #8
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ac:	2300      	movs	r3, #0
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012b0:	2302      	movs	r3, #2
 80012b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Limit_Switch_GPIO_Port, &GPIO_InitStruct);
 80012b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b8:	4619      	mov	r1, r3
 80012ba:	481f      	ldr	r0, [pc, #124]	; (8001338 <MX_GPIO_Init+0x1d4>)
 80012bc:	f006 f9a6 	bl	800760c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80012c0:	f244 0301 	movw	r3, #16385	; 0x4001
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c6:	2301      	movs	r3, #1
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2300      	movs	r3, #0
 80012d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d6:	4619      	mov	r1, r3
 80012d8:	4813      	ldr	r0, [pc, #76]	; (8001328 <MX_GPIO_Init+0x1c4>)
 80012da:	f006 f997 	bl	800760c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_11|LD2_Pin;
 80012de:	f640 0302 	movw	r3, #2050	; 0x802
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f4:	4619      	mov	r1, r3
 80012f6:	480d      	ldr	r0, [pc, #52]	; (800132c <MX_GPIO_Init+0x1c8>)
 80012f8:	f006 f988 	bl	800760c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_14;
 80012fc:	f244 0340 	movw	r3, #16448	; 0x4040
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001302:	2301      	movs	r3, #1
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800130e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001312:	4619      	mov	r1, r3
 8001314:	4806      	ldr	r0, [pc, #24]	; (8001330 <MX_GPIO_Init+0x1cc>)
 8001316:	f006 f979 	bl	800760c <HAL_GPIO_Init>

}
 800131a:	bf00      	nop
 800131c:	3738      	adds	r7, #56	; 0x38
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	58024400 	.word	0x58024400
 8001328:	58020400 	.word	0x58020400
 800132c:	58021000 	.word	0x58021000
 8001330:	58021800 	.word	0x58021800
 8001334:	58020800 	.word	0x58020800
 8001338:	58020000 	.word	0x58020000
 800133c:	00000000 	.word	0x00000000

08001340 <GoHome>:

/* USER CODE BEGIN 4 */

void GoHome(void) {
 8001340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001342:	b0a3      	sub	sp, #140	; 0x8c
 8001344:	af12      	add	r7, sp, #72	; 0x48
	//Deten el encoder
	HAL_TIM_Encoder_Stop(&htim2, TIM_CHANNEL_ALL);
 8001346:	213c      	movs	r1, #60	; 0x3c
 8001348:	487d      	ldr	r0, [pc, #500]	; (8001540 <GoHome+0x200>)
 800134a:	f00a f987 	bl	800b65c <HAL_TIM_Encoder_Stop>

	uint8_t MSG[50] = { '\0' };
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	f107 0308 	add.w	r3, r7, #8
 8001356:	222e      	movs	r2, #46	; 0x2e
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f00f fd90 	bl	8010e80 <memset>
	sprintf(MSG, "Limit Switch pressed\n");
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	4978      	ldr	r1, [pc, #480]	; (8001544 <GoHome+0x204>)
 8001364:	4618      	mov	r0, r3
 8001366:	f010 f9d5 	bl	8011714 <siprintf>

	//Pon el motor en reversa
	setPWM(htim3, reversePWM, 255, 255);
 800136a:	4e77      	ldr	r6, [pc, #476]	; (8001548 <GoHome+0x208>)
 800136c:	23ff      	movs	r3, #255	; 0xff
 800136e:	9311      	str	r3, [sp, #68]	; 0x44
 8001370:	23ff      	movs	r3, #255	; 0xff
 8001372:	9310      	str	r3, [sp, #64]	; 0x40
 8001374:	230c      	movs	r3, #12
 8001376:	930f      	str	r3, [sp, #60]	; 0x3c
 8001378:	466d      	mov	r5, sp
 800137a:	f106 0410 	add.w	r4, r6, #16
 800137e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001380:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001382:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001384:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001386:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001388:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800138a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800138e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001392:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001396:	f000 f8df 	bl	8001558 <setPWM>
	setPWM(htim3, forwardPWM, 255, 0);
 800139a:	4e6b      	ldr	r6, [pc, #428]	; (8001548 <GoHome+0x208>)
 800139c:	2300      	movs	r3, #0
 800139e:	9311      	str	r3, [sp, #68]	; 0x44
 80013a0:	23ff      	movs	r3, #255	; 0xff
 80013a2:	9310      	str	r3, [sp, #64]	; 0x40
 80013a4:	2308      	movs	r3, #8
 80013a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80013a8:	466d      	mov	r5, sp
 80013aa:	f106 0410 	add.w	r4, r6, #16
 80013ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ba:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80013be:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80013c2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80013c6:	f000 f8c7 	bl	8001558 <setPWM>

	//Espera a que el switch se presione
	while (HAL_GPIO_ReadPin(Limit_Switch_GPIO_Port, Limit_Switch_Pin))
 80013ca:	bf00      	nop
 80013cc:	2108      	movs	r1, #8
 80013ce:	485f      	ldr	r0, [pc, #380]	; (800154c <GoHome+0x20c>)
 80013d0:	f006 facc 	bl	800796c <HAL_GPIO_ReadPin>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f8      	bne.n	80013cc <GoHome+0x8c>
		;

	HAL_UART_Transmit(&huart3, MSG, sizeof(MSG), 100);
 80013da:	1d39      	adds	r1, r7, #4
 80013dc:	2364      	movs	r3, #100	; 0x64
 80013de:	2232      	movs	r2, #50	; 0x32
 80013e0:	485b      	ldr	r0, [pc, #364]	; (8001550 <GoHome+0x210>)
 80013e2:	f00b f8c7 	bl	800c574 <HAL_UART_Transmit>

	//Hacer que el motor se mueve en reversa 2cm
	setPWM(htim3, reversePWM, 255, 0);
 80013e6:	4e58      	ldr	r6, [pc, #352]	; (8001548 <GoHome+0x208>)
 80013e8:	2300      	movs	r3, #0
 80013ea:	9311      	str	r3, [sp, #68]	; 0x44
 80013ec:	23ff      	movs	r3, #255	; 0xff
 80013ee:	9310      	str	r3, [sp, #64]	; 0x40
 80013f0:	230c      	movs	r3, #12
 80013f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80013f4:	466d      	mov	r5, sp
 80013f6:	f106 0410 	add.w	r4, r6, #16
 80013fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001406:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800140a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800140e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001412:	f000 f8a1 	bl	8001558 <setPWM>
	setPWM(htim3, forwardPWM, 255, 255);
 8001416:	4e4c      	ldr	r6, [pc, #304]	; (8001548 <GoHome+0x208>)
 8001418:	23ff      	movs	r3, #255	; 0xff
 800141a:	9311      	str	r3, [sp, #68]	; 0x44
 800141c:	23ff      	movs	r3, #255	; 0xff
 800141e:	9310      	str	r3, [sp, #64]	; 0x40
 8001420:	2308      	movs	r3, #8
 8001422:	930f      	str	r3, [sp, #60]	; 0x3c
 8001424:	466d      	mov	r5, sp
 8001426:	f106 0410 	add.w	r4, r6, #16
 800142a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800142c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800142e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001430:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001434:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001436:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800143a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800143e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001442:	f000 f889 	bl	8001558 <setPWM>
	int32_t steps;
	float cm = 0;
 8001446:	f04f 0300 	mov.w	r3, #0
 800144a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800144c:	213c      	movs	r1, #60	; 0x3c
 800144e:	483c      	ldr	r0, [pc, #240]	; (8001540 <GoHome+0x200>)
 8001450:	f00a f876 	bl	800b540 <HAL_TIM_Encoder_Start>
	//Pon valor del encoder en 0
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001454:	4b3a      	ldr	r3, [pc, #232]	; (8001540 <GoHome+0x200>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2200      	movs	r2, #0
 800145a:	625a      	str	r2, [r3, #36]	; 0x24
	while (cm < 2) {
 800145c:	e024      	b.n	80014a8 <GoHome+0x168>
		steps = __HAL_TIM_GET_COUNTER(&htim2);
 800145e:	4b38      	ldr	r3, [pc, #224]	; (8001540 <GoHome+0x200>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001464:	63bb      	str	r3, [r7, #56]	; 0x38
		cm = steps * 0.4 / 497;
 8001466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001468:	ee07 3a90 	vmov	s15, r3
 800146c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001470:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8001530 <GoHome+0x1f0>
 8001474:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001478:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8001538 <GoHome+0x1f8>
 800147c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001480:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001484:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		sprintf(MSG, "Centimeters = %f\n\r    ", cm);
 8001488:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800148c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001490:	1d38      	adds	r0, r7, #4
 8001492:	ec53 2b17 	vmov	r2, r3, d7
 8001496:	492f      	ldr	r1, [pc, #188]	; (8001554 <GoHome+0x214>)
 8001498:	f010 f93c 	bl	8011714 <siprintf>
		HAL_UART_Transmit(&huart3, MSG, sizeof(MSG), 40);
 800149c:	1d39      	adds	r1, r7, #4
 800149e:	2328      	movs	r3, #40	; 0x28
 80014a0:	2232      	movs	r2, #50	; 0x32
 80014a2:	482b      	ldr	r0, [pc, #172]	; (8001550 <GoHome+0x210>)
 80014a4:	f00b f866 	bl	800c574 <HAL_UART_Transmit>
	while (cm < 2) {
 80014a8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80014ac:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80014b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b8:	d4d1      	bmi.n	800145e <GoHome+0x11e>
	}
	//volver a poner el valor del encoder en 0
	setPWM(htim3, reversePWM, 255, 0);
 80014ba:	4e23      	ldr	r6, [pc, #140]	; (8001548 <GoHome+0x208>)
 80014bc:	2300      	movs	r3, #0
 80014be:	9311      	str	r3, [sp, #68]	; 0x44
 80014c0:	23ff      	movs	r3, #255	; 0xff
 80014c2:	9310      	str	r3, [sp, #64]	; 0x40
 80014c4:	230c      	movs	r3, #12
 80014c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80014c8:	466d      	mov	r5, sp
 80014ca:	f106 0410 	add.w	r4, r6, #16
 80014ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014da:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80014de:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80014e2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80014e6:	f000 f837 	bl	8001558 <setPWM>
	setPWM(htim3, forwardPWM, 255, 0);
 80014ea:	4e17      	ldr	r6, [pc, #92]	; (8001548 <GoHome+0x208>)
 80014ec:	2300      	movs	r3, #0
 80014ee:	9311      	str	r3, [sp, #68]	; 0x44
 80014f0:	23ff      	movs	r3, #255	; 0xff
 80014f2:	9310      	str	r3, [sp, #64]	; 0x40
 80014f4:	2308      	movs	r3, #8
 80014f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80014f8:	466d      	mov	r5, sp
 80014fa:	f106 0410 	add.w	r4, r6, #16
 80014fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001500:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001502:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001504:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001506:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001508:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800150a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800150e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001512:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001516:	f000 f81f 	bl	8001558 <setPWM>
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <GoHome+0x200>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2200      	movs	r2, #0
 8001520:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001522:	bf00      	nop
 8001524:	3744      	adds	r7, #68	; 0x44
 8001526:	46bd      	mov	sp, r7
 8001528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800152a:	bf00      	nop
 800152c:	f3af 8000 	nop.w
 8001530:	9999999a 	.word	0x9999999a
 8001534:	3fd99999 	.word	0x3fd99999
 8001538:	00000000 	.word	0x00000000
 800153c:	407f1000 	.word	0x407f1000
 8001540:	2400526c 	.word	0x2400526c
 8001544:	08013b7c 	.word	0x08013b7c
 8001548:	24005068 	.word	0x24005068
 800154c:	58020000 	.word	0x58020000
 8001550:	24004b5c 	.word	0x24004b5c
 8001554:	08013b94 	.word	0x08013b94

08001558 <setPWM>:

void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period,
		uint16_t pulse) {
 8001558:	b084      	sub	sp, #16
 800155a:	b580      	push	{r7, lr}
 800155c:	b088      	sub	sp, #32
 800155e:	af00      	add	r7, sp, #0
 8001560:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001564:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 8001568:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800156a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800156e:	f009 feab 	bl	800b2c8 <HAL_TIM_PWM_Stop>
	TIM_OC_InitTypeDef sConfigOC;
	timer.Init.Period = period; // set the period duration
 8001572:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8001576:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
 8001578:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800157c:	f009 fd44 	bl	800b008 <HAL_TIM_PWM_Init>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001580:	2360      	movs	r3, #96	; 0x60
 8001582:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = pulse; // set the pulse duration
 8001584:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8001588:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001596:	4619      	mov	r1, r3
 8001598:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800159c:	f00a fa24 	bl	800b9e8 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 80015a0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80015a2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80015a6:	f009 fd87 	bl	800b0b8 <HAL_TIM_PWM_Start>
}
 80015aa:	bf00      	nop
 80015ac:	3720      	adds	r7, #32
 80015ae:	46bd      	mov	sp, r7
 80015b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015b4:	b004      	add	sp, #16
 80015b6:	4770      	bx	lr

080015b8 <StartEncoderTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b092      	sub	sp, #72	; 0x48
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t MSG[50] = { '\0' };
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	222e      	movs	r2, #46	; 0x2e
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f00f fc57 	bl	8010e80 <memset>
	int32_t steps = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	647b      	str	r3, [r7, #68]	; 0x44
	int16_t mm = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	position pos;
	uint8_t ret[4] = { '\0' };
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for (;;) {
		steps = __HAL_TIM_GET_COUNTER(&htim2);
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <StartEncoderTask+0x74>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	647b      	str	r3, [r7, #68]	; 0x44
		mm = steps * 4 / 497;
 80015e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4a10      	ldr	r2, [pc, #64]	; (8001630 <StartEncoderTask+0x78>)
 80015ee:	fb82 1203 	smull	r1, r2, r2, r3
 80015f2:	11d2      	asrs	r2, r2, #7
 80015f4:	17db      	asrs	r3, r3, #31
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		//sprintf(MSG, "Milimeters = %d\n\r    ", mm);
		//HAL_UART_Transmit(&huart3, MSG, sizeof(MSG), 50);
		pos.pos = mm;
 80015fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001600:	81bb      	strh	r3, [r7, #12]
		osMessageQueuePut(positionControlQueueHandle, &pos, NULL, 10);
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <StartEncoderTask+0x7c>)
 8001604:	6818      	ldr	r0, [r3, #0]
 8001606:	f107 010c 	add.w	r1, r7, #12
 800160a:	230a      	movs	r3, #10
 800160c:	2200      	movs	r2, #0
 800160e:	f00c fcfd 	bl	800e00c <osMessageQueuePut>
		osMessageQueuePut(positionCanQueueHandle, &pos, NULL, 10);
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <StartEncoderTask+0x80>)
 8001614:	6818      	ldr	r0, [r3, #0]
 8001616:	f107 010c 	add.w	r1, r7, #12
 800161a:	230a      	movs	r3, #10
 800161c:	2200      	movs	r2, #0
 800161e:	f00c fcf5 	bl	800e00c <osMessageQueuePut>
		osDelay(100);
 8001622:	2064      	movs	r0, #100	; 0x64
 8001624:	f00c fbda 	bl	800dddc <osDelay>
		steps = __HAL_TIM_GET_COUNTER(&htim2);
 8001628:	e7da      	b.n	80015e0 <StartEncoderTask+0x28>
 800162a:	bf00      	nop
 800162c:	2400526c 	.word	0x2400526c
 8001630:	41ee7ca7 	.word	0x41ee7ca7
 8001634:	2400525c 	.word	0x2400525c
 8001638:	240050bc 	.word	0x240050bc

0800163c <StartControlTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControlTask */
void StartControlTask(void *argument)
{
 800163c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163e:	b0a7      	sub	sp, #156	; 0x9c
 8001640:	af12      	add	r7, sp, #72	; 0x48
 8001642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControlTask */
	uint16_t num1 = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t num2 = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	position desPos;
	position pos;
	status statu;
	statu.statusflag = 0x00;
 8001650:	2300      	movs	r3, #0
 8001652:	87bb      	strh	r3, [r7, #60]	; 0x3c
	uint8_t MSG[50] = { '\0' };
 8001654:	2300      	movs	r3, #0
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	f107 030c 	add.w	r3, r7, #12
 800165c:	222e      	movs	r2, #46	; 0x2e
 800165e:	2100      	movs	r1, #0
 8001660:	4618      	mov	r0, r3
 8001662:	f00f fc0d 	bl	8010e80 <memset>

	osStatus_t estado;
	/* Infinite loop */
	for (;;) {
		estado = osMessageQueueGet(systemDiagnosisQueueHandle, &statu, NULL, 10);
 8001666:	4b7c      	ldr	r3, [pc, #496]	; (8001858 <StartControlTask+0x21c>)
 8001668:	6818      	ldr	r0, [r3, #0]
 800166a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800166e:	230a      	movs	r3, #10
 8001670:	2200      	movs	r2, #0
 8001672:	f00c fd2b 	bl	800e0cc <osMessageQueueGet>
 8001676:	64b8      	str	r0, [r7, #72]	; 0x48
		if(statu.statusflag != 0x00 ){
 8001678:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800167a:	2b00      	cmp	r3, #0
 800167c:	d030      	beq.n	80016e0 <StartControlTask+0xa4>
			setPWM(htim3, reversePWM, 255, 0);
 800167e:	4e77      	ldr	r6, [pc, #476]	; (800185c <StartControlTask+0x220>)
 8001680:	2300      	movs	r3, #0
 8001682:	9311      	str	r3, [sp, #68]	; 0x44
 8001684:	23ff      	movs	r3, #255	; 0xff
 8001686:	9310      	str	r3, [sp, #64]	; 0x40
 8001688:	230c      	movs	r3, #12
 800168a:	930f      	str	r3, [sp, #60]	; 0x3c
 800168c:	466d      	mov	r5, sp
 800168e:	f106 0410 	add.w	r4, r6, #16
 8001692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800169a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800169c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800169e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80016a2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80016a6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80016aa:	f7ff ff55 	bl	8001558 <setPWM>
			setPWM(htim3, forwardPWM, 255, 0);
 80016ae:	4e6b      	ldr	r6, [pc, #428]	; (800185c <StartControlTask+0x220>)
 80016b0:	2300      	movs	r3, #0
 80016b2:	9311      	str	r3, [sp, #68]	; 0x44
 80016b4:	23ff      	movs	r3, #255	; 0xff
 80016b6:	9310      	str	r3, [sp, #64]	; 0x40
 80016b8:	2308      	movs	r3, #8
 80016ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80016bc:	466d      	mov	r5, sp
 80016be:	f106 0410 	add.w	r4, r6, #16
 80016c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ce:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80016d2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80016d6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80016da:	f7ff ff3d 	bl	8001558 <setPWM>
 80016de:	e0b7      	b.n	8001850 <StartControlTask+0x214>
		}
		else{
			osMessageQueueGet(positionControlQueueHandle, &pos, NULL, 10);
 80016e0:	4b5f      	ldr	r3, [pc, #380]	; (8001860 <StartControlTask+0x224>)
 80016e2:	6818      	ldr	r0, [r3, #0]
 80016e4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80016e8:	230a      	movs	r3, #10
 80016ea:	2200      	movs	r2, #0
 80016ec:	f00c fcee 	bl	800e0cc <osMessageQueueGet>
			osMessageQueueGet(desiredPositionQueueHandle, &desPos, NULL, 10);
 80016f0:	4b5c      	ldr	r3, [pc, #368]	; (8001864 <StartControlTask+0x228>)
 80016f2:	6818      	ldr	r0, [r3, #0]
 80016f4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80016f8:	230a      	movs	r3, #10
 80016fa:	2200      	movs	r2, #0
 80016fc:	f00c fce6 	bl	800e0cc <osMessageQueueGet>
			num1 = pos.pos;
 8001700:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001704:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			num2 = desPos.pos;
 8001708:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800170c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			if (num1 > num2 + 2) {
 8001710:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8001714:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001718:	3302      	adds	r3, #2
 800171a:	429a      	cmp	r2, r3
 800171c:	dd30      	ble.n	8001780 <StartControlTask+0x144>
				setPWM(htim3, reversePWM, 255, 255);
 800171e:	4e4f      	ldr	r6, [pc, #316]	; (800185c <StartControlTask+0x220>)
 8001720:	23ff      	movs	r3, #255	; 0xff
 8001722:	9311      	str	r3, [sp, #68]	; 0x44
 8001724:	23ff      	movs	r3, #255	; 0xff
 8001726:	9310      	str	r3, [sp, #64]	; 0x40
 8001728:	230c      	movs	r3, #12
 800172a:	930f      	str	r3, [sp, #60]	; 0x3c
 800172c:	466d      	mov	r5, sp
 800172e:	f106 0410 	add.w	r4, r6, #16
 8001732:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001734:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001736:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001738:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800173a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800173c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800173e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001742:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001746:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800174a:	f7ff ff05 	bl	8001558 <setPWM>
				setPWM(htim3, forwardPWM, 255, 0);
 800174e:	4e43      	ldr	r6, [pc, #268]	; (800185c <StartControlTask+0x220>)
 8001750:	2300      	movs	r3, #0
 8001752:	9311      	str	r3, [sp, #68]	; 0x44
 8001754:	23ff      	movs	r3, #255	; 0xff
 8001756:	9310      	str	r3, [sp, #64]	; 0x40
 8001758:	2308      	movs	r3, #8
 800175a:	930f      	str	r3, [sp, #60]	; 0x3c
 800175c:	466d      	mov	r5, sp
 800175e:	f106 0410 	add.w	r4, r6, #16
 8001762:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001764:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001766:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001768:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800176a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800176c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800176e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001772:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001776:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800177a:	f7ff feed 	bl	8001558 <setPWM>
 800177e:	e067      	b.n	8001850 <StartControlTask+0x214>
			} else if (num1 < num2 - 2) {
 8001780:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8001784:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001788:	3b02      	subs	r3, #2
 800178a:	429a      	cmp	r2, r3
 800178c:	da30      	bge.n	80017f0 <StartControlTask+0x1b4>
				setPWM(htim3, reversePWM, 255, 0);
 800178e:	4e33      	ldr	r6, [pc, #204]	; (800185c <StartControlTask+0x220>)
 8001790:	2300      	movs	r3, #0
 8001792:	9311      	str	r3, [sp, #68]	; 0x44
 8001794:	23ff      	movs	r3, #255	; 0xff
 8001796:	9310      	str	r3, [sp, #64]	; 0x40
 8001798:	230c      	movs	r3, #12
 800179a:	930f      	str	r3, [sp, #60]	; 0x3c
 800179c:	466d      	mov	r5, sp
 800179e:	f106 0410 	add.w	r4, r6, #16
 80017a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ae:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80017b2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80017b6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80017ba:	f7ff fecd 	bl	8001558 <setPWM>
				setPWM(htim3, forwardPWM, 255, 255);
 80017be:	4e27      	ldr	r6, [pc, #156]	; (800185c <StartControlTask+0x220>)
 80017c0:	23ff      	movs	r3, #255	; 0xff
 80017c2:	9311      	str	r3, [sp, #68]	; 0x44
 80017c4:	23ff      	movs	r3, #255	; 0xff
 80017c6:	9310      	str	r3, [sp, #64]	; 0x40
 80017c8:	2308      	movs	r3, #8
 80017ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80017cc:	466d      	mov	r5, sp
 80017ce:	f106 0410 	add.w	r4, r6, #16
 80017d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017de:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80017e2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80017e6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80017ea:	f7ff feb5 	bl	8001558 <setPWM>
 80017ee:	e02f      	b.n	8001850 <StartControlTask+0x214>
			} else {
				setPWM(htim3, reversePWM, 255, 0);
 80017f0:	4e1a      	ldr	r6, [pc, #104]	; (800185c <StartControlTask+0x220>)
 80017f2:	2300      	movs	r3, #0
 80017f4:	9311      	str	r3, [sp, #68]	; 0x44
 80017f6:	23ff      	movs	r3, #255	; 0xff
 80017f8:	9310      	str	r3, [sp, #64]	; 0x40
 80017fa:	230c      	movs	r3, #12
 80017fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80017fe:	466d      	mov	r5, sp
 8001800:	f106 0410 	add.w	r4, r6, #16
 8001804:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001806:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001808:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800180a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800180c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800180e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001810:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001814:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001818:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800181c:	f7ff fe9c 	bl	8001558 <setPWM>
				setPWM(htim3, forwardPWM, 255, 0);
 8001820:	4e0e      	ldr	r6, [pc, #56]	; (800185c <StartControlTask+0x220>)
 8001822:	2300      	movs	r3, #0
 8001824:	9311      	str	r3, [sp, #68]	; 0x44
 8001826:	23ff      	movs	r3, #255	; 0xff
 8001828:	9310      	str	r3, [sp, #64]	; 0x40
 800182a:	2308      	movs	r3, #8
 800182c:	930f      	str	r3, [sp, #60]	; 0x3c
 800182e:	466d      	mov	r5, sp
 8001830:	f106 0410 	add.w	r4, r6, #16
 8001834:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001836:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001838:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800183a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800183c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800183e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001840:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001844:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001848:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800184c:	f7ff fe84 	bl	8001558 <setPWM>
			}
		}
		osDelay(50);
 8001850:	2032      	movs	r0, #50	; 0x32
 8001852:	f00c fac3 	bl	800dddc <osDelay>
		estado = osMessageQueueGet(systemDiagnosisQueueHandle, &statu, NULL, 10);
 8001856:	e706      	b.n	8001666 <StartControlTask+0x2a>
 8001858:	24004c50 	.word	0x24004c50
 800185c:	24005068 	.word	0x24005068
 8001860:	2400525c 	.word	0x2400525c
 8001864:	24005134 	.word	0x24005134

08001868 <StartDiagnosisTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDiagnosisTask */
void StartDiagnosisTask(void *argument)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	/* Infinite loop */

	status statusMessage;

	for (;;) {
		maxValue = 2.6; //Volts
 8001870:	4ba3      	ldr	r3, [pc, #652]	; (8001b00 <StartDiagnosisTask+0x298>)
 8001872:	4aa4      	ldr	r2, [pc, #656]	; (8001b04 <StartDiagnosisTask+0x29c>)
 8001874:	601a      	str	r2, [r3, #0]
		minValue = 0.5; //Volts
 8001876:	4ba4      	ldr	r3, [pc, #656]	; (8001b08 <StartDiagnosisTask+0x2a0>)
 8001878:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800187c:	601a      	str	r2, [r3, #0]

		//Initialize ADC and assign variables
		HAL_ADC_Start(&hadc1);
 800187e:	48a3      	ldr	r0, [pc, #652]	; (8001b0c <StartDiagnosisTask+0x2a4>)
 8001880:	f001 fb86 	bl	8002f90 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 8001884:	2164      	movs	r1, #100	; 0x64
 8001886:	48a1      	ldr	r0, [pc, #644]	; (8001b0c <StartDiagnosisTask+0x2a4>)
 8001888:	f001 fc80 	bl	800318c <HAL_ADC_PollForConversion>
		adc_vol = HAL_ADC_GetValue(&hadc1);
 800188c:	489f      	ldr	r0, [pc, #636]	; (8001b0c <StartDiagnosisTask+0x2a4>)
 800188e:	f001 fd71 	bl	8003374 <HAL_ADC_GetValue>
 8001892:	4603      	mov	r3, r0
 8001894:	4a9e      	ldr	r2, [pc, #632]	; (8001b10 <StartDiagnosisTask+0x2a8>)
 8001896:	6013      	str	r3, [r2, #0]
		HAL_ADC_Start(&hadc2);
 8001898:	489e      	ldr	r0, [pc, #632]	; (8001b14 <StartDiagnosisTask+0x2ac>)
 800189a:	f001 fb79 	bl	8002f90 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, 100);
 800189e:	2164      	movs	r1, #100	; 0x64
 80018a0:	489c      	ldr	r0, [pc, #624]	; (8001b14 <StartDiagnosisTask+0x2ac>)
 80018a2:	f001 fc73 	bl	800318c <HAL_ADC_PollForConversion>
		adc_cor = HAL_ADC_GetValue(&hadc2);
 80018a6:	489b      	ldr	r0, [pc, #620]	; (8001b14 <StartDiagnosisTask+0x2ac>)
 80018a8:	f001 fd64 	bl	8003374 <HAL_ADC_GetValue>
 80018ac:	4603      	mov	r3, r0
 80018ae:	4a9a      	ldr	r2, [pc, #616]	; (8001b18 <StartDiagnosisTask+0x2b0>)
 80018b0:	6013      	str	r3, [r2, #0]

		voltage = (adc_vol*3.3)/65536.0; //Volts
 80018b2:	4b97      	ldr	r3, [pc, #604]	; (8001b10 <StartDiagnosisTask+0x2a8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	ee07 3a90 	vmov	s15, r3
 80018ba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80018be:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 8001af0 <StartDiagnosisTask+0x288>
 80018c2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80018c6:	ed9f 5b8c 	vldr	d5, [pc, #560]	; 8001af8 <StartDiagnosisTask+0x290>
 80018ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018d2:	4b92      	ldr	r3, [pc, #584]	; (8001b1c <StartDiagnosisTask+0x2b4>)
 80018d4:	edc3 7a00 	vstr	s15, [r3]
		current = (adc_cor*3.3)/65536.0; //Volts
 80018d8:	4b8f      	ldr	r3, [pc, #572]	; (8001b18 <StartDiagnosisTask+0x2b0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	ee07 3a90 	vmov	s15, r3
 80018e0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80018e4:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8001af0 <StartDiagnosisTask+0x288>
 80018e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80018ec:	ed9f 5b82 	vldr	d5, [pc, #520]	; 8001af8 <StartDiagnosisTask+0x290>
 80018f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018f8:	4b89      	ldr	r3, [pc, #548]	; (8001b20 <StartDiagnosisTask+0x2b8>)
 80018fa:	edc3 7a00 	vstr	s15, [r3]

			  //Conditioners
		if((voltage > minValue && voltage < maxValue) && (current < maxValue && current > minValue))
 80018fe:	4b87      	ldr	r3, [pc, #540]	; (8001b1c <StartDiagnosisTask+0x2b4>)
 8001900:	ed93 7a00 	vldr	s14, [r3]
 8001904:	4b80      	ldr	r3, [pc, #512]	; (8001b08 <StartDiagnosisTask+0x2a0>)
 8001906:	edd3 7a00 	vldr	s15, [r3]
 800190a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800190e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001912:	dd32      	ble.n	800197a <StartDiagnosisTask+0x112>
 8001914:	4b81      	ldr	r3, [pc, #516]	; (8001b1c <StartDiagnosisTask+0x2b4>)
 8001916:	ed93 7a00 	vldr	s14, [r3]
 800191a:	4b79      	ldr	r3, [pc, #484]	; (8001b00 <StartDiagnosisTask+0x298>)
 800191c:	edd3 7a00 	vldr	s15, [r3]
 8001920:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001928:	d527      	bpl.n	800197a <StartDiagnosisTask+0x112>
 800192a:	4b7d      	ldr	r3, [pc, #500]	; (8001b20 <StartDiagnosisTask+0x2b8>)
 800192c:	ed93 7a00 	vldr	s14, [r3]
 8001930:	4b73      	ldr	r3, [pc, #460]	; (8001b00 <StartDiagnosisTask+0x298>)
 8001932:	edd3 7a00 	vldr	s15, [r3]
 8001936:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800193a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193e:	d51c      	bpl.n	800197a <StartDiagnosisTask+0x112>
 8001940:	4b77      	ldr	r3, [pc, #476]	; (8001b20 <StartDiagnosisTask+0x2b8>)
 8001942:	ed93 7a00 	vldr	s14, [r3]
 8001946:	4b70      	ldr	r3, [pc, #448]	; (8001b08 <StartDiagnosisTask+0x2a0>)
 8001948:	edd3 7a00 	vldr	s15, [r3]
 800194c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001954:	dd11      	ble.n	800197a <StartDiagnosisTask+0x112>
		{
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8001956:	2201      	movs	r2, #1
 8001958:	2101      	movs	r1, #1
 800195a:	4872      	ldr	r0, [pc, #456]	; (8001b24 <StartDiagnosisTask+0x2bc>)
 800195c:	f006 f81e 	bl	800799c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001960:	2200      	movs	r2, #0
 8001962:	2102      	movs	r1, #2
 8001964:	4870      	ldr	r0, [pc, #448]	; (8001b28 <StartDiagnosisTask+0x2c0>)
 8001966:	f006 f819 	bl	800799c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001970:	486c      	ldr	r0, [pc, #432]	; (8001b24 <StartDiagnosisTask+0x2bc>)
 8001972:	f006 f813 	bl	800799c <HAL_GPIO_WritePin>
			statusMessage.statusflag = 0x0;
 8001976:	2300      	movs	r3, #0
 8001978:	81bb      	strh	r3, [r7, #12]
		}
		if(voltage <= minValue || voltage >= maxValue)
 800197a:	4b68      	ldr	r3, [pc, #416]	; (8001b1c <StartDiagnosisTask+0x2b4>)
 800197c:	ed93 7a00 	vldr	s14, [r3]
 8001980:	4b61      	ldr	r3, [pc, #388]	; (8001b08 <StartDiagnosisTask+0x2a0>)
 8001982:	edd3 7a00 	vldr	s15, [r3]
 8001986:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800198a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198e:	d90a      	bls.n	80019a6 <StartDiagnosisTask+0x13e>
 8001990:	4b62      	ldr	r3, [pc, #392]	; (8001b1c <StartDiagnosisTask+0x2b4>)
 8001992:	ed93 7a00 	vldr	s14, [r3]
 8001996:	4b5a      	ldr	r3, [pc, #360]	; (8001b00 <StartDiagnosisTask+0x298>)
 8001998:	edd3 7a00 	vldr	s15, [r3]
 800199c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a4:	db21      	blt.n	80019ea <StartDiagnosisTask+0x182>
		{
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2101      	movs	r1, #1
 80019aa:	485e      	ldr	r0, [pc, #376]	; (8001b24 <StartDiagnosisTask+0x2bc>)
 80019ac:	f005 fff6 	bl	800799c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80019b0:	2201      	movs	r2, #1
 80019b2:	2102      	movs	r1, #2
 80019b4:	485c      	ldr	r0, [pc, #368]	; (8001b28 <StartDiagnosisTask+0x2c0>)
 80019b6:	f005 fff1 	bl	800799c <HAL_GPIO_WritePin>
			if (voltage <= minValue){
 80019ba:	4b58      	ldr	r3, [pc, #352]	; (8001b1c <StartDiagnosisTask+0x2b4>)
 80019bc:	ed93 7a00 	vldr	s14, [r3]
 80019c0:	4b51      	ldr	r3, [pc, #324]	; (8001b08 <StartDiagnosisTask+0x2a0>)
 80019c2:	edd3 7a00 	vldr	s15, [r3]
 80019c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ce:	d802      	bhi.n	80019d6 <StartDiagnosisTask+0x16e>
				//Under voltage
				statusMessage.statusflag = 0x1;
 80019d0:	2301      	movs	r3, #1
 80019d2:	81bb      	strh	r3, [r7, #12]
 80019d4:	e001      	b.n	80019da <StartDiagnosisTask+0x172>
			}
			else{
				//Over voltage
				statusMessage.statusflag = 0x2;
 80019d6:	2302      	movs	r3, #2
 80019d8:	81bb      	strh	r3, [r7, #12]

			}
			osMessageQueuePut(canDiagnosisQueueHandle, &statusMessage, NULL, 10);
 80019da:	4b54      	ldr	r3, [pc, #336]	; (8001b2c <StartDiagnosisTask+0x2c4>)
 80019dc:	6818      	ldr	r0, [r3, #0]
 80019de:	f107 010c 	add.w	r1, r7, #12
 80019e2:	230a      	movs	r3, #10
 80019e4:	2200      	movs	r2, #0
 80019e6:	f00c fb11 	bl	800e00c <osMessageQueuePut>
		}
		if(current >= maxValue || current <= minValue)
 80019ea:	4b4d      	ldr	r3, [pc, #308]	; (8001b20 <StartDiagnosisTask+0x2b8>)
 80019ec:	ed93 7a00 	vldr	s14, [r3]
 80019f0:	4b43      	ldr	r3, [pc, #268]	; (8001b00 <StartDiagnosisTask+0x298>)
 80019f2:	edd3 7a00 	vldr	s15, [r3]
 80019f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fe:	da0a      	bge.n	8001a16 <StartDiagnosisTask+0x1ae>
 8001a00:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <StartDiagnosisTask+0x2b8>)
 8001a02:	ed93 7a00 	vldr	s14, [r3]
 8001a06:	4b40      	ldr	r3, [pc, #256]	; (8001b08 <StartDiagnosisTask+0x2a0>)
 8001a08:	edd3 7a00 	vldr	s15, [r3]
 8001a0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a14:	d822      	bhi.n	8001a5c <StartDiagnosisTask+0x1f4>
		{
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2101      	movs	r1, #1
 8001a1a:	4842      	ldr	r0, [pc, #264]	; (8001b24 <StartDiagnosisTask+0x2bc>)
 8001a1c:	f005 ffbe 	bl	800799c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8001a20:	2201      	movs	r2, #1
 8001a22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a26:	483f      	ldr	r0, [pc, #252]	; (8001b24 <StartDiagnosisTask+0x2bc>)
 8001a28:	f005 ffb8 	bl	800799c <HAL_GPIO_WritePin>
			if (current <= minValue){
 8001a2c:	4b3c      	ldr	r3, [pc, #240]	; (8001b20 <StartDiagnosisTask+0x2b8>)
 8001a2e:	ed93 7a00 	vldr	s14, [r3]
 8001a32:	4b35      	ldr	r3, [pc, #212]	; (8001b08 <StartDiagnosisTask+0x2a0>)
 8001a34:	edd3 7a00 	vldr	s15, [r3]
 8001a38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a40:	d802      	bhi.n	8001a48 <StartDiagnosisTask+0x1e0>
				//Under current
				statusMessage.statusflag = 0x3;
 8001a42:	2303      	movs	r3, #3
 8001a44:	81bb      	strh	r3, [r7, #12]
 8001a46:	e001      	b.n	8001a4c <StartDiagnosisTask+0x1e4>
			}
			else{
							//Over current
				statusMessage.statusflag = 0x4;
 8001a48:	2304      	movs	r3, #4
 8001a4a:	81bb      	strh	r3, [r7, #12]
			}
			osMessageQueuePut(canDiagnosisQueueHandle, &statusMessage, NULL, 10);
 8001a4c:	4b37      	ldr	r3, [pc, #220]	; (8001b2c <StartDiagnosisTask+0x2c4>)
 8001a4e:	6818      	ldr	r0, [r3, #0]
 8001a50:	f107 010c 	add.w	r1, r7, #12
 8001a54:	230a      	movs	r3, #10
 8001a56:	2200      	movs	r2, #0
 8001a58:	f00c fad8 	bl	800e00c <osMessageQueuePut>
		}

		osMessageQueuePut(systemDiagnosisQueueHandle,&statusMessage, NULL, 10);
 8001a5c:	4b34      	ldr	r3, [pc, #208]	; (8001b30 <StartDiagnosisTask+0x2c8>)
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	f107 010c 	add.w	r1, r7, #12
 8001a64:	230a      	movs	r3, #10
 8001a66:	2200      	movs	r2, #0
 8001a68:	f00c fad0 	bl	800e00c <osMessageQueuePut>

		if(voltage > minValue && voltage < maxValue)
 8001a6c:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <StartDiagnosisTask+0x2b4>)
 8001a6e:	ed93 7a00 	vldr	s14, [r3]
 8001a72:	4b25      	ldr	r3, [pc, #148]	; (8001b08 <StartDiagnosisTask+0x2a0>)
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a80:	dd0f      	ble.n	8001aa2 <StartDiagnosisTask+0x23a>
 8001a82:	4b26      	ldr	r3, [pc, #152]	; (8001b1c <StartDiagnosisTask+0x2b4>)
 8001a84:	ed93 7a00 	vldr	s14, [r3]
 8001a88:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <StartDiagnosisTask+0x298>)
 8001a8a:	edd3 7a00 	vldr	s15, [r3]
 8001a8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a96:	d504      	bpl.n	8001aa2 <StartDiagnosisTask+0x23a>
		{
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2102      	movs	r1, #2
 8001a9c:	4822      	ldr	r0, [pc, #136]	; (8001b28 <StartDiagnosisTask+0x2c0>)
 8001a9e:	f005 ff7d 	bl	800799c <HAL_GPIO_WritePin>
		}
		if(current < maxValue && current > minValue)
 8001aa2:	4b1f      	ldr	r3, [pc, #124]	; (8001b20 <StartDiagnosisTask+0x2b8>)
 8001aa4:	ed93 7a00 	vldr	s14, [r3]
 8001aa8:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <StartDiagnosisTask+0x298>)
 8001aaa:	edd3 7a00 	vldr	s15, [r3]
 8001aae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab6:	d510      	bpl.n	8001ada <StartDiagnosisTask+0x272>
 8001ab8:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <StartDiagnosisTask+0x2b8>)
 8001aba:	ed93 7a00 	vldr	s14, [r3]
 8001abe:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <StartDiagnosisTask+0x2a0>)
 8001ac0:	edd3 7a00 	vldr	s15, [r3]
 8001ac4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001acc:	dd05      	ble.n	8001ada <StartDiagnosisTask+0x272>
		{

			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ad4:	4813      	ldr	r0, [pc, #76]	; (8001b24 <StartDiagnosisTask+0x2bc>)
 8001ad6:	f005 ff61 	bl	800799c <HAL_GPIO_WritePin>
		}

			  //Ends ADC
		HAL_ADC_Stop(&hadc1);
 8001ada:	480c      	ldr	r0, [pc, #48]	; (8001b0c <StartDiagnosisTask+0x2a4>)
 8001adc:	f001 fb22 	bl	8003124 <HAL_ADC_Stop>
		HAL_ADC_Stop(&hadc2);
 8001ae0:	480c      	ldr	r0, [pc, #48]	; (8001b14 <StartDiagnosisTask+0x2ac>)
 8001ae2:	f001 fb1f 	bl	8003124 <HAL_ADC_Stop>

		osDelay(400);
 8001ae6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001aea:	f00c f977 	bl	800dddc <osDelay>
		maxValue = 2.6; //Volts
 8001aee:	e6bf      	b.n	8001870 <StartDiagnosisTask+0x8>
 8001af0:	66666666 	.word	0x66666666
 8001af4:	400a6666 	.word	0x400a6666
 8001af8:	00000000 	.word	0x00000000
 8001afc:	40f00000 	.word	0x40f00000
 8001b00:	2400505c 	.word	0x2400505c
 8001b04:	40266666 	.word	0x40266666
 8001b08:	24004b58 	.word	0x24004b58
 8001b0c:	240050c8 	.word	0x240050c8
 8001b10:	240050b8 	.word	0x240050b8
 8001b14:	24004bec 	.word	0x24004bec
 8001b18:	2400513c 	.word	0x2400513c
 8001b1c:	240050c0 	.word	0x240050c0
 8001b20:	24005138 	.word	0x24005138
 8001b24:	58020400 	.word	0x58020400
 8001b28:	58021000 	.word	0x58021000
 8001b2c:	240050c4 	.word	0x240050c4
 8001b30:	24004c50 	.word	0x24004c50

08001b34 <StartCanRxTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCanRxTask */
void StartCanRxTask(void *argument)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCanRxTask */
	/* Infinite loop */
	position post;
	post.pos = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	813b      	strh	r3, [r7, #8]
	osStatus_t msgStatus;
	for (;;) {
		/* Retrieve Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <StartCanRxTask+0x58>)
 8001b42:	4a13      	ldr	r2, [pc, #76]	; (8001b90 <StartCanRxTask+0x5c>)
 8001b44:	2140      	movs	r1, #64	; 0x40
 8001b46:	4813      	ldr	r0, [pc, #76]	; (8001b94 <StartCanRxTask+0x60>)
 8001b48:	f004 fe60 	bl	800680c <HAL_FDCAN_GetRxMessage>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10d      	bne.n	8001b6e <StartCanRxTask+0x3a>
		{
			//if ((RxHeader.Identifier == 0x255) && (RxHeader.IdType == FDCAN_STANDARD_ID) && (RxHeader.DataLength == FDCAN_DLC_BYTES_8))
			if(RxHeader.Identifier == 0x101)
 8001b52:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <StartCanRxTask+0x5c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f240 1201 	movw	r2, #257	; 0x101
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d107      	bne.n	8001b6e <StartCanRxTask+0x3a>
			{
				HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_6);
 8001b5e:	2140      	movs	r1, #64	; 0x40
 8001b60:	480d      	ldr	r0, [pc, #52]	; (8001b98 <StartCanRxTask+0x64>)
 8001b62:	f005 ff34 	bl	80079ce <HAL_GPIO_TogglePin>
				//RxHeader.DataLength = FDCAN_DLC_BYTES_0;
				post.pos = (uint16_t) RxData[7];
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <StartCanRxTask+0x58>)
 8001b68:	79db      	ldrb	r3, [r3, #7]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	813b      	strh	r3, [r7, #8]
		}
		else
		{
		/* Reception Error */
		}
		msgStatus = osMessageQueuePut(desiredPositionQueueHandle, &post, NULL, 10);
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <StartCanRxTask+0x68>)
 8001b70:	6818      	ldr	r0, [r3, #0]
 8001b72:	f107 0108 	add.w	r1, r7, #8
 8001b76:	230a      	movs	r3, #10
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f00c fa47 	bl	800e00c <osMessageQueuePut>
 8001b7e:	60f8      	str	r0, [r7, #12]
		osDelay(300);
 8001b80:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b84:	f00c f92a 	bl	800dddc <osDelay>
		if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8001b88:	e7da      	b.n	8001b40 <StartCanRxTask+0xc>
 8001b8a:	bf00      	nop
 8001b8c:	24005264 	.word	0x24005264
 8001b90:	24005354 	.word	0x24005354
 8001b94:	240051bc 	.word	0x240051bc
 8001b98:	58021800 	.word	0x58021800
 8001b9c:	24005134 	.word	0x24005134

08001ba0 <StartCanTxTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCanTxTask */
void StartCanTxTask(void *argument)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	position post;

	for (;;) {

		//Send diagnosis message if there is an error
		diagnosisError = osMessageQueueGet(canDiagnosisQueueHandle, &statusMessage , NULL, 10);
 8001ba8:	4b3c      	ldr	r3, [pc, #240]	; (8001c9c <StartCanTxTask+0xfc>)
 8001baa:	6818      	ldr	r0, [r3, #0]
 8001bac:	f107 010c 	add.w	r1, r7, #12
 8001bb0:	230a      	movs	r3, #10
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f00c fa8a 	bl	800e0cc <osMessageQueueGet>
 8001bb8:	6178      	str	r0, [r7, #20]

		if(diagnosisError == osOK){
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d135      	bne.n	8001c2c <StartCanTxTask+0x8c>
			TxHeader.Identifier = 0x159;
 8001bc0:	4b37      	ldr	r3, [pc, #220]	; (8001ca0 <StartCanTxTask+0x100>)
 8001bc2:	f240 1259 	movw	r2, #345	; 0x159
 8001bc6:	601a      	str	r2, [r3, #0]
			if(statusMessage.statusflag == 0x1){
 8001bc8:	89bb      	ldrh	r3, [r7, #12]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d103      	bne.n	8001bd6 <StartCanTxTask+0x36>
				TxDataError[0] = 'a';
 8001bce:	4b35      	ldr	r3, [pc, #212]	; (8001ca4 <StartCanTxTask+0x104>)
 8001bd0:	2261      	movs	r2, #97	; 0x61
 8001bd2:	701a      	strb	r2, [r3, #0]
 8001bd4:	e01a      	b.n	8001c0c <StartCanTxTask+0x6c>
			}
			else if (statusMessage.statusflag == 0x2){
 8001bd6:	89bb      	ldrh	r3, [r7, #12]
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d103      	bne.n	8001be4 <StartCanTxTask+0x44>
				TxDataError[0] = 'b';
 8001bdc:	4b31      	ldr	r3, [pc, #196]	; (8001ca4 <StartCanTxTask+0x104>)
 8001bde:	2262      	movs	r2, #98	; 0x62
 8001be0:	701a      	strb	r2, [r3, #0]
 8001be2:	e013      	b.n	8001c0c <StartCanTxTask+0x6c>
			}
			else if (statusMessage.statusflag == 0x3){
 8001be4:	89bb      	ldrh	r3, [r7, #12]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d103      	bne.n	8001bf2 <StartCanTxTask+0x52>
				TxDataError[0] = 'c';
 8001bea:	4b2e      	ldr	r3, [pc, #184]	; (8001ca4 <StartCanTxTask+0x104>)
 8001bec:	2263      	movs	r2, #99	; 0x63
 8001bee:	701a      	strb	r2, [r3, #0]
 8001bf0:	e00c      	b.n	8001c0c <StartCanTxTask+0x6c>
			}
			else if (statusMessage.statusflag == 0x4){
 8001bf2:	89bb      	ldrh	r3, [r7, #12]
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d103      	bne.n	8001c00 <StartCanTxTask+0x60>
				TxDataError[0] = 'd';
 8001bf8:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <StartCanTxTask+0x104>)
 8001bfa:	2264      	movs	r2, #100	; 0x64
 8001bfc:	701a      	strb	r2, [r3, #0]
 8001bfe:	e005      	b.n	8001c0c <StartCanTxTask+0x6c>
			}
			else if (statusMessage.statusflag == 0x5){
 8001c00:	89bb      	ldrh	r3, [r7, #12]
 8001c02:	2b05      	cmp	r3, #5
 8001c04:	d102      	bne.n	8001c0c <StartCanTxTask+0x6c>
				TxDataError[0] = 'e';
 8001c06:	4b27      	ldr	r3, [pc, #156]	; (8001ca4 <StartCanTxTask+0x104>)
 8001c08:	2265      	movs	r2, #101	; 0x65
 8001c0a:	701a      	strb	r2, [r3, #0]
			}
			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxDataError) != HAL_OK){
 8001c0c:	4a25      	ldr	r2, [pc, #148]	; (8001ca4 <StartCanTxTask+0x104>)
 8001c0e:	4924      	ldr	r1, [pc, #144]	; (8001ca0 <StartCanTxTask+0x100>)
 8001c10:	4825      	ldr	r0, [pc, #148]	; (8001ca8 <StartCanTxTask+0x108>)
 8001c12:	f004 fda0 	bl	8006756 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d002      	beq.n	8001c22 <StartCanTxTask+0x82>
				Error_Handler();
 8001c1c:	f000 f84e 	bl	8001cbc <Error_Handler>
 8001c20:	e004      	b.n	8001c2c <StartCanTxTask+0x8c>
			}
			else{
				HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_11);
 8001c22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c26:	4821      	ldr	r0, [pc, #132]	; (8001cac <StartCanTxTask+0x10c>)
 8001c28:	f005 fed1 	bl	80079ce <HAL_GPIO_TogglePin>
		}



		//Send position Message
		if(osMessageQueueGetSpace(positionCanQueueHandle) == 0){
 8001c2c:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <StartCanTxTask+0x110>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f00c faa9 	bl	800e188 <osMessageQueueGetSpace>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d105      	bne.n	8001c48 <StartCanTxTask+0xa8>
			osMessageQueueReset(positionCanQueueHandle);
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <StartCanTxTask+0x110>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f00c fad6 	bl	800e1f2 <osMessageQueueReset>
 8001c46:	e023      	b.n	8001c90 <StartCanTxTask+0xf0>
		}
		else{
			positionGet = osMessageQueueGet(positionCanQueueHandle, &post, NULL, 10);
 8001c48:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <StartCanTxTask+0x110>)
 8001c4a:	6818      	ldr	r0, [r3, #0]
 8001c4c:	f107 0108 	add.w	r1, r7, #8
 8001c50:	230a      	movs	r3, #10
 8001c52:	2200      	movs	r2, #0
 8001c54:	f00c fa3a 	bl	800e0cc <osMessageQueueGet>
 8001c58:	6138      	str	r0, [r7, #16]

			if(positionGet == osOK){
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d117      	bne.n	8001c90 <StartCanTxTask+0xf0>
				TxHeader.Identifier = 0x140;
 8001c60:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <StartCanTxTask+0x100>)
 8001c62:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c66:	601a      	str	r2, [r3, #0]
				TxDataPos[7] = (uint8_t) post.pos;
 8001c68:	893b      	ldrh	r3, [r7, #8]
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <StartCanTxTask+0x114>)
 8001c6e:	71da      	strb	r2, [r3, #7]
				if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxDataPos) != HAL_OK){
 8001c70:	4a10      	ldr	r2, [pc, #64]	; (8001cb4 <StartCanTxTask+0x114>)
 8001c72:	490b      	ldr	r1, [pc, #44]	; (8001ca0 <StartCanTxTask+0x100>)
 8001c74:	480c      	ldr	r0, [pc, #48]	; (8001ca8 <StartCanTxTask+0x108>)
 8001c76:	f004 fd6e 	bl	8006756 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <StartCanTxTask+0xe6>
					Error_Handler();
 8001c80:	f000 f81c 	bl	8001cbc <Error_Handler>
 8001c84:	e004      	b.n	8001c90 <StartCanTxTask+0xf0>
				}
				else{
							//Debug message options
					HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_14);
 8001c86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c8a:	480b      	ldr	r0, [pc, #44]	; (8001cb8 <StartCanTxTask+0x118>)
 8001c8c:	f005 fe9f 	bl	80079ce <HAL_GPIO_TogglePin>
		}
		else{
			HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_14);
		}
		*/
		osDelay(350);
 8001c90:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001c94:	f00c f8a2 	bl	800dddc <osDelay>
		diagnosisError = osMessageQueueGet(canDiagnosisQueueHandle, &statusMessage , NULL, 10);
 8001c98:	e786      	b.n	8001ba8 <StartCanTxTask+0x8>
 8001c9a:	bf00      	nop
 8001c9c:	240050c4 	.word	0x240050c4
 8001ca0:	24005330 	.word	0x24005330
 8001ca4:	24000010 	.word	0x24000010
 8001ca8:	240051bc 	.word	0x240051bc
 8001cac:	58021000 	.word	0x58021000
 8001cb0:	240050bc 	.word	0x240050bc
 8001cb4:	24000210 	.word	0x24000210
 8001cb8:	58021800 	.word	0x58021800

08001cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <HAL_MspInit+0x38>)
 8001cd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cd8:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <HAL_MspInit+0x38>)
 8001cda:	f043 0302 	orr.w	r3, r3, #2
 8001cde:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <HAL_MspInit+0x38>)
 8001ce4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	210f      	movs	r1, #15
 8001cf4:	f06f 0001 	mvn.w	r0, #1
 8001cf8:	f002 fdb3 	bl	8004862 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	58024400 	.word	0x58024400

08001d08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08c      	sub	sp, #48	; 0x30
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 031c 	add.w	r3, r7, #28
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a71      	ldr	r2, [pc, #452]	; (8001eec <HAL_ADC_MspInit+0x1e4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d16c      	bne.n	8001e04 <HAL_ADC_MspInit+0xfc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001d2a:	4b71      	ldr	r3, [pc, #452]	; (8001ef0 <HAL_ADC_MspInit+0x1e8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	4a6f      	ldr	r2, [pc, #444]	; (8001ef0 <HAL_ADC_MspInit+0x1e8>)
 8001d32:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001d34:	4b6e      	ldr	r3, [pc, #440]	; (8001ef0 <HAL_ADC_MspInit+0x1e8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d10e      	bne.n	8001d5a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001d3c:	4b6d      	ldr	r3, [pc, #436]	; (8001ef4 <HAL_ADC_MspInit+0x1ec>)
 8001d3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d42:	4a6c      	ldr	r2, [pc, #432]	; (8001ef4 <HAL_ADC_MspInit+0x1ec>)
 8001d44:	f043 0320 	orr.w	r3, r3, #32
 8001d48:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d4c:	4b69      	ldr	r3, [pc, #420]	; (8001ef4 <HAL_ADC_MspInit+0x1ec>)
 8001d4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d52:	f003 0320 	and.w	r3, r3, #32
 8001d56:	61bb      	str	r3, [r7, #24]
 8001d58:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d5a:	4b66      	ldr	r3, [pc, #408]	; (8001ef4 <HAL_ADC_MspInit+0x1ec>)
 8001d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d60:	4a64      	ldr	r2, [pc, #400]	; (8001ef4 <HAL_ADC_MspInit+0x1ec>)
 8001d62:	f043 0320 	orr.w	r3, r3, #32
 8001d66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d6a:	4b62      	ldr	r3, [pc, #392]	; (8001ef4 <HAL_ADC_MspInit+0x1ec>)
 8001d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d70:	f003 0320 	and.w	r3, r3, #32
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d86:	f107 031c 	add.w	r3, r7, #28
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	485a      	ldr	r0, [pc, #360]	; (8001ef8 <HAL_ADC_MspInit+0x1f0>)
 8001d8e:	f005 fc3d 	bl	800760c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001d92:	4b5a      	ldr	r3, [pc, #360]	; (8001efc <HAL_ADC_MspInit+0x1f4>)
 8001d94:	4a5a      	ldr	r2, [pc, #360]	; (8001f00 <HAL_ADC_MspInit+0x1f8>)
 8001d96:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001d98:	4b58      	ldr	r3, [pc, #352]	; (8001efc <HAL_ADC_MspInit+0x1f4>)
 8001d9a:	2209      	movs	r2, #9
 8001d9c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d9e:	4b57      	ldr	r3, [pc, #348]	; (8001efc <HAL_ADC_MspInit+0x1f4>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001da4:	4b55      	ldr	r3, [pc, #340]	; (8001efc <HAL_ADC_MspInit+0x1f4>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001daa:	4b54      	ldr	r3, [pc, #336]	; (8001efc <HAL_ADC_MspInit+0x1f4>)
 8001dac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001db0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001db2:	4b52      	ldr	r3, [pc, #328]	; (8001efc <HAL_ADC_MspInit+0x1f4>)
 8001db4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001db8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001dba:	4b50      	ldr	r3, [pc, #320]	; (8001efc <HAL_ADC_MspInit+0x1f4>)
 8001dbc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dc0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001dc2:	4b4e      	ldr	r3, [pc, #312]	; (8001efc <HAL_ADC_MspInit+0x1f4>)
 8001dc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dc8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001dca:	4b4c      	ldr	r3, [pc, #304]	; (8001efc <HAL_ADC_MspInit+0x1f4>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dd0:	4b4a      	ldr	r3, [pc, #296]	; (8001efc <HAL_ADC_MspInit+0x1f4>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001dd6:	4849      	ldr	r0, [pc, #292]	; (8001efc <HAL_ADC_MspInit+0x1f4>)
 8001dd8:	f002 fd78 	bl	80048cc <HAL_DMA_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 8001de2:	f7ff ff6b 	bl	8001cbc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a44      	ldr	r2, [pc, #272]	; (8001efc <HAL_ADC_MspInit+0x1f4>)
 8001dea:	64da      	str	r2, [r3, #76]	; 0x4c
 8001dec:	4a43      	ldr	r2, [pc, #268]	; (8001efc <HAL_ADC_MspInit+0x1f4>)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2105      	movs	r1, #5
 8001df6:	2012      	movs	r0, #18
 8001df8:	f002 fd33 	bl	8004862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001dfc:	2012      	movs	r0, #18
 8001dfe:	f002 fd4a 	bl	8004896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001e02:	e06e      	b.n	8001ee2 <HAL_ADC_MspInit+0x1da>
  else if(hadc->Instance==ADC2)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a3e      	ldr	r2, [pc, #248]	; (8001f04 <HAL_ADC_MspInit+0x1fc>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d169      	bne.n	8001ee2 <HAL_ADC_MspInit+0x1da>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001e0e:	4b38      	ldr	r3, [pc, #224]	; (8001ef0 <HAL_ADC_MspInit+0x1e8>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	3301      	adds	r3, #1
 8001e14:	4a36      	ldr	r2, [pc, #216]	; (8001ef0 <HAL_ADC_MspInit+0x1e8>)
 8001e16:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001e18:	4b35      	ldr	r3, [pc, #212]	; (8001ef0 <HAL_ADC_MspInit+0x1e8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d10e      	bne.n	8001e3e <HAL_ADC_MspInit+0x136>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001e20:	4b34      	ldr	r3, [pc, #208]	; (8001ef4 <HAL_ADC_MspInit+0x1ec>)
 8001e22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e26:	4a33      	ldr	r2, [pc, #204]	; (8001ef4 <HAL_ADC_MspInit+0x1ec>)
 8001e28:	f043 0320 	orr.w	r3, r3, #32
 8001e2c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e30:	4b30      	ldr	r3, [pc, #192]	; (8001ef4 <HAL_ADC_MspInit+0x1ec>)
 8001e32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e36:	f003 0320 	and.w	r3, r3, #32
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	4b2d      	ldr	r3, [pc, #180]	; (8001ef4 <HAL_ADC_MspInit+0x1ec>)
 8001e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e44:	4a2b      	ldr	r2, [pc, #172]	; (8001ef4 <HAL_ADC_MspInit+0x1ec>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e4e:	4b29      	ldr	r3, [pc, #164]	; (8001ef4 <HAL_ADC_MspInit+0x1ec>)
 8001e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e5c:	2340      	movs	r3, #64	; 0x40
 8001e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e60:	2303      	movs	r3, #3
 8001e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e68:	f107 031c 	add.w	r3, r7, #28
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4826      	ldr	r0, [pc, #152]	; (8001f08 <HAL_ADC_MspInit+0x200>)
 8001e70:	f005 fbcc 	bl	800760c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 8001e74:	4b25      	ldr	r3, [pc, #148]	; (8001f0c <HAL_ADC_MspInit+0x204>)
 8001e76:	4a26      	ldr	r2, [pc, #152]	; (8001f10 <HAL_ADC_MspInit+0x208>)
 8001e78:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001e7a:	4b24      	ldr	r3, [pc, #144]	; (8001f0c <HAL_ADC_MspInit+0x204>)
 8001e7c:	220a      	movs	r2, #10
 8001e7e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e80:	4b22      	ldr	r3, [pc, #136]	; (8001f0c <HAL_ADC_MspInit+0x204>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e86:	4b21      	ldr	r3, [pc, #132]	; (8001f0c <HAL_ADC_MspInit+0x204>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001e8c:	4b1f      	ldr	r3, [pc, #124]	; (8001f0c <HAL_ADC_MspInit+0x204>)
 8001e8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e92:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e94:	4b1d      	ldr	r3, [pc, #116]	; (8001f0c <HAL_ADC_MspInit+0x204>)
 8001e96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e9a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e9c:	4b1b      	ldr	r3, [pc, #108]	; (8001f0c <HAL_ADC_MspInit+0x204>)
 8001e9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ea2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8001ea4:	4b19      	ldr	r3, [pc, #100]	; (8001f0c <HAL_ADC_MspInit+0x204>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001eaa:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <HAL_ADC_MspInit+0x204>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001eb0:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <HAL_ADC_MspInit+0x204>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001eb6:	4815      	ldr	r0, [pc, #84]	; (8001f0c <HAL_ADC_MspInit+0x204>)
 8001eb8:	f002 fd08 	bl	80048cc <HAL_DMA_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <HAL_ADC_MspInit+0x1be>
      Error_Handler();
 8001ec2:	f7ff fefb 	bl	8001cbc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a10      	ldr	r2, [pc, #64]	; (8001f0c <HAL_ADC_MspInit+0x204>)
 8001eca:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ecc:	4a0f      	ldr	r2, [pc, #60]	; (8001f0c <HAL_ADC_MspInit+0x204>)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2105      	movs	r1, #5
 8001ed6:	2012      	movs	r0, #18
 8001ed8:	f002 fcc3 	bl	8004862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001edc:	2012      	movs	r0, #18
 8001ede:	f002 fcda 	bl	8004896 <HAL_NVIC_EnableIRQ>
}
 8001ee2:	bf00      	nop
 8001ee4:	3730      	adds	r7, #48	; 0x30
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40022000 	.word	0x40022000
 8001ef0:	24000218 	.word	0x24000218
 8001ef4:	58024400 	.word	0x58024400
 8001ef8:	58021400 	.word	0x58021400
 8001efc:	24005140 	.word	0x24005140
 8001f00:	40020010 	.word	0x40020010
 8001f04:	40022100 	.word	0x40022100
 8001f08:	58020000 	.word	0x58020000
 8001f0c:	240052b8 	.word	0x240052b8
 8001f10:	40020028 	.word	0x40020028

08001f14 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b0b8      	sub	sp, #224	; 0xe0
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f2c:	f107 0310 	add.w	r3, r7, #16
 8001f30:	22bc      	movs	r2, #188	; 0xbc
 8001f32:	2100      	movs	r1, #0
 8001f34:	4618      	mov	r0, r3
 8001f36:	f00e ffa3 	bl	8010e80 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a29      	ldr	r2, [pc, #164]	; (8001fe4 <HAL_FDCAN_MspInit+0xd0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d14a      	bne.n	8001fda <HAL_FDCAN_MspInit+0xc6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001f44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f48:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001f4a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001f4e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f50:	f107 0310 	add.w	r3, r7, #16
 8001f54:	4618      	mov	r0, r3
 8001f56:	f006 fed1 	bl	8008cfc <HAL_RCCEx_PeriphCLKConfig>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001f60:	f7ff feac 	bl	8001cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001f64:	4b20      	ldr	r3, [pc, #128]	; (8001fe8 <HAL_FDCAN_MspInit+0xd4>)
 8001f66:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001f6a:	4a1f      	ldr	r2, [pc, #124]	; (8001fe8 <HAL_FDCAN_MspInit+0xd4>)
 8001f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f70:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001f74:	4b1c      	ldr	r3, [pc, #112]	; (8001fe8 <HAL_FDCAN_MspInit+0xd4>)
 8001f76:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f82:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <HAL_FDCAN_MspInit+0xd4>)
 8001f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f88:	4a17      	ldr	r2, [pc, #92]	; (8001fe8 <HAL_FDCAN_MspInit+0xd4>)
 8001f8a:	f043 0308 	orr.w	r3, r3, #8
 8001f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_FDCAN_MspInit+0xd4>)
 8001f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f98:	f003 0308 	and.w	r3, r3, #8
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001fb8:	2309      	movs	r3, #9
 8001fba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fbe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4809      	ldr	r0, [pc, #36]	; (8001fec <HAL_FDCAN_MspInit+0xd8>)
 8001fc6:	f005 fb21 	bl	800760c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2105      	movs	r1, #5
 8001fce:	2013      	movs	r0, #19
 8001fd0:	f002 fc47 	bl	8004862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001fd4:	2013      	movs	r0, #19
 8001fd6:	f002 fc5e 	bl	8004896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001fda:	bf00      	nop
 8001fdc:	37e0      	adds	r7, #224	; 0xe0
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	4000a000 	.word	0x4000a000
 8001fe8:	58024400 	.word	0x58024400
 8001fec:	58020c00 	.word	0x58020c00

08001ff0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	; 0x28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002010:	d154      	bne.n	80020bc <HAL_TIM_Encoder_MspInit+0xcc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002012:	4b2c      	ldr	r3, [pc, #176]	; (80020c4 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002014:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002018:	4a2a      	ldr	r2, [pc, #168]	; (80020c4 <HAL_TIM_Encoder_MspInit+0xd4>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002022:	4b28      	ldr	r3, [pc, #160]	; (80020c4 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002024:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002030:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002036:	4a23      	ldr	r2, [pc, #140]	; (80020c4 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002040:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800204e:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002054:	4a1b      	ldr	r2, [pc, #108]	; (80020c4 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002056:	f043 0302 	orr.w	r3, r3, #2
 800205a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800205e:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800206c:	2301      	movs	r3, #1
 800206e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002070:	2302      	movs	r3, #2
 8002072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002074:	2301      	movs	r3, #1
 8002076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002078:	2300      	movs	r3, #0
 800207a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800207c:	2301      	movs	r3, #1
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	4619      	mov	r1, r3
 8002086:	4810      	ldr	r0, [pc, #64]	; (80020c8 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002088:	f005 fac0 	bl	800760c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800208c:	2308      	movs	r3, #8
 800208e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002094:	2301      	movs	r3, #1
 8002096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002098:	2300      	movs	r3, #0
 800209a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800209c:	2301      	movs	r3, #1
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	4619      	mov	r1, r3
 80020a6:	4809      	ldr	r0, [pc, #36]	; (80020cc <HAL_TIM_Encoder_MspInit+0xdc>)
 80020a8:	f005 fab0 	bl	800760c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80020ac:	2200      	movs	r2, #0
 80020ae:	2105      	movs	r1, #5
 80020b0:	201c      	movs	r0, #28
 80020b2:	f002 fbd6 	bl	8004862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020b6:	201c      	movs	r0, #28
 80020b8:	f002 fbed 	bl	8004896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80020bc:	bf00      	nop
 80020be:	3728      	adds	r7, #40	; 0x28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	58024400 	.word	0x58024400
 80020c8:	58020000 	.word	0x58020000
 80020cc:	58020400 	.word	0x58020400

080020d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a0b      	ldr	r2, [pc, #44]	; (800210c <HAL_TIM_PWM_MspInit+0x3c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d10e      	bne.n	8002100 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020e2:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <HAL_TIM_PWM_MspInit+0x40>)
 80020e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020e8:	4a09      	ldr	r2, [pc, #36]	; (8002110 <HAL_TIM_PWM_MspInit+0x40>)
 80020ea:	f043 0302 	orr.w	r3, r3, #2
 80020ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020f2:	4b07      	ldr	r3, [pc, #28]	; (8002110 <HAL_TIM_PWM_MspInit+0x40>)
 80020f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002100:	bf00      	nop
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	40000400 	.word	0x40000400
 8002110:	58024400 	.word	0x58024400

08002114 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08a      	sub	sp, #40	; 0x28
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a22      	ldr	r2, [pc, #136]	; (80021bc <HAL_TIM_MspPostInit+0xa8>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d13e      	bne.n	80021b4 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002136:	4b22      	ldr	r3, [pc, #136]	; (80021c0 <HAL_TIM_MspPostInit+0xac>)
 8002138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800213c:	4a20      	ldr	r2, [pc, #128]	; (80021c0 <HAL_TIM_MspPostInit+0xac>)
 800213e:	f043 0302 	orr.w	r3, r3, #2
 8002142:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002146:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <HAL_TIM_MspPostInit+0xac>)
 8002148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002154:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <HAL_TIM_MspPostInit+0xac>)
 8002156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800215a:	4a19      	ldr	r2, [pc, #100]	; (80021c0 <HAL_TIM_MspPostInit+0xac>)
 800215c:	f043 0304 	orr.w	r3, r3, #4
 8002160:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002164:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <HAL_TIM_MspPostInit+0xac>)
 8002166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002172:	2302      	movs	r3, #2
 8002174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002176:	2302      	movs	r3, #2
 8002178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217e:	2300      	movs	r3, #0
 8002180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002182:	2302      	movs	r3, #2
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002186:	f107 0314 	add.w	r3, r7, #20
 800218a:	4619      	mov	r1, r3
 800218c:	480d      	ldr	r0, [pc, #52]	; (80021c4 <HAL_TIM_MspPostInit+0xb0>)
 800218e:	f005 fa3d 	bl	800760c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002192:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002198:	2302      	movs	r3, #2
 800219a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a0:	2300      	movs	r3, #0
 80021a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021a4:	2302      	movs	r3, #2
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	4619      	mov	r1, r3
 80021ae:	4806      	ldr	r0, [pc, #24]	; (80021c8 <HAL_TIM_MspPostInit+0xb4>)
 80021b0:	f005 fa2c 	bl	800760c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80021b4:	bf00      	nop
 80021b6:	3728      	adds	r7, #40	; 0x28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40000400 	.word	0x40000400
 80021c0:	58024400 	.word	0x58024400
 80021c4:	58020400 	.word	0x58020400
 80021c8:	58020800 	.word	0x58020800

080021cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b0b8      	sub	sp, #224	; 0xe0
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	60da      	str	r2, [r3, #12]
 80021e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021e4:	f107 0310 	add.w	r3, r7, #16
 80021e8:	22bc      	movs	r2, #188	; 0xbc
 80021ea:	2100      	movs	r1, #0
 80021ec:	4618      	mov	r0, r3
 80021ee:	f00e fe47 	bl	8010e80 <memset>
  if(huart->Instance==USART3)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a25      	ldr	r2, [pc, #148]	; (800228c <HAL_UART_MspInit+0xc0>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d142      	bne.n	8002282 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80021fc:	2302      	movs	r3, #2
 80021fe:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002200:	2300      	movs	r3, #0
 8002202:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002206:	f107 0310 	add.w	r3, r7, #16
 800220a:	4618      	mov	r0, r3
 800220c:	f006 fd76 	bl	8008cfc <HAL_RCCEx_PeriphCLKConfig>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002216:	f7ff fd51 	bl	8001cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800221a:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <HAL_UART_MspInit+0xc4>)
 800221c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002220:	4a1b      	ldr	r2, [pc, #108]	; (8002290 <HAL_UART_MspInit+0xc4>)
 8002222:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002226:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800222a:	4b19      	ldr	r3, [pc, #100]	; (8002290 <HAL_UART_MspInit+0xc4>)
 800222c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002230:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002238:	4b15      	ldr	r3, [pc, #84]	; (8002290 <HAL_UART_MspInit+0xc4>)
 800223a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800223e:	4a14      	ldr	r2, [pc, #80]	; (8002290 <HAL_UART_MspInit+0xc4>)
 8002240:	f043 0308 	orr.w	r3, r3, #8
 8002244:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002248:	4b11      	ldr	r3, [pc, #68]	; (8002290 <HAL_UART_MspInit+0xc4>)
 800224a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002256:	f44f 7340 	mov.w	r3, #768	; 0x300
 800225a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225e:	2302      	movs	r3, #2
 8002260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226a:	2300      	movs	r3, #0
 800226c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002270:	2307      	movs	r3, #7
 8002272:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002276:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800227a:	4619      	mov	r1, r3
 800227c:	4805      	ldr	r0, [pc, #20]	; (8002294 <HAL_UART_MspInit+0xc8>)
 800227e:	f005 f9c5 	bl	800760c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002282:	bf00      	nop
 8002284:	37e0      	adds	r7, #224	; 0xe0
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40004800 	.word	0x40004800
 8002290:	58024400 	.word	0x58024400
 8002294:	58020c00 	.word	0x58020c00

08002298 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b0b8      	sub	sp, #224	; 0xe0
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022b0:	f107 0310 	add.w	r3, r7, #16
 80022b4:	22bc      	movs	r2, #188	; 0xbc
 80022b6:	2100      	movs	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f00e fde1 	bl	8010e80 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a37      	ldr	r2, [pc, #220]	; (80023a0 <HAL_PCD_MspInit+0x108>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d166      	bne.n	8002396 <HAL_PCD_MspInit+0xfe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80022c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80022cc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80022ce:	2301      	movs	r3, #1
 80022d0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80022d2:	2312      	movs	r3, #18
 80022d4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80022d6:	2302      	movs	r3, #2
 80022d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80022da:	2303      	movs	r3, #3
 80022dc:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80022de:	2302      	movs	r3, #2
 80022e0:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80022e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80022e6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 80022e8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80022ec:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80022ee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022f6:	f107 0310 	add.w	r3, r7, #16
 80022fa:	4618      	mov	r0, r3
 80022fc:	f006 fcfe 	bl	8008cfc <HAL_RCCEx_PeriphCLKConfig>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8002306:	f7ff fcd9 	bl	8001cbc <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800230a:	f005 fd4b 	bl	8007da4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230e:	4b25      	ldr	r3, [pc, #148]	; (80023a4 <HAL_PCD_MspInit+0x10c>)
 8002310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002314:	4a23      	ldr	r2, [pc, #140]	; (80023a4 <HAL_PCD_MspInit+0x10c>)
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800231e:	4b21      	ldr	r3, [pc, #132]	; (80023a4 <HAL_PCD_MspInit+0x10c>)
 8002320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800232c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002330:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002334:	2302      	movs	r3, #2
 8002336:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002340:	2300      	movs	r3, #0
 8002342:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002346:	230a      	movs	r3, #10
 8002348:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002350:	4619      	mov	r1, r3
 8002352:	4815      	ldr	r0, [pc, #84]	; (80023a8 <HAL_PCD_MspInit+0x110>)
 8002354:	f005 f95a 	bl	800760c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002358:	f44f 7300 	mov.w	r3, #512	; 0x200
 800235c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002360:	2300      	movs	r3, #0
 8002362:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002370:	4619      	mov	r1, r3
 8002372:	480d      	ldr	r0, [pc, #52]	; (80023a8 <HAL_PCD_MspInit+0x110>)
 8002374:	f005 f94a 	bl	800760c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002378:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <HAL_PCD_MspInit+0x10c>)
 800237a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800237e:	4a09      	ldr	r2, [pc, #36]	; (80023a4 <HAL_PCD_MspInit+0x10c>)
 8002380:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002384:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <HAL_PCD_MspInit+0x10c>)
 800238a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800238e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002396:	bf00      	nop
 8002398:	37e0      	adds	r7, #224	; 0xe0
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40080000 	.word	0x40080000
 80023a4:	58024400 	.word	0x58024400
 80023a8:	58020000 	.word	0x58020000

080023ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023b0:	e7fe      	b.n	80023b0 <NMI_Handler+0x4>

080023b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023b6:	e7fe      	b.n	80023b6 <HardFault_Handler+0x4>

080023b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023bc:	e7fe      	b.n	80023bc <MemManage_Handler+0x4>

080023be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023c2:	e7fe      	b.n	80023c2 <BusFault_Handler+0x4>

080023c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c8:	e7fe      	b.n	80023c8 <UsageFault_Handler+0x4>

080023ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023dc:	f000 f9a2 	bl	8002724 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80023e0:	f00e f8e8 	bl	80105b4 <xTaskGetSchedulerState>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d001      	beq.n	80023ee <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80023ea:	f00c fbb5 	bl	800eb58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80023f8:	4802      	ldr	r0, [pc, #8]	; (8002404 <DMA1_Stream0_IRQHandler+0x10>)
 80023fa:	f002 fdc3 	bl	8004f84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	24005140 	.word	0x24005140

08002408 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800240c:	4802      	ldr	r0, [pc, #8]	; (8002418 <DMA1_Stream1_IRQHandler+0x10>)
 800240e:	f002 fdb9 	bl	8004f84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	240052b8 	.word	0x240052b8

0800241c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002420:	4803      	ldr	r0, [pc, #12]	; (8002430 <ADC_IRQHandler+0x14>)
 8002422:	f000 ffb5 	bl	8003390 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002426:	4803      	ldr	r0, [pc, #12]	; (8002434 <ADC_IRQHandler+0x18>)
 8002428:	f000 ffb2 	bl	8003390 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800242c:	bf00      	nop
 800242e:	bd80      	pop	{r7, pc}
 8002430:	240050c8 	.word	0x240050c8
 8002434:	24004bec 	.word	0x24004bec

08002438 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800243c:	4802      	ldr	r0, [pc, #8]	; (8002448 <FDCAN1_IT0_IRQHandler+0x10>)
 800243e:	f004 fbcd 	bl	8006bdc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	240051bc 	.word	0x240051bc

0800244c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002450:	4802      	ldr	r0, [pc, #8]	; (800245c <TIM2_IRQHandler+0x10>)
 8002452:	f009 f9aa 	bl	800b7aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	2400526c 	.word	0x2400526c

08002460 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
	return 1;
 8002464:	2301      	movs	r3, #1
}
 8002466:	4618      	mov	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <_kill>:

int _kill(int pid, int sig)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800247a:	f00e fcc9 	bl	8010e10 <__errno>
 800247e:	4603      	mov	r3, r0
 8002480:	2216      	movs	r2, #22
 8002482:	601a      	str	r2, [r3, #0]
	return -1;
 8002484:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002488:	4618      	mov	r0, r3
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <_exit>:

void _exit (int status)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002498:	f04f 31ff 	mov.w	r1, #4294967295
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff ffe7 	bl	8002470 <_kill>
	while (1) {}		/* Make sure we hang here */
 80024a2:	e7fe      	b.n	80024a2 <_exit+0x12>

080024a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	e00a      	b.n	80024cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024b6:	f3af 8000 	nop.w
 80024ba:	4601      	mov	r1, r0
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	60ba      	str	r2, [r7, #8]
 80024c2:	b2ca      	uxtb	r2, r1
 80024c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	3301      	adds	r3, #1
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	dbf0      	blt.n	80024b6 <_read+0x12>
	}

return len;
 80024d4:	687b      	ldr	r3, [r7, #4]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b086      	sub	sp, #24
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	60f8      	str	r0, [r7, #12]
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	e009      	b.n	8002504 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	60ba      	str	r2, [r7, #8]
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	3301      	adds	r3, #1
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	429a      	cmp	r2, r3
 800250a:	dbf1      	blt.n	80024f0 <_write+0x12>
	}
	return len;
 800250c:	687b      	ldr	r3, [r7, #4]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <_close>:

int _close(int file)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
	return -1;
 800251e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002522:	4618      	mov	r0, r3
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800253e:	605a      	str	r2, [r3, #4]
	return 0;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <_isatty>:

int _isatty(int file)
{
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
	return 1;
 8002556:	2301      	movs	r3, #1
}
 8002558:	4618      	mov	r0, r3
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
	return 0;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
	...

08002580 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002588:	4a14      	ldr	r2, [pc, #80]	; (80025dc <_sbrk+0x5c>)
 800258a:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <_sbrk+0x60>)
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002594:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <_sbrk+0x64>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d102      	bne.n	80025a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800259c:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <_sbrk+0x64>)
 800259e:	4a12      	ldr	r2, [pc, #72]	; (80025e8 <_sbrk+0x68>)
 80025a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025a2:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <_sbrk+0x64>)
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4413      	add	r3, r2
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d207      	bcs.n	80025c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025b0:	f00e fc2e 	bl	8010e10 <__errno>
 80025b4:	4603      	mov	r3, r0
 80025b6:	220c      	movs	r2, #12
 80025b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025ba:	f04f 33ff 	mov.w	r3, #4294967295
 80025be:	e009      	b.n	80025d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025c0:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <_sbrk+0x64>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025c6:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <_sbrk+0x64>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4413      	add	r3, r2
 80025ce:	4a05      	ldr	r2, [pc, #20]	; (80025e4 <_sbrk+0x64>)
 80025d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025d2:	68fb      	ldr	r3, [r7, #12]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	24080000 	.word	0x24080000
 80025e0:	00000400 	.word	0x00000400
 80025e4:	2400021c 	.word	0x2400021c
 80025e8:	240053d8 	.word	0x240053d8

080025ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80025ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002624 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80025f0:	f7fe f84a 	bl	8000688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025f4:	480c      	ldr	r0, [pc, #48]	; (8002628 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025f6:	490d      	ldr	r1, [pc, #52]	; (800262c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025f8:	4a0d      	ldr	r2, [pc, #52]	; (8002630 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025fc:	e002      	b.n	8002604 <LoopCopyDataInit>

080025fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002602:	3304      	adds	r3, #4

08002604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002608:	d3f9      	bcc.n	80025fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800260a:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800260c:	4c0a      	ldr	r4, [pc, #40]	; (8002638 <LoopFillZerobss+0x22>)
  movs r3, #0
 800260e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002610:	e001      	b.n	8002616 <LoopFillZerobss>

08002612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002614:	3204      	adds	r2, #4

08002616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002618:	d3fb      	bcc.n	8002612 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800261a:	f00e fbff 	bl	8010e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800261e:	f7fe f8cd 	bl	80007bc <main>
  bx  lr
 8002622:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002624:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002628:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800262c:	240001f4 	.word	0x240001f4
  ldr r2, =_sidata
 8002630:	080141bc 	.word	0x080141bc
  ldr r2, =_sbss
 8002634:	240001f4 	.word	0x240001f4
  ldr r4, =_ebss
 8002638:	240053d4 	.word	0x240053d4

0800263c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800263c:	e7fe      	b.n	800263c <ADC3_IRQHandler>
	...

08002640 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002646:	2003      	movs	r0, #3
 8002648:	f002 f900 	bl	800484c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800264c:	f006 f980 	bl	8008950 <HAL_RCC_GetSysClockFreq>
 8002650:	4602      	mov	r2, r0
 8002652:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <HAL_Init+0x68>)
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	0a1b      	lsrs	r3, r3, #8
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	4913      	ldr	r1, [pc, #76]	; (80026ac <HAL_Init+0x6c>)
 800265e:	5ccb      	ldrb	r3, [r1, r3]
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	fa22 f303 	lsr.w	r3, r2, r3
 8002668:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800266a:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <HAL_Init+0x68>)
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	4a0e      	ldr	r2, [pc, #56]	; (80026ac <HAL_Init+0x6c>)
 8002674:	5cd3      	ldrb	r3, [r2, r3]
 8002676:	f003 031f 	and.w	r3, r3, #31
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	fa22 f303 	lsr.w	r3, r2, r3
 8002680:	4a0b      	ldr	r2, [pc, #44]	; (80026b0 <HAL_Init+0x70>)
 8002682:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002684:	4a0b      	ldr	r2, [pc, #44]	; (80026b4 <HAL_Init+0x74>)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800268a:	200f      	movs	r0, #15
 800268c:	f000 f814 	bl	80026b8 <HAL_InitTick>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e002      	b.n	80026a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800269a:	f7ff fb17 	bl	8001ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	58024400 	.word	0x58024400
 80026ac:	08013c10 	.word	0x08013c10
 80026b0:	24000004 	.word	0x24000004
 80026b4:	24000000 	.word	0x24000000

080026b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80026c0:	4b15      	ldr	r3, [pc, #84]	; (8002718 <HAL_InitTick+0x60>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e021      	b.n	8002710 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80026cc:	4b13      	ldr	r3, [pc, #76]	; (800271c <HAL_InitTick+0x64>)
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4b11      	ldr	r3, [pc, #68]	; (8002718 <HAL_InitTick+0x60>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	4619      	mov	r1, r3
 80026d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026da:	fbb3 f3f1 	udiv	r3, r3, r1
 80026de:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e2:	4618      	mov	r0, r3
 80026e4:	f002 f8e5 	bl	80048b2 <HAL_SYSTICK_Config>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e00e      	b.n	8002710 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b0f      	cmp	r3, #15
 80026f6:	d80a      	bhi.n	800270e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026f8:	2200      	movs	r2, #0
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002700:	f002 f8af 	bl	8004862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002704:	4a06      	ldr	r2, [pc, #24]	; (8002720 <HAL_InitTick+0x68>)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800270a:	2300      	movs	r3, #0
 800270c:	e000      	b.n	8002710 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
}
 8002710:	4618      	mov	r0, r3
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	2400001c 	.word	0x2400001c
 800271c:	24000000 	.word	0x24000000
 8002720:	24000018 	.word	0x24000018

08002724 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <HAL_IncTick+0x20>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	461a      	mov	r2, r3
 800272e:	4b06      	ldr	r3, [pc, #24]	; (8002748 <HAL_IncTick+0x24>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4413      	add	r3, r2
 8002734:	4a04      	ldr	r2, [pc, #16]	; (8002748 <HAL_IncTick+0x24>)
 8002736:	6013      	str	r3, [r2, #0]
}
 8002738:	bf00      	nop
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	2400001c 	.word	0x2400001c
 8002748:	24005380 	.word	0x24005380

0800274c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  return uwTick;
 8002750:	4b03      	ldr	r3, [pc, #12]	; (8002760 <HAL_GetTick+0x14>)
 8002752:	681b      	ldr	r3, [r3, #0]
}
 8002754:	4618      	mov	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	24005380 	.word	0x24005380

08002764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800276c:	f7ff ffee 	bl	800274c <HAL_GetTick>
 8002770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277c:	d005      	beq.n	800278a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800277e:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <HAL_Delay+0x44>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	461a      	mov	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4413      	add	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800278a:	bf00      	nop
 800278c:	f7ff ffde 	bl	800274c <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	429a      	cmp	r2, r3
 800279a:	d8f7      	bhi.n	800278c <HAL_Delay+0x28>
  {
  }
}
 800279c:	bf00      	nop
 800279e:	bf00      	nop
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	2400001c 	.word	0x2400001c

080027ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80027b0:	4b03      	ldr	r3, [pc, #12]	; (80027c0 <HAL_GetREVID+0x14>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	0c1b      	lsrs	r3, r3, #16
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	5c001000 	.word	0x5c001000

080027c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	609a      	str	r2, [r3, #8]
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	609a      	str	r2, [r3, #8]
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002820:	4618      	mov	r0, r3
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800282c:	b480      	push	{r7}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
 8002838:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	3360      	adds	r3, #96	; 0x60
 800283e:	461a      	mov	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	430b      	orrs	r3, r1
 800285a:	431a      	orrs	r2, r3
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002860:	bf00      	nop
 8002862:	371c      	adds	r7, #28
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	fa01 f303 	lsl.w	r3, r1, r3
 800288c:	431a      	orrs	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	611a      	str	r2, [r3, #16]
}
 8002892:	bf00      	nop
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800289e:	b480      	push	{r7}
 80028a0:	b087      	sub	sp, #28
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	3360      	adds	r3, #96	; 0x60
 80028ae:	461a      	mov	r2, r3
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	431a      	orrs	r2, r3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	601a      	str	r2, [r3, #0]
  }
}
 80028c8:	bf00      	nop
 80028ca:	371c      	adds	r7, #28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80028e8:	2301      	movs	r3, #1
 80028ea:	e000      	b.n	80028ee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b087      	sub	sp, #28
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	3330      	adds	r3, #48	; 0x30
 800290a:	461a      	mov	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	0a1b      	lsrs	r3, r3, #8
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	4413      	add	r3, r2
 8002918:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	f003 031f 	and.w	r3, r3, #31
 8002924:	211f      	movs	r1, #31
 8002926:	fa01 f303 	lsl.w	r3, r1, r3
 800292a:	43db      	mvns	r3, r3
 800292c:	401a      	ands	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	0e9b      	lsrs	r3, r3, #26
 8002932:	f003 011f 	and.w	r1, r3, #31
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	f003 031f 	and.w	r3, r3, #31
 800293c:	fa01 f303 	lsl.w	r3, r1, r3
 8002940:	431a      	orrs	r2, r3
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002946:	bf00      	nop
 8002948:	371c      	adds	r7, #28
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	3314      	adds	r3, #20
 8002988:	461a      	mov	r2, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	0e5b      	lsrs	r3, r3, #25
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	4413      	add	r3, r2
 8002996:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	0d1b      	lsrs	r3, r3, #20
 80029a0:	f003 031f 	and.w	r3, r3, #31
 80029a4:	2107      	movs	r1, #7
 80029a6:	fa01 f303 	lsl.w	r3, r1, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	401a      	ands	r2, r3
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	0d1b      	lsrs	r3, r3, #20
 80029b2:	f003 031f 	and.w	r3, r3, #31
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	fa01 f303 	lsl.w	r3, r1, r3
 80029bc:	431a      	orrs	r2, r3
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80029c2:	bf00      	nop
 80029c4:	371c      	adds	r7, #28
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
	...

080029d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029e8:	43db      	mvns	r3, r3
 80029ea:	401a      	ands	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f003 0318 	and.w	r3, r3, #24
 80029f2:	4908      	ldr	r1, [pc, #32]	; (8002a14 <LL_ADC_SetChannelSingleDiff+0x44>)
 80029f4:	40d9      	lsrs	r1, r3
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	400b      	ands	r3, r1
 80029fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029fe:	431a      	orrs	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002a06:	bf00      	nop
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	000fffff 	.word	0x000fffff

08002a18 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 031f 	and.w	r3, r3, #31
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	4b04      	ldr	r3, [pc, #16]	; (8002a70 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002a5e:	4013      	ands	r3, r2
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6093      	str	r3, [r2, #8]
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	5fffffc0 	.word	0x5fffffc0

08002a74 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a88:	d101      	bne.n	8002a8e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <LL_ADC_EnableInternalRegulator+0x24>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	6fffffc0 	.word	0x6fffffc0

08002ac4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ad8:	d101      	bne.n	8002ade <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <LL_ADC_Enable+0x24>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	f043 0201 	orr.w	r2, r3, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	7fffffc0 	.word	0x7fffffc0

08002b14 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <LL_ADC_Disable+0x24>)
 8002b22:	4013      	ands	r3, r2
 8002b24:	f043 0202 	orr.w	r2, r3, #2
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	7fffffc0 	.word	0x7fffffc0

08002b3c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <LL_ADC_IsEnabled+0x18>
 8002b50:	2301      	movs	r3, #1
 8002b52:	e000      	b.n	8002b56 <LL_ADC_IsEnabled+0x1a>
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d101      	bne.n	8002b7a <LL_ADC_IsDisableOngoing+0x18>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <LL_ADC_IsDisableOngoing+0x1a>
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	4b05      	ldr	r3, [pc, #20]	; (8002bac <LL_ADC_REG_StartConversion+0x24>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	f043 0204 	orr.w	r2, r3, #4
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	7fffffc0 	.word	0x7fffffc0

08002bb0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <LL_ADC_REG_StopConversion+0x24>)
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	f043 0210 	orr.w	r2, r3, #16
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	7fffffc0 	.word	0x7fffffc0

08002bd8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d101      	bne.n	8002bf0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bec:	2301      	movs	r3, #1
 8002bee:	e000      	b.n	8002bf2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
	...

08002c00 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <LL_ADC_INJ_StopConversion+0x24>)
 8002c0e:	4013      	ands	r3, r2
 8002c10:	f043 0220 	orr.w	r2, r3, #32
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	7fffffc0 	.word	0x7fffffc0

08002c28 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 0308 	and.w	r3, r3, #8
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d101      	bne.n	8002c40 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e000      	b.n	8002c42 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
	...

08002c50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c50:	b590      	push	{r4, r7, lr}
 8002c52:	b089      	sub	sp, #36	; 0x24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e18e      	b.n	8002f88 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d109      	bne.n	8002c8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7ff f845 	bl	8001d08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff feef 	bl	8002a74 <LL_ADC_IsDeepPowerDownEnabled>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d004      	beq.n	8002ca6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff fed5 	bl	8002a50 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff ff0a 	bl	8002ac4 <LL_ADC_IsInternalRegulatorEnabled>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d114      	bne.n	8002ce0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff feee 	bl	8002a9c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cc0:	4b9a      	ldr	r3, [pc, #616]	; (8002f2c <HAL_ADC_Init+0x2dc>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	099b      	lsrs	r3, r3, #6
 8002cc6:	4a9a      	ldr	r2, [pc, #616]	; (8002f30 <HAL_ADC_Init+0x2e0>)
 8002cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ccc:	099b      	lsrs	r3, r3, #6
 8002cce:	3301      	adds	r3, #1
 8002cd0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cd2:	e002      	b.n	8002cda <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1f9      	bne.n	8002cd4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff feed 	bl	8002ac4 <LL_ADC_IsInternalRegulatorEnabled>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10d      	bne.n	8002d0c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf4:	f043 0210 	orr.w	r2, r3, #16
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d00:	f043 0201 	orr.w	r2, r3, #1
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff ff61 	bl	8002bd8 <LL_ADC_REG_IsConversionOngoing>
 8002d16:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1c:	f003 0310 	and.w	r3, r3, #16
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f040 8128 	bne.w	8002f76 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f040 8124 	bne.w	8002f76 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d32:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d36:	f043 0202 	orr.w	r2, r3, #2
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff fefa 	bl	8002b3c <LL_ADC_IsEnabled>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d136      	bne.n	8002dbc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a78      	ldr	r2, [pc, #480]	; (8002f34 <HAL_ADC_Init+0x2e4>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d004      	beq.n	8002d62 <HAL_ADC_Init+0x112>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a76      	ldr	r2, [pc, #472]	; (8002f38 <HAL_ADC_Init+0x2e8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d10e      	bne.n	8002d80 <HAL_ADC_Init+0x130>
 8002d62:	4874      	ldr	r0, [pc, #464]	; (8002f34 <HAL_ADC_Init+0x2e4>)
 8002d64:	f7ff feea 	bl	8002b3c <LL_ADC_IsEnabled>
 8002d68:	4604      	mov	r4, r0
 8002d6a:	4873      	ldr	r0, [pc, #460]	; (8002f38 <HAL_ADC_Init+0x2e8>)
 8002d6c:	f7ff fee6 	bl	8002b3c <LL_ADC_IsEnabled>
 8002d70:	4603      	mov	r3, r0
 8002d72:	4323      	orrs	r3, r4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	bf0c      	ite	eq
 8002d78:	2301      	moveq	r3, #1
 8002d7a:	2300      	movne	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	e008      	b.n	8002d92 <HAL_ADC_Init+0x142>
 8002d80:	486e      	ldr	r0, [pc, #440]	; (8002f3c <HAL_ADC_Init+0x2ec>)
 8002d82:	f7ff fedb 	bl	8002b3c <LL_ADC_IsEnabled>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	bf0c      	ite	eq
 8002d8c:	2301      	moveq	r3, #1
 8002d8e:	2300      	movne	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d012      	beq.n	8002dbc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a66      	ldr	r2, [pc, #408]	; (8002f34 <HAL_ADC_Init+0x2e4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d004      	beq.n	8002daa <HAL_ADC_Init+0x15a>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a64      	ldr	r2, [pc, #400]	; (8002f38 <HAL_ADC_Init+0x2e8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d101      	bne.n	8002dae <HAL_ADC_Init+0x15e>
 8002daa:	4a65      	ldr	r2, [pc, #404]	; (8002f40 <HAL_ADC_Init+0x2f0>)
 8002dac:	e000      	b.n	8002db0 <HAL_ADC_Init+0x160>
 8002dae:	4a65      	ldr	r2, [pc, #404]	; (8002f44 <HAL_ADC_Init+0x2f4>)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	4619      	mov	r1, r3
 8002db6:	4610      	mov	r0, r2
 8002db8:	f7ff fd04 	bl	80027c4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002dbc:	f7ff fcf6 	bl	80027ac <HAL_GetREVID>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	f241 0203 	movw	r2, #4099	; 0x1003
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d914      	bls.n	8002df4 <HAL_ADC_Init+0x1a4>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b10      	cmp	r3, #16
 8002dd0:	d110      	bne.n	8002df4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	7d5b      	ldrb	r3, [r3, #21]
 8002dd6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ddc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002de2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	7f1b      	ldrb	r3, [r3, #28]
 8002de8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002dea:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002dec:	f043 030c 	orr.w	r3, r3, #12
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	e00d      	b.n	8002e10 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	7d5b      	ldrb	r3, [r3, #21]
 8002df8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002dfe:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e04:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	7f1b      	ldrb	r3, [r3, #28]
 8002e0a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	7f1b      	ldrb	r3, [r3, #28]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d106      	bne.n	8002e26 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	045b      	lsls	r3, r3, #17
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d009      	beq.n	8002e42 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	4b3f      	ldr	r3, [pc, #252]	; (8002f48 <HAL_ADC_Init+0x2f8>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	69b9      	ldr	r1, [r7, #24]
 8002e52:	430b      	orrs	r3, r1
 8002e54:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff febc 	bl	8002bd8 <LL_ADC_REG_IsConversionOngoing>
 8002e60:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff fede 	bl	8002c28 <LL_ADC_INJ_IsConversionOngoing>
 8002e6c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d14a      	bne.n	8002f0a <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d147      	bne.n	8002f0a <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	7d1b      	ldrb	r3, [r3, #20]
 8002e7e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	4b2f      	ldr	r3, [pc, #188]	; (8002f4c <HAL_ADC_Init+0x2fc>)
 8002e90:	4013      	ands	r3, r2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6812      	ldr	r2, [r2, #0]
 8002e96:	69b9      	ldr	r1, [r7, #24]
 8002e98:	430b      	orrs	r3, r1
 8002e9a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d11b      	bne.n	8002ede <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	691a      	ldr	r2, [r3, #16]
 8002eb2:	4b27      	ldr	r3, [pc, #156]	; (8002f50 <HAL_ADC_Init+0x300>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002eba:	3a01      	subs	r2, #1
 8002ebc:	0411      	lsls	r1, r2, #16
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ec2:	4311      	orrs	r1, r2
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ec8:	4311      	orrs	r1, r2
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0201 	orr.w	r2, r2, #1
 8002eda:	611a      	str	r2, [r3, #16]
 8002edc:	e007      	b.n	8002eee <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0201 	bic.w	r2, r2, #1
 8002eec:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f001 f991 	bl	800422c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d120      	bne.n	8002f54 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f18:	f023 010f 	bic.w	r1, r3, #15
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	1e5a      	subs	r2, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	631a      	str	r2, [r3, #48]	; 0x30
 8002f2a:	e01b      	b.n	8002f64 <HAL_ADC_Init+0x314>
 8002f2c:	24000000 	.word	0x24000000
 8002f30:	053e2d63 	.word	0x053e2d63
 8002f34:	40022000 	.word	0x40022000
 8002f38:	40022100 	.word	0x40022100
 8002f3c:	58026000 	.word	0x58026000
 8002f40:	40022300 	.word	0x40022300
 8002f44:	58026300 	.word	0x58026300
 8002f48:	fff0c003 	.word	0xfff0c003
 8002f4c:	ffffbffc 	.word	0xffffbffc
 8002f50:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 020f 	bic.w	r2, r2, #15
 8002f62:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f68:	f023 0303 	bic.w	r3, r3, #3
 8002f6c:	f043 0201 	orr.w	r2, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	655a      	str	r2, [r3, #84]	; 0x54
 8002f74:	e007      	b.n	8002f86 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7a:	f043 0210 	orr.w	r2, r3, #16
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f86:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3724      	adds	r7, #36	; 0x24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd90      	pop	{r4, r7, pc}

08002f90 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a5c      	ldr	r2, [pc, #368]	; (8003110 <HAL_ADC_Start+0x180>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d004      	beq.n	8002fac <HAL_ADC_Start+0x1c>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a5b      	ldr	r2, [pc, #364]	; (8003114 <HAL_ADC_Start+0x184>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d101      	bne.n	8002fb0 <HAL_ADC_Start+0x20>
 8002fac:	4b5a      	ldr	r3, [pc, #360]	; (8003118 <HAL_ADC_Start+0x188>)
 8002fae:	e000      	b.n	8002fb2 <HAL_ADC_Start+0x22>
 8002fb0:	4b5a      	ldr	r3, [pc, #360]	; (800311c <HAL_ADC_Start+0x18c>)
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff fd30 	bl	8002a18 <LL_ADC_GetMultimode>
 8002fb8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff fe0a 	bl	8002bd8 <LL_ADC_REG_IsConversionOngoing>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f040 809a 	bne.w	8003100 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d101      	bne.n	8002fda <HAL_ADC_Start+0x4a>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	e095      	b.n	8003106 <HAL_ADC_Start+0x176>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f001 f838 	bl	8004058 <ADC_Enable>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002fec:	7dfb      	ldrb	r3, [r7, #23]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f040 8081 	bne.w	80030f6 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ff8:	4b49      	ldr	r3, [pc, #292]	; (8003120 <HAL_ADC_Start+0x190>)
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a42      	ldr	r2, [pc, #264]	; (8003114 <HAL_ADC_Start+0x184>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d002      	beq.n	8003014 <HAL_ADC_Start+0x84>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	e000      	b.n	8003016 <HAL_ADC_Start+0x86>
 8003014:	4b3e      	ldr	r3, [pc, #248]	; (8003110 <HAL_ADC_Start+0x180>)
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6812      	ldr	r2, [r2, #0]
 800301a:	4293      	cmp	r3, r2
 800301c:	d002      	beq.n	8003024 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d105      	bne.n	8003030 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003028:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003034:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800303c:	d106      	bne.n	800304c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003042:	f023 0206 	bic.w	r2, r3, #6
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	659a      	str	r2, [r3, #88]	; 0x58
 800304a:	e002      	b.n	8003052 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	221c      	movs	r2, #28
 8003058:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a2b      	ldr	r2, [pc, #172]	; (8003114 <HAL_ADC_Start+0x184>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d002      	beq.n	8003072 <HAL_ADC_Start+0xe2>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	e000      	b.n	8003074 <HAL_ADC_Start+0xe4>
 8003072:	4b27      	ldr	r3, [pc, #156]	; (8003110 <HAL_ADC_Start+0x180>)
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6812      	ldr	r2, [r2, #0]
 8003078:	4293      	cmp	r3, r2
 800307a:	d008      	beq.n	800308e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d005      	beq.n	800308e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	2b05      	cmp	r3, #5
 8003086:	d002      	beq.n	800308e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	2b09      	cmp	r3, #9
 800308c:	d114      	bne.n	80030b8 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d007      	beq.n	80030ac <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff fd69 	bl	8002b88 <LL_ADC_REG_StartConversion>
 80030b6:	e025      	b.n	8003104 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a12      	ldr	r2, [pc, #72]	; (8003114 <HAL_ADC_Start+0x184>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d002      	beq.n	80030d4 <HAL_ADC_Start+0x144>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	e000      	b.n	80030d6 <HAL_ADC_Start+0x146>
 80030d4:	4b0e      	ldr	r3, [pc, #56]	; (8003110 <HAL_ADC_Start+0x180>)
 80030d6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00f      	beq.n	8003104 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	655a      	str	r2, [r3, #84]	; 0x54
 80030f4:	e006      	b.n	8003104 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80030fe:	e001      	b.n	8003104 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003100:	2302      	movs	r3, #2
 8003102:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003104:	7dfb      	ldrb	r3, [r7, #23]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40022000 	.word	0x40022000
 8003114:	40022100 	.word	0x40022100
 8003118:	40022300 	.word	0x40022300
 800311c:	58026300 	.word	0x58026300
 8003120:	fffff0fe 	.word	0xfffff0fe

08003124 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_ADC_Stop+0x16>
 8003136:	2302      	movs	r3, #2
 8003138:	e021      	b.n	800317e <HAL_ADC_Stop+0x5a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003142:	2103      	movs	r1, #3
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 fecb 	bl	8003ee0 <ADC_ConversionStop>
 800314a:	4603      	mov	r3, r0
 800314c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10f      	bne.n	8003174 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f001 f809 	bl	800416c <ADC_Disable>
 800315a:	4603      	mov	r3, r0
 800315c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800315e:	7bfb      	ldrb	r3, [r7, #15]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d107      	bne.n	8003174 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003168:	4b07      	ldr	r3, [pc, #28]	; (8003188 <HAL_ADC_Stop+0x64>)
 800316a:	4013      	ands	r3, r2
 800316c:	f043 0201 	orr.w	r2, r3, #1
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800317c:	7bfb      	ldrb	r3, [r7, #15]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	ffffeefe 	.word	0xffffeefe

0800318c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b088      	sub	sp, #32
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a72      	ldr	r2, [pc, #456]	; (8003364 <HAL_ADC_PollForConversion+0x1d8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d004      	beq.n	80031aa <HAL_ADC_PollForConversion+0x1e>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a70      	ldr	r2, [pc, #448]	; (8003368 <HAL_ADC_PollForConversion+0x1dc>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d101      	bne.n	80031ae <HAL_ADC_PollForConversion+0x22>
 80031aa:	4b70      	ldr	r3, [pc, #448]	; (800336c <HAL_ADC_PollForConversion+0x1e0>)
 80031ac:	e000      	b.n	80031b0 <HAL_ADC_PollForConversion+0x24>
 80031ae:	4b70      	ldr	r3, [pc, #448]	; (8003370 <HAL_ADC_PollForConversion+0x1e4>)
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff fc31 	bl	8002a18 <LL_ADC_GetMultimode>
 80031b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d102      	bne.n	80031c6 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80031c0:	2308      	movs	r3, #8
 80031c2:	61fb      	str	r3, [r7, #28]
 80031c4:	e037      	b.n	8003236 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	2b05      	cmp	r3, #5
 80031d0:	d002      	beq.n	80031d8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2b09      	cmp	r3, #9
 80031d6:	d111      	bne.n	80031fc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d007      	beq.n	80031f6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ea:	f043 0220 	orr.w	r2, r3, #32
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e0b1      	b.n	800335a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80031f6:	2304      	movs	r3, #4
 80031f8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80031fa:	e01c      	b.n	8003236 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a58      	ldr	r2, [pc, #352]	; (8003364 <HAL_ADC_PollForConversion+0x1d8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d004      	beq.n	8003210 <HAL_ADC_PollForConversion+0x84>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a57      	ldr	r2, [pc, #348]	; (8003368 <HAL_ADC_PollForConversion+0x1dc>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d101      	bne.n	8003214 <HAL_ADC_PollForConversion+0x88>
 8003210:	4b56      	ldr	r3, [pc, #344]	; (800336c <HAL_ADC_PollForConversion+0x1e0>)
 8003212:	e000      	b.n	8003216 <HAL_ADC_PollForConversion+0x8a>
 8003214:	4b56      	ldr	r3, [pc, #344]	; (8003370 <HAL_ADC_PollForConversion+0x1e4>)
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff fc0c 	bl	8002a34 <LL_ADC_GetMultiDMATransfer>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d007      	beq.n	8003232 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003226:	f043 0220 	orr.w	r2, r3, #32
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e093      	b.n	800335a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003232:	2304      	movs	r3, #4
 8003234:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003236:	f7ff fa89 	bl	800274c <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800323c:	e021      	b.n	8003282 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003244:	d01d      	beq.n	8003282 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003246:	f7ff fa81 	bl	800274c <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	429a      	cmp	r2, r3
 8003254:	d302      	bcc.n	800325c <HAL_ADC_PollForConversion+0xd0>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d112      	bne.n	8003282 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	4013      	ands	r3, r2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10b      	bne.n	8003282 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326e:	f043 0204 	orr.w	r2, r3, #4
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e06b      	b.n	800335a <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	4013      	ands	r3, r2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0d6      	beq.n	800323e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003294:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff fb17 	bl	80028d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d01c      	beq.n	80032e6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	7d5b      	ldrb	r3, [r3, #21]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d118      	bne.n	80032e6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d111      	bne.n	80032e6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d105      	bne.n	80032e6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032de:	f043 0201 	orr.w	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a1f      	ldr	r2, [pc, #124]	; (8003368 <HAL_ADC_PollForConversion+0x1dc>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d002      	beq.n	80032f6 <HAL_ADC_PollForConversion+0x16a>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	e000      	b.n	80032f8 <HAL_ADC_PollForConversion+0x16c>
 80032f6:	4b1b      	ldr	r3, [pc, #108]	; (8003364 <HAL_ADC_PollForConversion+0x1d8>)
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d008      	beq.n	8003312 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d005      	beq.n	8003312 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2b05      	cmp	r3, #5
 800330a:	d002      	beq.n	8003312 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	2b09      	cmp	r3, #9
 8003310:	d104      	bne.n	800331c <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	61bb      	str	r3, [r7, #24]
 800331a:	e00c      	b.n	8003336 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a11      	ldr	r2, [pc, #68]	; (8003368 <HAL_ADC_PollForConversion+0x1dc>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d002      	beq.n	800332c <HAL_ADC_PollForConversion+0x1a0>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	e000      	b.n	800332e <HAL_ADC_PollForConversion+0x1a2>
 800332c:	4b0d      	ldr	r3, [pc, #52]	; (8003364 <HAL_ADC_PollForConversion+0x1d8>)
 800332e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	2b08      	cmp	r3, #8
 800333a:	d104      	bne.n	8003346 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2208      	movs	r2, #8
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	e008      	b.n	8003358 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d103      	bne.n	8003358 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	220c      	movs	r2, #12
 8003356:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3720      	adds	r7, #32
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40022000 	.word	0x40022000
 8003368:	40022100 	.word	0x40022100
 800336c:	40022300 	.word	0x40022300
 8003370:	58026300 	.word	0x58026300

08003374 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003382:	4618      	mov	r0, r3
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
	...

08003390 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08a      	sub	sp, #40	; 0x28
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003398:	2300      	movs	r3, #0
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a87      	ldr	r2, [pc, #540]	; (80035d0 <HAL_ADC_IRQHandler+0x240>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d004      	beq.n	80033c0 <HAL_ADC_IRQHandler+0x30>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a86      	ldr	r2, [pc, #536]	; (80035d4 <HAL_ADC_IRQHandler+0x244>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d101      	bne.n	80033c4 <HAL_ADC_IRQHandler+0x34>
 80033c0:	4b85      	ldr	r3, [pc, #532]	; (80035d8 <HAL_ADC_IRQHandler+0x248>)
 80033c2:	e000      	b.n	80033c6 <HAL_ADC_IRQHandler+0x36>
 80033c4:	4b85      	ldr	r3, [pc, #532]	; (80035dc <HAL_ADC_IRQHandler+0x24c>)
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff fb26 	bl	8002a18 <LL_ADC_GetMultimode>
 80033cc:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d017      	beq.n	8003408 <HAL_ADC_IRQHandler+0x78>
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d012      	beq.n	8003408 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e6:	f003 0310 	and.w	r3, r3, #16
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d105      	bne.n	80033fa <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f001 f86e 	bl	80044dc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2202      	movs	r2, #2
 8003406:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f003 0304 	and.w	r3, r3, #4
 800340e:	2b00      	cmp	r3, #0
 8003410:	d004      	beq.n	800341c <HAL_ADC_IRQHandler+0x8c>
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10a      	bne.n	8003432 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 8083 	beq.w	800352e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	d07d      	beq.n	800352e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003436:	f003 0310 	and.w	r3, r3, #16
 800343a:	2b00      	cmp	r3, #0
 800343c:	d105      	bne.n	800344a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003442:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff fa40 	bl	80028d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d062      	beq.n	8003520 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a5d      	ldr	r2, [pc, #372]	; (80035d4 <HAL_ADC_IRQHandler+0x244>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d002      	beq.n	800346a <HAL_ADC_IRQHandler+0xda>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	e000      	b.n	800346c <HAL_ADC_IRQHandler+0xdc>
 800346a:	4b59      	ldr	r3, [pc, #356]	; (80035d0 <HAL_ADC_IRQHandler+0x240>)
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6812      	ldr	r2, [r2, #0]
 8003470:	4293      	cmp	r3, r2
 8003472:	d008      	beq.n	8003486 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d005      	beq.n	8003486 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	2b05      	cmp	r3, #5
 800347e:	d002      	beq.n	8003486 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	2b09      	cmp	r3, #9
 8003484:	d104      	bne.n	8003490 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	623b      	str	r3, [r7, #32]
 800348e:	e00c      	b.n	80034aa <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a4f      	ldr	r2, [pc, #316]	; (80035d4 <HAL_ADC_IRQHandler+0x244>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d002      	beq.n	80034a0 <HAL_ADC_IRQHandler+0x110>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	e000      	b.n	80034a2 <HAL_ADC_IRQHandler+0x112>
 80034a0:	4b4b      	ldr	r3, [pc, #300]	; (80035d0 <HAL_ADC_IRQHandler+0x240>)
 80034a2:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d135      	bne.n	8003520 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b08      	cmp	r3, #8
 80034c0:	d12e      	bne.n	8003520 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff fb86 	bl	8002bd8 <LL_ADC_REG_IsConversionOngoing>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d11a      	bne.n	8003508 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 020c 	bic.w	r2, r2, #12
 80034e0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d112      	bne.n	8003520 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fe:	f043 0201 	orr.w	r2, r3, #1
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	655a      	str	r2, [r3, #84]	; 0x54
 8003506:	e00b      	b.n	8003520 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350c:	f043 0210 	orr.w	r2, r3, #16
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003518:	f043 0201 	orr.w	r2, r3, #1
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f96f 	bl	8003804 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	220c      	movs	r2, #12
 800352c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b00      	cmp	r3, #0
 8003536:	d004      	beq.n	8003542 <HAL_ADC_IRQHandler+0x1b2>
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10b      	bne.n	800355a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 80a0 	beq.w	800368e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 809a 	beq.w	800368e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355e:	f003 0310 	and.w	r3, r3, #16
 8003562:	2b00      	cmp	r3, #0
 8003564:	d105      	bne.n	8003572 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff f9eb 	bl	8002952 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800357c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff f9a6 	bl	80028d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003588:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a11      	ldr	r2, [pc, #68]	; (80035d4 <HAL_ADC_IRQHandler+0x244>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d002      	beq.n	800359a <HAL_ADC_IRQHandler+0x20a>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	e000      	b.n	800359c <HAL_ADC_IRQHandler+0x20c>
 800359a:	4b0d      	ldr	r3, [pc, #52]	; (80035d0 <HAL_ADC_IRQHandler+0x240>)
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6812      	ldr	r2, [r2, #0]
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d008      	beq.n	80035b6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d005      	beq.n	80035b6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b06      	cmp	r3, #6
 80035ae:	d002      	beq.n	80035b6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	2b07      	cmp	r3, #7
 80035b4:	d104      	bne.n	80035c0 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	623b      	str	r3, [r7, #32]
 80035be:	e014      	b.n	80035ea <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a03      	ldr	r2, [pc, #12]	; (80035d4 <HAL_ADC_IRQHandler+0x244>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d00a      	beq.n	80035e0 <HAL_ADC_IRQHandler+0x250>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	e008      	b.n	80035e2 <HAL_ADC_IRQHandler+0x252>
 80035d0:	40022000 	.word	0x40022000
 80035d4:	40022100 	.word	0x40022100
 80035d8:	40022300 	.word	0x40022300
 80035dc:	58026300 	.word	0x58026300
 80035e0:	4b84      	ldr	r3, [pc, #528]	; (80037f4 <HAL_ADC_IRQHandler+0x464>)
 80035e2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10c      	bne.n	800360a <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d142      	bne.n	8003680 <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d03f      	beq.n	8003680 <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8003606:	2b00      	cmp	r3, #0
 8003608:	d13a      	bne.n	8003680 <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003614:	2b40      	cmp	r3, #64	; 0x40
 8003616:	d133      	bne.n	8003680 <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d12e      	bne.n	8003680 <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff fafe 	bl	8002c28 <LL_ADC_INJ_IsConversionOngoing>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d11a      	bne.n	8003668 <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003640:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003646:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003656:	2b00      	cmp	r3, #0
 8003658:	d112      	bne.n	8003680 <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365e:	f043 0201 	orr.w	r2, r3, #1
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	655a      	str	r2, [r3, #84]	; 0x54
 8003666:	e00b      	b.n	8003680 <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366c:	f043 0210 	orr.w	r2, r3, #16
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003678:	f043 0201 	orr.w	r2, r3, #1
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 ff03 	bl	800448c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2260      	movs	r2, #96	; 0x60
 800368c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003694:	2b00      	cmp	r3, #0
 8003696:	d011      	beq.n	80036bc <HAL_ADC_IRQHandler+0x32c>
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00c      	beq.n	80036bc <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f8b2 	bl	8003818 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2280      	movs	r2, #128	; 0x80
 80036ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d012      	beq.n	80036ec <HAL_ADC_IRQHandler+0x35c>
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00d      	beq.n	80036ec <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 fee9 	bl	80044b4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036ea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d012      	beq.n	800371c <HAL_ADC_IRQHandler+0x38c>
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00d      	beq.n	800371c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003704:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 fedb 	bl	80044c8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f44f 7200 	mov.w	r2, #512	; 0x200
 800371a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f003 0310 	and.w	r3, r3, #16
 8003722:	2b00      	cmp	r3, #0
 8003724:	d043      	beq.n	80037ae <HAL_ADC_IRQHandler+0x41e>
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	f003 0310 	and.w	r3, r3, #16
 800372c:	2b00      	cmp	r3, #0
 800372e:	d03e      	beq.n	80037ae <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003734:	2b00      	cmp	r3, #0
 8003736:	d102      	bne.n	800373e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003738:	2301      	movs	r3, #1
 800373a:	627b      	str	r3, [r7, #36]	; 0x24
 800373c:	e021      	b.n	8003782 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d015      	beq.n	8003770 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a2a      	ldr	r2, [pc, #168]	; (80037f4 <HAL_ADC_IRQHandler+0x464>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d004      	beq.n	8003758 <HAL_ADC_IRQHandler+0x3c8>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a29      	ldr	r2, [pc, #164]	; (80037f8 <HAL_ADC_IRQHandler+0x468>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d101      	bne.n	800375c <HAL_ADC_IRQHandler+0x3cc>
 8003758:	4b28      	ldr	r3, [pc, #160]	; (80037fc <HAL_ADC_IRQHandler+0x46c>)
 800375a:	e000      	b.n	800375e <HAL_ADC_IRQHandler+0x3ce>
 800375c:	4b28      	ldr	r3, [pc, #160]	; (8003800 <HAL_ADC_IRQHandler+0x470>)
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff f968 	bl	8002a34 <LL_ADC_GetMultiDMATransfer>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00b      	beq.n	8003782 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800376a:	2301      	movs	r3, #1
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
 800376e:	e008      	b.n	8003782 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800377e:	2301      	movs	r3, #1
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	2b01      	cmp	r3, #1
 8003786:	d10e      	bne.n	80037a6 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003798:	f043 0202 	orr.w	r2, r3, #2
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f843 	bl	800382c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2210      	movs	r2, #16
 80037ac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d018      	beq.n	80037ea <HAL_ADC_IRQHandler+0x45a>
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d013      	beq.n	80037ea <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d2:	f043 0208 	orr.w	r2, r3, #8
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037e2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 fe5b 	bl	80044a0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80037ea:	bf00      	nop
 80037ec:	3728      	adds	r7, #40	; 0x28
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40022000 	.word	0x40022000
 80037f8:	40022100 	.word	0x40022100
 80037fc:	40022300 	.word	0x40022300
 8003800:	58026300 	.word	0x58026300

08003804 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003840:	b590      	push	{r4, r7, lr}
 8003842:	b0a1      	sub	sp, #132	; 0x84
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003850:	2300      	movs	r3, #0
 8003852:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	4a9d      	ldr	r2, [pc, #628]	; (8003ad0 <HAL_ADC_ConfigChannel+0x290>)
 800385a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_ADC_ConfigChannel+0x2a>
 8003866:	2302      	movs	r3, #2
 8003868:	e321      	b.n	8003eae <HAL_ADC_ConfigChannel+0x66e>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff f9ae 	bl	8002bd8 <LL_ADC_REG_IsConversionOngoing>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	f040 8306 	bne.w	8003e90 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800388c:	2b00      	cmp	r3, #0
 800388e:	d108      	bne.n	80038a2 <HAL_ADC_ConfigChannel+0x62>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	0e9b      	lsrs	r3, r3, #26
 8003896:	f003 031f 	and.w	r3, r3, #31
 800389a:	2201      	movs	r2, #1
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	e016      	b.n	80038d0 <HAL_ADC_ConfigChannel+0x90>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038aa:	fa93 f3a3 	rbit	r3, r3
 80038ae:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038b2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80038b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80038ba:	2320      	movs	r3, #32
 80038bc:	e003      	b.n	80038c6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80038be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038c0:	fab3 f383 	clz	r3, r3
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	f003 031f 	and.w	r3, r3, #31
 80038ca:	2201      	movs	r2, #1
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6812      	ldr	r2, [r2, #0]
 80038d4:	69d1      	ldr	r1, [r2, #28]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6812      	ldr	r2, [r2, #0]
 80038da:	430b      	orrs	r3, r1
 80038dc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	6859      	ldr	r1, [r3, #4]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	461a      	mov	r2, r3
 80038ec:	f7ff f805 	bl	80028fa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff f96f 	bl	8002bd8 <LL_ADC_REG_IsConversionOngoing>
 80038fa:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff f991 	bl	8002c28 <LL_ADC_INJ_IsConversionOngoing>
 8003906:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003908:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800390a:	2b00      	cmp	r3, #0
 800390c:	f040 80b3 	bne.w	8003a76 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003910:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003912:	2b00      	cmp	r3, #0
 8003914:	f040 80af 	bne.w	8003a76 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6818      	ldr	r0, [r3, #0]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	6819      	ldr	r1, [r3, #0]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	461a      	mov	r2, r3
 8003926:	f7ff f827 	bl	8002978 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800392a:	4b6a      	ldr	r3, [pc, #424]	; (8003ad4 <HAL_ADC_ConfigChannel+0x294>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003932:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003936:	d10b      	bne.n	8003950 <HAL_ADC_ConfigChannel+0x110>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	695a      	ldr	r2, [r3, #20]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	089b      	lsrs	r3, r3, #2
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	e01d      	b.n	800398c <HAL_ADC_ConfigChannel+0x14c>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f003 0310 	and.w	r3, r3, #16
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10b      	bne.n	8003976 <HAL_ADC_ConfigChannel+0x136>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	695a      	ldr	r2, [r3, #20]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	089b      	lsrs	r3, r3, #2
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	e00a      	b.n	800398c <HAL_ADC_ConfigChannel+0x14c>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	695a      	ldr	r2, [r3, #20]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	089b      	lsrs	r3, r3, #2
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	2b04      	cmp	r3, #4
 8003994:	d027      	beq.n	80039e6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	6919      	ldr	r1, [r3, #16]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039a4:	f7fe ff42 	bl	800282c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6818      	ldr	r0, [r3, #0]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	6919      	ldr	r1, [r3, #16]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	7e5b      	ldrb	r3, [r3, #25]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d102      	bne.n	80039be <HAL_ADC_ConfigChannel+0x17e>
 80039b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80039bc:	e000      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x180>
 80039be:	2300      	movs	r3, #0
 80039c0:	461a      	mov	r2, r3
 80039c2:	f7fe ff6c 	bl	800289e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6818      	ldr	r0, [r3, #0]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	6919      	ldr	r1, [r3, #16]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	7e1b      	ldrb	r3, [r3, #24]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d102      	bne.n	80039dc <HAL_ADC_ConfigChannel+0x19c>
 80039d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039da:	e000      	b.n	80039de <HAL_ADC_ConfigChannel+0x19e>
 80039dc:	2300      	movs	r3, #0
 80039de:	461a      	mov	r2, r3
 80039e0:	f7fe ff44 	bl	800286c <LL_ADC_SetDataRightShift>
 80039e4:	e047      	b.n	8003a76 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	069b      	lsls	r3, r3, #26
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d107      	bne.n	8003a0a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a08:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	069b      	lsls	r3, r3, #26
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d107      	bne.n	8003a2e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a2c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	069b      	lsls	r3, r3, #26
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d107      	bne.n	8003a52 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a50:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	069b      	lsls	r3, r3, #26
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d107      	bne.n	8003a76 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a74:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff f85e 	bl	8002b3c <LL_ADC_IsEnabled>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f040 820d 	bne.w	8003ea2 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6818      	ldr	r0, [r3, #0]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	6819      	ldr	r1, [r3, #0]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	461a      	mov	r2, r3
 8003a96:	f7fe ff9b 	bl	80029d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	4a0c      	ldr	r2, [pc, #48]	; (8003ad0 <HAL_ADC_ConfigChannel+0x290>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	f040 8133 	bne.w	8003d0c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d110      	bne.n	8003ad8 <HAL_ADC_ConfigChannel+0x298>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	0e9b      	lsrs	r3, r3, #26
 8003abc:	3301      	adds	r3, #1
 8003abe:	f003 031f 	and.w	r3, r3, #31
 8003ac2:	2b09      	cmp	r3, #9
 8003ac4:	bf94      	ite	ls
 8003ac6:	2301      	movls	r3, #1
 8003ac8:	2300      	movhi	r3, #0
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	e01e      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x2cc>
 8003ace:	bf00      	nop
 8003ad0:	47ff0000 	.word	0x47ff0000
 8003ad4:	5c001000 	.word	0x5c001000
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ade:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ae0:	fa93 f3a3 	rbit	r3, r3
 8003ae4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d101      	bne.n	8003af4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003af0:	2320      	movs	r3, #32
 8003af2:	e003      	b.n	8003afc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003af6:	fab3 f383 	clz	r3, r3
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	3301      	adds	r3, #1
 8003afe:	f003 031f 	and.w	r3, r3, #31
 8003b02:	2b09      	cmp	r3, #9
 8003b04:	bf94      	ite	ls
 8003b06:	2301      	movls	r3, #1
 8003b08:	2300      	movhi	r3, #0
 8003b0a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d079      	beq.n	8003c04 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d107      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x2ec>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	0e9b      	lsrs	r3, r3, #26
 8003b22:	3301      	adds	r3, #1
 8003b24:	069b      	lsls	r3, r3, #26
 8003b26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b2a:	e015      	b.n	8003b58 <HAL_ADC_ConfigChannel+0x318>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b34:	fa93 f3a3 	rbit	r3, r3
 8003b38:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b3c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003b44:	2320      	movs	r3, #32
 8003b46:	e003      	b.n	8003b50 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003b48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b4a:	fab3 f383 	clz	r3, r3
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	3301      	adds	r3, #1
 8003b52:	069b      	lsls	r3, r3, #26
 8003b54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d109      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x338>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	0e9b      	lsrs	r3, r3, #26
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	f003 031f 	and.w	r3, r3, #31
 8003b70:	2101      	movs	r1, #1
 8003b72:	fa01 f303 	lsl.w	r3, r1, r3
 8003b76:	e017      	b.n	8003ba8 <HAL_ADC_ConfigChannel+0x368>
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b80:	fa93 f3a3 	rbit	r3, r3
 8003b84:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b88:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003b90:	2320      	movs	r3, #32
 8003b92:	e003      	b.n	8003b9c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b96:	fab3 f383 	clz	r3, r3
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	f003 031f 	and.w	r3, r3, #31
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba8:	ea42 0103 	orr.w	r1, r2, r3
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10a      	bne.n	8003bce <HAL_ADC_ConfigChannel+0x38e>
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	0e9b      	lsrs	r3, r3, #26
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	f003 021f 	and.w	r2, r3, #31
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	4413      	add	r3, r2
 8003bca:	051b      	lsls	r3, r3, #20
 8003bcc:	e018      	b.n	8003c00 <HAL_ADC_ConfigChannel+0x3c0>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd6:	fa93 f3a3 	rbit	r3, r3
 8003bda:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bde:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003be6:	2320      	movs	r3, #32
 8003be8:	e003      	b.n	8003bf2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bec:	fab3 f383 	clz	r3, r3
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	f003 021f 	and.w	r2, r3, #31
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	4413      	add	r3, r2
 8003bfe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c00:	430b      	orrs	r3, r1
 8003c02:	e07e      	b.n	8003d02 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d107      	bne.n	8003c20 <HAL_ADC_ConfigChannel+0x3e0>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	0e9b      	lsrs	r3, r3, #26
 8003c16:	3301      	adds	r3, #1
 8003c18:	069b      	lsls	r3, r3, #26
 8003c1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c1e:	e015      	b.n	8003c4c <HAL_ADC_ConfigChannel+0x40c>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c28:	fa93 f3a3 	rbit	r3, r3
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003c38:	2320      	movs	r3, #32
 8003c3a:	e003      	b.n	8003c44 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3e:	fab3 f383 	clz	r3, r3
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	3301      	adds	r3, #1
 8003c46:	069b      	lsls	r3, r3, #26
 8003c48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d109      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x42c>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	0e9b      	lsrs	r3, r3, #26
 8003c5e:	3301      	adds	r3, #1
 8003c60:	f003 031f 	and.w	r3, r3, #31
 8003c64:	2101      	movs	r1, #1
 8003c66:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6a:	e017      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x45c>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	fa93 f3a3 	rbit	r3, r3
 8003c78:	61bb      	str	r3, [r7, #24]
  return result;
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003c84:	2320      	movs	r3, #32
 8003c86:	e003      	b.n	8003c90 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	fab3 f383 	clz	r3, r3
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	3301      	adds	r3, #1
 8003c92:	f003 031f 	and.w	r3, r3, #31
 8003c96:	2101      	movs	r1, #1
 8003c98:	fa01 f303 	lsl.w	r3, r1, r3
 8003c9c:	ea42 0103 	orr.w	r1, r2, r3
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10d      	bne.n	8003cc8 <HAL_ADC_ConfigChannel+0x488>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	0e9b      	lsrs	r3, r3, #26
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	f003 021f 	and.w	r2, r3, #31
 8003cb8:	4613      	mov	r3, r2
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	4413      	add	r3, r2
 8003cbe:	3b1e      	subs	r3, #30
 8003cc0:	051b      	lsls	r3, r3, #20
 8003cc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003cc6:	e01b      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x4c0>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	fa93 f3a3 	rbit	r3, r3
 8003cd4:	60fb      	str	r3, [r7, #12]
  return result;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003ce0:	2320      	movs	r3, #32
 8003ce2:	e003      	b.n	8003cec <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	fab3 f383 	clz	r3, r3
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	3301      	adds	r3, #1
 8003cee:	f003 021f 	and.w	r2, r3, #31
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	4413      	add	r3, r2
 8003cf8:	3b1e      	subs	r3, #30
 8003cfa:	051b      	lsls	r3, r3, #20
 8003cfc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d00:	430b      	orrs	r3, r1
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	6892      	ldr	r2, [r2, #8]
 8003d06:	4619      	mov	r1, r3
 8003d08:	f7fe fe36 	bl	8002978 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f280 80c6 	bge.w	8003ea2 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a67      	ldr	r2, [pc, #412]	; (8003eb8 <HAL_ADC_ConfigChannel+0x678>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d004      	beq.n	8003d2a <HAL_ADC_ConfigChannel+0x4ea>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a65      	ldr	r2, [pc, #404]	; (8003ebc <HAL_ADC_ConfigChannel+0x67c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d101      	bne.n	8003d2e <HAL_ADC_ConfigChannel+0x4ee>
 8003d2a:	4b65      	ldr	r3, [pc, #404]	; (8003ec0 <HAL_ADC_ConfigChannel+0x680>)
 8003d2c:	e000      	b.n	8003d30 <HAL_ADC_ConfigChannel+0x4f0>
 8003d2e:	4b65      	ldr	r3, [pc, #404]	; (8003ec4 <HAL_ADC_ConfigChannel+0x684>)
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fe fd6d 	bl	8002810 <LL_ADC_GetCommonPathInternalCh>
 8003d36:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a5e      	ldr	r2, [pc, #376]	; (8003eb8 <HAL_ADC_ConfigChannel+0x678>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d004      	beq.n	8003d4c <HAL_ADC_ConfigChannel+0x50c>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a5d      	ldr	r2, [pc, #372]	; (8003ebc <HAL_ADC_ConfigChannel+0x67c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d10e      	bne.n	8003d6a <HAL_ADC_ConfigChannel+0x52a>
 8003d4c:	485a      	ldr	r0, [pc, #360]	; (8003eb8 <HAL_ADC_ConfigChannel+0x678>)
 8003d4e:	f7fe fef5 	bl	8002b3c <LL_ADC_IsEnabled>
 8003d52:	4604      	mov	r4, r0
 8003d54:	4859      	ldr	r0, [pc, #356]	; (8003ebc <HAL_ADC_ConfigChannel+0x67c>)
 8003d56:	f7fe fef1 	bl	8002b3c <LL_ADC_IsEnabled>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	4323      	orrs	r3, r4
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	bf0c      	ite	eq
 8003d62:	2301      	moveq	r3, #1
 8003d64:	2300      	movne	r3, #0
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	e008      	b.n	8003d7c <HAL_ADC_ConfigChannel+0x53c>
 8003d6a:	4857      	ldr	r0, [pc, #348]	; (8003ec8 <HAL_ADC_ConfigChannel+0x688>)
 8003d6c:	f7fe fee6 	bl	8002b3c <LL_ADC_IsEnabled>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	bf0c      	ite	eq
 8003d76:	2301      	moveq	r3, #1
 8003d78:	2300      	movne	r3, #0
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d07d      	beq.n	8003e7c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a51      	ldr	r2, [pc, #324]	; (8003ecc <HAL_ADC_ConfigChannel+0x68c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d130      	bne.n	8003dec <HAL_ADC_ConfigChannel+0x5ac>
 8003d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d12b      	bne.n	8003dec <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a4b      	ldr	r2, [pc, #300]	; (8003ec8 <HAL_ADC_ConfigChannel+0x688>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	f040 8081 	bne.w	8003ea2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a44      	ldr	r2, [pc, #272]	; (8003eb8 <HAL_ADC_ConfigChannel+0x678>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d004      	beq.n	8003db4 <HAL_ADC_ConfigChannel+0x574>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a43      	ldr	r2, [pc, #268]	; (8003ebc <HAL_ADC_ConfigChannel+0x67c>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d101      	bne.n	8003db8 <HAL_ADC_ConfigChannel+0x578>
 8003db4:	4a42      	ldr	r2, [pc, #264]	; (8003ec0 <HAL_ADC_ConfigChannel+0x680>)
 8003db6:	e000      	b.n	8003dba <HAL_ADC_ConfigChannel+0x57a>
 8003db8:	4a42      	ldr	r2, [pc, #264]	; (8003ec4 <HAL_ADC_ConfigChannel+0x684>)
 8003dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	f7fe fd11 	bl	80027ea <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003dc8:	4b41      	ldr	r3, [pc, #260]	; (8003ed0 <HAL_ADC_ConfigChannel+0x690>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	099b      	lsrs	r3, r3, #6
 8003dce:	4a41      	ldr	r2, [pc, #260]	; (8003ed4 <HAL_ADC_ConfigChannel+0x694>)
 8003dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd4:	099b      	lsrs	r3, r3, #6
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003ddc:	e002      	b.n	8003de4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	3b01      	subs	r3, #1
 8003de2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f9      	bne.n	8003dde <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003dea:	e05a      	b.n	8003ea2 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a39      	ldr	r2, [pc, #228]	; (8003ed8 <HAL_ADC_ConfigChannel+0x698>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d11e      	bne.n	8003e34 <HAL_ADC_ConfigChannel+0x5f4>
 8003df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d119      	bne.n	8003e34 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a30      	ldr	r2, [pc, #192]	; (8003ec8 <HAL_ADC_ConfigChannel+0x688>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d14b      	bne.n	8003ea2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a2a      	ldr	r2, [pc, #168]	; (8003eb8 <HAL_ADC_ConfigChannel+0x678>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d004      	beq.n	8003e1e <HAL_ADC_ConfigChannel+0x5de>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a28      	ldr	r2, [pc, #160]	; (8003ebc <HAL_ADC_ConfigChannel+0x67c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d101      	bne.n	8003e22 <HAL_ADC_ConfigChannel+0x5e2>
 8003e1e:	4a28      	ldr	r2, [pc, #160]	; (8003ec0 <HAL_ADC_ConfigChannel+0x680>)
 8003e20:	e000      	b.n	8003e24 <HAL_ADC_ConfigChannel+0x5e4>
 8003e22:	4a28      	ldr	r2, [pc, #160]	; (8003ec4 <HAL_ADC_ConfigChannel+0x684>)
 8003e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	f7fe fcdc 	bl	80027ea <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e32:	e036      	b.n	8003ea2 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a28      	ldr	r2, [pc, #160]	; (8003edc <HAL_ADC_ConfigChannel+0x69c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d131      	bne.n	8003ea2 <HAL_ADC_ConfigChannel+0x662>
 8003e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d12c      	bne.n	8003ea2 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a1e      	ldr	r2, [pc, #120]	; (8003ec8 <HAL_ADC_ConfigChannel+0x688>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d127      	bne.n	8003ea2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a18      	ldr	r2, [pc, #96]	; (8003eb8 <HAL_ADC_ConfigChannel+0x678>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d004      	beq.n	8003e66 <HAL_ADC_ConfigChannel+0x626>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a16      	ldr	r2, [pc, #88]	; (8003ebc <HAL_ADC_ConfigChannel+0x67c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d101      	bne.n	8003e6a <HAL_ADC_ConfigChannel+0x62a>
 8003e66:	4a16      	ldr	r2, [pc, #88]	; (8003ec0 <HAL_ADC_ConfigChannel+0x680>)
 8003e68:	e000      	b.n	8003e6c <HAL_ADC_ConfigChannel+0x62c>
 8003e6a:	4a16      	ldr	r2, [pc, #88]	; (8003ec4 <HAL_ADC_ConfigChannel+0x684>)
 8003e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e72:	4619      	mov	r1, r3
 8003e74:	4610      	mov	r0, r2
 8003e76:	f7fe fcb8 	bl	80027ea <LL_ADC_SetCommonPathInternalCh>
 8003e7a:	e012      	b.n	8003ea2 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e80:	f043 0220 	orr.w	r2, r3, #32
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003e8e:	e008      	b.n	8003ea2 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e94:	f043 0220 	orr.w	r2, r3, #32
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003eaa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3784      	adds	r7, #132	; 0x84
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd90      	pop	{r4, r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40022000 	.word	0x40022000
 8003ebc:	40022100 	.word	0x40022100
 8003ec0:	40022300 	.word	0x40022300
 8003ec4:	58026300 	.word	0x58026300
 8003ec8:	58026000 	.word	0x58026000
 8003ecc:	cb840000 	.word	0xcb840000
 8003ed0:	24000000 	.word	0x24000000
 8003ed4:	053e2d63 	.word	0x053e2d63
 8003ed8:	c7520000 	.word	0xc7520000
 8003edc:	cfb80000 	.word	0xcfb80000

08003ee0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b088      	sub	sp, #32
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003eea:	2300      	movs	r3, #0
 8003eec:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fe fe6e 	bl	8002bd8 <LL_ADC_REG_IsConversionOngoing>
 8003efc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fe fe90 	bl	8002c28 <LL_ADC_INJ_IsConversionOngoing>
 8003f08:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d103      	bne.n	8003f18 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 8098 	beq.w	8004048 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d02a      	beq.n	8003f7c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	7d5b      	ldrb	r3, [r3, #21]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d126      	bne.n	8003f7c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	7d1b      	ldrb	r3, [r3, #20]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d122      	bne.n	8003f7c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003f36:	2301      	movs	r3, #1
 8003f38:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003f3a:	e014      	b.n	8003f66 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	4a45      	ldr	r2, [pc, #276]	; (8004054 <ADC_ConversionStop+0x174>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d90d      	bls.n	8003f60 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f48:	f043 0210 	orr.w	r2, r3, #16
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f54:	f043 0201 	orr.w	r2, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e074      	b.n	800404a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	3301      	adds	r3, #1
 8003f64:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f70:	2b40      	cmp	r3, #64	; 0x40
 8003f72:	d1e3      	bne.n	8003f3c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2240      	movs	r2, #64	; 0x40
 8003f7a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d014      	beq.n	8003fac <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fe fe26 	bl	8002bd8 <LL_ADC_REG_IsConversionOngoing>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00c      	beq.n	8003fac <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fe fde3 	bl	8002b62 <LL_ADC_IsDisableOngoing>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d104      	bne.n	8003fac <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fe fe02 	bl	8002bb0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d014      	beq.n	8003fdc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fe fe36 	bl	8002c28 <LL_ADC_INJ_IsConversionOngoing>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00c      	beq.n	8003fdc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fe fdcb 	bl	8002b62 <LL_ADC_IsDisableOngoing>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d104      	bne.n	8003fdc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fe fe12 	bl	8002c00 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d005      	beq.n	8003fee <ADC_ConversionStop+0x10e>
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	2b03      	cmp	r3, #3
 8003fe6:	d105      	bne.n	8003ff4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003fe8:	230c      	movs	r3, #12
 8003fea:	617b      	str	r3, [r7, #20]
        break;
 8003fec:	e005      	b.n	8003ffa <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003fee:	2308      	movs	r3, #8
 8003ff0:	617b      	str	r3, [r7, #20]
        break;
 8003ff2:	e002      	b.n	8003ffa <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003ff4:	2304      	movs	r3, #4
 8003ff6:	617b      	str	r3, [r7, #20]
        break;
 8003ff8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003ffa:	f7fe fba7 	bl	800274c <HAL_GetTick>
 8003ffe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004000:	e01b      	b.n	800403a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004002:	f7fe fba3 	bl	800274c <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b05      	cmp	r3, #5
 800400e:	d914      	bls.n	800403a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	4013      	ands	r3, r2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00d      	beq.n	800403a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004022:	f043 0210 	orr.w	r2, r3, #16
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402e:	f043 0201 	orr.w	r2, r3, #1
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e007      	b.n	800404a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	4013      	ands	r3, r2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1dc      	bne.n	8004002 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3720      	adds	r7, #32
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	000cdbff 	.word	0x000cdbff

08004058 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f7fe fd69 	bl	8002b3c <LL_ADC_IsEnabled>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d16e      	bne.n	800414e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	4b38      	ldr	r3, [pc, #224]	; (8004158 <ADC_Enable+0x100>)
 8004078:	4013      	ands	r3, r2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00d      	beq.n	800409a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004082:	f043 0210 	orr.w	r2, r3, #16
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408e:	f043 0201 	orr.w	r2, r3, #1
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e05a      	b.n	8004150 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fe fd24 	bl	8002aec <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80040a4:	f7fe fb52 	bl	800274c <HAL_GetTick>
 80040a8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a2b      	ldr	r2, [pc, #172]	; (800415c <ADC_Enable+0x104>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d004      	beq.n	80040be <ADC_Enable+0x66>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a29      	ldr	r2, [pc, #164]	; (8004160 <ADC_Enable+0x108>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d101      	bne.n	80040c2 <ADC_Enable+0x6a>
 80040be:	4b29      	ldr	r3, [pc, #164]	; (8004164 <ADC_Enable+0x10c>)
 80040c0:	e000      	b.n	80040c4 <ADC_Enable+0x6c>
 80040c2:	4b29      	ldr	r3, [pc, #164]	; (8004168 <ADC_Enable+0x110>)
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fe fca7 	bl	8002a18 <LL_ADC_GetMultimode>
 80040ca:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a23      	ldr	r2, [pc, #140]	; (8004160 <ADC_Enable+0x108>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d002      	beq.n	80040dc <ADC_Enable+0x84>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	e000      	b.n	80040de <ADC_Enable+0x86>
 80040dc:	4b1f      	ldr	r3, [pc, #124]	; (800415c <ADC_Enable+0x104>)
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6812      	ldr	r2, [r2, #0]
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d02c      	beq.n	8004140 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d130      	bne.n	800414e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040ec:	e028      	b.n	8004140 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fe fd22 	bl	8002b3c <LL_ADC_IsEnabled>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d104      	bne.n	8004108 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f7fe fcf2 	bl	8002aec <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004108:	f7fe fb20 	bl	800274c <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d914      	bls.n	8004140 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b01      	cmp	r3, #1
 8004122:	d00d      	beq.n	8004140 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004128:	f043 0210 	orr.w	r2, r3, #16
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004134:	f043 0201 	orr.w	r2, r3, #1
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e007      	b.n	8004150 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b01      	cmp	r3, #1
 800414c:	d1cf      	bne.n	80040ee <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	8000003f 	.word	0x8000003f
 800415c:	40022000 	.word	0x40022000
 8004160:	40022100 	.word	0x40022100
 8004164:	40022300 	.word	0x40022300
 8004168:	58026300 	.word	0x58026300

0800416c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4618      	mov	r0, r3
 800417a:	f7fe fcf2 	bl	8002b62 <LL_ADC_IsDisableOngoing>
 800417e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4618      	mov	r0, r3
 8004186:	f7fe fcd9 	bl	8002b3c <LL_ADC_IsEnabled>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d047      	beq.n	8004220 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d144      	bne.n	8004220 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 030d 	and.w	r3, r3, #13
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d10c      	bne.n	80041be <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7fe fcb3 	bl	8002b14 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2203      	movs	r2, #3
 80041b4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80041b6:	f7fe fac9 	bl	800274c <HAL_GetTick>
 80041ba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80041bc:	e029      	b.n	8004212 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c2:	f043 0210 	orr.w	r2, r3, #16
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ce:	f043 0201 	orr.w	r2, r3, #1
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e023      	b.n	8004222 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80041da:	f7fe fab7 	bl	800274c <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d914      	bls.n	8004212 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00d      	beq.n	8004212 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fa:	f043 0210 	orr.w	r2, r3, #16
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004206:	f043 0201 	orr.w	r2, r3, #1
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e007      	b.n	8004222 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1dc      	bne.n	80041da <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
	...

0800422c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a79      	ldr	r2, [pc, #484]	; (8004420 <ADC_ConfigureBoostMode+0x1f4>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d004      	beq.n	8004248 <ADC_ConfigureBoostMode+0x1c>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a78      	ldr	r2, [pc, #480]	; (8004424 <ADC_ConfigureBoostMode+0x1f8>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d109      	bne.n	800425c <ADC_ConfigureBoostMode+0x30>
 8004248:	4b77      	ldr	r3, [pc, #476]	; (8004428 <ADC_ConfigureBoostMode+0x1fc>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004250:	2b00      	cmp	r3, #0
 8004252:	bf14      	ite	ne
 8004254:	2301      	movne	r3, #1
 8004256:	2300      	moveq	r3, #0
 8004258:	b2db      	uxtb	r3, r3
 800425a:	e008      	b.n	800426e <ADC_ConfigureBoostMode+0x42>
 800425c:	4b73      	ldr	r3, [pc, #460]	; (800442c <ADC_ConfigureBoostMode+0x200>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004264:	2b00      	cmp	r3, #0
 8004266:	bf14      	ite	ne
 8004268:	2301      	movne	r3, #1
 800426a:	2300      	moveq	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d01c      	beq.n	80042ac <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004272:	f004 fce7 	bl	8008c44 <HAL_RCC_GetHCLKFreq>
 8004276:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004280:	d010      	beq.n	80042a4 <ADC_ConfigureBoostMode+0x78>
 8004282:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004286:	d871      	bhi.n	800436c <ADC_ConfigureBoostMode+0x140>
 8004288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800428c:	d002      	beq.n	8004294 <ADC_ConfigureBoostMode+0x68>
 800428e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004292:	d16b      	bne.n	800436c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	0c1b      	lsrs	r3, r3, #16
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a0:	60fb      	str	r3, [r7, #12]
        break;
 80042a2:	e066      	b.n	8004372 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	089b      	lsrs	r3, r3, #2
 80042a8:	60fb      	str	r3, [r7, #12]
        break;
 80042aa:	e062      	b.n	8004372 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80042ac:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80042b0:	f005 fc64 	bl	8009b7c <HAL_RCCEx_GetPeriphCLKFreq>
 80042b4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80042be:	d051      	beq.n	8004364 <ADC_ConfigureBoostMode+0x138>
 80042c0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80042c4:	d854      	bhi.n	8004370 <ADC_ConfigureBoostMode+0x144>
 80042c6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80042ca:	d047      	beq.n	800435c <ADC_ConfigureBoostMode+0x130>
 80042cc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80042d0:	d84e      	bhi.n	8004370 <ADC_ConfigureBoostMode+0x144>
 80042d2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80042d6:	d03d      	beq.n	8004354 <ADC_ConfigureBoostMode+0x128>
 80042d8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80042dc:	d848      	bhi.n	8004370 <ADC_ConfigureBoostMode+0x144>
 80042de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042e2:	d033      	beq.n	800434c <ADC_ConfigureBoostMode+0x120>
 80042e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042e8:	d842      	bhi.n	8004370 <ADC_ConfigureBoostMode+0x144>
 80042ea:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80042ee:	d029      	beq.n	8004344 <ADC_ConfigureBoostMode+0x118>
 80042f0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80042f4:	d83c      	bhi.n	8004370 <ADC_ConfigureBoostMode+0x144>
 80042f6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80042fa:	d01a      	beq.n	8004332 <ADC_ConfigureBoostMode+0x106>
 80042fc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004300:	d836      	bhi.n	8004370 <ADC_ConfigureBoostMode+0x144>
 8004302:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004306:	d014      	beq.n	8004332 <ADC_ConfigureBoostMode+0x106>
 8004308:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800430c:	d830      	bhi.n	8004370 <ADC_ConfigureBoostMode+0x144>
 800430e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004312:	d00e      	beq.n	8004332 <ADC_ConfigureBoostMode+0x106>
 8004314:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004318:	d82a      	bhi.n	8004370 <ADC_ConfigureBoostMode+0x144>
 800431a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800431e:	d008      	beq.n	8004332 <ADC_ConfigureBoostMode+0x106>
 8004320:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004324:	d824      	bhi.n	8004370 <ADC_ConfigureBoostMode+0x144>
 8004326:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800432a:	d002      	beq.n	8004332 <ADC_ConfigureBoostMode+0x106>
 800432c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004330:	d11e      	bne.n	8004370 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	0c9b      	lsrs	r3, r3, #18
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004340:	60fb      	str	r3, [r7, #12]
        break;
 8004342:	e016      	b.n	8004372 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	091b      	lsrs	r3, r3, #4
 8004348:	60fb      	str	r3, [r7, #12]
        break;
 800434a:	e012      	b.n	8004372 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	095b      	lsrs	r3, r3, #5
 8004350:	60fb      	str	r3, [r7, #12]
        break;
 8004352:	e00e      	b.n	8004372 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	099b      	lsrs	r3, r3, #6
 8004358:	60fb      	str	r3, [r7, #12]
        break;
 800435a:	e00a      	b.n	8004372 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	09db      	lsrs	r3, r3, #7
 8004360:	60fb      	str	r3, [r7, #12]
        break;
 8004362:	e006      	b.n	8004372 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	0a1b      	lsrs	r3, r3, #8
 8004368:	60fb      	str	r3, [r7, #12]
        break;
 800436a:	e002      	b.n	8004372 <ADC_ConfigureBoostMode+0x146>
        break;
 800436c:	bf00      	nop
 800436e:	e000      	b.n	8004372 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004370:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004372:	f7fe fa1b 	bl	80027ac <HAL_GetREVID>
 8004376:	4603      	mov	r3, r0
 8004378:	f241 0203 	movw	r2, #4099	; 0x1003
 800437c:	4293      	cmp	r3, r2
 800437e:	d815      	bhi.n	80043ac <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4a2b      	ldr	r2, [pc, #172]	; (8004430 <ADC_ConfigureBoostMode+0x204>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d908      	bls.n	800439a <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689a      	ldr	r2, [r3, #8]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004396:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004398:	e03e      	b.n	8004418 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043a8:	609a      	str	r2, [r3, #8]
}
 80043aa:	e035      	b.n	8004418 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	085b      	lsrs	r3, r3, #1
 80043b0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4a1f      	ldr	r2, [pc, #124]	; (8004434 <ADC_ConfigureBoostMode+0x208>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d808      	bhi.n	80043cc <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80043c8:	609a      	str	r2, [r3, #8]
}
 80043ca:	e025      	b.n	8004418 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4a1a      	ldr	r2, [pc, #104]	; (8004438 <ADC_ConfigureBoostMode+0x20c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d80a      	bhi.n	80043ea <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043e6:	609a      	str	r2, [r3, #8]
}
 80043e8:	e016      	b.n	8004418 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	4a13      	ldr	r2, [pc, #76]	; (800443c <ADC_ConfigureBoostMode+0x210>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d80a      	bhi.n	8004408 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004404:	609a      	str	r2, [r3, #8]
}
 8004406:	e007      	b.n	8004418 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004416:	609a      	str	r2, [r3, #8]
}
 8004418:	bf00      	nop
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40022000 	.word	0x40022000
 8004424:	40022100 	.word	0x40022100
 8004428:	40022300 	.word	0x40022300
 800442c:	58026300 	.word	0x58026300
 8004430:	01312d00 	.word	0x01312d00
 8004434:	005f5e10 	.word	0x005f5e10
 8004438:	00bebc20 	.word	0x00bebc20
 800443c:	017d7840 	.word	0x017d7840

08004440 <LL_ADC_IsEnabled>:
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b01      	cmp	r3, #1
 8004452:	d101      	bne.n	8004458 <LL_ADC_IsEnabled+0x18>
 8004454:	2301      	movs	r3, #1
 8004456:	e000      	b.n	800445a <LL_ADC_IsEnabled+0x1a>
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <LL_ADC_REG_IsConversionOngoing>:
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 0304 	and.w	r3, r3, #4
 8004476:	2b04      	cmp	r3, #4
 8004478:	d101      	bne.n	800447e <LL_ADC_REG_IsConversionOngoing+0x18>
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80044f0:	b590      	push	{r4, r7, lr}
 80044f2:	b09f      	sub	sp, #124	; 0x7c
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004506:	2b01      	cmp	r3, #1
 8004508:	d101      	bne.n	800450e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800450a:	2302      	movs	r3, #2
 800450c:	e0be      	b.n	800468c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004516:	2300      	movs	r3, #0
 8004518:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800451a:	2300      	movs	r3, #0
 800451c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a5c      	ldr	r2, [pc, #368]	; (8004694 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d102      	bne.n	800452e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004528:	4b5b      	ldr	r3, [pc, #364]	; (8004698 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800452a:	60bb      	str	r3, [r7, #8]
 800452c:	e001      	b.n	8004532 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800452e:	2300      	movs	r3, #0
 8004530:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10b      	bne.n	8004550 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453c:	f043 0220 	orr.w	r2, r3, #32
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e09d      	b.n	800468c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff ff87 	bl	8004466 <LL_ADC_REG_IsConversionOngoing>
 8004558:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff ff81 	bl	8004466 <LL_ADC_REG_IsConversionOngoing>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d17f      	bne.n	800466a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800456a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800456c:	2b00      	cmp	r3, #0
 800456e:	d17c      	bne.n	800466a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a47      	ldr	r2, [pc, #284]	; (8004694 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d004      	beq.n	8004584 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a46      	ldr	r2, [pc, #280]	; (8004698 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d101      	bne.n	8004588 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004584:	4b45      	ldr	r3, [pc, #276]	; (800469c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004586:	e000      	b.n	800458a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004588:	4b45      	ldr	r3, [pc, #276]	; (80046a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800458a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d039      	beq.n	8004608 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	431a      	orrs	r2, r3
 80045a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045a4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a3a      	ldr	r2, [pc, #232]	; (8004694 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d004      	beq.n	80045ba <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a38      	ldr	r2, [pc, #224]	; (8004698 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d10e      	bne.n	80045d8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80045ba:	4836      	ldr	r0, [pc, #216]	; (8004694 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80045bc:	f7ff ff40 	bl	8004440 <LL_ADC_IsEnabled>
 80045c0:	4604      	mov	r4, r0
 80045c2:	4835      	ldr	r0, [pc, #212]	; (8004698 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80045c4:	f7ff ff3c 	bl	8004440 <LL_ADC_IsEnabled>
 80045c8:	4603      	mov	r3, r0
 80045ca:	4323      	orrs	r3, r4
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	bf0c      	ite	eq
 80045d0:	2301      	moveq	r3, #1
 80045d2:	2300      	movne	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	e008      	b.n	80045ea <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80045d8:	4832      	ldr	r0, [pc, #200]	; (80046a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80045da:	f7ff ff31 	bl	8004440 <LL_ADC_IsEnabled>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	bf0c      	ite	eq
 80045e4:	2301      	moveq	r3, #1
 80045e6:	2300      	movne	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d047      	beq.n	800467e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80045ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	4b2d      	ldr	r3, [pc, #180]	; (80046a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80045f4:	4013      	ands	r3, r2
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	6811      	ldr	r1, [r2, #0]
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	6892      	ldr	r2, [r2, #8]
 80045fe:	430a      	orrs	r2, r1
 8004600:	431a      	orrs	r2, r3
 8004602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004604:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004606:	e03a      	b.n	800467e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004612:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a1e      	ldr	r2, [pc, #120]	; (8004694 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d004      	beq.n	8004628 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a1d      	ldr	r2, [pc, #116]	; (8004698 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d10e      	bne.n	8004646 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004628:	481a      	ldr	r0, [pc, #104]	; (8004694 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800462a:	f7ff ff09 	bl	8004440 <LL_ADC_IsEnabled>
 800462e:	4604      	mov	r4, r0
 8004630:	4819      	ldr	r0, [pc, #100]	; (8004698 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004632:	f7ff ff05 	bl	8004440 <LL_ADC_IsEnabled>
 8004636:	4603      	mov	r3, r0
 8004638:	4323      	orrs	r3, r4
 800463a:	2b00      	cmp	r3, #0
 800463c:	bf0c      	ite	eq
 800463e:	2301      	moveq	r3, #1
 8004640:	2300      	movne	r3, #0
 8004642:	b2db      	uxtb	r3, r3
 8004644:	e008      	b.n	8004658 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004646:	4817      	ldr	r0, [pc, #92]	; (80046a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004648:	f7ff fefa 	bl	8004440 <LL_ADC_IsEnabled>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	bf0c      	ite	eq
 8004652:	2301      	moveq	r3, #1
 8004654:	2300      	movne	r3, #0
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	d010      	beq.n	800467e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800465c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	4b11      	ldr	r3, [pc, #68]	; (80046a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004662:	4013      	ands	r3, r2
 8004664:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004666:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004668:	e009      	b.n	800467e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466e:	f043 0220 	orr.w	r2, r3, #32
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800467c:	e000      	b.n	8004680 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800467e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004688:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800468c:	4618      	mov	r0, r3
 800468e:	377c      	adds	r7, #124	; 0x7c
 8004690:	46bd      	mov	sp, r7
 8004692:	bd90      	pop	{r4, r7, pc}
 8004694:	40022000 	.word	0x40022000
 8004698:	40022100 	.word	0x40022100
 800469c:	40022300 	.word	0x40022300
 80046a0:	58026300 	.word	0x58026300
 80046a4:	58026000 	.word	0x58026000
 80046a8:	fffff0e0 	.word	0xfffff0e0

080046ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046bc:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <__NVIC_SetPriorityGrouping+0x40>)
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046c8:	4013      	ands	r3, r2
 80046ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80046d4:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <__NVIC_SetPriorityGrouping+0x44>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046da:	4a04      	ldr	r2, [pc, #16]	; (80046ec <__NVIC_SetPriorityGrouping+0x40>)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	60d3      	str	r3, [r2, #12]
}
 80046e0:	bf00      	nop
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	e000ed00 	.word	0xe000ed00
 80046f0:	05fa0000 	.word	0x05fa0000

080046f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046f8:	4b04      	ldr	r3, [pc, #16]	; (800470c <__NVIC_GetPriorityGrouping+0x18>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	0a1b      	lsrs	r3, r3, #8
 80046fe:	f003 0307 	and.w	r3, r3, #7
}
 8004702:	4618      	mov	r0, r3
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	e000ed00 	.word	0xe000ed00

08004710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	4603      	mov	r3, r0
 8004718:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800471a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800471e:	2b00      	cmp	r3, #0
 8004720:	db0b      	blt.n	800473a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004722:	88fb      	ldrh	r3, [r7, #6]
 8004724:	f003 021f 	and.w	r2, r3, #31
 8004728:	4907      	ldr	r1, [pc, #28]	; (8004748 <__NVIC_EnableIRQ+0x38>)
 800472a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800472e:	095b      	lsrs	r3, r3, #5
 8004730:	2001      	movs	r0, #1
 8004732:	fa00 f202 	lsl.w	r2, r0, r2
 8004736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	e000e100 	.word	0xe000e100

0800474c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	4603      	mov	r3, r0
 8004754:	6039      	str	r1, [r7, #0]
 8004756:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004758:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800475c:	2b00      	cmp	r3, #0
 800475e:	db0a      	blt.n	8004776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	b2da      	uxtb	r2, r3
 8004764:	490c      	ldr	r1, [pc, #48]	; (8004798 <__NVIC_SetPriority+0x4c>)
 8004766:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800476a:	0112      	lsls	r2, r2, #4
 800476c:	b2d2      	uxtb	r2, r2
 800476e:	440b      	add	r3, r1
 8004770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004774:	e00a      	b.n	800478c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	b2da      	uxtb	r2, r3
 800477a:	4908      	ldr	r1, [pc, #32]	; (800479c <__NVIC_SetPriority+0x50>)
 800477c:	88fb      	ldrh	r3, [r7, #6]
 800477e:	f003 030f 	and.w	r3, r3, #15
 8004782:	3b04      	subs	r3, #4
 8004784:	0112      	lsls	r2, r2, #4
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	440b      	add	r3, r1
 800478a:	761a      	strb	r2, [r3, #24]
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	e000e100 	.word	0xe000e100
 800479c:	e000ed00 	.word	0xe000ed00

080047a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b089      	sub	sp, #36	; 0x24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	f1c3 0307 	rsb	r3, r3, #7
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	bf28      	it	cs
 80047be:	2304      	movcs	r3, #4
 80047c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	3304      	adds	r3, #4
 80047c6:	2b06      	cmp	r3, #6
 80047c8:	d902      	bls.n	80047d0 <NVIC_EncodePriority+0x30>
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	3b03      	subs	r3, #3
 80047ce:	e000      	b.n	80047d2 <NVIC_EncodePriority+0x32>
 80047d0:	2300      	movs	r3, #0
 80047d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047d4:	f04f 32ff 	mov.w	r2, #4294967295
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	fa02 f303 	lsl.w	r3, r2, r3
 80047de:	43da      	mvns	r2, r3
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	401a      	ands	r2, r3
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047e8:	f04f 31ff 	mov.w	r1, #4294967295
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	fa01 f303 	lsl.w	r3, r1, r3
 80047f2:	43d9      	mvns	r1, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047f8:	4313      	orrs	r3, r2
         );
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3724      	adds	r7, #36	; 0x24
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
	...

08004808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3b01      	subs	r3, #1
 8004814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004818:	d301      	bcc.n	800481e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800481a:	2301      	movs	r3, #1
 800481c:	e00f      	b.n	800483e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800481e:	4a0a      	ldr	r2, [pc, #40]	; (8004848 <SysTick_Config+0x40>)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3b01      	subs	r3, #1
 8004824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004826:	210f      	movs	r1, #15
 8004828:	f04f 30ff 	mov.w	r0, #4294967295
 800482c:	f7ff ff8e 	bl	800474c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004830:	4b05      	ldr	r3, [pc, #20]	; (8004848 <SysTick_Config+0x40>)
 8004832:	2200      	movs	r2, #0
 8004834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004836:	4b04      	ldr	r3, [pc, #16]	; (8004848 <SysTick_Config+0x40>)
 8004838:	2207      	movs	r2, #7
 800483a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	e000e010 	.word	0xe000e010

0800484c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff ff29 	bl	80046ac <__NVIC_SetPriorityGrouping>
}
 800485a:	bf00      	nop
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b086      	sub	sp, #24
 8004866:	af00      	add	r7, sp, #0
 8004868:	4603      	mov	r3, r0
 800486a:	60b9      	str	r1, [r7, #8]
 800486c:	607a      	str	r2, [r7, #4]
 800486e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004870:	f7ff ff40 	bl	80046f4 <__NVIC_GetPriorityGrouping>
 8004874:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	68b9      	ldr	r1, [r7, #8]
 800487a:	6978      	ldr	r0, [r7, #20]
 800487c:	f7ff ff90 	bl	80047a0 <NVIC_EncodePriority>
 8004880:	4602      	mov	r2, r0
 8004882:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004886:	4611      	mov	r1, r2
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff ff5f 	bl	800474c <__NVIC_SetPriority>
}
 800488e:	bf00      	nop
 8004890:	3718      	adds	r7, #24
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b082      	sub	sp, #8
 800489a:	af00      	add	r7, sp, #0
 800489c:	4603      	mov	r3, r0
 800489e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7ff ff33 	bl	8004710 <__NVIC_EnableIRQ>
}
 80048aa:	bf00      	nop
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b082      	sub	sp, #8
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7ff ffa4 	bl	8004808 <SysTick_Config>
 80048c0:	4603      	mov	r3, r0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
	...

080048cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80048d4:	f7fd ff3a 	bl	800274c <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e316      	b.n	8004f12 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a66      	ldr	r2, [pc, #408]	; (8004a84 <HAL_DMA_Init+0x1b8>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d04a      	beq.n	8004984 <HAL_DMA_Init+0xb8>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a65      	ldr	r2, [pc, #404]	; (8004a88 <HAL_DMA_Init+0x1bc>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d045      	beq.n	8004984 <HAL_DMA_Init+0xb8>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a63      	ldr	r2, [pc, #396]	; (8004a8c <HAL_DMA_Init+0x1c0>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d040      	beq.n	8004984 <HAL_DMA_Init+0xb8>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a62      	ldr	r2, [pc, #392]	; (8004a90 <HAL_DMA_Init+0x1c4>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d03b      	beq.n	8004984 <HAL_DMA_Init+0xb8>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a60      	ldr	r2, [pc, #384]	; (8004a94 <HAL_DMA_Init+0x1c8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d036      	beq.n	8004984 <HAL_DMA_Init+0xb8>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a5f      	ldr	r2, [pc, #380]	; (8004a98 <HAL_DMA_Init+0x1cc>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d031      	beq.n	8004984 <HAL_DMA_Init+0xb8>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a5d      	ldr	r2, [pc, #372]	; (8004a9c <HAL_DMA_Init+0x1d0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d02c      	beq.n	8004984 <HAL_DMA_Init+0xb8>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a5c      	ldr	r2, [pc, #368]	; (8004aa0 <HAL_DMA_Init+0x1d4>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d027      	beq.n	8004984 <HAL_DMA_Init+0xb8>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a5a      	ldr	r2, [pc, #360]	; (8004aa4 <HAL_DMA_Init+0x1d8>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d022      	beq.n	8004984 <HAL_DMA_Init+0xb8>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a59      	ldr	r2, [pc, #356]	; (8004aa8 <HAL_DMA_Init+0x1dc>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d01d      	beq.n	8004984 <HAL_DMA_Init+0xb8>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a57      	ldr	r2, [pc, #348]	; (8004aac <HAL_DMA_Init+0x1e0>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d018      	beq.n	8004984 <HAL_DMA_Init+0xb8>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a56      	ldr	r2, [pc, #344]	; (8004ab0 <HAL_DMA_Init+0x1e4>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d013      	beq.n	8004984 <HAL_DMA_Init+0xb8>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a54      	ldr	r2, [pc, #336]	; (8004ab4 <HAL_DMA_Init+0x1e8>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d00e      	beq.n	8004984 <HAL_DMA_Init+0xb8>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a53      	ldr	r2, [pc, #332]	; (8004ab8 <HAL_DMA_Init+0x1ec>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d009      	beq.n	8004984 <HAL_DMA_Init+0xb8>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a51      	ldr	r2, [pc, #324]	; (8004abc <HAL_DMA_Init+0x1f0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d004      	beq.n	8004984 <HAL_DMA_Init+0xb8>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a50      	ldr	r2, [pc, #320]	; (8004ac0 <HAL_DMA_Init+0x1f4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d101      	bne.n	8004988 <HAL_DMA_Init+0xbc>
 8004984:	2301      	movs	r3, #1
 8004986:	e000      	b.n	800498a <HAL_DMA_Init+0xbe>
 8004988:	2300      	movs	r3, #0
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 813b 	beq.w	8004c06 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a37      	ldr	r2, [pc, #220]	; (8004a84 <HAL_DMA_Init+0x1b8>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d04a      	beq.n	8004a40 <HAL_DMA_Init+0x174>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a36      	ldr	r2, [pc, #216]	; (8004a88 <HAL_DMA_Init+0x1bc>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d045      	beq.n	8004a40 <HAL_DMA_Init+0x174>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a34      	ldr	r2, [pc, #208]	; (8004a8c <HAL_DMA_Init+0x1c0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d040      	beq.n	8004a40 <HAL_DMA_Init+0x174>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a33      	ldr	r2, [pc, #204]	; (8004a90 <HAL_DMA_Init+0x1c4>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d03b      	beq.n	8004a40 <HAL_DMA_Init+0x174>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a31      	ldr	r2, [pc, #196]	; (8004a94 <HAL_DMA_Init+0x1c8>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d036      	beq.n	8004a40 <HAL_DMA_Init+0x174>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a30      	ldr	r2, [pc, #192]	; (8004a98 <HAL_DMA_Init+0x1cc>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d031      	beq.n	8004a40 <HAL_DMA_Init+0x174>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a2e      	ldr	r2, [pc, #184]	; (8004a9c <HAL_DMA_Init+0x1d0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d02c      	beq.n	8004a40 <HAL_DMA_Init+0x174>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a2d      	ldr	r2, [pc, #180]	; (8004aa0 <HAL_DMA_Init+0x1d4>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d027      	beq.n	8004a40 <HAL_DMA_Init+0x174>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a2b      	ldr	r2, [pc, #172]	; (8004aa4 <HAL_DMA_Init+0x1d8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d022      	beq.n	8004a40 <HAL_DMA_Init+0x174>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a2a      	ldr	r2, [pc, #168]	; (8004aa8 <HAL_DMA_Init+0x1dc>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d01d      	beq.n	8004a40 <HAL_DMA_Init+0x174>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a28      	ldr	r2, [pc, #160]	; (8004aac <HAL_DMA_Init+0x1e0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d018      	beq.n	8004a40 <HAL_DMA_Init+0x174>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a27      	ldr	r2, [pc, #156]	; (8004ab0 <HAL_DMA_Init+0x1e4>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d013      	beq.n	8004a40 <HAL_DMA_Init+0x174>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a25      	ldr	r2, [pc, #148]	; (8004ab4 <HAL_DMA_Init+0x1e8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00e      	beq.n	8004a40 <HAL_DMA_Init+0x174>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a24      	ldr	r2, [pc, #144]	; (8004ab8 <HAL_DMA_Init+0x1ec>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d009      	beq.n	8004a40 <HAL_DMA_Init+0x174>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a22      	ldr	r2, [pc, #136]	; (8004abc <HAL_DMA_Init+0x1f0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d004      	beq.n	8004a40 <HAL_DMA_Init+0x174>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a21      	ldr	r2, [pc, #132]	; (8004ac0 <HAL_DMA_Init+0x1f4>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d108      	bne.n	8004a52 <HAL_DMA_Init+0x186>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0201 	bic.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	e007      	b.n	8004a62 <HAL_DMA_Init+0x196>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0201 	bic.w	r2, r2, #1
 8004a60:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a62:	e02f      	b.n	8004ac4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a64:	f7fd fe72 	bl	800274c <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b05      	cmp	r3, #5
 8004a70:	d928      	bls.n	8004ac4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2220      	movs	r2, #32
 8004a76:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2203      	movs	r2, #3
 8004a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e246      	b.n	8004f12 <HAL_DMA_Init+0x646>
 8004a84:	40020010 	.word	0x40020010
 8004a88:	40020028 	.word	0x40020028
 8004a8c:	40020040 	.word	0x40020040
 8004a90:	40020058 	.word	0x40020058
 8004a94:	40020070 	.word	0x40020070
 8004a98:	40020088 	.word	0x40020088
 8004a9c:	400200a0 	.word	0x400200a0
 8004aa0:	400200b8 	.word	0x400200b8
 8004aa4:	40020410 	.word	0x40020410
 8004aa8:	40020428 	.word	0x40020428
 8004aac:	40020440 	.word	0x40020440
 8004ab0:	40020458 	.word	0x40020458
 8004ab4:	40020470 	.word	0x40020470
 8004ab8:	40020488 	.word	0x40020488
 8004abc:	400204a0 	.word	0x400204a0
 8004ac0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1c8      	bne.n	8004a64 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	4b83      	ldr	r3, [pc, #524]	; (8004cec <HAL_DMA_Init+0x420>)
 8004ade:	4013      	ands	r3, r2
 8004ae0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004aea:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004af6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b02:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d107      	bne.n	8004b28 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b20:	4313      	orrs	r3, r2
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004b28:	4b71      	ldr	r3, [pc, #452]	; (8004cf0 <HAL_DMA_Init+0x424>)
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	4b71      	ldr	r3, [pc, #452]	; (8004cf4 <HAL_DMA_Init+0x428>)
 8004b2e:	4013      	ands	r3, r2
 8004b30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b34:	d328      	bcc.n	8004b88 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2b28      	cmp	r3, #40	; 0x28
 8004b3c:	d903      	bls.n	8004b46 <HAL_DMA_Init+0x27a>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2b2e      	cmp	r3, #46	; 0x2e
 8004b44:	d917      	bls.n	8004b76 <HAL_DMA_Init+0x2aa>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b3e      	cmp	r3, #62	; 0x3e
 8004b4c:	d903      	bls.n	8004b56 <HAL_DMA_Init+0x28a>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2b42      	cmp	r3, #66	; 0x42
 8004b54:	d90f      	bls.n	8004b76 <HAL_DMA_Init+0x2aa>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b46      	cmp	r3, #70	; 0x46
 8004b5c:	d903      	bls.n	8004b66 <HAL_DMA_Init+0x29a>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2b48      	cmp	r3, #72	; 0x48
 8004b64:	d907      	bls.n	8004b76 <HAL_DMA_Init+0x2aa>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	2b4e      	cmp	r3, #78	; 0x4e
 8004b6c:	d905      	bls.n	8004b7a <HAL_DMA_Init+0x2ae>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b52      	cmp	r3, #82	; 0x52
 8004b74:	d801      	bhi.n	8004b7a <HAL_DMA_Init+0x2ae>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e000      	b.n	8004b7c <HAL_DMA_Init+0x2b0>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d003      	beq.n	8004b88 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b86:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f023 0307 	bic.w	r3, r3, #7
 8004b9e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d117      	bne.n	8004be2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00e      	beq.n	8004be2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f001 f9b9 	bl	8005f3c <DMA_CheckFifoParam>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d008      	beq.n	8004be2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2240      	movs	r2, #64	; 0x40
 8004bd4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e197      	b.n	8004f12 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f001 f8f4 	bl	8005dd8 <DMA_CalcBaseAndBitshift>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf8:	f003 031f 	and.w	r3, r3, #31
 8004bfc:	223f      	movs	r2, #63	; 0x3f
 8004bfe:	409a      	lsls	r2, r3
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	609a      	str	r2, [r3, #8]
 8004c04:	e0cd      	b.n	8004da2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a3b      	ldr	r2, [pc, #236]	; (8004cf8 <HAL_DMA_Init+0x42c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d022      	beq.n	8004c56 <HAL_DMA_Init+0x38a>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a39      	ldr	r2, [pc, #228]	; (8004cfc <HAL_DMA_Init+0x430>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d01d      	beq.n	8004c56 <HAL_DMA_Init+0x38a>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a38      	ldr	r2, [pc, #224]	; (8004d00 <HAL_DMA_Init+0x434>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d018      	beq.n	8004c56 <HAL_DMA_Init+0x38a>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a36      	ldr	r2, [pc, #216]	; (8004d04 <HAL_DMA_Init+0x438>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d013      	beq.n	8004c56 <HAL_DMA_Init+0x38a>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a35      	ldr	r2, [pc, #212]	; (8004d08 <HAL_DMA_Init+0x43c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d00e      	beq.n	8004c56 <HAL_DMA_Init+0x38a>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a33      	ldr	r2, [pc, #204]	; (8004d0c <HAL_DMA_Init+0x440>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d009      	beq.n	8004c56 <HAL_DMA_Init+0x38a>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a32      	ldr	r2, [pc, #200]	; (8004d10 <HAL_DMA_Init+0x444>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d004      	beq.n	8004c56 <HAL_DMA_Init+0x38a>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a30      	ldr	r2, [pc, #192]	; (8004d14 <HAL_DMA_Init+0x448>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d101      	bne.n	8004c5a <HAL_DMA_Init+0x38e>
 8004c56:	2301      	movs	r3, #1
 8004c58:	e000      	b.n	8004c5c <HAL_DMA_Init+0x390>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 8097 	beq.w	8004d90 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a24      	ldr	r2, [pc, #144]	; (8004cf8 <HAL_DMA_Init+0x42c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d021      	beq.n	8004cb0 <HAL_DMA_Init+0x3e4>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a22      	ldr	r2, [pc, #136]	; (8004cfc <HAL_DMA_Init+0x430>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d01c      	beq.n	8004cb0 <HAL_DMA_Init+0x3e4>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a21      	ldr	r2, [pc, #132]	; (8004d00 <HAL_DMA_Init+0x434>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d017      	beq.n	8004cb0 <HAL_DMA_Init+0x3e4>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a1f      	ldr	r2, [pc, #124]	; (8004d04 <HAL_DMA_Init+0x438>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d012      	beq.n	8004cb0 <HAL_DMA_Init+0x3e4>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a1e      	ldr	r2, [pc, #120]	; (8004d08 <HAL_DMA_Init+0x43c>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d00d      	beq.n	8004cb0 <HAL_DMA_Init+0x3e4>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a1c      	ldr	r2, [pc, #112]	; (8004d0c <HAL_DMA_Init+0x440>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d008      	beq.n	8004cb0 <HAL_DMA_Init+0x3e4>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a1b      	ldr	r2, [pc, #108]	; (8004d10 <HAL_DMA_Init+0x444>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d003      	beq.n	8004cb0 <HAL_DMA_Init+0x3e4>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a19      	ldr	r2, [pc, #100]	; (8004d14 <HAL_DMA_Init+0x448>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	4b12      	ldr	r3, [pc, #72]	; (8004d18 <HAL_DMA_Init+0x44c>)
 8004cce:	4013      	ands	r3, r2
 8004cd0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	2b40      	cmp	r3, #64	; 0x40
 8004cd8:	d020      	beq.n	8004d1c <HAL_DMA_Init+0x450>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	2b80      	cmp	r3, #128	; 0x80
 8004ce0:	d102      	bne.n	8004ce8 <HAL_DMA_Init+0x41c>
 8004ce2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ce6:	e01a      	b.n	8004d1e <HAL_DMA_Init+0x452>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	e018      	b.n	8004d1e <HAL_DMA_Init+0x452>
 8004cec:	fe10803f 	.word	0xfe10803f
 8004cf0:	5c001000 	.word	0x5c001000
 8004cf4:	ffff0000 	.word	0xffff0000
 8004cf8:	58025408 	.word	0x58025408
 8004cfc:	5802541c 	.word	0x5802541c
 8004d00:	58025430 	.word	0x58025430
 8004d04:	58025444 	.word	0x58025444
 8004d08:	58025458 	.word	0x58025458
 8004d0c:	5802546c 	.word	0x5802546c
 8004d10:	58025480 	.word	0x58025480
 8004d14:	58025494 	.word	0x58025494
 8004d18:	fffe000f 	.word	0xfffe000f
 8004d1c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	68d2      	ldr	r2, [r2, #12]
 8004d22:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004d24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004d2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004d34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004d3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004d44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004d4c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	461a      	mov	r2, r3
 8004d62:	4b6e      	ldr	r3, [pc, #440]	; (8004f1c <HAL_DMA_Init+0x650>)
 8004d64:	4413      	add	r3, r2
 8004d66:	4a6e      	ldr	r2, [pc, #440]	; (8004f20 <HAL_DMA_Init+0x654>)
 8004d68:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6c:	091b      	lsrs	r3, r3, #4
 8004d6e:	009a      	lsls	r2, r3, #2
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f001 f82f 	bl	8005dd8 <DMA_CalcBaseAndBitshift>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d82:	f003 031f 	and.w	r3, r3, #31
 8004d86:	2201      	movs	r2, #1
 8004d88:	409a      	lsls	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	605a      	str	r2, [r3, #4]
 8004d8e:	e008      	b.n	8004da2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2240      	movs	r2, #64	; 0x40
 8004d94:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2203      	movs	r2, #3
 8004d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e0b7      	b.n	8004f12 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a5f      	ldr	r2, [pc, #380]	; (8004f24 <HAL_DMA_Init+0x658>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d072      	beq.n	8004e92 <HAL_DMA_Init+0x5c6>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a5d      	ldr	r2, [pc, #372]	; (8004f28 <HAL_DMA_Init+0x65c>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d06d      	beq.n	8004e92 <HAL_DMA_Init+0x5c6>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a5c      	ldr	r2, [pc, #368]	; (8004f2c <HAL_DMA_Init+0x660>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d068      	beq.n	8004e92 <HAL_DMA_Init+0x5c6>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a5a      	ldr	r2, [pc, #360]	; (8004f30 <HAL_DMA_Init+0x664>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d063      	beq.n	8004e92 <HAL_DMA_Init+0x5c6>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a59      	ldr	r2, [pc, #356]	; (8004f34 <HAL_DMA_Init+0x668>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d05e      	beq.n	8004e92 <HAL_DMA_Init+0x5c6>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a57      	ldr	r2, [pc, #348]	; (8004f38 <HAL_DMA_Init+0x66c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d059      	beq.n	8004e92 <HAL_DMA_Init+0x5c6>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a56      	ldr	r2, [pc, #344]	; (8004f3c <HAL_DMA_Init+0x670>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d054      	beq.n	8004e92 <HAL_DMA_Init+0x5c6>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a54      	ldr	r2, [pc, #336]	; (8004f40 <HAL_DMA_Init+0x674>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d04f      	beq.n	8004e92 <HAL_DMA_Init+0x5c6>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a53      	ldr	r2, [pc, #332]	; (8004f44 <HAL_DMA_Init+0x678>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d04a      	beq.n	8004e92 <HAL_DMA_Init+0x5c6>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a51      	ldr	r2, [pc, #324]	; (8004f48 <HAL_DMA_Init+0x67c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d045      	beq.n	8004e92 <HAL_DMA_Init+0x5c6>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a50      	ldr	r2, [pc, #320]	; (8004f4c <HAL_DMA_Init+0x680>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d040      	beq.n	8004e92 <HAL_DMA_Init+0x5c6>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a4e      	ldr	r2, [pc, #312]	; (8004f50 <HAL_DMA_Init+0x684>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d03b      	beq.n	8004e92 <HAL_DMA_Init+0x5c6>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a4d      	ldr	r2, [pc, #308]	; (8004f54 <HAL_DMA_Init+0x688>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d036      	beq.n	8004e92 <HAL_DMA_Init+0x5c6>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a4b      	ldr	r2, [pc, #300]	; (8004f58 <HAL_DMA_Init+0x68c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d031      	beq.n	8004e92 <HAL_DMA_Init+0x5c6>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a4a      	ldr	r2, [pc, #296]	; (8004f5c <HAL_DMA_Init+0x690>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d02c      	beq.n	8004e92 <HAL_DMA_Init+0x5c6>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a48      	ldr	r2, [pc, #288]	; (8004f60 <HAL_DMA_Init+0x694>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d027      	beq.n	8004e92 <HAL_DMA_Init+0x5c6>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a47      	ldr	r2, [pc, #284]	; (8004f64 <HAL_DMA_Init+0x698>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d022      	beq.n	8004e92 <HAL_DMA_Init+0x5c6>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a45      	ldr	r2, [pc, #276]	; (8004f68 <HAL_DMA_Init+0x69c>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d01d      	beq.n	8004e92 <HAL_DMA_Init+0x5c6>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a44      	ldr	r2, [pc, #272]	; (8004f6c <HAL_DMA_Init+0x6a0>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d018      	beq.n	8004e92 <HAL_DMA_Init+0x5c6>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a42      	ldr	r2, [pc, #264]	; (8004f70 <HAL_DMA_Init+0x6a4>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d013      	beq.n	8004e92 <HAL_DMA_Init+0x5c6>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a41      	ldr	r2, [pc, #260]	; (8004f74 <HAL_DMA_Init+0x6a8>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d00e      	beq.n	8004e92 <HAL_DMA_Init+0x5c6>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a3f      	ldr	r2, [pc, #252]	; (8004f78 <HAL_DMA_Init+0x6ac>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d009      	beq.n	8004e92 <HAL_DMA_Init+0x5c6>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a3e      	ldr	r2, [pc, #248]	; (8004f7c <HAL_DMA_Init+0x6b0>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d004      	beq.n	8004e92 <HAL_DMA_Init+0x5c6>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a3c      	ldr	r2, [pc, #240]	; (8004f80 <HAL_DMA_Init+0x6b4>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d101      	bne.n	8004e96 <HAL_DMA_Init+0x5ca>
 8004e92:	2301      	movs	r3, #1
 8004e94:	e000      	b.n	8004e98 <HAL_DMA_Init+0x5cc>
 8004e96:	2300      	movs	r3, #0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d032      	beq.n	8004f02 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f001 f8c9 	bl	8006034 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	2b80      	cmp	r3, #128	; 0x80
 8004ea8:	d102      	bne.n	8004eb0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb8:	b2d2      	uxtb	r2, r2
 8004eba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004ec4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d010      	beq.n	8004ef0 <HAL_DMA_Init+0x624>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	2b08      	cmp	r3, #8
 8004ed4:	d80c      	bhi.n	8004ef0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f001 f946 	bl	8006168 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004eec:	605a      	str	r2, [r3, #4]
 8004eee:	e008      	b.n	8004f02 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3718      	adds	r7, #24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	a7fdabf8 	.word	0xa7fdabf8
 8004f20:	cccccccd 	.word	0xcccccccd
 8004f24:	40020010 	.word	0x40020010
 8004f28:	40020028 	.word	0x40020028
 8004f2c:	40020040 	.word	0x40020040
 8004f30:	40020058 	.word	0x40020058
 8004f34:	40020070 	.word	0x40020070
 8004f38:	40020088 	.word	0x40020088
 8004f3c:	400200a0 	.word	0x400200a0
 8004f40:	400200b8 	.word	0x400200b8
 8004f44:	40020410 	.word	0x40020410
 8004f48:	40020428 	.word	0x40020428
 8004f4c:	40020440 	.word	0x40020440
 8004f50:	40020458 	.word	0x40020458
 8004f54:	40020470 	.word	0x40020470
 8004f58:	40020488 	.word	0x40020488
 8004f5c:	400204a0 	.word	0x400204a0
 8004f60:	400204b8 	.word	0x400204b8
 8004f64:	58025408 	.word	0x58025408
 8004f68:	5802541c 	.word	0x5802541c
 8004f6c:	58025430 	.word	0x58025430
 8004f70:	58025444 	.word	0x58025444
 8004f74:	58025458 	.word	0x58025458
 8004f78:	5802546c 	.word	0x5802546c
 8004f7c:	58025480 	.word	0x58025480
 8004f80:	58025494 	.word	0x58025494

08004f84 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b08a      	sub	sp, #40	; 0x28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f90:	4b67      	ldr	r3, [pc, #412]	; (8005130 <HAL_DMA_IRQHandler+0x1ac>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a67      	ldr	r2, [pc, #412]	; (8005134 <HAL_DMA_IRQHandler+0x1b0>)
 8004f96:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9a:	0a9b      	lsrs	r3, r3, #10
 8004f9c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a5f      	ldr	r2, [pc, #380]	; (8005138 <HAL_DMA_IRQHandler+0x1b4>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d04a      	beq.n	8005056 <HAL_DMA_IRQHandler+0xd2>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a5d      	ldr	r2, [pc, #372]	; (800513c <HAL_DMA_IRQHandler+0x1b8>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d045      	beq.n	8005056 <HAL_DMA_IRQHandler+0xd2>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a5c      	ldr	r2, [pc, #368]	; (8005140 <HAL_DMA_IRQHandler+0x1bc>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d040      	beq.n	8005056 <HAL_DMA_IRQHandler+0xd2>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a5a      	ldr	r2, [pc, #360]	; (8005144 <HAL_DMA_IRQHandler+0x1c0>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d03b      	beq.n	8005056 <HAL_DMA_IRQHandler+0xd2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a59      	ldr	r2, [pc, #356]	; (8005148 <HAL_DMA_IRQHandler+0x1c4>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d036      	beq.n	8005056 <HAL_DMA_IRQHandler+0xd2>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a57      	ldr	r2, [pc, #348]	; (800514c <HAL_DMA_IRQHandler+0x1c8>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d031      	beq.n	8005056 <HAL_DMA_IRQHandler+0xd2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a56      	ldr	r2, [pc, #344]	; (8005150 <HAL_DMA_IRQHandler+0x1cc>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d02c      	beq.n	8005056 <HAL_DMA_IRQHandler+0xd2>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a54      	ldr	r2, [pc, #336]	; (8005154 <HAL_DMA_IRQHandler+0x1d0>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d027      	beq.n	8005056 <HAL_DMA_IRQHandler+0xd2>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a53      	ldr	r2, [pc, #332]	; (8005158 <HAL_DMA_IRQHandler+0x1d4>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d022      	beq.n	8005056 <HAL_DMA_IRQHandler+0xd2>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a51      	ldr	r2, [pc, #324]	; (800515c <HAL_DMA_IRQHandler+0x1d8>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d01d      	beq.n	8005056 <HAL_DMA_IRQHandler+0xd2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a50      	ldr	r2, [pc, #320]	; (8005160 <HAL_DMA_IRQHandler+0x1dc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d018      	beq.n	8005056 <HAL_DMA_IRQHandler+0xd2>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a4e      	ldr	r2, [pc, #312]	; (8005164 <HAL_DMA_IRQHandler+0x1e0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d013      	beq.n	8005056 <HAL_DMA_IRQHandler+0xd2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a4d      	ldr	r2, [pc, #308]	; (8005168 <HAL_DMA_IRQHandler+0x1e4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d00e      	beq.n	8005056 <HAL_DMA_IRQHandler+0xd2>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a4b      	ldr	r2, [pc, #300]	; (800516c <HAL_DMA_IRQHandler+0x1e8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d009      	beq.n	8005056 <HAL_DMA_IRQHandler+0xd2>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a4a      	ldr	r2, [pc, #296]	; (8005170 <HAL_DMA_IRQHandler+0x1ec>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d004      	beq.n	8005056 <HAL_DMA_IRQHandler+0xd2>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a48      	ldr	r2, [pc, #288]	; (8005174 <HAL_DMA_IRQHandler+0x1f0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d101      	bne.n	800505a <HAL_DMA_IRQHandler+0xd6>
 8005056:	2301      	movs	r3, #1
 8005058:	e000      	b.n	800505c <HAL_DMA_IRQHandler+0xd8>
 800505a:	2300      	movs	r3, #0
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 842b 	beq.w	80058b8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005066:	f003 031f 	and.w	r3, r3, #31
 800506a:	2208      	movs	r2, #8
 800506c:	409a      	lsls	r2, r3
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	4013      	ands	r3, r2
 8005072:	2b00      	cmp	r3, #0
 8005074:	f000 80a2 	beq.w	80051bc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a2e      	ldr	r2, [pc, #184]	; (8005138 <HAL_DMA_IRQHandler+0x1b4>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d04a      	beq.n	8005118 <HAL_DMA_IRQHandler+0x194>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a2d      	ldr	r2, [pc, #180]	; (800513c <HAL_DMA_IRQHandler+0x1b8>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d045      	beq.n	8005118 <HAL_DMA_IRQHandler+0x194>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a2b      	ldr	r2, [pc, #172]	; (8005140 <HAL_DMA_IRQHandler+0x1bc>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d040      	beq.n	8005118 <HAL_DMA_IRQHandler+0x194>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a2a      	ldr	r2, [pc, #168]	; (8005144 <HAL_DMA_IRQHandler+0x1c0>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d03b      	beq.n	8005118 <HAL_DMA_IRQHandler+0x194>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a28      	ldr	r2, [pc, #160]	; (8005148 <HAL_DMA_IRQHandler+0x1c4>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d036      	beq.n	8005118 <HAL_DMA_IRQHandler+0x194>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a27      	ldr	r2, [pc, #156]	; (800514c <HAL_DMA_IRQHandler+0x1c8>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d031      	beq.n	8005118 <HAL_DMA_IRQHandler+0x194>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a25      	ldr	r2, [pc, #148]	; (8005150 <HAL_DMA_IRQHandler+0x1cc>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d02c      	beq.n	8005118 <HAL_DMA_IRQHandler+0x194>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a24      	ldr	r2, [pc, #144]	; (8005154 <HAL_DMA_IRQHandler+0x1d0>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d027      	beq.n	8005118 <HAL_DMA_IRQHandler+0x194>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a22      	ldr	r2, [pc, #136]	; (8005158 <HAL_DMA_IRQHandler+0x1d4>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d022      	beq.n	8005118 <HAL_DMA_IRQHandler+0x194>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a21      	ldr	r2, [pc, #132]	; (800515c <HAL_DMA_IRQHandler+0x1d8>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d01d      	beq.n	8005118 <HAL_DMA_IRQHandler+0x194>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a1f      	ldr	r2, [pc, #124]	; (8005160 <HAL_DMA_IRQHandler+0x1dc>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d018      	beq.n	8005118 <HAL_DMA_IRQHandler+0x194>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a1e      	ldr	r2, [pc, #120]	; (8005164 <HAL_DMA_IRQHandler+0x1e0>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d013      	beq.n	8005118 <HAL_DMA_IRQHandler+0x194>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a1c      	ldr	r2, [pc, #112]	; (8005168 <HAL_DMA_IRQHandler+0x1e4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d00e      	beq.n	8005118 <HAL_DMA_IRQHandler+0x194>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a1b      	ldr	r2, [pc, #108]	; (800516c <HAL_DMA_IRQHandler+0x1e8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d009      	beq.n	8005118 <HAL_DMA_IRQHandler+0x194>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a19      	ldr	r2, [pc, #100]	; (8005170 <HAL_DMA_IRQHandler+0x1ec>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d004      	beq.n	8005118 <HAL_DMA_IRQHandler+0x194>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a18      	ldr	r2, [pc, #96]	; (8005174 <HAL_DMA_IRQHandler+0x1f0>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d12f      	bne.n	8005178 <HAL_DMA_IRQHandler+0x1f4>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0304 	and.w	r3, r3, #4
 8005122:	2b00      	cmp	r3, #0
 8005124:	bf14      	ite	ne
 8005126:	2301      	movne	r3, #1
 8005128:	2300      	moveq	r3, #0
 800512a:	b2db      	uxtb	r3, r3
 800512c:	e02e      	b.n	800518c <HAL_DMA_IRQHandler+0x208>
 800512e:	bf00      	nop
 8005130:	24000000 	.word	0x24000000
 8005134:	1b4e81b5 	.word	0x1b4e81b5
 8005138:	40020010 	.word	0x40020010
 800513c:	40020028 	.word	0x40020028
 8005140:	40020040 	.word	0x40020040
 8005144:	40020058 	.word	0x40020058
 8005148:	40020070 	.word	0x40020070
 800514c:	40020088 	.word	0x40020088
 8005150:	400200a0 	.word	0x400200a0
 8005154:	400200b8 	.word	0x400200b8
 8005158:	40020410 	.word	0x40020410
 800515c:	40020428 	.word	0x40020428
 8005160:	40020440 	.word	0x40020440
 8005164:	40020458 	.word	0x40020458
 8005168:	40020470 	.word	0x40020470
 800516c:	40020488 	.word	0x40020488
 8005170:	400204a0 	.word	0x400204a0
 8005174:	400204b8 	.word	0x400204b8
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b00      	cmp	r3, #0
 8005184:	bf14      	ite	ne
 8005186:	2301      	movne	r3, #1
 8005188:	2300      	moveq	r3, #0
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b00      	cmp	r3, #0
 800518e:	d015      	beq.n	80051bc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 0204 	bic.w	r2, r2, #4
 800519e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a4:	f003 031f 	and.w	r3, r3, #31
 80051a8:	2208      	movs	r2, #8
 80051aa:	409a      	lsls	r2, r3
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b4:	f043 0201 	orr.w	r2, r3, #1
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c0:	f003 031f 	and.w	r3, r3, #31
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	fa22 f303 	lsr.w	r3, r2, r3
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d06e      	beq.n	80052b0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a69      	ldr	r2, [pc, #420]	; (800537c <HAL_DMA_IRQHandler+0x3f8>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d04a      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2ee>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a67      	ldr	r2, [pc, #412]	; (8005380 <HAL_DMA_IRQHandler+0x3fc>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d045      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2ee>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a66      	ldr	r2, [pc, #408]	; (8005384 <HAL_DMA_IRQHandler+0x400>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d040      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2ee>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a64      	ldr	r2, [pc, #400]	; (8005388 <HAL_DMA_IRQHandler+0x404>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d03b      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2ee>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a63      	ldr	r2, [pc, #396]	; (800538c <HAL_DMA_IRQHandler+0x408>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d036      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2ee>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a61      	ldr	r2, [pc, #388]	; (8005390 <HAL_DMA_IRQHandler+0x40c>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d031      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2ee>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a60      	ldr	r2, [pc, #384]	; (8005394 <HAL_DMA_IRQHandler+0x410>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d02c      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2ee>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a5e      	ldr	r2, [pc, #376]	; (8005398 <HAL_DMA_IRQHandler+0x414>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d027      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2ee>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a5d      	ldr	r2, [pc, #372]	; (800539c <HAL_DMA_IRQHandler+0x418>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d022      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2ee>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a5b      	ldr	r2, [pc, #364]	; (80053a0 <HAL_DMA_IRQHandler+0x41c>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d01d      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2ee>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a5a      	ldr	r2, [pc, #360]	; (80053a4 <HAL_DMA_IRQHandler+0x420>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d018      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2ee>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a58      	ldr	r2, [pc, #352]	; (80053a8 <HAL_DMA_IRQHandler+0x424>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d013      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2ee>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a57      	ldr	r2, [pc, #348]	; (80053ac <HAL_DMA_IRQHandler+0x428>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d00e      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2ee>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a55      	ldr	r2, [pc, #340]	; (80053b0 <HAL_DMA_IRQHandler+0x42c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d009      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2ee>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a54      	ldr	r2, [pc, #336]	; (80053b4 <HAL_DMA_IRQHandler+0x430>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d004      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2ee>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a52      	ldr	r2, [pc, #328]	; (80053b8 <HAL_DMA_IRQHandler+0x434>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d10a      	bne.n	8005288 <HAL_DMA_IRQHandler+0x304>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800527c:	2b00      	cmp	r3, #0
 800527e:	bf14      	ite	ne
 8005280:	2301      	movne	r3, #1
 8005282:	2300      	moveq	r3, #0
 8005284:	b2db      	uxtb	r3, r3
 8005286:	e003      	b.n	8005290 <HAL_DMA_IRQHandler+0x30c>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2300      	movs	r3, #0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00d      	beq.n	80052b0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005298:	f003 031f 	and.w	r3, r3, #31
 800529c:	2201      	movs	r2, #1
 800529e:	409a      	lsls	r2, r3
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a8:	f043 0202 	orr.w	r2, r3, #2
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b4:	f003 031f 	and.w	r3, r3, #31
 80052b8:	2204      	movs	r2, #4
 80052ba:	409a      	lsls	r2, r3
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	4013      	ands	r3, r2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 808f 	beq.w	80053e4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a2c      	ldr	r2, [pc, #176]	; (800537c <HAL_DMA_IRQHandler+0x3f8>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d04a      	beq.n	8005366 <HAL_DMA_IRQHandler+0x3e2>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a2a      	ldr	r2, [pc, #168]	; (8005380 <HAL_DMA_IRQHandler+0x3fc>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d045      	beq.n	8005366 <HAL_DMA_IRQHandler+0x3e2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a29      	ldr	r2, [pc, #164]	; (8005384 <HAL_DMA_IRQHandler+0x400>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d040      	beq.n	8005366 <HAL_DMA_IRQHandler+0x3e2>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a27      	ldr	r2, [pc, #156]	; (8005388 <HAL_DMA_IRQHandler+0x404>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d03b      	beq.n	8005366 <HAL_DMA_IRQHandler+0x3e2>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a26      	ldr	r2, [pc, #152]	; (800538c <HAL_DMA_IRQHandler+0x408>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d036      	beq.n	8005366 <HAL_DMA_IRQHandler+0x3e2>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a24      	ldr	r2, [pc, #144]	; (8005390 <HAL_DMA_IRQHandler+0x40c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d031      	beq.n	8005366 <HAL_DMA_IRQHandler+0x3e2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a23      	ldr	r2, [pc, #140]	; (8005394 <HAL_DMA_IRQHandler+0x410>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d02c      	beq.n	8005366 <HAL_DMA_IRQHandler+0x3e2>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a21      	ldr	r2, [pc, #132]	; (8005398 <HAL_DMA_IRQHandler+0x414>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d027      	beq.n	8005366 <HAL_DMA_IRQHandler+0x3e2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a20      	ldr	r2, [pc, #128]	; (800539c <HAL_DMA_IRQHandler+0x418>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d022      	beq.n	8005366 <HAL_DMA_IRQHandler+0x3e2>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a1e      	ldr	r2, [pc, #120]	; (80053a0 <HAL_DMA_IRQHandler+0x41c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d01d      	beq.n	8005366 <HAL_DMA_IRQHandler+0x3e2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a1d      	ldr	r2, [pc, #116]	; (80053a4 <HAL_DMA_IRQHandler+0x420>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d018      	beq.n	8005366 <HAL_DMA_IRQHandler+0x3e2>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a1b      	ldr	r2, [pc, #108]	; (80053a8 <HAL_DMA_IRQHandler+0x424>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d013      	beq.n	8005366 <HAL_DMA_IRQHandler+0x3e2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a1a      	ldr	r2, [pc, #104]	; (80053ac <HAL_DMA_IRQHandler+0x428>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d00e      	beq.n	8005366 <HAL_DMA_IRQHandler+0x3e2>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a18      	ldr	r2, [pc, #96]	; (80053b0 <HAL_DMA_IRQHandler+0x42c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d009      	beq.n	8005366 <HAL_DMA_IRQHandler+0x3e2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a17      	ldr	r2, [pc, #92]	; (80053b4 <HAL_DMA_IRQHandler+0x430>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d004      	beq.n	8005366 <HAL_DMA_IRQHandler+0x3e2>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a15      	ldr	r2, [pc, #84]	; (80053b8 <HAL_DMA_IRQHandler+0x434>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d12a      	bne.n	80053bc <HAL_DMA_IRQHandler+0x438>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	bf14      	ite	ne
 8005374:	2301      	movne	r3, #1
 8005376:	2300      	moveq	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	e023      	b.n	80053c4 <HAL_DMA_IRQHandler+0x440>
 800537c:	40020010 	.word	0x40020010
 8005380:	40020028 	.word	0x40020028
 8005384:	40020040 	.word	0x40020040
 8005388:	40020058 	.word	0x40020058
 800538c:	40020070 	.word	0x40020070
 8005390:	40020088 	.word	0x40020088
 8005394:	400200a0 	.word	0x400200a0
 8005398:	400200b8 	.word	0x400200b8
 800539c:	40020410 	.word	0x40020410
 80053a0:	40020428 	.word	0x40020428
 80053a4:	40020440 	.word	0x40020440
 80053a8:	40020458 	.word	0x40020458
 80053ac:	40020470 	.word	0x40020470
 80053b0:	40020488 	.word	0x40020488
 80053b4:	400204a0 	.word	0x400204a0
 80053b8:	400204b8 	.word	0x400204b8
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2300      	movs	r3, #0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00d      	beq.n	80053e4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053cc:	f003 031f 	and.w	r3, r3, #31
 80053d0:	2204      	movs	r2, #4
 80053d2:	409a      	lsls	r2, r3
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053dc:	f043 0204 	orr.w	r2, r3, #4
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e8:	f003 031f 	and.w	r3, r3, #31
 80053ec:	2210      	movs	r2, #16
 80053ee:	409a      	lsls	r2, r3
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	4013      	ands	r3, r2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 80a6 	beq.w	8005546 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a85      	ldr	r2, [pc, #532]	; (8005614 <HAL_DMA_IRQHandler+0x690>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d04a      	beq.n	800549a <HAL_DMA_IRQHandler+0x516>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a83      	ldr	r2, [pc, #524]	; (8005618 <HAL_DMA_IRQHandler+0x694>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d045      	beq.n	800549a <HAL_DMA_IRQHandler+0x516>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a82      	ldr	r2, [pc, #520]	; (800561c <HAL_DMA_IRQHandler+0x698>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d040      	beq.n	800549a <HAL_DMA_IRQHandler+0x516>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a80      	ldr	r2, [pc, #512]	; (8005620 <HAL_DMA_IRQHandler+0x69c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d03b      	beq.n	800549a <HAL_DMA_IRQHandler+0x516>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a7f      	ldr	r2, [pc, #508]	; (8005624 <HAL_DMA_IRQHandler+0x6a0>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d036      	beq.n	800549a <HAL_DMA_IRQHandler+0x516>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a7d      	ldr	r2, [pc, #500]	; (8005628 <HAL_DMA_IRQHandler+0x6a4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d031      	beq.n	800549a <HAL_DMA_IRQHandler+0x516>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a7c      	ldr	r2, [pc, #496]	; (800562c <HAL_DMA_IRQHandler+0x6a8>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d02c      	beq.n	800549a <HAL_DMA_IRQHandler+0x516>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a7a      	ldr	r2, [pc, #488]	; (8005630 <HAL_DMA_IRQHandler+0x6ac>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d027      	beq.n	800549a <HAL_DMA_IRQHandler+0x516>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a79      	ldr	r2, [pc, #484]	; (8005634 <HAL_DMA_IRQHandler+0x6b0>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d022      	beq.n	800549a <HAL_DMA_IRQHandler+0x516>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a77      	ldr	r2, [pc, #476]	; (8005638 <HAL_DMA_IRQHandler+0x6b4>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d01d      	beq.n	800549a <HAL_DMA_IRQHandler+0x516>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a76      	ldr	r2, [pc, #472]	; (800563c <HAL_DMA_IRQHandler+0x6b8>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d018      	beq.n	800549a <HAL_DMA_IRQHandler+0x516>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a74      	ldr	r2, [pc, #464]	; (8005640 <HAL_DMA_IRQHandler+0x6bc>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d013      	beq.n	800549a <HAL_DMA_IRQHandler+0x516>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a73      	ldr	r2, [pc, #460]	; (8005644 <HAL_DMA_IRQHandler+0x6c0>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d00e      	beq.n	800549a <HAL_DMA_IRQHandler+0x516>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a71      	ldr	r2, [pc, #452]	; (8005648 <HAL_DMA_IRQHandler+0x6c4>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d009      	beq.n	800549a <HAL_DMA_IRQHandler+0x516>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a70      	ldr	r2, [pc, #448]	; (800564c <HAL_DMA_IRQHandler+0x6c8>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d004      	beq.n	800549a <HAL_DMA_IRQHandler+0x516>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a6e      	ldr	r2, [pc, #440]	; (8005650 <HAL_DMA_IRQHandler+0x6cc>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d10a      	bne.n	80054b0 <HAL_DMA_IRQHandler+0x52c>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0308 	and.w	r3, r3, #8
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	bf14      	ite	ne
 80054a8:	2301      	movne	r3, #1
 80054aa:	2300      	moveq	r3, #0
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	e009      	b.n	80054c4 <HAL_DMA_IRQHandler+0x540>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0304 	and.w	r3, r3, #4
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	bf14      	ite	ne
 80054be:	2301      	movne	r3, #1
 80054c0:	2300      	moveq	r3, #0
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d03e      	beq.n	8005546 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054cc:	f003 031f 	and.w	r3, r3, #31
 80054d0:	2210      	movs	r2, #16
 80054d2:	409a      	lsls	r2, r3
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d018      	beq.n	8005518 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d108      	bne.n	8005506 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d024      	beq.n	8005546 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	4798      	blx	r3
 8005504:	e01f      	b.n	8005546 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800550a:	2b00      	cmp	r3, #0
 800550c:	d01b      	beq.n	8005546 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	4798      	blx	r3
 8005516:	e016      	b.n	8005546 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005522:	2b00      	cmp	r3, #0
 8005524:	d107      	bne.n	8005536 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 0208 	bic.w	r2, r2, #8
 8005534:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800554a:	f003 031f 	and.w	r3, r3, #31
 800554e:	2220      	movs	r2, #32
 8005550:	409a      	lsls	r2, r3
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	4013      	ands	r3, r2
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 8110 	beq.w	800577c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a2c      	ldr	r2, [pc, #176]	; (8005614 <HAL_DMA_IRQHandler+0x690>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d04a      	beq.n	80055fc <HAL_DMA_IRQHandler+0x678>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a2b      	ldr	r2, [pc, #172]	; (8005618 <HAL_DMA_IRQHandler+0x694>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d045      	beq.n	80055fc <HAL_DMA_IRQHandler+0x678>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a29      	ldr	r2, [pc, #164]	; (800561c <HAL_DMA_IRQHandler+0x698>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d040      	beq.n	80055fc <HAL_DMA_IRQHandler+0x678>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a28      	ldr	r2, [pc, #160]	; (8005620 <HAL_DMA_IRQHandler+0x69c>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d03b      	beq.n	80055fc <HAL_DMA_IRQHandler+0x678>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a26      	ldr	r2, [pc, #152]	; (8005624 <HAL_DMA_IRQHandler+0x6a0>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d036      	beq.n	80055fc <HAL_DMA_IRQHandler+0x678>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a25      	ldr	r2, [pc, #148]	; (8005628 <HAL_DMA_IRQHandler+0x6a4>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d031      	beq.n	80055fc <HAL_DMA_IRQHandler+0x678>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a23      	ldr	r2, [pc, #140]	; (800562c <HAL_DMA_IRQHandler+0x6a8>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d02c      	beq.n	80055fc <HAL_DMA_IRQHandler+0x678>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a22      	ldr	r2, [pc, #136]	; (8005630 <HAL_DMA_IRQHandler+0x6ac>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d027      	beq.n	80055fc <HAL_DMA_IRQHandler+0x678>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a20      	ldr	r2, [pc, #128]	; (8005634 <HAL_DMA_IRQHandler+0x6b0>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d022      	beq.n	80055fc <HAL_DMA_IRQHandler+0x678>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a1f      	ldr	r2, [pc, #124]	; (8005638 <HAL_DMA_IRQHandler+0x6b4>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d01d      	beq.n	80055fc <HAL_DMA_IRQHandler+0x678>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a1d      	ldr	r2, [pc, #116]	; (800563c <HAL_DMA_IRQHandler+0x6b8>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d018      	beq.n	80055fc <HAL_DMA_IRQHandler+0x678>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a1c      	ldr	r2, [pc, #112]	; (8005640 <HAL_DMA_IRQHandler+0x6bc>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d013      	beq.n	80055fc <HAL_DMA_IRQHandler+0x678>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a1a      	ldr	r2, [pc, #104]	; (8005644 <HAL_DMA_IRQHandler+0x6c0>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d00e      	beq.n	80055fc <HAL_DMA_IRQHandler+0x678>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a19      	ldr	r2, [pc, #100]	; (8005648 <HAL_DMA_IRQHandler+0x6c4>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d009      	beq.n	80055fc <HAL_DMA_IRQHandler+0x678>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a17      	ldr	r2, [pc, #92]	; (800564c <HAL_DMA_IRQHandler+0x6c8>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d004      	beq.n	80055fc <HAL_DMA_IRQHandler+0x678>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a16      	ldr	r2, [pc, #88]	; (8005650 <HAL_DMA_IRQHandler+0x6cc>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d12b      	bne.n	8005654 <HAL_DMA_IRQHandler+0x6d0>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0310 	and.w	r3, r3, #16
 8005606:	2b00      	cmp	r3, #0
 8005608:	bf14      	ite	ne
 800560a:	2301      	movne	r3, #1
 800560c:	2300      	moveq	r3, #0
 800560e:	b2db      	uxtb	r3, r3
 8005610:	e02a      	b.n	8005668 <HAL_DMA_IRQHandler+0x6e4>
 8005612:	bf00      	nop
 8005614:	40020010 	.word	0x40020010
 8005618:	40020028 	.word	0x40020028
 800561c:	40020040 	.word	0x40020040
 8005620:	40020058 	.word	0x40020058
 8005624:	40020070 	.word	0x40020070
 8005628:	40020088 	.word	0x40020088
 800562c:	400200a0 	.word	0x400200a0
 8005630:	400200b8 	.word	0x400200b8
 8005634:	40020410 	.word	0x40020410
 8005638:	40020428 	.word	0x40020428
 800563c:	40020440 	.word	0x40020440
 8005640:	40020458 	.word	0x40020458
 8005644:	40020470 	.word	0x40020470
 8005648:	40020488 	.word	0x40020488
 800564c:	400204a0 	.word	0x400204a0
 8005650:	400204b8 	.word	0x400204b8
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0302 	and.w	r3, r3, #2
 800565e:	2b00      	cmp	r3, #0
 8005660:	bf14      	ite	ne
 8005662:	2301      	movne	r3, #1
 8005664:	2300      	moveq	r3, #0
 8005666:	b2db      	uxtb	r3, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 8087 	beq.w	800577c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005672:	f003 031f 	and.w	r3, r3, #31
 8005676:	2220      	movs	r2, #32
 8005678:	409a      	lsls	r2, r3
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b04      	cmp	r3, #4
 8005688:	d139      	bne.n	80056fe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f022 0216 	bic.w	r2, r2, #22
 8005698:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	695a      	ldr	r2, [r3, #20]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056a8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d103      	bne.n	80056ba <HAL_DMA_IRQHandler+0x736>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d007      	beq.n	80056ca <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 0208 	bic.w	r2, r2, #8
 80056c8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ce:	f003 031f 	and.w	r3, r3, #31
 80056d2:	223f      	movs	r2, #63	; 0x3f
 80056d4:	409a      	lsls	r2, r3
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f000 834a 	beq.w	8005d88 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	4798      	blx	r3
          }
          return;
 80056fc:	e344      	b.n	8005d88 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d018      	beq.n	800573e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d108      	bne.n	800572c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800571e:	2b00      	cmp	r3, #0
 8005720:	d02c      	beq.n	800577c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	4798      	blx	r3
 800572a:	e027      	b.n	800577c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005730:	2b00      	cmp	r3, #0
 8005732:	d023      	beq.n	800577c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	4798      	blx	r3
 800573c:	e01e      	b.n	800577c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10f      	bne.n	800576c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f022 0210 	bic.w	r2, r2, #16
 800575a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005770:	2b00      	cmp	r3, #0
 8005772:	d003      	beq.n	800577c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 8306 	beq.w	8005d92 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b00      	cmp	r3, #0
 8005790:	f000 8088 	beq.w	80058a4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2204      	movs	r2, #4
 8005798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a7a      	ldr	r2, [pc, #488]	; (800598c <HAL_DMA_IRQHandler+0xa08>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d04a      	beq.n	800583c <HAL_DMA_IRQHandler+0x8b8>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a79      	ldr	r2, [pc, #484]	; (8005990 <HAL_DMA_IRQHandler+0xa0c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d045      	beq.n	800583c <HAL_DMA_IRQHandler+0x8b8>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a77      	ldr	r2, [pc, #476]	; (8005994 <HAL_DMA_IRQHandler+0xa10>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d040      	beq.n	800583c <HAL_DMA_IRQHandler+0x8b8>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a76      	ldr	r2, [pc, #472]	; (8005998 <HAL_DMA_IRQHandler+0xa14>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d03b      	beq.n	800583c <HAL_DMA_IRQHandler+0x8b8>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a74      	ldr	r2, [pc, #464]	; (800599c <HAL_DMA_IRQHandler+0xa18>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d036      	beq.n	800583c <HAL_DMA_IRQHandler+0x8b8>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a73      	ldr	r2, [pc, #460]	; (80059a0 <HAL_DMA_IRQHandler+0xa1c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d031      	beq.n	800583c <HAL_DMA_IRQHandler+0x8b8>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a71      	ldr	r2, [pc, #452]	; (80059a4 <HAL_DMA_IRQHandler+0xa20>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d02c      	beq.n	800583c <HAL_DMA_IRQHandler+0x8b8>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a70      	ldr	r2, [pc, #448]	; (80059a8 <HAL_DMA_IRQHandler+0xa24>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d027      	beq.n	800583c <HAL_DMA_IRQHandler+0x8b8>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a6e      	ldr	r2, [pc, #440]	; (80059ac <HAL_DMA_IRQHandler+0xa28>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d022      	beq.n	800583c <HAL_DMA_IRQHandler+0x8b8>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a6d      	ldr	r2, [pc, #436]	; (80059b0 <HAL_DMA_IRQHandler+0xa2c>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d01d      	beq.n	800583c <HAL_DMA_IRQHandler+0x8b8>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a6b      	ldr	r2, [pc, #428]	; (80059b4 <HAL_DMA_IRQHandler+0xa30>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d018      	beq.n	800583c <HAL_DMA_IRQHandler+0x8b8>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a6a      	ldr	r2, [pc, #424]	; (80059b8 <HAL_DMA_IRQHandler+0xa34>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d013      	beq.n	800583c <HAL_DMA_IRQHandler+0x8b8>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a68      	ldr	r2, [pc, #416]	; (80059bc <HAL_DMA_IRQHandler+0xa38>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d00e      	beq.n	800583c <HAL_DMA_IRQHandler+0x8b8>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a67      	ldr	r2, [pc, #412]	; (80059c0 <HAL_DMA_IRQHandler+0xa3c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d009      	beq.n	800583c <HAL_DMA_IRQHandler+0x8b8>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a65      	ldr	r2, [pc, #404]	; (80059c4 <HAL_DMA_IRQHandler+0xa40>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d004      	beq.n	800583c <HAL_DMA_IRQHandler+0x8b8>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a64      	ldr	r2, [pc, #400]	; (80059c8 <HAL_DMA_IRQHandler+0xa44>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d108      	bne.n	800584e <HAL_DMA_IRQHandler+0x8ca>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 0201 	bic.w	r2, r2, #1
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	e007      	b.n	800585e <HAL_DMA_IRQHandler+0x8da>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f022 0201 	bic.w	r2, r2, #1
 800585c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	3301      	adds	r3, #1
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005866:	429a      	cmp	r2, r3
 8005868:	d307      	bcc.n	800587a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1f2      	bne.n	800585e <HAL_DMA_IRQHandler+0x8da>
 8005878:	e000      	b.n	800587c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800587a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	d004      	beq.n	800589c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2203      	movs	r2, #3
 8005896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800589a:	e003      	b.n	80058a4 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 8272 	beq.w	8005d92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	4798      	blx	r3
 80058b6:	e26c      	b.n	8005d92 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a43      	ldr	r2, [pc, #268]	; (80059cc <HAL_DMA_IRQHandler+0xa48>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d022      	beq.n	8005908 <HAL_DMA_IRQHandler+0x984>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a42      	ldr	r2, [pc, #264]	; (80059d0 <HAL_DMA_IRQHandler+0xa4c>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d01d      	beq.n	8005908 <HAL_DMA_IRQHandler+0x984>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a40      	ldr	r2, [pc, #256]	; (80059d4 <HAL_DMA_IRQHandler+0xa50>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d018      	beq.n	8005908 <HAL_DMA_IRQHandler+0x984>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a3f      	ldr	r2, [pc, #252]	; (80059d8 <HAL_DMA_IRQHandler+0xa54>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d013      	beq.n	8005908 <HAL_DMA_IRQHandler+0x984>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a3d      	ldr	r2, [pc, #244]	; (80059dc <HAL_DMA_IRQHandler+0xa58>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d00e      	beq.n	8005908 <HAL_DMA_IRQHandler+0x984>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a3c      	ldr	r2, [pc, #240]	; (80059e0 <HAL_DMA_IRQHandler+0xa5c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d009      	beq.n	8005908 <HAL_DMA_IRQHandler+0x984>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a3a      	ldr	r2, [pc, #232]	; (80059e4 <HAL_DMA_IRQHandler+0xa60>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d004      	beq.n	8005908 <HAL_DMA_IRQHandler+0x984>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a39      	ldr	r2, [pc, #228]	; (80059e8 <HAL_DMA_IRQHandler+0xa64>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d101      	bne.n	800590c <HAL_DMA_IRQHandler+0x988>
 8005908:	2301      	movs	r3, #1
 800590a:	e000      	b.n	800590e <HAL_DMA_IRQHandler+0x98a>
 800590c:	2300      	movs	r3, #0
 800590e:	2b00      	cmp	r3, #0
 8005910:	f000 823f 	beq.w	8005d92 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005920:	f003 031f 	and.w	r3, r3, #31
 8005924:	2204      	movs	r2, #4
 8005926:	409a      	lsls	r2, r3
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	4013      	ands	r3, r2
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 80cd 	beq.w	8005acc <HAL_DMA_IRQHandler+0xb48>
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	f003 0304 	and.w	r3, r3, #4
 8005938:	2b00      	cmp	r3, #0
 800593a:	f000 80c7 	beq.w	8005acc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005942:	f003 031f 	and.w	r3, r3, #31
 8005946:	2204      	movs	r2, #4
 8005948:	409a      	lsls	r2, r3
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d049      	beq.n	80059ec <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d109      	bne.n	8005976 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005966:	2b00      	cmp	r3, #0
 8005968:	f000 8210 	beq.w	8005d8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005974:	e20a      	b.n	8005d8c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 8206 	beq.w	8005d8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005988:	e200      	b.n	8005d8c <HAL_DMA_IRQHandler+0xe08>
 800598a:	bf00      	nop
 800598c:	40020010 	.word	0x40020010
 8005990:	40020028 	.word	0x40020028
 8005994:	40020040 	.word	0x40020040
 8005998:	40020058 	.word	0x40020058
 800599c:	40020070 	.word	0x40020070
 80059a0:	40020088 	.word	0x40020088
 80059a4:	400200a0 	.word	0x400200a0
 80059a8:	400200b8 	.word	0x400200b8
 80059ac:	40020410 	.word	0x40020410
 80059b0:	40020428 	.word	0x40020428
 80059b4:	40020440 	.word	0x40020440
 80059b8:	40020458 	.word	0x40020458
 80059bc:	40020470 	.word	0x40020470
 80059c0:	40020488 	.word	0x40020488
 80059c4:	400204a0 	.word	0x400204a0
 80059c8:	400204b8 	.word	0x400204b8
 80059cc:	58025408 	.word	0x58025408
 80059d0:	5802541c 	.word	0x5802541c
 80059d4:	58025430 	.word	0x58025430
 80059d8:	58025444 	.word	0x58025444
 80059dc:	58025458 	.word	0x58025458
 80059e0:	5802546c 	.word	0x5802546c
 80059e4:	58025480 	.word	0x58025480
 80059e8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	f003 0320 	and.w	r3, r3, #32
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d160      	bne.n	8005ab8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a8c      	ldr	r2, [pc, #560]	; (8005c2c <HAL_DMA_IRQHandler+0xca8>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d04a      	beq.n	8005a96 <HAL_DMA_IRQHandler+0xb12>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a8a      	ldr	r2, [pc, #552]	; (8005c30 <HAL_DMA_IRQHandler+0xcac>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d045      	beq.n	8005a96 <HAL_DMA_IRQHandler+0xb12>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a89      	ldr	r2, [pc, #548]	; (8005c34 <HAL_DMA_IRQHandler+0xcb0>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d040      	beq.n	8005a96 <HAL_DMA_IRQHandler+0xb12>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a87      	ldr	r2, [pc, #540]	; (8005c38 <HAL_DMA_IRQHandler+0xcb4>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d03b      	beq.n	8005a96 <HAL_DMA_IRQHandler+0xb12>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a86      	ldr	r2, [pc, #536]	; (8005c3c <HAL_DMA_IRQHandler+0xcb8>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d036      	beq.n	8005a96 <HAL_DMA_IRQHandler+0xb12>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a84      	ldr	r2, [pc, #528]	; (8005c40 <HAL_DMA_IRQHandler+0xcbc>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d031      	beq.n	8005a96 <HAL_DMA_IRQHandler+0xb12>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a83      	ldr	r2, [pc, #524]	; (8005c44 <HAL_DMA_IRQHandler+0xcc0>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d02c      	beq.n	8005a96 <HAL_DMA_IRQHandler+0xb12>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a81      	ldr	r2, [pc, #516]	; (8005c48 <HAL_DMA_IRQHandler+0xcc4>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d027      	beq.n	8005a96 <HAL_DMA_IRQHandler+0xb12>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a80      	ldr	r2, [pc, #512]	; (8005c4c <HAL_DMA_IRQHandler+0xcc8>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d022      	beq.n	8005a96 <HAL_DMA_IRQHandler+0xb12>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a7e      	ldr	r2, [pc, #504]	; (8005c50 <HAL_DMA_IRQHandler+0xccc>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d01d      	beq.n	8005a96 <HAL_DMA_IRQHandler+0xb12>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a7d      	ldr	r2, [pc, #500]	; (8005c54 <HAL_DMA_IRQHandler+0xcd0>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d018      	beq.n	8005a96 <HAL_DMA_IRQHandler+0xb12>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a7b      	ldr	r2, [pc, #492]	; (8005c58 <HAL_DMA_IRQHandler+0xcd4>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d013      	beq.n	8005a96 <HAL_DMA_IRQHandler+0xb12>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a7a      	ldr	r2, [pc, #488]	; (8005c5c <HAL_DMA_IRQHandler+0xcd8>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d00e      	beq.n	8005a96 <HAL_DMA_IRQHandler+0xb12>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a78      	ldr	r2, [pc, #480]	; (8005c60 <HAL_DMA_IRQHandler+0xcdc>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d009      	beq.n	8005a96 <HAL_DMA_IRQHandler+0xb12>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a77      	ldr	r2, [pc, #476]	; (8005c64 <HAL_DMA_IRQHandler+0xce0>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d004      	beq.n	8005a96 <HAL_DMA_IRQHandler+0xb12>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a75      	ldr	r2, [pc, #468]	; (8005c68 <HAL_DMA_IRQHandler+0xce4>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d108      	bne.n	8005aa8 <HAL_DMA_IRQHandler+0xb24>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 0208 	bic.w	r2, r2, #8
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	e007      	b.n	8005ab8 <HAL_DMA_IRQHandler+0xb34>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 0204 	bic.w	r2, r2, #4
 8005ab6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 8165 	beq.w	8005d8c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005aca:	e15f      	b.n	8005d8c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ad0:	f003 031f 	and.w	r3, r3, #31
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	409a      	lsls	r2, r3
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	4013      	ands	r3, r2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 80c5 	beq.w	8005c6c <HAL_DMA_IRQHandler+0xce8>
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f000 80bf 	beq.w	8005c6c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af2:	f003 031f 	and.w	r3, r3, #31
 8005af6:	2202      	movs	r2, #2
 8005af8:	409a      	lsls	r2, r3
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d018      	beq.n	8005b3a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d109      	bne.n	8005b26 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f000 813a 	beq.w	8005d90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b24:	e134      	b.n	8005d90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 8130 	beq.w	8005d90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b38:	e12a      	b.n	8005d90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	f003 0320 	and.w	r3, r3, #32
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d168      	bne.n	8005c16 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a38      	ldr	r2, [pc, #224]	; (8005c2c <HAL_DMA_IRQHandler+0xca8>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d04a      	beq.n	8005be4 <HAL_DMA_IRQHandler+0xc60>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a37      	ldr	r2, [pc, #220]	; (8005c30 <HAL_DMA_IRQHandler+0xcac>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d045      	beq.n	8005be4 <HAL_DMA_IRQHandler+0xc60>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a35      	ldr	r2, [pc, #212]	; (8005c34 <HAL_DMA_IRQHandler+0xcb0>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d040      	beq.n	8005be4 <HAL_DMA_IRQHandler+0xc60>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a34      	ldr	r2, [pc, #208]	; (8005c38 <HAL_DMA_IRQHandler+0xcb4>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d03b      	beq.n	8005be4 <HAL_DMA_IRQHandler+0xc60>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a32      	ldr	r2, [pc, #200]	; (8005c3c <HAL_DMA_IRQHandler+0xcb8>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d036      	beq.n	8005be4 <HAL_DMA_IRQHandler+0xc60>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a31      	ldr	r2, [pc, #196]	; (8005c40 <HAL_DMA_IRQHandler+0xcbc>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d031      	beq.n	8005be4 <HAL_DMA_IRQHandler+0xc60>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a2f      	ldr	r2, [pc, #188]	; (8005c44 <HAL_DMA_IRQHandler+0xcc0>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d02c      	beq.n	8005be4 <HAL_DMA_IRQHandler+0xc60>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a2e      	ldr	r2, [pc, #184]	; (8005c48 <HAL_DMA_IRQHandler+0xcc4>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d027      	beq.n	8005be4 <HAL_DMA_IRQHandler+0xc60>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a2c      	ldr	r2, [pc, #176]	; (8005c4c <HAL_DMA_IRQHandler+0xcc8>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d022      	beq.n	8005be4 <HAL_DMA_IRQHandler+0xc60>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a2b      	ldr	r2, [pc, #172]	; (8005c50 <HAL_DMA_IRQHandler+0xccc>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d01d      	beq.n	8005be4 <HAL_DMA_IRQHandler+0xc60>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a29      	ldr	r2, [pc, #164]	; (8005c54 <HAL_DMA_IRQHandler+0xcd0>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d018      	beq.n	8005be4 <HAL_DMA_IRQHandler+0xc60>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a28      	ldr	r2, [pc, #160]	; (8005c58 <HAL_DMA_IRQHandler+0xcd4>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d013      	beq.n	8005be4 <HAL_DMA_IRQHandler+0xc60>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a26      	ldr	r2, [pc, #152]	; (8005c5c <HAL_DMA_IRQHandler+0xcd8>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d00e      	beq.n	8005be4 <HAL_DMA_IRQHandler+0xc60>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a25      	ldr	r2, [pc, #148]	; (8005c60 <HAL_DMA_IRQHandler+0xcdc>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d009      	beq.n	8005be4 <HAL_DMA_IRQHandler+0xc60>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a23      	ldr	r2, [pc, #140]	; (8005c64 <HAL_DMA_IRQHandler+0xce0>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d004      	beq.n	8005be4 <HAL_DMA_IRQHandler+0xc60>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a22      	ldr	r2, [pc, #136]	; (8005c68 <HAL_DMA_IRQHandler+0xce4>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d108      	bne.n	8005bf6 <HAL_DMA_IRQHandler+0xc72>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0214 	bic.w	r2, r2, #20
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	e007      	b.n	8005c06 <HAL_DMA_IRQHandler+0xc82>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f022 020a 	bic.w	r2, r2, #10
 8005c04:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 80b8 	beq.w	8005d90 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c28:	e0b2      	b.n	8005d90 <HAL_DMA_IRQHandler+0xe0c>
 8005c2a:	bf00      	nop
 8005c2c:	40020010 	.word	0x40020010
 8005c30:	40020028 	.word	0x40020028
 8005c34:	40020040 	.word	0x40020040
 8005c38:	40020058 	.word	0x40020058
 8005c3c:	40020070 	.word	0x40020070
 8005c40:	40020088 	.word	0x40020088
 8005c44:	400200a0 	.word	0x400200a0
 8005c48:	400200b8 	.word	0x400200b8
 8005c4c:	40020410 	.word	0x40020410
 8005c50:	40020428 	.word	0x40020428
 8005c54:	40020440 	.word	0x40020440
 8005c58:	40020458 	.word	0x40020458
 8005c5c:	40020470 	.word	0x40020470
 8005c60:	40020488 	.word	0x40020488
 8005c64:	400204a0 	.word	0x400204a0
 8005c68:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c70:	f003 031f 	and.w	r3, r3, #31
 8005c74:	2208      	movs	r2, #8
 8005c76:	409a      	lsls	r2, r3
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f000 8088 	beq.w	8005d92 <HAL_DMA_IRQHandler+0xe0e>
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f003 0308 	and.w	r3, r3, #8
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 8082 	beq.w	8005d92 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a41      	ldr	r2, [pc, #260]	; (8005d98 <HAL_DMA_IRQHandler+0xe14>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d04a      	beq.n	8005d2e <HAL_DMA_IRQHandler+0xdaa>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a3f      	ldr	r2, [pc, #252]	; (8005d9c <HAL_DMA_IRQHandler+0xe18>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d045      	beq.n	8005d2e <HAL_DMA_IRQHandler+0xdaa>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a3e      	ldr	r2, [pc, #248]	; (8005da0 <HAL_DMA_IRQHandler+0xe1c>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d040      	beq.n	8005d2e <HAL_DMA_IRQHandler+0xdaa>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a3c      	ldr	r2, [pc, #240]	; (8005da4 <HAL_DMA_IRQHandler+0xe20>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d03b      	beq.n	8005d2e <HAL_DMA_IRQHandler+0xdaa>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a3b      	ldr	r2, [pc, #236]	; (8005da8 <HAL_DMA_IRQHandler+0xe24>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d036      	beq.n	8005d2e <HAL_DMA_IRQHandler+0xdaa>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a39      	ldr	r2, [pc, #228]	; (8005dac <HAL_DMA_IRQHandler+0xe28>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d031      	beq.n	8005d2e <HAL_DMA_IRQHandler+0xdaa>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a38      	ldr	r2, [pc, #224]	; (8005db0 <HAL_DMA_IRQHandler+0xe2c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d02c      	beq.n	8005d2e <HAL_DMA_IRQHandler+0xdaa>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a36      	ldr	r2, [pc, #216]	; (8005db4 <HAL_DMA_IRQHandler+0xe30>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d027      	beq.n	8005d2e <HAL_DMA_IRQHandler+0xdaa>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a35      	ldr	r2, [pc, #212]	; (8005db8 <HAL_DMA_IRQHandler+0xe34>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d022      	beq.n	8005d2e <HAL_DMA_IRQHandler+0xdaa>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a33      	ldr	r2, [pc, #204]	; (8005dbc <HAL_DMA_IRQHandler+0xe38>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d01d      	beq.n	8005d2e <HAL_DMA_IRQHandler+0xdaa>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a32      	ldr	r2, [pc, #200]	; (8005dc0 <HAL_DMA_IRQHandler+0xe3c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d018      	beq.n	8005d2e <HAL_DMA_IRQHandler+0xdaa>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a30      	ldr	r2, [pc, #192]	; (8005dc4 <HAL_DMA_IRQHandler+0xe40>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d013      	beq.n	8005d2e <HAL_DMA_IRQHandler+0xdaa>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a2f      	ldr	r2, [pc, #188]	; (8005dc8 <HAL_DMA_IRQHandler+0xe44>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d00e      	beq.n	8005d2e <HAL_DMA_IRQHandler+0xdaa>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a2d      	ldr	r2, [pc, #180]	; (8005dcc <HAL_DMA_IRQHandler+0xe48>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d009      	beq.n	8005d2e <HAL_DMA_IRQHandler+0xdaa>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a2c      	ldr	r2, [pc, #176]	; (8005dd0 <HAL_DMA_IRQHandler+0xe4c>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d004      	beq.n	8005d2e <HAL_DMA_IRQHandler+0xdaa>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a2a      	ldr	r2, [pc, #168]	; (8005dd4 <HAL_DMA_IRQHandler+0xe50>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d108      	bne.n	8005d40 <HAL_DMA_IRQHandler+0xdbc>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f022 021c 	bic.w	r2, r2, #28
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	e007      	b.n	8005d50 <HAL_DMA_IRQHandler+0xdcc>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f022 020e 	bic.w	r2, r2, #14
 8005d4e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d54:	f003 031f 	and.w	r3, r3, #31
 8005d58:	2201      	movs	r2, #1
 8005d5a:	409a      	lsls	r2, r3
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d009      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	4798      	blx	r3
 8005d86:	e004      	b.n	8005d92 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005d88:	bf00      	nop
 8005d8a:	e002      	b.n	8005d92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d8c:	bf00      	nop
 8005d8e:	e000      	b.n	8005d92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d90:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005d92:	3728      	adds	r7, #40	; 0x28
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	40020010 	.word	0x40020010
 8005d9c:	40020028 	.word	0x40020028
 8005da0:	40020040 	.word	0x40020040
 8005da4:	40020058 	.word	0x40020058
 8005da8:	40020070 	.word	0x40020070
 8005dac:	40020088 	.word	0x40020088
 8005db0:	400200a0 	.word	0x400200a0
 8005db4:	400200b8 	.word	0x400200b8
 8005db8:	40020410 	.word	0x40020410
 8005dbc:	40020428 	.word	0x40020428
 8005dc0:	40020440 	.word	0x40020440
 8005dc4:	40020458 	.word	0x40020458
 8005dc8:	40020470 	.word	0x40020470
 8005dcc:	40020488 	.word	0x40020488
 8005dd0:	400204a0 	.word	0x400204a0
 8005dd4:	400204b8 	.word	0x400204b8

08005dd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a42      	ldr	r2, [pc, #264]	; (8005ef0 <DMA_CalcBaseAndBitshift+0x118>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d04a      	beq.n	8005e80 <DMA_CalcBaseAndBitshift+0xa8>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a41      	ldr	r2, [pc, #260]	; (8005ef4 <DMA_CalcBaseAndBitshift+0x11c>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d045      	beq.n	8005e80 <DMA_CalcBaseAndBitshift+0xa8>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a3f      	ldr	r2, [pc, #252]	; (8005ef8 <DMA_CalcBaseAndBitshift+0x120>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d040      	beq.n	8005e80 <DMA_CalcBaseAndBitshift+0xa8>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a3e      	ldr	r2, [pc, #248]	; (8005efc <DMA_CalcBaseAndBitshift+0x124>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d03b      	beq.n	8005e80 <DMA_CalcBaseAndBitshift+0xa8>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a3c      	ldr	r2, [pc, #240]	; (8005f00 <DMA_CalcBaseAndBitshift+0x128>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d036      	beq.n	8005e80 <DMA_CalcBaseAndBitshift+0xa8>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a3b      	ldr	r2, [pc, #236]	; (8005f04 <DMA_CalcBaseAndBitshift+0x12c>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d031      	beq.n	8005e80 <DMA_CalcBaseAndBitshift+0xa8>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a39      	ldr	r2, [pc, #228]	; (8005f08 <DMA_CalcBaseAndBitshift+0x130>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d02c      	beq.n	8005e80 <DMA_CalcBaseAndBitshift+0xa8>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a38      	ldr	r2, [pc, #224]	; (8005f0c <DMA_CalcBaseAndBitshift+0x134>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d027      	beq.n	8005e80 <DMA_CalcBaseAndBitshift+0xa8>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a36      	ldr	r2, [pc, #216]	; (8005f10 <DMA_CalcBaseAndBitshift+0x138>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d022      	beq.n	8005e80 <DMA_CalcBaseAndBitshift+0xa8>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a35      	ldr	r2, [pc, #212]	; (8005f14 <DMA_CalcBaseAndBitshift+0x13c>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d01d      	beq.n	8005e80 <DMA_CalcBaseAndBitshift+0xa8>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a33      	ldr	r2, [pc, #204]	; (8005f18 <DMA_CalcBaseAndBitshift+0x140>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d018      	beq.n	8005e80 <DMA_CalcBaseAndBitshift+0xa8>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a32      	ldr	r2, [pc, #200]	; (8005f1c <DMA_CalcBaseAndBitshift+0x144>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d013      	beq.n	8005e80 <DMA_CalcBaseAndBitshift+0xa8>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a30      	ldr	r2, [pc, #192]	; (8005f20 <DMA_CalcBaseAndBitshift+0x148>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d00e      	beq.n	8005e80 <DMA_CalcBaseAndBitshift+0xa8>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a2f      	ldr	r2, [pc, #188]	; (8005f24 <DMA_CalcBaseAndBitshift+0x14c>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d009      	beq.n	8005e80 <DMA_CalcBaseAndBitshift+0xa8>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a2d      	ldr	r2, [pc, #180]	; (8005f28 <DMA_CalcBaseAndBitshift+0x150>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d004      	beq.n	8005e80 <DMA_CalcBaseAndBitshift+0xa8>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a2c      	ldr	r2, [pc, #176]	; (8005f2c <DMA_CalcBaseAndBitshift+0x154>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d101      	bne.n	8005e84 <DMA_CalcBaseAndBitshift+0xac>
 8005e80:	2301      	movs	r3, #1
 8005e82:	e000      	b.n	8005e86 <DMA_CalcBaseAndBitshift+0xae>
 8005e84:	2300      	movs	r3, #0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d024      	beq.n	8005ed4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	3b10      	subs	r3, #16
 8005e92:	4a27      	ldr	r2, [pc, #156]	; (8005f30 <DMA_CalcBaseAndBitshift+0x158>)
 8005e94:	fba2 2303 	umull	r2, r3, r2, r3
 8005e98:	091b      	lsrs	r3, r3, #4
 8005e9a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f003 0307 	and.w	r3, r3, #7
 8005ea2:	4a24      	ldr	r2, [pc, #144]	; (8005f34 <DMA_CalcBaseAndBitshift+0x15c>)
 8005ea4:	5cd3      	ldrb	r3, [r2, r3]
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d908      	bls.n	8005ec4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	4b1f      	ldr	r3, [pc, #124]	; (8005f38 <DMA_CalcBaseAndBitshift+0x160>)
 8005eba:	4013      	ands	r3, r2
 8005ebc:	1d1a      	adds	r2, r3, #4
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	659a      	str	r2, [r3, #88]	; 0x58
 8005ec2:	e00d      	b.n	8005ee0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	4b1b      	ldr	r3, [pc, #108]	; (8005f38 <DMA_CalcBaseAndBitshift+0x160>)
 8005ecc:	4013      	ands	r3, r2
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8005ed2:	e005      	b.n	8005ee0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	40020010 	.word	0x40020010
 8005ef4:	40020028 	.word	0x40020028
 8005ef8:	40020040 	.word	0x40020040
 8005efc:	40020058 	.word	0x40020058
 8005f00:	40020070 	.word	0x40020070
 8005f04:	40020088 	.word	0x40020088
 8005f08:	400200a0 	.word	0x400200a0
 8005f0c:	400200b8 	.word	0x400200b8
 8005f10:	40020410 	.word	0x40020410
 8005f14:	40020428 	.word	0x40020428
 8005f18:	40020440 	.word	0x40020440
 8005f1c:	40020458 	.word	0x40020458
 8005f20:	40020470 	.word	0x40020470
 8005f24:	40020488 	.word	0x40020488
 8005f28:	400204a0 	.word	0x400204a0
 8005f2c:	400204b8 	.word	0x400204b8
 8005f30:	aaaaaaab 	.word	0xaaaaaaab
 8005f34:	08013d8c 	.word	0x08013d8c
 8005f38:	fffffc00 	.word	0xfffffc00

08005f3c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f44:	2300      	movs	r3, #0
 8005f46:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d120      	bne.n	8005f92 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	d858      	bhi.n	800600a <DMA_CheckFifoParam+0xce>
 8005f58:	a201      	add	r2, pc, #4	; (adr r2, 8005f60 <DMA_CheckFifoParam+0x24>)
 8005f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5e:	bf00      	nop
 8005f60:	08005f71 	.word	0x08005f71
 8005f64:	08005f83 	.word	0x08005f83
 8005f68:	08005f71 	.word	0x08005f71
 8005f6c:	0800600b 	.word	0x0800600b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d048      	beq.n	800600e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005f80:	e045      	b.n	800600e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f8a:	d142      	bne.n	8006012 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005f90:	e03f      	b.n	8006012 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f9a:	d123      	bne.n	8005fe4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa0:	2b03      	cmp	r3, #3
 8005fa2:	d838      	bhi.n	8006016 <DMA_CheckFifoParam+0xda>
 8005fa4:	a201      	add	r2, pc, #4	; (adr r2, 8005fac <DMA_CheckFifoParam+0x70>)
 8005fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005faa:	bf00      	nop
 8005fac:	08005fbd 	.word	0x08005fbd
 8005fb0:	08005fc3 	.word	0x08005fc3
 8005fb4:	08005fbd 	.word	0x08005fbd
 8005fb8:	08005fd5 	.word	0x08005fd5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	73fb      	strb	r3, [r7, #15]
        break;
 8005fc0:	e030      	b.n	8006024 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d025      	beq.n	800601a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005fd2:	e022      	b.n	800601a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fdc:	d11f      	bne.n	800601e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005fe2:	e01c      	b.n	800601e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d902      	bls.n	8005ff2 <DMA_CheckFifoParam+0xb6>
 8005fec:	2b03      	cmp	r3, #3
 8005fee:	d003      	beq.n	8005ff8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005ff0:	e018      	b.n	8006024 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	73fb      	strb	r3, [r7, #15]
        break;
 8005ff6:	e015      	b.n	8006024 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00e      	beq.n	8006022 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	73fb      	strb	r3, [r7, #15]
    break;
 8006008:	e00b      	b.n	8006022 <DMA_CheckFifoParam+0xe6>
        break;
 800600a:	bf00      	nop
 800600c:	e00a      	b.n	8006024 <DMA_CheckFifoParam+0xe8>
        break;
 800600e:	bf00      	nop
 8006010:	e008      	b.n	8006024 <DMA_CheckFifoParam+0xe8>
        break;
 8006012:	bf00      	nop
 8006014:	e006      	b.n	8006024 <DMA_CheckFifoParam+0xe8>
        break;
 8006016:	bf00      	nop
 8006018:	e004      	b.n	8006024 <DMA_CheckFifoParam+0xe8>
        break;
 800601a:	bf00      	nop
 800601c:	e002      	b.n	8006024 <DMA_CheckFifoParam+0xe8>
        break;
 800601e:	bf00      	nop
 8006020:	e000      	b.n	8006024 <DMA_CheckFifoParam+0xe8>
    break;
 8006022:	bf00      	nop
    }
  }

  return status;
 8006024:	7bfb      	ldrb	r3, [r7, #15]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop

08006034 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a38      	ldr	r2, [pc, #224]	; (8006128 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d022      	beq.n	8006092 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a36      	ldr	r2, [pc, #216]	; (800612c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d01d      	beq.n	8006092 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a35      	ldr	r2, [pc, #212]	; (8006130 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d018      	beq.n	8006092 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a33      	ldr	r2, [pc, #204]	; (8006134 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d013      	beq.n	8006092 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a32      	ldr	r2, [pc, #200]	; (8006138 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00e      	beq.n	8006092 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a30      	ldr	r2, [pc, #192]	; (800613c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d009      	beq.n	8006092 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a2f      	ldr	r2, [pc, #188]	; (8006140 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d004      	beq.n	8006092 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a2d      	ldr	r2, [pc, #180]	; (8006144 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d101      	bne.n	8006096 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006092:	2301      	movs	r3, #1
 8006094:	e000      	b.n	8006098 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006096:	2300      	movs	r3, #0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d01a      	beq.n	80060d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	3b08      	subs	r3, #8
 80060a4:	4a28      	ldr	r2, [pc, #160]	; (8006148 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80060a6:	fba2 2303 	umull	r2, r3, r2, r3
 80060aa:	091b      	lsrs	r3, r3, #4
 80060ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	4b26      	ldr	r3, [pc, #152]	; (800614c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80060b2:	4413      	add	r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	461a      	mov	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a24      	ldr	r2, [pc, #144]	; (8006150 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80060c0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f003 031f 	and.w	r3, r3, #31
 80060c8:	2201      	movs	r2, #1
 80060ca:	409a      	lsls	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80060d0:	e024      	b.n	800611c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	3b10      	subs	r3, #16
 80060da:	4a1e      	ldr	r2, [pc, #120]	; (8006154 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80060dc:	fba2 2303 	umull	r2, r3, r2, r3
 80060e0:	091b      	lsrs	r3, r3, #4
 80060e2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	4a1c      	ldr	r2, [pc, #112]	; (8006158 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d806      	bhi.n	80060fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	4a1b      	ldr	r2, [pc, #108]	; (800615c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d902      	bls.n	80060fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	3308      	adds	r3, #8
 80060f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	4b18      	ldr	r3, [pc, #96]	; (8006160 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80060fe:	4413      	add	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	461a      	mov	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a16      	ldr	r2, [pc, #88]	; (8006164 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800610c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f003 031f 	and.w	r3, r3, #31
 8006114:	2201      	movs	r2, #1
 8006116:	409a      	lsls	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800611c:	bf00      	nop
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr
 8006128:	58025408 	.word	0x58025408
 800612c:	5802541c 	.word	0x5802541c
 8006130:	58025430 	.word	0x58025430
 8006134:	58025444 	.word	0x58025444
 8006138:	58025458 	.word	0x58025458
 800613c:	5802546c 	.word	0x5802546c
 8006140:	58025480 	.word	0x58025480
 8006144:	58025494 	.word	0x58025494
 8006148:	cccccccd 	.word	0xcccccccd
 800614c:	16009600 	.word	0x16009600
 8006150:	58025880 	.word	0x58025880
 8006154:	aaaaaaab 	.word	0xaaaaaaab
 8006158:	400204b8 	.word	0x400204b8
 800615c:	4002040f 	.word	0x4002040f
 8006160:	10008200 	.word	0x10008200
 8006164:	40020880 	.word	0x40020880

08006168 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	b2db      	uxtb	r3, r3
 8006176:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d04a      	beq.n	8006214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2b08      	cmp	r3, #8
 8006182:	d847      	bhi.n	8006214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a25      	ldr	r2, [pc, #148]	; (8006220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d022      	beq.n	80061d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a24      	ldr	r2, [pc, #144]	; (8006224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d01d      	beq.n	80061d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a22      	ldr	r2, [pc, #136]	; (8006228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d018      	beq.n	80061d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a21      	ldr	r2, [pc, #132]	; (800622c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d013      	beq.n	80061d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a1f      	ldr	r2, [pc, #124]	; (8006230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d00e      	beq.n	80061d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a1e      	ldr	r2, [pc, #120]	; (8006234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d009      	beq.n	80061d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a1c      	ldr	r2, [pc, #112]	; (8006238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d004      	beq.n	80061d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a1b      	ldr	r2, [pc, #108]	; (800623c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d101      	bne.n	80061d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80061d4:	2301      	movs	r3, #1
 80061d6:	e000      	b.n	80061da <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80061d8:	2300      	movs	r3, #0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00a      	beq.n	80061f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	4b17      	ldr	r3, [pc, #92]	; (8006240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80061e2:	4413      	add	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	461a      	mov	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a15      	ldr	r2, [pc, #84]	; (8006244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80061f0:	671a      	str	r2, [r3, #112]	; 0x70
 80061f2:	e009      	b.n	8006208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	4b14      	ldr	r3, [pc, #80]	; (8006248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80061f8:	4413      	add	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	461a      	mov	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a11      	ldr	r2, [pc, #68]	; (800624c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006206:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	3b01      	subs	r3, #1
 800620c:	2201      	movs	r2, #1
 800620e:	409a      	lsls	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006214:	bf00      	nop
 8006216:	3714      	adds	r7, #20
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	58025408 	.word	0x58025408
 8006224:	5802541c 	.word	0x5802541c
 8006228:	58025430 	.word	0x58025430
 800622c:	58025444 	.word	0x58025444
 8006230:	58025458 	.word	0x58025458
 8006234:	5802546c 	.word	0x5802546c
 8006238:	58025480 	.word	0x58025480
 800623c:	58025494 	.word	0x58025494
 8006240:	1600963f 	.word	0x1600963f
 8006244:	58025940 	.word	0x58025940
 8006248:	1000823f 	.word	0x1000823f
 800624c:	40020940 	.word	0x40020940

08006250 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b098      	sub	sp, #96	; 0x60
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006258:	4a84      	ldr	r2, [pc, #528]	; (800646c <HAL_FDCAN_Init+0x21c>)
 800625a:	f107 030c 	add.w	r3, r7, #12
 800625e:	4611      	mov	r1, r2
 8006260:	224c      	movs	r2, #76	; 0x4c
 8006262:	4618      	mov	r0, r3
 8006264:	f00a fdfe 	bl	8010e64 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e1ca      	b.n	8006608 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a7e      	ldr	r2, [pc, #504]	; (8006470 <HAL_FDCAN_Init+0x220>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d106      	bne.n	800628a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006284:	461a      	mov	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d106      	bne.n	80062a4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7fb fe38 	bl	8001f14 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	699a      	ldr	r2, [r3, #24]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0210 	bic.w	r2, r2, #16
 80062b2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062b4:	f7fc fa4a 	bl	800274c <HAL_GetTick>
 80062b8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80062ba:	e014      	b.n	80062e6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80062bc:	f7fc fa46 	bl	800274c <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	2b0a      	cmp	r3, #10
 80062c8:	d90d      	bls.n	80062e6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062d0:	f043 0201 	orr.w	r2, r3, #1
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2203      	movs	r2, #3
 80062de:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e190      	b.n	8006608 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	f003 0308 	and.w	r3, r3, #8
 80062f0:	2b08      	cmp	r3, #8
 80062f2:	d0e3      	beq.n	80062bc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	699a      	ldr	r2, [r3, #24]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f042 0201 	orr.w	r2, r2, #1
 8006302:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006304:	f7fc fa22 	bl	800274c <HAL_GetTick>
 8006308:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800630a:	e014      	b.n	8006336 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800630c:	f7fc fa1e 	bl	800274c <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	2b0a      	cmp	r3, #10
 8006318:	d90d      	bls.n	8006336 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006320:	f043 0201 	orr.w	r2, r3, #1
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2203      	movs	r2, #3
 800632e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e168      	b.n	8006608 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	f003 0301 	and.w	r3, r3, #1
 8006340:	2b00      	cmp	r3, #0
 8006342:	d0e3      	beq.n	800630c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	699a      	ldr	r2, [r3, #24]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0202 	orr.w	r2, r2, #2
 8006352:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	7c1b      	ldrb	r3, [r3, #16]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d108      	bne.n	800636e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	699a      	ldr	r2, [r3, #24]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800636a:	619a      	str	r2, [r3, #24]
 800636c:	e007      	b.n	800637e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	699a      	ldr	r2, [r3, #24]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800637c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	7c5b      	ldrb	r3, [r3, #17]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d108      	bne.n	8006398 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	699a      	ldr	r2, [r3, #24]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006394:	619a      	str	r2, [r3, #24]
 8006396:	e007      	b.n	80063a8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699a      	ldr	r2, [r3, #24]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063a6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	7c9b      	ldrb	r3, [r3, #18]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d108      	bne.n	80063c2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	699a      	ldr	r2, [r3, #24]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80063be:	619a      	str	r2, [r3, #24]
 80063c0:	e007      	b.n	80063d2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	699a      	ldr	r2, [r3, #24]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80063d0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689a      	ldr	r2, [r3, #8]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	430a      	orrs	r2, r1
 80063e6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	699a      	ldr	r2, [r3, #24]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80063f6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	691a      	ldr	r2, [r3, #16]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 0210 	bic.w	r2, r2, #16
 8006406:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d108      	bne.n	8006422 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	699a      	ldr	r2, [r3, #24]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f042 0204 	orr.w	r2, r2, #4
 800641e:	619a      	str	r2, [r3, #24]
 8006420:	e030      	b.n	8006484 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d02c      	beq.n	8006484 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	2b02      	cmp	r3, #2
 8006430:	d020      	beq.n	8006474 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	699a      	ldr	r2, [r3, #24]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006440:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	691a      	ldr	r2, [r3, #16]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f042 0210 	orr.w	r2, r2, #16
 8006450:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	2b03      	cmp	r3, #3
 8006458:	d114      	bne.n	8006484 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	699a      	ldr	r2, [r3, #24]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f042 0220 	orr.w	r2, r2, #32
 8006468:	619a      	str	r2, [r3, #24]
 800646a:	e00b      	b.n	8006484 <HAL_FDCAN_Init+0x234>
 800646c:	08013bac 	.word	0x08013bac
 8006470:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	699a      	ldr	r2, [r3, #24]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0220 	orr.w	r2, r2, #32
 8006482:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	3b01      	subs	r3, #1
 800648a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	69db      	ldr	r3, [r3, #28]
 8006490:	3b01      	subs	r3, #1
 8006492:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006494:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800649c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	695b      	ldr	r3, [r3, #20]
 80064a4:	3b01      	subs	r3, #1
 80064a6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80064ac:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80064ae:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064b8:	d115      	bne.n	80064e6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064be:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c4:	3b01      	subs	r3, #1
 80064c6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80064c8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ce:	3b01      	subs	r3, #1
 80064d0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80064d2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064da:	3b01      	subs	r3, #1
 80064dc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80064e2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80064e4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00a      	beq.n	8006504 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800650c:	4413      	add	r3, r2
 800650e:	2b00      	cmp	r3, #0
 8006510:	d012      	beq.n	8006538 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800651a:	f023 0107 	bic.w	r1, r3, #7
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006528:	4413      	add	r3, r2
 800652a:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	430a      	orrs	r2, r1
 8006534:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653c:	2b00      	cmp	r3, #0
 800653e:	d012      	beq.n	8006566 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006548:	f023 0107 	bic.w	r1, r3, #7
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006556:	4413      	add	r3, r2
 8006558:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800656a:	2b00      	cmp	r3, #0
 800656c:	d013      	beq.n	8006596 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006576:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006584:	4413      	add	r3, r2
 8006586:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800658a:	011a      	lsls	r2, r3, #4
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800659a:	2b00      	cmp	r3, #0
 800659c:	d013      	beq.n	80065c6 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80065a6:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80065b4:	4413      	add	r3, r2
 80065b6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80065ba:	021a      	lsls	r2, r3, #8
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a11      	ldr	r2, [pc, #68]	; (8006610 <HAL_FDCAN_Init+0x3c0>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d107      	bne.n	80065e0 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	689a      	ldr	r2, [r3, #8]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f022 0203 	bic.w	r2, r2, #3
 80065de:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fe03 	bl	8007204 <FDCAN_CalcultateRamBlockAddresses>
 80065fe:	4603      	mov	r3, r0
 8006600:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8006604:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8006608:	4618      	mov	r0, r3
 800660a:	3760      	adds	r7, #96	; 0x60
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	4000a000 	.word	0x4000a000

08006614 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8006614:	b480      	push	{r7}
 8006616:	b087      	sub	sp, #28
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006624:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006626:	7bfb      	ldrb	r3, [r7, #15]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d002      	beq.n	8006632 <HAL_FDCAN_ConfigFilter+0x1e>
 800662c:	7bfb      	ldrb	r3, [r7, #15]
 800662e:	2b02      	cmp	r3, #2
 8006630:	d157      	bne.n	80066e2 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d12b      	bne.n	8006692 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	2b07      	cmp	r3, #7
 8006640:	d10d      	bne.n	800665e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	69db      	ldr	r3, [r3, #28]
 800664c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800664e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8006654:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8006656:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800665a:	617b      	str	r3, [r7, #20]
 800665c:	e00e      	b.n	800667c <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800666a:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8006672:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006678:	4313      	orrs	r3, r2
 800667a:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	601a      	str	r2, [r3, #0]
 8006690:	e025      	b.n	80066de <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	075a      	lsls	r2, r3, #29
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	4313      	orrs	r3, r2
 800669e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	2b07      	cmp	r3, #7
 80066a6:	d103      	bne.n	80066b0 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	613b      	str	r3, [r7, #16]
 80066ae:	e006      	b.n	80066be <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	079a      	lsls	r2, r3, #30
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	00db      	lsls	r3, r3, #3
 80066c8:	4413      	add	r3, r2
 80066ca:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	3304      	adds	r3, #4
 80066d6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80066de:	2300      	movs	r3, #0
 80066e0:	e008      	b.n	80066f4 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066e8:	f043 0202 	orr.w	r2, r3, #2
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
  }
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	371c      	adds	r7, #28
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b01      	cmp	r3, #1
 8006712:	d111      	bne.n	8006738 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	699a      	ldr	r2, [r3, #24]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0201 	bic.w	r2, r2, #1
 800672a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8006734:	2300      	movs	r3, #0
 8006736:	e008      	b.n	800674a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800673e:	f043 0204 	orr.w	r2, r3, #4
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
  }
}
 800674a:	4618      	mov	r0, r3
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b086      	sub	sp, #24
 800675a:	af00      	add	r7, sp, #0
 800675c:	60f8      	str	r0, [r7, #12]
 800675e:	60b9      	str	r1, [r7, #8]
 8006760:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b02      	cmp	r3, #2
 800676c:	d141      	bne.n	80067f2 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006776:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d109      	bne.n	8006792 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006784:	f043 0220 	orr.w	r2, r3, #32
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e038      	b.n	8006804 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800679a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d009      	beq.n	80067b6 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e026      	b.n	8006804 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80067be:	0c1b      	lsrs	r3, r3, #16
 80067c0:	f003 031f 	and.w	r3, r3, #31
 80067c4:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	68b9      	ldr	r1, [r7, #8]
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f000 fe9f 	bl	8007510 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2101      	movs	r1, #1
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	fa01 f202 	lsl.w	r2, r1, r2
 80067de:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80067e2:	2201      	movs	r2, #1
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	409a      	lsls	r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	e008      	b.n	8006804 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067f8:	f043 0208 	orr.w	r2, r3, #8
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
  }
}
 8006804:	4618      	mov	r0, r3
 8006806:	3718      	adds	r7, #24
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800680c:	b480      	push	{r7}
 800680e:	b08b      	sub	sp, #44	; 0x2c
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
 8006818:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800681a:	2300      	movs	r3, #0
 800681c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006824:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8006826:	7efb      	ldrb	r3, [r7, #27]
 8006828:	2b02      	cmp	r3, #2
 800682a:	f040 814b 	bne.w	8006ac4 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	2b40      	cmp	r3, #64	; 0x40
 8006832:	d14d      	bne.n	80068d0 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800683c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d109      	bne.n	8006858 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800684a:	f043 0220 	orr.w	r2, r3, #32
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e13e      	b.n	8006ad6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006864:	2b00      	cmp	r3, #0
 8006866:	d109      	bne.n	800687c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800686e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e12c      	b.n	8006ad6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006884:	0e1b      	lsrs	r3, r3, #24
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b01      	cmp	r3, #1
 800688c:	d10b      	bne.n	80068a6 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006896:	0fdb      	lsrs	r3, r3, #31
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068a0:	d101      	bne.n	80068a6 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80068a2:	2301      	movs	r3, #1
 80068a4:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80068ae:	0a1b      	lsrs	r3, r3, #8
 80068b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068b4:	69fa      	ldr	r2, [r7, #28]
 80068b6:	4413      	add	r3, r2
 80068b8:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c2:	69f9      	ldr	r1, [r7, #28]
 80068c4:	fb01 f303 	mul.w	r3, r1, r3
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4413      	add	r3, r2
 80068cc:	627b      	str	r3, [r7, #36]	; 0x24
 80068ce:	e069      	b.n	80069a4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2b41      	cmp	r3, #65	; 0x41
 80068d4:	d14d      	bne.n	8006972 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d109      	bne.n	80068fa <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068ec:	f043 0220 	orr.w	r2, r3, #32
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e0ed      	b.n	8006ad6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006906:	2b00      	cmp	r3, #0
 8006908:	d109      	bne.n	800691e <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006910:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e0db      	b.n	8006ad6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006926:	0e1b      	lsrs	r3, r3, #24
 8006928:	f003 0301 	and.w	r3, r3, #1
 800692c:	2b01      	cmp	r3, #1
 800692e:	d10b      	bne.n	8006948 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006938:	0fdb      	lsrs	r3, r3, #31
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006942:	d101      	bne.n	8006948 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006944:	2301      	movs	r3, #1
 8006946:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006950:	0a1b      	lsrs	r3, r3, #8
 8006952:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006956:	69fa      	ldr	r2, [r7, #28]
 8006958:	4413      	add	r3, r2
 800695a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006964:	69f9      	ldr	r1, [r7, #28]
 8006966:	fb01 f303 	mul.w	r3, r1, r3
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4413      	add	r3, r2
 800696e:	627b      	str	r3, [r7, #36]	; 0x24
 8006970:	e018      	b.n	80069a4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	429a      	cmp	r2, r3
 800697a:	d309      	bcc.n	8006990 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006982:	f043 0220 	orr.w	r2, r3, #32
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e0a2      	b.n	8006ad6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006998:	68b9      	ldr	r1, [r7, #8]
 800699a:	fb01 f303 	mul.w	r3, r1, r3
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d107      	bne.n	80069c8 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80069b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	0c9b      	lsrs	r3, r3, #18
 80069be:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	e005      	b.n	80069d4 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80069c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	3304      	adds	r3, #4
 80069f0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80069f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80069fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	0e1b      	lsrs	r3, r3, #24
 8006a26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	0fda      	lsrs	r2, r3, #31
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8006a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3a:	3304      	adds	r3, #4
 8006a3c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8006a42:	2300      	movs	r3, #0
 8006a44:	623b      	str	r3, [r7, #32]
 8006a46:	e00a      	b.n	8006a5e <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	441a      	add	r2, r3
 8006a4e:	6839      	ldr	r1, [r7, #0]
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	440b      	add	r3, r1
 8006a54:	7812      	ldrb	r2, [r2, #0]
 8006a56:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8006a58:	6a3b      	ldr	r3, [r7, #32]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	623b      	str	r3, [r7, #32]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	0c1b      	lsrs	r3, r3, #16
 8006a64:	4a1f      	ldr	r2, [pc, #124]	; (8006ae4 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8006a66:	5cd3      	ldrb	r3, [r2, r3]
 8006a68:	461a      	mov	r2, r3
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d3eb      	bcc.n	8006a48 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	2b40      	cmp	r3, #64	; 0x40
 8006a74:	d105      	bne.n	8006a82 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	69fa      	ldr	r2, [r7, #28]
 8006a7c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8006a80:	e01e      	b.n	8006ac0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	2b41      	cmp	r3, #65	; 0x41
 8006a86:	d105      	bne.n	8006a94 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	69fa      	ldr	r2, [r7, #28]
 8006a8e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8006a92:	e015      	b.n	8006ac0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	2b1f      	cmp	r3, #31
 8006a98:	d808      	bhi.n	8006aac <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2101      	movs	r1, #1
 8006aa0:	68ba      	ldr	r2, [r7, #8]
 8006aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8006aa6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8006aaa:	e009      	b.n	8006ac0 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	f003 021f 	and.w	r2, r3, #31
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2101      	movs	r1, #1
 8006ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8006abc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	e008      	b.n	8006ad6 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006aca:	f043 0208 	orr.w	r2, r3, #8
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
  }
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	372c      	adds	r7, #44	; 0x2c
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	08013d94 	.word	0x08013d94

08006ae8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006afa:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006afc:	7dfb      	ldrb	r3, [r7, #23]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d002      	beq.n	8006b08 <HAL_FDCAN_ActivateNotification+0x20>
 8006b02:	7dfb      	ldrb	r3, [r7, #23]
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d155      	bne.n	8006bb4 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	4013      	ands	r3, r2
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d108      	bne.n	8006b28 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f042 0201 	orr.w	r2, r2, #1
 8006b24:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b26:	e014      	b.n	8006b52 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	4013      	ands	r3, r2
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d108      	bne.n	8006b4a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f042 0202 	orr.w	r2, r2, #2
 8006b46:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b48:	e003      	b.n	8006b52 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2203      	movs	r2, #3
 8006b50:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d009      	beq.n	8006b70 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d009      	beq.n	8006b8e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	430a      	orrs	r2, r1
 8006b8a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	4b0f      	ldr	r3, [pc, #60]	; (8006bd4 <HAL_FDCAN_ActivateNotification+0xec>)
 8006b98:	4013      	ands	r3, r2
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	6812      	ldr	r2, [r2, #0]
 8006b9e:	430b      	orrs	r3, r1
 8006ba0:	6553      	str	r3, [r2, #84]	; 0x54
 8006ba2:	4b0d      	ldr	r3, [pc, #52]	; (8006bd8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8006ba4:	695a      	ldr	r2, [r3, #20]
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	0f9b      	lsrs	r3, r3, #30
 8006baa:	490b      	ldr	r1, [pc, #44]	; (8006bd8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8006bac:	4313      	orrs	r3, r2
 8006bae:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	e008      	b.n	8006bc6 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bba:	f043 0202 	orr.w	r2, r3, #2
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
  }
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	371c      	adds	r7, #28
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	3fcfffff 	.word	0x3fcfffff
 8006bd8:	4000a800 	.word	0x4000a800

08006bdc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b092      	sub	sp, #72	; 0x48
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8006be4:	4b90      	ldr	r3, [pc, #576]	; (8006e28 <HAL_FDCAN_IRQHandler+0x24c>)
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	079b      	lsls	r3, r3, #30
 8006bea:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8006bec:	4b8e      	ldr	r3, [pc, #568]	; (8006e28 <HAL_FDCAN_IRQHandler+0x24c>)
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	079b      	lsls	r3, r3, #30
 8006bf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bfe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006c02:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c16:	f003 030f 	and.w	r3, r3, #15
 8006c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c24:	4013      	ands	r3, r2
 8006c26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c32:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c46:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8006c4a:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c54:	4013      	ands	r3, r2
 8006c56:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c5e:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8006c62:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d011      	beq.n	8006ca2 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00a      	beq.n	8006ca2 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c94:	651a      	str	r2, [r3, #80]	; 0x50
 8006c96:	4b64      	ldr	r3, [pc, #400]	; (8006e28 <HAL_FDCAN_IRQHandler+0x24c>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fa65 	bl	800716c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d01e      	beq.n	8006cee <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d017      	beq.n	8006cee <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006cd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006cde:	651a      	str	r2, [r3, #80]	; 0x50
 8006ce0:	4b51      	ldr	r3, [pc, #324]	; (8006e28 <HAL_FDCAN_IRQHandler+0x24c>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006ce6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fa16 	bl	800711a <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8006cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00d      	beq.n	8006d10 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006cfa:	4b4c      	ldr	r3, [pc, #304]	; (8006e2c <HAL_FDCAN_IRQHandler+0x250>)
 8006cfc:	400b      	ands	r3, r1
 8006cfe:	6513      	str	r3, [r2, #80]	; 0x50
 8006d00:	4a49      	ldr	r2, [pc, #292]	; (8006e28 <HAL_FDCAN_IRQHandler+0x24c>)
 8006d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d04:	0f9b      	lsrs	r3, r3, #30
 8006d06:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8006d08:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f9c4 	bl	8007098 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00d      	beq.n	8006d32 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d1c:	4b43      	ldr	r3, [pc, #268]	; (8006e2c <HAL_FDCAN_IRQHandler+0x250>)
 8006d1e:	400b      	ands	r3, r1
 8006d20:	6513      	str	r3, [r2, #80]	; 0x50
 8006d22:	4a41      	ldr	r2, [pc, #260]	; (8006e28 <HAL_FDCAN_IRQHandler+0x24c>)
 8006d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d26:	0f9b      	lsrs	r3, r3, #30
 8006d28:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006d2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 f9be 	bl	80070ae <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8006d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00d      	beq.n	8006d54 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d3e:	4b3b      	ldr	r3, [pc, #236]	; (8006e2c <HAL_FDCAN_IRQHandler+0x250>)
 8006d40:	400b      	ands	r3, r1
 8006d42:	6513      	str	r3, [r2, #80]	; 0x50
 8006d44:	4a38      	ldr	r2, [pc, #224]	; (8006e28 <HAL_FDCAN_IRQHandler+0x24c>)
 8006d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d48:	0f9b      	lsrs	r3, r3, #30
 8006d4a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006d4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f9b8 	bl	80070c4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00d      	beq.n	8006d76 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d60:	4b32      	ldr	r3, [pc, #200]	; (8006e2c <HAL_FDCAN_IRQHandler+0x250>)
 8006d62:	400b      	ands	r3, r1
 8006d64:	6513      	str	r3, [r2, #80]	; 0x50
 8006d66:	4a30      	ldr	r2, [pc, #192]	; (8006e28 <HAL_FDCAN_IRQHandler+0x24c>)
 8006d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6a:	0f9b      	lsrs	r3, r3, #30
 8006d6c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006d6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f9b2 	bl	80070da <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d011      	beq.n	8006da8 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00a      	beq.n	8006da8 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d9a:	651a      	str	r2, [r3, #80]	; 0x50
 8006d9c:	4b22      	ldr	r3, [pc, #136]	; (8006e28 <HAL_FDCAN_IRQHandler+0x24c>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f9a4 	bl	80070f0 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d01e      	beq.n	8006df4 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d017      	beq.n	8006df4 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006dcc:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dd8:	4013      	ands	r3, r2
 8006dda:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006de4:	651a      	str	r2, [r3, #80]	; 0x50
 8006de6:	4b10      	ldr	r3, [pc, #64]	; (8006e28 <HAL_FDCAN_IRQHandler+0x24c>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006dec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f988 	bl	8007104 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d016      	beq.n	8006e30 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00f      	beq.n	8006e30 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006e18:	651a      	str	r2, [r3, #80]	; 0x50
 8006e1a:	4b03      	ldr	r3, [pc, #12]	; (8006e28 <HAL_FDCAN_IRQHandler+0x24c>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f985 	bl	8007130 <HAL_FDCAN_RxBufferNewMessageCallback>
 8006e26:	e003      	b.n	8006e30 <HAL_FDCAN_IRQHandler+0x254>
 8006e28:	4000a800 	.word	0x4000a800
 8006e2c:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d011      	beq.n	8006e62 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00a      	beq.n	8006e62 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006e54:	651a      	str	r2, [r3, #80]	; 0x50
 8006e56:	4b8d      	ldr	r3, [pc, #564]	; (800708c <HAL_FDCAN_IRQHandler+0x4b0>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 f971 	bl	8007144 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d011      	beq.n	8006e94 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00a      	beq.n	8006e94 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006e86:	651a      	str	r2, [r3, #80]	; 0x50
 8006e88:	4b80      	ldr	r3, [pc, #512]	; (800708c <HAL_FDCAN_IRQHandler+0x4b0>)
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f962 	bl	8007158 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d016      	beq.n	8006ed0 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00f      	beq.n	8006ed0 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006eb8:	651a      	str	r2, [r3, #80]	; 0x50
 8006eba:	4b74      	ldr	r3, [pc, #464]	; (800708c <HAL_FDCAN_IRQHandler+0x4b0>)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ec6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00d      	beq.n	8006ef2 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006edc:	4b6c      	ldr	r3, [pc, #432]	; (8007090 <HAL_FDCAN_IRQHandler+0x4b4>)
 8006ede:	400b      	ands	r3, r1
 8006ee0:	6513      	str	r3, [r2, #80]	; 0x50
 8006ee2:	4a6a      	ldr	r2, [pc, #424]	; (800708c <HAL_FDCAN_IRQHandler+0x4b0>)
 8006ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee6:	0f9b      	lsrs	r3, r3, #30
 8006ee8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006eea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f951 	bl	8007194 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d011      	beq.n	8006f1c <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006efe:	4b64      	ldr	r3, [pc, #400]	; (8007090 <HAL_FDCAN_IRQHandler+0x4b4>)
 8006f00:	400b      	ands	r3, r1
 8006f02:	6513      	str	r3, [r2, #80]	; 0x50
 8006f04:	4a61      	ldr	r2, [pc, #388]	; (800708c <HAL_FDCAN_IRQHandler+0x4b0>)
 8006f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f08:	0f9b      	lsrs	r3, r3, #30
 8006f0a:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f14:	431a      	orrs	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a5c      	ldr	r2, [pc, #368]	; (8007094 <HAL_FDCAN_IRQHandler+0x4b8>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	f040 80a6 	bne.w	8007074 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f003 0303 	and.w	r3, r3, #3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f000 809e 	beq.w	8007074 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	f003 030f 	and.w	r3, r3, #15
 8006f42:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f5a:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f62:	6a3a      	ldr	r2, [r7, #32]
 8006f64:	4013      	ands	r3, r2
 8006f66:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006f72:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7a:	69fa      	ldr	r2, [r7, #28]
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8006f8a:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f92:	69ba      	ldr	r2, [r7, #24]
 8006f94:	4013      	ands	r3, r2
 8006f96:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8006fa2:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	4013      	ands	r3, r2
 8006fae:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d007      	beq.n	8006fc6 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fbc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8006fbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f8f2 	bl	80071aa <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d007      	beq.n	8006fdc <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	6a3a      	ldr	r2, [r7, #32]
 8006fd2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8006fd4:	6a39      	ldr	r1, [r7, #32]
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f8f2 	bl	80071c0 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d01b      	beq.n	8007022 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	6a1b      	ldr	r3, [r3, #32]
 8006ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d014      	beq.n	8007022 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffe:	0c1b      	lsrs	r3, r3, #16
 8007000:	b29b      	uxth	r3, r3
 8007002:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800700a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800700e:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	2240      	movs	r2, #64	; 0x40
 8007016:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	6939      	ldr	r1, [r7, #16]
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 f8da 	bl	80071d6 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d007      	beq.n	8007038 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	69fa      	ldr	r2, [r7, #28]
 800702e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8007030:	69f9      	ldr	r1, [r7, #28]
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f8db 	bl	80071ee <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00b      	beq.n	8007056 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	69ba      	ldr	r2, [r7, #24]
 8007044:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	431a      	orrs	r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00b      	beq.n	8007074 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	431a      	orrs	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800707a:	2b00      	cmp	r3, #0
 800707c:	d002      	beq.n	8007084 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f87e 	bl	8007180 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007084:	bf00      	nop
 8007086:	3748      	adds	r7, #72	; 0x48
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	4000a800 	.word	0x4000a800
 8007090:	3fcfffff 	.word	0x3fcfffff
 8007094:	4000a000 	.word	0x4000a000

08007098 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80070a2:	bf00      	nop
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr

080070ae <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b083      	sub	sp, #12
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
 80070b6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80070ce:	bf00      	nop
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80070da:	b480      	push	{r7}
 80070dc:	b083      	sub	sp, #12
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80070f8:	bf00      	nop
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800710e:	bf00      	nop
 8007110:	370c      	adds	r7, #12
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr

0800711a <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800711a:	b480      	push	{r7}
 800711c:	b083      	sub	sp, #12
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
 8007122:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007124:	bf00      	nop
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8007138:	bf00      	nop
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800719e:	bf00      	nop
 80071a0:	370c      	adds	r7, #12
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr

080071aa <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b083      	sub	sp, #12
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
 80071b2:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80071ca:	bf00      	nop
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b085      	sub	sp, #20
 80071da:	af00      	add	r7, sp, #0
 80071dc:	60f8      	str	r0, [r7, #12]
 80071de:	60b9      	str	r1, [r7, #8]
 80071e0:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80071e2:	bf00      	nop
 80071e4:	3714      	adds	r7, #20
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b083      	sub	sp, #12
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007210:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800721a:	4ba7      	ldr	r3, [pc, #668]	; (80074b8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800721c:	4013      	ands	r3, r2
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	0091      	lsls	r1, r2, #2
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	6812      	ldr	r2, [r2, #0]
 8007226:	430b      	orrs	r3, r1
 8007228:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007234:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723c:	041a      	lsls	r2, r3, #16
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	430a      	orrs	r2, r1
 8007244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	4413      	add	r3, r2
 8007250:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800725a:	4b97      	ldr	r3, [pc, #604]	; (80074b8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800725c:	4013      	ands	r3, r2
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	0091      	lsls	r1, r2, #2
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	6812      	ldr	r2, [r2, #0]
 8007266:	430b      	orrs	r3, r1
 8007268:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007274:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800727c:	041a      	lsls	r2, r3, #16
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800728c:	005b      	lsls	r3, r3, #1
 800728e:	68ba      	ldr	r2, [r7, #8]
 8007290:	4413      	add	r3, r2
 8007292:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800729c:	4b86      	ldr	r3, [pc, #536]	; (80074b8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800729e:	4013      	ands	r3, r2
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	0091      	lsls	r1, r2, #2
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	6812      	ldr	r2, [r2, #0]
 80072a8:	430b      	orrs	r3, r1
 80072aa:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80072b6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072be:	041a      	lsls	r2, r3, #16
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	430a      	orrs	r2, r1
 80072c6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80072d2:	fb02 f303 	mul.w	r3, r2, r3
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	4413      	add	r3, r2
 80072da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80072e4:	4b74      	ldr	r3, [pc, #464]	; (80074b8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80072e6:	4013      	ands	r3, r2
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	0091      	lsls	r1, r2, #2
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	6812      	ldr	r2, [r2, #0]
 80072f0:	430b      	orrs	r3, r1
 80072f2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072fe:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007306:	041a      	lsls	r2, r3, #16
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	430a      	orrs	r2, r1
 800730e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800731a:	fb02 f303 	mul.w	r3, r2, r3
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	4413      	add	r3, r2
 8007322:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800732c:	4b62      	ldr	r3, [pc, #392]	; (80074b8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800732e:	4013      	ands	r3, r2
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	0091      	lsls	r1, r2, #2
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	6812      	ldr	r2, [r2, #0]
 8007338:	430b      	orrs	r3, r1
 800733a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007346:	fb02 f303 	mul.w	r3, r2, r3
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	4413      	add	r3, r2
 800734e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007358:	4b57      	ldr	r3, [pc, #348]	; (80074b8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800735a:	4013      	ands	r3, r2
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	0091      	lsls	r1, r2, #2
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	6812      	ldr	r2, [r2, #0]
 8007364:	430b      	orrs	r3, r1
 8007366:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007372:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800737a:	041a      	lsls	r2, r3, #16
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	430a      	orrs	r2, r1
 8007382:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800738a:	005b      	lsls	r3, r3, #1
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	4413      	add	r3, r2
 8007390:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800739a:	4b47      	ldr	r3, [pc, #284]	; (80074b8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800739c:	4013      	ands	r3, r2
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	0091      	lsls	r1, r2, #2
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	6812      	ldr	r2, [r2, #0]
 80073a6:	430b      	orrs	r3, r1
 80073a8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80073b4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073bc:	041a      	lsls	r2, r3, #16
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	430a      	orrs	r2, r1
 80073c4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80073d0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073d8:	061a      	lsls	r2, r3, #24
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	430a      	orrs	r2, r1
 80073e0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073e8:	4b34      	ldr	r3, [pc, #208]	; (80074bc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80073ea:	4413      	add	r3, r2
 80073ec:	009a      	lsls	r2, r3, #2
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	441a      	add	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800740a:	00db      	lsls	r3, r3, #3
 800740c:	441a      	add	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741a:	6879      	ldr	r1, [r7, #4]
 800741c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800741e:	fb01 f303 	mul.w	r3, r1, r3
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	441a      	add	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007432:	6879      	ldr	r1, [r7, #4]
 8007434:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007436:	fb01 f303 	mul.w	r3, r1, r3
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	441a      	add	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800744a:	6879      	ldr	r1, [r7, #4]
 800744c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800744e:	fb01 f303 	mul.w	r3, r1, r3
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	441a      	add	r2, r3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007466:	00db      	lsls	r3, r3, #3
 8007468:	441a      	add	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800747a:	6879      	ldr	r1, [r7, #4]
 800747c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800747e:	fb01 f303 	mul.w	r3, r1, r3
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	441a      	add	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007496:	6879      	ldr	r1, [r7, #4]
 8007498:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800749a:	fb01 f303 	mul.w	r3, r1, r3
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	441a      	add	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ae:	4a04      	ldr	r2, [pc, #16]	; (80074c0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d915      	bls.n	80074e0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80074b4:	e006      	b.n	80074c4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80074b6:	bf00      	nop
 80074b8:	ffff0003 	.word	0xffff0003
 80074bc:	10002b00 	.word	0x10002b00
 80074c0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074ca:	f043 0220 	orr.w	r2, r3, #32
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2203      	movs	r2, #3
 80074d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e010      	b.n	8007502 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074e4:	60fb      	str	r3, [r7, #12]
 80074e6:	e005      	b.n	80074f4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	3304      	adds	r3, #4
 80074f2:	60fb      	str	r3, [r7, #12]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d3f3      	bcc.n	80074e8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3714      	adds	r7, #20
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop

08007510 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8007510:	b480      	push	{r7}
 8007512:	b089      	sub	sp, #36	; 0x24
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
 800751c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10a      	bne.n	800753c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800752e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007536:	4313      	orrs	r3, r2
 8007538:	61fb      	str	r3, [r7, #28]
 800753a:	e00a      	b.n	8007552 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8007544:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800754a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800754c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007550:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800755c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8007562:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8007568:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800756e:	4313      	orrs	r3, r2
 8007570:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	fb01 f303 	mul.w	r3, r1, r3
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4413      	add	r3, r2
 8007586:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	69fa      	ldr	r2, [r7, #28]
 800758c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	3304      	adds	r3, #4
 8007592:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	693a      	ldr	r2, [r7, #16]
 8007598:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	3304      	adds	r3, #4
 800759e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80075a0:	2300      	movs	r3, #0
 80075a2:	617b      	str	r3, [r7, #20]
 80075a4:	e020      	b.n	80075e8 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	3303      	adds	r3, #3
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	4413      	add	r3, r2
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	3302      	adds	r3, #2
 80075b6:	6879      	ldr	r1, [r7, #4]
 80075b8:	440b      	add	r3, r1
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80075be:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	3301      	adds	r3, #1
 80075c4:	6879      	ldr	r1, [r7, #4]
 80075c6:	440b      	add	r3, r1
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80075cc:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80075ce:	6879      	ldr	r1, [r7, #4]
 80075d0:	697a      	ldr	r2, [r7, #20]
 80075d2:	440a      	add	r2, r1
 80075d4:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80075d6:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	3304      	adds	r3, #4
 80075e0:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	3304      	adds	r3, #4
 80075e6:	617b      	str	r3, [r7, #20]
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	0c1b      	lsrs	r3, r3, #16
 80075ee:	4a06      	ldr	r2, [pc, #24]	; (8007608 <FDCAN_CopyMessageToRAM+0xf8>)
 80075f0:	5cd3      	ldrb	r3, [r2, r3]
 80075f2:	461a      	mov	r2, r3
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d3d5      	bcc.n	80075a6 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80075fa:	bf00      	nop
 80075fc:	bf00      	nop
 80075fe:	3724      	adds	r7, #36	; 0x24
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr
 8007608:	08013d94 	.word	0x08013d94

0800760c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800760c:	b480      	push	{r7}
 800760e:	b089      	sub	sp, #36	; 0x24
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007616:	2300      	movs	r3, #0
 8007618:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800761a:	4b89      	ldr	r3, [pc, #548]	; (8007840 <HAL_GPIO_Init+0x234>)
 800761c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800761e:	e194      	b.n	800794a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	2101      	movs	r1, #1
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	fa01 f303 	lsl.w	r3, r1, r3
 800762c:	4013      	ands	r3, r2
 800762e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	2b00      	cmp	r3, #0
 8007634:	f000 8186 	beq.w	8007944 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d00b      	beq.n	8007658 <HAL_GPIO_Init+0x4c>
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	2b02      	cmp	r3, #2
 8007646:	d007      	beq.n	8007658 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800764c:	2b11      	cmp	r3, #17
 800764e:	d003      	beq.n	8007658 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	2b12      	cmp	r3, #18
 8007656:	d130      	bne.n	80076ba <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	005b      	lsls	r3, r3, #1
 8007662:	2203      	movs	r2, #3
 8007664:	fa02 f303 	lsl.w	r3, r2, r3
 8007668:	43db      	mvns	r3, r3
 800766a:	69ba      	ldr	r2, [r7, #24]
 800766c:	4013      	ands	r3, r2
 800766e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	68da      	ldr	r2, [r3, #12]
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	005b      	lsls	r3, r3, #1
 8007678:	fa02 f303 	lsl.w	r3, r2, r3
 800767c:	69ba      	ldr	r2, [r7, #24]
 800767e:	4313      	orrs	r3, r2
 8007680:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	69ba      	ldr	r2, [r7, #24]
 8007686:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800768e:	2201      	movs	r2, #1
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	fa02 f303 	lsl.w	r3, r2, r3
 8007696:	43db      	mvns	r3, r3
 8007698:	69ba      	ldr	r2, [r7, #24]
 800769a:	4013      	ands	r3, r2
 800769c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	091b      	lsrs	r3, r3, #4
 80076a4:	f003 0201 	and.w	r2, r3, #1
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	fa02 f303 	lsl.w	r3, r2, r3
 80076ae:	69ba      	ldr	r2, [r7, #24]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	69ba      	ldr	r2, [r7, #24]
 80076b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	005b      	lsls	r3, r3, #1
 80076c4:	2203      	movs	r2, #3
 80076c6:	fa02 f303 	lsl.w	r3, r2, r3
 80076ca:	43db      	mvns	r3, r3
 80076cc:	69ba      	ldr	r2, [r7, #24]
 80076ce:	4013      	ands	r3, r2
 80076d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	689a      	ldr	r2, [r3, #8]
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	005b      	lsls	r3, r3, #1
 80076da:	fa02 f303 	lsl.w	r3, r2, r3
 80076de:	69ba      	ldr	r2, [r7, #24]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	69ba      	ldr	r2, [r7, #24]
 80076e8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d003      	beq.n	80076fa <HAL_GPIO_Init+0xee>
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	2b12      	cmp	r3, #18
 80076f8:	d123      	bne.n	8007742 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	08da      	lsrs	r2, r3, #3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	3208      	adds	r2, #8
 8007702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	f003 0307 	and.w	r3, r3, #7
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	220f      	movs	r2, #15
 8007712:	fa02 f303 	lsl.w	r3, r2, r3
 8007716:	43db      	mvns	r3, r3
 8007718:	69ba      	ldr	r2, [r7, #24]
 800771a:	4013      	ands	r3, r2
 800771c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	691a      	ldr	r2, [r3, #16]
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	f003 0307 	and.w	r3, r3, #7
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	fa02 f303 	lsl.w	r3, r2, r3
 800772e:	69ba      	ldr	r2, [r7, #24]
 8007730:	4313      	orrs	r3, r2
 8007732:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	08da      	lsrs	r2, r3, #3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	3208      	adds	r2, #8
 800773c:	69b9      	ldr	r1, [r7, #24]
 800773e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	005b      	lsls	r3, r3, #1
 800774c:	2203      	movs	r2, #3
 800774e:	fa02 f303 	lsl.w	r3, r2, r3
 8007752:	43db      	mvns	r3, r3
 8007754:	69ba      	ldr	r2, [r7, #24]
 8007756:	4013      	ands	r3, r2
 8007758:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f003 0203 	and.w	r2, r3, #3
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	005b      	lsls	r3, r3, #1
 8007766:	fa02 f303 	lsl.w	r3, r2, r3
 800776a:	69ba      	ldr	r2, [r7, #24]
 800776c:	4313      	orrs	r3, r2
 800776e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	69ba      	ldr	r2, [r7, #24]
 8007774:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800777e:	2b00      	cmp	r3, #0
 8007780:	f000 80e0 	beq.w	8007944 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007784:	4b2f      	ldr	r3, [pc, #188]	; (8007844 <HAL_GPIO_Init+0x238>)
 8007786:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800778a:	4a2e      	ldr	r2, [pc, #184]	; (8007844 <HAL_GPIO_Init+0x238>)
 800778c:	f043 0302 	orr.w	r3, r3, #2
 8007790:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007794:	4b2b      	ldr	r3, [pc, #172]	; (8007844 <HAL_GPIO_Init+0x238>)
 8007796:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800779a:	f003 0302 	and.w	r3, r3, #2
 800779e:	60fb      	str	r3, [r7, #12]
 80077a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80077a2:	4a29      	ldr	r2, [pc, #164]	; (8007848 <HAL_GPIO_Init+0x23c>)
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	089b      	lsrs	r3, r3, #2
 80077a8:	3302      	adds	r3, #2
 80077aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	f003 0303 	and.w	r3, r3, #3
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	220f      	movs	r2, #15
 80077ba:	fa02 f303 	lsl.w	r3, r2, r3
 80077be:	43db      	mvns	r3, r3
 80077c0:	69ba      	ldr	r2, [r7, #24]
 80077c2:	4013      	ands	r3, r2
 80077c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a20      	ldr	r2, [pc, #128]	; (800784c <HAL_GPIO_Init+0x240>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d052      	beq.n	8007874 <HAL_GPIO_Init+0x268>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a1f      	ldr	r2, [pc, #124]	; (8007850 <HAL_GPIO_Init+0x244>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d031      	beq.n	800783a <HAL_GPIO_Init+0x22e>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a1e      	ldr	r2, [pc, #120]	; (8007854 <HAL_GPIO_Init+0x248>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d02b      	beq.n	8007836 <HAL_GPIO_Init+0x22a>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a1d      	ldr	r2, [pc, #116]	; (8007858 <HAL_GPIO_Init+0x24c>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d025      	beq.n	8007832 <HAL_GPIO_Init+0x226>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a1c      	ldr	r2, [pc, #112]	; (800785c <HAL_GPIO_Init+0x250>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d01f      	beq.n	800782e <HAL_GPIO_Init+0x222>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a1b      	ldr	r2, [pc, #108]	; (8007860 <HAL_GPIO_Init+0x254>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d019      	beq.n	800782a <HAL_GPIO_Init+0x21e>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a1a      	ldr	r2, [pc, #104]	; (8007864 <HAL_GPIO_Init+0x258>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d013      	beq.n	8007826 <HAL_GPIO_Init+0x21a>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a19      	ldr	r2, [pc, #100]	; (8007868 <HAL_GPIO_Init+0x25c>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d00d      	beq.n	8007822 <HAL_GPIO_Init+0x216>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a18      	ldr	r2, [pc, #96]	; (800786c <HAL_GPIO_Init+0x260>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d007      	beq.n	800781e <HAL_GPIO_Init+0x212>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a17      	ldr	r2, [pc, #92]	; (8007870 <HAL_GPIO_Init+0x264>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d101      	bne.n	800781a <HAL_GPIO_Init+0x20e>
 8007816:	2309      	movs	r3, #9
 8007818:	e02d      	b.n	8007876 <HAL_GPIO_Init+0x26a>
 800781a:	230a      	movs	r3, #10
 800781c:	e02b      	b.n	8007876 <HAL_GPIO_Init+0x26a>
 800781e:	2308      	movs	r3, #8
 8007820:	e029      	b.n	8007876 <HAL_GPIO_Init+0x26a>
 8007822:	2307      	movs	r3, #7
 8007824:	e027      	b.n	8007876 <HAL_GPIO_Init+0x26a>
 8007826:	2306      	movs	r3, #6
 8007828:	e025      	b.n	8007876 <HAL_GPIO_Init+0x26a>
 800782a:	2305      	movs	r3, #5
 800782c:	e023      	b.n	8007876 <HAL_GPIO_Init+0x26a>
 800782e:	2304      	movs	r3, #4
 8007830:	e021      	b.n	8007876 <HAL_GPIO_Init+0x26a>
 8007832:	2303      	movs	r3, #3
 8007834:	e01f      	b.n	8007876 <HAL_GPIO_Init+0x26a>
 8007836:	2302      	movs	r3, #2
 8007838:	e01d      	b.n	8007876 <HAL_GPIO_Init+0x26a>
 800783a:	2301      	movs	r3, #1
 800783c:	e01b      	b.n	8007876 <HAL_GPIO_Init+0x26a>
 800783e:	bf00      	nop
 8007840:	58000080 	.word	0x58000080
 8007844:	58024400 	.word	0x58024400
 8007848:	58000400 	.word	0x58000400
 800784c:	58020000 	.word	0x58020000
 8007850:	58020400 	.word	0x58020400
 8007854:	58020800 	.word	0x58020800
 8007858:	58020c00 	.word	0x58020c00
 800785c:	58021000 	.word	0x58021000
 8007860:	58021400 	.word	0x58021400
 8007864:	58021800 	.word	0x58021800
 8007868:	58021c00 	.word	0x58021c00
 800786c:	58022000 	.word	0x58022000
 8007870:	58022400 	.word	0x58022400
 8007874:	2300      	movs	r3, #0
 8007876:	69fa      	ldr	r2, [r7, #28]
 8007878:	f002 0203 	and.w	r2, r2, #3
 800787c:	0092      	lsls	r2, r2, #2
 800787e:	4093      	lsls	r3, r2
 8007880:	69ba      	ldr	r2, [r7, #24]
 8007882:	4313      	orrs	r3, r2
 8007884:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007886:	4938      	ldr	r1, [pc, #224]	; (8007968 <HAL_GPIO_Init+0x35c>)
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	089b      	lsrs	r3, r3, #2
 800788c:	3302      	adds	r3, #2
 800788e:	69ba      	ldr	r2, [r7, #24]
 8007890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	43db      	mvns	r3, r3
 800789e:	69ba      	ldr	r2, [r7, #24]
 80078a0:	4013      	ands	r3, r2
 80078a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d003      	beq.n	80078b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80078b0:	69ba      	ldr	r2, [r7, #24]
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	43db      	mvns	r3, r3
 80078c8:	69ba      	ldr	r2, [r7, #24]
 80078ca:	4013      	ands	r3, r2
 80078cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d003      	beq.n	80078e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80078da:	69ba      	ldr	r2, [r7, #24]
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	4313      	orrs	r3, r2
 80078e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	69ba      	ldr	r2, [r7, #24]
 80078e6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80078e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	43db      	mvns	r3, r3
 80078f4:	69ba      	ldr	r2, [r7, #24]
 80078f6:	4013      	ands	r3, r2
 80078f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d003      	beq.n	800790e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8007906:	69ba      	ldr	r2, [r7, #24]
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	4313      	orrs	r3, r2
 800790c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800790e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	43db      	mvns	r3, r3
 8007922:	69ba      	ldr	r2, [r7, #24]
 8007924:	4013      	ands	r3, r2
 8007926:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d003      	beq.n	800793c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8007934:	69ba      	ldr	r2, [r7, #24]
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	4313      	orrs	r3, r2
 800793a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800793c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	3301      	adds	r3, #1
 8007948:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	fa22 f303 	lsr.w	r3, r2, r3
 8007954:	2b00      	cmp	r3, #0
 8007956:	f47f ae63 	bne.w	8007620 <HAL_GPIO_Init+0x14>
  }
}
 800795a:	bf00      	nop
 800795c:	bf00      	nop
 800795e:	3724      	adds	r7, #36	; 0x24
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr
 8007968:	58000400 	.word	0x58000400

0800796c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	460b      	mov	r3, r1
 8007976:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	691a      	ldr	r2, [r3, #16]
 800797c:	887b      	ldrh	r3, [r7, #2]
 800797e:	4013      	ands	r3, r2
 8007980:	2b00      	cmp	r3, #0
 8007982:	d002      	beq.n	800798a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007984:	2301      	movs	r3, #1
 8007986:	73fb      	strb	r3, [r7, #15]
 8007988:	e001      	b.n	800798e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800798a:	2300      	movs	r3, #0
 800798c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800798e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3714      	adds	r7, #20
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	460b      	mov	r3, r1
 80079a6:	807b      	strh	r3, [r7, #2]
 80079a8:	4613      	mov	r3, r2
 80079aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80079ac:	787b      	ldrb	r3, [r7, #1]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d003      	beq.n	80079ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80079b2:	887a      	ldrh	r2, [r7, #2]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80079b8:	e003      	b.n	80079c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80079ba:	887b      	ldrh	r3, [r7, #2]
 80079bc:	041a      	lsls	r2, r3, #16
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	619a      	str	r2, [r3, #24]
}
 80079c2:	bf00      	nop
 80079c4:	370c      	adds	r7, #12
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr

080079ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80079ce:	b480      	push	{r7}
 80079d0:	b085      	sub	sp, #20
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
 80079d6:	460b      	mov	r3, r1
 80079d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80079e0:	887a      	ldrh	r2, [r7, #2]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	4013      	ands	r3, r2
 80079e6:	041a      	lsls	r2, r3, #16
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	43d9      	mvns	r1, r3
 80079ec:	887b      	ldrh	r3, [r7, #2]
 80079ee:	400b      	ands	r3, r1
 80079f0:	431a      	orrs	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	619a      	str	r2, [r3, #24]
}
 80079f6:	bf00      	nop
 80079f8:	3714      	adds	r7, #20
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
	...

08007a04 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007a0c:	4a08      	ldr	r2, [pc, #32]	; (8007a30 <HAL_HSEM_FastTake+0x2c>)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	3320      	adds	r3, #32
 8007a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a16:	4a07      	ldr	r2, [pc, #28]	; (8007a34 <HAL_HSEM_FastTake+0x30>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d101      	bne.n	8007a20 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	e000      	b.n	8007a22 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	370c      	adds	r7, #12
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	58026400 	.word	0x58026400
 8007a34:	80000300 	.word	0x80000300

08007a38 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007a42:	4906      	ldr	r1, [pc, #24]	; (8007a5c <HAL_HSEM_Release+0x24>)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	58026400 	.word	0x58026400

08007a60 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a62:	b08f      	sub	sp, #60	; 0x3c
 8007a64:	af0a      	add	r7, sp, #40	; 0x28
 8007a66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d101      	bne.n	8007a72 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e116      	b.n	8007ca0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d106      	bne.n	8007a92 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f7fa fc03 	bl	8002298 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2203      	movs	r2, #3
 8007a96:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d102      	bne.n	8007aac <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f005 fe33 	bl	800d71c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	603b      	str	r3, [r7, #0]
 8007abc:	687e      	ldr	r6, [r7, #4]
 8007abe:	466d      	mov	r5, sp
 8007ac0:	f106 0410 	add.w	r4, r6, #16
 8007ac4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ac6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007ac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007aca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007acc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007ad0:	e885 0003 	stmia.w	r5, {r0, r1}
 8007ad4:	1d33      	adds	r3, r6, #4
 8007ad6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ad8:	6838      	ldr	r0, [r7, #0]
 8007ada:	f005 fdb1 	bl	800d640 <USB_CoreInit>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d005      	beq.n	8007af0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e0d7      	b.n	8007ca0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2100      	movs	r1, #0
 8007af6:	4618      	mov	r0, r3
 8007af8:	f005 fe21 	bl	800d73e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007afc:	2300      	movs	r3, #0
 8007afe:	73fb      	strb	r3, [r7, #15]
 8007b00:	e04a      	b.n	8007b98 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007b02:	7bfa      	ldrb	r2, [r7, #15]
 8007b04:	6879      	ldr	r1, [r7, #4]
 8007b06:	4613      	mov	r3, r2
 8007b08:	00db      	lsls	r3, r3, #3
 8007b0a:	1a9b      	subs	r3, r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	440b      	add	r3, r1
 8007b10:	333d      	adds	r3, #61	; 0x3d
 8007b12:	2201      	movs	r2, #1
 8007b14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007b16:	7bfa      	ldrb	r2, [r7, #15]
 8007b18:	6879      	ldr	r1, [r7, #4]
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	00db      	lsls	r3, r3, #3
 8007b1e:	1a9b      	subs	r3, r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	440b      	add	r3, r1
 8007b24:	333c      	adds	r3, #60	; 0x3c
 8007b26:	7bfa      	ldrb	r2, [r7, #15]
 8007b28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007b2a:	7bfa      	ldrb	r2, [r7, #15]
 8007b2c:	7bfb      	ldrb	r3, [r7, #15]
 8007b2e:	b298      	uxth	r0, r3
 8007b30:	6879      	ldr	r1, [r7, #4]
 8007b32:	4613      	mov	r3, r2
 8007b34:	00db      	lsls	r3, r3, #3
 8007b36:	1a9b      	subs	r3, r3, r2
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	440b      	add	r3, r1
 8007b3c:	3342      	adds	r3, #66	; 0x42
 8007b3e:	4602      	mov	r2, r0
 8007b40:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007b42:	7bfa      	ldrb	r2, [r7, #15]
 8007b44:	6879      	ldr	r1, [r7, #4]
 8007b46:	4613      	mov	r3, r2
 8007b48:	00db      	lsls	r3, r3, #3
 8007b4a:	1a9b      	subs	r3, r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	440b      	add	r3, r1
 8007b50:	333f      	adds	r3, #63	; 0x3f
 8007b52:	2200      	movs	r2, #0
 8007b54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007b56:	7bfa      	ldrb	r2, [r7, #15]
 8007b58:	6879      	ldr	r1, [r7, #4]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	00db      	lsls	r3, r3, #3
 8007b5e:	1a9b      	subs	r3, r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	440b      	add	r3, r1
 8007b64:	3344      	adds	r3, #68	; 0x44
 8007b66:	2200      	movs	r2, #0
 8007b68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007b6a:	7bfa      	ldrb	r2, [r7, #15]
 8007b6c:	6879      	ldr	r1, [r7, #4]
 8007b6e:	4613      	mov	r3, r2
 8007b70:	00db      	lsls	r3, r3, #3
 8007b72:	1a9b      	subs	r3, r3, r2
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	440b      	add	r3, r1
 8007b78:	3348      	adds	r3, #72	; 0x48
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007b7e:	7bfa      	ldrb	r2, [r7, #15]
 8007b80:	6879      	ldr	r1, [r7, #4]
 8007b82:	4613      	mov	r3, r2
 8007b84:	00db      	lsls	r3, r3, #3
 8007b86:	1a9b      	subs	r3, r3, r2
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	440b      	add	r3, r1
 8007b8c:	3350      	adds	r3, #80	; 0x50
 8007b8e:	2200      	movs	r2, #0
 8007b90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b92:	7bfb      	ldrb	r3, [r7, #15]
 8007b94:	3301      	adds	r3, #1
 8007b96:	73fb      	strb	r3, [r7, #15]
 8007b98:	7bfa      	ldrb	r2, [r7, #15]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d3af      	bcc.n	8007b02 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	73fb      	strb	r3, [r7, #15]
 8007ba6:	e044      	b.n	8007c32 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007ba8:	7bfa      	ldrb	r2, [r7, #15]
 8007baa:	6879      	ldr	r1, [r7, #4]
 8007bac:	4613      	mov	r3, r2
 8007bae:	00db      	lsls	r3, r3, #3
 8007bb0:	1a9b      	subs	r3, r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	440b      	add	r3, r1
 8007bb6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8007bba:	2200      	movs	r2, #0
 8007bbc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007bbe:	7bfa      	ldrb	r2, [r7, #15]
 8007bc0:	6879      	ldr	r1, [r7, #4]
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	00db      	lsls	r3, r3, #3
 8007bc6:	1a9b      	subs	r3, r3, r2
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	440b      	add	r3, r1
 8007bcc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007bd0:	7bfa      	ldrb	r2, [r7, #15]
 8007bd2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007bd4:	7bfa      	ldrb	r2, [r7, #15]
 8007bd6:	6879      	ldr	r1, [r7, #4]
 8007bd8:	4613      	mov	r3, r2
 8007bda:	00db      	lsls	r3, r3, #3
 8007bdc:	1a9b      	subs	r3, r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	440b      	add	r3, r1
 8007be2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007be6:	2200      	movs	r2, #0
 8007be8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007bea:	7bfa      	ldrb	r2, [r7, #15]
 8007bec:	6879      	ldr	r1, [r7, #4]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	00db      	lsls	r3, r3, #3
 8007bf2:	1a9b      	subs	r3, r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	440b      	add	r3, r1
 8007bf8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007c00:	7bfa      	ldrb	r2, [r7, #15]
 8007c02:	6879      	ldr	r1, [r7, #4]
 8007c04:	4613      	mov	r3, r2
 8007c06:	00db      	lsls	r3, r3, #3
 8007c08:	1a9b      	subs	r3, r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	440b      	add	r3, r1
 8007c0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007c12:	2200      	movs	r2, #0
 8007c14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007c16:	7bfa      	ldrb	r2, [r7, #15]
 8007c18:	6879      	ldr	r1, [r7, #4]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	00db      	lsls	r3, r3, #3
 8007c1e:	1a9b      	subs	r3, r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	440b      	add	r3, r1
 8007c24:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007c28:	2200      	movs	r2, #0
 8007c2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c2c:	7bfb      	ldrb	r3, [r7, #15]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	73fb      	strb	r3, [r7, #15]
 8007c32:	7bfa      	ldrb	r2, [r7, #15]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d3b5      	bcc.n	8007ba8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	603b      	str	r3, [r7, #0]
 8007c42:	687e      	ldr	r6, [r7, #4]
 8007c44:	466d      	mov	r5, sp
 8007c46:	f106 0410 	add.w	r4, r6, #16
 8007c4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007c4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007c52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007c56:	e885 0003 	stmia.w	r5, {r0, r1}
 8007c5a:	1d33      	adds	r3, r6, #4
 8007c5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c5e:	6838      	ldr	r0, [r7, #0]
 8007c60:	f005 fd98 	bl	800d794 <USB_DevInit>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d005      	beq.n	8007c76 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2202      	movs	r2, #2
 8007c6e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e014      	b.n	8007ca0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d102      	bne.n	8007c94 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f80a 	bl	8007ca8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f005 ff3a 	bl	800db12 <USB_DevDisconnect>

  return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3714      	adds	r7, #20
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ca8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007cd6:	4b05      	ldr	r3, [pc, #20]	; (8007cec <HAL_PCDEx_ActivateLPM+0x44>)
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3714      	adds	r7, #20
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr
 8007cec:	10000003 	.word	0x10000003

08007cf0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007cf8:	4b29      	ldr	r3, [pc, #164]	; (8007da0 <HAL_PWREx_ConfigSupply+0xb0>)
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	f003 0307 	and.w	r3, r3, #7
 8007d00:	2b06      	cmp	r3, #6
 8007d02:	d00a      	beq.n	8007d1a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007d04:	4b26      	ldr	r3, [pc, #152]	; (8007da0 <HAL_PWREx_ConfigSupply+0xb0>)
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d001      	beq.n	8007d16 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e040      	b.n	8007d98 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007d16:	2300      	movs	r3, #0
 8007d18:	e03e      	b.n	8007d98 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007d1a:	4b21      	ldr	r3, [pc, #132]	; (8007da0 <HAL_PWREx_ConfigSupply+0xb0>)
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8007d22:	491f      	ldr	r1, [pc, #124]	; (8007da0 <HAL_PWREx_ConfigSupply+0xb0>)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007d2a:	f7fa fd0f 	bl	800274c <HAL_GetTick>
 8007d2e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d30:	e009      	b.n	8007d46 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007d32:	f7fa fd0b 	bl	800274c <HAL_GetTick>
 8007d36:	4602      	mov	r2, r0
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d40:	d901      	bls.n	8007d46 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e028      	b.n	8007d98 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d46:	4b16      	ldr	r3, [pc, #88]	; (8007da0 <HAL_PWREx_ConfigSupply+0xb0>)
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d52:	d1ee      	bne.n	8007d32 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b1e      	cmp	r3, #30
 8007d58:	d008      	beq.n	8007d6c <HAL_PWREx_ConfigSupply+0x7c>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2b2e      	cmp	r3, #46	; 0x2e
 8007d5e:	d005      	beq.n	8007d6c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2b1d      	cmp	r3, #29
 8007d64:	d002      	beq.n	8007d6c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2b2d      	cmp	r3, #45	; 0x2d
 8007d6a:	d114      	bne.n	8007d96 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007d6c:	f7fa fcee 	bl	800274c <HAL_GetTick>
 8007d70:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007d72:	e009      	b.n	8007d88 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007d74:	f7fa fcea 	bl	800274c <HAL_GetTick>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d82:	d901      	bls.n	8007d88 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e007      	b.n	8007d98 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007d88:	4b05      	ldr	r3, [pc, #20]	; (8007da0 <HAL_PWREx_ConfigSupply+0xb0>)
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d94:	d1ee      	bne.n	8007d74 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	58024800 	.word	0x58024800

08007da4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007da4:	b480      	push	{r7}
 8007da6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007da8:	4b05      	ldr	r3, [pc, #20]	; (8007dc0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	4a04      	ldr	r2, [pc, #16]	; (8007dc0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007db2:	60d3      	str	r3, [r2, #12]
}
 8007db4:	bf00      	nop
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	58024800 	.word	0x58024800

08007dc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b08c      	sub	sp, #48	; 0x30
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d101      	bne.n	8007dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e3ff      	b.n	80085d6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 0301 	and.w	r3, r3, #1
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f000 8087 	beq.w	8007ef2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007de4:	4b99      	ldr	r3, [pc, #612]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007dec:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007dee:	4b97      	ldr	r3, [pc, #604]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df6:	2b10      	cmp	r3, #16
 8007df8:	d007      	beq.n	8007e0a <HAL_RCC_OscConfig+0x46>
 8007dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfc:	2b18      	cmp	r3, #24
 8007dfe:	d110      	bne.n	8007e22 <HAL_RCC_OscConfig+0x5e>
 8007e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e02:	f003 0303 	and.w	r3, r3, #3
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d10b      	bne.n	8007e22 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e0a:	4b90      	ldr	r3, [pc, #576]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d06c      	beq.n	8007ef0 <HAL_RCC_OscConfig+0x12c>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d168      	bne.n	8007ef0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e3d9      	b.n	80085d6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e2a:	d106      	bne.n	8007e3a <HAL_RCC_OscConfig+0x76>
 8007e2c:	4b87      	ldr	r3, [pc, #540]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a86      	ldr	r2, [pc, #536]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e36:	6013      	str	r3, [r2, #0]
 8007e38:	e02e      	b.n	8007e98 <HAL_RCC_OscConfig+0xd4>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10c      	bne.n	8007e5c <HAL_RCC_OscConfig+0x98>
 8007e42:	4b82      	ldr	r3, [pc, #520]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a81      	ldr	r2, [pc, #516]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e4c:	6013      	str	r3, [r2, #0]
 8007e4e:	4b7f      	ldr	r3, [pc, #508]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a7e      	ldr	r2, [pc, #504]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007e54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e58:	6013      	str	r3, [r2, #0]
 8007e5a:	e01d      	b.n	8007e98 <HAL_RCC_OscConfig+0xd4>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e64:	d10c      	bne.n	8007e80 <HAL_RCC_OscConfig+0xbc>
 8007e66:	4b79      	ldr	r3, [pc, #484]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a78      	ldr	r2, [pc, #480]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e70:	6013      	str	r3, [r2, #0]
 8007e72:	4b76      	ldr	r3, [pc, #472]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a75      	ldr	r2, [pc, #468]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e7c:	6013      	str	r3, [r2, #0]
 8007e7e:	e00b      	b.n	8007e98 <HAL_RCC_OscConfig+0xd4>
 8007e80:	4b72      	ldr	r3, [pc, #456]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a71      	ldr	r2, [pc, #452]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e8a:	6013      	str	r3, [r2, #0]
 8007e8c:	4b6f      	ldr	r3, [pc, #444]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a6e      	ldr	r2, [pc, #440]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d013      	beq.n	8007ec8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ea0:	f7fa fc54 	bl	800274c <HAL_GetTick>
 8007ea4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ea6:	e008      	b.n	8007eba <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ea8:	f7fa fc50 	bl	800274c <HAL_GetTick>
 8007eac:	4602      	mov	r2, r0
 8007eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	2b64      	cmp	r3, #100	; 0x64
 8007eb4:	d901      	bls.n	8007eba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	e38d      	b.n	80085d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007eba:	4b64      	ldr	r3, [pc, #400]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d0f0      	beq.n	8007ea8 <HAL_RCC_OscConfig+0xe4>
 8007ec6:	e014      	b.n	8007ef2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ec8:	f7fa fc40 	bl	800274c <HAL_GetTick>
 8007ecc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007ece:	e008      	b.n	8007ee2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ed0:	f7fa fc3c 	bl	800274c <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	2b64      	cmp	r3, #100	; 0x64
 8007edc:	d901      	bls.n	8007ee2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e379      	b.n	80085d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007ee2:	4b5a      	ldr	r3, [pc, #360]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1f0      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x10c>
 8007eee:	e000      	b.n	8007ef2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 0302 	and.w	r3, r3, #2
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f000 80ae 	beq.w	800805c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f00:	4b52      	ldr	r3, [pc, #328]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f08:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f0a:	4b50      	ldr	r3, [pc, #320]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d007      	beq.n	8007f26 <HAL_RCC_OscConfig+0x162>
 8007f16:	6a3b      	ldr	r3, [r7, #32]
 8007f18:	2b18      	cmp	r3, #24
 8007f1a:	d13a      	bne.n	8007f92 <HAL_RCC_OscConfig+0x1ce>
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	f003 0303 	and.w	r3, r3, #3
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d135      	bne.n	8007f92 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f26:	4b49      	ldr	r3, [pc, #292]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 0304 	and.w	r3, r3, #4
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d005      	beq.n	8007f3e <HAL_RCC_OscConfig+0x17a>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e34b      	b.n	80085d6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f3e:	f7fa fc35 	bl	80027ac <HAL_GetREVID>
 8007f42:	4603      	mov	r3, r0
 8007f44:	f241 0203 	movw	r2, #4099	; 0x1003
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d817      	bhi.n	8007f7c <HAL_RCC_OscConfig+0x1b8>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	2b40      	cmp	r3, #64	; 0x40
 8007f52:	d108      	bne.n	8007f66 <HAL_RCC_OscConfig+0x1a2>
 8007f54:	4b3d      	ldr	r3, [pc, #244]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007f5c:	4a3b      	ldr	r2, [pc, #236]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f62:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f64:	e07a      	b.n	800805c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f66:	4b39      	ldr	r3, [pc, #228]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	031b      	lsls	r3, r3, #12
 8007f74:	4935      	ldr	r1, [pc, #212]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007f76:	4313      	orrs	r3, r2
 8007f78:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f7a:	e06f      	b.n	800805c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f7c:	4b33      	ldr	r3, [pc, #204]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	691b      	ldr	r3, [r3, #16]
 8007f88:	061b      	lsls	r3, r3, #24
 8007f8a:	4930      	ldr	r1, [pc, #192]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f90:	e064      	b.n	800805c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d045      	beq.n	8008026 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f9a:	4b2c      	ldr	r3, [pc, #176]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f023 0219 	bic.w	r2, r3, #25
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	4929      	ldr	r1, [pc, #164]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fac:	f7fa fbce 	bl	800274c <HAL_GetTick>
 8007fb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fb2:	e008      	b.n	8007fc6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007fb4:	f7fa fbca 	bl	800274c <HAL_GetTick>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d901      	bls.n	8007fc6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	e307      	b.n	80085d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fc6:	4b21      	ldr	r3, [pc, #132]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 0304 	and.w	r3, r3, #4
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d0f0      	beq.n	8007fb4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fd2:	f7fa fbeb 	bl	80027ac <HAL_GetREVID>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	f241 0203 	movw	r2, #4099	; 0x1003
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d817      	bhi.n	8008010 <HAL_RCC_OscConfig+0x24c>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	2b40      	cmp	r3, #64	; 0x40
 8007fe6:	d108      	bne.n	8007ffa <HAL_RCC_OscConfig+0x236>
 8007fe8:	4b18      	ldr	r3, [pc, #96]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007ff0:	4a16      	ldr	r2, [pc, #88]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007ff2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ff6:	6053      	str	r3, [r2, #4]
 8007ff8:	e030      	b.n	800805c <HAL_RCC_OscConfig+0x298>
 8007ffa:	4b14      	ldr	r3, [pc, #80]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	691b      	ldr	r3, [r3, #16]
 8008006:	031b      	lsls	r3, r3, #12
 8008008:	4910      	ldr	r1, [pc, #64]	; (800804c <HAL_RCC_OscConfig+0x288>)
 800800a:	4313      	orrs	r3, r2
 800800c:	604b      	str	r3, [r1, #4]
 800800e:	e025      	b.n	800805c <HAL_RCC_OscConfig+0x298>
 8008010:	4b0e      	ldr	r3, [pc, #56]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	061b      	lsls	r3, r3, #24
 800801e:	490b      	ldr	r1, [pc, #44]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8008020:	4313      	orrs	r3, r2
 8008022:	604b      	str	r3, [r1, #4]
 8008024:	e01a      	b.n	800805c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008026:	4b09      	ldr	r3, [pc, #36]	; (800804c <HAL_RCC_OscConfig+0x288>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a08      	ldr	r2, [pc, #32]	; (800804c <HAL_RCC_OscConfig+0x288>)
 800802c:	f023 0301 	bic.w	r3, r3, #1
 8008030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008032:	f7fa fb8b 	bl	800274c <HAL_GetTick>
 8008036:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008038:	e00a      	b.n	8008050 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800803a:	f7fa fb87 	bl	800274c <HAL_GetTick>
 800803e:	4602      	mov	r2, r0
 8008040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	2b02      	cmp	r3, #2
 8008046:	d903      	bls.n	8008050 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	e2c4      	b.n	80085d6 <HAL_RCC_OscConfig+0x812>
 800804c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008050:	4ba4      	ldr	r3, [pc, #656]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 0304 	and.w	r3, r3, #4
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1ee      	bne.n	800803a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 0310 	and.w	r3, r3, #16
 8008064:	2b00      	cmp	r3, #0
 8008066:	f000 80a9 	beq.w	80081bc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800806a:	4b9e      	ldr	r3, [pc, #632]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008072:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008074:	4b9b      	ldr	r3, [pc, #620]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 8008076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008078:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	2b08      	cmp	r3, #8
 800807e:	d007      	beq.n	8008090 <HAL_RCC_OscConfig+0x2cc>
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	2b18      	cmp	r3, #24
 8008084:	d13a      	bne.n	80080fc <HAL_RCC_OscConfig+0x338>
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	f003 0303 	and.w	r3, r3, #3
 800808c:	2b01      	cmp	r3, #1
 800808e:	d135      	bne.n	80080fc <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008090:	4b94      	ldr	r3, [pc, #592]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008098:	2b00      	cmp	r3, #0
 800809a:	d005      	beq.n	80080a8 <HAL_RCC_OscConfig+0x2e4>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	69db      	ldr	r3, [r3, #28]
 80080a0:	2b80      	cmp	r3, #128	; 0x80
 80080a2:	d001      	beq.n	80080a8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	e296      	b.n	80085d6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80080a8:	f7fa fb80 	bl	80027ac <HAL_GetREVID>
 80080ac:	4603      	mov	r3, r0
 80080ae:	f241 0203 	movw	r2, #4099	; 0x1003
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d817      	bhi.n	80080e6 <HAL_RCC_OscConfig+0x322>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	2b20      	cmp	r3, #32
 80080bc:	d108      	bne.n	80080d0 <HAL_RCC_OscConfig+0x30c>
 80080be:	4b89      	ldr	r3, [pc, #548]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80080c6:	4a87      	ldr	r2, [pc, #540]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 80080c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080cc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80080ce:	e075      	b.n	80081bc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80080d0:	4b84      	ldr	r3, [pc, #528]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a1b      	ldr	r3, [r3, #32]
 80080dc:	069b      	lsls	r3, r3, #26
 80080de:	4981      	ldr	r1, [pc, #516]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 80080e0:	4313      	orrs	r3, r2
 80080e2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80080e4:	e06a      	b.n	80081bc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80080e6:	4b7f      	ldr	r3, [pc, #508]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	061b      	lsls	r3, r3, #24
 80080f4:	497b      	ldr	r1, [pc, #492]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 80080f6:	4313      	orrs	r3, r2
 80080f8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80080fa:	e05f      	b.n	80081bc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	69db      	ldr	r3, [r3, #28]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d042      	beq.n	800818a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008104:	4b77      	ldr	r3, [pc, #476]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a76      	ldr	r2, [pc, #472]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 800810a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800810e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008110:	f7fa fb1c 	bl	800274c <HAL_GetTick>
 8008114:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008116:	e008      	b.n	800812a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008118:	f7fa fb18 	bl	800274c <HAL_GetTick>
 800811c:	4602      	mov	r2, r0
 800811e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	2b02      	cmp	r3, #2
 8008124:	d901      	bls.n	800812a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e255      	b.n	80085d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800812a:	4b6e      	ldr	r3, [pc, #440]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008132:	2b00      	cmp	r3, #0
 8008134:	d0f0      	beq.n	8008118 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008136:	f7fa fb39 	bl	80027ac <HAL_GetREVID>
 800813a:	4603      	mov	r3, r0
 800813c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008140:	4293      	cmp	r3, r2
 8008142:	d817      	bhi.n	8008174 <HAL_RCC_OscConfig+0x3b0>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a1b      	ldr	r3, [r3, #32]
 8008148:	2b20      	cmp	r3, #32
 800814a:	d108      	bne.n	800815e <HAL_RCC_OscConfig+0x39a>
 800814c:	4b65      	ldr	r3, [pc, #404]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008154:	4a63      	ldr	r2, [pc, #396]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 8008156:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800815a:	6053      	str	r3, [r2, #4]
 800815c:	e02e      	b.n	80081bc <HAL_RCC_OscConfig+0x3f8>
 800815e:	4b61      	ldr	r3, [pc, #388]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a1b      	ldr	r3, [r3, #32]
 800816a:	069b      	lsls	r3, r3, #26
 800816c:	495d      	ldr	r1, [pc, #372]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 800816e:	4313      	orrs	r3, r2
 8008170:	604b      	str	r3, [r1, #4]
 8008172:	e023      	b.n	80081bc <HAL_RCC_OscConfig+0x3f8>
 8008174:	4b5b      	ldr	r3, [pc, #364]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6a1b      	ldr	r3, [r3, #32]
 8008180:	061b      	lsls	r3, r3, #24
 8008182:	4958      	ldr	r1, [pc, #352]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 8008184:	4313      	orrs	r3, r2
 8008186:	60cb      	str	r3, [r1, #12]
 8008188:	e018      	b.n	80081bc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800818a:	4b56      	ldr	r3, [pc, #344]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a55      	ldr	r2, [pc, #340]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 8008190:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008194:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008196:	f7fa fad9 	bl	800274c <HAL_GetTick>
 800819a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800819c:	e008      	b.n	80081b0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800819e:	f7fa fad5 	bl	800274c <HAL_GetTick>
 80081a2:	4602      	mov	r2, r0
 80081a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a6:	1ad3      	subs	r3, r2, r3
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	d901      	bls.n	80081b0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e212      	b.n	80085d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80081b0:	4b4c      	ldr	r3, [pc, #304]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d1f0      	bne.n	800819e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 0308 	and.w	r3, r3, #8
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d036      	beq.n	8008236 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	695b      	ldr	r3, [r3, #20]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d019      	beq.n	8008204 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80081d0:	4b44      	ldr	r3, [pc, #272]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 80081d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081d4:	4a43      	ldr	r2, [pc, #268]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 80081d6:	f043 0301 	orr.w	r3, r3, #1
 80081da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081dc:	f7fa fab6 	bl	800274c <HAL_GetTick>
 80081e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80081e2:	e008      	b.n	80081f6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081e4:	f7fa fab2 	bl	800274c <HAL_GetTick>
 80081e8:	4602      	mov	r2, r0
 80081ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ec:	1ad3      	subs	r3, r2, r3
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d901      	bls.n	80081f6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80081f2:	2303      	movs	r3, #3
 80081f4:	e1ef      	b.n	80085d6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80081f6:	4b3b      	ldr	r3, [pc, #236]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 80081f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081fa:	f003 0302 	and.w	r3, r3, #2
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d0f0      	beq.n	80081e4 <HAL_RCC_OscConfig+0x420>
 8008202:	e018      	b.n	8008236 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008204:	4b37      	ldr	r3, [pc, #220]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 8008206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008208:	4a36      	ldr	r2, [pc, #216]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 800820a:	f023 0301 	bic.w	r3, r3, #1
 800820e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008210:	f7fa fa9c 	bl	800274c <HAL_GetTick>
 8008214:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008216:	e008      	b.n	800822a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008218:	f7fa fa98 	bl	800274c <HAL_GetTick>
 800821c:	4602      	mov	r2, r0
 800821e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	2b02      	cmp	r3, #2
 8008224:	d901      	bls.n	800822a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e1d5      	b.n	80085d6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800822a:	4b2e      	ldr	r3, [pc, #184]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 800822c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800822e:	f003 0302 	and.w	r3, r3, #2
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1f0      	bne.n	8008218 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 0320 	and.w	r3, r3, #32
 800823e:	2b00      	cmp	r3, #0
 8008240:	d036      	beq.n	80082b0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	699b      	ldr	r3, [r3, #24]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d019      	beq.n	800827e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800824a:	4b26      	ldr	r3, [pc, #152]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a25      	ldr	r2, [pc, #148]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 8008250:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008254:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008256:	f7fa fa79 	bl	800274c <HAL_GetTick>
 800825a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800825c:	e008      	b.n	8008270 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800825e:	f7fa fa75 	bl	800274c <HAL_GetTick>
 8008262:	4602      	mov	r2, r0
 8008264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	2b02      	cmp	r3, #2
 800826a:	d901      	bls.n	8008270 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800826c:	2303      	movs	r3, #3
 800826e:	e1b2      	b.n	80085d6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008270:	4b1c      	ldr	r3, [pc, #112]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008278:	2b00      	cmp	r3, #0
 800827a:	d0f0      	beq.n	800825e <HAL_RCC_OscConfig+0x49a>
 800827c:	e018      	b.n	80082b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800827e:	4b19      	ldr	r3, [pc, #100]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a18      	ldr	r2, [pc, #96]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 8008284:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008288:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800828a:	f7fa fa5f 	bl	800274c <HAL_GetTick>
 800828e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008290:	e008      	b.n	80082a4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008292:	f7fa fa5b 	bl	800274c <HAL_GetTick>
 8008296:	4602      	mov	r2, r0
 8008298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829a:	1ad3      	subs	r3, r2, r3
 800829c:	2b02      	cmp	r3, #2
 800829e:	d901      	bls.n	80082a4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e198      	b.n	80085d6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80082a4:	4b0f      	ldr	r3, [pc, #60]	; (80082e4 <HAL_RCC_OscConfig+0x520>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1f0      	bne.n	8008292 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0304 	and.w	r3, r3, #4
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f000 8085 	beq.w	80083c8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80082be:	4b0a      	ldr	r3, [pc, #40]	; (80082e8 <HAL_RCC_OscConfig+0x524>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a09      	ldr	r2, [pc, #36]	; (80082e8 <HAL_RCC_OscConfig+0x524>)
 80082c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80082ca:	f7fa fa3f 	bl	800274c <HAL_GetTick>
 80082ce:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082d0:	e00c      	b.n	80082ec <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80082d2:	f7fa fa3b 	bl	800274c <HAL_GetTick>
 80082d6:	4602      	mov	r2, r0
 80082d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082da:	1ad3      	subs	r3, r2, r3
 80082dc:	2b64      	cmp	r3, #100	; 0x64
 80082de:	d905      	bls.n	80082ec <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80082e0:	2303      	movs	r3, #3
 80082e2:	e178      	b.n	80085d6 <HAL_RCC_OscConfig+0x812>
 80082e4:	58024400 	.word	0x58024400
 80082e8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082ec:	4b96      	ldr	r3, [pc, #600]	; (8008548 <HAL_RCC_OscConfig+0x784>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d0ec      	beq.n	80082d2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d106      	bne.n	800830e <HAL_RCC_OscConfig+0x54a>
 8008300:	4b92      	ldr	r3, [pc, #584]	; (800854c <HAL_RCC_OscConfig+0x788>)
 8008302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008304:	4a91      	ldr	r2, [pc, #580]	; (800854c <HAL_RCC_OscConfig+0x788>)
 8008306:	f043 0301 	orr.w	r3, r3, #1
 800830a:	6713      	str	r3, [r2, #112]	; 0x70
 800830c:	e02d      	b.n	800836a <HAL_RCC_OscConfig+0x5a6>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d10c      	bne.n	8008330 <HAL_RCC_OscConfig+0x56c>
 8008316:	4b8d      	ldr	r3, [pc, #564]	; (800854c <HAL_RCC_OscConfig+0x788>)
 8008318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800831a:	4a8c      	ldr	r2, [pc, #560]	; (800854c <HAL_RCC_OscConfig+0x788>)
 800831c:	f023 0301 	bic.w	r3, r3, #1
 8008320:	6713      	str	r3, [r2, #112]	; 0x70
 8008322:	4b8a      	ldr	r3, [pc, #552]	; (800854c <HAL_RCC_OscConfig+0x788>)
 8008324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008326:	4a89      	ldr	r2, [pc, #548]	; (800854c <HAL_RCC_OscConfig+0x788>)
 8008328:	f023 0304 	bic.w	r3, r3, #4
 800832c:	6713      	str	r3, [r2, #112]	; 0x70
 800832e:	e01c      	b.n	800836a <HAL_RCC_OscConfig+0x5a6>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	2b05      	cmp	r3, #5
 8008336:	d10c      	bne.n	8008352 <HAL_RCC_OscConfig+0x58e>
 8008338:	4b84      	ldr	r3, [pc, #528]	; (800854c <HAL_RCC_OscConfig+0x788>)
 800833a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800833c:	4a83      	ldr	r2, [pc, #524]	; (800854c <HAL_RCC_OscConfig+0x788>)
 800833e:	f043 0304 	orr.w	r3, r3, #4
 8008342:	6713      	str	r3, [r2, #112]	; 0x70
 8008344:	4b81      	ldr	r3, [pc, #516]	; (800854c <HAL_RCC_OscConfig+0x788>)
 8008346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008348:	4a80      	ldr	r2, [pc, #512]	; (800854c <HAL_RCC_OscConfig+0x788>)
 800834a:	f043 0301 	orr.w	r3, r3, #1
 800834e:	6713      	str	r3, [r2, #112]	; 0x70
 8008350:	e00b      	b.n	800836a <HAL_RCC_OscConfig+0x5a6>
 8008352:	4b7e      	ldr	r3, [pc, #504]	; (800854c <HAL_RCC_OscConfig+0x788>)
 8008354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008356:	4a7d      	ldr	r2, [pc, #500]	; (800854c <HAL_RCC_OscConfig+0x788>)
 8008358:	f023 0301 	bic.w	r3, r3, #1
 800835c:	6713      	str	r3, [r2, #112]	; 0x70
 800835e:	4b7b      	ldr	r3, [pc, #492]	; (800854c <HAL_RCC_OscConfig+0x788>)
 8008360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008362:	4a7a      	ldr	r2, [pc, #488]	; (800854c <HAL_RCC_OscConfig+0x788>)
 8008364:	f023 0304 	bic.w	r3, r3, #4
 8008368:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d015      	beq.n	800839e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008372:	f7fa f9eb 	bl	800274c <HAL_GetTick>
 8008376:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008378:	e00a      	b.n	8008390 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800837a:	f7fa f9e7 	bl	800274c <HAL_GetTick>
 800837e:	4602      	mov	r2, r0
 8008380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	f241 3288 	movw	r2, #5000	; 0x1388
 8008388:	4293      	cmp	r3, r2
 800838a:	d901      	bls.n	8008390 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800838c:	2303      	movs	r3, #3
 800838e:	e122      	b.n	80085d6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008390:	4b6e      	ldr	r3, [pc, #440]	; (800854c <HAL_RCC_OscConfig+0x788>)
 8008392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008394:	f003 0302 	and.w	r3, r3, #2
 8008398:	2b00      	cmp	r3, #0
 800839a:	d0ee      	beq.n	800837a <HAL_RCC_OscConfig+0x5b6>
 800839c:	e014      	b.n	80083c8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800839e:	f7fa f9d5 	bl	800274c <HAL_GetTick>
 80083a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80083a4:	e00a      	b.n	80083bc <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083a6:	f7fa f9d1 	bl	800274c <HAL_GetTick>
 80083aa:	4602      	mov	r2, r0
 80083ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d901      	bls.n	80083bc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80083b8:	2303      	movs	r3, #3
 80083ba:	e10c      	b.n	80085d6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80083bc:	4b63      	ldr	r3, [pc, #396]	; (800854c <HAL_RCC_OscConfig+0x788>)
 80083be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083c0:	f003 0302 	and.w	r3, r3, #2
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1ee      	bne.n	80083a6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f000 8101 	beq.w	80085d4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80083d2:	4b5e      	ldr	r3, [pc, #376]	; (800854c <HAL_RCC_OscConfig+0x788>)
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083da:	2b18      	cmp	r3, #24
 80083dc:	f000 80bc 	beq.w	8008558 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	f040 8095 	bne.w	8008514 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083ea:	4b58      	ldr	r3, [pc, #352]	; (800854c <HAL_RCC_OscConfig+0x788>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a57      	ldr	r2, [pc, #348]	; (800854c <HAL_RCC_OscConfig+0x788>)
 80083f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083f6:	f7fa f9a9 	bl	800274c <HAL_GetTick>
 80083fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083fc:	e008      	b.n	8008410 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083fe:	f7fa f9a5 	bl	800274c <HAL_GetTick>
 8008402:	4602      	mov	r2, r0
 8008404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008406:	1ad3      	subs	r3, r2, r3
 8008408:	2b02      	cmp	r3, #2
 800840a:	d901      	bls.n	8008410 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800840c:	2303      	movs	r3, #3
 800840e:	e0e2      	b.n	80085d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008410:	4b4e      	ldr	r3, [pc, #312]	; (800854c <HAL_RCC_OscConfig+0x788>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1f0      	bne.n	80083fe <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800841c:	4b4b      	ldr	r3, [pc, #300]	; (800854c <HAL_RCC_OscConfig+0x788>)
 800841e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008420:	4b4b      	ldr	r3, [pc, #300]	; (8008550 <HAL_RCC_OscConfig+0x78c>)
 8008422:	4013      	ands	r3, r2
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800842c:	0112      	lsls	r2, r2, #4
 800842e:	430a      	orrs	r2, r1
 8008430:	4946      	ldr	r1, [pc, #280]	; (800854c <HAL_RCC_OscConfig+0x788>)
 8008432:	4313      	orrs	r3, r2
 8008434:	628b      	str	r3, [r1, #40]	; 0x28
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800843a:	3b01      	subs	r3, #1
 800843c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008444:	3b01      	subs	r3, #1
 8008446:	025b      	lsls	r3, r3, #9
 8008448:	b29b      	uxth	r3, r3
 800844a:	431a      	orrs	r2, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008450:	3b01      	subs	r3, #1
 8008452:	041b      	lsls	r3, r3, #16
 8008454:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008458:	431a      	orrs	r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800845e:	3b01      	subs	r3, #1
 8008460:	061b      	lsls	r3, r3, #24
 8008462:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008466:	4939      	ldr	r1, [pc, #228]	; (800854c <HAL_RCC_OscConfig+0x788>)
 8008468:	4313      	orrs	r3, r2
 800846a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800846c:	4b37      	ldr	r3, [pc, #220]	; (800854c <HAL_RCC_OscConfig+0x788>)
 800846e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008470:	4a36      	ldr	r2, [pc, #216]	; (800854c <HAL_RCC_OscConfig+0x788>)
 8008472:	f023 0301 	bic.w	r3, r3, #1
 8008476:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008478:	4b34      	ldr	r3, [pc, #208]	; (800854c <HAL_RCC_OscConfig+0x788>)
 800847a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800847c:	4b35      	ldr	r3, [pc, #212]	; (8008554 <HAL_RCC_OscConfig+0x790>)
 800847e:	4013      	ands	r3, r2
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008484:	00d2      	lsls	r2, r2, #3
 8008486:	4931      	ldr	r1, [pc, #196]	; (800854c <HAL_RCC_OscConfig+0x788>)
 8008488:	4313      	orrs	r3, r2
 800848a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800848c:	4b2f      	ldr	r3, [pc, #188]	; (800854c <HAL_RCC_OscConfig+0x788>)
 800848e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008490:	f023 020c 	bic.w	r2, r3, #12
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008498:	492c      	ldr	r1, [pc, #176]	; (800854c <HAL_RCC_OscConfig+0x788>)
 800849a:	4313      	orrs	r3, r2
 800849c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800849e:	4b2b      	ldr	r3, [pc, #172]	; (800854c <HAL_RCC_OscConfig+0x788>)
 80084a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a2:	f023 0202 	bic.w	r2, r3, #2
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084aa:	4928      	ldr	r1, [pc, #160]	; (800854c <HAL_RCC_OscConfig+0x788>)
 80084ac:	4313      	orrs	r3, r2
 80084ae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80084b0:	4b26      	ldr	r3, [pc, #152]	; (800854c <HAL_RCC_OscConfig+0x788>)
 80084b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b4:	4a25      	ldr	r2, [pc, #148]	; (800854c <HAL_RCC_OscConfig+0x788>)
 80084b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084bc:	4b23      	ldr	r3, [pc, #140]	; (800854c <HAL_RCC_OscConfig+0x788>)
 80084be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c0:	4a22      	ldr	r2, [pc, #136]	; (800854c <HAL_RCC_OscConfig+0x788>)
 80084c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80084c8:	4b20      	ldr	r3, [pc, #128]	; (800854c <HAL_RCC_OscConfig+0x788>)
 80084ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084cc:	4a1f      	ldr	r2, [pc, #124]	; (800854c <HAL_RCC_OscConfig+0x788>)
 80084ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80084d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80084d4:	4b1d      	ldr	r3, [pc, #116]	; (800854c <HAL_RCC_OscConfig+0x788>)
 80084d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d8:	4a1c      	ldr	r2, [pc, #112]	; (800854c <HAL_RCC_OscConfig+0x788>)
 80084da:	f043 0301 	orr.w	r3, r3, #1
 80084de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084e0:	4b1a      	ldr	r3, [pc, #104]	; (800854c <HAL_RCC_OscConfig+0x788>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a19      	ldr	r2, [pc, #100]	; (800854c <HAL_RCC_OscConfig+0x788>)
 80084e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084ec:	f7fa f92e 	bl	800274c <HAL_GetTick>
 80084f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084f2:	e008      	b.n	8008506 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084f4:	f7fa f92a 	bl	800274c <HAL_GetTick>
 80084f8:	4602      	mov	r2, r0
 80084fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d901      	bls.n	8008506 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8008502:	2303      	movs	r3, #3
 8008504:	e067      	b.n	80085d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008506:	4b11      	ldr	r3, [pc, #68]	; (800854c <HAL_RCC_OscConfig+0x788>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800850e:	2b00      	cmp	r3, #0
 8008510:	d0f0      	beq.n	80084f4 <HAL_RCC_OscConfig+0x730>
 8008512:	e05f      	b.n	80085d4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008514:	4b0d      	ldr	r3, [pc, #52]	; (800854c <HAL_RCC_OscConfig+0x788>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a0c      	ldr	r2, [pc, #48]	; (800854c <HAL_RCC_OscConfig+0x788>)
 800851a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800851e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008520:	f7fa f914 	bl	800274c <HAL_GetTick>
 8008524:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008526:	e008      	b.n	800853a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008528:	f7fa f910 	bl	800274c <HAL_GetTick>
 800852c:	4602      	mov	r2, r0
 800852e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	2b02      	cmp	r3, #2
 8008534:	d901      	bls.n	800853a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8008536:	2303      	movs	r3, #3
 8008538:	e04d      	b.n	80085d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800853a:	4b04      	ldr	r3, [pc, #16]	; (800854c <HAL_RCC_OscConfig+0x788>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1f0      	bne.n	8008528 <HAL_RCC_OscConfig+0x764>
 8008546:	e045      	b.n	80085d4 <HAL_RCC_OscConfig+0x810>
 8008548:	58024800 	.word	0x58024800
 800854c:	58024400 	.word	0x58024400
 8008550:	fffffc0c 	.word	0xfffffc0c
 8008554:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008558:	4b21      	ldr	r3, [pc, #132]	; (80085e0 <HAL_RCC_OscConfig+0x81c>)
 800855a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800855c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800855e:	4b20      	ldr	r3, [pc, #128]	; (80085e0 <HAL_RCC_OscConfig+0x81c>)
 8008560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008562:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008568:	2b01      	cmp	r3, #1
 800856a:	d031      	beq.n	80085d0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	f003 0203 	and.w	r2, r3, #3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008576:	429a      	cmp	r2, r3
 8008578:	d12a      	bne.n	80085d0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	091b      	lsrs	r3, r3, #4
 800857e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008586:	429a      	cmp	r2, r3
 8008588:	d122      	bne.n	80085d0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008594:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008596:	429a      	cmp	r2, r3
 8008598:	d11a      	bne.n	80085d0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	0a5b      	lsrs	r3, r3, #9
 800859e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d111      	bne.n	80085d0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	0c1b      	lsrs	r3, r3, #16
 80085b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d108      	bne.n	80085d0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	0e1b      	lsrs	r3, r3, #24
 80085c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ca:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d001      	beq.n	80085d4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	e000      	b.n	80085d6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3730      	adds	r7, #48	; 0x30
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	58024400 	.word	0x58024400

080085e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b086      	sub	sp, #24
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d101      	bne.n	80085f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	e19c      	b.n	8008932 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80085f8:	4b8a      	ldr	r3, [pc, #552]	; (8008824 <HAL_RCC_ClockConfig+0x240>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 030f 	and.w	r3, r3, #15
 8008600:	683a      	ldr	r2, [r7, #0]
 8008602:	429a      	cmp	r2, r3
 8008604:	d910      	bls.n	8008628 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008606:	4b87      	ldr	r3, [pc, #540]	; (8008824 <HAL_RCC_ClockConfig+0x240>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f023 020f 	bic.w	r2, r3, #15
 800860e:	4985      	ldr	r1, [pc, #532]	; (8008824 <HAL_RCC_ClockConfig+0x240>)
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	4313      	orrs	r3, r2
 8008614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008616:	4b83      	ldr	r3, [pc, #524]	; (8008824 <HAL_RCC_ClockConfig+0x240>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 030f 	and.w	r3, r3, #15
 800861e:	683a      	ldr	r2, [r7, #0]
 8008620:	429a      	cmp	r2, r3
 8008622:	d001      	beq.n	8008628 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e184      	b.n	8008932 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f003 0304 	and.w	r3, r3, #4
 8008630:	2b00      	cmp	r3, #0
 8008632:	d010      	beq.n	8008656 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	691a      	ldr	r2, [r3, #16]
 8008638:	4b7b      	ldr	r3, [pc, #492]	; (8008828 <HAL_RCC_ClockConfig+0x244>)
 800863a:	699b      	ldr	r3, [r3, #24]
 800863c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008640:	429a      	cmp	r2, r3
 8008642:	d908      	bls.n	8008656 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008644:	4b78      	ldr	r3, [pc, #480]	; (8008828 <HAL_RCC_ClockConfig+0x244>)
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	4975      	ldr	r1, [pc, #468]	; (8008828 <HAL_RCC_ClockConfig+0x244>)
 8008652:	4313      	orrs	r3, r2
 8008654:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f003 0308 	and.w	r3, r3, #8
 800865e:	2b00      	cmp	r3, #0
 8008660:	d010      	beq.n	8008684 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	695a      	ldr	r2, [r3, #20]
 8008666:	4b70      	ldr	r3, [pc, #448]	; (8008828 <HAL_RCC_ClockConfig+0x244>)
 8008668:	69db      	ldr	r3, [r3, #28]
 800866a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800866e:	429a      	cmp	r2, r3
 8008670:	d908      	bls.n	8008684 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008672:	4b6d      	ldr	r3, [pc, #436]	; (8008828 <HAL_RCC_ClockConfig+0x244>)
 8008674:	69db      	ldr	r3, [r3, #28]
 8008676:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	695b      	ldr	r3, [r3, #20]
 800867e:	496a      	ldr	r1, [pc, #424]	; (8008828 <HAL_RCC_ClockConfig+0x244>)
 8008680:	4313      	orrs	r3, r2
 8008682:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f003 0310 	and.w	r3, r3, #16
 800868c:	2b00      	cmp	r3, #0
 800868e:	d010      	beq.n	80086b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	699a      	ldr	r2, [r3, #24]
 8008694:	4b64      	ldr	r3, [pc, #400]	; (8008828 <HAL_RCC_ClockConfig+0x244>)
 8008696:	69db      	ldr	r3, [r3, #28]
 8008698:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800869c:	429a      	cmp	r2, r3
 800869e:	d908      	bls.n	80086b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80086a0:	4b61      	ldr	r3, [pc, #388]	; (8008828 <HAL_RCC_ClockConfig+0x244>)
 80086a2:	69db      	ldr	r3, [r3, #28]
 80086a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	699b      	ldr	r3, [r3, #24]
 80086ac:	495e      	ldr	r1, [pc, #376]	; (8008828 <HAL_RCC_ClockConfig+0x244>)
 80086ae:	4313      	orrs	r3, r2
 80086b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f003 0320 	and.w	r3, r3, #32
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d010      	beq.n	80086e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	69da      	ldr	r2, [r3, #28]
 80086c2:	4b59      	ldr	r3, [pc, #356]	; (8008828 <HAL_RCC_ClockConfig+0x244>)
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d908      	bls.n	80086e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80086ce:	4b56      	ldr	r3, [pc, #344]	; (8008828 <HAL_RCC_ClockConfig+0x244>)
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	69db      	ldr	r3, [r3, #28]
 80086da:	4953      	ldr	r1, [pc, #332]	; (8008828 <HAL_RCC_ClockConfig+0x244>)
 80086dc:	4313      	orrs	r3, r2
 80086de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f003 0302 	and.w	r3, r3, #2
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d010      	beq.n	800870e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	68da      	ldr	r2, [r3, #12]
 80086f0:	4b4d      	ldr	r3, [pc, #308]	; (8008828 <HAL_RCC_ClockConfig+0x244>)
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	f003 030f 	and.w	r3, r3, #15
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d908      	bls.n	800870e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086fc:	4b4a      	ldr	r3, [pc, #296]	; (8008828 <HAL_RCC_ClockConfig+0x244>)
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	f023 020f 	bic.w	r2, r3, #15
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	4947      	ldr	r1, [pc, #284]	; (8008828 <HAL_RCC_ClockConfig+0x244>)
 800870a:	4313      	orrs	r3, r2
 800870c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 0301 	and.w	r3, r3, #1
 8008716:	2b00      	cmp	r3, #0
 8008718:	d055      	beq.n	80087c6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800871a:	4b43      	ldr	r3, [pc, #268]	; (8008828 <HAL_RCC_ClockConfig+0x244>)
 800871c:	699b      	ldr	r3, [r3, #24]
 800871e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	4940      	ldr	r1, [pc, #256]	; (8008828 <HAL_RCC_ClockConfig+0x244>)
 8008728:	4313      	orrs	r3, r2
 800872a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	2b02      	cmp	r3, #2
 8008732:	d107      	bne.n	8008744 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008734:	4b3c      	ldr	r3, [pc, #240]	; (8008828 <HAL_RCC_ClockConfig+0x244>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800873c:	2b00      	cmp	r3, #0
 800873e:	d121      	bne.n	8008784 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	e0f6      	b.n	8008932 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	2b03      	cmp	r3, #3
 800874a:	d107      	bne.n	800875c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800874c:	4b36      	ldr	r3, [pc, #216]	; (8008828 <HAL_RCC_ClockConfig+0x244>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008754:	2b00      	cmp	r3, #0
 8008756:	d115      	bne.n	8008784 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	e0ea      	b.n	8008932 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d107      	bne.n	8008774 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008764:	4b30      	ldr	r3, [pc, #192]	; (8008828 <HAL_RCC_ClockConfig+0x244>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800876c:	2b00      	cmp	r3, #0
 800876e:	d109      	bne.n	8008784 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	e0de      	b.n	8008932 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008774:	4b2c      	ldr	r3, [pc, #176]	; (8008828 <HAL_RCC_ClockConfig+0x244>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 0304 	and.w	r3, r3, #4
 800877c:	2b00      	cmp	r3, #0
 800877e:	d101      	bne.n	8008784 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	e0d6      	b.n	8008932 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008784:	4b28      	ldr	r3, [pc, #160]	; (8008828 <HAL_RCC_ClockConfig+0x244>)
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	f023 0207 	bic.w	r2, r3, #7
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	4925      	ldr	r1, [pc, #148]	; (8008828 <HAL_RCC_ClockConfig+0x244>)
 8008792:	4313      	orrs	r3, r2
 8008794:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008796:	f7f9 ffd9 	bl	800274c <HAL_GetTick>
 800879a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800879c:	e00a      	b.n	80087b4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800879e:	f7f9 ffd5 	bl	800274c <HAL_GetTick>
 80087a2:	4602      	mov	r2, r0
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d901      	bls.n	80087b4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80087b0:	2303      	movs	r3, #3
 80087b2:	e0be      	b.n	8008932 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087b4:	4b1c      	ldr	r3, [pc, #112]	; (8008828 <HAL_RCC_ClockConfig+0x244>)
 80087b6:	691b      	ldr	r3, [r3, #16]
 80087b8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	00db      	lsls	r3, r3, #3
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d1eb      	bne.n	800879e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 0302 	and.w	r3, r3, #2
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d010      	beq.n	80087f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	68da      	ldr	r2, [r3, #12]
 80087d6:	4b14      	ldr	r3, [pc, #80]	; (8008828 <HAL_RCC_ClockConfig+0x244>)
 80087d8:	699b      	ldr	r3, [r3, #24]
 80087da:	f003 030f 	and.w	r3, r3, #15
 80087de:	429a      	cmp	r2, r3
 80087e0:	d208      	bcs.n	80087f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087e2:	4b11      	ldr	r3, [pc, #68]	; (8008828 <HAL_RCC_ClockConfig+0x244>)
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	f023 020f 	bic.w	r2, r3, #15
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	490e      	ldr	r1, [pc, #56]	; (8008828 <HAL_RCC_ClockConfig+0x244>)
 80087f0:	4313      	orrs	r3, r2
 80087f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80087f4:	4b0b      	ldr	r3, [pc, #44]	; (8008824 <HAL_RCC_ClockConfig+0x240>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 030f 	and.w	r3, r3, #15
 80087fc:	683a      	ldr	r2, [r7, #0]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d214      	bcs.n	800882c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008802:	4b08      	ldr	r3, [pc, #32]	; (8008824 <HAL_RCC_ClockConfig+0x240>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f023 020f 	bic.w	r2, r3, #15
 800880a:	4906      	ldr	r1, [pc, #24]	; (8008824 <HAL_RCC_ClockConfig+0x240>)
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	4313      	orrs	r3, r2
 8008810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008812:	4b04      	ldr	r3, [pc, #16]	; (8008824 <HAL_RCC_ClockConfig+0x240>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 030f 	and.w	r3, r3, #15
 800881a:	683a      	ldr	r2, [r7, #0]
 800881c:	429a      	cmp	r2, r3
 800881e:	d005      	beq.n	800882c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e086      	b.n	8008932 <HAL_RCC_ClockConfig+0x34e>
 8008824:	52002000 	.word	0x52002000
 8008828:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 0304 	and.w	r3, r3, #4
 8008834:	2b00      	cmp	r3, #0
 8008836:	d010      	beq.n	800885a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	691a      	ldr	r2, [r3, #16]
 800883c:	4b3f      	ldr	r3, [pc, #252]	; (800893c <HAL_RCC_ClockConfig+0x358>)
 800883e:	699b      	ldr	r3, [r3, #24]
 8008840:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008844:	429a      	cmp	r2, r3
 8008846:	d208      	bcs.n	800885a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008848:	4b3c      	ldr	r3, [pc, #240]	; (800893c <HAL_RCC_ClockConfig+0x358>)
 800884a:	699b      	ldr	r3, [r3, #24]
 800884c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	691b      	ldr	r3, [r3, #16]
 8008854:	4939      	ldr	r1, [pc, #228]	; (800893c <HAL_RCC_ClockConfig+0x358>)
 8008856:	4313      	orrs	r3, r2
 8008858:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 0308 	and.w	r3, r3, #8
 8008862:	2b00      	cmp	r3, #0
 8008864:	d010      	beq.n	8008888 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	695a      	ldr	r2, [r3, #20]
 800886a:	4b34      	ldr	r3, [pc, #208]	; (800893c <HAL_RCC_ClockConfig+0x358>)
 800886c:	69db      	ldr	r3, [r3, #28]
 800886e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008872:	429a      	cmp	r2, r3
 8008874:	d208      	bcs.n	8008888 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008876:	4b31      	ldr	r3, [pc, #196]	; (800893c <HAL_RCC_ClockConfig+0x358>)
 8008878:	69db      	ldr	r3, [r3, #28]
 800887a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	695b      	ldr	r3, [r3, #20]
 8008882:	492e      	ldr	r1, [pc, #184]	; (800893c <HAL_RCC_ClockConfig+0x358>)
 8008884:	4313      	orrs	r3, r2
 8008886:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f003 0310 	and.w	r3, r3, #16
 8008890:	2b00      	cmp	r3, #0
 8008892:	d010      	beq.n	80088b6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	699a      	ldr	r2, [r3, #24]
 8008898:	4b28      	ldr	r3, [pc, #160]	; (800893c <HAL_RCC_ClockConfig+0x358>)
 800889a:	69db      	ldr	r3, [r3, #28]
 800889c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d208      	bcs.n	80088b6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80088a4:	4b25      	ldr	r3, [pc, #148]	; (800893c <HAL_RCC_ClockConfig+0x358>)
 80088a6:	69db      	ldr	r3, [r3, #28]
 80088a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	699b      	ldr	r3, [r3, #24]
 80088b0:	4922      	ldr	r1, [pc, #136]	; (800893c <HAL_RCC_ClockConfig+0x358>)
 80088b2:	4313      	orrs	r3, r2
 80088b4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f003 0320 	and.w	r3, r3, #32
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d010      	beq.n	80088e4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	69da      	ldr	r2, [r3, #28]
 80088c6:	4b1d      	ldr	r3, [pc, #116]	; (800893c <HAL_RCC_ClockConfig+0x358>)
 80088c8:	6a1b      	ldr	r3, [r3, #32]
 80088ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d208      	bcs.n	80088e4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80088d2:	4b1a      	ldr	r3, [pc, #104]	; (800893c <HAL_RCC_ClockConfig+0x358>)
 80088d4:	6a1b      	ldr	r3, [r3, #32]
 80088d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	69db      	ldr	r3, [r3, #28]
 80088de:	4917      	ldr	r1, [pc, #92]	; (800893c <HAL_RCC_ClockConfig+0x358>)
 80088e0:	4313      	orrs	r3, r2
 80088e2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80088e4:	f000 f834 	bl	8008950 <HAL_RCC_GetSysClockFreq>
 80088e8:	4602      	mov	r2, r0
 80088ea:	4b14      	ldr	r3, [pc, #80]	; (800893c <HAL_RCC_ClockConfig+0x358>)
 80088ec:	699b      	ldr	r3, [r3, #24]
 80088ee:	0a1b      	lsrs	r3, r3, #8
 80088f0:	f003 030f 	and.w	r3, r3, #15
 80088f4:	4912      	ldr	r1, [pc, #72]	; (8008940 <HAL_RCC_ClockConfig+0x35c>)
 80088f6:	5ccb      	ldrb	r3, [r1, r3]
 80088f8:	f003 031f 	and.w	r3, r3, #31
 80088fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008900:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008902:	4b0e      	ldr	r3, [pc, #56]	; (800893c <HAL_RCC_ClockConfig+0x358>)
 8008904:	699b      	ldr	r3, [r3, #24]
 8008906:	f003 030f 	and.w	r3, r3, #15
 800890a:	4a0d      	ldr	r2, [pc, #52]	; (8008940 <HAL_RCC_ClockConfig+0x35c>)
 800890c:	5cd3      	ldrb	r3, [r2, r3]
 800890e:	f003 031f 	and.w	r3, r3, #31
 8008912:	693a      	ldr	r2, [r7, #16]
 8008914:	fa22 f303 	lsr.w	r3, r2, r3
 8008918:	4a0a      	ldr	r2, [pc, #40]	; (8008944 <HAL_RCC_ClockConfig+0x360>)
 800891a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800891c:	4a0a      	ldr	r2, [pc, #40]	; (8008948 <HAL_RCC_ClockConfig+0x364>)
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008922:	4b0a      	ldr	r3, [pc, #40]	; (800894c <HAL_RCC_ClockConfig+0x368>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4618      	mov	r0, r3
 8008928:	f7f9 fec6 	bl	80026b8 <HAL_InitTick>
 800892c:	4603      	mov	r3, r0
 800892e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008930:	7bfb      	ldrb	r3, [r7, #15]
}
 8008932:	4618      	mov	r0, r3
 8008934:	3718      	adds	r7, #24
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	58024400 	.word	0x58024400
 8008940:	08013c10 	.word	0x08013c10
 8008944:	24000004 	.word	0x24000004
 8008948:	24000000 	.word	0x24000000
 800894c:	24000018 	.word	0x24000018

08008950 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008950:	b480      	push	{r7}
 8008952:	b089      	sub	sp, #36	; 0x24
 8008954:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008956:	4bb3      	ldr	r3, [pc, #716]	; (8008c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800895e:	2b18      	cmp	r3, #24
 8008960:	f200 8155 	bhi.w	8008c0e <HAL_RCC_GetSysClockFreq+0x2be>
 8008964:	a201      	add	r2, pc, #4	; (adr r2, 800896c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800896a:	bf00      	nop
 800896c:	080089d1 	.word	0x080089d1
 8008970:	08008c0f 	.word	0x08008c0f
 8008974:	08008c0f 	.word	0x08008c0f
 8008978:	08008c0f 	.word	0x08008c0f
 800897c:	08008c0f 	.word	0x08008c0f
 8008980:	08008c0f 	.word	0x08008c0f
 8008984:	08008c0f 	.word	0x08008c0f
 8008988:	08008c0f 	.word	0x08008c0f
 800898c:	080089f7 	.word	0x080089f7
 8008990:	08008c0f 	.word	0x08008c0f
 8008994:	08008c0f 	.word	0x08008c0f
 8008998:	08008c0f 	.word	0x08008c0f
 800899c:	08008c0f 	.word	0x08008c0f
 80089a0:	08008c0f 	.word	0x08008c0f
 80089a4:	08008c0f 	.word	0x08008c0f
 80089a8:	08008c0f 	.word	0x08008c0f
 80089ac:	080089fd 	.word	0x080089fd
 80089b0:	08008c0f 	.word	0x08008c0f
 80089b4:	08008c0f 	.word	0x08008c0f
 80089b8:	08008c0f 	.word	0x08008c0f
 80089bc:	08008c0f 	.word	0x08008c0f
 80089c0:	08008c0f 	.word	0x08008c0f
 80089c4:	08008c0f 	.word	0x08008c0f
 80089c8:	08008c0f 	.word	0x08008c0f
 80089cc:	08008a03 	.word	0x08008a03
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089d0:	4b94      	ldr	r3, [pc, #592]	; (8008c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 0320 	and.w	r3, r3, #32
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d009      	beq.n	80089f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089dc:	4b91      	ldr	r3, [pc, #580]	; (8008c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	08db      	lsrs	r3, r3, #3
 80089e2:	f003 0303 	and.w	r3, r3, #3
 80089e6:	4a90      	ldr	r2, [pc, #576]	; (8008c28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80089e8:	fa22 f303 	lsr.w	r3, r2, r3
 80089ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80089ee:	e111      	b.n	8008c14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80089f0:	4b8d      	ldr	r3, [pc, #564]	; (8008c28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80089f2:	61bb      	str	r3, [r7, #24]
    break;
 80089f4:	e10e      	b.n	8008c14 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80089f6:	4b8d      	ldr	r3, [pc, #564]	; (8008c2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80089f8:	61bb      	str	r3, [r7, #24]
    break;
 80089fa:	e10b      	b.n	8008c14 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80089fc:	4b8c      	ldr	r3, [pc, #560]	; (8008c30 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80089fe:	61bb      	str	r3, [r7, #24]
    break;
 8008a00:	e108      	b.n	8008c14 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a02:	4b88      	ldr	r3, [pc, #544]	; (8008c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a06:	f003 0303 	and.w	r3, r3, #3
 8008a0a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008a0c:	4b85      	ldr	r3, [pc, #532]	; (8008c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a10:	091b      	lsrs	r3, r3, #4
 8008a12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a16:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008a18:	4b82      	ldr	r3, [pc, #520]	; (8008c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a1c:	f003 0301 	and.w	r3, r3, #1
 8008a20:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008a22:	4b80      	ldr	r3, [pc, #512]	; (8008c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a26:	08db      	lsrs	r3, r3, #3
 8008a28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	fb02 f303 	mul.w	r3, r2, r3
 8008a32:	ee07 3a90 	vmov	s15, r3
 8008a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a3a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f000 80e1 	beq.w	8008c08 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	f000 8083 	beq.w	8008b54 <HAL_RCC_GetSysClockFreq+0x204>
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	f200 80a1 	bhi.w	8008b98 <HAL_RCC_GetSysClockFreq+0x248>
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d003      	beq.n	8008a64 <HAL_RCC_GetSysClockFreq+0x114>
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d056      	beq.n	8008b10 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008a62:	e099      	b.n	8008b98 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a64:	4b6f      	ldr	r3, [pc, #444]	; (8008c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 0320 	and.w	r3, r3, #32
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d02d      	beq.n	8008acc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a70:	4b6c      	ldr	r3, [pc, #432]	; (8008c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	08db      	lsrs	r3, r3, #3
 8008a76:	f003 0303 	and.w	r3, r3, #3
 8008a7a:	4a6b      	ldr	r2, [pc, #428]	; (8008c28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a80:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	ee07 3a90 	vmov	s15, r3
 8008a88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	ee07 3a90 	vmov	s15, r3
 8008a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a9a:	4b62      	ldr	r3, [pc, #392]	; (8008c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aa2:	ee07 3a90 	vmov	s15, r3
 8008aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8008aae:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008c34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ac6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008aca:	e087      	b.n	8008bdc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	ee07 3a90 	vmov	s15, r3
 8008ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ad6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008c38 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ade:	4b51      	ldr	r3, [pc, #324]	; (8008c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ae6:	ee07 3a90 	vmov	s15, r3
 8008aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aee:	ed97 6a02 	vldr	s12, [r7, #8]
 8008af2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008c34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008afe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b0e:	e065      	b.n	8008bdc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	ee07 3a90 	vmov	s15, r3
 8008b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b1a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008c3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b22:	4b40      	ldr	r3, [pc, #256]	; (8008c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b2a:	ee07 3a90 	vmov	s15, r3
 8008b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b32:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b36:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008c34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b52:	e043      	b.n	8008bdc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	ee07 3a90 	vmov	s15, r3
 8008b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b5e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008c40 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b66:	4b2f      	ldr	r3, [pc, #188]	; (8008c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b6e:	ee07 3a90 	vmov	s15, r3
 8008b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b76:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b7a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008c34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b96:	e021      	b.n	8008bdc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	ee07 3a90 	vmov	s15, r3
 8008b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ba2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008c3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008baa:	4b1e      	ldr	r3, [pc, #120]	; (8008c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bb2:	ee07 3a90 	vmov	s15, r3
 8008bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bba:	ed97 6a02 	vldr	s12, [r7, #8]
 8008bbe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008c34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bda:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008bdc:	4b11      	ldr	r3, [pc, #68]	; (8008c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be0:	0a5b      	lsrs	r3, r3, #9
 8008be2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008be6:	3301      	adds	r3, #1
 8008be8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	ee07 3a90 	vmov	s15, r3
 8008bf0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008bf4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c00:	ee17 3a90 	vmov	r3, s15
 8008c04:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008c06:	e005      	b.n	8008c14 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	61bb      	str	r3, [r7, #24]
    break;
 8008c0c:	e002      	b.n	8008c14 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008c0e:	4b07      	ldr	r3, [pc, #28]	; (8008c2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008c10:	61bb      	str	r3, [r7, #24]
    break;
 8008c12:	bf00      	nop
  }

  return sysclockfreq;
 8008c14:	69bb      	ldr	r3, [r7, #24]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3724      	adds	r7, #36	; 0x24
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	58024400 	.word	0x58024400
 8008c28:	03d09000 	.word	0x03d09000
 8008c2c:	003d0900 	.word	0x003d0900
 8008c30:	007a1200 	.word	0x007a1200
 8008c34:	46000000 	.word	0x46000000
 8008c38:	4c742400 	.word	0x4c742400
 8008c3c:	4a742400 	.word	0x4a742400
 8008c40:	4af42400 	.word	0x4af42400

08008c44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008c4a:	f7ff fe81 	bl	8008950 <HAL_RCC_GetSysClockFreq>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	4b10      	ldr	r3, [pc, #64]	; (8008c94 <HAL_RCC_GetHCLKFreq+0x50>)
 8008c52:	699b      	ldr	r3, [r3, #24]
 8008c54:	0a1b      	lsrs	r3, r3, #8
 8008c56:	f003 030f 	and.w	r3, r3, #15
 8008c5a:	490f      	ldr	r1, [pc, #60]	; (8008c98 <HAL_RCC_GetHCLKFreq+0x54>)
 8008c5c:	5ccb      	ldrb	r3, [r1, r3]
 8008c5e:	f003 031f 	and.w	r3, r3, #31
 8008c62:	fa22 f303 	lsr.w	r3, r2, r3
 8008c66:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c68:	4b0a      	ldr	r3, [pc, #40]	; (8008c94 <HAL_RCC_GetHCLKFreq+0x50>)
 8008c6a:	699b      	ldr	r3, [r3, #24]
 8008c6c:	f003 030f 	and.w	r3, r3, #15
 8008c70:	4a09      	ldr	r2, [pc, #36]	; (8008c98 <HAL_RCC_GetHCLKFreq+0x54>)
 8008c72:	5cd3      	ldrb	r3, [r2, r3]
 8008c74:	f003 031f 	and.w	r3, r3, #31
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c7e:	4a07      	ldr	r2, [pc, #28]	; (8008c9c <HAL_RCC_GetHCLKFreq+0x58>)
 8008c80:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008c82:	4a07      	ldr	r2, [pc, #28]	; (8008ca0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008c88:	4b04      	ldr	r3, [pc, #16]	; (8008c9c <HAL_RCC_GetHCLKFreq+0x58>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3708      	adds	r7, #8
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	58024400 	.word	0x58024400
 8008c98:	08013c10 	.word	0x08013c10
 8008c9c:	24000004 	.word	0x24000004
 8008ca0:	24000000 	.word	0x24000000

08008ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008ca8:	f7ff ffcc 	bl	8008c44 <HAL_RCC_GetHCLKFreq>
 8008cac:	4602      	mov	r2, r0
 8008cae:	4b06      	ldr	r3, [pc, #24]	; (8008cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008cb0:	69db      	ldr	r3, [r3, #28]
 8008cb2:	091b      	lsrs	r3, r3, #4
 8008cb4:	f003 0307 	and.w	r3, r3, #7
 8008cb8:	4904      	ldr	r1, [pc, #16]	; (8008ccc <HAL_RCC_GetPCLK1Freq+0x28>)
 8008cba:	5ccb      	ldrb	r3, [r1, r3]
 8008cbc:	f003 031f 	and.w	r3, r3, #31
 8008cc0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	58024400 	.word	0x58024400
 8008ccc:	08013c10 	.word	0x08013c10

08008cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008cd4:	f7ff ffb6 	bl	8008c44 <HAL_RCC_GetHCLKFreq>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	4b06      	ldr	r3, [pc, #24]	; (8008cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008cdc:	69db      	ldr	r3, [r3, #28]
 8008cde:	0a1b      	lsrs	r3, r3, #8
 8008ce0:	f003 0307 	and.w	r3, r3, #7
 8008ce4:	4904      	ldr	r1, [pc, #16]	; (8008cf8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008ce6:	5ccb      	ldrb	r3, [r1, r3]
 8008ce8:	f003 031f 	and.w	r3, r3, #31
 8008cec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	58024400 	.word	0x58024400
 8008cf8:	08013c10 	.word	0x08013c10

08008cfc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b086      	sub	sp, #24
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008d04:	2300      	movs	r3, #0
 8008d06:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008d08:	2300      	movs	r3, #0
 8008d0a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d03f      	beq.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008d20:	d02a      	beq.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008d22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008d26:	d824      	bhi.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008d28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d2c:	d018      	beq.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008d2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d32:	d81e      	bhi.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d003      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008d38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d3c:	d007      	beq.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008d3e:	e018      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d40:	4bab      	ldr	r3, [pc, #684]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d44:	4aaa      	ldr	r2, [pc, #680]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008d4c:	e015      	b.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	3304      	adds	r3, #4
 8008d52:	2102      	movs	r1, #2
 8008d54:	4618      	mov	r0, r3
 8008d56:	f001 fff3 	bl	800ad40 <RCCEx_PLL2_Config>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008d5e:	e00c      	b.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	3324      	adds	r3, #36	; 0x24
 8008d64:	2102      	movs	r1, #2
 8008d66:	4618      	mov	r0, r3
 8008d68:	f002 f89c 	bl	800aea4 <RCCEx_PLL3_Config>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008d70:	e003      	b.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	75fb      	strb	r3, [r7, #23]
      break;
 8008d76:	e000      	b.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008d78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d7a:	7dfb      	ldrb	r3, [r7, #23]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d109      	bne.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008d80:	4b9b      	ldr	r3, [pc, #620]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d8c:	4998      	ldr	r1, [pc, #608]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	650b      	str	r3, [r1, #80]	; 0x50
 8008d92:	e001      	b.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d94:	7dfb      	ldrb	r3, [r7, #23]
 8008d96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d03d      	beq.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008da8:	2b04      	cmp	r3, #4
 8008daa:	d826      	bhi.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008dac:	a201      	add	r2, pc, #4	; (adr r2, 8008db4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db2:	bf00      	nop
 8008db4:	08008dc9 	.word	0x08008dc9
 8008db8:	08008dd7 	.word	0x08008dd7
 8008dbc:	08008de9 	.word	0x08008de9
 8008dc0:	08008e01 	.word	0x08008e01
 8008dc4:	08008e01 	.word	0x08008e01
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dc8:	4b89      	ldr	r3, [pc, #548]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dcc:	4a88      	ldr	r2, [pc, #544]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008dd4:	e015      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	3304      	adds	r3, #4
 8008dda:	2100      	movs	r1, #0
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f001 ffaf 	bl	800ad40 <RCCEx_PLL2_Config>
 8008de2:	4603      	mov	r3, r0
 8008de4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008de6:	e00c      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	3324      	adds	r3, #36	; 0x24
 8008dec:	2100      	movs	r1, #0
 8008dee:	4618      	mov	r0, r3
 8008df0:	f002 f858 	bl	800aea4 <RCCEx_PLL3_Config>
 8008df4:	4603      	mov	r3, r0
 8008df6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008df8:	e003      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	75fb      	strb	r3, [r7, #23]
      break;
 8008dfe:	e000      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008e00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e02:	7dfb      	ldrb	r3, [r7, #23]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d109      	bne.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e08:	4b79      	ldr	r3, [pc, #484]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e0c:	f023 0207 	bic.w	r2, r3, #7
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e14:	4976      	ldr	r1, [pc, #472]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e16:	4313      	orrs	r3, r2
 8008e18:	650b      	str	r3, [r1, #80]	; 0x50
 8008e1a:	e001      	b.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e1c:	7dfb      	ldrb	r3, [r7, #23]
 8008e1e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d042      	beq.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e34:	d02b      	beq.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e3a:	d825      	bhi.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008e3c:	2bc0      	cmp	r3, #192	; 0xc0
 8008e3e:	d028      	beq.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008e40:	2bc0      	cmp	r3, #192	; 0xc0
 8008e42:	d821      	bhi.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008e44:	2b80      	cmp	r3, #128	; 0x80
 8008e46:	d016      	beq.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008e48:	2b80      	cmp	r3, #128	; 0x80
 8008e4a:	d81d      	bhi.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d002      	beq.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008e50:	2b40      	cmp	r3, #64	; 0x40
 8008e52:	d007      	beq.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008e54:	e018      	b.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e56:	4b66      	ldr	r3, [pc, #408]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5a:	4a65      	ldr	r2, [pc, #404]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008e62:	e017      	b.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	3304      	adds	r3, #4
 8008e68:	2100      	movs	r1, #0
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f001 ff68 	bl	800ad40 <RCCEx_PLL2_Config>
 8008e70:	4603      	mov	r3, r0
 8008e72:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008e74:	e00e      	b.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	3324      	adds	r3, #36	; 0x24
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f002 f811 	bl	800aea4 <RCCEx_PLL3_Config>
 8008e82:	4603      	mov	r3, r0
 8008e84:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008e86:	e005      	b.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8008e8c:	e002      	b.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008e8e:	bf00      	nop
 8008e90:	e000      	b.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008e92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e94:	7dfb      	ldrb	r3, [r7, #23]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d109      	bne.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008e9a:	4b55      	ldr	r3, [pc, #340]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e9e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ea6:	4952      	ldr	r1, [pc, #328]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	650b      	str	r3, [r1, #80]	; 0x50
 8008eac:	e001      	b.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eae:	7dfb      	ldrb	r3, [r7, #23]
 8008eb0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d049      	beq.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008ec4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ec8:	d030      	beq.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008eca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ece:	d82a      	bhi.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008ed0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008ed4:	d02c      	beq.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008ed6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008eda:	d824      	bhi.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008edc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ee0:	d018      	beq.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008ee2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ee6:	d81e      	bhi.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d003      	beq.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008eec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ef0:	d007      	beq.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008ef2:	e018      	b.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ef4:	4b3e      	ldr	r3, [pc, #248]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef8:	4a3d      	ldr	r2, [pc, #244]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008efa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008efe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008f00:	e017      	b.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	3304      	adds	r3, #4
 8008f06:	2100      	movs	r1, #0
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f001 ff19 	bl	800ad40 <RCCEx_PLL2_Config>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008f12:	e00e      	b.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	3324      	adds	r3, #36	; 0x24
 8008f18:	2100      	movs	r1, #0
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f001 ffc2 	bl	800aea4 <RCCEx_PLL3_Config>
 8008f20:	4603      	mov	r3, r0
 8008f22:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008f24:	e005      	b.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	75fb      	strb	r3, [r7, #23]
      break;
 8008f2a:	e002      	b.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008f2c:	bf00      	nop
 8008f2e:	e000      	b.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008f30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f32:	7dfb      	ldrb	r3, [r7, #23]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10a      	bne.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008f38:	4b2d      	ldr	r3, [pc, #180]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f3c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008f46:	492a      	ldr	r1, [pc, #168]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	658b      	str	r3, [r1, #88]	; 0x58
 8008f4c:	e001      	b.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f4e:	7dfb      	ldrb	r3, [r7, #23]
 8008f50:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d04c      	beq.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008f64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f68:	d030      	beq.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008f6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f6e:	d82a      	bhi.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008f70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f74:	d02c      	beq.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8008f76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f7a:	d824      	bhi.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008f7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f80:	d018      	beq.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008f82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f86:	d81e      	bhi.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d003      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f90:	d007      	beq.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008f92:	e018      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f94:	4b16      	ldr	r3, [pc, #88]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f98:	4a15      	ldr	r2, [pc, #84]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008fa0:	e017      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	3304      	adds	r3, #4
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f001 fec9 	bl	800ad40 <RCCEx_PLL2_Config>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008fb2:	e00e      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	3324      	adds	r3, #36	; 0x24
 8008fb8:	2100      	movs	r1, #0
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f001 ff72 	bl	800aea4 <RCCEx_PLL3_Config>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008fc4:	e005      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	75fb      	strb	r3, [r7, #23]
      break;
 8008fca:	e002      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008fcc:	bf00      	nop
 8008fce:	e000      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008fd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fd2:	7dfb      	ldrb	r3, [r7, #23]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d10d      	bne.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008fd8:	4b05      	ldr	r3, [pc, #20]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fdc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008fe6:	4902      	ldr	r1, [pc, #8]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	658b      	str	r3, [r1, #88]	; 0x58
 8008fec:	e004      	b.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008fee:	bf00      	nop
 8008ff0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ff4:	7dfb      	ldrb	r3, [r7, #23]
 8008ff6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009000:	2b00      	cmp	r3, #0
 8009002:	d032      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009008:	2b30      	cmp	r3, #48	; 0x30
 800900a:	d01c      	beq.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800900c:	2b30      	cmp	r3, #48	; 0x30
 800900e:	d817      	bhi.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8009010:	2b20      	cmp	r3, #32
 8009012:	d00c      	beq.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8009014:	2b20      	cmp	r3, #32
 8009016:	d813      	bhi.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8009018:	2b00      	cmp	r3, #0
 800901a:	d016      	beq.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800901c:	2b10      	cmp	r3, #16
 800901e:	d10f      	bne.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009020:	4baf      	ldr	r3, [pc, #700]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009024:	4aae      	ldr	r2, [pc, #696]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800902a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800902c:	e00e      	b.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	3304      	adds	r3, #4
 8009032:	2102      	movs	r1, #2
 8009034:	4618      	mov	r0, r3
 8009036:	f001 fe83 	bl	800ad40 <RCCEx_PLL2_Config>
 800903a:	4603      	mov	r3, r0
 800903c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800903e:	e005      	b.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	75fb      	strb	r3, [r7, #23]
      break;
 8009044:	e002      	b.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8009046:	bf00      	nop
 8009048:	e000      	b.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800904a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800904c:	7dfb      	ldrb	r3, [r7, #23]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d109      	bne.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009052:	4ba3      	ldr	r3, [pc, #652]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009056:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800905e:	49a0      	ldr	r1, [pc, #640]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009060:	4313      	orrs	r3, r2
 8009062:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009064:	e001      	b.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009066:	7dfb      	ldrb	r3, [r7, #23]
 8009068:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009072:	2b00      	cmp	r3, #0
 8009074:	d047      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800907a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800907e:	d030      	beq.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8009080:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009084:	d82a      	bhi.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009086:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800908a:	d02c      	beq.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800908c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009090:	d824      	bhi.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009096:	d018      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8009098:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800909c:	d81e      	bhi.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d003      	beq.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80090a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090a6:	d007      	beq.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80090a8:	e018      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090aa:	4b8d      	ldr	r3, [pc, #564]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80090ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ae:	4a8c      	ldr	r2, [pc, #560]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80090b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80090b6:	e017      	b.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	3304      	adds	r3, #4
 80090bc:	2100      	movs	r1, #0
 80090be:	4618      	mov	r0, r3
 80090c0:	f001 fe3e 	bl	800ad40 <RCCEx_PLL2_Config>
 80090c4:	4603      	mov	r3, r0
 80090c6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80090c8:	e00e      	b.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	3324      	adds	r3, #36	; 0x24
 80090ce:	2100      	movs	r1, #0
 80090d0:	4618      	mov	r0, r3
 80090d2:	f001 fee7 	bl	800aea4 <RCCEx_PLL3_Config>
 80090d6:	4603      	mov	r3, r0
 80090d8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80090da:	e005      	b.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090dc:	2301      	movs	r3, #1
 80090de:	75fb      	strb	r3, [r7, #23]
      break;
 80090e0:	e002      	b.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80090e2:	bf00      	nop
 80090e4:	e000      	b.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80090e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090e8:	7dfb      	ldrb	r3, [r7, #23]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d109      	bne.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80090ee:	4b7c      	ldr	r3, [pc, #496]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80090f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090f2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090fa:	4979      	ldr	r1, [pc, #484]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80090fc:	4313      	orrs	r3, r2
 80090fe:	650b      	str	r3, [r1, #80]	; 0x50
 8009100:	e001      	b.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009102:	7dfb      	ldrb	r3, [r7, #23]
 8009104:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800910e:	2b00      	cmp	r3, #0
 8009110:	d049      	beq.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009116:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800911a:	d02e      	beq.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800911c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009120:	d828      	bhi.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009122:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009126:	d02a      	beq.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8009128:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800912c:	d822      	bhi.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800912e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009132:	d026      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8009134:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009138:	d81c      	bhi.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800913a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800913e:	d010      	beq.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8009140:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009144:	d816      	bhi.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009146:	2b00      	cmp	r3, #0
 8009148:	d01d      	beq.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800914a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800914e:	d111      	bne.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	3304      	adds	r3, #4
 8009154:	2101      	movs	r1, #1
 8009156:	4618      	mov	r0, r3
 8009158:	f001 fdf2 	bl	800ad40 <RCCEx_PLL2_Config>
 800915c:	4603      	mov	r3, r0
 800915e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009160:	e012      	b.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	3324      	adds	r3, #36	; 0x24
 8009166:	2101      	movs	r1, #1
 8009168:	4618      	mov	r0, r3
 800916a:	f001 fe9b 	bl	800aea4 <RCCEx_PLL3_Config>
 800916e:	4603      	mov	r3, r0
 8009170:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009172:	e009      	b.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	75fb      	strb	r3, [r7, #23]
      break;
 8009178:	e006      	b.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800917a:	bf00      	nop
 800917c:	e004      	b.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800917e:	bf00      	nop
 8009180:	e002      	b.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009182:	bf00      	nop
 8009184:	e000      	b.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009186:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009188:	7dfb      	ldrb	r3, [r7, #23]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d109      	bne.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800918e:	4b54      	ldr	r3, [pc, #336]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009192:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800919a:	4951      	ldr	r1, [pc, #324]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800919c:	4313      	orrs	r3, r2
 800919e:	650b      	str	r3, [r1, #80]	; 0x50
 80091a0:	e001      	b.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091a2:	7dfb      	ldrb	r3, [r7, #23]
 80091a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d04b      	beq.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80091b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091bc:	d02e      	beq.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x520>
 80091be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091c2:	d828      	bhi.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80091c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091c8:	d02a      	beq.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80091ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091ce:	d822      	bhi.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80091d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80091d4:	d026      	beq.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80091d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80091da:	d81c      	bhi.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80091dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091e0:	d010      	beq.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80091e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091e6:	d816      	bhi.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d01d      	beq.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80091ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091f0:	d111      	bne.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	3304      	adds	r3, #4
 80091f6:	2101      	movs	r1, #1
 80091f8:	4618      	mov	r0, r3
 80091fa:	f001 fda1 	bl	800ad40 <RCCEx_PLL2_Config>
 80091fe:	4603      	mov	r3, r0
 8009200:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009202:	e012      	b.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	3324      	adds	r3, #36	; 0x24
 8009208:	2101      	movs	r1, #1
 800920a:	4618      	mov	r0, r3
 800920c:	f001 fe4a 	bl	800aea4 <RCCEx_PLL3_Config>
 8009210:	4603      	mov	r3, r0
 8009212:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009214:	e009      	b.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	75fb      	strb	r3, [r7, #23]
      break;
 800921a:	e006      	b.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800921c:	bf00      	nop
 800921e:	e004      	b.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009220:	bf00      	nop
 8009222:	e002      	b.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009224:	bf00      	nop
 8009226:	e000      	b.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009228:	bf00      	nop
    }

    if(ret == HAL_OK)
 800922a:	7dfb      	ldrb	r3, [r7, #23]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d10a      	bne.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009230:	4b2b      	ldr	r3, [pc, #172]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009234:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800923e:	4928      	ldr	r1, [pc, #160]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009240:	4313      	orrs	r3, r2
 8009242:	658b      	str	r3, [r1, #88]	; 0x58
 8009244:	e001      	b.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009246:	7dfb      	ldrb	r3, [r7, #23]
 8009248:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009252:	2b00      	cmp	r3, #0
 8009254:	d02f      	beq.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800925a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800925e:	d00e      	beq.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009260:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009264:	d814      	bhi.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8009266:	2b00      	cmp	r3, #0
 8009268:	d015      	beq.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800926a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800926e:	d10f      	bne.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009270:	4b1b      	ldr	r3, [pc, #108]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009274:	4a1a      	ldr	r2, [pc, #104]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800927a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800927c:	e00c      	b.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	3304      	adds	r3, #4
 8009282:	2101      	movs	r1, #1
 8009284:	4618      	mov	r0, r3
 8009286:	f001 fd5b 	bl	800ad40 <RCCEx_PLL2_Config>
 800928a:	4603      	mov	r3, r0
 800928c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800928e:	e003      	b.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	75fb      	strb	r3, [r7, #23]
      break;
 8009294:	e000      	b.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8009296:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009298:	7dfb      	ldrb	r3, [r7, #23]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d109      	bne.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800929e:	4b10      	ldr	r3, [pc, #64]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80092a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092aa:	490d      	ldr	r1, [pc, #52]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80092ac:	4313      	orrs	r3, r2
 80092ae:	650b      	str	r3, [r1, #80]	; 0x50
 80092b0:	e001      	b.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092b2:	7dfb      	ldrb	r3, [r7, #23]
 80092b4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d033      	beq.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092c6:	2b03      	cmp	r3, #3
 80092c8:	d81c      	bhi.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80092ca:	a201      	add	r2, pc, #4	; (adr r2, 80092d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80092cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d0:	0800930b 	.word	0x0800930b
 80092d4:	080092e5 	.word	0x080092e5
 80092d8:	080092f3 	.word	0x080092f3
 80092dc:	0800930b 	.word	0x0800930b
 80092e0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092e4:	4bb8      	ldr	r3, [pc, #736]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80092e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e8:	4ab7      	ldr	r2, [pc, #732]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80092ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80092f0:	e00c      	b.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	3304      	adds	r3, #4
 80092f6:	2102      	movs	r1, #2
 80092f8:	4618      	mov	r0, r3
 80092fa:	f001 fd21 	bl	800ad40 <RCCEx_PLL2_Config>
 80092fe:	4603      	mov	r3, r0
 8009300:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009302:	e003      	b.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009304:	2301      	movs	r3, #1
 8009306:	75fb      	strb	r3, [r7, #23]
      break;
 8009308:	e000      	b.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800930a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800930c:	7dfb      	ldrb	r3, [r7, #23]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d109      	bne.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009312:	4bad      	ldr	r3, [pc, #692]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009316:	f023 0203 	bic.w	r2, r3, #3
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800931e:	49aa      	ldr	r1, [pc, #680]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009320:	4313      	orrs	r3, r2
 8009322:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009324:	e001      	b.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009326:	7dfb      	ldrb	r3, [r7, #23]
 8009328:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009332:	2b00      	cmp	r3, #0
 8009334:	f000 8086 	beq.w	8009444 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009338:	4ba4      	ldr	r3, [pc, #656]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4aa3      	ldr	r2, [pc, #652]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800933e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009342:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009344:	f7f9 fa02 	bl	800274c <HAL_GetTick>
 8009348:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800934a:	e009      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800934c:	f7f9 f9fe 	bl	800274c <HAL_GetTick>
 8009350:	4602      	mov	r2, r0
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	2b64      	cmp	r3, #100	; 0x64
 8009358:	d902      	bls.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800935a:	2303      	movs	r3, #3
 800935c:	75fb      	strb	r3, [r7, #23]
        break;
 800935e:	e005      	b.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009360:	4b9a      	ldr	r3, [pc, #616]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009368:	2b00      	cmp	r3, #0
 800936a:	d0ef      	beq.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800936c:	7dfb      	ldrb	r3, [r7, #23]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d166      	bne.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009372:	4b95      	ldr	r3, [pc, #596]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009374:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800937c:	4053      	eors	r3, r2
 800937e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009382:	2b00      	cmp	r3, #0
 8009384:	d013      	beq.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009386:	4b90      	ldr	r3, [pc, #576]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800938a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800938e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009390:	4b8d      	ldr	r3, [pc, #564]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009394:	4a8c      	ldr	r2, [pc, #560]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800939a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800939c:	4b8a      	ldr	r3, [pc, #552]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800939e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093a0:	4a89      	ldr	r2, [pc, #548]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80093a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093a6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80093a8:	4a87      	ldr	r2, [pc, #540]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80093b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093b8:	d115      	bne.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093ba:	f7f9 f9c7 	bl	800274c <HAL_GetTick>
 80093be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093c0:	e00b      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093c2:	f7f9 f9c3 	bl	800274c <HAL_GetTick>
 80093c6:	4602      	mov	r2, r0
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	1ad3      	subs	r3, r2, r3
 80093cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d902      	bls.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80093d4:	2303      	movs	r3, #3
 80093d6:	75fb      	strb	r3, [r7, #23]
            break;
 80093d8:	e005      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093da:	4b7b      	ldr	r3, [pc, #492]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80093dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093de:	f003 0302 	and.w	r3, r3, #2
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d0ed      	beq.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80093e6:	7dfb      	ldrb	r3, [r7, #23]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d126      	bne.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80093f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80093fa:	d10d      	bne.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80093fc:	4b72      	ldr	r3, [pc, #456]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800940a:	0919      	lsrs	r1, r3, #4
 800940c:	4b70      	ldr	r3, [pc, #448]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800940e:	400b      	ands	r3, r1
 8009410:	496d      	ldr	r1, [pc, #436]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009412:	4313      	orrs	r3, r2
 8009414:	610b      	str	r3, [r1, #16]
 8009416:	e005      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009418:	4b6b      	ldr	r3, [pc, #428]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800941a:	691b      	ldr	r3, [r3, #16]
 800941c:	4a6a      	ldr	r2, [pc, #424]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800941e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009422:	6113      	str	r3, [r2, #16]
 8009424:	4b68      	ldr	r3, [pc, #416]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009426:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800942e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009432:	4965      	ldr	r1, [pc, #404]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009434:	4313      	orrs	r3, r2
 8009436:	670b      	str	r3, [r1, #112]	; 0x70
 8009438:	e004      	b.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800943a:	7dfb      	ldrb	r3, [r7, #23]
 800943c:	75bb      	strb	r3, [r7, #22]
 800943e:	e001      	b.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009440:	7dfb      	ldrb	r3, [r7, #23]
 8009442:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 0301 	and.w	r3, r3, #1
 800944c:	2b00      	cmp	r3, #0
 800944e:	d07e      	beq.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009454:	2b28      	cmp	r3, #40	; 0x28
 8009456:	d867      	bhi.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009458:	a201      	add	r2, pc, #4	; (adr r2, 8009460 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800945a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800945e:	bf00      	nop
 8009460:	0800952f 	.word	0x0800952f
 8009464:	08009529 	.word	0x08009529
 8009468:	08009529 	.word	0x08009529
 800946c:	08009529 	.word	0x08009529
 8009470:	08009529 	.word	0x08009529
 8009474:	08009529 	.word	0x08009529
 8009478:	08009529 	.word	0x08009529
 800947c:	08009529 	.word	0x08009529
 8009480:	08009505 	.word	0x08009505
 8009484:	08009529 	.word	0x08009529
 8009488:	08009529 	.word	0x08009529
 800948c:	08009529 	.word	0x08009529
 8009490:	08009529 	.word	0x08009529
 8009494:	08009529 	.word	0x08009529
 8009498:	08009529 	.word	0x08009529
 800949c:	08009529 	.word	0x08009529
 80094a0:	08009517 	.word	0x08009517
 80094a4:	08009529 	.word	0x08009529
 80094a8:	08009529 	.word	0x08009529
 80094ac:	08009529 	.word	0x08009529
 80094b0:	08009529 	.word	0x08009529
 80094b4:	08009529 	.word	0x08009529
 80094b8:	08009529 	.word	0x08009529
 80094bc:	08009529 	.word	0x08009529
 80094c0:	0800952f 	.word	0x0800952f
 80094c4:	08009529 	.word	0x08009529
 80094c8:	08009529 	.word	0x08009529
 80094cc:	08009529 	.word	0x08009529
 80094d0:	08009529 	.word	0x08009529
 80094d4:	08009529 	.word	0x08009529
 80094d8:	08009529 	.word	0x08009529
 80094dc:	08009529 	.word	0x08009529
 80094e0:	0800952f 	.word	0x0800952f
 80094e4:	08009529 	.word	0x08009529
 80094e8:	08009529 	.word	0x08009529
 80094ec:	08009529 	.word	0x08009529
 80094f0:	08009529 	.word	0x08009529
 80094f4:	08009529 	.word	0x08009529
 80094f8:	08009529 	.word	0x08009529
 80094fc:	08009529 	.word	0x08009529
 8009500:	0800952f 	.word	0x0800952f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	3304      	adds	r3, #4
 8009508:	2101      	movs	r1, #1
 800950a:	4618      	mov	r0, r3
 800950c:	f001 fc18 	bl	800ad40 <RCCEx_PLL2_Config>
 8009510:	4603      	mov	r3, r0
 8009512:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009514:	e00c      	b.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	3324      	adds	r3, #36	; 0x24
 800951a:	2101      	movs	r1, #1
 800951c:	4618      	mov	r0, r3
 800951e:	f001 fcc1 	bl	800aea4 <RCCEx_PLL3_Config>
 8009522:	4603      	mov	r3, r0
 8009524:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009526:	e003      	b.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	75fb      	strb	r3, [r7, #23]
      break;
 800952c:	e000      	b.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800952e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009530:	7dfb      	ldrb	r3, [r7, #23]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d109      	bne.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009536:	4b24      	ldr	r3, [pc, #144]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800953a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009542:	4921      	ldr	r1, [pc, #132]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009544:	4313      	orrs	r3, r2
 8009546:	654b      	str	r3, [r1, #84]	; 0x54
 8009548:	e001      	b.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800954a:	7dfb      	ldrb	r3, [r7, #23]
 800954c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f003 0302 	and.w	r3, r3, #2
 8009556:	2b00      	cmp	r3, #0
 8009558:	d03e      	beq.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800955e:	2b05      	cmp	r3, #5
 8009560:	d820      	bhi.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8009562:	a201      	add	r2, pc, #4	; (adr r2, 8009568 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8009564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009568:	080095ab 	.word	0x080095ab
 800956c:	08009581 	.word	0x08009581
 8009570:	08009593 	.word	0x08009593
 8009574:	080095ab 	.word	0x080095ab
 8009578:	080095ab 	.word	0x080095ab
 800957c:	080095ab 	.word	0x080095ab
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	3304      	adds	r3, #4
 8009584:	2101      	movs	r1, #1
 8009586:	4618      	mov	r0, r3
 8009588:	f001 fbda 	bl	800ad40 <RCCEx_PLL2_Config>
 800958c:	4603      	mov	r3, r0
 800958e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009590:	e00c      	b.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	3324      	adds	r3, #36	; 0x24
 8009596:	2101      	movs	r1, #1
 8009598:	4618      	mov	r0, r3
 800959a:	f001 fc83 	bl	800aea4 <RCCEx_PLL3_Config>
 800959e:	4603      	mov	r3, r0
 80095a0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80095a2:	e003      	b.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	75fb      	strb	r3, [r7, #23]
      break;
 80095a8:	e000      	b.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80095aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095ac:	7dfb      	ldrb	r3, [r7, #23]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d110      	bne.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80095b2:	4b05      	ldr	r3, [pc, #20]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80095b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095b6:	f023 0207 	bic.w	r2, r3, #7
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095be:	4902      	ldr	r1, [pc, #8]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80095c0:	4313      	orrs	r3, r2
 80095c2:	654b      	str	r3, [r1, #84]	; 0x54
 80095c4:	e008      	b.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80095c6:	bf00      	nop
 80095c8:	58024400 	.word	0x58024400
 80095cc:	58024800 	.word	0x58024800
 80095d0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095d4:	7dfb      	ldrb	r3, [r7, #23]
 80095d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f003 0304 	and.w	r3, r3, #4
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d039      	beq.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095ea:	2b05      	cmp	r3, #5
 80095ec:	d820      	bhi.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80095ee:	a201      	add	r2, pc, #4	; (adr r2, 80095f4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80095f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f4:	08009637 	.word	0x08009637
 80095f8:	0800960d 	.word	0x0800960d
 80095fc:	0800961f 	.word	0x0800961f
 8009600:	08009637 	.word	0x08009637
 8009604:	08009637 	.word	0x08009637
 8009608:	08009637 	.word	0x08009637
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	3304      	adds	r3, #4
 8009610:	2101      	movs	r1, #1
 8009612:	4618      	mov	r0, r3
 8009614:	f001 fb94 	bl	800ad40 <RCCEx_PLL2_Config>
 8009618:	4603      	mov	r3, r0
 800961a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800961c:	e00c      	b.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	3324      	adds	r3, #36	; 0x24
 8009622:	2101      	movs	r1, #1
 8009624:	4618      	mov	r0, r3
 8009626:	f001 fc3d 	bl	800aea4 <RCCEx_PLL3_Config>
 800962a:	4603      	mov	r3, r0
 800962c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800962e:	e003      	b.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	75fb      	strb	r3, [r7, #23]
      break;
 8009634:	e000      	b.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8009636:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009638:	7dfb      	ldrb	r3, [r7, #23]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d10a      	bne.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800963e:	4bb7      	ldr	r3, [pc, #732]	; (800991c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009642:	f023 0207 	bic.w	r2, r3, #7
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800964c:	49b3      	ldr	r1, [pc, #716]	; (800991c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800964e:	4313      	orrs	r3, r2
 8009650:	658b      	str	r3, [r1, #88]	; 0x58
 8009652:	e001      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009654:	7dfb      	ldrb	r3, [r7, #23]
 8009656:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f003 0320 	and.w	r3, r3, #32
 8009660:	2b00      	cmp	r3, #0
 8009662:	d04b      	beq.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800966a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800966e:	d02e      	beq.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8009670:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009674:	d828      	bhi.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800967a:	d02a      	beq.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800967c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009680:	d822      	bhi.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009682:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009686:	d026      	beq.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009688:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800968c:	d81c      	bhi.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800968e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009692:	d010      	beq.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8009694:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009698:	d816      	bhi.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800969a:	2b00      	cmp	r3, #0
 800969c:	d01d      	beq.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800969e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096a2:	d111      	bne.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	3304      	adds	r3, #4
 80096a8:	2100      	movs	r1, #0
 80096aa:	4618      	mov	r0, r3
 80096ac:	f001 fb48 	bl	800ad40 <RCCEx_PLL2_Config>
 80096b0:	4603      	mov	r3, r0
 80096b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80096b4:	e012      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	3324      	adds	r3, #36	; 0x24
 80096ba:	2102      	movs	r1, #2
 80096bc:	4618      	mov	r0, r3
 80096be:	f001 fbf1 	bl	800aea4 <RCCEx_PLL3_Config>
 80096c2:	4603      	mov	r3, r0
 80096c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80096c6:	e009      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096c8:	2301      	movs	r3, #1
 80096ca:	75fb      	strb	r3, [r7, #23]
      break;
 80096cc:	e006      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80096ce:	bf00      	nop
 80096d0:	e004      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80096d2:	bf00      	nop
 80096d4:	e002      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80096d6:	bf00      	nop
 80096d8:	e000      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80096da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096dc:	7dfb      	ldrb	r3, [r7, #23]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d10a      	bne.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80096e2:	4b8e      	ldr	r3, [pc, #568]	; (800991c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80096e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096e6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096f0:	498a      	ldr	r1, [pc, #552]	; (800991c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80096f2:	4313      	orrs	r3, r2
 80096f4:	654b      	str	r3, [r1, #84]	; 0x54
 80096f6:	e001      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096f8:	7dfb      	ldrb	r3, [r7, #23]
 80096fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009704:	2b00      	cmp	r3, #0
 8009706:	d04b      	beq.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800970e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009712:	d02e      	beq.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8009714:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009718:	d828      	bhi.n	800976c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800971a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800971e:	d02a      	beq.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009724:	d822      	bhi.n	800976c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009726:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800972a:	d026      	beq.n	800977a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800972c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009730:	d81c      	bhi.n	800976c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009736:	d010      	beq.n	800975a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8009738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800973c:	d816      	bhi.n	800976c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800973e:	2b00      	cmp	r3, #0
 8009740:	d01d      	beq.n	800977e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009746:	d111      	bne.n	800976c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	3304      	adds	r3, #4
 800974c:	2100      	movs	r1, #0
 800974e:	4618      	mov	r0, r3
 8009750:	f001 faf6 	bl	800ad40 <RCCEx_PLL2_Config>
 8009754:	4603      	mov	r3, r0
 8009756:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009758:	e012      	b.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	3324      	adds	r3, #36	; 0x24
 800975e:	2102      	movs	r1, #2
 8009760:	4618      	mov	r0, r3
 8009762:	f001 fb9f 	bl	800aea4 <RCCEx_PLL3_Config>
 8009766:	4603      	mov	r3, r0
 8009768:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800976a:	e009      	b.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	75fb      	strb	r3, [r7, #23]
      break;
 8009770:	e006      	b.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009772:	bf00      	nop
 8009774:	e004      	b.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009776:	bf00      	nop
 8009778:	e002      	b.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800977a:	bf00      	nop
 800977c:	e000      	b.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800977e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009780:	7dfb      	ldrb	r3, [r7, #23]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d10a      	bne.n	800979c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009786:	4b65      	ldr	r3, [pc, #404]	; (800991c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800978a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009794:	4961      	ldr	r1, [pc, #388]	; (800991c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009796:	4313      	orrs	r3, r2
 8009798:	658b      	str	r3, [r1, #88]	; 0x58
 800979a:	e001      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800979c:	7dfb      	ldrb	r3, [r7, #23]
 800979e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d04b      	beq.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80097b2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80097b6:	d02e      	beq.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80097b8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80097bc:	d828      	bhi.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80097be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097c2:	d02a      	beq.n	800981a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80097c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097c8:	d822      	bhi.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80097ca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80097ce:	d026      	beq.n	800981e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80097d0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80097d4:	d81c      	bhi.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80097d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097da:	d010      	beq.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80097dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097e0:	d816      	bhi.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d01d      	beq.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80097e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097ea:	d111      	bne.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	3304      	adds	r3, #4
 80097f0:	2100      	movs	r1, #0
 80097f2:	4618      	mov	r0, r3
 80097f4:	f001 faa4 	bl	800ad40 <RCCEx_PLL2_Config>
 80097f8:	4603      	mov	r3, r0
 80097fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80097fc:	e012      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	3324      	adds	r3, #36	; 0x24
 8009802:	2102      	movs	r1, #2
 8009804:	4618      	mov	r0, r3
 8009806:	f001 fb4d 	bl	800aea4 <RCCEx_PLL3_Config>
 800980a:	4603      	mov	r3, r0
 800980c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800980e:	e009      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	75fb      	strb	r3, [r7, #23]
      break;
 8009814:	e006      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009816:	bf00      	nop
 8009818:	e004      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800981a:	bf00      	nop
 800981c:	e002      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800981e:	bf00      	nop
 8009820:	e000      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009822:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009824:	7dfb      	ldrb	r3, [r7, #23]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d10a      	bne.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800982a:	4b3c      	ldr	r3, [pc, #240]	; (800991c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800982c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800982e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009838:	4938      	ldr	r1, [pc, #224]	; (800991c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800983a:	4313      	orrs	r3, r2
 800983c:	658b      	str	r3, [r1, #88]	; 0x58
 800983e:	e001      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009840:	7dfb      	ldrb	r3, [r7, #23]
 8009842:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f003 0308 	and.w	r3, r3, #8
 800984c:	2b00      	cmp	r3, #0
 800984e:	d01a      	beq.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800985a:	d10a      	bne.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	3324      	adds	r3, #36	; 0x24
 8009860:	2102      	movs	r1, #2
 8009862:	4618      	mov	r0, r3
 8009864:	f001 fb1e 	bl	800aea4 <RCCEx_PLL3_Config>
 8009868:	4603      	mov	r3, r0
 800986a:	2b00      	cmp	r3, #0
 800986c:	d001      	beq.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800986e:	2301      	movs	r3, #1
 8009870:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009872:	4b2a      	ldr	r3, [pc, #168]	; (800991c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009876:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009880:	4926      	ldr	r1, [pc, #152]	; (800991c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009882:	4313      	orrs	r3, r2
 8009884:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f003 0310 	and.w	r3, r3, #16
 800988e:	2b00      	cmp	r3, #0
 8009890:	d01a      	beq.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800989c:	d10a      	bne.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	3324      	adds	r3, #36	; 0x24
 80098a2:	2102      	movs	r1, #2
 80098a4:	4618      	mov	r0, r3
 80098a6:	f001 fafd 	bl	800aea4 <RCCEx_PLL3_Config>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d001      	beq.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80098b4:	4b19      	ldr	r3, [pc, #100]	; (800991c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80098b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80098c2:	4916      	ldr	r1, [pc, #88]	; (800991c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80098c4:	4313      	orrs	r3, r2
 80098c6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d036      	beq.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80098da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098de:	d01f      	beq.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80098e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098e4:	d817      	bhi.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d003      	beq.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80098ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098ee:	d009      	beq.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80098f0:	e011      	b.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	3304      	adds	r3, #4
 80098f6:	2100      	movs	r1, #0
 80098f8:	4618      	mov	r0, r3
 80098fa:	f001 fa21 	bl	800ad40 <RCCEx_PLL2_Config>
 80098fe:	4603      	mov	r3, r0
 8009900:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009902:	e00e      	b.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	3324      	adds	r3, #36	; 0x24
 8009908:	2102      	movs	r1, #2
 800990a:	4618      	mov	r0, r3
 800990c:	f001 faca 	bl	800aea4 <RCCEx_PLL3_Config>
 8009910:	4603      	mov	r3, r0
 8009912:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009914:	e005      	b.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	75fb      	strb	r3, [r7, #23]
      break;
 800991a:	e002      	b.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800991c:	58024400 	.word	0x58024400
      break;
 8009920:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009922:	7dfb      	ldrb	r3, [r7, #23]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d10a      	bne.n	800993e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009928:	4b93      	ldr	r3, [pc, #588]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800992a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800992c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009936:	4990      	ldr	r1, [pc, #576]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009938:	4313      	orrs	r3, r2
 800993a:	658b      	str	r3, [r1, #88]	; 0x58
 800993c:	e001      	b.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800993e:	7dfb      	ldrb	r3, [r7, #23]
 8009940:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800994a:	2b00      	cmp	r3, #0
 800994c:	d033      	beq.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009954:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009958:	d01c      	beq.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800995a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800995e:	d816      	bhi.n	800998e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8009960:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009964:	d003      	beq.n	800996e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8009966:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800996a:	d007      	beq.n	800997c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800996c:	e00f      	b.n	800998e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800996e:	4b82      	ldr	r3, [pc, #520]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009972:	4a81      	ldr	r2, [pc, #516]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009978:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800997a:	e00c      	b.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	3324      	adds	r3, #36	; 0x24
 8009980:	2101      	movs	r1, #1
 8009982:	4618      	mov	r0, r3
 8009984:	f001 fa8e 	bl	800aea4 <RCCEx_PLL3_Config>
 8009988:	4603      	mov	r3, r0
 800998a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800998c:	e003      	b.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800998e:	2301      	movs	r3, #1
 8009990:	75fb      	strb	r3, [r7, #23]
      break;
 8009992:	e000      	b.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8009994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009996:	7dfb      	ldrb	r3, [r7, #23]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d10a      	bne.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800999c:	4b76      	ldr	r3, [pc, #472]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800999e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099aa:	4973      	ldr	r1, [pc, #460]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80099ac:	4313      	orrs	r3, r2
 80099ae:	654b      	str	r3, [r1, #84]	; 0x54
 80099b0:	e001      	b.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099b2:	7dfb      	ldrb	r3, [r7, #23]
 80099b4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d029      	beq.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d003      	beq.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80099ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099ce:	d007      	beq.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80099d0:	e00f      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099d2:	4b69      	ldr	r3, [pc, #420]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80099d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d6:	4a68      	ldr	r2, [pc, #416]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80099d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80099de:	e00b      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	3304      	adds	r3, #4
 80099e4:	2102      	movs	r1, #2
 80099e6:	4618      	mov	r0, r3
 80099e8:	f001 f9aa 	bl	800ad40 <RCCEx_PLL2_Config>
 80099ec:	4603      	mov	r3, r0
 80099ee:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80099f0:	e002      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80099f2:	2301      	movs	r3, #1
 80099f4:	75fb      	strb	r3, [r7, #23]
      break;
 80099f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099f8:	7dfb      	ldrb	r3, [r7, #23]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d109      	bne.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80099fe:	4b5e      	ldr	r3, [pc, #376]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a0a:	495b      	ldr	r1, [pc, #364]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009a10:	e001      	b.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a12:	7dfb      	ldrb	r3, [r7, #23]
 8009a14:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d00a      	beq.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	3324      	adds	r3, #36	; 0x24
 8009a26:	2102      	movs	r1, #2
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f001 fa3b 	bl	800aea4 <RCCEx_PLL3_Config>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d001      	beq.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
 8009a36:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d030      	beq.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a4c:	d017      	beq.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8009a4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a52:	d811      	bhi.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a58:	d013      	beq.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a5e:	d80b      	bhi.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d010      	beq.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a68:	d106      	bne.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a6a:	4b43      	ldr	r3, [pc, #268]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a6e:	4a42      	ldr	r2, [pc, #264]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009a76:	e007      	b.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8009a7c:	e004      	b.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009a7e:	bf00      	nop
 8009a80:	e002      	b.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009a82:	bf00      	nop
 8009a84:	e000      	b.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009a86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a88:	7dfb      	ldrb	r3, [r7, #23]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d109      	bne.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009a8e:	4b3a      	ldr	r3, [pc, #232]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a9a:	4937      	ldr	r1, [pc, #220]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	654b      	str	r3, [r1, #84]	; 0x54
 8009aa0:	e001      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aa2:	7dfb      	ldrb	r3, [r7, #23]
 8009aa4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d008      	beq.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009ab2:	4b31      	ldr	r3, [pc, #196]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ab6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009abe:	492e      	ldr	r1, [pc, #184]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d009      	beq.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009ad0:	4b29      	ldr	r3, [pc, #164]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ad2:	691b      	ldr	r3, [r3, #16]
 8009ad4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009ade:	4926      	ldr	r1, [pc, #152]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d008      	beq.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009af0:	4b21      	ldr	r3, [pc, #132]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009af4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009afc:	491e      	ldr	r1, [pc, #120]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009afe:	4313      	orrs	r3, r2
 8009b00:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d00d      	beq.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009b0e:	4b1a      	ldr	r3, [pc, #104]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	4a19      	ldr	r2, [pc, #100]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009b14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009b18:	6113      	str	r3, [r2, #16]
 8009b1a:	4b17      	ldr	r3, [pc, #92]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009b1c:	691a      	ldr	r2, [r3, #16]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009b24:	4914      	ldr	r1, [pc, #80]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009b26:	4313      	orrs	r3, r2
 8009b28:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	da08      	bge.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009b32:	4b11      	ldr	r3, [pc, #68]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b3e:	490e      	ldr	r1, [pc, #56]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009b40:	4313      	orrs	r3, r2
 8009b42:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d009      	beq.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009b50:	4b09      	ldr	r3, [pc, #36]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b5e:	4906      	ldr	r1, [pc, #24]	; (8009b78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009b60:	4313      	orrs	r3, r2
 8009b62:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009b64:	7dbb      	ldrb	r3, [r7, #22]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d101      	bne.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	e000      	b.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3718      	adds	r7, #24
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	58024400 	.word	0x58024400

08009b7c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b090      	sub	sp, #64	; 0x40
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b8a:	f040 8095 	bne.w	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009b8e:	4bae      	ldr	r3, [pc, #696]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b92:	f003 0307 	and.w	r3, r3, #7
 8009b96:	633b      	str	r3, [r7, #48]	; 0x30
 8009b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b9a:	2b04      	cmp	r3, #4
 8009b9c:	f200 8088 	bhi.w	8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8009ba0:	a201      	add	r2, pc, #4	; (adr r2, 8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8009ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba6:	bf00      	nop
 8009ba8:	08009bbd 	.word	0x08009bbd
 8009bac:	08009be5 	.word	0x08009be5
 8009bb0:	08009c0d 	.word	0x08009c0d
 8009bb4:	08009ca9 	.word	0x08009ca9
 8009bb8:	08009c35 	.word	0x08009c35

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009bbc:	4ba2      	ldr	r3, [pc, #648]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bc8:	d108      	bne.n	8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f000 ff64 	bl	800aa9c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8009bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009bd8:	f000 bc95 	b.w	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009be0:	f000 bc91 	b.w	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009be4:	4b98      	ldr	r3, [pc, #608]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009bf0:	d108      	bne.n	8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bf2:	f107 0318 	add.w	r3, r7, #24
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f000 fca8 	bl	800a54c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009bfc:	69bb      	ldr	r3, [r7, #24]
 8009bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009c00:	f000 bc81 	b.w	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009c04:	2300      	movs	r3, #0
 8009c06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c08:	f000 bc7d 	b.w	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009c0c:	4b8e      	ldr	r3, [pc, #568]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c18:	d108      	bne.n	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c1a:	f107 030c 	add.w	r3, r7, #12
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f000 fde8 	bl	800a7f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009c28:	f000 bc6d 	b.w	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c30:	f000 bc69 	b.w	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009c34:	4b84      	ldr	r3, [pc, #528]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009c3c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c3e:	4b82      	ldr	r3, [pc, #520]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f003 0304 	and.w	r3, r3, #4
 8009c46:	2b04      	cmp	r3, #4
 8009c48:	d10c      	bne.n	8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8009c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d109      	bne.n	8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c50:	4b7d      	ldr	r3, [pc, #500]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	08db      	lsrs	r3, r3, #3
 8009c56:	f003 0303 	and.w	r3, r3, #3
 8009c5a:	4a7c      	ldr	r2, [pc, #496]	; (8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8009c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8009c60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c62:	e01f      	b.n	8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c64:	4b78      	ldr	r3, [pc, #480]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c70:	d106      	bne.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8009c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c78:	d102      	bne.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009c7a:	4b75      	ldr	r3, [pc, #468]	; (8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c7e:	e011      	b.n	8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c80:	4b71      	ldr	r3, [pc, #452]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c8c:	d106      	bne.n	8009c9c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8009c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c94:	d102      	bne.n	8009c9c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009c96:	4b6f      	ldr	r3, [pc, #444]	; (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8009c98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c9a:	e003      	b.n	8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009ca0:	f000 bc31 	b.w	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009ca4:	f000 bc2f 	b.w	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009ca8:	4b6b      	ldr	r3, [pc, #428]	; (8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8009caa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009cac:	f000 bc2b 	b.w	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009cb4:	f000 bc27 	b.w	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cbe:	f040 8095 	bne.w	8009dec <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009cc2:	4b61      	ldr	r3, [pc, #388]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cc6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009cca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cd2:	d04d      	beq.n	8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8009cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cda:	f200 8084 	bhi.w	8009de6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce0:	2bc0      	cmp	r3, #192	; 0xc0
 8009ce2:	d07d      	beq.n	8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8009ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce6:	2bc0      	cmp	r3, #192	; 0xc0
 8009ce8:	d87d      	bhi.n	8009de6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cec:	2b80      	cmp	r3, #128	; 0x80
 8009cee:	d02d      	beq.n	8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8009cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf2:	2b80      	cmp	r3, #128	; 0x80
 8009cf4:	d877      	bhi.n	8009de6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d003      	beq.n	8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8009cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfe:	2b40      	cmp	r3, #64	; 0x40
 8009d00:	d012      	beq.n	8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009d02:	e070      	b.n	8009de6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d04:	4b50      	ldr	r3, [pc, #320]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d10:	d107      	bne.n	8009d22 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d16:	4618      	mov	r0, r3
 8009d18:	f000 fec0 	bl	800aa9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009d20:	e3f1      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009d22:	2300      	movs	r3, #0
 8009d24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d26:	e3ee      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d28:	4b47      	ldr	r3, [pc, #284]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d34:	d107      	bne.n	8009d46 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d36:	f107 0318 	add.w	r3, r7, #24
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f000 fc06 	bl	800a54c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009d44:	e3df      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009d46:	2300      	movs	r3, #0
 8009d48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d4a:	e3dc      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d4c:	4b3e      	ldr	r3, [pc, #248]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d58:	d107      	bne.n	8009d6a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d5a:	f107 030c 	add.w	r3, r7, #12
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f000 fd48 	bl	800a7f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009d68:	e3cd      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d6e:	e3ca      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009d70:	4b35      	ldr	r3, [pc, #212]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009d78:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d7a:	4b33      	ldr	r3, [pc, #204]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f003 0304 	and.w	r3, r3, #4
 8009d82:	2b04      	cmp	r3, #4
 8009d84:	d10c      	bne.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8009d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d109      	bne.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d8c:	4b2e      	ldr	r3, [pc, #184]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	08db      	lsrs	r3, r3, #3
 8009d92:	f003 0303 	and.w	r3, r3, #3
 8009d96:	4a2d      	ldr	r2, [pc, #180]	; (8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8009d98:	fa22 f303 	lsr.w	r3, r2, r3
 8009d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d9e:	e01e      	b.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009da0:	4b29      	ldr	r3, [pc, #164]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dac:	d106      	bne.n	8009dbc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8009dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009db0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009db4:	d102      	bne.n	8009dbc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009db6:	4b26      	ldr	r3, [pc, #152]	; (8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009db8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009dba:	e010      	b.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009dbc:	4b22      	ldr	r3, [pc, #136]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009dc8:	d106      	bne.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8009dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009dd0:	d102      	bne.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009dd2:	4b20      	ldr	r3, [pc, #128]	; (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8009dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009dd6:	e002      	b.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009ddc:	e393      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009dde:	e392      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009de0:	4b1d      	ldr	r3, [pc, #116]	; (8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8009de2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009de4:	e38f      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009de6:	2300      	movs	r3, #0
 8009de8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009dea:	e38c      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009df2:	f040 80a7 	bne.w	8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009df6:	4b14      	ldr	r3, [pc, #80]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dfa:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009dfe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e06:	d05f      	beq.n	8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8009e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e0e:	f200 8096 	bhi.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e14:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009e18:	f000 808e 	beq.w	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8009e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009e22:	f200 808c 	bhi.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e2c:	d03a      	beq.n	8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8009e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e34:	f200 8083 	bhi.w	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00e      	beq.n	8009e5c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8009e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e44:	d01c      	beq.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8009e46:	e07a      	b.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009e48:	58024400 	.word	0x58024400
 8009e4c:	03d09000 	.word	0x03d09000
 8009e50:	003d0900 	.word	0x003d0900
 8009e54:	007a1200 	.word	0x007a1200
 8009e58:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009e5c:	4baa      	ldr	r3, [pc, #680]	; (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e68:	d107      	bne.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f000 fe14 	bl	800aa9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009e78:	e345      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e7e:	e342      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e80:	4ba1      	ldr	r3, [pc, #644]	; (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e8c:	d107      	bne.n	8009e9e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e8e:	f107 0318 	add.w	r3, r7, #24
 8009e92:	4618      	mov	r0, r3
 8009e94:	f000 fb5a 	bl	800a54c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009e98:	69bb      	ldr	r3, [r7, #24]
 8009e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009e9c:	e333      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ea2:	e330      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ea4:	4b98      	ldr	r3, [pc, #608]	; (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009eac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009eb0:	d107      	bne.n	8009ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009eb2:	f107 030c 	add.w	r3, r7, #12
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f000 fc9c 	bl	800a7f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009ec0:	e321      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ec6:	e31e      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009ec8:	4b8f      	ldr	r3, [pc, #572]	; (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ecc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009ed0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009ed2:	4b8d      	ldr	r3, [pc, #564]	; (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f003 0304 	and.w	r3, r3, #4
 8009eda:	2b04      	cmp	r3, #4
 8009edc:	d10c      	bne.n	8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8009ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d109      	bne.n	8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ee4:	4b88      	ldr	r3, [pc, #544]	; (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	08db      	lsrs	r3, r3, #3
 8009eea:	f003 0303 	and.w	r3, r3, #3
 8009eee:	4a87      	ldr	r2, [pc, #540]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ef6:	e01e      	b.n	8009f36 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009ef8:	4b83      	ldr	r3, [pc, #524]	; (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f04:	d106      	bne.n	8009f14 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8009f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f0c:	d102      	bne.n	8009f14 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009f0e:	4b80      	ldr	r3, [pc, #512]	; (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009f10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f12:	e010      	b.n	8009f36 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009f14:	4b7c      	ldr	r3, [pc, #496]	; (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f20:	d106      	bne.n	8009f30 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8009f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f28:	d102      	bne.n	8009f30 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009f2a:	4b7a      	ldr	r3, [pc, #488]	; (800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f2e:	e002      	b.n	8009f36 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009f30:	2300      	movs	r3, #0
 8009f32:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009f34:	e2e7      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009f36:	e2e6      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009f38:	4b77      	ldr	r3, [pc, #476]	; (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f3c:	e2e3      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f42:	e2e0      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f4a:	f040 809c 	bne.w	800a086 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009f4e:	4b6e      	ldr	r3, [pc, #440]	; (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f52:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009f56:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f5e:	d054      	beq.n	800a00a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8009f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f66:	f200 808b 	bhi.w	800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8009f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009f70:	f000 8083 	beq.w	800a07a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8009f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009f7a:	f200 8081 	bhi.w	800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8009f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f84:	d02f      	beq.n	8009fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8009f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f8c:	d878      	bhi.n	800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8009f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d004      	beq.n	8009f9e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009f9a:	d012      	beq.n	8009fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8009f9c:	e070      	b.n	800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f9e:	4b5a      	ldr	r3, [pc, #360]	; (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fa6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009faa:	d107      	bne.n	8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f000 fd73 	bl	800aa9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009fba:	e2a4      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fc0:	e2a1      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009fc2:	4b51      	ldr	r3, [pc, #324]	; (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009fce:	d107      	bne.n	8009fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fd0:	f107 0318 	add.w	r3, r7, #24
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f000 fab9 	bl	800a54c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8009fde:	e292      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fe4:	e28f      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009fe6:	4b48      	ldr	r3, [pc, #288]	; (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ff2:	d107      	bne.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ff4:	f107 030c 	add.w	r3, r7, #12
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f000 fbfb 	bl	800a7f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a002:	e280      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a004:	2300      	movs	r3, #0
 800a006:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a008:	e27d      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a00a:	4b3f      	ldr	r3, [pc, #252]	; (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a00c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a00e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a012:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a014:	4b3c      	ldr	r3, [pc, #240]	; (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f003 0304 	and.w	r3, r3, #4
 800a01c:	2b04      	cmp	r3, #4
 800a01e:	d10c      	bne.n	800a03a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a022:	2b00      	cmp	r3, #0
 800a024:	d109      	bne.n	800a03a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a026:	4b38      	ldr	r3, [pc, #224]	; (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	08db      	lsrs	r3, r3, #3
 800a02c:	f003 0303 	and.w	r3, r3, #3
 800a030:	4a36      	ldr	r2, [pc, #216]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a032:	fa22 f303 	lsr.w	r3, r2, r3
 800a036:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a038:	e01e      	b.n	800a078 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a03a:	4b33      	ldr	r3, [pc, #204]	; (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a046:	d106      	bne.n	800a056 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800a048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a04a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a04e:	d102      	bne.n	800a056 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a050:	4b2f      	ldr	r3, [pc, #188]	; (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a052:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a054:	e010      	b.n	800a078 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a056:	4b2c      	ldr	r3, [pc, #176]	; (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a05e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a062:	d106      	bne.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800a064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a066:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a06a:	d102      	bne.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a06c:	4b29      	ldr	r3, [pc, #164]	; (800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a06e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a070:	e002      	b.n	800a078 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a072:	2300      	movs	r3, #0
 800a074:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a076:	e246      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a078:	e245      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a07a:	4b27      	ldr	r3, [pc, #156]	; (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800a07c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a07e:	e242      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800a080:	2300      	movs	r3, #0
 800a082:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a084:	e23f      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a08c:	f040 80a8 	bne.w	800a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a090:	4b1d      	ldr	r3, [pc, #116]	; (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a094:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a098:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a09c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0a0:	d060      	beq.n	800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800a0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0a8:	f200 8097 	bhi.w	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800a0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a0b2:	f000 808f 	beq.w	800a1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800a0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a0bc:	f200 808d 	bhi.w	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800a0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0c6:	d03b      	beq.n	800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800a0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0ce:	f200 8084 	bhi.w	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800a0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d004      	beq.n	800a0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800a0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0de:	d01d      	beq.n	800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800a0e0:	e07b      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a0e2:	4b09      	ldr	r3, [pc, #36]	; (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a0ee:	d107      	bne.n	800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a0f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f000 fcd1 	bl	800aa9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a0fe:	e202      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a100:	2300      	movs	r3, #0
 800a102:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a104:	e1ff      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a106:	bf00      	nop
 800a108:	58024400 	.word	0x58024400
 800a10c:	03d09000 	.word	0x03d09000
 800a110:	003d0900 	.word	0x003d0900
 800a114:	007a1200 	.word	0x007a1200
 800a118:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a11c:	4ba3      	ldr	r3, [pc, #652]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a124:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a128:	d107      	bne.n	800a13a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a12a:	f107 0318 	add.w	r3, r7, #24
 800a12e:	4618      	mov	r0, r3
 800a130:	f000 fa0c 	bl	800a54c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a134:	69bb      	ldr	r3, [r7, #24]
 800a136:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a138:	e1e5      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a13a:	2300      	movs	r3, #0
 800a13c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a13e:	e1e2      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a140:	4b9a      	ldr	r3, [pc, #616]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a14c:	d107      	bne.n	800a15e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a14e:	f107 030c 	add.w	r3, r7, #12
 800a152:	4618      	mov	r0, r3
 800a154:	f000 fb4e 	bl	800a7f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a15c:	e1d3      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a15e:	2300      	movs	r3, #0
 800a160:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a162:	e1d0      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a164:	4b91      	ldr	r3, [pc, #580]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a168:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a16c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a16e:	4b8f      	ldr	r3, [pc, #572]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f003 0304 	and.w	r3, r3, #4
 800a176:	2b04      	cmp	r3, #4
 800a178:	d10c      	bne.n	800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800a17a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d109      	bne.n	800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a180:	4b8a      	ldr	r3, [pc, #552]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	08db      	lsrs	r3, r3, #3
 800a186:	f003 0303 	and.w	r3, r3, #3
 800a18a:	4a89      	ldr	r2, [pc, #548]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a18c:	fa22 f303 	lsr.w	r3, r2, r3
 800a190:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a192:	e01e      	b.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a194:	4b85      	ldr	r3, [pc, #532]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a19c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1a0:	d106      	bne.n	800a1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800a1a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1a8:	d102      	bne.n	800a1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a1aa:	4b82      	ldr	r3, [pc, #520]	; (800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800a1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1ae:	e010      	b.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a1b0:	4b7e      	ldr	r3, [pc, #504]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1bc:	d106      	bne.n	800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a1be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1c4:	d102      	bne.n	800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a1c6:	4b7c      	ldr	r3, [pc, #496]	; (800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1ca:	e002      	b.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a1d0:	e199      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a1d2:	e198      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a1d4:	4b79      	ldr	r3, [pc, #484]	; (800a3bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1d8:	e195      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1de:	e192      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a1e6:	d173      	bne.n	800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a1e8:	4b70      	ldr	r3, [pc, #448]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a1ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a1f0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1f8:	d02f      	beq.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800a1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a200:	d863      	bhi.n	800a2ca <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800a202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a204:	2b00      	cmp	r3, #0
 800a206:	d004      	beq.n	800a212 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800a208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a20a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a20e:	d012      	beq.n	800a236 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800a210:	e05b      	b.n	800a2ca <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a212:	4b66      	ldr	r3, [pc, #408]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a21a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a21e:	d107      	bne.n	800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a220:	f107 0318 	add.w	r3, r7, #24
 800a224:	4618      	mov	r0, r3
 800a226:	f000 f991 	bl	800a54c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a22a:	69bb      	ldr	r3, [r7, #24]
 800a22c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a22e:	e16a      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a230:	2300      	movs	r3, #0
 800a232:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a234:	e167      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a236:	4b5d      	ldr	r3, [pc, #372]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a23e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a242:	d107      	bne.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a244:	f107 030c 	add.w	r3, r7, #12
 800a248:	4618      	mov	r0, r3
 800a24a:	f000 fad3 	bl	800a7f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a252:	e158      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a254:	2300      	movs	r3, #0
 800a256:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a258:	e155      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a25a:	4b54      	ldr	r3, [pc, #336]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a25c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a25e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a262:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a264:	4b51      	ldr	r3, [pc, #324]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f003 0304 	and.w	r3, r3, #4
 800a26c:	2b04      	cmp	r3, #4
 800a26e:	d10c      	bne.n	800a28a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800a270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a272:	2b00      	cmp	r3, #0
 800a274:	d109      	bne.n	800a28a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a276:	4b4d      	ldr	r3, [pc, #308]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	08db      	lsrs	r3, r3, #3
 800a27c:	f003 0303 	and.w	r3, r3, #3
 800a280:	4a4b      	ldr	r2, [pc, #300]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a282:	fa22 f303 	lsr.w	r3, r2, r3
 800a286:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a288:	e01e      	b.n	800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a28a:	4b48      	ldr	r3, [pc, #288]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a296:	d106      	bne.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800a298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a29a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a29e:	d102      	bne.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a2a0:	4b44      	ldr	r3, [pc, #272]	; (800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800a2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2a4:	e010      	b.n	800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a2a6:	4b41      	ldr	r3, [pc, #260]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2b2:	d106      	bne.n	800a2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800a2b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2ba:	d102      	bne.n	800a2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a2bc:	4b3e      	ldr	r3, [pc, #248]	; (800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a2be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2c0:	e002      	b.n	800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a2c6:	e11e      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a2c8:	e11d      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2ce:	e11a      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2d6:	d133      	bne.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a2d8:	4b34      	ldr	r3, [pc, #208]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a2da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2e0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d004      	beq.n	800a2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800a2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2ee:	d012      	beq.n	800a316 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800a2f0:	e023      	b.n	800a33a <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a2f2:	4b2e      	ldr	r3, [pc, #184]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2fe:	d107      	bne.n	800a310 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a304:	4618      	mov	r0, r3
 800a306:	f000 fbc9 	bl	800aa9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a30e:	e0fa      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a310:	2300      	movs	r3, #0
 800a312:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a314:	e0f7      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a316:	4b25      	ldr	r3, [pc, #148]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a31e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a322:	d107      	bne.n	800a334 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a324:	f107 0318 	add.w	r3, r7, #24
 800a328:	4618      	mov	r0, r3
 800a32a:	f000 f90f 	bl	800a54c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a32e:	6a3b      	ldr	r3, [r7, #32]
 800a330:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a332:	e0e8      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a334:	2300      	movs	r3, #0
 800a336:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a338:	e0e5      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800a33a:	2300      	movs	r3, #0
 800a33c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a33e:	e0e2      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a346:	f040 808f 	bne.w	800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a34a:	4b18      	ldr	r3, [pc, #96]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a34c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a34e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a352:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a356:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a35a:	d075      	beq.n	800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800a35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a362:	d87e      	bhi.n	800a462 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800a364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a36a:	d060      	beq.n	800a42e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800a36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a372:	d876      	bhi.n	800a462 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800a374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a376:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a37a:	d045      	beq.n	800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800a37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a37e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a382:	d86e      	bhi.n	800a462 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800a384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a386:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a38a:	d02b      	beq.n	800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800a38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a392:	d866      	bhi.n	800a462 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800a394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a396:	2b00      	cmp	r3, #0
 800a398:	d004      	beq.n	800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800a39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a39c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3a0:	d00e      	beq.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800a3a2:	e05e      	b.n	800a462 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a3a4:	f000 f8bc 	bl	800a520 <HAL_RCCEx_GetD3PCLK1Freq>
 800a3a8:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a3aa:	e0ac      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a3ac:	58024400 	.word	0x58024400
 800a3b0:	03d09000 	.word	0x03d09000
 800a3b4:	003d0900 	.word	0x003d0900
 800a3b8:	007a1200 	.word	0x007a1200
 800a3bc:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3c0:	4b53      	ldr	r3, [pc, #332]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a3cc:	d107      	bne.n	800a3de <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3ce:	f107 0318 	add.w	r3, r7, #24
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f000 f8ba 	bl	800a54c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a3dc:	e093      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3e2:	e090      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a3e4:	4b4a      	ldr	r3, [pc, #296]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3f0:	d107      	bne.n	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3f2:	f107 030c 	add.w	r3, r7, #12
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f000 f9fc 	bl	800a7f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a400:	e081      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a402:	2300      	movs	r3, #0
 800a404:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a406:	e07e      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a408:	4b41      	ldr	r3, [pc, #260]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f003 0304 	and.w	r3, r3, #4
 800a410:	2b04      	cmp	r3, #4
 800a412:	d109      	bne.n	800a428 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a414:	4b3e      	ldr	r3, [pc, #248]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	08db      	lsrs	r3, r3, #3
 800a41a:	f003 0303 	and.w	r3, r3, #3
 800a41e:	4a3d      	ldr	r2, [pc, #244]	; (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a420:	fa22 f303 	lsr.w	r3, r2, r3
 800a424:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a426:	e06e      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a428:	2300      	movs	r3, #0
 800a42a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a42c:	e06b      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a42e:	4b38      	ldr	r3, [pc, #224]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a43a:	d102      	bne.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800a43c:	4b36      	ldr	r3, [pc, #216]	; (800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a43e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a440:	e061      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a442:	2300      	movs	r3, #0
 800a444:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a446:	e05e      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a448:	4b31      	ldr	r3, [pc, #196]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a450:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a454:	d102      	bne.n	800a45c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800a456:	4b31      	ldr	r3, [pc, #196]	; (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a458:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a45a:	e054      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a45c:	2300      	movs	r3, #0
 800a45e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a460:	e051      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800a462:	2300      	movs	r3, #0
 800a464:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a466:	e04e      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a46e:	d148      	bne.n	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800a470:	4b27      	ldr	r3, [pc, #156]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a474:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a478:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a480:	d02a      	beq.n	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800a482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a488:	d838      	bhi.n	800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800a48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d004      	beq.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800a490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a492:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a496:	d00d      	beq.n	800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800a498:	e030      	b.n	800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a49a:	4b1d      	ldr	r3, [pc, #116]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4a6:	d102      	bne.n	800a4ae <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800a4a8:	4b1c      	ldr	r3, [pc, #112]	; (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a4aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a4ac:	e02b      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4b2:	e028      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a4b4:	4b16      	ldr	r3, [pc, #88]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a4c0:	d107      	bne.n	800a4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f000 fae8 	bl	800aa9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a4d0:	e019      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4d6:	e016      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4d8:	4b0d      	ldr	r3, [pc, #52]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a4e4:	d107      	bne.n	800a4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4e6:	f107 0318 	add.w	r3, r7, #24
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f000 f82e 	bl	800a54c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a4f4:	e007      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4fa:	e004      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a500:	e001      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800a502:	2300      	movs	r3, #0
 800a504:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800a506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3740      	adds	r7, #64	; 0x40
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	58024400 	.word	0x58024400
 800a514:	03d09000 	.word	0x03d09000
 800a518:	003d0900 	.word	0x003d0900
 800a51c:	007a1200 	.word	0x007a1200

0800a520 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a524:	f7fe fb8e 	bl	8008c44 <HAL_RCC_GetHCLKFreq>
 800a528:	4602      	mov	r2, r0
 800a52a:	4b06      	ldr	r3, [pc, #24]	; (800a544 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a52c:	6a1b      	ldr	r3, [r3, #32]
 800a52e:	091b      	lsrs	r3, r3, #4
 800a530:	f003 0307 	and.w	r3, r3, #7
 800a534:	4904      	ldr	r1, [pc, #16]	; (800a548 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a536:	5ccb      	ldrb	r3, [r1, r3]
 800a538:	f003 031f 	and.w	r3, r3, #31
 800a53c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a540:	4618      	mov	r0, r3
 800a542:	bd80      	pop	{r7, pc}
 800a544:	58024400 	.word	0x58024400
 800a548:	08013c10 	.word	0x08013c10

0800a54c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b089      	sub	sp, #36	; 0x24
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a554:	4ba1      	ldr	r3, [pc, #644]	; (800a7dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a558:	f003 0303 	and.w	r3, r3, #3
 800a55c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a55e:	4b9f      	ldr	r3, [pc, #636]	; (800a7dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a562:	0b1b      	lsrs	r3, r3, #12
 800a564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a568:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a56a:	4b9c      	ldr	r3, [pc, #624]	; (800a7dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a56e:	091b      	lsrs	r3, r3, #4
 800a570:	f003 0301 	and.w	r3, r3, #1
 800a574:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a576:	4b99      	ldr	r3, [pc, #612]	; (800a7dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a57a:	08db      	lsrs	r3, r3, #3
 800a57c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a580:	693a      	ldr	r2, [r7, #16]
 800a582:	fb02 f303 	mul.w	r3, r2, r3
 800a586:	ee07 3a90 	vmov	s15, r3
 800a58a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a58e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	2b00      	cmp	r3, #0
 800a596:	f000 8111 	beq.w	800a7bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	2b02      	cmp	r3, #2
 800a59e:	f000 8083 	beq.w	800a6a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	2b02      	cmp	r3, #2
 800a5a6:	f200 80a1 	bhi.w	800a6ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d003      	beq.n	800a5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a5b0:	69bb      	ldr	r3, [r7, #24]
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d056      	beq.n	800a664 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a5b6:	e099      	b.n	800a6ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5b8:	4b88      	ldr	r3, [pc, #544]	; (800a7dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f003 0320 	and.w	r3, r3, #32
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d02d      	beq.n	800a620 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a5c4:	4b85      	ldr	r3, [pc, #532]	; (800a7dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	08db      	lsrs	r3, r3, #3
 800a5ca:	f003 0303 	and.w	r3, r3, #3
 800a5ce:	4a84      	ldr	r2, [pc, #528]	; (800a7e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a5d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a5d4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	ee07 3a90 	vmov	s15, r3
 800a5dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	ee07 3a90 	vmov	s15, r3
 800a5e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5ee:	4b7b      	ldr	r3, [pc, #492]	; (800a7dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5f6:	ee07 3a90 	vmov	s15, r3
 800a5fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800a602:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a60a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a60e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a61a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a61e:	e087      	b.n	800a730 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	ee07 3a90 	vmov	s15, r3
 800a626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a62a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a7e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a62e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a632:	4b6a      	ldr	r3, [pc, #424]	; (800a7dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a63a:	ee07 3a90 	vmov	s15, r3
 800a63e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a642:	ed97 6a03 	vldr	s12, [r7, #12]
 800a646:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a64a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a64e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a65a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a65e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a662:	e065      	b.n	800a730 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	ee07 3a90 	vmov	s15, r3
 800a66a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a66e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a7ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a676:	4b59      	ldr	r3, [pc, #356]	; (800a7dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a67a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a67e:	ee07 3a90 	vmov	s15, r3
 800a682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a686:	ed97 6a03 	vldr	s12, [r7, #12]
 800a68a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a68e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a69a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a69e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a6a6:	e043      	b.n	800a730 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	ee07 3a90 	vmov	s15, r3
 800a6ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a6b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6ba:	4b48      	ldr	r3, [pc, #288]	; (800a7dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6c2:	ee07 3a90 	vmov	s15, r3
 800a6c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a6d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a6ea:	e021      	b.n	800a730 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	ee07 3a90 	vmov	s15, r3
 800a6f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a7ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a6fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6fe:	4b37      	ldr	r3, [pc, #220]	; (800a7dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a706:	ee07 3a90 	vmov	s15, r3
 800a70a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a70e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a712:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a71a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a71e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a72a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a72e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a730:	4b2a      	ldr	r3, [pc, #168]	; (800a7dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a734:	0a5b      	lsrs	r3, r3, #9
 800a736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a73a:	ee07 3a90 	vmov	s15, r3
 800a73e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a742:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a746:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a74a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a74e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a752:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a756:	ee17 2a90 	vmov	r2, s15
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a75e:	4b1f      	ldr	r3, [pc, #124]	; (800a7dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a762:	0c1b      	lsrs	r3, r3, #16
 800a764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a768:	ee07 3a90 	vmov	s15, r3
 800a76c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a770:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a774:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a778:	edd7 6a07 	vldr	s13, [r7, #28]
 800a77c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a784:	ee17 2a90 	vmov	r2, s15
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a78c:	4b13      	ldr	r3, [pc, #76]	; (800a7dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a790:	0e1b      	lsrs	r3, r3, #24
 800a792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a796:	ee07 3a90 	vmov	s15, r3
 800a79a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a79e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a7a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a7a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7b2:	ee17 2a90 	vmov	r2, s15
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a7ba:	e008      	b.n	800a7ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	609a      	str	r2, [r3, #8]
}
 800a7ce:	bf00      	nop
 800a7d0:	3724      	adds	r7, #36	; 0x24
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop
 800a7dc:	58024400 	.word	0x58024400
 800a7e0:	03d09000 	.word	0x03d09000
 800a7e4:	46000000 	.word	0x46000000
 800a7e8:	4c742400 	.word	0x4c742400
 800a7ec:	4a742400 	.word	0x4a742400
 800a7f0:	4af42400 	.word	0x4af42400

0800a7f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b089      	sub	sp, #36	; 0x24
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a7fc:	4ba1      	ldr	r3, [pc, #644]	; (800aa84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a800:	f003 0303 	and.w	r3, r3, #3
 800a804:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a806:	4b9f      	ldr	r3, [pc, #636]	; (800aa84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a80a:	0d1b      	lsrs	r3, r3, #20
 800a80c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a810:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a812:	4b9c      	ldr	r3, [pc, #624]	; (800aa84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a816:	0a1b      	lsrs	r3, r3, #8
 800a818:	f003 0301 	and.w	r3, r3, #1
 800a81c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a81e:	4b99      	ldr	r3, [pc, #612]	; (800aa84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a822:	08db      	lsrs	r3, r3, #3
 800a824:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a828:	693a      	ldr	r2, [r7, #16]
 800a82a:	fb02 f303 	mul.w	r3, r2, r3
 800a82e:	ee07 3a90 	vmov	s15, r3
 800a832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a836:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	f000 8111 	beq.w	800aa64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	2b02      	cmp	r3, #2
 800a846:	f000 8083 	beq.w	800a950 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a84a:	69bb      	ldr	r3, [r7, #24]
 800a84c:	2b02      	cmp	r3, #2
 800a84e:	f200 80a1 	bhi.w	800a994 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d003      	beq.n	800a860 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d056      	beq.n	800a90c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a85e:	e099      	b.n	800a994 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a860:	4b88      	ldr	r3, [pc, #544]	; (800aa84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f003 0320 	and.w	r3, r3, #32
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d02d      	beq.n	800a8c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a86c:	4b85      	ldr	r3, [pc, #532]	; (800aa84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	08db      	lsrs	r3, r3, #3
 800a872:	f003 0303 	and.w	r3, r3, #3
 800a876:	4a84      	ldr	r2, [pc, #528]	; (800aa88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a878:	fa22 f303 	lsr.w	r3, r2, r3
 800a87c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	ee07 3a90 	vmov	s15, r3
 800a884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	ee07 3a90 	vmov	s15, r3
 800a88e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a896:	4b7b      	ldr	r3, [pc, #492]	; (800aa84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a89a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a89e:	ee07 3a90 	vmov	s15, r3
 800a8a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800aa8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a8ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8c2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a8c6:	e087      	b.n	800a9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	ee07 3a90 	vmov	s15, r3
 800a8ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800aa90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a8d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8da:	4b6a      	ldr	r3, [pc, #424]	; (800aa84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8e2:	ee07 3a90 	vmov	s15, r3
 800a8e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800aa8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a8f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a902:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a906:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a90a:	e065      	b.n	800a9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	ee07 3a90 	vmov	s15, r3
 800a912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a916:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800aa94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a91a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a91e:	4b59      	ldr	r3, [pc, #356]	; (800aa84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a926:	ee07 3a90 	vmov	s15, r3
 800a92a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a92e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a932:	eddf 5a56 	vldr	s11, [pc, #344]	; 800aa8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a93a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a93e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a94a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a94e:	e043      	b.n	800a9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	ee07 3a90 	vmov	s15, r3
 800a956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a95a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800aa98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a95e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a962:	4b48      	ldr	r3, [pc, #288]	; (800aa84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a96a:	ee07 3a90 	vmov	s15, r3
 800a96e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a972:	ed97 6a03 	vldr	s12, [r7, #12]
 800a976:	eddf 5a45 	vldr	s11, [pc, #276]	; 800aa8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a97a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a97e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a98a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a98e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a992:	e021      	b.n	800a9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	ee07 3a90 	vmov	s15, r3
 800a99a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a99e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800aa94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a9a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9a6:	4b37      	ldr	r3, [pc, #220]	; (800aa84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9ae:	ee07 3a90 	vmov	s15, r3
 800a9b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800aa8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a9be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a9d6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a9d8:	4b2a      	ldr	r3, [pc, #168]	; (800aa84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9dc:	0a5b      	lsrs	r3, r3, #9
 800a9de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9e2:	ee07 3a90 	vmov	s15, r3
 800a9e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a9ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a9f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9fe:	ee17 2a90 	vmov	r2, s15
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800aa06:	4b1f      	ldr	r3, [pc, #124]	; (800aa84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa0a:	0c1b      	lsrs	r3, r3, #16
 800aa0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa10:	ee07 3a90 	vmov	s15, r3
 800aa14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa20:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa2c:	ee17 2a90 	vmov	r2, s15
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800aa34:	4b13      	ldr	r3, [pc, #76]	; (800aa84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa38:	0e1b      	lsrs	r3, r3, #24
 800aa3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa3e:	ee07 3a90 	vmov	s15, r3
 800aa42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa4e:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa5a:	ee17 2a90 	vmov	r2, s15
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800aa62:	e008      	b.n	800aa76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2200      	movs	r2, #0
 800aa68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2200      	movs	r2, #0
 800aa74:	609a      	str	r2, [r3, #8]
}
 800aa76:	bf00      	nop
 800aa78:	3724      	adds	r7, #36	; 0x24
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr
 800aa82:	bf00      	nop
 800aa84:	58024400 	.word	0x58024400
 800aa88:	03d09000 	.word	0x03d09000
 800aa8c:	46000000 	.word	0x46000000
 800aa90:	4c742400 	.word	0x4c742400
 800aa94:	4a742400 	.word	0x4a742400
 800aa98:	4af42400 	.word	0x4af42400

0800aa9c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b089      	sub	sp, #36	; 0x24
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aaa4:	4ba0      	ldr	r3, [pc, #640]	; (800ad28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aaa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaa8:	f003 0303 	and.w	r3, r3, #3
 800aaac:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800aaae:	4b9e      	ldr	r3, [pc, #632]	; (800ad28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aab2:	091b      	lsrs	r3, r3, #4
 800aab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aab8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800aaba:	4b9b      	ldr	r3, [pc, #620]	; (800ad28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aabc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aabe:	f003 0301 	and.w	r3, r3, #1
 800aac2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800aac4:	4b98      	ldr	r3, [pc, #608]	; (800ad28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aac8:	08db      	lsrs	r3, r3, #3
 800aaca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aace:	693a      	ldr	r2, [r7, #16]
 800aad0:	fb02 f303 	mul.w	r3, r2, r3
 800aad4:	ee07 3a90 	vmov	s15, r3
 800aad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aadc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	f000 8111 	beq.w	800ad0a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	2b02      	cmp	r3, #2
 800aaec:	f000 8083 	beq.w	800abf6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800aaf0:	69bb      	ldr	r3, [r7, #24]
 800aaf2:	2b02      	cmp	r3, #2
 800aaf4:	f200 80a1 	bhi.w	800ac3a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800aaf8:	69bb      	ldr	r3, [r7, #24]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d003      	beq.n	800ab06 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d056      	beq.n	800abb2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ab04:	e099      	b.n	800ac3a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab06:	4b88      	ldr	r3, [pc, #544]	; (800ad28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f003 0320 	and.w	r3, r3, #32
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d02d      	beq.n	800ab6e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab12:	4b85      	ldr	r3, [pc, #532]	; (800ad28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	08db      	lsrs	r3, r3, #3
 800ab18:	f003 0303 	and.w	r3, r3, #3
 800ab1c:	4a83      	ldr	r2, [pc, #524]	; (800ad2c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ab1e:	fa22 f303 	lsr.w	r3, r2, r3
 800ab22:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	ee07 3a90 	vmov	s15, r3
 800ab2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	ee07 3a90 	vmov	s15, r3
 800ab34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab3c:	4b7a      	ldr	r3, [pc, #488]	; (800ad28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab44:	ee07 3a90 	vmov	s15, r3
 800ab48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab4c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab50:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ad30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ab54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab68:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ab6c:	e087      	b.n	800ac7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	ee07 3a90 	vmov	s15, r3
 800ab74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab78:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ad34 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ab7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab80:	4b69      	ldr	r3, [pc, #420]	; (800ad28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab88:	ee07 3a90 	vmov	s15, r3
 800ab8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab90:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab94:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ad30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ab98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aba0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aba4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800abb0:	e065      	b.n	800ac7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	ee07 3a90 	vmov	s15, r3
 800abb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abbc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ad38 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800abc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abc4:	4b58      	ldr	r3, [pc, #352]	; (800ad28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abcc:	ee07 3a90 	vmov	s15, r3
 800abd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abd4:	ed97 6a03 	vldr	s12, [r7, #12]
 800abd8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ad30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800abdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abe0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abe4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abe8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abf0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800abf4:	e043      	b.n	800ac7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	ee07 3a90 	vmov	s15, r3
 800abfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac00:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ad3c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ac04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac08:	4b47      	ldr	r3, [pc, #284]	; (800ad28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac10:	ee07 3a90 	vmov	s15, r3
 800ac14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac18:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac1c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ad30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ac20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac34:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac38:	e021      	b.n	800ac7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	ee07 3a90 	vmov	s15, r3
 800ac40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac44:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ad34 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ac48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac4c:	4b36      	ldr	r3, [pc, #216]	; (800ad28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac54:	ee07 3a90 	vmov	s15, r3
 800ac58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac5c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac60:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ad30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ac64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac78:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac7c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800ac7e:	4b2a      	ldr	r3, [pc, #168]	; (800ad28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac82:	0a5b      	lsrs	r3, r3, #9
 800ac84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac88:	ee07 3a90 	vmov	s15, r3
 800ac8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac94:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac98:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aca4:	ee17 2a90 	vmov	r2, s15
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800acac:	4b1e      	ldr	r3, [pc, #120]	; (800ad28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800acae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acb0:	0c1b      	lsrs	r3, r3, #16
 800acb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acb6:	ee07 3a90 	vmov	s15, r3
 800acba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800acc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800acc6:	edd7 6a07 	vldr	s13, [r7, #28]
 800acca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acd2:	ee17 2a90 	vmov	r2, s15
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800acda:	4b13      	ldr	r3, [pc, #76]	; (800ad28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800acdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acde:	0e1b      	lsrs	r3, r3, #24
 800ace0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ace4:	ee07 3a90 	vmov	s15, r3
 800ace8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800acf0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800acf4:	edd7 6a07 	vldr	s13, [r7, #28]
 800acf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad00:	ee17 2a90 	vmov	r2, s15
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ad08:	e008      	b.n	800ad1c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2200      	movs	r2, #0
 800ad14:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	609a      	str	r2, [r3, #8]
}
 800ad1c:	bf00      	nop
 800ad1e:	3724      	adds	r7, #36	; 0x24
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr
 800ad28:	58024400 	.word	0x58024400
 800ad2c:	03d09000 	.word	0x03d09000
 800ad30:	46000000 	.word	0x46000000
 800ad34:	4c742400 	.word	0x4c742400
 800ad38:	4a742400 	.word	0x4a742400
 800ad3c:	4af42400 	.word	0x4af42400

0800ad40 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ad4e:	4b53      	ldr	r3, [pc, #332]	; (800ae9c <RCCEx_PLL2_Config+0x15c>)
 800ad50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad52:	f003 0303 	and.w	r3, r3, #3
 800ad56:	2b03      	cmp	r3, #3
 800ad58:	d101      	bne.n	800ad5e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e099      	b.n	800ae92 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ad5e:	4b4f      	ldr	r3, [pc, #316]	; (800ae9c <RCCEx_PLL2_Config+0x15c>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a4e      	ldr	r2, [pc, #312]	; (800ae9c <RCCEx_PLL2_Config+0x15c>)
 800ad64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ad68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad6a:	f7f7 fcef 	bl	800274c <HAL_GetTick>
 800ad6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ad70:	e008      	b.n	800ad84 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ad72:	f7f7 fceb 	bl	800274c <HAL_GetTick>
 800ad76:	4602      	mov	r2, r0
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	1ad3      	subs	r3, r2, r3
 800ad7c:	2b02      	cmp	r3, #2
 800ad7e:	d901      	bls.n	800ad84 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ad80:	2303      	movs	r3, #3
 800ad82:	e086      	b.n	800ae92 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ad84:	4b45      	ldr	r3, [pc, #276]	; (800ae9c <RCCEx_PLL2_Config+0x15c>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d1f0      	bne.n	800ad72 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ad90:	4b42      	ldr	r3, [pc, #264]	; (800ae9c <RCCEx_PLL2_Config+0x15c>)
 800ad92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad94:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	031b      	lsls	r3, r3, #12
 800ad9e:	493f      	ldr	r1, [pc, #252]	; (800ae9c <RCCEx_PLL2_Config+0x15c>)
 800ada0:	4313      	orrs	r3, r2
 800ada2:	628b      	str	r3, [r1, #40]	; 0x28
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	3b01      	subs	r3, #1
 800adaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	689b      	ldr	r3, [r3, #8]
 800adb2:	3b01      	subs	r3, #1
 800adb4:	025b      	lsls	r3, r3, #9
 800adb6:	b29b      	uxth	r3, r3
 800adb8:	431a      	orrs	r2, r3
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	3b01      	subs	r3, #1
 800adc0:	041b      	lsls	r3, r3, #16
 800adc2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800adc6:	431a      	orrs	r2, r3
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	691b      	ldr	r3, [r3, #16]
 800adcc:	3b01      	subs	r3, #1
 800adce:	061b      	lsls	r3, r3, #24
 800add0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800add4:	4931      	ldr	r1, [pc, #196]	; (800ae9c <RCCEx_PLL2_Config+0x15c>)
 800add6:	4313      	orrs	r3, r2
 800add8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800adda:	4b30      	ldr	r3, [pc, #192]	; (800ae9c <RCCEx_PLL2_Config+0x15c>)
 800addc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adde:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	695b      	ldr	r3, [r3, #20]
 800ade6:	492d      	ldr	r1, [pc, #180]	; (800ae9c <RCCEx_PLL2_Config+0x15c>)
 800ade8:	4313      	orrs	r3, r2
 800adea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800adec:	4b2b      	ldr	r3, [pc, #172]	; (800ae9c <RCCEx_PLL2_Config+0x15c>)
 800adee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adf0:	f023 0220 	bic.w	r2, r3, #32
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	699b      	ldr	r3, [r3, #24]
 800adf8:	4928      	ldr	r1, [pc, #160]	; (800ae9c <RCCEx_PLL2_Config+0x15c>)
 800adfa:	4313      	orrs	r3, r2
 800adfc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800adfe:	4b27      	ldr	r3, [pc, #156]	; (800ae9c <RCCEx_PLL2_Config+0x15c>)
 800ae00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae02:	4a26      	ldr	r2, [pc, #152]	; (800ae9c <RCCEx_PLL2_Config+0x15c>)
 800ae04:	f023 0310 	bic.w	r3, r3, #16
 800ae08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ae0a:	4b24      	ldr	r3, [pc, #144]	; (800ae9c <RCCEx_PLL2_Config+0x15c>)
 800ae0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae0e:	4b24      	ldr	r3, [pc, #144]	; (800aea0 <RCCEx_PLL2_Config+0x160>)
 800ae10:	4013      	ands	r3, r2
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	69d2      	ldr	r2, [r2, #28]
 800ae16:	00d2      	lsls	r2, r2, #3
 800ae18:	4920      	ldr	r1, [pc, #128]	; (800ae9c <RCCEx_PLL2_Config+0x15c>)
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ae1e:	4b1f      	ldr	r3, [pc, #124]	; (800ae9c <RCCEx_PLL2_Config+0x15c>)
 800ae20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae22:	4a1e      	ldr	r2, [pc, #120]	; (800ae9c <RCCEx_PLL2_Config+0x15c>)
 800ae24:	f043 0310 	orr.w	r3, r3, #16
 800ae28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d106      	bne.n	800ae3e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ae30:	4b1a      	ldr	r3, [pc, #104]	; (800ae9c <RCCEx_PLL2_Config+0x15c>)
 800ae32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae34:	4a19      	ldr	r2, [pc, #100]	; (800ae9c <RCCEx_PLL2_Config+0x15c>)
 800ae36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ae3c:	e00f      	b.n	800ae5e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d106      	bne.n	800ae52 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ae44:	4b15      	ldr	r3, [pc, #84]	; (800ae9c <RCCEx_PLL2_Config+0x15c>)
 800ae46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae48:	4a14      	ldr	r2, [pc, #80]	; (800ae9c <RCCEx_PLL2_Config+0x15c>)
 800ae4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ae50:	e005      	b.n	800ae5e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ae52:	4b12      	ldr	r3, [pc, #72]	; (800ae9c <RCCEx_PLL2_Config+0x15c>)
 800ae54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae56:	4a11      	ldr	r2, [pc, #68]	; (800ae9c <RCCEx_PLL2_Config+0x15c>)
 800ae58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ae5c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ae5e:	4b0f      	ldr	r3, [pc, #60]	; (800ae9c <RCCEx_PLL2_Config+0x15c>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	4a0e      	ldr	r2, [pc, #56]	; (800ae9c <RCCEx_PLL2_Config+0x15c>)
 800ae64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ae68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae6a:	f7f7 fc6f 	bl	800274c <HAL_GetTick>
 800ae6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ae70:	e008      	b.n	800ae84 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ae72:	f7f7 fc6b 	bl	800274c <HAL_GetTick>
 800ae76:	4602      	mov	r2, r0
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	1ad3      	subs	r3, r2, r3
 800ae7c:	2b02      	cmp	r3, #2
 800ae7e:	d901      	bls.n	800ae84 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ae80:	2303      	movs	r3, #3
 800ae82:	e006      	b.n	800ae92 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ae84:	4b05      	ldr	r3, [pc, #20]	; (800ae9c <RCCEx_PLL2_Config+0x15c>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d0f0      	beq.n	800ae72 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ae90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3710      	adds	r7, #16
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	bf00      	nop
 800ae9c:	58024400 	.word	0x58024400
 800aea0:	ffff0007 	.word	0xffff0007

0800aea4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b084      	sub	sp, #16
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aeb2:	4b53      	ldr	r3, [pc, #332]	; (800b000 <RCCEx_PLL3_Config+0x15c>)
 800aeb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeb6:	f003 0303 	and.w	r3, r3, #3
 800aeba:	2b03      	cmp	r3, #3
 800aebc:	d101      	bne.n	800aec2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800aebe:	2301      	movs	r3, #1
 800aec0:	e099      	b.n	800aff6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800aec2:	4b4f      	ldr	r3, [pc, #316]	; (800b000 <RCCEx_PLL3_Config+0x15c>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a4e      	ldr	r2, [pc, #312]	; (800b000 <RCCEx_PLL3_Config+0x15c>)
 800aec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aecc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aece:	f7f7 fc3d 	bl	800274c <HAL_GetTick>
 800aed2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aed4:	e008      	b.n	800aee8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800aed6:	f7f7 fc39 	bl	800274c <HAL_GetTick>
 800aeda:	4602      	mov	r2, r0
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	1ad3      	subs	r3, r2, r3
 800aee0:	2b02      	cmp	r3, #2
 800aee2:	d901      	bls.n	800aee8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aee4:	2303      	movs	r3, #3
 800aee6:	e086      	b.n	800aff6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aee8:	4b45      	ldr	r3, [pc, #276]	; (800b000 <RCCEx_PLL3_Config+0x15c>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d1f0      	bne.n	800aed6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800aef4:	4b42      	ldr	r3, [pc, #264]	; (800b000 <RCCEx_PLL3_Config+0x15c>)
 800aef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aef8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	051b      	lsls	r3, r3, #20
 800af02:	493f      	ldr	r1, [pc, #252]	; (800b000 <RCCEx_PLL3_Config+0x15c>)
 800af04:	4313      	orrs	r3, r2
 800af06:	628b      	str	r3, [r1, #40]	; 0x28
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	685b      	ldr	r3, [r3, #4]
 800af0c:	3b01      	subs	r3, #1
 800af0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	3b01      	subs	r3, #1
 800af18:	025b      	lsls	r3, r3, #9
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	431a      	orrs	r2, r3
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	68db      	ldr	r3, [r3, #12]
 800af22:	3b01      	subs	r3, #1
 800af24:	041b      	lsls	r3, r3, #16
 800af26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800af2a:	431a      	orrs	r2, r3
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	691b      	ldr	r3, [r3, #16]
 800af30:	3b01      	subs	r3, #1
 800af32:	061b      	lsls	r3, r3, #24
 800af34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800af38:	4931      	ldr	r1, [pc, #196]	; (800b000 <RCCEx_PLL3_Config+0x15c>)
 800af3a:	4313      	orrs	r3, r2
 800af3c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800af3e:	4b30      	ldr	r3, [pc, #192]	; (800b000 <RCCEx_PLL3_Config+0x15c>)
 800af40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	695b      	ldr	r3, [r3, #20]
 800af4a:	492d      	ldr	r1, [pc, #180]	; (800b000 <RCCEx_PLL3_Config+0x15c>)
 800af4c:	4313      	orrs	r3, r2
 800af4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800af50:	4b2b      	ldr	r3, [pc, #172]	; (800b000 <RCCEx_PLL3_Config+0x15c>)
 800af52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af54:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	699b      	ldr	r3, [r3, #24]
 800af5c:	4928      	ldr	r1, [pc, #160]	; (800b000 <RCCEx_PLL3_Config+0x15c>)
 800af5e:	4313      	orrs	r3, r2
 800af60:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800af62:	4b27      	ldr	r3, [pc, #156]	; (800b000 <RCCEx_PLL3_Config+0x15c>)
 800af64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af66:	4a26      	ldr	r2, [pc, #152]	; (800b000 <RCCEx_PLL3_Config+0x15c>)
 800af68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800af6e:	4b24      	ldr	r3, [pc, #144]	; (800b000 <RCCEx_PLL3_Config+0x15c>)
 800af70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af72:	4b24      	ldr	r3, [pc, #144]	; (800b004 <RCCEx_PLL3_Config+0x160>)
 800af74:	4013      	ands	r3, r2
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	69d2      	ldr	r2, [r2, #28]
 800af7a:	00d2      	lsls	r2, r2, #3
 800af7c:	4920      	ldr	r1, [pc, #128]	; (800b000 <RCCEx_PLL3_Config+0x15c>)
 800af7e:	4313      	orrs	r3, r2
 800af80:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800af82:	4b1f      	ldr	r3, [pc, #124]	; (800b000 <RCCEx_PLL3_Config+0x15c>)
 800af84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af86:	4a1e      	ldr	r2, [pc, #120]	; (800b000 <RCCEx_PLL3_Config+0x15c>)
 800af88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d106      	bne.n	800afa2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800af94:	4b1a      	ldr	r3, [pc, #104]	; (800b000 <RCCEx_PLL3_Config+0x15c>)
 800af96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af98:	4a19      	ldr	r2, [pc, #100]	; (800b000 <RCCEx_PLL3_Config+0x15c>)
 800af9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800af9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800afa0:	e00f      	b.n	800afc2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d106      	bne.n	800afb6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800afa8:	4b15      	ldr	r3, [pc, #84]	; (800b000 <RCCEx_PLL3_Config+0x15c>)
 800afaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afac:	4a14      	ldr	r2, [pc, #80]	; (800b000 <RCCEx_PLL3_Config+0x15c>)
 800afae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800afb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800afb4:	e005      	b.n	800afc2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800afb6:	4b12      	ldr	r3, [pc, #72]	; (800b000 <RCCEx_PLL3_Config+0x15c>)
 800afb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afba:	4a11      	ldr	r2, [pc, #68]	; (800b000 <RCCEx_PLL3_Config+0x15c>)
 800afbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800afc0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800afc2:	4b0f      	ldr	r3, [pc, #60]	; (800b000 <RCCEx_PLL3_Config+0x15c>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4a0e      	ldr	r2, [pc, #56]	; (800b000 <RCCEx_PLL3_Config+0x15c>)
 800afc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afce:	f7f7 fbbd 	bl	800274c <HAL_GetTick>
 800afd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800afd4:	e008      	b.n	800afe8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800afd6:	f7f7 fbb9 	bl	800274c <HAL_GetTick>
 800afda:	4602      	mov	r2, r0
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	1ad3      	subs	r3, r2, r3
 800afe0:	2b02      	cmp	r3, #2
 800afe2:	d901      	bls.n	800afe8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800afe4:	2303      	movs	r3, #3
 800afe6:	e006      	b.n	800aff6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800afe8:	4b05      	ldr	r3, [pc, #20]	; (800b000 <RCCEx_PLL3_Config+0x15c>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d0f0      	beq.n	800afd6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800aff4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3710      	adds	r7, #16
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	58024400 	.word	0x58024400
 800b004:	ffff0007 	.word	0xffff0007

0800b008 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b082      	sub	sp, #8
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d101      	bne.n	800b01a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b016:	2301      	movs	r3, #1
 800b018:	e049      	b.n	800b0ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b020:	b2db      	uxtb	r3, r3
 800b022:	2b00      	cmp	r3, #0
 800b024:	d106      	bne.n	800b034 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2200      	movs	r2, #0
 800b02a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f7f7 f84e 	bl	80020d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2202      	movs	r2, #2
 800b038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	3304      	adds	r3, #4
 800b044:	4619      	mov	r1, r3
 800b046:	4610      	mov	r0, r2
 800b048:	f000 fe10 	bl	800bc6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2201      	movs	r2, #1
 800b050:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2201      	movs	r2, #1
 800b058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2201      	movs	r2, #1
 800b060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2201      	movs	r2, #1
 800b068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2201      	movs	r2, #1
 800b070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2201      	movs	r2, #1
 800b078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2201      	movs	r2, #1
 800b080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2201      	movs	r2, #1
 800b088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2201      	movs	r2, #1
 800b090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2201      	movs	r2, #1
 800b098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2201      	movs	r2, #1
 800b0a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b0ac:	2300      	movs	r3, #0
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3708      	adds	r7, #8
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
	...

0800b0b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d109      	bne.n	800b0dc <HAL_TIM_PWM_Start+0x24>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	bf14      	ite	ne
 800b0d4:	2301      	movne	r3, #1
 800b0d6:	2300      	moveq	r3, #0
 800b0d8:	b2db      	uxtb	r3, r3
 800b0da:	e03c      	b.n	800b156 <HAL_TIM_PWM_Start+0x9e>
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	2b04      	cmp	r3, #4
 800b0e0:	d109      	bne.n	800b0f6 <HAL_TIM_PWM_Start+0x3e>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b0e8:	b2db      	uxtb	r3, r3
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	bf14      	ite	ne
 800b0ee:	2301      	movne	r3, #1
 800b0f0:	2300      	moveq	r3, #0
 800b0f2:	b2db      	uxtb	r3, r3
 800b0f4:	e02f      	b.n	800b156 <HAL_TIM_PWM_Start+0x9e>
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	2b08      	cmp	r3, #8
 800b0fa:	d109      	bne.n	800b110 <HAL_TIM_PWM_Start+0x58>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b102:	b2db      	uxtb	r3, r3
 800b104:	2b01      	cmp	r3, #1
 800b106:	bf14      	ite	ne
 800b108:	2301      	movne	r3, #1
 800b10a:	2300      	moveq	r3, #0
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	e022      	b.n	800b156 <HAL_TIM_PWM_Start+0x9e>
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	2b0c      	cmp	r3, #12
 800b114:	d109      	bne.n	800b12a <HAL_TIM_PWM_Start+0x72>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	2b01      	cmp	r3, #1
 800b120:	bf14      	ite	ne
 800b122:	2301      	movne	r3, #1
 800b124:	2300      	moveq	r3, #0
 800b126:	b2db      	uxtb	r3, r3
 800b128:	e015      	b.n	800b156 <HAL_TIM_PWM_Start+0x9e>
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	2b10      	cmp	r3, #16
 800b12e:	d109      	bne.n	800b144 <HAL_TIM_PWM_Start+0x8c>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b136:	b2db      	uxtb	r3, r3
 800b138:	2b01      	cmp	r3, #1
 800b13a:	bf14      	ite	ne
 800b13c:	2301      	movne	r3, #1
 800b13e:	2300      	moveq	r3, #0
 800b140:	b2db      	uxtb	r3, r3
 800b142:	e008      	b.n	800b156 <HAL_TIM_PWM_Start+0x9e>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b14a:	b2db      	uxtb	r3, r3
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	bf14      	ite	ne
 800b150:	2301      	movne	r3, #1
 800b152:	2300      	moveq	r3, #0
 800b154:	b2db      	uxtb	r3, r3
 800b156:	2b00      	cmp	r3, #0
 800b158:	d001      	beq.n	800b15e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b15a:	2301      	movs	r3, #1
 800b15c:	e09c      	b.n	800b298 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d104      	bne.n	800b16e <HAL_TIM_PWM_Start+0xb6>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2202      	movs	r2, #2
 800b168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b16c:	e023      	b.n	800b1b6 <HAL_TIM_PWM_Start+0xfe>
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	2b04      	cmp	r3, #4
 800b172:	d104      	bne.n	800b17e <HAL_TIM_PWM_Start+0xc6>
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2202      	movs	r2, #2
 800b178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b17c:	e01b      	b.n	800b1b6 <HAL_TIM_PWM_Start+0xfe>
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	2b08      	cmp	r3, #8
 800b182:	d104      	bne.n	800b18e <HAL_TIM_PWM_Start+0xd6>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2202      	movs	r2, #2
 800b188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b18c:	e013      	b.n	800b1b6 <HAL_TIM_PWM_Start+0xfe>
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	2b0c      	cmp	r3, #12
 800b192:	d104      	bne.n	800b19e <HAL_TIM_PWM_Start+0xe6>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2202      	movs	r2, #2
 800b198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b19c:	e00b      	b.n	800b1b6 <HAL_TIM_PWM_Start+0xfe>
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	2b10      	cmp	r3, #16
 800b1a2:	d104      	bne.n	800b1ae <HAL_TIM_PWM_Start+0xf6>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2202      	movs	r2, #2
 800b1a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b1ac:	e003      	b.n	800b1b6 <HAL_TIM_PWM_Start+0xfe>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2202      	movs	r2, #2
 800b1b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	6839      	ldr	r1, [r7, #0]
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f001 f8bc 	bl	800c33c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a35      	ldr	r2, [pc, #212]	; (800b2a0 <HAL_TIM_PWM_Start+0x1e8>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d013      	beq.n	800b1f6 <HAL_TIM_PWM_Start+0x13e>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	4a34      	ldr	r2, [pc, #208]	; (800b2a4 <HAL_TIM_PWM_Start+0x1ec>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d00e      	beq.n	800b1f6 <HAL_TIM_PWM_Start+0x13e>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	4a32      	ldr	r2, [pc, #200]	; (800b2a8 <HAL_TIM_PWM_Start+0x1f0>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d009      	beq.n	800b1f6 <HAL_TIM_PWM_Start+0x13e>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4a31      	ldr	r2, [pc, #196]	; (800b2ac <HAL_TIM_PWM_Start+0x1f4>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d004      	beq.n	800b1f6 <HAL_TIM_PWM_Start+0x13e>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a2f      	ldr	r2, [pc, #188]	; (800b2b0 <HAL_TIM_PWM_Start+0x1f8>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d101      	bne.n	800b1fa <HAL_TIM_PWM_Start+0x142>
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e000      	b.n	800b1fc <HAL_TIM_PWM_Start+0x144>
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d007      	beq.n	800b210 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b20e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a22      	ldr	r2, [pc, #136]	; (800b2a0 <HAL_TIM_PWM_Start+0x1e8>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d01d      	beq.n	800b256 <HAL_TIM_PWM_Start+0x19e>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b222:	d018      	beq.n	800b256 <HAL_TIM_PWM_Start+0x19e>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a22      	ldr	r2, [pc, #136]	; (800b2b4 <HAL_TIM_PWM_Start+0x1fc>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d013      	beq.n	800b256 <HAL_TIM_PWM_Start+0x19e>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a21      	ldr	r2, [pc, #132]	; (800b2b8 <HAL_TIM_PWM_Start+0x200>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d00e      	beq.n	800b256 <HAL_TIM_PWM_Start+0x19e>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4a1f      	ldr	r2, [pc, #124]	; (800b2bc <HAL_TIM_PWM_Start+0x204>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d009      	beq.n	800b256 <HAL_TIM_PWM_Start+0x19e>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4a17      	ldr	r2, [pc, #92]	; (800b2a4 <HAL_TIM_PWM_Start+0x1ec>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d004      	beq.n	800b256 <HAL_TIM_PWM_Start+0x19e>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a1b      	ldr	r2, [pc, #108]	; (800b2c0 <HAL_TIM_PWM_Start+0x208>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d115      	bne.n	800b282 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	689a      	ldr	r2, [r3, #8]
 800b25c:	4b19      	ldr	r3, [pc, #100]	; (800b2c4 <HAL_TIM_PWM_Start+0x20c>)
 800b25e:	4013      	ands	r3, r2
 800b260:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2b06      	cmp	r3, #6
 800b266:	d015      	beq.n	800b294 <HAL_TIM_PWM_Start+0x1dc>
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b26e:	d011      	beq.n	800b294 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	681a      	ldr	r2, [r3, #0]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f042 0201 	orr.w	r2, r2, #1
 800b27e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b280:	e008      	b.n	800b294 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	681a      	ldr	r2, [r3, #0]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f042 0201 	orr.w	r2, r2, #1
 800b290:	601a      	str	r2, [r3, #0]
 800b292:	e000      	b.n	800b296 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b294:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b296:	2300      	movs	r3, #0
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3710      	adds	r7, #16
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	40010000 	.word	0x40010000
 800b2a4:	40010400 	.word	0x40010400
 800b2a8:	40014000 	.word	0x40014000
 800b2ac:	40014400 	.word	0x40014400
 800b2b0:	40014800 	.word	0x40014800
 800b2b4:	40000400 	.word	0x40000400
 800b2b8:	40000800 	.word	0x40000800
 800b2bc:	40000c00 	.word	0x40000c00
 800b2c0:	40001800 	.word	0x40001800
 800b2c4:	00010007 	.word	0x00010007

0800b2c8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	6839      	ldr	r1, [r7, #0]
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f001 f82e 	bl	800c33c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4a3e      	ldr	r2, [pc, #248]	; (800b3e0 <HAL_TIM_PWM_Stop+0x118>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d013      	beq.n	800b312 <HAL_TIM_PWM_Stop+0x4a>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	4a3d      	ldr	r2, [pc, #244]	; (800b3e4 <HAL_TIM_PWM_Stop+0x11c>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d00e      	beq.n	800b312 <HAL_TIM_PWM_Stop+0x4a>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	4a3b      	ldr	r2, [pc, #236]	; (800b3e8 <HAL_TIM_PWM_Stop+0x120>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d009      	beq.n	800b312 <HAL_TIM_PWM_Stop+0x4a>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4a3a      	ldr	r2, [pc, #232]	; (800b3ec <HAL_TIM_PWM_Stop+0x124>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d004      	beq.n	800b312 <HAL_TIM_PWM_Stop+0x4a>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4a38      	ldr	r2, [pc, #224]	; (800b3f0 <HAL_TIM_PWM_Stop+0x128>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d101      	bne.n	800b316 <HAL_TIM_PWM_Stop+0x4e>
 800b312:	2301      	movs	r3, #1
 800b314:	e000      	b.n	800b318 <HAL_TIM_PWM_Stop+0x50>
 800b316:	2300      	movs	r3, #0
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d017      	beq.n	800b34c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	6a1a      	ldr	r2, [r3, #32]
 800b322:	f241 1311 	movw	r3, #4369	; 0x1111
 800b326:	4013      	ands	r3, r2
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d10f      	bne.n	800b34c <HAL_TIM_PWM_Stop+0x84>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	6a1a      	ldr	r2, [r3, #32]
 800b332:	f240 4344 	movw	r3, #1092	; 0x444
 800b336:	4013      	ands	r3, r2
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d107      	bne.n	800b34c <HAL_TIM_PWM_Stop+0x84>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b34a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	6a1a      	ldr	r2, [r3, #32]
 800b352:	f241 1311 	movw	r3, #4369	; 0x1111
 800b356:	4013      	ands	r3, r2
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d10f      	bne.n	800b37c <HAL_TIM_PWM_Stop+0xb4>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	6a1a      	ldr	r2, [r3, #32]
 800b362:	f240 4344 	movw	r3, #1092	; 0x444
 800b366:	4013      	ands	r3, r2
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d107      	bne.n	800b37c <HAL_TIM_PWM_Stop+0xb4>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f022 0201 	bic.w	r2, r2, #1
 800b37a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d104      	bne.n	800b38c <HAL_TIM_PWM_Stop+0xc4>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2201      	movs	r2, #1
 800b386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b38a:	e023      	b.n	800b3d4 <HAL_TIM_PWM_Stop+0x10c>
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	2b04      	cmp	r3, #4
 800b390:	d104      	bne.n	800b39c <HAL_TIM_PWM_Stop+0xd4>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2201      	movs	r2, #1
 800b396:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b39a:	e01b      	b.n	800b3d4 <HAL_TIM_PWM_Stop+0x10c>
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	2b08      	cmp	r3, #8
 800b3a0:	d104      	bne.n	800b3ac <HAL_TIM_PWM_Stop+0xe4>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3aa:	e013      	b.n	800b3d4 <HAL_TIM_PWM_Stop+0x10c>
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	2b0c      	cmp	r3, #12
 800b3b0:	d104      	bne.n	800b3bc <HAL_TIM_PWM_Stop+0xf4>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b3ba:	e00b      	b.n	800b3d4 <HAL_TIM_PWM_Stop+0x10c>
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	2b10      	cmp	r3, #16
 800b3c0:	d104      	bne.n	800b3cc <HAL_TIM_PWM_Stop+0x104>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b3ca:	e003      	b.n	800b3d4 <HAL_TIM_PWM_Stop+0x10c>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800b3d4:	2300      	movs	r3, #0
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3708      	adds	r7, #8
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	40010000 	.word	0x40010000
 800b3e4:	40010400 	.word	0x40010400
 800b3e8:	40014000 	.word	0x40014000
 800b3ec:	40014400 	.word	0x40014400
 800b3f0:	40014800 	.word	0x40014800

0800b3f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b086      	sub	sp, #24
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d101      	bne.n	800b408 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b404:	2301      	movs	r3, #1
 800b406:	e08f      	b.n	800b528 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	2b00      	cmp	r3, #0
 800b412:	d106      	bne.n	800b422 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2200      	movs	r2, #0
 800b418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f7f6 fde7 	bl	8001ff0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2202      	movs	r2, #2
 800b426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	6899      	ldr	r1, [r3, #8]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681a      	ldr	r2, [r3, #0]
 800b434:	4b3e      	ldr	r3, [pc, #248]	; (800b530 <HAL_TIM_Encoder_Init+0x13c>)
 800b436:	400b      	ands	r3, r1
 800b438:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681a      	ldr	r2, [r3, #0]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	3304      	adds	r3, #4
 800b442:	4619      	mov	r1, r3
 800b444:	4610      	mov	r0, r2
 800b446:	f000 fc11 	bl	800bc6c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	689b      	ldr	r3, [r3, #8]
 800b450:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	699b      	ldr	r3, [r3, #24]
 800b458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	6a1b      	ldr	r3, [r3, #32]
 800b460:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	697a      	ldr	r2, [r7, #20]
 800b468:	4313      	orrs	r3, r2
 800b46a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b46c:	693a      	ldr	r2, [r7, #16]
 800b46e:	4b31      	ldr	r3, [pc, #196]	; (800b534 <HAL_TIM_Encoder_Init+0x140>)
 800b470:	4013      	ands	r3, r2
 800b472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	689a      	ldr	r2, [r3, #8]
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	699b      	ldr	r3, [r3, #24]
 800b47c:	021b      	lsls	r3, r3, #8
 800b47e:	4313      	orrs	r3, r2
 800b480:	693a      	ldr	r2, [r7, #16]
 800b482:	4313      	orrs	r3, r2
 800b484:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b486:	693a      	ldr	r2, [r7, #16]
 800b488:	4b2b      	ldr	r3, [pc, #172]	; (800b538 <HAL_TIM_Encoder_Init+0x144>)
 800b48a:	4013      	ands	r3, r2
 800b48c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b48e:	693a      	ldr	r2, [r7, #16]
 800b490:	4b2a      	ldr	r3, [pc, #168]	; (800b53c <HAL_TIM_Encoder_Init+0x148>)
 800b492:	4013      	ands	r3, r2
 800b494:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	68da      	ldr	r2, [r3, #12]
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	69db      	ldr	r3, [r3, #28]
 800b49e:	021b      	lsls	r3, r3, #8
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	693a      	ldr	r2, [r7, #16]
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	691b      	ldr	r3, [r3, #16]
 800b4ac:	011a      	lsls	r2, r3, #4
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	6a1b      	ldr	r3, [r3, #32]
 800b4b2:	031b      	lsls	r3, r3, #12
 800b4b4:	4313      	orrs	r3, r2
 800b4b6:	693a      	ldr	r2, [r7, #16]
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b4c2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b4ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	685a      	ldr	r2, [r3, #4]
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	695b      	ldr	r3, [r3, #20]
 800b4d4:	011b      	lsls	r3, r3, #4
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	697a      	ldr	r2, [r7, #20]
 800b4e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	693a      	ldr	r2, [r7, #16]
 800b4ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	68fa      	ldr	r2, [r7, #12]
 800b4f4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2201      	movs	r2, #1
 800b502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2201      	movs	r2, #1
 800b50a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2201      	movs	r2, #1
 800b512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2201      	movs	r2, #1
 800b51a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2201      	movs	r2, #1
 800b522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b526:	2300      	movs	r3, #0
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3718      	adds	r7, #24
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	fffebff8 	.word	0xfffebff8
 800b534:	fffffcfc 	.word	0xfffffcfc
 800b538:	fffff3f3 	.word	0xfffff3f3
 800b53c:	ffff0f0f 	.word	0xffff0f0f

0800b540 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b550:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b558:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b560:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b568:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d110      	bne.n	800b592 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b570:	7bfb      	ldrb	r3, [r7, #15]
 800b572:	2b01      	cmp	r3, #1
 800b574:	d102      	bne.n	800b57c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b576:	7b7b      	ldrb	r3, [r7, #13]
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d001      	beq.n	800b580 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b57c:	2301      	movs	r3, #1
 800b57e:	e069      	b.n	800b654 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2202      	movs	r2, #2
 800b584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2202      	movs	r2, #2
 800b58c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b590:	e031      	b.n	800b5f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	2b04      	cmp	r3, #4
 800b596:	d110      	bne.n	800b5ba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b598:	7bbb      	ldrb	r3, [r7, #14]
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d102      	bne.n	800b5a4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b59e:	7b3b      	ldrb	r3, [r7, #12]
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d001      	beq.n	800b5a8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	e055      	b.n	800b654 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2202      	movs	r2, #2
 800b5ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2202      	movs	r2, #2
 800b5b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b5b8:	e01d      	b.n	800b5f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b5ba:	7bfb      	ldrb	r3, [r7, #15]
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d108      	bne.n	800b5d2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b5c0:	7bbb      	ldrb	r3, [r7, #14]
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d105      	bne.n	800b5d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b5c6:	7b7b      	ldrb	r3, [r7, #13]
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d102      	bne.n	800b5d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b5cc:	7b3b      	ldrb	r3, [r7, #12]
 800b5ce:	2b01      	cmp	r3, #1
 800b5d0:	d001      	beq.n	800b5d6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	e03e      	b.n	800b654 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2202      	movs	r2, #2
 800b5da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2202      	movs	r2, #2
 800b5e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2202      	movs	r2, #2
 800b5ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2202      	movs	r2, #2
 800b5f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d003      	beq.n	800b604 <HAL_TIM_Encoder_Start+0xc4>
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	2b04      	cmp	r3, #4
 800b600:	d008      	beq.n	800b614 <HAL_TIM_Encoder_Start+0xd4>
 800b602:	e00f      	b.n	800b624 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	2201      	movs	r2, #1
 800b60a:	2100      	movs	r1, #0
 800b60c:	4618      	mov	r0, r3
 800b60e:	f000 fe95 	bl	800c33c <TIM_CCxChannelCmd>
      break;
 800b612:	e016      	b.n	800b642 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	2201      	movs	r2, #1
 800b61a:	2104      	movs	r1, #4
 800b61c:	4618      	mov	r0, r3
 800b61e:	f000 fe8d 	bl	800c33c <TIM_CCxChannelCmd>
      break;
 800b622:	e00e      	b.n	800b642 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2201      	movs	r2, #1
 800b62a:	2100      	movs	r1, #0
 800b62c:	4618      	mov	r0, r3
 800b62e:	f000 fe85 	bl	800c33c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	2201      	movs	r2, #1
 800b638:	2104      	movs	r1, #4
 800b63a:	4618      	mov	r0, r3
 800b63c:	f000 fe7e 	bl	800c33c <TIM_CCxChannelCmd>
      break;
 800b640:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	681a      	ldr	r2, [r3, #0]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f042 0201 	orr.w	r2, r2, #1
 800b650:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b652:	2300      	movs	r3, #0
}
 800b654:	4618      	mov	r0, r3
 800b656:	3710      	adds	r7, #16
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
 800b664:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d003      	beq.n	800b674 <HAL_TIM_Encoder_Stop+0x18>
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	2b04      	cmp	r3, #4
 800b670:	d008      	beq.n	800b684 <HAL_TIM_Encoder_Stop+0x28>
 800b672:	e00f      	b.n	800b694 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2200      	movs	r2, #0
 800b67a:	2100      	movs	r1, #0
 800b67c:	4618      	mov	r0, r3
 800b67e:	f000 fe5d 	bl	800c33c <TIM_CCxChannelCmd>
      break;
 800b682:	e016      	b.n	800b6b2 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	2200      	movs	r2, #0
 800b68a:	2104      	movs	r1, #4
 800b68c:	4618      	mov	r0, r3
 800b68e:	f000 fe55 	bl	800c33c <TIM_CCxChannelCmd>
      break;
 800b692:	e00e      	b.n	800b6b2 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	2200      	movs	r2, #0
 800b69a:	2100      	movs	r1, #0
 800b69c:	4618      	mov	r0, r3
 800b69e:	f000 fe4d 	bl	800c33c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	2104      	movs	r1, #4
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f000 fe46 	bl	800c33c <TIM_CCxChannelCmd>
      break;
 800b6b0:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	6a1a      	ldr	r2, [r3, #32]
 800b6b8:	f241 1311 	movw	r3, #4369	; 0x1111
 800b6bc:	4013      	ands	r3, r2
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d10f      	bne.n	800b6e2 <HAL_TIM_Encoder_Stop+0x86>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	6a1a      	ldr	r2, [r3, #32]
 800b6c8:	f240 4344 	movw	r3, #1092	; 0x444
 800b6cc:	4013      	ands	r3, r2
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d107      	bne.n	800b6e2 <HAL_TIM_Encoder_Stop+0x86>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f022 0201 	bic.w	r2, r2, #1
 800b6e0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d002      	beq.n	800b6ee <HAL_TIM_Encoder_Stop+0x92>
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	2b04      	cmp	r3, #4
 800b6ec:	d148      	bne.n	800b780 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d104      	bne.n	800b6fe <HAL_TIM_Encoder_Stop+0xa2>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b6fc:	e023      	b.n	800b746 <HAL_TIM_Encoder_Stop+0xea>
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	2b04      	cmp	r3, #4
 800b702:	d104      	bne.n	800b70e <HAL_TIM_Encoder_Stop+0xb2>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2201      	movs	r2, #1
 800b708:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b70c:	e01b      	b.n	800b746 <HAL_TIM_Encoder_Stop+0xea>
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	2b08      	cmp	r3, #8
 800b712:	d104      	bne.n	800b71e <HAL_TIM_Encoder_Stop+0xc2>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2201      	movs	r2, #1
 800b718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b71c:	e013      	b.n	800b746 <HAL_TIM_Encoder_Stop+0xea>
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	2b0c      	cmp	r3, #12
 800b722:	d104      	bne.n	800b72e <HAL_TIM_Encoder_Stop+0xd2>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2201      	movs	r2, #1
 800b728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b72c:	e00b      	b.n	800b746 <HAL_TIM_Encoder_Stop+0xea>
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	2b10      	cmp	r3, #16
 800b732:	d104      	bne.n	800b73e <HAL_TIM_Encoder_Stop+0xe2>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2201      	movs	r2, #1
 800b738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b73c:	e003      	b.n	800b746 <HAL_TIM_Encoder_Stop+0xea>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2201      	movs	r2, #1
 800b742:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d104      	bne.n	800b756 <HAL_TIM_Encoder_Stop+0xfa>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2201      	movs	r2, #1
 800b750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b754:	e024      	b.n	800b7a0 <HAL_TIM_Encoder_Stop+0x144>
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	2b04      	cmp	r3, #4
 800b75a:	d104      	bne.n	800b766 <HAL_TIM_Encoder_Stop+0x10a>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2201      	movs	r2, #1
 800b760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b764:	e01c      	b.n	800b7a0 <HAL_TIM_Encoder_Stop+0x144>
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	2b08      	cmp	r3, #8
 800b76a:	d104      	bne.n	800b776 <HAL_TIM_Encoder_Stop+0x11a>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2201      	movs	r2, #1
 800b770:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b774:	e014      	b.n	800b7a0 <HAL_TIM_Encoder_Stop+0x144>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2201      	movs	r2, #1
 800b77a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800b77e:	e00f      	b.n	800b7a0 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2201      	movs	r2, #1
 800b784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2201      	movs	r2, #1
 800b78c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2201      	movs	r2, #1
 800b794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2201      	movs	r2, #1
 800b79c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return HAL_OK;
 800b7a0:	2300      	movs	r3, #0
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3708      	adds	r7, #8
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b7aa:	b580      	push	{r7, lr}
 800b7ac:	b082      	sub	sp, #8
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	691b      	ldr	r3, [r3, #16]
 800b7b8:	f003 0302 	and.w	r3, r3, #2
 800b7bc:	2b02      	cmp	r3, #2
 800b7be:	d122      	bne.n	800b806 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	68db      	ldr	r3, [r3, #12]
 800b7c6:	f003 0302 	and.w	r3, r3, #2
 800b7ca:	2b02      	cmp	r3, #2
 800b7cc:	d11b      	bne.n	800b806 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f06f 0202 	mvn.w	r2, #2
 800b7d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2201      	movs	r2, #1
 800b7dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	699b      	ldr	r3, [r3, #24]
 800b7e4:	f003 0303 	and.w	r3, r3, #3
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d003      	beq.n	800b7f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f000 fa1f 	bl	800bc30 <HAL_TIM_IC_CaptureCallback>
 800b7f2:	e005      	b.n	800b800 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 fa11 	bl	800bc1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f000 fa22 	bl	800bc44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2200      	movs	r2, #0
 800b804:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	691b      	ldr	r3, [r3, #16]
 800b80c:	f003 0304 	and.w	r3, r3, #4
 800b810:	2b04      	cmp	r3, #4
 800b812:	d122      	bne.n	800b85a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	68db      	ldr	r3, [r3, #12]
 800b81a:	f003 0304 	and.w	r3, r3, #4
 800b81e:	2b04      	cmp	r3, #4
 800b820:	d11b      	bne.n	800b85a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f06f 0204 	mvn.w	r2, #4
 800b82a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2202      	movs	r2, #2
 800b830:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	699b      	ldr	r3, [r3, #24]
 800b838:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d003      	beq.n	800b848 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f000 f9f5 	bl	800bc30 <HAL_TIM_IC_CaptureCallback>
 800b846:	e005      	b.n	800b854 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f000 f9e7 	bl	800bc1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f000 f9f8 	bl	800bc44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2200      	movs	r2, #0
 800b858:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	691b      	ldr	r3, [r3, #16]
 800b860:	f003 0308 	and.w	r3, r3, #8
 800b864:	2b08      	cmp	r3, #8
 800b866:	d122      	bne.n	800b8ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	68db      	ldr	r3, [r3, #12]
 800b86e:	f003 0308 	and.w	r3, r3, #8
 800b872:	2b08      	cmp	r3, #8
 800b874:	d11b      	bne.n	800b8ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f06f 0208 	mvn.w	r2, #8
 800b87e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2204      	movs	r2, #4
 800b884:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	69db      	ldr	r3, [r3, #28]
 800b88c:	f003 0303 	and.w	r3, r3, #3
 800b890:	2b00      	cmp	r3, #0
 800b892:	d003      	beq.n	800b89c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f000 f9cb 	bl	800bc30 <HAL_TIM_IC_CaptureCallback>
 800b89a:	e005      	b.n	800b8a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f000 f9bd 	bl	800bc1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 f9ce 	bl	800bc44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	691b      	ldr	r3, [r3, #16]
 800b8b4:	f003 0310 	and.w	r3, r3, #16
 800b8b8:	2b10      	cmp	r3, #16
 800b8ba:	d122      	bne.n	800b902 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	f003 0310 	and.w	r3, r3, #16
 800b8c6:	2b10      	cmp	r3, #16
 800b8c8:	d11b      	bne.n	800b902 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f06f 0210 	mvn.w	r2, #16
 800b8d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2208      	movs	r2, #8
 800b8d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	69db      	ldr	r3, [r3, #28]
 800b8e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d003      	beq.n	800b8f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f000 f9a1 	bl	800bc30 <HAL_TIM_IC_CaptureCallback>
 800b8ee:	e005      	b.n	800b8fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 f993 	bl	800bc1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f000 f9a4 	bl	800bc44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2200      	movs	r2, #0
 800b900:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	691b      	ldr	r3, [r3, #16]
 800b908:	f003 0301 	and.w	r3, r3, #1
 800b90c:	2b01      	cmp	r3, #1
 800b90e:	d10e      	bne.n	800b92e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	68db      	ldr	r3, [r3, #12]
 800b916:	f003 0301 	and.w	r3, r3, #1
 800b91a:	2b01      	cmp	r3, #1
 800b91c:	d107      	bne.n	800b92e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f06f 0201 	mvn.w	r2, #1
 800b926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f000 f96d 	bl	800bc08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	691b      	ldr	r3, [r3, #16]
 800b934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b938:	2b80      	cmp	r3, #128	; 0x80
 800b93a:	d10e      	bne.n	800b95a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	68db      	ldr	r3, [r3, #12]
 800b942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b946:	2b80      	cmp	r3, #128	; 0x80
 800b948:	d107      	bne.n	800b95a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f000 fda9 	bl	800c4ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	691b      	ldr	r3, [r3, #16]
 800b960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b968:	d10e      	bne.n	800b988 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b974:	2b80      	cmp	r3, #128	; 0x80
 800b976:	d107      	bne.n	800b988 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 fd9c 	bl	800c4c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	691b      	ldr	r3, [r3, #16]
 800b98e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b992:	2b40      	cmp	r3, #64	; 0x40
 800b994:	d10e      	bne.n	800b9b4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	68db      	ldr	r3, [r3, #12]
 800b99c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9a0:	2b40      	cmp	r3, #64	; 0x40
 800b9a2:	d107      	bne.n	800b9b4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b9ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 f952 	bl	800bc58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	691b      	ldr	r3, [r3, #16]
 800b9ba:	f003 0320 	and.w	r3, r3, #32
 800b9be:	2b20      	cmp	r3, #32
 800b9c0:	d10e      	bne.n	800b9e0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	68db      	ldr	r3, [r3, #12]
 800b9c8:	f003 0320 	and.w	r3, r3, #32
 800b9cc:	2b20      	cmp	r3, #32
 800b9ce:	d107      	bne.n	800b9e0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f06f 0220 	mvn.w	r2, #32
 800b9d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f000 fd5c 	bl	800c498 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b9e0:	bf00      	nop
 800b9e2:	3708      	adds	r7, #8
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b084      	sub	sp, #16
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	60b9      	str	r1, [r7, #8]
 800b9f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d101      	bne.n	800ba02 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b9fe:	2302      	movs	r3, #2
 800ba00:	e0fd      	b.n	800bbfe <HAL_TIM_PWM_ConfigChannel+0x216>
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2201      	movs	r2, #1
 800ba06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2b14      	cmp	r3, #20
 800ba0e:	f200 80f0 	bhi.w	800bbf2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800ba12:	a201      	add	r2, pc, #4	; (adr r2, 800ba18 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800ba14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba18:	0800ba6d 	.word	0x0800ba6d
 800ba1c:	0800bbf3 	.word	0x0800bbf3
 800ba20:	0800bbf3 	.word	0x0800bbf3
 800ba24:	0800bbf3 	.word	0x0800bbf3
 800ba28:	0800baad 	.word	0x0800baad
 800ba2c:	0800bbf3 	.word	0x0800bbf3
 800ba30:	0800bbf3 	.word	0x0800bbf3
 800ba34:	0800bbf3 	.word	0x0800bbf3
 800ba38:	0800baef 	.word	0x0800baef
 800ba3c:	0800bbf3 	.word	0x0800bbf3
 800ba40:	0800bbf3 	.word	0x0800bbf3
 800ba44:	0800bbf3 	.word	0x0800bbf3
 800ba48:	0800bb2f 	.word	0x0800bb2f
 800ba4c:	0800bbf3 	.word	0x0800bbf3
 800ba50:	0800bbf3 	.word	0x0800bbf3
 800ba54:	0800bbf3 	.word	0x0800bbf3
 800ba58:	0800bb71 	.word	0x0800bb71
 800ba5c:	0800bbf3 	.word	0x0800bbf3
 800ba60:	0800bbf3 	.word	0x0800bbf3
 800ba64:	0800bbf3 	.word	0x0800bbf3
 800ba68:	0800bbb1 	.word	0x0800bbb1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	68b9      	ldr	r1, [r7, #8]
 800ba72:	4618      	mov	r0, r3
 800ba74:	f000 f994 	bl	800bda0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	699a      	ldr	r2, [r3, #24]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f042 0208 	orr.w	r2, r2, #8
 800ba86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	699a      	ldr	r2, [r3, #24]
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f022 0204 	bic.w	r2, r2, #4
 800ba96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	6999      	ldr	r1, [r3, #24]
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	691a      	ldr	r2, [r3, #16]
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	430a      	orrs	r2, r1
 800baa8:	619a      	str	r2, [r3, #24]
      break;
 800baaa:	e0a3      	b.n	800bbf4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	68b9      	ldr	r1, [r7, #8]
 800bab2:	4618      	mov	r0, r3
 800bab4:	f000 fa04 	bl	800bec0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	699a      	ldr	r2, [r3, #24]
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bac6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	699a      	ldr	r2, [r3, #24]
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bad6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	6999      	ldr	r1, [r3, #24]
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	691b      	ldr	r3, [r3, #16]
 800bae2:	021a      	lsls	r2, r3, #8
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	430a      	orrs	r2, r1
 800baea:	619a      	str	r2, [r3, #24]
      break;
 800baec:	e082      	b.n	800bbf4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	68b9      	ldr	r1, [r7, #8]
 800baf4:	4618      	mov	r0, r3
 800baf6:	f000 fa6d 	bl	800bfd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	69da      	ldr	r2, [r3, #28]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f042 0208 	orr.w	r2, r2, #8
 800bb08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	69da      	ldr	r2, [r3, #28]
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f022 0204 	bic.w	r2, r2, #4
 800bb18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	69d9      	ldr	r1, [r3, #28]
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	691a      	ldr	r2, [r3, #16]
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	430a      	orrs	r2, r1
 800bb2a:	61da      	str	r2, [r3, #28]
      break;
 800bb2c:	e062      	b.n	800bbf4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	68b9      	ldr	r1, [r7, #8]
 800bb34:	4618      	mov	r0, r3
 800bb36:	f000 fad3 	bl	800c0e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	69da      	ldr	r2, [r3, #28]
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	69da      	ldr	r2, [r3, #28]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	69d9      	ldr	r1, [r3, #28]
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	691b      	ldr	r3, [r3, #16]
 800bb64:	021a      	lsls	r2, r3, #8
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	430a      	orrs	r2, r1
 800bb6c:	61da      	str	r2, [r3, #28]
      break;
 800bb6e:	e041      	b.n	800bbf4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	68b9      	ldr	r1, [r7, #8]
 800bb76:	4618      	mov	r0, r3
 800bb78:	f000 fb1a 	bl	800c1b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f042 0208 	orr.w	r2, r2, #8
 800bb8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f022 0204 	bic.w	r2, r2, #4
 800bb9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	691a      	ldr	r2, [r3, #16]
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	430a      	orrs	r2, r1
 800bbac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bbae:	e021      	b.n	800bbf4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	68b9      	ldr	r1, [r7, #8]
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f000 fb5c 	bl	800c274 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bbca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	691b      	ldr	r3, [r3, #16]
 800bbe6:	021a      	lsls	r2, r3, #8
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	430a      	orrs	r2, r1
 800bbee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bbf0:	e000      	b.n	800bbf4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800bbf2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bbfc:	2300      	movs	r3, #0
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3710      	adds	r7, #16
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop

0800bc08 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b083      	sub	sp, #12
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800bc10:	bf00      	nop
 800bc12:	370c      	adds	r7, #12
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr

0800bc1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b083      	sub	sp, #12
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc24:	bf00      	nop
 800bc26:	370c      	adds	r7, #12
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr

0800bc30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bc38:	bf00      	nop
 800bc3a:	370c      	adds	r7, #12
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr

0800bc44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b083      	sub	sp, #12
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bc4c:	bf00      	nop
 800bc4e:	370c      	adds	r7, #12
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr

0800bc58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b083      	sub	sp, #12
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc60:	bf00      	nop
 800bc62:	370c      	adds	r7, #12
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b085      	sub	sp, #20
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	4a40      	ldr	r2, [pc, #256]	; (800bd80 <TIM_Base_SetConfig+0x114>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d013      	beq.n	800bcac <TIM_Base_SetConfig+0x40>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc8a:	d00f      	beq.n	800bcac <TIM_Base_SetConfig+0x40>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	4a3d      	ldr	r2, [pc, #244]	; (800bd84 <TIM_Base_SetConfig+0x118>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d00b      	beq.n	800bcac <TIM_Base_SetConfig+0x40>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	4a3c      	ldr	r2, [pc, #240]	; (800bd88 <TIM_Base_SetConfig+0x11c>)
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d007      	beq.n	800bcac <TIM_Base_SetConfig+0x40>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	4a3b      	ldr	r2, [pc, #236]	; (800bd8c <TIM_Base_SetConfig+0x120>)
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d003      	beq.n	800bcac <TIM_Base_SetConfig+0x40>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	4a3a      	ldr	r2, [pc, #232]	; (800bd90 <TIM_Base_SetConfig+0x124>)
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d108      	bne.n	800bcbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	685b      	ldr	r3, [r3, #4]
 800bcb8:	68fa      	ldr	r2, [r7, #12]
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	4a2f      	ldr	r2, [pc, #188]	; (800bd80 <TIM_Base_SetConfig+0x114>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d01f      	beq.n	800bd06 <TIM_Base_SetConfig+0x9a>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bccc:	d01b      	beq.n	800bd06 <TIM_Base_SetConfig+0x9a>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	4a2c      	ldr	r2, [pc, #176]	; (800bd84 <TIM_Base_SetConfig+0x118>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d017      	beq.n	800bd06 <TIM_Base_SetConfig+0x9a>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	4a2b      	ldr	r2, [pc, #172]	; (800bd88 <TIM_Base_SetConfig+0x11c>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d013      	beq.n	800bd06 <TIM_Base_SetConfig+0x9a>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	4a2a      	ldr	r2, [pc, #168]	; (800bd8c <TIM_Base_SetConfig+0x120>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d00f      	beq.n	800bd06 <TIM_Base_SetConfig+0x9a>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	4a29      	ldr	r2, [pc, #164]	; (800bd90 <TIM_Base_SetConfig+0x124>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d00b      	beq.n	800bd06 <TIM_Base_SetConfig+0x9a>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	4a28      	ldr	r2, [pc, #160]	; (800bd94 <TIM_Base_SetConfig+0x128>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d007      	beq.n	800bd06 <TIM_Base_SetConfig+0x9a>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	4a27      	ldr	r2, [pc, #156]	; (800bd98 <TIM_Base_SetConfig+0x12c>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d003      	beq.n	800bd06 <TIM_Base_SetConfig+0x9a>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	4a26      	ldr	r2, [pc, #152]	; (800bd9c <TIM_Base_SetConfig+0x130>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d108      	bne.n	800bd18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	68db      	ldr	r3, [r3, #12]
 800bd12:	68fa      	ldr	r2, [r7, #12]
 800bd14:	4313      	orrs	r3, r2
 800bd16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	695b      	ldr	r3, [r3, #20]
 800bd22:	4313      	orrs	r3, r2
 800bd24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	689a      	ldr	r2, [r3, #8]
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	4a10      	ldr	r2, [pc, #64]	; (800bd80 <TIM_Base_SetConfig+0x114>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d00f      	beq.n	800bd64 <TIM_Base_SetConfig+0xf8>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	4a12      	ldr	r2, [pc, #72]	; (800bd90 <TIM_Base_SetConfig+0x124>)
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	d00b      	beq.n	800bd64 <TIM_Base_SetConfig+0xf8>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	4a11      	ldr	r2, [pc, #68]	; (800bd94 <TIM_Base_SetConfig+0x128>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d007      	beq.n	800bd64 <TIM_Base_SetConfig+0xf8>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	4a10      	ldr	r2, [pc, #64]	; (800bd98 <TIM_Base_SetConfig+0x12c>)
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d003      	beq.n	800bd64 <TIM_Base_SetConfig+0xf8>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	4a0f      	ldr	r2, [pc, #60]	; (800bd9c <TIM_Base_SetConfig+0x130>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d103      	bne.n	800bd6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	691a      	ldr	r2, [r3, #16]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2201      	movs	r2, #1
 800bd70:	615a      	str	r2, [r3, #20]
}
 800bd72:	bf00      	nop
 800bd74:	3714      	adds	r7, #20
 800bd76:	46bd      	mov	sp, r7
 800bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7c:	4770      	bx	lr
 800bd7e:	bf00      	nop
 800bd80:	40010000 	.word	0x40010000
 800bd84:	40000400 	.word	0x40000400
 800bd88:	40000800 	.word	0x40000800
 800bd8c:	40000c00 	.word	0x40000c00
 800bd90:	40010400 	.word	0x40010400
 800bd94:	40014000 	.word	0x40014000
 800bd98:	40014400 	.word	0x40014400
 800bd9c:	40014800 	.word	0x40014800

0800bda0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b087      	sub	sp, #28
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6a1b      	ldr	r3, [r3, #32]
 800bdae:	f023 0201 	bic.w	r2, r3, #1
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6a1b      	ldr	r3, [r3, #32]
 800bdba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	685b      	ldr	r3, [r3, #4]
 800bdc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	699b      	ldr	r3, [r3, #24]
 800bdc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bdc8:	68fa      	ldr	r2, [r7, #12]
 800bdca:	4b37      	ldr	r3, [pc, #220]	; (800bea8 <TIM_OC1_SetConfig+0x108>)
 800bdcc:	4013      	ands	r3, r2
 800bdce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f023 0303 	bic.w	r3, r3, #3
 800bdd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	68fa      	ldr	r2, [r7, #12]
 800bdde:	4313      	orrs	r3, r2
 800bde0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	f023 0302 	bic.w	r3, r3, #2
 800bde8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	689b      	ldr	r3, [r3, #8]
 800bdee:	697a      	ldr	r2, [r7, #20]
 800bdf0:	4313      	orrs	r3, r2
 800bdf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	4a2d      	ldr	r2, [pc, #180]	; (800beac <TIM_OC1_SetConfig+0x10c>)
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d00f      	beq.n	800be1c <TIM_OC1_SetConfig+0x7c>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	4a2c      	ldr	r2, [pc, #176]	; (800beb0 <TIM_OC1_SetConfig+0x110>)
 800be00:	4293      	cmp	r3, r2
 800be02:	d00b      	beq.n	800be1c <TIM_OC1_SetConfig+0x7c>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	4a2b      	ldr	r2, [pc, #172]	; (800beb4 <TIM_OC1_SetConfig+0x114>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d007      	beq.n	800be1c <TIM_OC1_SetConfig+0x7c>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	4a2a      	ldr	r2, [pc, #168]	; (800beb8 <TIM_OC1_SetConfig+0x118>)
 800be10:	4293      	cmp	r3, r2
 800be12:	d003      	beq.n	800be1c <TIM_OC1_SetConfig+0x7c>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	4a29      	ldr	r2, [pc, #164]	; (800bebc <TIM_OC1_SetConfig+0x11c>)
 800be18:	4293      	cmp	r3, r2
 800be1a:	d10c      	bne.n	800be36 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	f023 0308 	bic.w	r3, r3, #8
 800be22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	68db      	ldr	r3, [r3, #12]
 800be28:	697a      	ldr	r2, [r7, #20]
 800be2a:	4313      	orrs	r3, r2
 800be2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	f023 0304 	bic.w	r3, r3, #4
 800be34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	4a1c      	ldr	r2, [pc, #112]	; (800beac <TIM_OC1_SetConfig+0x10c>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d00f      	beq.n	800be5e <TIM_OC1_SetConfig+0xbe>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	4a1b      	ldr	r2, [pc, #108]	; (800beb0 <TIM_OC1_SetConfig+0x110>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d00b      	beq.n	800be5e <TIM_OC1_SetConfig+0xbe>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	4a1a      	ldr	r2, [pc, #104]	; (800beb4 <TIM_OC1_SetConfig+0x114>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d007      	beq.n	800be5e <TIM_OC1_SetConfig+0xbe>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	4a19      	ldr	r2, [pc, #100]	; (800beb8 <TIM_OC1_SetConfig+0x118>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d003      	beq.n	800be5e <TIM_OC1_SetConfig+0xbe>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	4a18      	ldr	r2, [pc, #96]	; (800bebc <TIM_OC1_SetConfig+0x11c>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d111      	bne.n	800be82 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800be6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	695b      	ldr	r3, [r3, #20]
 800be72:	693a      	ldr	r2, [r7, #16]
 800be74:	4313      	orrs	r3, r2
 800be76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	699b      	ldr	r3, [r3, #24]
 800be7c:	693a      	ldr	r2, [r7, #16]
 800be7e:	4313      	orrs	r3, r2
 800be80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	693a      	ldr	r2, [r7, #16]
 800be86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	68fa      	ldr	r2, [r7, #12]
 800be8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	685a      	ldr	r2, [r3, #4]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	697a      	ldr	r2, [r7, #20]
 800be9a:	621a      	str	r2, [r3, #32]
}
 800be9c:	bf00      	nop
 800be9e:	371c      	adds	r7, #28
 800bea0:	46bd      	mov	sp, r7
 800bea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea6:	4770      	bx	lr
 800bea8:	fffeff8f 	.word	0xfffeff8f
 800beac:	40010000 	.word	0x40010000
 800beb0:	40010400 	.word	0x40010400
 800beb4:	40014000 	.word	0x40014000
 800beb8:	40014400 	.word	0x40014400
 800bebc:	40014800 	.word	0x40014800

0800bec0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b087      	sub	sp, #28
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6a1b      	ldr	r3, [r3, #32]
 800bece:	f023 0210 	bic.w	r2, r3, #16
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6a1b      	ldr	r3, [r3, #32]
 800beda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	699b      	ldr	r3, [r3, #24]
 800bee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bee8:	68fa      	ldr	r2, [r7, #12]
 800beea:	4b34      	ldr	r3, [pc, #208]	; (800bfbc <TIM_OC2_SetConfig+0xfc>)
 800beec:	4013      	ands	r3, r2
 800beee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	021b      	lsls	r3, r3, #8
 800befe:	68fa      	ldr	r2, [r7, #12]
 800bf00:	4313      	orrs	r3, r2
 800bf02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	f023 0320 	bic.w	r3, r3, #32
 800bf0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	689b      	ldr	r3, [r3, #8]
 800bf10:	011b      	lsls	r3, r3, #4
 800bf12:	697a      	ldr	r2, [r7, #20]
 800bf14:	4313      	orrs	r3, r2
 800bf16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	4a29      	ldr	r2, [pc, #164]	; (800bfc0 <TIM_OC2_SetConfig+0x100>)
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d003      	beq.n	800bf28 <TIM_OC2_SetConfig+0x68>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	4a28      	ldr	r2, [pc, #160]	; (800bfc4 <TIM_OC2_SetConfig+0x104>)
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d10d      	bne.n	800bf44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	68db      	ldr	r3, [r3, #12]
 800bf34:	011b      	lsls	r3, r3, #4
 800bf36:	697a      	ldr	r2, [r7, #20]
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	4a1e      	ldr	r2, [pc, #120]	; (800bfc0 <TIM_OC2_SetConfig+0x100>)
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	d00f      	beq.n	800bf6c <TIM_OC2_SetConfig+0xac>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	4a1d      	ldr	r2, [pc, #116]	; (800bfc4 <TIM_OC2_SetConfig+0x104>)
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d00b      	beq.n	800bf6c <TIM_OC2_SetConfig+0xac>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	4a1c      	ldr	r2, [pc, #112]	; (800bfc8 <TIM_OC2_SetConfig+0x108>)
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	d007      	beq.n	800bf6c <TIM_OC2_SetConfig+0xac>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	4a1b      	ldr	r2, [pc, #108]	; (800bfcc <TIM_OC2_SetConfig+0x10c>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d003      	beq.n	800bf6c <TIM_OC2_SetConfig+0xac>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	4a1a      	ldr	r2, [pc, #104]	; (800bfd0 <TIM_OC2_SetConfig+0x110>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d113      	bne.n	800bf94 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bf6c:	693b      	ldr	r3, [r7, #16]
 800bf6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bf72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bf7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	695b      	ldr	r3, [r3, #20]
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	693a      	ldr	r2, [r7, #16]
 800bf84:	4313      	orrs	r3, r2
 800bf86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	699b      	ldr	r3, [r3, #24]
 800bf8c:	009b      	lsls	r3, r3, #2
 800bf8e:	693a      	ldr	r2, [r7, #16]
 800bf90:	4313      	orrs	r3, r2
 800bf92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	693a      	ldr	r2, [r7, #16]
 800bf98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	68fa      	ldr	r2, [r7, #12]
 800bf9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	685a      	ldr	r2, [r3, #4]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	697a      	ldr	r2, [r7, #20]
 800bfac:	621a      	str	r2, [r3, #32]
}
 800bfae:	bf00      	nop
 800bfb0:	371c      	adds	r7, #28
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr
 800bfba:	bf00      	nop
 800bfbc:	feff8fff 	.word	0xfeff8fff
 800bfc0:	40010000 	.word	0x40010000
 800bfc4:	40010400 	.word	0x40010400
 800bfc8:	40014000 	.word	0x40014000
 800bfcc:	40014400 	.word	0x40014400
 800bfd0:	40014800 	.word	0x40014800

0800bfd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b087      	sub	sp, #28
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6a1b      	ldr	r3, [r3, #32]
 800bfe2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6a1b      	ldr	r3, [r3, #32]
 800bfee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	69db      	ldr	r3, [r3, #28]
 800bffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f023 0303 	bic.w	r3, r3, #3
 800c00a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	68fa      	ldr	r2, [r7, #12]
 800c012:	4313      	orrs	r3, r2
 800c014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c01c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	689b      	ldr	r3, [r3, #8]
 800c022:	021b      	lsls	r3, r3, #8
 800c024:	697a      	ldr	r2, [r7, #20]
 800c026:	4313      	orrs	r3, r2
 800c028:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	4a27      	ldr	r2, [pc, #156]	; (800c0cc <TIM_OC3_SetConfig+0xf8>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d003      	beq.n	800c03a <TIM_OC3_SetConfig+0x66>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	4a26      	ldr	r2, [pc, #152]	; (800c0d0 <TIM_OC3_SetConfig+0xfc>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d10d      	bne.n	800c056 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c040:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	68db      	ldr	r3, [r3, #12]
 800c046:	021b      	lsls	r3, r3, #8
 800c048:	697a      	ldr	r2, [r7, #20]
 800c04a:	4313      	orrs	r3, r2
 800c04c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	4a1c      	ldr	r2, [pc, #112]	; (800c0cc <TIM_OC3_SetConfig+0xf8>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d00f      	beq.n	800c07e <TIM_OC3_SetConfig+0xaa>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	4a1b      	ldr	r2, [pc, #108]	; (800c0d0 <TIM_OC3_SetConfig+0xfc>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d00b      	beq.n	800c07e <TIM_OC3_SetConfig+0xaa>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	4a1a      	ldr	r2, [pc, #104]	; (800c0d4 <TIM_OC3_SetConfig+0x100>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d007      	beq.n	800c07e <TIM_OC3_SetConfig+0xaa>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	4a19      	ldr	r2, [pc, #100]	; (800c0d8 <TIM_OC3_SetConfig+0x104>)
 800c072:	4293      	cmp	r3, r2
 800c074:	d003      	beq.n	800c07e <TIM_OC3_SetConfig+0xaa>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	4a18      	ldr	r2, [pc, #96]	; (800c0dc <TIM_OC3_SetConfig+0x108>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d113      	bne.n	800c0a6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c084:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c08c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	695b      	ldr	r3, [r3, #20]
 800c092:	011b      	lsls	r3, r3, #4
 800c094:	693a      	ldr	r2, [r7, #16]
 800c096:	4313      	orrs	r3, r2
 800c098:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	699b      	ldr	r3, [r3, #24]
 800c09e:	011b      	lsls	r3, r3, #4
 800c0a0:	693a      	ldr	r2, [r7, #16]
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	693a      	ldr	r2, [r7, #16]
 800c0aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	68fa      	ldr	r2, [r7, #12]
 800c0b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	685a      	ldr	r2, [r3, #4]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	697a      	ldr	r2, [r7, #20]
 800c0be:	621a      	str	r2, [r3, #32]
}
 800c0c0:	bf00      	nop
 800c0c2:	371c      	adds	r7, #28
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr
 800c0cc:	40010000 	.word	0x40010000
 800c0d0:	40010400 	.word	0x40010400
 800c0d4:	40014000 	.word	0x40014000
 800c0d8:	40014400 	.word	0x40014400
 800c0dc:	40014800 	.word	0x40014800

0800c0e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b087      	sub	sp, #28
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6a1b      	ldr	r3, [r3, #32]
 800c0ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6a1b      	ldr	r3, [r3, #32]
 800c0fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	69db      	ldr	r3, [r3, #28]
 800c106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c10e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	021b      	lsls	r3, r3, #8
 800c11e:	68fa      	ldr	r2, [r7, #12]
 800c120:	4313      	orrs	r3, r2
 800c122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c12a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	689b      	ldr	r3, [r3, #8]
 800c130:	031b      	lsls	r3, r3, #12
 800c132:	693a      	ldr	r2, [r7, #16]
 800c134:	4313      	orrs	r3, r2
 800c136:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	4a18      	ldr	r2, [pc, #96]	; (800c19c <TIM_OC4_SetConfig+0xbc>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d00f      	beq.n	800c160 <TIM_OC4_SetConfig+0x80>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	4a17      	ldr	r2, [pc, #92]	; (800c1a0 <TIM_OC4_SetConfig+0xc0>)
 800c144:	4293      	cmp	r3, r2
 800c146:	d00b      	beq.n	800c160 <TIM_OC4_SetConfig+0x80>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	4a16      	ldr	r2, [pc, #88]	; (800c1a4 <TIM_OC4_SetConfig+0xc4>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d007      	beq.n	800c160 <TIM_OC4_SetConfig+0x80>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	4a15      	ldr	r2, [pc, #84]	; (800c1a8 <TIM_OC4_SetConfig+0xc8>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d003      	beq.n	800c160 <TIM_OC4_SetConfig+0x80>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	4a14      	ldr	r2, [pc, #80]	; (800c1ac <TIM_OC4_SetConfig+0xcc>)
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d109      	bne.n	800c174 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c166:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	695b      	ldr	r3, [r3, #20]
 800c16c:	019b      	lsls	r3, r3, #6
 800c16e:	697a      	ldr	r2, [r7, #20]
 800c170:	4313      	orrs	r3, r2
 800c172:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	697a      	ldr	r2, [r7, #20]
 800c178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	68fa      	ldr	r2, [r7, #12]
 800c17e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	685a      	ldr	r2, [r3, #4]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	693a      	ldr	r2, [r7, #16]
 800c18c:	621a      	str	r2, [r3, #32]
}
 800c18e:	bf00      	nop
 800c190:	371c      	adds	r7, #28
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr
 800c19a:	bf00      	nop
 800c19c:	40010000 	.word	0x40010000
 800c1a0:	40010400 	.word	0x40010400
 800c1a4:	40014000 	.word	0x40014000
 800c1a8:	40014400 	.word	0x40014400
 800c1ac:	40014800 	.word	0x40014800

0800c1b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b087      	sub	sp, #28
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6a1b      	ldr	r3, [r3, #32]
 800c1be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6a1b      	ldr	r3, [r3, #32]
 800c1ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	68fa      	ldr	r2, [r7, #12]
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c1f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	689b      	ldr	r3, [r3, #8]
 800c1f6:	041b      	lsls	r3, r3, #16
 800c1f8:	693a      	ldr	r2, [r7, #16]
 800c1fa:	4313      	orrs	r3, r2
 800c1fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	4a17      	ldr	r2, [pc, #92]	; (800c260 <TIM_OC5_SetConfig+0xb0>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d00f      	beq.n	800c226 <TIM_OC5_SetConfig+0x76>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	4a16      	ldr	r2, [pc, #88]	; (800c264 <TIM_OC5_SetConfig+0xb4>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d00b      	beq.n	800c226 <TIM_OC5_SetConfig+0x76>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	4a15      	ldr	r2, [pc, #84]	; (800c268 <TIM_OC5_SetConfig+0xb8>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d007      	beq.n	800c226 <TIM_OC5_SetConfig+0x76>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	4a14      	ldr	r2, [pc, #80]	; (800c26c <TIM_OC5_SetConfig+0xbc>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d003      	beq.n	800c226 <TIM_OC5_SetConfig+0x76>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	4a13      	ldr	r2, [pc, #76]	; (800c270 <TIM_OC5_SetConfig+0xc0>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d109      	bne.n	800c23a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c22c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	695b      	ldr	r3, [r3, #20]
 800c232:	021b      	lsls	r3, r3, #8
 800c234:	697a      	ldr	r2, [r7, #20]
 800c236:	4313      	orrs	r3, r2
 800c238:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	697a      	ldr	r2, [r7, #20]
 800c23e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	68fa      	ldr	r2, [r7, #12]
 800c244:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	685a      	ldr	r2, [r3, #4]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	693a      	ldr	r2, [r7, #16]
 800c252:	621a      	str	r2, [r3, #32]
}
 800c254:	bf00      	nop
 800c256:	371c      	adds	r7, #28
 800c258:	46bd      	mov	sp, r7
 800c25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25e:	4770      	bx	lr
 800c260:	40010000 	.word	0x40010000
 800c264:	40010400 	.word	0x40010400
 800c268:	40014000 	.word	0x40014000
 800c26c:	40014400 	.word	0x40014400
 800c270:	40014800 	.word	0x40014800

0800c274 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c274:	b480      	push	{r7}
 800c276:	b087      	sub	sp, #28
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
 800c27c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6a1b      	ldr	r3, [r3, #32]
 800c282:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6a1b      	ldr	r3, [r3, #32]
 800c28e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	685b      	ldr	r3, [r3, #4]
 800c294:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c29a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c2a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	021b      	lsls	r3, r3, #8
 800c2aa:	68fa      	ldr	r2, [r7, #12]
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c2b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	689b      	ldr	r3, [r3, #8]
 800c2bc:	051b      	lsls	r3, r3, #20
 800c2be:	693a      	ldr	r2, [r7, #16]
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	4a18      	ldr	r2, [pc, #96]	; (800c328 <TIM_OC6_SetConfig+0xb4>)
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	d00f      	beq.n	800c2ec <TIM_OC6_SetConfig+0x78>
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	4a17      	ldr	r2, [pc, #92]	; (800c32c <TIM_OC6_SetConfig+0xb8>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d00b      	beq.n	800c2ec <TIM_OC6_SetConfig+0x78>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	4a16      	ldr	r2, [pc, #88]	; (800c330 <TIM_OC6_SetConfig+0xbc>)
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d007      	beq.n	800c2ec <TIM_OC6_SetConfig+0x78>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	4a15      	ldr	r2, [pc, #84]	; (800c334 <TIM_OC6_SetConfig+0xc0>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d003      	beq.n	800c2ec <TIM_OC6_SetConfig+0x78>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	4a14      	ldr	r2, [pc, #80]	; (800c338 <TIM_OC6_SetConfig+0xc4>)
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	d109      	bne.n	800c300 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c2f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	695b      	ldr	r3, [r3, #20]
 800c2f8:	029b      	lsls	r3, r3, #10
 800c2fa:	697a      	ldr	r2, [r7, #20]
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	697a      	ldr	r2, [r7, #20]
 800c304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	68fa      	ldr	r2, [r7, #12]
 800c30a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	685a      	ldr	r2, [r3, #4]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	693a      	ldr	r2, [r7, #16]
 800c318:	621a      	str	r2, [r3, #32]
}
 800c31a:	bf00      	nop
 800c31c:	371c      	adds	r7, #28
 800c31e:	46bd      	mov	sp, r7
 800c320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c324:	4770      	bx	lr
 800c326:	bf00      	nop
 800c328:	40010000 	.word	0x40010000
 800c32c:	40010400 	.word	0x40010400
 800c330:	40014000 	.word	0x40014000
 800c334:	40014400 	.word	0x40014400
 800c338:	40014800 	.word	0x40014800

0800c33c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b087      	sub	sp, #28
 800c340:	af00      	add	r7, sp, #0
 800c342:	60f8      	str	r0, [r7, #12]
 800c344:	60b9      	str	r1, [r7, #8]
 800c346:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	f003 031f 	and.w	r3, r3, #31
 800c34e:	2201      	movs	r2, #1
 800c350:	fa02 f303 	lsl.w	r3, r2, r3
 800c354:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	6a1a      	ldr	r2, [r3, #32]
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	43db      	mvns	r3, r3
 800c35e:	401a      	ands	r2, r3
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	6a1a      	ldr	r2, [r3, #32]
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	f003 031f 	and.w	r3, r3, #31
 800c36e:	6879      	ldr	r1, [r7, #4]
 800c370:	fa01 f303 	lsl.w	r3, r1, r3
 800c374:	431a      	orrs	r2, r3
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	621a      	str	r2, [r3, #32]
}
 800c37a:	bf00      	nop
 800c37c:	371c      	adds	r7, #28
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr
	...

0800c388 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c388:	b480      	push	{r7}
 800c38a:	b085      	sub	sp, #20
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c398:	2b01      	cmp	r3, #1
 800c39a:	d101      	bne.n	800c3a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c39c:	2302      	movs	r3, #2
 800c39e:	e068      	b.n	800c472 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2201      	movs	r2, #1
 800c3a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2202      	movs	r2, #2
 800c3ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	689b      	ldr	r3, [r3, #8]
 800c3be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4a2e      	ldr	r2, [pc, #184]	; (800c480 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d004      	beq.n	800c3d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	4a2d      	ldr	r2, [pc, #180]	; (800c484 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d108      	bne.n	800c3e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c3da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	685b      	ldr	r3, [r3, #4]
 800c3e0:	68fa      	ldr	r2, [r7, #12]
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	68fa      	ldr	r2, [r7, #12]
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	68fa      	ldr	r2, [r7, #12]
 800c3fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4a1e      	ldr	r2, [pc, #120]	; (800c480 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c406:	4293      	cmp	r3, r2
 800c408:	d01d      	beq.n	800c446 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c412:	d018      	beq.n	800c446 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4a1b      	ldr	r2, [pc, #108]	; (800c488 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d013      	beq.n	800c446 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	4a1a      	ldr	r2, [pc, #104]	; (800c48c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d00e      	beq.n	800c446 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a18      	ldr	r2, [pc, #96]	; (800c490 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d009      	beq.n	800c446 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	4a13      	ldr	r2, [pc, #76]	; (800c484 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	d004      	beq.n	800c446 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4a14      	ldr	r2, [pc, #80]	; (800c494 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c442:	4293      	cmp	r3, r2
 800c444:	d10c      	bne.n	800c460 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c44c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	689b      	ldr	r3, [r3, #8]
 800c452:	68ba      	ldr	r2, [r7, #8]
 800c454:	4313      	orrs	r3, r2
 800c456:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	68ba      	ldr	r2, [r7, #8]
 800c45e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2201      	movs	r2, #1
 800c464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2200      	movs	r2, #0
 800c46c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c470:	2300      	movs	r3, #0
}
 800c472:	4618      	mov	r0, r3
 800c474:	3714      	adds	r7, #20
 800c476:	46bd      	mov	sp, r7
 800c478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47c:	4770      	bx	lr
 800c47e:	bf00      	nop
 800c480:	40010000 	.word	0x40010000
 800c484:	40010400 	.word	0x40010400
 800c488:	40000400 	.word	0x40000400
 800c48c:	40000800 	.word	0x40000800
 800c490:	40000c00 	.word	0x40000c00
 800c494:	40001800 	.word	0x40001800

0800c498 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c498:	b480      	push	{r7}
 800c49a:	b083      	sub	sp, #12
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c4a0:	bf00      	nop
 800c4a2:	370c      	adds	r7, #12
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4aa:	4770      	bx	lr

0800c4ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b083      	sub	sp, #12
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c4b4:	bf00      	nop
 800c4b6:	370c      	adds	r7, #12
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr

0800c4c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b083      	sub	sp, #12
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c4c8:	bf00      	nop
 800c4ca:	370c      	adds	r7, #12
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr

0800c4d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b082      	sub	sp, #8
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d101      	bne.n	800c4e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	e042      	b.n	800c56c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d106      	bne.n	800c4fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f7f5 fe67 	bl	80021cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2224      	movs	r2, #36	; 0x24
 800c502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	681a      	ldr	r2, [r3, #0]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f022 0201 	bic.w	r2, r2, #1
 800c514:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f000 f8c2 	bl	800c6a0 <UART_SetConfig>
 800c51c:	4603      	mov	r3, r0
 800c51e:	2b01      	cmp	r3, #1
 800c520:	d101      	bne.n	800c526 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c522:	2301      	movs	r3, #1
 800c524:	e022      	b.n	800c56c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d002      	beq.n	800c534 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f000 fe16 	bl	800d160 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	685a      	ldr	r2, [r3, #4]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c542:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	689a      	ldr	r2, [r3, #8]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c552:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	681a      	ldr	r2, [r3, #0]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f042 0201 	orr.w	r2, r2, #1
 800c562:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f000 fe9d 	bl	800d2a4 <UART_CheckIdleState>
 800c56a:	4603      	mov	r3, r0
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3708      	adds	r7, #8
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}

0800c574 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b08a      	sub	sp, #40	; 0x28
 800c578:	af02      	add	r7, sp, #8
 800c57a:	60f8      	str	r0, [r7, #12]
 800c57c:	60b9      	str	r1, [r7, #8]
 800c57e:	603b      	str	r3, [r7, #0]
 800c580:	4613      	mov	r3, r2
 800c582:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c58a:	2b20      	cmp	r3, #32
 800c58c:	f040 8083 	bne.w	800c696 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d002      	beq.n	800c59c <HAL_UART_Transmit+0x28>
 800c596:	88fb      	ldrh	r3, [r7, #6]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d101      	bne.n	800c5a0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c59c:	2301      	movs	r3, #1
 800c59e:	e07b      	b.n	800c698 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c5a6:	2b01      	cmp	r3, #1
 800c5a8:	d101      	bne.n	800c5ae <HAL_UART_Transmit+0x3a>
 800c5aa:	2302      	movs	r3, #2
 800c5ac:	e074      	b.n	800c698 <HAL_UART_Transmit+0x124>
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2221      	movs	r2, #33	; 0x21
 800c5c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c5c6:	f7f6 f8c1 	bl	800274c <HAL_GetTick>
 800c5ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	88fa      	ldrh	r2, [r7, #6]
 800c5d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	88fa      	ldrh	r2, [r7, #6]
 800c5d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	689b      	ldr	r3, [r3, #8]
 800c5e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5e4:	d108      	bne.n	800c5f8 <HAL_UART_Transmit+0x84>
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	691b      	ldr	r3, [r3, #16]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d104      	bne.n	800c5f8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	61bb      	str	r3, [r7, #24]
 800c5f6:	e003      	b.n	800c600 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	2200      	movs	r2, #0
 800c604:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800c608:	e02c      	b.n	800c664 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	9300      	str	r3, [sp, #0]
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	2200      	movs	r2, #0
 800c612:	2180      	movs	r1, #128	; 0x80
 800c614:	68f8      	ldr	r0, [r7, #12]
 800c616:	f000 fe90 	bl	800d33a <UART_WaitOnFlagUntilTimeout>
 800c61a:	4603      	mov	r3, r0
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d001      	beq.n	800c624 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c620:	2303      	movs	r3, #3
 800c622:	e039      	b.n	800c698 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c624:	69fb      	ldr	r3, [r7, #28]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d10b      	bne.n	800c642 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c62a:	69bb      	ldr	r3, [r7, #24]
 800c62c:	881b      	ldrh	r3, [r3, #0]
 800c62e:	461a      	mov	r2, r3
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c638:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c63a:	69bb      	ldr	r3, [r7, #24]
 800c63c:	3302      	adds	r3, #2
 800c63e:	61bb      	str	r3, [r7, #24]
 800c640:	e007      	b.n	800c652 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c642:	69fb      	ldr	r3, [r7, #28]
 800c644:	781a      	ldrb	r2, [r3, #0]
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c64c:	69fb      	ldr	r3, [r7, #28]
 800c64e:	3301      	adds	r3, #1
 800c650:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c658:	b29b      	uxth	r3, r3
 800c65a:	3b01      	subs	r3, #1
 800c65c:	b29a      	uxth	r2, r3
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c66a:	b29b      	uxth	r3, r3
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d1cc      	bne.n	800c60a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	9300      	str	r3, [sp, #0]
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	2200      	movs	r2, #0
 800c678:	2140      	movs	r1, #64	; 0x40
 800c67a:	68f8      	ldr	r0, [r7, #12]
 800c67c:	f000 fe5d 	bl	800d33a <UART_WaitOnFlagUntilTimeout>
 800c680:	4603      	mov	r3, r0
 800c682:	2b00      	cmp	r3, #0
 800c684:	d001      	beq.n	800c68a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c686:	2303      	movs	r3, #3
 800c688:	e006      	b.n	800c698 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2220      	movs	r2, #32
 800c68e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c692:	2300      	movs	r3, #0
 800c694:	e000      	b.n	800c698 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c696:	2302      	movs	r3, #2
  }
}
 800c698:	4618      	mov	r0, r3
 800c69a:	3720      	adds	r7, #32
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}

0800c6a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c6a0:	b5b0      	push	{r4, r5, r7, lr}
 800c6a2:	b08e      	sub	sp, #56	; 0x38
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	689a      	ldr	r2, [r3, #8]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	691b      	ldr	r3, [r3, #16]
 800c6b6:	431a      	orrs	r2, r3
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	695b      	ldr	r3, [r3, #20]
 800c6bc:	431a      	orrs	r2, r3
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	69db      	ldr	r3, [r3, #28]
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	681a      	ldr	r2, [r3, #0]
 800c6cc:	4bbf      	ldr	r3, [pc, #764]	; (800c9cc <UART_SetConfig+0x32c>)
 800c6ce:	4013      	ands	r3, r2
 800c6d0:	687a      	ldr	r2, [r7, #4]
 800c6d2:	6812      	ldr	r2, [r2, #0]
 800c6d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c6d6:	430b      	orrs	r3, r1
 800c6d8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	68da      	ldr	r2, [r3, #12]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	430a      	orrs	r2, r1
 800c6ee:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	699b      	ldr	r3, [r3, #24]
 800c6f4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	4ab5      	ldr	r2, [pc, #724]	; (800c9d0 <UART_SetConfig+0x330>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d004      	beq.n	800c70a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6a1b      	ldr	r3, [r3, #32]
 800c704:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c706:	4313      	orrs	r3, r2
 800c708:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	689a      	ldr	r2, [r3, #8]
 800c710:	4bb0      	ldr	r3, [pc, #704]	; (800c9d4 <UART_SetConfig+0x334>)
 800c712:	4013      	ands	r3, r2
 800c714:	687a      	ldr	r2, [r7, #4]
 800c716:	6812      	ldr	r2, [r2, #0]
 800c718:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c71a:	430b      	orrs	r3, r1
 800c71c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c724:	f023 010f 	bic.w	r1, r3, #15
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	430a      	orrs	r2, r1
 800c732:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	4aa7      	ldr	r2, [pc, #668]	; (800c9d8 <UART_SetConfig+0x338>)
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d176      	bne.n	800c82c <UART_SetConfig+0x18c>
 800c73e:	4ba7      	ldr	r3, [pc, #668]	; (800c9dc <UART_SetConfig+0x33c>)
 800c740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c742:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c746:	2b28      	cmp	r3, #40	; 0x28
 800c748:	d86c      	bhi.n	800c824 <UART_SetConfig+0x184>
 800c74a:	a201      	add	r2, pc, #4	; (adr r2, 800c750 <UART_SetConfig+0xb0>)
 800c74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c750:	0800c7f5 	.word	0x0800c7f5
 800c754:	0800c825 	.word	0x0800c825
 800c758:	0800c825 	.word	0x0800c825
 800c75c:	0800c825 	.word	0x0800c825
 800c760:	0800c825 	.word	0x0800c825
 800c764:	0800c825 	.word	0x0800c825
 800c768:	0800c825 	.word	0x0800c825
 800c76c:	0800c825 	.word	0x0800c825
 800c770:	0800c7fd 	.word	0x0800c7fd
 800c774:	0800c825 	.word	0x0800c825
 800c778:	0800c825 	.word	0x0800c825
 800c77c:	0800c825 	.word	0x0800c825
 800c780:	0800c825 	.word	0x0800c825
 800c784:	0800c825 	.word	0x0800c825
 800c788:	0800c825 	.word	0x0800c825
 800c78c:	0800c825 	.word	0x0800c825
 800c790:	0800c805 	.word	0x0800c805
 800c794:	0800c825 	.word	0x0800c825
 800c798:	0800c825 	.word	0x0800c825
 800c79c:	0800c825 	.word	0x0800c825
 800c7a0:	0800c825 	.word	0x0800c825
 800c7a4:	0800c825 	.word	0x0800c825
 800c7a8:	0800c825 	.word	0x0800c825
 800c7ac:	0800c825 	.word	0x0800c825
 800c7b0:	0800c80d 	.word	0x0800c80d
 800c7b4:	0800c825 	.word	0x0800c825
 800c7b8:	0800c825 	.word	0x0800c825
 800c7bc:	0800c825 	.word	0x0800c825
 800c7c0:	0800c825 	.word	0x0800c825
 800c7c4:	0800c825 	.word	0x0800c825
 800c7c8:	0800c825 	.word	0x0800c825
 800c7cc:	0800c825 	.word	0x0800c825
 800c7d0:	0800c815 	.word	0x0800c815
 800c7d4:	0800c825 	.word	0x0800c825
 800c7d8:	0800c825 	.word	0x0800c825
 800c7dc:	0800c825 	.word	0x0800c825
 800c7e0:	0800c825 	.word	0x0800c825
 800c7e4:	0800c825 	.word	0x0800c825
 800c7e8:	0800c825 	.word	0x0800c825
 800c7ec:	0800c825 	.word	0x0800c825
 800c7f0:	0800c81d 	.word	0x0800c81d
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7fa:	e222      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c7fc:	2304      	movs	r3, #4
 800c7fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c802:	e21e      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c804:	2308      	movs	r3, #8
 800c806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c80a:	e21a      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c80c:	2310      	movs	r3, #16
 800c80e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c812:	e216      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c814:	2320      	movs	r3, #32
 800c816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c81a:	e212      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c81c:	2340      	movs	r3, #64	; 0x40
 800c81e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c822:	e20e      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c824:	2380      	movs	r3, #128	; 0x80
 800c826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c82a:	e20a      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a6b      	ldr	r2, [pc, #428]	; (800c9e0 <UART_SetConfig+0x340>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d130      	bne.n	800c898 <UART_SetConfig+0x1f8>
 800c836:	4b69      	ldr	r3, [pc, #420]	; (800c9dc <UART_SetConfig+0x33c>)
 800c838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c83a:	f003 0307 	and.w	r3, r3, #7
 800c83e:	2b05      	cmp	r3, #5
 800c840:	d826      	bhi.n	800c890 <UART_SetConfig+0x1f0>
 800c842:	a201      	add	r2, pc, #4	; (adr r2, 800c848 <UART_SetConfig+0x1a8>)
 800c844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c848:	0800c861 	.word	0x0800c861
 800c84c:	0800c869 	.word	0x0800c869
 800c850:	0800c871 	.word	0x0800c871
 800c854:	0800c879 	.word	0x0800c879
 800c858:	0800c881 	.word	0x0800c881
 800c85c:	0800c889 	.word	0x0800c889
 800c860:	2300      	movs	r3, #0
 800c862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c866:	e1ec      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c868:	2304      	movs	r3, #4
 800c86a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c86e:	e1e8      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c870:	2308      	movs	r3, #8
 800c872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c876:	e1e4      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c878:	2310      	movs	r3, #16
 800c87a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c87e:	e1e0      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c880:	2320      	movs	r3, #32
 800c882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c886:	e1dc      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c888:	2340      	movs	r3, #64	; 0x40
 800c88a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c88e:	e1d8      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c890:	2380      	movs	r3, #128	; 0x80
 800c892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c896:	e1d4      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	4a51      	ldr	r2, [pc, #324]	; (800c9e4 <UART_SetConfig+0x344>)
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d130      	bne.n	800c904 <UART_SetConfig+0x264>
 800c8a2:	4b4e      	ldr	r3, [pc, #312]	; (800c9dc <UART_SetConfig+0x33c>)
 800c8a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8a6:	f003 0307 	and.w	r3, r3, #7
 800c8aa:	2b05      	cmp	r3, #5
 800c8ac:	d826      	bhi.n	800c8fc <UART_SetConfig+0x25c>
 800c8ae:	a201      	add	r2, pc, #4	; (adr r2, 800c8b4 <UART_SetConfig+0x214>)
 800c8b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8b4:	0800c8cd 	.word	0x0800c8cd
 800c8b8:	0800c8d5 	.word	0x0800c8d5
 800c8bc:	0800c8dd 	.word	0x0800c8dd
 800c8c0:	0800c8e5 	.word	0x0800c8e5
 800c8c4:	0800c8ed 	.word	0x0800c8ed
 800c8c8:	0800c8f5 	.word	0x0800c8f5
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8d2:	e1b6      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c8d4:	2304      	movs	r3, #4
 800c8d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8da:	e1b2      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c8dc:	2308      	movs	r3, #8
 800c8de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8e2:	e1ae      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c8e4:	2310      	movs	r3, #16
 800c8e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8ea:	e1aa      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c8ec:	2320      	movs	r3, #32
 800c8ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8f2:	e1a6      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c8f4:	2340      	movs	r3, #64	; 0x40
 800c8f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8fa:	e1a2      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c8fc:	2380      	movs	r3, #128	; 0x80
 800c8fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c902:	e19e      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4a37      	ldr	r2, [pc, #220]	; (800c9e8 <UART_SetConfig+0x348>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d130      	bne.n	800c970 <UART_SetConfig+0x2d0>
 800c90e:	4b33      	ldr	r3, [pc, #204]	; (800c9dc <UART_SetConfig+0x33c>)
 800c910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c912:	f003 0307 	and.w	r3, r3, #7
 800c916:	2b05      	cmp	r3, #5
 800c918:	d826      	bhi.n	800c968 <UART_SetConfig+0x2c8>
 800c91a:	a201      	add	r2, pc, #4	; (adr r2, 800c920 <UART_SetConfig+0x280>)
 800c91c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c920:	0800c939 	.word	0x0800c939
 800c924:	0800c941 	.word	0x0800c941
 800c928:	0800c949 	.word	0x0800c949
 800c92c:	0800c951 	.word	0x0800c951
 800c930:	0800c959 	.word	0x0800c959
 800c934:	0800c961 	.word	0x0800c961
 800c938:	2300      	movs	r3, #0
 800c93a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c93e:	e180      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c940:	2304      	movs	r3, #4
 800c942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c946:	e17c      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c948:	2308      	movs	r3, #8
 800c94a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c94e:	e178      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c950:	2310      	movs	r3, #16
 800c952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c956:	e174      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c958:	2320      	movs	r3, #32
 800c95a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c95e:	e170      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c960:	2340      	movs	r3, #64	; 0x40
 800c962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c966:	e16c      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c968:	2380      	movs	r3, #128	; 0x80
 800c96a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c96e:	e168      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4a1d      	ldr	r2, [pc, #116]	; (800c9ec <UART_SetConfig+0x34c>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d142      	bne.n	800ca00 <UART_SetConfig+0x360>
 800c97a:	4b18      	ldr	r3, [pc, #96]	; (800c9dc <UART_SetConfig+0x33c>)
 800c97c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c97e:	f003 0307 	and.w	r3, r3, #7
 800c982:	2b05      	cmp	r3, #5
 800c984:	d838      	bhi.n	800c9f8 <UART_SetConfig+0x358>
 800c986:	a201      	add	r2, pc, #4	; (adr r2, 800c98c <UART_SetConfig+0x2ec>)
 800c988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c98c:	0800c9a5 	.word	0x0800c9a5
 800c990:	0800c9ad 	.word	0x0800c9ad
 800c994:	0800c9b5 	.word	0x0800c9b5
 800c998:	0800c9bd 	.word	0x0800c9bd
 800c99c:	0800c9c5 	.word	0x0800c9c5
 800c9a0:	0800c9f1 	.word	0x0800c9f1
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9aa:	e14a      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c9ac:	2304      	movs	r3, #4
 800c9ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9b2:	e146      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c9b4:	2308      	movs	r3, #8
 800c9b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9ba:	e142      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c9bc:	2310      	movs	r3, #16
 800c9be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9c2:	e13e      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c9c4:	2320      	movs	r3, #32
 800c9c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9ca:	e13a      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c9cc:	cfff69f3 	.word	0xcfff69f3
 800c9d0:	58000c00 	.word	0x58000c00
 800c9d4:	11fff4ff 	.word	0x11fff4ff
 800c9d8:	40011000 	.word	0x40011000
 800c9dc:	58024400 	.word	0x58024400
 800c9e0:	40004400 	.word	0x40004400
 800c9e4:	40004800 	.word	0x40004800
 800c9e8:	40004c00 	.word	0x40004c00
 800c9ec:	40005000 	.word	0x40005000
 800c9f0:	2340      	movs	r3, #64	; 0x40
 800c9f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9f6:	e124      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800c9f8:	2380      	movs	r3, #128	; 0x80
 800c9fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9fe:	e120      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	4acc      	ldr	r2, [pc, #816]	; (800cd38 <UART_SetConfig+0x698>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d176      	bne.n	800caf8 <UART_SetConfig+0x458>
 800ca0a:	4bcc      	ldr	r3, [pc, #816]	; (800cd3c <UART_SetConfig+0x69c>)
 800ca0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ca12:	2b28      	cmp	r3, #40	; 0x28
 800ca14:	d86c      	bhi.n	800caf0 <UART_SetConfig+0x450>
 800ca16:	a201      	add	r2, pc, #4	; (adr r2, 800ca1c <UART_SetConfig+0x37c>)
 800ca18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca1c:	0800cac1 	.word	0x0800cac1
 800ca20:	0800caf1 	.word	0x0800caf1
 800ca24:	0800caf1 	.word	0x0800caf1
 800ca28:	0800caf1 	.word	0x0800caf1
 800ca2c:	0800caf1 	.word	0x0800caf1
 800ca30:	0800caf1 	.word	0x0800caf1
 800ca34:	0800caf1 	.word	0x0800caf1
 800ca38:	0800caf1 	.word	0x0800caf1
 800ca3c:	0800cac9 	.word	0x0800cac9
 800ca40:	0800caf1 	.word	0x0800caf1
 800ca44:	0800caf1 	.word	0x0800caf1
 800ca48:	0800caf1 	.word	0x0800caf1
 800ca4c:	0800caf1 	.word	0x0800caf1
 800ca50:	0800caf1 	.word	0x0800caf1
 800ca54:	0800caf1 	.word	0x0800caf1
 800ca58:	0800caf1 	.word	0x0800caf1
 800ca5c:	0800cad1 	.word	0x0800cad1
 800ca60:	0800caf1 	.word	0x0800caf1
 800ca64:	0800caf1 	.word	0x0800caf1
 800ca68:	0800caf1 	.word	0x0800caf1
 800ca6c:	0800caf1 	.word	0x0800caf1
 800ca70:	0800caf1 	.word	0x0800caf1
 800ca74:	0800caf1 	.word	0x0800caf1
 800ca78:	0800caf1 	.word	0x0800caf1
 800ca7c:	0800cad9 	.word	0x0800cad9
 800ca80:	0800caf1 	.word	0x0800caf1
 800ca84:	0800caf1 	.word	0x0800caf1
 800ca88:	0800caf1 	.word	0x0800caf1
 800ca8c:	0800caf1 	.word	0x0800caf1
 800ca90:	0800caf1 	.word	0x0800caf1
 800ca94:	0800caf1 	.word	0x0800caf1
 800ca98:	0800caf1 	.word	0x0800caf1
 800ca9c:	0800cae1 	.word	0x0800cae1
 800caa0:	0800caf1 	.word	0x0800caf1
 800caa4:	0800caf1 	.word	0x0800caf1
 800caa8:	0800caf1 	.word	0x0800caf1
 800caac:	0800caf1 	.word	0x0800caf1
 800cab0:	0800caf1 	.word	0x0800caf1
 800cab4:	0800caf1 	.word	0x0800caf1
 800cab8:	0800caf1 	.word	0x0800caf1
 800cabc:	0800cae9 	.word	0x0800cae9
 800cac0:	2301      	movs	r3, #1
 800cac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cac6:	e0bc      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800cac8:	2304      	movs	r3, #4
 800caca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cace:	e0b8      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800cad0:	2308      	movs	r3, #8
 800cad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cad6:	e0b4      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800cad8:	2310      	movs	r3, #16
 800cada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cade:	e0b0      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800cae0:	2320      	movs	r3, #32
 800cae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cae6:	e0ac      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800cae8:	2340      	movs	r3, #64	; 0x40
 800caea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caee:	e0a8      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800caf0:	2380      	movs	r3, #128	; 0x80
 800caf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caf6:	e0a4      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4a90      	ldr	r2, [pc, #576]	; (800cd40 <UART_SetConfig+0x6a0>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d130      	bne.n	800cb64 <UART_SetConfig+0x4c4>
 800cb02:	4b8e      	ldr	r3, [pc, #568]	; (800cd3c <UART_SetConfig+0x69c>)
 800cb04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb06:	f003 0307 	and.w	r3, r3, #7
 800cb0a:	2b05      	cmp	r3, #5
 800cb0c:	d826      	bhi.n	800cb5c <UART_SetConfig+0x4bc>
 800cb0e:	a201      	add	r2, pc, #4	; (adr r2, 800cb14 <UART_SetConfig+0x474>)
 800cb10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb14:	0800cb2d 	.word	0x0800cb2d
 800cb18:	0800cb35 	.word	0x0800cb35
 800cb1c:	0800cb3d 	.word	0x0800cb3d
 800cb20:	0800cb45 	.word	0x0800cb45
 800cb24:	0800cb4d 	.word	0x0800cb4d
 800cb28:	0800cb55 	.word	0x0800cb55
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb32:	e086      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800cb34:	2304      	movs	r3, #4
 800cb36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb3a:	e082      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800cb3c:	2308      	movs	r3, #8
 800cb3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb42:	e07e      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800cb44:	2310      	movs	r3, #16
 800cb46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb4a:	e07a      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800cb4c:	2320      	movs	r3, #32
 800cb4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb52:	e076      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800cb54:	2340      	movs	r3, #64	; 0x40
 800cb56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb5a:	e072      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800cb5c:	2380      	movs	r3, #128	; 0x80
 800cb5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb62:	e06e      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	4a76      	ldr	r2, [pc, #472]	; (800cd44 <UART_SetConfig+0x6a4>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d130      	bne.n	800cbd0 <UART_SetConfig+0x530>
 800cb6e:	4b73      	ldr	r3, [pc, #460]	; (800cd3c <UART_SetConfig+0x69c>)
 800cb70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb72:	f003 0307 	and.w	r3, r3, #7
 800cb76:	2b05      	cmp	r3, #5
 800cb78:	d826      	bhi.n	800cbc8 <UART_SetConfig+0x528>
 800cb7a:	a201      	add	r2, pc, #4	; (adr r2, 800cb80 <UART_SetConfig+0x4e0>)
 800cb7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb80:	0800cb99 	.word	0x0800cb99
 800cb84:	0800cba1 	.word	0x0800cba1
 800cb88:	0800cba9 	.word	0x0800cba9
 800cb8c:	0800cbb1 	.word	0x0800cbb1
 800cb90:	0800cbb9 	.word	0x0800cbb9
 800cb94:	0800cbc1 	.word	0x0800cbc1
 800cb98:	2300      	movs	r3, #0
 800cb9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb9e:	e050      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800cba0:	2304      	movs	r3, #4
 800cba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cba6:	e04c      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800cba8:	2308      	movs	r3, #8
 800cbaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbae:	e048      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800cbb0:	2310      	movs	r3, #16
 800cbb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbb6:	e044      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800cbb8:	2320      	movs	r3, #32
 800cbba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbbe:	e040      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800cbc0:	2340      	movs	r3, #64	; 0x40
 800cbc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbc6:	e03c      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800cbc8:	2380      	movs	r3, #128	; 0x80
 800cbca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbce:	e038      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	4a5c      	ldr	r2, [pc, #368]	; (800cd48 <UART_SetConfig+0x6a8>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d130      	bne.n	800cc3c <UART_SetConfig+0x59c>
 800cbda:	4b58      	ldr	r3, [pc, #352]	; (800cd3c <UART_SetConfig+0x69c>)
 800cbdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbde:	f003 0307 	and.w	r3, r3, #7
 800cbe2:	2b05      	cmp	r3, #5
 800cbe4:	d826      	bhi.n	800cc34 <UART_SetConfig+0x594>
 800cbe6:	a201      	add	r2, pc, #4	; (adr r2, 800cbec <UART_SetConfig+0x54c>)
 800cbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbec:	0800cc05 	.word	0x0800cc05
 800cbf0:	0800cc0d 	.word	0x0800cc0d
 800cbf4:	0800cc15 	.word	0x0800cc15
 800cbf8:	0800cc1d 	.word	0x0800cc1d
 800cbfc:	0800cc25 	.word	0x0800cc25
 800cc00:	0800cc2d 	.word	0x0800cc2d
 800cc04:	2302      	movs	r3, #2
 800cc06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc0a:	e01a      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800cc0c:	2304      	movs	r3, #4
 800cc0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc12:	e016      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800cc14:	2308      	movs	r3, #8
 800cc16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc1a:	e012      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800cc1c:	2310      	movs	r3, #16
 800cc1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc22:	e00e      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800cc24:	2320      	movs	r3, #32
 800cc26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc2a:	e00a      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800cc2c:	2340      	movs	r3, #64	; 0x40
 800cc2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc32:	e006      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800cc34:	2380      	movs	r3, #128	; 0x80
 800cc36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc3a:	e002      	b.n	800cc42 <UART_SetConfig+0x5a2>
 800cc3c:	2380      	movs	r3, #128	; 0x80
 800cc3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	4a40      	ldr	r2, [pc, #256]	; (800cd48 <UART_SetConfig+0x6a8>)
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	f040 80ef 	bne.w	800ce2c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cc4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cc52:	2b20      	cmp	r3, #32
 800cc54:	dc46      	bgt.n	800cce4 <UART_SetConfig+0x644>
 800cc56:	2b02      	cmp	r3, #2
 800cc58:	f2c0 8081 	blt.w	800cd5e <UART_SetConfig+0x6be>
 800cc5c:	3b02      	subs	r3, #2
 800cc5e:	2b1e      	cmp	r3, #30
 800cc60:	d87d      	bhi.n	800cd5e <UART_SetConfig+0x6be>
 800cc62:	a201      	add	r2, pc, #4	; (adr r2, 800cc68 <UART_SetConfig+0x5c8>)
 800cc64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc68:	0800cceb 	.word	0x0800cceb
 800cc6c:	0800cd5f 	.word	0x0800cd5f
 800cc70:	0800ccf3 	.word	0x0800ccf3
 800cc74:	0800cd5f 	.word	0x0800cd5f
 800cc78:	0800cd5f 	.word	0x0800cd5f
 800cc7c:	0800cd5f 	.word	0x0800cd5f
 800cc80:	0800cd03 	.word	0x0800cd03
 800cc84:	0800cd5f 	.word	0x0800cd5f
 800cc88:	0800cd5f 	.word	0x0800cd5f
 800cc8c:	0800cd5f 	.word	0x0800cd5f
 800cc90:	0800cd5f 	.word	0x0800cd5f
 800cc94:	0800cd5f 	.word	0x0800cd5f
 800cc98:	0800cd5f 	.word	0x0800cd5f
 800cc9c:	0800cd5f 	.word	0x0800cd5f
 800cca0:	0800cd13 	.word	0x0800cd13
 800cca4:	0800cd5f 	.word	0x0800cd5f
 800cca8:	0800cd5f 	.word	0x0800cd5f
 800ccac:	0800cd5f 	.word	0x0800cd5f
 800ccb0:	0800cd5f 	.word	0x0800cd5f
 800ccb4:	0800cd5f 	.word	0x0800cd5f
 800ccb8:	0800cd5f 	.word	0x0800cd5f
 800ccbc:	0800cd5f 	.word	0x0800cd5f
 800ccc0:	0800cd5f 	.word	0x0800cd5f
 800ccc4:	0800cd5f 	.word	0x0800cd5f
 800ccc8:	0800cd5f 	.word	0x0800cd5f
 800cccc:	0800cd5f 	.word	0x0800cd5f
 800ccd0:	0800cd5f 	.word	0x0800cd5f
 800ccd4:	0800cd5f 	.word	0x0800cd5f
 800ccd8:	0800cd5f 	.word	0x0800cd5f
 800ccdc:	0800cd5f 	.word	0x0800cd5f
 800cce0:	0800cd51 	.word	0x0800cd51
 800cce4:	2b40      	cmp	r3, #64	; 0x40
 800cce6:	d036      	beq.n	800cd56 <UART_SetConfig+0x6b6>
 800cce8:	e039      	b.n	800cd5e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ccea:	f7fd fc19 	bl	800a520 <HAL_RCCEx_GetD3PCLK1Freq>
 800ccee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ccf0:	e03b      	b.n	800cd6a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccf2:	f107 0314 	add.w	r3, r7, #20
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f7fd fc28 	bl	800a54c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ccfc:	69bb      	ldr	r3, [r7, #24]
 800ccfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cd00:	e033      	b.n	800cd6a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd02:	f107 0308 	add.w	r3, r7, #8
 800cd06:	4618      	mov	r0, r3
 800cd08:	f7fd fd74 	bl	800a7f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cd10:	e02b      	b.n	800cd6a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd12:	4b0a      	ldr	r3, [pc, #40]	; (800cd3c <UART_SetConfig+0x69c>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f003 0320 	and.w	r3, r3, #32
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d009      	beq.n	800cd32 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cd1e:	4b07      	ldr	r3, [pc, #28]	; (800cd3c <UART_SetConfig+0x69c>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	08db      	lsrs	r3, r3, #3
 800cd24:	f003 0303 	and.w	r3, r3, #3
 800cd28:	4a08      	ldr	r2, [pc, #32]	; (800cd4c <UART_SetConfig+0x6ac>)
 800cd2a:	fa22 f303 	lsr.w	r3, r2, r3
 800cd2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cd30:	e01b      	b.n	800cd6a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800cd32:	4b06      	ldr	r3, [pc, #24]	; (800cd4c <UART_SetConfig+0x6ac>)
 800cd34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cd36:	e018      	b.n	800cd6a <UART_SetConfig+0x6ca>
 800cd38:	40011400 	.word	0x40011400
 800cd3c:	58024400 	.word	0x58024400
 800cd40:	40007800 	.word	0x40007800
 800cd44:	40007c00 	.word	0x40007c00
 800cd48:	58000c00 	.word	0x58000c00
 800cd4c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cd50:	4bc4      	ldr	r3, [pc, #784]	; (800d064 <UART_SetConfig+0x9c4>)
 800cd52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cd54:	e009      	b.n	800cd6a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cd5c:	e005      	b.n	800cd6a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cd62:	2301      	movs	r3, #1
 800cd64:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cd68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cd6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	f000 81da 	beq.w	800d126 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd76:	4abc      	ldr	r2, [pc, #752]	; (800d068 <UART_SetConfig+0x9c8>)
 800cd78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd7c:	461a      	mov	r2, r3
 800cd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd80:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd84:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	685a      	ldr	r2, [r3, #4]
 800cd8a:	4613      	mov	r3, r2
 800cd8c:	005b      	lsls	r3, r3, #1
 800cd8e:	4413      	add	r3, r2
 800cd90:	6a3a      	ldr	r2, [r7, #32]
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d305      	bcc.n	800cda2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	685b      	ldr	r3, [r3, #4]
 800cd9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cd9c:	6a3a      	ldr	r2, [r7, #32]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d903      	bls.n	800cdaa <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800cda2:	2301      	movs	r3, #1
 800cda4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cda8:	e1bd      	b.n	800d126 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cdaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdac:	4618      	mov	r0, r3
 800cdae:	f04f 0100 	mov.w	r1, #0
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdb6:	4aac      	ldr	r2, [pc, #688]	; (800d068 <UART_SetConfig+0x9c8>)
 800cdb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cdbc:	b29a      	uxth	r2, r3
 800cdbe:	f04f 0300 	mov.w	r3, #0
 800cdc2:	f7f3 fae5 	bl	8000390 <__aeabi_uldivmod>
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	460b      	mov	r3, r1
 800cdca:	4610      	mov	r0, r2
 800cdcc:	4619      	mov	r1, r3
 800cdce:	f04f 0200 	mov.w	r2, #0
 800cdd2:	f04f 0300 	mov.w	r3, #0
 800cdd6:	020b      	lsls	r3, r1, #8
 800cdd8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cddc:	0202      	lsls	r2, r0, #8
 800cdde:	6879      	ldr	r1, [r7, #4]
 800cde0:	6849      	ldr	r1, [r1, #4]
 800cde2:	0849      	lsrs	r1, r1, #1
 800cde4:	4608      	mov	r0, r1
 800cde6:	f04f 0100 	mov.w	r1, #0
 800cdea:	1814      	adds	r4, r2, r0
 800cdec:	eb43 0501 	adc.w	r5, r3, r1
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	685b      	ldr	r3, [r3, #4]
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	f04f 0300 	mov.w	r3, #0
 800cdfa:	4620      	mov	r0, r4
 800cdfc:	4629      	mov	r1, r5
 800cdfe:	f7f3 fac7 	bl	8000390 <__aeabi_uldivmod>
 800ce02:	4602      	mov	r2, r0
 800ce04:	460b      	mov	r3, r1
 800ce06:	4613      	mov	r3, r2
 800ce08:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ce0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ce10:	d308      	bcc.n	800ce24 <UART_SetConfig+0x784>
 800ce12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce18:	d204      	bcs.n	800ce24 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce20:	60da      	str	r2, [r3, #12]
 800ce22:	e180      	b.n	800d126 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800ce24:	2301      	movs	r3, #1
 800ce26:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ce2a:	e17c      	b.n	800d126 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	69db      	ldr	r3, [r3, #28]
 800ce30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce34:	f040 80bf 	bne.w	800cfb6 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800ce38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ce3c:	2b20      	cmp	r3, #32
 800ce3e:	dc49      	bgt.n	800ced4 <UART_SetConfig+0x834>
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	db7c      	blt.n	800cf3e <UART_SetConfig+0x89e>
 800ce44:	2b20      	cmp	r3, #32
 800ce46:	d87a      	bhi.n	800cf3e <UART_SetConfig+0x89e>
 800ce48:	a201      	add	r2, pc, #4	; (adr r2, 800ce50 <UART_SetConfig+0x7b0>)
 800ce4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce4e:	bf00      	nop
 800ce50:	0800cedb 	.word	0x0800cedb
 800ce54:	0800cee3 	.word	0x0800cee3
 800ce58:	0800cf3f 	.word	0x0800cf3f
 800ce5c:	0800cf3f 	.word	0x0800cf3f
 800ce60:	0800ceeb 	.word	0x0800ceeb
 800ce64:	0800cf3f 	.word	0x0800cf3f
 800ce68:	0800cf3f 	.word	0x0800cf3f
 800ce6c:	0800cf3f 	.word	0x0800cf3f
 800ce70:	0800cefb 	.word	0x0800cefb
 800ce74:	0800cf3f 	.word	0x0800cf3f
 800ce78:	0800cf3f 	.word	0x0800cf3f
 800ce7c:	0800cf3f 	.word	0x0800cf3f
 800ce80:	0800cf3f 	.word	0x0800cf3f
 800ce84:	0800cf3f 	.word	0x0800cf3f
 800ce88:	0800cf3f 	.word	0x0800cf3f
 800ce8c:	0800cf3f 	.word	0x0800cf3f
 800ce90:	0800cf0b 	.word	0x0800cf0b
 800ce94:	0800cf3f 	.word	0x0800cf3f
 800ce98:	0800cf3f 	.word	0x0800cf3f
 800ce9c:	0800cf3f 	.word	0x0800cf3f
 800cea0:	0800cf3f 	.word	0x0800cf3f
 800cea4:	0800cf3f 	.word	0x0800cf3f
 800cea8:	0800cf3f 	.word	0x0800cf3f
 800ceac:	0800cf3f 	.word	0x0800cf3f
 800ceb0:	0800cf3f 	.word	0x0800cf3f
 800ceb4:	0800cf3f 	.word	0x0800cf3f
 800ceb8:	0800cf3f 	.word	0x0800cf3f
 800cebc:	0800cf3f 	.word	0x0800cf3f
 800cec0:	0800cf3f 	.word	0x0800cf3f
 800cec4:	0800cf3f 	.word	0x0800cf3f
 800cec8:	0800cf3f 	.word	0x0800cf3f
 800cecc:	0800cf3f 	.word	0x0800cf3f
 800ced0:	0800cf31 	.word	0x0800cf31
 800ced4:	2b40      	cmp	r3, #64	; 0x40
 800ced6:	d02e      	beq.n	800cf36 <UART_SetConfig+0x896>
 800ced8:	e031      	b.n	800cf3e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ceda:	f7fb fee3 	bl	8008ca4 <HAL_RCC_GetPCLK1Freq>
 800cede:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cee0:	e033      	b.n	800cf4a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cee2:	f7fb fef5 	bl	8008cd0 <HAL_RCC_GetPCLK2Freq>
 800cee6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cee8:	e02f      	b.n	800cf4a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ceea:	f107 0314 	add.w	r3, r7, #20
 800ceee:	4618      	mov	r0, r3
 800cef0:	f7fd fb2c 	bl	800a54c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cef4:	69bb      	ldr	r3, [r7, #24]
 800cef6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cef8:	e027      	b.n	800cf4a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cefa:	f107 0308 	add.w	r3, r7, #8
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7fd fc78 	bl	800a7f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cf08:	e01f      	b.n	800cf4a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf0a:	4b58      	ldr	r3, [pc, #352]	; (800d06c <UART_SetConfig+0x9cc>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f003 0320 	and.w	r3, r3, #32
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d009      	beq.n	800cf2a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cf16:	4b55      	ldr	r3, [pc, #340]	; (800d06c <UART_SetConfig+0x9cc>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	08db      	lsrs	r3, r3, #3
 800cf1c:	f003 0303 	and.w	r3, r3, #3
 800cf20:	4a53      	ldr	r2, [pc, #332]	; (800d070 <UART_SetConfig+0x9d0>)
 800cf22:	fa22 f303 	lsr.w	r3, r2, r3
 800cf26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cf28:	e00f      	b.n	800cf4a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800cf2a:	4b51      	ldr	r3, [pc, #324]	; (800d070 <UART_SetConfig+0x9d0>)
 800cf2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cf2e:	e00c      	b.n	800cf4a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cf30:	4b4c      	ldr	r3, [pc, #304]	; (800d064 <UART_SetConfig+0x9c4>)
 800cf32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cf34:	e009      	b.n	800cf4a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cf3c:	e005      	b.n	800cf4a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cf42:	2301      	movs	r3, #1
 800cf44:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cf48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cf4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	f000 80ea 	beq.w	800d126 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf56:	4a44      	ldr	r2, [pc, #272]	; (800d068 <UART_SetConfig+0x9c8>)
 800cf58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf5c:	461a      	mov	r2, r3
 800cf5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf60:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf64:	005a      	lsls	r2, r3, #1
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	685b      	ldr	r3, [r3, #4]
 800cf6a:	085b      	lsrs	r3, r3, #1
 800cf6c:	441a      	add	r2, r3
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	685b      	ldr	r3, [r3, #4]
 800cf72:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf76:	b29b      	uxth	r3, r3
 800cf78:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cf7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf7c:	2b0f      	cmp	r3, #15
 800cf7e:	d916      	bls.n	800cfae <UART_SetConfig+0x90e>
 800cf80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf86:	d212      	bcs.n	800cfae <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cf88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf8a:	b29b      	uxth	r3, r3
 800cf8c:	f023 030f 	bic.w	r3, r3, #15
 800cf90:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cf92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf94:	085b      	lsrs	r3, r3, #1
 800cf96:	b29b      	uxth	r3, r3
 800cf98:	f003 0307 	and.w	r3, r3, #7
 800cf9c:	b29a      	uxth	r2, r3
 800cf9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cfa0:	4313      	orrs	r3, r2
 800cfa2:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cfaa:	60da      	str	r2, [r3, #12]
 800cfac:	e0bb      	b.n	800d126 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800cfae:	2301      	movs	r3, #1
 800cfb0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cfb4:	e0b7      	b.n	800d126 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cfb6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cfba:	2b20      	cmp	r3, #32
 800cfbc:	dc4a      	bgt.n	800d054 <UART_SetConfig+0x9b4>
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	f2c0 8086 	blt.w	800d0d0 <UART_SetConfig+0xa30>
 800cfc4:	2b20      	cmp	r3, #32
 800cfc6:	f200 8083 	bhi.w	800d0d0 <UART_SetConfig+0xa30>
 800cfca:	a201      	add	r2, pc, #4	; (adr r2, 800cfd0 <UART_SetConfig+0x930>)
 800cfcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfd0:	0800d05b 	.word	0x0800d05b
 800cfd4:	0800d075 	.word	0x0800d075
 800cfd8:	0800d0d1 	.word	0x0800d0d1
 800cfdc:	0800d0d1 	.word	0x0800d0d1
 800cfe0:	0800d07d 	.word	0x0800d07d
 800cfe4:	0800d0d1 	.word	0x0800d0d1
 800cfe8:	0800d0d1 	.word	0x0800d0d1
 800cfec:	0800d0d1 	.word	0x0800d0d1
 800cff0:	0800d08d 	.word	0x0800d08d
 800cff4:	0800d0d1 	.word	0x0800d0d1
 800cff8:	0800d0d1 	.word	0x0800d0d1
 800cffc:	0800d0d1 	.word	0x0800d0d1
 800d000:	0800d0d1 	.word	0x0800d0d1
 800d004:	0800d0d1 	.word	0x0800d0d1
 800d008:	0800d0d1 	.word	0x0800d0d1
 800d00c:	0800d0d1 	.word	0x0800d0d1
 800d010:	0800d09d 	.word	0x0800d09d
 800d014:	0800d0d1 	.word	0x0800d0d1
 800d018:	0800d0d1 	.word	0x0800d0d1
 800d01c:	0800d0d1 	.word	0x0800d0d1
 800d020:	0800d0d1 	.word	0x0800d0d1
 800d024:	0800d0d1 	.word	0x0800d0d1
 800d028:	0800d0d1 	.word	0x0800d0d1
 800d02c:	0800d0d1 	.word	0x0800d0d1
 800d030:	0800d0d1 	.word	0x0800d0d1
 800d034:	0800d0d1 	.word	0x0800d0d1
 800d038:	0800d0d1 	.word	0x0800d0d1
 800d03c:	0800d0d1 	.word	0x0800d0d1
 800d040:	0800d0d1 	.word	0x0800d0d1
 800d044:	0800d0d1 	.word	0x0800d0d1
 800d048:	0800d0d1 	.word	0x0800d0d1
 800d04c:	0800d0d1 	.word	0x0800d0d1
 800d050:	0800d0c3 	.word	0x0800d0c3
 800d054:	2b40      	cmp	r3, #64	; 0x40
 800d056:	d037      	beq.n	800d0c8 <UART_SetConfig+0xa28>
 800d058:	e03a      	b.n	800d0d0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d05a:	f7fb fe23 	bl	8008ca4 <HAL_RCC_GetPCLK1Freq>
 800d05e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d060:	e03c      	b.n	800d0dc <UART_SetConfig+0xa3c>
 800d062:	bf00      	nop
 800d064:	003d0900 	.word	0x003d0900
 800d068:	08013da4 	.word	0x08013da4
 800d06c:	58024400 	.word	0x58024400
 800d070:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d074:	f7fb fe2c 	bl	8008cd0 <HAL_RCC_GetPCLK2Freq>
 800d078:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d07a:	e02f      	b.n	800d0dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d07c:	f107 0314 	add.w	r3, r7, #20
 800d080:	4618      	mov	r0, r3
 800d082:	f7fd fa63 	bl	800a54c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d086:	69bb      	ldr	r3, [r7, #24]
 800d088:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d08a:	e027      	b.n	800d0dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d08c:	f107 0308 	add.w	r3, r7, #8
 800d090:	4618      	mov	r0, r3
 800d092:	f7fd fbaf 	bl	800a7f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d09a:	e01f      	b.n	800d0dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d09c:	4b2c      	ldr	r3, [pc, #176]	; (800d150 <UART_SetConfig+0xab0>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	f003 0320 	and.w	r3, r3, #32
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d009      	beq.n	800d0bc <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d0a8:	4b29      	ldr	r3, [pc, #164]	; (800d150 <UART_SetConfig+0xab0>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	08db      	lsrs	r3, r3, #3
 800d0ae:	f003 0303 	and.w	r3, r3, #3
 800d0b2:	4a28      	ldr	r2, [pc, #160]	; (800d154 <UART_SetConfig+0xab4>)
 800d0b4:	fa22 f303 	lsr.w	r3, r2, r3
 800d0b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d0ba:	e00f      	b.n	800d0dc <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800d0bc:	4b25      	ldr	r3, [pc, #148]	; (800d154 <UART_SetConfig+0xab4>)
 800d0be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0c0:	e00c      	b.n	800d0dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d0c2:	4b25      	ldr	r3, [pc, #148]	; (800d158 <UART_SetConfig+0xab8>)
 800d0c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0c6:	e009      	b.n	800d0dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d0c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d0cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0ce:	e005      	b.n	800d0dc <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d0da:	bf00      	nop
    }

    if (pclk != 0U)
 800d0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d021      	beq.n	800d126 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0e6:	4a1d      	ldr	r2, [pc, #116]	; (800d15c <UART_SetConfig+0xabc>)
 800d0e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d0ec:	461a      	mov	r2, r3
 800d0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f0:	fbb3 f2f2 	udiv	r2, r3, r2
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	685b      	ldr	r3, [r3, #4]
 800d0f8:	085b      	lsrs	r3, r3, #1
 800d0fa:	441a      	add	r2, r3
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	fbb2 f3f3 	udiv	r3, r2, r3
 800d104:	b29b      	uxth	r3, r3
 800d106:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10a:	2b0f      	cmp	r3, #15
 800d10c:	d908      	bls.n	800d120 <UART_SetConfig+0xa80>
 800d10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d114:	d204      	bcs.n	800d120 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d11c:	60da      	str	r2, [r3, #12]
 800d11e:	e002      	b.n	800d126 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d120:	2301      	movs	r3, #1
 800d122:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2201      	movs	r2, #1
 800d12a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2201      	movs	r2, #1
 800d132:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2200      	movs	r2, #0
 800d13a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2200      	movs	r2, #0
 800d140:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d142:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d146:	4618      	mov	r0, r3
 800d148:	3738      	adds	r7, #56	; 0x38
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bdb0      	pop	{r4, r5, r7, pc}
 800d14e:	bf00      	nop
 800d150:	58024400 	.word	0x58024400
 800d154:	03d09000 	.word	0x03d09000
 800d158:	003d0900 	.word	0x003d0900
 800d15c:	08013da4 	.word	0x08013da4

0800d160 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d160:	b480      	push	{r7}
 800d162:	b083      	sub	sp, #12
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d16c:	f003 0301 	and.w	r3, r3, #1
 800d170:	2b00      	cmp	r3, #0
 800d172:	d00a      	beq.n	800d18a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	685b      	ldr	r3, [r3, #4]
 800d17a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	430a      	orrs	r2, r1
 800d188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d18e:	f003 0302 	and.w	r3, r3, #2
 800d192:	2b00      	cmp	r3, #0
 800d194:	d00a      	beq.n	800d1ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	685b      	ldr	r3, [r3, #4]
 800d19c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	430a      	orrs	r2, r1
 800d1aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1b0:	f003 0304 	and.w	r3, r3, #4
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d00a      	beq.n	800d1ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	685b      	ldr	r3, [r3, #4]
 800d1be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	430a      	orrs	r2, r1
 800d1cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1d2:	f003 0308 	and.w	r3, r3, #8
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d00a      	beq.n	800d1f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	685b      	ldr	r3, [r3, #4]
 800d1e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	430a      	orrs	r2, r1
 800d1ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1f4:	f003 0310 	and.w	r3, r3, #16
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d00a      	beq.n	800d212 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	689b      	ldr	r3, [r3, #8]
 800d202:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	430a      	orrs	r2, r1
 800d210:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d216:	f003 0320 	and.w	r3, r3, #32
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d00a      	beq.n	800d234 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	689b      	ldr	r3, [r3, #8]
 800d224:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	430a      	orrs	r2, r1
 800d232:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d01a      	beq.n	800d276 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	685b      	ldr	r3, [r3, #4]
 800d246:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	430a      	orrs	r2, r1
 800d254:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d25a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d25e:	d10a      	bne.n	800d276 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	685b      	ldr	r3, [r3, #4]
 800d266:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	430a      	orrs	r2, r1
 800d274:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d27a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d00a      	beq.n	800d298 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	430a      	orrs	r2, r1
 800d296:	605a      	str	r2, [r3, #4]
  }
}
 800d298:	bf00      	nop
 800d29a:	370c      	adds	r7, #12
 800d29c:	46bd      	mov	sp, r7
 800d29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a2:	4770      	bx	lr

0800d2a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b086      	sub	sp, #24
 800d2a8:	af02      	add	r7, sp, #8
 800d2aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d2b4:	f7f5 fa4a 	bl	800274c <HAL_GetTick>
 800d2b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	f003 0308 	and.w	r3, r3, #8
 800d2c4:	2b08      	cmp	r3, #8
 800d2c6:	d10e      	bne.n	800d2e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d2c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d2cc:	9300      	str	r3, [sp, #0]
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f000 f82f 	bl	800d33a <UART_WaitOnFlagUntilTimeout>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d001      	beq.n	800d2e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d2e2:	2303      	movs	r3, #3
 800d2e4:	e025      	b.n	800d332 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f003 0304 	and.w	r3, r3, #4
 800d2f0:	2b04      	cmp	r3, #4
 800d2f2:	d10e      	bne.n	800d312 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d2f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d2f8:	9300      	str	r3, [sp, #0]
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f000 f819 	bl	800d33a <UART_WaitOnFlagUntilTimeout>
 800d308:	4603      	mov	r3, r0
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d001      	beq.n	800d312 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d30e:	2303      	movs	r3, #3
 800d310:	e00f      	b.n	800d332 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2220      	movs	r2, #32
 800d316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2220      	movs	r2, #32
 800d31e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2200      	movs	r2, #0
 800d326:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2200      	movs	r2, #0
 800d32c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d330:	2300      	movs	r3, #0
}
 800d332:	4618      	mov	r0, r3
 800d334:	3710      	adds	r7, #16
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}

0800d33a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d33a:	b580      	push	{r7, lr}
 800d33c:	b084      	sub	sp, #16
 800d33e:	af00      	add	r7, sp, #0
 800d340:	60f8      	str	r0, [r7, #12]
 800d342:	60b9      	str	r1, [r7, #8]
 800d344:	603b      	str	r3, [r7, #0]
 800d346:	4613      	mov	r3, r2
 800d348:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d34a:	e062      	b.n	800d412 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d34c:	69bb      	ldr	r3, [r7, #24]
 800d34e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d352:	d05e      	beq.n	800d412 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d354:	f7f5 f9fa 	bl	800274c <HAL_GetTick>
 800d358:	4602      	mov	r2, r0
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	1ad3      	subs	r3, r2, r3
 800d35e:	69ba      	ldr	r2, [r7, #24]
 800d360:	429a      	cmp	r2, r3
 800d362:	d302      	bcc.n	800d36a <UART_WaitOnFlagUntilTimeout+0x30>
 800d364:	69bb      	ldr	r3, [r7, #24]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d11d      	bne.n	800d3a6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	681a      	ldr	r2, [r3, #0]
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d378:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	689a      	ldr	r2, [r3, #8]
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	f022 0201 	bic.w	r2, r2, #1
 800d388:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	2220      	movs	r2, #32
 800d38e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2220      	movs	r2, #32
 800d396:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	2200      	movs	r2, #0
 800d39e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d3a2:	2303      	movs	r3, #3
 800d3a4:	e045      	b.n	800d432 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f003 0304 	and.w	r3, r3, #4
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d02e      	beq.n	800d412 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	69db      	ldr	r3, [r3, #28]
 800d3ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d3be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d3c2:	d126      	bne.n	800d412 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d3cc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	681a      	ldr	r2, [r3, #0]
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d3dc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	689a      	ldr	r2, [r3, #8]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f022 0201 	bic.w	r2, r2, #1
 800d3ec:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	2220      	movs	r2, #32
 800d3f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	2220      	movs	r2, #32
 800d3fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	2220      	movs	r2, #32
 800d402:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2200      	movs	r2, #0
 800d40a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d40e:	2303      	movs	r3, #3
 800d410:	e00f      	b.n	800d432 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	69da      	ldr	r2, [r3, #28]
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	4013      	ands	r3, r2
 800d41c:	68ba      	ldr	r2, [r7, #8]
 800d41e:	429a      	cmp	r2, r3
 800d420:	bf0c      	ite	eq
 800d422:	2301      	moveq	r3, #1
 800d424:	2300      	movne	r3, #0
 800d426:	b2db      	uxtb	r3, r3
 800d428:	461a      	mov	r2, r3
 800d42a:	79fb      	ldrb	r3, [r7, #7]
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d08d      	beq.n	800d34c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d430:	2300      	movs	r3, #0
}
 800d432:	4618      	mov	r0, r3
 800d434:	3710      	adds	r7, #16
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}

0800d43a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d43a:	b480      	push	{r7}
 800d43c:	b085      	sub	sp, #20
 800d43e:	af00      	add	r7, sp, #0
 800d440:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d448:	2b01      	cmp	r3, #1
 800d44a:	d101      	bne.n	800d450 <HAL_UARTEx_DisableFifoMode+0x16>
 800d44c:	2302      	movs	r3, #2
 800d44e:	e027      	b.n	800d4a0 <HAL_UARTEx_DisableFifoMode+0x66>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2201      	movs	r2, #1
 800d454:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2224      	movs	r2, #36	; 0x24
 800d45c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	681a      	ldr	r2, [r3, #0]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f022 0201 	bic.w	r2, r2, #1
 800d476:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d47e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2200      	movs	r2, #0
 800d484:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	68fa      	ldr	r2, [r7, #12]
 800d48c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2220      	movs	r2, #32
 800d492:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2200      	movs	r2, #0
 800d49a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d49e:	2300      	movs	r3, #0
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3714      	adds	r7, #20
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr

0800d4ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b084      	sub	sp, #16
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d4bc:	2b01      	cmp	r3, #1
 800d4be:	d101      	bne.n	800d4c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d4c0:	2302      	movs	r3, #2
 800d4c2:	e02d      	b.n	800d520 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2224      	movs	r2, #36	; 0x24
 800d4d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	681a      	ldr	r2, [r3, #0]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f022 0201 	bic.w	r2, r2, #1
 800d4ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	689b      	ldr	r3, [r3, #8]
 800d4f2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	683a      	ldr	r2, [r7, #0]
 800d4fc:	430a      	orrs	r2, r1
 800d4fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f000 f84f 	bl	800d5a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	68fa      	ldr	r2, [r7, #12]
 800d50c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2220      	movs	r2, #32
 800d512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2200      	movs	r2, #0
 800d51a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d51e:	2300      	movs	r3, #0
}
 800d520:	4618      	mov	r0, r3
 800d522:	3710      	adds	r7, #16
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}

0800d528 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b084      	sub	sp, #16
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d538:	2b01      	cmp	r3, #1
 800d53a:	d101      	bne.n	800d540 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d53c:	2302      	movs	r3, #2
 800d53e:	e02d      	b.n	800d59c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2201      	movs	r2, #1
 800d544:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2224      	movs	r2, #36	; 0x24
 800d54c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	681a      	ldr	r2, [r3, #0]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f022 0201 	bic.w	r2, r2, #1
 800d566:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	689b      	ldr	r3, [r3, #8]
 800d56e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	683a      	ldr	r2, [r7, #0]
 800d578:	430a      	orrs	r2, r1
 800d57a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f000 f811 	bl	800d5a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	68fa      	ldr	r2, [r7, #12]
 800d588:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2220      	movs	r2, #32
 800d58e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2200      	movs	r2, #0
 800d596:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d59a:	2300      	movs	r3, #0
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3710      	adds	r7, #16
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}

0800d5a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b085      	sub	sp, #20
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d108      	bne.n	800d5c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2201      	movs	r2, #1
 800d5b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2201      	movs	r2, #1
 800d5c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d5c4:	e031      	b.n	800d62a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d5c6:	2310      	movs	r3, #16
 800d5c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d5ca:	2310      	movs	r3, #16
 800d5cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	689b      	ldr	r3, [r3, #8]
 800d5d4:	0e5b      	lsrs	r3, r3, #25
 800d5d6:	b2db      	uxtb	r3, r3
 800d5d8:	f003 0307 	and.w	r3, r3, #7
 800d5dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	689b      	ldr	r3, [r3, #8]
 800d5e4:	0f5b      	lsrs	r3, r3, #29
 800d5e6:	b2db      	uxtb	r3, r3
 800d5e8:	f003 0307 	and.w	r3, r3, #7
 800d5ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d5ee:	7bbb      	ldrb	r3, [r7, #14]
 800d5f0:	7b3a      	ldrb	r2, [r7, #12]
 800d5f2:	4911      	ldr	r1, [pc, #68]	; (800d638 <UARTEx_SetNbDataToProcess+0x94>)
 800d5f4:	5c8a      	ldrb	r2, [r1, r2]
 800d5f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d5fa:	7b3a      	ldrb	r2, [r7, #12]
 800d5fc:	490f      	ldr	r1, [pc, #60]	; (800d63c <UARTEx_SetNbDataToProcess+0x98>)
 800d5fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d600:	fb93 f3f2 	sdiv	r3, r3, r2
 800d604:	b29a      	uxth	r2, r3
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d60c:	7bfb      	ldrb	r3, [r7, #15]
 800d60e:	7b7a      	ldrb	r2, [r7, #13]
 800d610:	4909      	ldr	r1, [pc, #36]	; (800d638 <UARTEx_SetNbDataToProcess+0x94>)
 800d612:	5c8a      	ldrb	r2, [r1, r2]
 800d614:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d618:	7b7a      	ldrb	r2, [r7, #13]
 800d61a:	4908      	ldr	r1, [pc, #32]	; (800d63c <UARTEx_SetNbDataToProcess+0x98>)
 800d61c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d61e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d622:	b29a      	uxth	r2, r3
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d62a:	bf00      	nop
 800d62c:	3714      	adds	r7, #20
 800d62e:	46bd      	mov	sp, r7
 800d630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d634:	4770      	bx	lr
 800d636:	bf00      	nop
 800d638:	08013dbc 	.word	0x08013dbc
 800d63c:	08013dc4 	.word	0x08013dc4

0800d640 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d640:	b084      	sub	sp, #16
 800d642:	b580      	push	{r7, lr}
 800d644:	b084      	sub	sp, #16
 800d646:	af00      	add	r7, sp, #0
 800d648:	6078      	str	r0, [r7, #4]
 800d64a:	f107 001c 	add.w	r0, r7, #28
 800d64e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d654:	2b01      	cmp	r3, #1
 800d656:	d120      	bne.n	800d69a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d65c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	68da      	ldr	r2, [r3, #12]
 800d668:	4b2a      	ldr	r3, [pc, #168]	; (800d714 <USB_CoreInit+0xd4>)
 800d66a:	4013      	ands	r3, r2
 800d66c:	687a      	ldr	r2, [r7, #4]
 800d66e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	68db      	ldr	r3, [r3, #12]
 800d674:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d67c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d67e:	2b01      	cmp	r3, #1
 800d680:	d105      	bne.n	800d68e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	68db      	ldr	r3, [r3, #12]
 800d686:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f000 fa60 	bl	800db54 <USB_CoreReset>
 800d694:	4603      	mov	r3, r0
 800d696:	73fb      	strb	r3, [r7, #15]
 800d698:	e01a      	b.n	800d6d0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	68db      	ldr	r3, [r3, #12]
 800d69e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f000 fa54 	bl	800db54 <USB_CoreReset>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d6b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d106      	bne.n	800d6c4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	639a      	str	r2, [r3, #56]	; 0x38
 800d6c2:	e005      	b.n	800d6d0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d2:	2b01      	cmp	r3, #1
 800d6d4:	d116      	bne.n	800d704 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d6da:	b29a      	uxth	r2, r3
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d6e4:	4b0c      	ldr	r3, [pc, #48]	; (800d718 <USB_CoreInit+0xd8>)
 800d6e6:	4313      	orrs	r3, r2
 800d6e8:	687a      	ldr	r2, [r7, #4]
 800d6ea:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	689b      	ldr	r3, [r3, #8]
 800d6f0:	f043 0206 	orr.w	r2, r3, #6
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	689b      	ldr	r3, [r3, #8]
 800d6fc:	f043 0220 	orr.w	r2, r3, #32
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d704:	7bfb      	ldrb	r3, [r7, #15]
}
 800d706:	4618      	mov	r0, r3
 800d708:	3710      	adds	r7, #16
 800d70a:	46bd      	mov	sp, r7
 800d70c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d710:	b004      	add	sp, #16
 800d712:	4770      	bx	lr
 800d714:	ffbdffbf 	.word	0xffbdffbf
 800d718:	03ee0000 	.word	0x03ee0000

0800d71c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d71c:	b480      	push	{r7}
 800d71e:	b083      	sub	sp, #12
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	689b      	ldr	r3, [r3, #8]
 800d728:	f023 0201 	bic.w	r2, r3, #1
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d730:	2300      	movs	r3, #0
}
 800d732:	4618      	mov	r0, r3
 800d734:	370c      	adds	r7, #12
 800d736:	46bd      	mov	sp, r7
 800d738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73c:	4770      	bx	lr

0800d73e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d73e:	b580      	push	{r7, lr}
 800d740:	b082      	sub	sp, #8
 800d742:	af00      	add	r7, sp, #0
 800d744:	6078      	str	r0, [r7, #4]
 800d746:	460b      	mov	r3, r1
 800d748:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	68db      	ldr	r3, [r3, #12]
 800d74e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d756:	78fb      	ldrb	r3, [r7, #3]
 800d758:	2b01      	cmp	r3, #1
 800d75a:	d106      	bne.n	800d76a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	68db      	ldr	r3, [r3, #12]
 800d760:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	60da      	str	r2, [r3, #12]
 800d768:	e00b      	b.n	800d782 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d76a:	78fb      	ldrb	r3, [r7, #3]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d106      	bne.n	800d77e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	68db      	ldr	r3, [r3, #12]
 800d774:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	60da      	str	r2, [r3, #12]
 800d77c:	e001      	b.n	800d782 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d77e:	2301      	movs	r3, #1
 800d780:	e003      	b.n	800d78a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d782:	2032      	movs	r0, #50	; 0x32
 800d784:	f7f4 ffee 	bl	8002764 <HAL_Delay>

  return HAL_OK;
 800d788:	2300      	movs	r3, #0
}
 800d78a:	4618      	mov	r0, r3
 800d78c:	3708      	adds	r7, #8
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}
	...

0800d794 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d794:	b084      	sub	sp, #16
 800d796:	b580      	push	{r7, lr}
 800d798:	b086      	sub	sp, #24
 800d79a:	af00      	add	r7, sp, #0
 800d79c:	6078      	str	r0, [r7, #4]
 800d79e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d7a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	613b      	str	r3, [r7, #16]
 800d7b2:	e009      	b.n	800d7c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d7b4:	687a      	ldr	r2, [r7, #4]
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	3340      	adds	r3, #64	; 0x40
 800d7ba:	009b      	lsls	r3, r3, #2
 800d7bc:	4413      	add	r3, r2
 800d7be:	2200      	movs	r2, #0
 800d7c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	3301      	adds	r3, #1
 800d7c6:	613b      	str	r3, [r7, #16]
 800d7c8:	693b      	ldr	r3, [r7, #16]
 800d7ca:	2b0e      	cmp	r3, #14
 800d7cc:	d9f2      	bls.n	800d7b4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d7ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d11c      	bne.n	800d80e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7da:	685b      	ldr	r3, [r3, #4]
 800d7dc:	68fa      	ldr	r2, [r7, #12]
 800d7de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d7e2:	f043 0302 	orr.w	r3, r3, #2
 800d7e6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	601a      	str	r2, [r3, #0]
 800d80c:	e005      	b.n	800d81a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d812:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d820:	461a      	mov	r2, r3
 800d822:	2300      	movs	r3, #0
 800d824:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d82c:	4619      	mov	r1, r3
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d834:	461a      	mov	r2, r3
 800d836:	680b      	ldr	r3, [r1, #0]
 800d838:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d83c:	2b01      	cmp	r3, #1
 800d83e:	d10c      	bne.n	800d85a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d842:	2b00      	cmp	r3, #0
 800d844:	d104      	bne.n	800d850 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d846:	2100      	movs	r1, #0
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f000 f949 	bl	800dae0 <USB_SetDevSpeed>
 800d84e:	e008      	b.n	800d862 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d850:	2101      	movs	r1, #1
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f000 f944 	bl	800dae0 <USB_SetDevSpeed>
 800d858:	e003      	b.n	800d862 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d85a:	2103      	movs	r1, #3
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f000 f93f 	bl	800dae0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d862:	2110      	movs	r1, #16
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f000 f8f3 	bl	800da50 <USB_FlushTxFifo>
 800d86a:	4603      	mov	r3, r0
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d001      	beq.n	800d874 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800d870:	2301      	movs	r3, #1
 800d872:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f000 f911 	bl	800da9c <USB_FlushRxFifo>
 800d87a:	4603      	mov	r3, r0
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d001      	beq.n	800d884 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800d880:	2301      	movs	r3, #1
 800d882:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d88a:	461a      	mov	r2, r3
 800d88c:	2300      	movs	r3, #0
 800d88e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d896:	461a      	mov	r2, r3
 800d898:	2300      	movs	r3, #0
 800d89a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	613b      	str	r3, [r7, #16]
 800d8ac:	e043      	b.n	800d936 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	015a      	lsls	r2, r3, #5
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	4413      	add	r3, r2
 800d8b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d8c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d8c4:	d118      	bne.n	800d8f8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800d8c6:	693b      	ldr	r3, [r7, #16]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d10a      	bne.n	800d8e2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	015a      	lsls	r2, r3, #5
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	4413      	add	r3, r2
 800d8d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8d8:	461a      	mov	r2, r3
 800d8da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d8de:	6013      	str	r3, [r2, #0]
 800d8e0:	e013      	b.n	800d90a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d8e2:	693b      	ldr	r3, [r7, #16]
 800d8e4:	015a      	lsls	r2, r3, #5
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	4413      	add	r3, r2
 800d8ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8ee:	461a      	mov	r2, r3
 800d8f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d8f4:	6013      	str	r3, [r2, #0]
 800d8f6:	e008      	b.n	800d90a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	015a      	lsls	r2, r3, #5
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	4413      	add	r3, r2
 800d900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d904:	461a      	mov	r2, r3
 800d906:	2300      	movs	r3, #0
 800d908:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	015a      	lsls	r2, r3, #5
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	4413      	add	r3, r2
 800d912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d916:	461a      	mov	r2, r3
 800d918:	2300      	movs	r3, #0
 800d91a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	015a      	lsls	r2, r3, #5
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	4413      	add	r3, r2
 800d924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d928:	461a      	mov	r2, r3
 800d92a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d92e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d930:	693b      	ldr	r3, [r7, #16]
 800d932:	3301      	adds	r3, #1
 800d934:	613b      	str	r3, [r7, #16]
 800d936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d938:	693a      	ldr	r2, [r7, #16]
 800d93a:	429a      	cmp	r2, r3
 800d93c:	d3b7      	bcc.n	800d8ae <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d93e:	2300      	movs	r3, #0
 800d940:	613b      	str	r3, [r7, #16]
 800d942:	e043      	b.n	800d9cc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d944:	693b      	ldr	r3, [r7, #16]
 800d946:	015a      	lsls	r2, r3, #5
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	4413      	add	r3, r2
 800d94c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d956:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d95a:	d118      	bne.n	800d98e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d10a      	bne.n	800d978 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	015a      	lsls	r2, r3, #5
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	4413      	add	r3, r2
 800d96a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d96e:	461a      	mov	r2, r3
 800d970:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d974:	6013      	str	r3, [r2, #0]
 800d976:	e013      	b.n	800d9a0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	015a      	lsls	r2, r3, #5
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	4413      	add	r3, r2
 800d980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d984:	461a      	mov	r2, r3
 800d986:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d98a:	6013      	str	r3, [r2, #0]
 800d98c:	e008      	b.n	800d9a0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	015a      	lsls	r2, r3, #5
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	4413      	add	r3, r2
 800d996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d99a:	461a      	mov	r2, r3
 800d99c:	2300      	movs	r3, #0
 800d99e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	015a      	lsls	r2, r3, #5
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	4413      	add	r3, r2
 800d9a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	015a      	lsls	r2, r3, #5
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	4413      	add	r3, r2
 800d9ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9be:	461a      	mov	r2, r3
 800d9c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d9c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d9c6:	693b      	ldr	r3, [r7, #16]
 800d9c8:	3301      	adds	r3, #1
 800d9ca:	613b      	str	r3, [r7, #16]
 800d9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ce:	693a      	ldr	r2, [r7, #16]
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d3b7      	bcc.n	800d944 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9da:	691b      	ldr	r3, [r3, #16]
 800d9dc:	68fa      	ldr	r2, [r7, #12]
 800d9de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d9e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d9e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d9f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d105      	bne.n	800da08 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	699b      	ldr	r3, [r3, #24]
 800da00:	f043 0210 	orr.w	r2, r3, #16
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	699a      	ldr	r2, [r3, #24]
 800da0c:	4b0e      	ldr	r3, [pc, #56]	; (800da48 <USB_DevInit+0x2b4>)
 800da0e:	4313      	orrs	r3, r2
 800da10:	687a      	ldr	r2, [r7, #4]
 800da12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800da14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da16:	2b00      	cmp	r3, #0
 800da18:	d005      	beq.n	800da26 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	699b      	ldr	r3, [r3, #24]
 800da1e:	f043 0208 	orr.w	r2, r3, #8
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800da26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da28:	2b01      	cmp	r3, #1
 800da2a:	d105      	bne.n	800da38 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	699a      	ldr	r2, [r3, #24]
 800da30:	4b06      	ldr	r3, [pc, #24]	; (800da4c <USB_DevInit+0x2b8>)
 800da32:	4313      	orrs	r3, r2
 800da34:	687a      	ldr	r2, [r7, #4]
 800da36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800da38:	7dfb      	ldrb	r3, [r7, #23]
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3718      	adds	r7, #24
 800da3e:	46bd      	mov	sp, r7
 800da40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800da44:	b004      	add	sp, #16
 800da46:	4770      	bx	lr
 800da48:	803c3800 	.word	0x803c3800
 800da4c:	40000004 	.word	0x40000004

0800da50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800da50:	b480      	push	{r7}
 800da52:	b085      	sub	sp, #20
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800da5a:	2300      	movs	r3, #0
 800da5c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	019b      	lsls	r3, r3, #6
 800da62:	f043 0220 	orr.w	r2, r3, #32
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	3301      	adds	r3, #1
 800da6e:	60fb      	str	r3, [r7, #12]
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	4a09      	ldr	r2, [pc, #36]	; (800da98 <USB_FlushTxFifo+0x48>)
 800da74:	4293      	cmp	r3, r2
 800da76:	d901      	bls.n	800da7c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800da78:	2303      	movs	r3, #3
 800da7a:	e006      	b.n	800da8a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	691b      	ldr	r3, [r3, #16]
 800da80:	f003 0320 	and.w	r3, r3, #32
 800da84:	2b20      	cmp	r3, #32
 800da86:	d0f0      	beq.n	800da6a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800da88:	2300      	movs	r3, #0
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	3714      	adds	r7, #20
 800da8e:	46bd      	mov	sp, r7
 800da90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da94:	4770      	bx	lr
 800da96:	bf00      	nop
 800da98:	00030d40 	.word	0x00030d40

0800da9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800da9c:	b480      	push	{r7}
 800da9e:	b085      	sub	sp, #20
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800daa4:	2300      	movs	r3, #0
 800daa6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2210      	movs	r2, #16
 800daac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	3301      	adds	r3, #1
 800dab2:	60fb      	str	r3, [r7, #12]
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	4a09      	ldr	r2, [pc, #36]	; (800dadc <USB_FlushRxFifo+0x40>)
 800dab8:	4293      	cmp	r3, r2
 800daba:	d901      	bls.n	800dac0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800dabc:	2303      	movs	r3, #3
 800dabe:	e006      	b.n	800dace <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	691b      	ldr	r3, [r3, #16]
 800dac4:	f003 0310 	and.w	r3, r3, #16
 800dac8:	2b10      	cmp	r3, #16
 800daca:	d0f0      	beq.n	800daae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800dacc:	2300      	movs	r3, #0
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3714      	adds	r7, #20
 800dad2:	46bd      	mov	sp, r7
 800dad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad8:	4770      	bx	lr
 800dada:	bf00      	nop
 800dadc:	00030d40 	.word	0x00030d40

0800dae0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800dae0:	b480      	push	{r7}
 800dae2:	b085      	sub	sp, #20
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	460b      	mov	r3, r1
 800daea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800daf6:	681a      	ldr	r2, [r3, #0]
 800daf8:	78fb      	ldrb	r3, [r7, #3]
 800dafa:	68f9      	ldr	r1, [r7, #12]
 800dafc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800db00:	4313      	orrs	r3, r2
 800db02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800db04:	2300      	movs	r3, #0
}
 800db06:	4618      	mov	r0, r3
 800db08:	3714      	adds	r7, #20
 800db0a:	46bd      	mov	sp, r7
 800db0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db10:	4770      	bx	lr

0800db12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800db12:	b480      	push	{r7}
 800db14:	b085      	sub	sp, #20
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	68fa      	ldr	r2, [r7, #12]
 800db28:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800db2c:	f023 0303 	bic.w	r3, r3, #3
 800db30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db38:	685b      	ldr	r3, [r3, #4]
 800db3a:	68fa      	ldr	r2, [r7, #12]
 800db3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800db40:	f043 0302 	orr.w	r3, r3, #2
 800db44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800db46:	2300      	movs	r3, #0
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3714      	adds	r7, #20
 800db4c:	46bd      	mov	sp, r7
 800db4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db52:	4770      	bx	lr

0800db54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800db54:	b480      	push	{r7}
 800db56:	b085      	sub	sp, #20
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800db5c:	2300      	movs	r3, #0
 800db5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	3301      	adds	r3, #1
 800db64:	60fb      	str	r3, [r7, #12]
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	4a13      	ldr	r2, [pc, #76]	; (800dbb8 <USB_CoreReset+0x64>)
 800db6a:	4293      	cmp	r3, r2
 800db6c:	d901      	bls.n	800db72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800db6e:	2303      	movs	r3, #3
 800db70:	e01b      	b.n	800dbaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	691b      	ldr	r3, [r3, #16]
 800db76:	2b00      	cmp	r3, #0
 800db78:	daf2      	bge.n	800db60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800db7a:	2300      	movs	r3, #0
 800db7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	691b      	ldr	r3, [r3, #16]
 800db82:	f043 0201 	orr.w	r2, r3, #1
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	3301      	adds	r3, #1
 800db8e:	60fb      	str	r3, [r7, #12]
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	4a09      	ldr	r2, [pc, #36]	; (800dbb8 <USB_CoreReset+0x64>)
 800db94:	4293      	cmp	r3, r2
 800db96:	d901      	bls.n	800db9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800db98:	2303      	movs	r3, #3
 800db9a:	e006      	b.n	800dbaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	691b      	ldr	r3, [r3, #16]
 800dba0:	f003 0301 	and.w	r3, r3, #1
 800dba4:	2b01      	cmp	r3, #1
 800dba6:	d0f0      	beq.n	800db8a <USB_CoreReset+0x36>

  return HAL_OK;
 800dba8:	2300      	movs	r3, #0
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3714      	adds	r7, #20
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb4:	4770      	bx	lr
 800dbb6:	bf00      	nop
 800dbb8:	00030d40 	.word	0x00030d40

0800dbbc <__NVIC_SetPriority>:
{
 800dbbc:	b480      	push	{r7}
 800dbbe:	b083      	sub	sp, #12
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	6039      	str	r1, [r7, #0]
 800dbc6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800dbc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	db0a      	blt.n	800dbe6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	b2da      	uxtb	r2, r3
 800dbd4:	490c      	ldr	r1, [pc, #48]	; (800dc08 <__NVIC_SetPriority+0x4c>)
 800dbd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dbda:	0112      	lsls	r2, r2, #4
 800dbdc:	b2d2      	uxtb	r2, r2
 800dbde:	440b      	add	r3, r1
 800dbe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800dbe4:	e00a      	b.n	800dbfc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	b2da      	uxtb	r2, r3
 800dbea:	4908      	ldr	r1, [pc, #32]	; (800dc0c <__NVIC_SetPriority+0x50>)
 800dbec:	88fb      	ldrh	r3, [r7, #6]
 800dbee:	f003 030f 	and.w	r3, r3, #15
 800dbf2:	3b04      	subs	r3, #4
 800dbf4:	0112      	lsls	r2, r2, #4
 800dbf6:	b2d2      	uxtb	r2, r2
 800dbf8:	440b      	add	r3, r1
 800dbfa:	761a      	strb	r2, [r3, #24]
}
 800dbfc:	bf00      	nop
 800dbfe:	370c      	adds	r7, #12
 800dc00:	46bd      	mov	sp, r7
 800dc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc06:	4770      	bx	lr
 800dc08:	e000e100 	.word	0xe000e100
 800dc0c:	e000ed00 	.word	0xe000ed00

0800dc10 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800dc10:	b580      	push	{r7, lr}
 800dc12:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800dc14:	2100      	movs	r1, #0
 800dc16:	f06f 0004 	mvn.w	r0, #4
 800dc1a:	f7ff ffcf 	bl	800dbbc <__NVIC_SetPriority>
#endif
}
 800dc1e:	bf00      	nop
 800dc20:	bd80      	pop	{r7, pc}
	...

0800dc24 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800dc24:	b480      	push	{r7}
 800dc26:	b083      	sub	sp, #12
 800dc28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc2a:	f3ef 8305 	mrs	r3, IPSR
 800dc2e:	603b      	str	r3, [r7, #0]
  return(result);
 800dc30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d003      	beq.n	800dc3e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800dc36:	f06f 0305 	mvn.w	r3, #5
 800dc3a:	607b      	str	r3, [r7, #4]
 800dc3c:	e00c      	b.n	800dc58 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800dc3e:	4b0a      	ldr	r3, [pc, #40]	; (800dc68 <osKernelInitialize+0x44>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d105      	bne.n	800dc52 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800dc46:	4b08      	ldr	r3, [pc, #32]	; (800dc68 <osKernelInitialize+0x44>)
 800dc48:	2201      	movs	r2, #1
 800dc4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	607b      	str	r3, [r7, #4]
 800dc50:	e002      	b.n	800dc58 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800dc52:	f04f 33ff 	mov.w	r3, #4294967295
 800dc56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dc58:	687b      	ldr	r3, [r7, #4]
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	370c      	adds	r7, #12
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc64:	4770      	bx	lr
 800dc66:	bf00      	nop
 800dc68:	24000220 	.word	0x24000220

0800dc6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b082      	sub	sp, #8
 800dc70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc72:	f3ef 8305 	mrs	r3, IPSR
 800dc76:	603b      	str	r3, [r7, #0]
  return(result);
 800dc78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d003      	beq.n	800dc86 <osKernelStart+0x1a>
    stat = osErrorISR;
 800dc7e:	f06f 0305 	mvn.w	r3, #5
 800dc82:	607b      	str	r3, [r7, #4]
 800dc84:	e010      	b.n	800dca8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800dc86:	4b0b      	ldr	r3, [pc, #44]	; (800dcb4 <osKernelStart+0x48>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	2b01      	cmp	r3, #1
 800dc8c:	d109      	bne.n	800dca2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800dc8e:	f7ff ffbf 	bl	800dc10 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800dc92:	4b08      	ldr	r3, [pc, #32]	; (800dcb4 <osKernelStart+0x48>)
 800dc94:	2202      	movs	r2, #2
 800dc96:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800dc98:	f002 f844 	bl	800fd24 <vTaskStartScheduler>
      stat = osOK;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	607b      	str	r3, [r7, #4]
 800dca0:	e002      	b.n	800dca8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800dca2:	f04f 33ff 	mov.w	r3, #4294967295
 800dca6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dca8:	687b      	ldr	r3, [r7, #4]
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3708      	adds	r7, #8
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}
 800dcb2:	bf00      	nop
 800dcb4:	24000220 	.word	0x24000220

0800dcb8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b08e      	sub	sp, #56	; 0x38
 800dcbc:	af04      	add	r7, sp, #16
 800dcbe:	60f8      	str	r0, [r7, #12]
 800dcc0:	60b9      	str	r1, [r7, #8]
 800dcc2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dcc8:	f3ef 8305 	mrs	r3, IPSR
 800dccc:	617b      	str	r3, [r7, #20]
  return(result);
 800dcce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d17e      	bne.n	800ddd2 <osThreadNew+0x11a>
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d07b      	beq.n	800ddd2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800dcda:	2380      	movs	r3, #128	; 0x80
 800dcdc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800dcde:	2318      	movs	r3, #24
 800dce0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800dce2:	2300      	movs	r3, #0
 800dce4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800dce6:	f04f 33ff 	mov.w	r3, #4294967295
 800dcea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d045      	beq.n	800dd7e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d002      	beq.n	800dd00 <osThreadNew+0x48>
        name = attr->name;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	699b      	ldr	r3, [r3, #24]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d002      	beq.n	800dd0e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	699b      	ldr	r3, [r3, #24]
 800dd0c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dd0e:	69fb      	ldr	r3, [r7, #28]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d008      	beq.n	800dd26 <osThreadNew+0x6e>
 800dd14:	69fb      	ldr	r3, [r7, #28]
 800dd16:	2b38      	cmp	r3, #56	; 0x38
 800dd18:	d805      	bhi.n	800dd26 <osThreadNew+0x6e>
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	685b      	ldr	r3, [r3, #4]
 800dd1e:	f003 0301 	and.w	r3, r3, #1
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d001      	beq.n	800dd2a <osThreadNew+0x72>
        return (NULL);
 800dd26:	2300      	movs	r3, #0
 800dd28:	e054      	b.n	800ddd4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	695b      	ldr	r3, [r3, #20]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d003      	beq.n	800dd3a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	695b      	ldr	r3, [r3, #20]
 800dd36:	089b      	lsrs	r3, r3, #2
 800dd38:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	689b      	ldr	r3, [r3, #8]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d00e      	beq.n	800dd60 <osThreadNew+0xa8>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	68db      	ldr	r3, [r3, #12]
 800dd46:	2b5b      	cmp	r3, #91	; 0x5b
 800dd48:	d90a      	bls.n	800dd60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d006      	beq.n	800dd60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	695b      	ldr	r3, [r3, #20]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d002      	beq.n	800dd60 <osThreadNew+0xa8>
        mem = 1;
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	61bb      	str	r3, [r7, #24]
 800dd5e:	e010      	b.n	800dd82 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	689b      	ldr	r3, [r3, #8]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d10c      	bne.n	800dd82 <osThreadNew+0xca>
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	68db      	ldr	r3, [r3, #12]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d108      	bne.n	800dd82 <osThreadNew+0xca>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	691b      	ldr	r3, [r3, #16]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d104      	bne.n	800dd82 <osThreadNew+0xca>
          mem = 0;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	61bb      	str	r3, [r7, #24]
 800dd7c:	e001      	b.n	800dd82 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800dd82:	69bb      	ldr	r3, [r7, #24]
 800dd84:	2b01      	cmp	r3, #1
 800dd86:	d110      	bne.n	800ddaa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800dd8c:	687a      	ldr	r2, [r7, #4]
 800dd8e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dd90:	9202      	str	r2, [sp, #8]
 800dd92:	9301      	str	r3, [sp, #4]
 800dd94:	69fb      	ldr	r3, [r7, #28]
 800dd96:	9300      	str	r3, [sp, #0]
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	6a3a      	ldr	r2, [r7, #32]
 800dd9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd9e:	68f8      	ldr	r0, [r7, #12]
 800dda0:	f001 fdea 	bl	800f978 <xTaskCreateStatic>
 800dda4:	4603      	mov	r3, r0
 800dda6:	613b      	str	r3, [r7, #16]
 800dda8:	e013      	b.n	800ddd2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ddaa:	69bb      	ldr	r3, [r7, #24]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d110      	bne.n	800ddd2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ddb0:	6a3b      	ldr	r3, [r7, #32]
 800ddb2:	b29a      	uxth	r2, r3
 800ddb4:	f107 0310 	add.w	r3, r7, #16
 800ddb8:	9301      	str	r3, [sp, #4]
 800ddba:	69fb      	ldr	r3, [r7, #28]
 800ddbc:	9300      	str	r3, [sp, #0]
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ddc2:	68f8      	ldr	r0, [r7, #12]
 800ddc4:	f001 fe35 	bl	800fa32 <xTaskCreate>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	2b01      	cmp	r3, #1
 800ddcc:	d001      	beq.n	800ddd2 <osThreadNew+0x11a>
            hTask = NULL;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ddd2:	693b      	ldr	r3, [r7, #16]
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3728      	adds	r7, #40	; 0x28
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}

0800dddc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dde4:	f3ef 8305 	mrs	r3, IPSR
 800dde8:	60bb      	str	r3, [r7, #8]
  return(result);
 800ddea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d003      	beq.n	800ddf8 <osDelay+0x1c>
    stat = osErrorISR;
 800ddf0:	f06f 0305 	mvn.w	r3, #5
 800ddf4:	60fb      	str	r3, [r7, #12]
 800ddf6:	e007      	b.n	800de08 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d002      	beq.n	800de08 <osDelay+0x2c>
      vTaskDelay(ticks);
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f001 ff5a 	bl	800fcbc <vTaskDelay>
    }
  }

  return (stat);
 800de08:	68fb      	ldr	r3, [r7, #12]
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	3710      	adds	r7, #16
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}

0800de12 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800de12:	b580      	push	{r7, lr}
 800de14:	b08a      	sub	sp, #40	; 0x28
 800de16:	af02      	add	r7, sp, #8
 800de18:	60f8      	str	r0, [r7, #12]
 800de1a:	60b9      	str	r1, [r7, #8]
 800de1c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800de1e:	2300      	movs	r3, #0
 800de20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de22:	f3ef 8305 	mrs	r3, IPSR
 800de26:	613b      	str	r3, [r7, #16]
  return(result);
 800de28:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d175      	bne.n	800df1a <osSemaphoreNew+0x108>
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d072      	beq.n	800df1a <osSemaphoreNew+0x108>
 800de34:	68ba      	ldr	r2, [r7, #8]
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	429a      	cmp	r2, r3
 800de3a:	d86e      	bhi.n	800df1a <osSemaphoreNew+0x108>
    mem = -1;
 800de3c:	f04f 33ff 	mov.w	r3, #4294967295
 800de40:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d015      	beq.n	800de74 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	689b      	ldr	r3, [r3, #8]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d006      	beq.n	800de5e <osSemaphoreNew+0x4c>
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	68db      	ldr	r3, [r3, #12]
 800de54:	2b4f      	cmp	r3, #79	; 0x4f
 800de56:	d902      	bls.n	800de5e <osSemaphoreNew+0x4c>
        mem = 1;
 800de58:	2301      	movs	r3, #1
 800de5a:	61bb      	str	r3, [r7, #24]
 800de5c:	e00c      	b.n	800de78 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	689b      	ldr	r3, [r3, #8]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d108      	bne.n	800de78 <osSemaphoreNew+0x66>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	68db      	ldr	r3, [r3, #12]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d104      	bne.n	800de78 <osSemaphoreNew+0x66>
          mem = 0;
 800de6e:	2300      	movs	r3, #0
 800de70:	61bb      	str	r3, [r7, #24]
 800de72:	e001      	b.n	800de78 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800de74:	2300      	movs	r3, #0
 800de76:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800de78:	69bb      	ldr	r3, [r7, #24]
 800de7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de7e:	d04c      	beq.n	800df1a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	2b01      	cmp	r3, #1
 800de84:	d128      	bne.n	800ded8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800de86:	69bb      	ldr	r3, [r7, #24]
 800de88:	2b01      	cmp	r3, #1
 800de8a:	d10a      	bne.n	800dea2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	689b      	ldr	r3, [r3, #8]
 800de90:	2203      	movs	r2, #3
 800de92:	9200      	str	r2, [sp, #0]
 800de94:	2200      	movs	r2, #0
 800de96:	2100      	movs	r1, #0
 800de98:	2001      	movs	r0, #1
 800de9a:	f000 ff55 	bl	800ed48 <xQueueGenericCreateStatic>
 800de9e:	61f8      	str	r0, [r7, #28]
 800dea0:	e005      	b.n	800deae <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800dea2:	2203      	movs	r2, #3
 800dea4:	2100      	movs	r1, #0
 800dea6:	2001      	movs	r0, #1
 800dea8:	f000 ffc6 	bl	800ee38 <xQueueGenericCreate>
 800deac:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800deae:	69fb      	ldr	r3, [r7, #28]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d022      	beq.n	800defa <osSemaphoreNew+0xe8>
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d01f      	beq.n	800defa <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800deba:	2300      	movs	r3, #0
 800debc:	2200      	movs	r2, #0
 800debe:	2100      	movs	r1, #0
 800dec0:	69f8      	ldr	r0, [r7, #28]
 800dec2:	f001 f881 	bl	800efc8 <xQueueGenericSend>
 800dec6:	4603      	mov	r3, r0
 800dec8:	2b01      	cmp	r3, #1
 800deca:	d016      	beq.n	800defa <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800decc:	69f8      	ldr	r0, [r7, #28]
 800dece:	f001 fb98 	bl	800f602 <vQueueDelete>
            hSemaphore = NULL;
 800ded2:	2300      	movs	r3, #0
 800ded4:	61fb      	str	r3, [r7, #28]
 800ded6:	e010      	b.n	800defa <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800ded8:	69bb      	ldr	r3, [r7, #24]
 800deda:	2b01      	cmp	r3, #1
 800dedc:	d108      	bne.n	800def0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	689b      	ldr	r3, [r3, #8]
 800dee2:	461a      	mov	r2, r3
 800dee4:	68b9      	ldr	r1, [r7, #8]
 800dee6:	68f8      	ldr	r0, [r7, #12]
 800dee8:	f001 f803 	bl	800eef2 <xQueueCreateCountingSemaphoreStatic>
 800deec:	61f8      	str	r0, [r7, #28]
 800deee:	e004      	b.n	800defa <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800def0:	68b9      	ldr	r1, [r7, #8]
 800def2:	68f8      	ldr	r0, [r7, #12]
 800def4:	f001 f834 	bl	800ef60 <xQueueCreateCountingSemaphore>
 800def8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800defa:	69fb      	ldr	r3, [r7, #28]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d00c      	beq.n	800df1a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d003      	beq.n	800df0e <osSemaphoreNew+0xfc>
          name = attr->name;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	617b      	str	r3, [r7, #20]
 800df0c:	e001      	b.n	800df12 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800df0e:	2300      	movs	r3, #0
 800df10:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800df12:	6979      	ldr	r1, [r7, #20]
 800df14:	69f8      	ldr	r0, [r7, #28]
 800df16:	f001 fca7 	bl	800f868 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800df1a:	69fb      	ldr	r3, [r7, #28]
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	3720      	adds	r7, #32
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}

0800df24 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800df24:	b580      	push	{r7, lr}
 800df26:	b08a      	sub	sp, #40	; 0x28
 800df28:	af02      	add	r7, sp, #8
 800df2a:	60f8      	str	r0, [r7, #12]
 800df2c:	60b9      	str	r1, [r7, #8]
 800df2e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800df30:	2300      	movs	r3, #0
 800df32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df34:	f3ef 8305 	mrs	r3, IPSR
 800df38:	613b      	str	r3, [r7, #16]
  return(result);
 800df3a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d15f      	bne.n	800e000 <osMessageQueueNew+0xdc>
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d05c      	beq.n	800e000 <osMessageQueueNew+0xdc>
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d059      	beq.n	800e000 <osMessageQueueNew+0xdc>
    mem = -1;
 800df4c:	f04f 33ff 	mov.w	r3, #4294967295
 800df50:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d029      	beq.n	800dfac <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	689b      	ldr	r3, [r3, #8]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d012      	beq.n	800df86 <osMessageQueueNew+0x62>
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	68db      	ldr	r3, [r3, #12]
 800df64:	2b4f      	cmp	r3, #79	; 0x4f
 800df66:	d90e      	bls.n	800df86 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d00a      	beq.n	800df86 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	695a      	ldr	r2, [r3, #20]
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	68b9      	ldr	r1, [r7, #8]
 800df78:	fb01 f303 	mul.w	r3, r1, r3
 800df7c:	429a      	cmp	r2, r3
 800df7e:	d302      	bcc.n	800df86 <osMessageQueueNew+0x62>
        mem = 1;
 800df80:	2301      	movs	r3, #1
 800df82:	61bb      	str	r3, [r7, #24]
 800df84:	e014      	b.n	800dfb0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	689b      	ldr	r3, [r3, #8]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d110      	bne.n	800dfb0 <osMessageQueueNew+0x8c>
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	68db      	ldr	r3, [r3, #12]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d10c      	bne.n	800dfb0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d108      	bne.n	800dfb0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	695b      	ldr	r3, [r3, #20]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d104      	bne.n	800dfb0 <osMessageQueueNew+0x8c>
          mem = 0;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	61bb      	str	r3, [r7, #24]
 800dfaa:	e001      	b.n	800dfb0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800dfac:	2300      	movs	r3, #0
 800dfae:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800dfb0:	69bb      	ldr	r3, [r7, #24]
 800dfb2:	2b01      	cmp	r3, #1
 800dfb4:	d10b      	bne.n	800dfce <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	691a      	ldr	r2, [r3, #16]
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	689b      	ldr	r3, [r3, #8]
 800dfbe:	2100      	movs	r1, #0
 800dfc0:	9100      	str	r1, [sp, #0]
 800dfc2:	68b9      	ldr	r1, [r7, #8]
 800dfc4:	68f8      	ldr	r0, [r7, #12]
 800dfc6:	f000 febf 	bl	800ed48 <xQueueGenericCreateStatic>
 800dfca:	61f8      	str	r0, [r7, #28]
 800dfcc:	e008      	b.n	800dfe0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800dfce:	69bb      	ldr	r3, [r7, #24]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d105      	bne.n	800dfe0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	68b9      	ldr	r1, [r7, #8]
 800dfd8:	68f8      	ldr	r0, [r7, #12]
 800dfda:	f000 ff2d 	bl	800ee38 <xQueueGenericCreate>
 800dfde:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800dfe0:	69fb      	ldr	r3, [r7, #28]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d00c      	beq.n	800e000 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d003      	beq.n	800dff4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	617b      	str	r3, [r7, #20]
 800dff2:	e001      	b.n	800dff8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800dff4:	2300      	movs	r3, #0
 800dff6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800dff8:	6979      	ldr	r1, [r7, #20]
 800dffa:	69f8      	ldr	r0, [r7, #28]
 800dffc:	f001 fc34 	bl	800f868 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e000:	69fb      	ldr	r3, [r7, #28]
}
 800e002:	4618      	mov	r0, r3
 800e004:	3720      	adds	r7, #32
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}
	...

0800e00c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b088      	sub	sp, #32
 800e010:	af00      	add	r7, sp, #0
 800e012:	60f8      	str	r0, [r7, #12]
 800e014:	60b9      	str	r1, [r7, #8]
 800e016:	603b      	str	r3, [r7, #0]
 800e018:	4613      	mov	r3, r2
 800e01a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e020:	2300      	movs	r3, #0
 800e022:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e024:	f3ef 8305 	mrs	r3, IPSR
 800e028:	617b      	str	r3, [r7, #20]
  return(result);
 800e02a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d028      	beq.n	800e082 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e030:	69bb      	ldr	r3, [r7, #24]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d005      	beq.n	800e042 <osMessageQueuePut+0x36>
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d002      	beq.n	800e042 <osMessageQueuePut+0x36>
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d003      	beq.n	800e04a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800e042:	f06f 0303 	mvn.w	r3, #3
 800e046:	61fb      	str	r3, [r7, #28]
 800e048:	e038      	b.n	800e0bc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800e04a:	2300      	movs	r3, #0
 800e04c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e04e:	f107 0210 	add.w	r2, r7, #16
 800e052:	2300      	movs	r3, #0
 800e054:	68b9      	ldr	r1, [r7, #8]
 800e056:	69b8      	ldr	r0, [r7, #24]
 800e058:	f001 f8b4 	bl	800f1c4 <xQueueGenericSendFromISR>
 800e05c:	4603      	mov	r3, r0
 800e05e:	2b01      	cmp	r3, #1
 800e060:	d003      	beq.n	800e06a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800e062:	f06f 0302 	mvn.w	r3, #2
 800e066:	61fb      	str	r3, [r7, #28]
 800e068:	e028      	b.n	800e0bc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d025      	beq.n	800e0bc <osMessageQueuePut+0xb0>
 800e070:	4b15      	ldr	r3, [pc, #84]	; (800e0c8 <osMessageQueuePut+0xbc>)
 800e072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e076:	601a      	str	r2, [r3, #0]
 800e078:	f3bf 8f4f 	dsb	sy
 800e07c:	f3bf 8f6f 	isb	sy
 800e080:	e01c      	b.n	800e0bc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e082:	69bb      	ldr	r3, [r7, #24]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d002      	beq.n	800e08e <osMessageQueuePut+0x82>
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d103      	bne.n	800e096 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800e08e:	f06f 0303 	mvn.w	r3, #3
 800e092:	61fb      	str	r3, [r7, #28]
 800e094:	e012      	b.n	800e0bc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e096:	2300      	movs	r3, #0
 800e098:	683a      	ldr	r2, [r7, #0]
 800e09a:	68b9      	ldr	r1, [r7, #8]
 800e09c:	69b8      	ldr	r0, [r7, #24]
 800e09e:	f000 ff93 	bl	800efc8 <xQueueGenericSend>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	2b01      	cmp	r3, #1
 800e0a6:	d009      	beq.n	800e0bc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d003      	beq.n	800e0b6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800e0ae:	f06f 0301 	mvn.w	r3, #1
 800e0b2:	61fb      	str	r3, [r7, #28]
 800e0b4:	e002      	b.n	800e0bc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800e0b6:	f06f 0302 	mvn.w	r3, #2
 800e0ba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e0bc:	69fb      	ldr	r3, [r7, #28]
}
 800e0be:	4618      	mov	r0, r3
 800e0c0:	3720      	adds	r7, #32
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}
 800e0c6:	bf00      	nop
 800e0c8:	e000ed04 	.word	0xe000ed04

0800e0cc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b088      	sub	sp, #32
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	60f8      	str	r0, [r7, #12]
 800e0d4:	60b9      	str	r1, [r7, #8]
 800e0d6:	607a      	str	r2, [r7, #4]
 800e0d8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e0e2:	f3ef 8305 	mrs	r3, IPSR
 800e0e6:	617b      	str	r3, [r7, #20]
  return(result);
 800e0e8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d028      	beq.n	800e140 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e0ee:	69bb      	ldr	r3, [r7, #24]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d005      	beq.n	800e100 <osMessageQueueGet+0x34>
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d002      	beq.n	800e100 <osMessageQueueGet+0x34>
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d003      	beq.n	800e108 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800e100:	f06f 0303 	mvn.w	r3, #3
 800e104:	61fb      	str	r3, [r7, #28]
 800e106:	e037      	b.n	800e178 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800e108:	2300      	movs	r3, #0
 800e10a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e10c:	f107 0310 	add.w	r3, r7, #16
 800e110:	461a      	mov	r2, r3
 800e112:	68b9      	ldr	r1, [r7, #8]
 800e114:	69b8      	ldr	r0, [r7, #24]
 800e116:	f001 f9d1 	bl	800f4bc <xQueueReceiveFromISR>
 800e11a:	4603      	mov	r3, r0
 800e11c:	2b01      	cmp	r3, #1
 800e11e:	d003      	beq.n	800e128 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800e120:	f06f 0302 	mvn.w	r3, #2
 800e124:	61fb      	str	r3, [r7, #28]
 800e126:	e027      	b.n	800e178 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800e128:	693b      	ldr	r3, [r7, #16]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d024      	beq.n	800e178 <osMessageQueueGet+0xac>
 800e12e:	4b15      	ldr	r3, [pc, #84]	; (800e184 <osMessageQueueGet+0xb8>)
 800e130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e134:	601a      	str	r2, [r3, #0]
 800e136:	f3bf 8f4f 	dsb	sy
 800e13a:	f3bf 8f6f 	isb	sy
 800e13e:	e01b      	b.n	800e178 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e140:	69bb      	ldr	r3, [r7, #24]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d002      	beq.n	800e14c <osMessageQueueGet+0x80>
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d103      	bne.n	800e154 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800e14c:	f06f 0303 	mvn.w	r3, #3
 800e150:	61fb      	str	r3, [r7, #28]
 800e152:	e011      	b.n	800e178 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e154:	683a      	ldr	r2, [r7, #0]
 800e156:	68b9      	ldr	r1, [r7, #8]
 800e158:	69b8      	ldr	r0, [r7, #24]
 800e15a:	f001 f8cf 	bl	800f2fc <xQueueReceive>
 800e15e:	4603      	mov	r3, r0
 800e160:	2b01      	cmp	r3, #1
 800e162:	d009      	beq.n	800e178 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d003      	beq.n	800e172 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800e16a:	f06f 0301 	mvn.w	r3, #1
 800e16e:	61fb      	str	r3, [r7, #28]
 800e170:	e002      	b.n	800e178 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800e172:	f06f 0302 	mvn.w	r3, #2
 800e176:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e178:	69fb      	ldr	r3, [r7, #28]
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	3720      	adds	r7, #32
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}
 800e182:	bf00      	nop
 800e184:	e000ed04 	.word	0xe000ed04

0800e188 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800e188:	b580      	push	{r7, lr}
 800e18a:	b08a      	sub	sp, #40	; 0x28
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800e194:	6a3b      	ldr	r3, [r7, #32]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d102      	bne.n	800e1a0 <osMessageQueueGetSpace+0x18>
    space = 0U;
 800e19a:	2300      	movs	r3, #0
 800e19c:	627b      	str	r3, [r7, #36]	; 0x24
 800e19e:	e023      	b.n	800e1e8 <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e1a0:	f3ef 8305 	mrs	r3, IPSR
 800e1a4:	61bb      	str	r3, [r7, #24]
  return(result);
 800e1a6:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d019      	beq.n	800e1e0 <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e1ac:	f3ef 8211 	mrs	r2, BASEPRI
 800e1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b4:	f383 8811 	msr	BASEPRI, r3
 800e1b8:	f3bf 8f6f 	isb	sy
 800e1bc:	f3bf 8f4f 	dsb	sy
 800e1c0:	613a      	str	r2, [r7, #16]
 800e1c2:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e1c4:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800e1c6:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800e1c8:	6a3b      	ldr	r3, [r7, #32]
 800e1ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e1cc:	6a3b      	ldr	r3, [r7, #32]
 800e1ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1d0:	1ad3      	subs	r3, r2, r3
 800e1d2:	627b      	str	r3, [r7, #36]	; 0x24
 800e1d4:	69fb      	ldr	r3, [r7, #28]
 800e1d6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e1d8:	697b      	ldr	r3, [r7, #20]
 800e1da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e1de:	e003      	b.n	800e1e8 <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800e1e0:	6a38      	ldr	r0, [r7, #32]
 800e1e2:	f001 f9eb 	bl	800f5bc <uxQueueSpacesAvailable>
 800e1e6:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return (space);
 800e1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	3728      	adds	r7, #40	; 0x28
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}

0800e1f2 <osMessageQueueReset>:

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 800e1f2:	b580      	push	{r7, lr}
 800e1f4:	b086      	sub	sp, #24
 800e1f6:	af00      	add	r7, sp, #0
 800e1f8:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e1fe:	f3ef 8305 	mrs	r3, IPSR
 800e202:	60fb      	str	r3, [r7, #12]
  return(result);
 800e204:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e206:	2b00      	cmp	r3, #0
 800e208:	d003      	beq.n	800e212 <osMessageQueueReset+0x20>
    stat = osErrorISR;
 800e20a:	f06f 0305 	mvn.w	r3, #5
 800e20e:	617b      	str	r3, [r7, #20]
 800e210:	e00c      	b.n	800e22c <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 800e212:	693b      	ldr	r3, [r7, #16]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d103      	bne.n	800e220 <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 800e218:	f06f 0303 	mvn.w	r3, #3
 800e21c:	617b      	str	r3, [r7, #20]
 800e21e:	e005      	b.n	800e22c <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 800e220:	2300      	movs	r3, #0
 800e222:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 800e224:	2100      	movs	r1, #0
 800e226:	6938      	ldr	r0, [r7, #16]
 800e228:	f000 fd26 	bl	800ec78 <xQueueGenericReset>
  }

  return (stat);
 800e22c:	697b      	ldr	r3, [r7, #20]
}
 800e22e:	4618      	mov	r0, r3
 800e230:	3718      	adds	r7, #24
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}
	...

0800e238 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e238:	b480      	push	{r7}
 800e23a:	b085      	sub	sp, #20
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	60f8      	str	r0, [r7, #12]
 800e240:	60b9      	str	r1, [r7, #8]
 800e242:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	4a07      	ldr	r2, [pc, #28]	; (800e264 <vApplicationGetIdleTaskMemory+0x2c>)
 800e248:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	4a06      	ldr	r2, [pc, #24]	; (800e268 <vApplicationGetIdleTaskMemory+0x30>)
 800e24e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2280      	movs	r2, #128	; 0x80
 800e254:	601a      	str	r2, [r3, #0]
}
 800e256:	bf00      	nop
 800e258:	3714      	adds	r7, #20
 800e25a:	46bd      	mov	sp, r7
 800e25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e260:	4770      	bx	lr
 800e262:	bf00      	nop
 800e264:	24000224 	.word	0x24000224
 800e268:	24000280 	.word	0x24000280

0800e26c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e26c:	b480      	push	{r7}
 800e26e:	b085      	sub	sp, #20
 800e270:	af00      	add	r7, sp, #0
 800e272:	60f8      	str	r0, [r7, #12]
 800e274:	60b9      	str	r1, [r7, #8]
 800e276:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	4a07      	ldr	r2, [pc, #28]	; (800e298 <vApplicationGetTimerTaskMemory+0x2c>)
 800e27c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	4a06      	ldr	r2, [pc, #24]	; (800e29c <vApplicationGetTimerTaskMemory+0x30>)
 800e282:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e28a:	601a      	str	r2, [r3, #0]
}
 800e28c:	bf00      	nop
 800e28e:	3714      	adds	r7, #20
 800e290:	46bd      	mov	sp, r7
 800e292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e296:	4770      	bx	lr
 800e298:	24000480 	.word	0x24000480
 800e29c:	240004dc 	.word	0x240004dc

0800e2a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b08a      	sub	sp, #40	; 0x28
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e2ac:	f001 fda0 	bl	800fdf0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e2b0:	4b5b      	ldr	r3, [pc, #364]	; (800e420 <pvPortMalloc+0x180>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d101      	bne.n	800e2bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e2b8:	f000 f920 	bl	800e4fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e2bc:	4b59      	ldr	r3, [pc, #356]	; (800e424 <pvPortMalloc+0x184>)
 800e2be:	681a      	ldr	r2, [r3, #0]
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	4013      	ands	r3, r2
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	f040 8093 	bne.w	800e3f0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d01d      	beq.n	800e30c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e2d0:	2208      	movs	r2, #8
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	4413      	add	r3, r2
 800e2d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	f003 0307 	and.w	r3, r3, #7
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d014      	beq.n	800e30c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	f023 0307 	bic.w	r3, r3, #7
 800e2e8:	3308      	adds	r3, #8
 800e2ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f003 0307 	and.w	r3, r3, #7
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d00a      	beq.n	800e30c <pvPortMalloc+0x6c>
	__asm volatile
 800e2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2fa:	f383 8811 	msr	BASEPRI, r3
 800e2fe:	f3bf 8f6f 	isb	sy
 800e302:	f3bf 8f4f 	dsb	sy
 800e306:	617b      	str	r3, [r7, #20]
}
 800e308:	bf00      	nop
 800e30a:	e7fe      	b.n	800e30a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d06e      	beq.n	800e3f0 <pvPortMalloc+0x150>
 800e312:	4b45      	ldr	r3, [pc, #276]	; (800e428 <pvPortMalloc+0x188>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	687a      	ldr	r2, [r7, #4]
 800e318:	429a      	cmp	r2, r3
 800e31a:	d869      	bhi.n	800e3f0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e31c:	4b43      	ldr	r3, [pc, #268]	; (800e42c <pvPortMalloc+0x18c>)
 800e31e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e320:	4b42      	ldr	r3, [pc, #264]	; (800e42c <pvPortMalloc+0x18c>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e326:	e004      	b.n	800e332 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e32a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e334:	685b      	ldr	r3, [r3, #4]
 800e336:	687a      	ldr	r2, [r7, #4]
 800e338:	429a      	cmp	r2, r3
 800e33a:	d903      	bls.n	800e344 <pvPortMalloc+0xa4>
 800e33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d1f1      	bne.n	800e328 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e344:	4b36      	ldr	r3, [pc, #216]	; (800e420 <pvPortMalloc+0x180>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e34a:	429a      	cmp	r2, r3
 800e34c:	d050      	beq.n	800e3f0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e34e:	6a3b      	ldr	r3, [r7, #32]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	2208      	movs	r2, #8
 800e354:	4413      	add	r3, r2
 800e356:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e35a:	681a      	ldr	r2, [r3, #0]
 800e35c:	6a3b      	ldr	r3, [r7, #32]
 800e35e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e362:	685a      	ldr	r2, [r3, #4]
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	1ad2      	subs	r2, r2, r3
 800e368:	2308      	movs	r3, #8
 800e36a:	005b      	lsls	r3, r3, #1
 800e36c:	429a      	cmp	r2, r3
 800e36e:	d91f      	bls.n	800e3b0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	4413      	add	r3, r2
 800e376:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e378:	69bb      	ldr	r3, [r7, #24]
 800e37a:	f003 0307 	and.w	r3, r3, #7
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d00a      	beq.n	800e398 <pvPortMalloc+0xf8>
	__asm volatile
 800e382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e386:	f383 8811 	msr	BASEPRI, r3
 800e38a:	f3bf 8f6f 	isb	sy
 800e38e:	f3bf 8f4f 	dsb	sy
 800e392:	613b      	str	r3, [r7, #16]
}
 800e394:	bf00      	nop
 800e396:	e7fe      	b.n	800e396 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e39a:	685a      	ldr	r2, [r3, #4]
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	1ad2      	subs	r2, r2, r3
 800e3a0:	69bb      	ldr	r3, [r7, #24]
 800e3a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a6:	687a      	ldr	r2, [r7, #4]
 800e3a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e3aa:	69b8      	ldr	r0, [r7, #24]
 800e3ac:	f000 f908 	bl	800e5c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e3b0:	4b1d      	ldr	r3, [pc, #116]	; (800e428 <pvPortMalloc+0x188>)
 800e3b2:	681a      	ldr	r2, [r3, #0]
 800e3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b6:	685b      	ldr	r3, [r3, #4]
 800e3b8:	1ad3      	subs	r3, r2, r3
 800e3ba:	4a1b      	ldr	r2, [pc, #108]	; (800e428 <pvPortMalloc+0x188>)
 800e3bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e3be:	4b1a      	ldr	r3, [pc, #104]	; (800e428 <pvPortMalloc+0x188>)
 800e3c0:	681a      	ldr	r2, [r3, #0]
 800e3c2:	4b1b      	ldr	r3, [pc, #108]	; (800e430 <pvPortMalloc+0x190>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	d203      	bcs.n	800e3d2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e3ca:	4b17      	ldr	r3, [pc, #92]	; (800e428 <pvPortMalloc+0x188>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	4a18      	ldr	r2, [pc, #96]	; (800e430 <pvPortMalloc+0x190>)
 800e3d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d4:	685a      	ldr	r2, [r3, #4]
 800e3d6:	4b13      	ldr	r3, [pc, #76]	; (800e424 <pvPortMalloc+0x184>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	431a      	orrs	r2, r3
 800e3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e3e6:	4b13      	ldr	r3, [pc, #76]	; (800e434 <pvPortMalloc+0x194>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	3301      	adds	r3, #1
 800e3ec:	4a11      	ldr	r2, [pc, #68]	; (800e434 <pvPortMalloc+0x194>)
 800e3ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e3f0:	f001 fd0c 	bl	800fe0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e3f4:	69fb      	ldr	r3, [r7, #28]
 800e3f6:	f003 0307 	and.w	r3, r3, #7
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d00a      	beq.n	800e414 <pvPortMalloc+0x174>
	__asm volatile
 800e3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e402:	f383 8811 	msr	BASEPRI, r3
 800e406:	f3bf 8f6f 	isb	sy
 800e40a:	f3bf 8f4f 	dsb	sy
 800e40e:	60fb      	str	r3, [r7, #12]
}
 800e410:	bf00      	nop
 800e412:	e7fe      	b.n	800e412 <pvPortMalloc+0x172>
	return pvReturn;
 800e414:	69fb      	ldr	r3, [r7, #28]
}
 800e416:	4618      	mov	r0, r3
 800e418:	3728      	adds	r7, #40	; 0x28
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}
 800e41e:	bf00      	nop
 800e420:	240044e4 	.word	0x240044e4
 800e424:	240044f8 	.word	0x240044f8
 800e428:	240044e8 	.word	0x240044e8
 800e42c:	240044dc 	.word	0x240044dc
 800e430:	240044ec 	.word	0x240044ec
 800e434:	240044f0 	.word	0x240044f0

0800e438 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b086      	sub	sp, #24
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d04d      	beq.n	800e4e6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e44a:	2308      	movs	r3, #8
 800e44c:	425b      	negs	r3, r3
 800e44e:	697a      	ldr	r2, [r7, #20]
 800e450:	4413      	add	r3, r2
 800e452:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	685a      	ldr	r2, [r3, #4]
 800e45c:	4b24      	ldr	r3, [pc, #144]	; (800e4f0 <vPortFree+0xb8>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	4013      	ands	r3, r2
 800e462:	2b00      	cmp	r3, #0
 800e464:	d10a      	bne.n	800e47c <vPortFree+0x44>
	__asm volatile
 800e466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e46a:	f383 8811 	msr	BASEPRI, r3
 800e46e:	f3bf 8f6f 	isb	sy
 800e472:	f3bf 8f4f 	dsb	sy
 800e476:	60fb      	str	r3, [r7, #12]
}
 800e478:	bf00      	nop
 800e47a:	e7fe      	b.n	800e47a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d00a      	beq.n	800e49a <vPortFree+0x62>
	__asm volatile
 800e484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e488:	f383 8811 	msr	BASEPRI, r3
 800e48c:	f3bf 8f6f 	isb	sy
 800e490:	f3bf 8f4f 	dsb	sy
 800e494:	60bb      	str	r3, [r7, #8]
}
 800e496:	bf00      	nop
 800e498:	e7fe      	b.n	800e498 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e49a:	693b      	ldr	r3, [r7, #16]
 800e49c:	685a      	ldr	r2, [r3, #4]
 800e49e:	4b14      	ldr	r3, [pc, #80]	; (800e4f0 <vPortFree+0xb8>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	4013      	ands	r3, r2
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d01e      	beq.n	800e4e6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d11a      	bne.n	800e4e6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e4b0:	693b      	ldr	r3, [r7, #16]
 800e4b2:	685a      	ldr	r2, [r3, #4]
 800e4b4:	4b0e      	ldr	r3, [pc, #56]	; (800e4f0 <vPortFree+0xb8>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	43db      	mvns	r3, r3
 800e4ba:	401a      	ands	r2, r3
 800e4bc:	693b      	ldr	r3, [r7, #16]
 800e4be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e4c0:	f001 fc96 	bl	800fdf0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e4c4:	693b      	ldr	r3, [r7, #16]
 800e4c6:	685a      	ldr	r2, [r3, #4]
 800e4c8:	4b0a      	ldr	r3, [pc, #40]	; (800e4f4 <vPortFree+0xbc>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	4413      	add	r3, r2
 800e4ce:	4a09      	ldr	r2, [pc, #36]	; (800e4f4 <vPortFree+0xbc>)
 800e4d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e4d2:	6938      	ldr	r0, [r7, #16]
 800e4d4:	f000 f874 	bl	800e5c0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e4d8:	4b07      	ldr	r3, [pc, #28]	; (800e4f8 <vPortFree+0xc0>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	3301      	adds	r3, #1
 800e4de:	4a06      	ldr	r2, [pc, #24]	; (800e4f8 <vPortFree+0xc0>)
 800e4e0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e4e2:	f001 fc93 	bl	800fe0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e4e6:	bf00      	nop
 800e4e8:	3718      	adds	r7, #24
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}
 800e4ee:	bf00      	nop
 800e4f0:	240044f8 	.word	0x240044f8
 800e4f4:	240044e8 	.word	0x240044e8
 800e4f8:	240044f4 	.word	0x240044f4

0800e4fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b085      	sub	sp, #20
 800e500:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e502:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e506:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e508:	4b27      	ldr	r3, [pc, #156]	; (800e5a8 <prvHeapInit+0xac>)
 800e50a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	f003 0307 	and.w	r3, r3, #7
 800e512:	2b00      	cmp	r3, #0
 800e514:	d00c      	beq.n	800e530 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	3307      	adds	r3, #7
 800e51a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	f023 0307 	bic.w	r3, r3, #7
 800e522:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e524:	68ba      	ldr	r2, [r7, #8]
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	1ad3      	subs	r3, r2, r3
 800e52a:	4a1f      	ldr	r2, [pc, #124]	; (800e5a8 <prvHeapInit+0xac>)
 800e52c:	4413      	add	r3, r2
 800e52e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e534:	4a1d      	ldr	r2, [pc, #116]	; (800e5ac <prvHeapInit+0xb0>)
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e53a:	4b1c      	ldr	r3, [pc, #112]	; (800e5ac <prvHeapInit+0xb0>)
 800e53c:	2200      	movs	r2, #0
 800e53e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	68ba      	ldr	r2, [r7, #8]
 800e544:	4413      	add	r3, r2
 800e546:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e548:	2208      	movs	r2, #8
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	1a9b      	subs	r3, r3, r2
 800e54e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	f023 0307 	bic.w	r3, r3, #7
 800e556:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	4a15      	ldr	r2, [pc, #84]	; (800e5b0 <prvHeapInit+0xb4>)
 800e55c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e55e:	4b14      	ldr	r3, [pc, #80]	; (800e5b0 <prvHeapInit+0xb4>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	2200      	movs	r2, #0
 800e564:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e566:	4b12      	ldr	r3, [pc, #72]	; (800e5b0 <prvHeapInit+0xb4>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	2200      	movs	r2, #0
 800e56c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e572:	683b      	ldr	r3, [r7, #0]
 800e574:	68fa      	ldr	r2, [r7, #12]
 800e576:	1ad2      	subs	r2, r2, r3
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e57c:	4b0c      	ldr	r3, [pc, #48]	; (800e5b0 <prvHeapInit+0xb4>)
 800e57e:	681a      	ldr	r2, [r3, #0]
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	685b      	ldr	r3, [r3, #4]
 800e588:	4a0a      	ldr	r2, [pc, #40]	; (800e5b4 <prvHeapInit+0xb8>)
 800e58a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	685b      	ldr	r3, [r3, #4]
 800e590:	4a09      	ldr	r2, [pc, #36]	; (800e5b8 <prvHeapInit+0xbc>)
 800e592:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e594:	4b09      	ldr	r3, [pc, #36]	; (800e5bc <prvHeapInit+0xc0>)
 800e596:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e59a:	601a      	str	r2, [r3, #0]
}
 800e59c:	bf00      	nop
 800e59e:	3714      	adds	r7, #20
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a6:	4770      	bx	lr
 800e5a8:	240008dc 	.word	0x240008dc
 800e5ac:	240044dc 	.word	0x240044dc
 800e5b0:	240044e4 	.word	0x240044e4
 800e5b4:	240044ec 	.word	0x240044ec
 800e5b8:	240044e8 	.word	0x240044e8
 800e5bc:	240044f8 	.word	0x240044f8

0800e5c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	b085      	sub	sp, #20
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e5c8:	4b28      	ldr	r3, [pc, #160]	; (800e66c <prvInsertBlockIntoFreeList+0xac>)
 800e5ca:	60fb      	str	r3, [r7, #12]
 800e5cc:	e002      	b.n	800e5d4 <prvInsertBlockIntoFreeList+0x14>
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	60fb      	str	r3, [r7, #12]
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	687a      	ldr	r2, [r7, #4]
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d8f7      	bhi.n	800e5ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	685b      	ldr	r3, [r3, #4]
 800e5e6:	68ba      	ldr	r2, [r7, #8]
 800e5e8:	4413      	add	r3, r2
 800e5ea:	687a      	ldr	r2, [r7, #4]
 800e5ec:	429a      	cmp	r2, r3
 800e5ee:	d108      	bne.n	800e602 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	685a      	ldr	r2, [r3, #4]
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	685b      	ldr	r3, [r3, #4]
 800e5f8:	441a      	add	r2, r3
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	685b      	ldr	r3, [r3, #4]
 800e60a:	68ba      	ldr	r2, [r7, #8]
 800e60c:	441a      	add	r2, r3
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	429a      	cmp	r2, r3
 800e614:	d118      	bne.n	800e648 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	681a      	ldr	r2, [r3, #0]
 800e61a:	4b15      	ldr	r3, [pc, #84]	; (800e670 <prvInsertBlockIntoFreeList+0xb0>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	429a      	cmp	r2, r3
 800e620:	d00d      	beq.n	800e63e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	685a      	ldr	r2, [r3, #4]
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	685b      	ldr	r3, [r3, #4]
 800e62c:	441a      	add	r2, r3
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	681a      	ldr	r2, [r3, #0]
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	601a      	str	r2, [r3, #0]
 800e63c:	e008      	b.n	800e650 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e63e:	4b0c      	ldr	r3, [pc, #48]	; (800e670 <prvInsertBlockIntoFreeList+0xb0>)
 800e640:	681a      	ldr	r2, [r3, #0]
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	601a      	str	r2, [r3, #0]
 800e646:	e003      	b.n	800e650 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	681a      	ldr	r2, [r3, #0]
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e650:	68fa      	ldr	r2, [r7, #12]
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	429a      	cmp	r2, r3
 800e656:	d002      	beq.n	800e65e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	687a      	ldr	r2, [r7, #4]
 800e65c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e65e:	bf00      	nop
 800e660:	3714      	adds	r7, #20
 800e662:	46bd      	mov	sp, r7
 800e664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e668:	4770      	bx	lr
 800e66a:	bf00      	nop
 800e66c:	240044dc 	.word	0x240044dc
 800e670:	240044e4 	.word	0x240044e4

0800e674 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e674:	b480      	push	{r7}
 800e676:	b083      	sub	sp, #12
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f103 0208 	add.w	r2, r3, #8
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f04f 32ff 	mov.w	r2, #4294967295
 800e68c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f103 0208 	add.w	r2, r3, #8
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f103 0208 	add.w	r2, r3, #8
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e6a8:	bf00      	nop
 800e6aa:	370c      	adds	r7, #12
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b2:	4770      	bx	lr

0800e6b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b083      	sub	sp, #12
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e6c2:	bf00      	nop
 800e6c4:	370c      	adds	r7, #12
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6cc:	4770      	bx	lr

0800e6ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e6ce:	b480      	push	{r7}
 800e6d0:	b085      	sub	sp, #20
 800e6d2:	af00      	add	r7, sp, #0
 800e6d4:	6078      	str	r0, [r7, #4]
 800e6d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	685b      	ldr	r3, [r3, #4]
 800e6dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	68fa      	ldr	r2, [r7, #12]
 800e6e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	689a      	ldr	r2, [r3, #8]
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	689b      	ldr	r3, [r3, #8]
 800e6f0:	683a      	ldr	r2, [r7, #0]
 800e6f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	683a      	ldr	r2, [r7, #0]
 800e6f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	687a      	ldr	r2, [r7, #4]
 800e6fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	1c5a      	adds	r2, r3, #1
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	601a      	str	r2, [r3, #0]
}
 800e70a:	bf00      	nop
 800e70c:	3714      	adds	r7, #20
 800e70e:	46bd      	mov	sp, r7
 800e710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e714:	4770      	bx	lr

0800e716 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e716:	b480      	push	{r7}
 800e718:	b085      	sub	sp, #20
 800e71a:	af00      	add	r7, sp, #0
 800e71c:	6078      	str	r0, [r7, #4]
 800e71e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e72c:	d103      	bne.n	800e736 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	691b      	ldr	r3, [r3, #16]
 800e732:	60fb      	str	r3, [r7, #12]
 800e734:	e00c      	b.n	800e750 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	3308      	adds	r3, #8
 800e73a:	60fb      	str	r3, [r7, #12]
 800e73c:	e002      	b.n	800e744 <vListInsert+0x2e>
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	685b      	ldr	r3, [r3, #4]
 800e742:	60fb      	str	r3, [r7, #12]
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	685b      	ldr	r3, [r3, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	68ba      	ldr	r2, [r7, #8]
 800e74c:	429a      	cmp	r2, r3
 800e74e:	d2f6      	bcs.n	800e73e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	685a      	ldr	r2, [r3, #4]
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	685b      	ldr	r3, [r3, #4]
 800e75c:	683a      	ldr	r2, [r7, #0]
 800e75e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	68fa      	ldr	r2, [r7, #12]
 800e764:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	683a      	ldr	r2, [r7, #0]
 800e76a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	687a      	ldr	r2, [r7, #4]
 800e770:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	1c5a      	adds	r2, r3, #1
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	601a      	str	r2, [r3, #0]
}
 800e77c:	bf00      	nop
 800e77e:	3714      	adds	r7, #20
 800e780:	46bd      	mov	sp, r7
 800e782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e786:	4770      	bx	lr

0800e788 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e788:	b480      	push	{r7}
 800e78a:	b085      	sub	sp, #20
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	691b      	ldr	r3, [r3, #16]
 800e794:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	685b      	ldr	r3, [r3, #4]
 800e79a:	687a      	ldr	r2, [r7, #4]
 800e79c:	6892      	ldr	r2, [r2, #8]
 800e79e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	689b      	ldr	r3, [r3, #8]
 800e7a4:	687a      	ldr	r2, [r7, #4]
 800e7a6:	6852      	ldr	r2, [r2, #4]
 800e7a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	687a      	ldr	r2, [r7, #4]
 800e7b0:	429a      	cmp	r2, r3
 800e7b2:	d103      	bne.n	800e7bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	689a      	ldr	r2, [r3, #8]
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2200      	movs	r2, #0
 800e7c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	1e5a      	subs	r2, r3, #1
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	681b      	ldr	r3, [r3, #0]
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3714      	adds	r7, #20
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7da:	4770      	bx	lr

0800e7dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e7dc:	b480      	push	{r7}
 800e7de:	b085      	sub	sp, #20
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	60f8      	str	r0, [r7, #12]
 800e7e4:	60b9      	str	r1, [r7, #8]
 800e7e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	3b04      	subs	r3, #4
 800e7ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e7f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	3b04      	subs	r3, #4
 800e7fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	f023 0201 	bic.w	r2, r3, #1
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	3b04      	subs	r3, #4
 800e80a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e80c:	4a0c      	ldr	r2, [pc, #48]	; (800e840 <pxPortInitialiseStack+0x64>)
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	3b14      	subs	r3, #20
 800e816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e818:	687a      	ldr	r2, [r7, #4]
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	3b04      	subs	r3, #4
 800e822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	f06f 0202 	mvn.w	r2, #2
 800e82a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	3b20      	subs	r3, #32
 800e830:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e832:	68fb      	ldr	r3, [r7, #12]
}
 800e834:	4618      	mov	r0, r3
 800e836:	3714      	adds	r7, #20
 800e838:	46bd      	mov	sp, r7
 800e83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83e:	4770      	bx	lr
 800e840:	0800e845 	.word	0x0800e845

0800e844 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e844:	b480      	push	{r7}
 800e846:	b085      	sub	sp, #20
 800e848:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e84a:	2300      	movs	r3, #0
 800e84c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e84e:	4b12      	ldr	r3, [pc, #72]	; (800e898 <prvTaskExitError+0x54>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e856:	d00a      	beq.n	800e86e <prvTaskExitError+0x2a>
	__asm volatile
 800e858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e85c:	f383 8811 	msr	BASEPRI, r3
 800e860:	f3bf 8f6f 	isb	sy
 800e864:	f3bf 8f4f 	dsb	sy
 800e868:	60fb      	str	r3, [r7, #12]
}
 800e86a:	bf00      	nop
 800e86c:	e7fe      	b.n	800e86c <prvTaskExitError+0x28>
	__asm volatile
 800e86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e872:	f383 8811 	msr	BASEPRI, r3
 800e876:	f3bf 8f6f 	isb	sy
 800e87a:	f3bf 8f4f 	dsb	sy
 800e87e:	60bb      	str	r3, [r7, #8]
}
 800e880:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e882:	bf00      	nop
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d0fc      	beq.n	800e884 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e88a:	bf00      	nop
 800e88c:	bf00      	nop
 800e88e:	3714      	adds	r7, #20
 800e890:	46bd      	mov	sp, r7
 800e892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e896:	4770      	bx	lr
 800e898:	24000020 	.word	0x24000020
 800e89c:	00000000 	.word	0x00000000

0800e8a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e8a0:	4b07      	ldr	r3, [pc, #28]	; (800e8c0 <pxCurrentTCBConst2>)
 800e8a2:	6819      	ldr	r1, [r3, #0]
 800e8a4:	6808      	ldr	r0, [r1, #0]
 800e8a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8aa:	f380 8809 	msr	PSP, r0
 800e8ae:	f3bf 8f6f 	isb	sy
 800e8b2:	f04f 0000 	mov.w	r0, #0
 800e8b6:	f380 8811 	msr	BASEPRI, r0
 800e8ba:	4770      	bx	lr
 800e8bc:	f3af 8000 	nop.w

0800e8c0 <pxCurrentTCBConst2>:
 800e8c0:	24004504 	.word	0x24004504
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e8c4:	bf00      	nop
 800e8c6:	bf00      	nop

0800e8c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e8c8:	4808      	ldr	r0, [pc, #32]	; (800e8ec <prvPortStartFirstTask+0x24>)
 800e8ca:	6800      	ldr	r0, [r0, #0]
 800e8cc:	6800      	ldr	r0, [r0, #0]
 800e8ce:	f380 8808 	msr	MSP, r0
 800e8d2:	f04f 0000 	mov.w	r0, #0
 800e8d6:	f380 8814 	msr	CONTROL, r0
 800e8da:	b662      	cpsie	i
 800e8dc:	b661      	cpsie	f
 800e8de:	f3bf 8f4f 	dsb	sy
 800e8e2:	f3bf 8f6f 	isb	sy
 800e8e6:	df00      	svc	0
 800e8e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e8ea:	bf00      	nop
 800e8ec:	e000ed08 	.word	0xe000ed08

0800e8f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b086      	sub	sp, #24
 800e8f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e8f6:	4b46      	ldr	r3, [pc, #280]	; (800ea10 <xPortStartScheduler+0x120>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	4a46      	ldr	r2, [pc, #280]	; (800ea14 <xPortStartScheduler+0x124>)
 800e8fc:	4293      	cmp	r3, r2
 800e8fe:	d10a      	bne.n	800e916 <xPortStartScheduler+0x26>
	__asm volatile
 800e900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e904:	f383 8811 	msr	BASEPRI, r3
 800e908:	f3bf 8f6f 	isb	sy
 800e90c:	f3bf 8f4f 	dsb	sy
 800e910:	613b      	str	r3, [r7, #16]
}
 800e912:	bf00      	nop
 800e914:	e7fe      	b.n	800e914 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e916:	4b3e      	ldr	r3, [pc, #248]	; (800ea10 <xPortStartScheduler+0x120>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	4a3f      	ldr	r2, [pc, #252]	; (800ea18 <xPortStartScheduler+0x128>)
 800e91c:	4293      	cmp	r3, r2
 800e91e:	d10a      	bne.n	800e936 <xPortStartScheduler+0x46>
	__asm volatile
 800e920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e924:	f383 8811 	msr	BASEPRI, r3
 800e928:	f3bf 8f6f 	isb	sy
 800e92c:	f3bf 8f4f 	dsb	sy
 800e930:	60fb      	str	r3, [r7, #12]
}
 800e932:	bf00      	nop
 800e934:	e7fe      	b.n	800e934 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e936:	4b39      	ldr	r3, [pc, #228]	; (800ea1c <xPortStartScheduler+0x12c>)
 800e938:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e93a:	697b      	ldr	r3, [r7, #20]
 800e93c:	781b      	ldrb	r3, [r3, #0]
 800e93e:	b2db      	uxtb	r3, r3
 800e940:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e942:	697b      	ldr	r3, [r7, #20]
 800e944:	22ff      	movs	r2, #255	; 0xff
 800e946:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	781b      	ldrb	r3, [r3, #0]
 800e94c:	b2db      	uxtb	r3, r3
 800e94e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e950:	78fb      	ldrb	r3, [r7, #3]
 800e952:	b2db      	uxtb	r3, r3
 800e954:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e958:	b2da      	uxtb	r2, r3
 800e95a:	4b31      	ldr	r3, [pc, #196]	; (800ea20 <xPortStartScheduler+0x130>)
 800e95c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e95e:	4b31      	ldr	r3, [pc, #196]	; (800ea24 <xPortStartScheduler+0x134>)
 800e960:	2207      	movs	r2, #7
 800e962:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e964:	e009      	b.n	800e97a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e966:	4b2f      	ldr	r3, [pc, #188]	; (800ea24 <xPortStartScheduler+0x134>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	3b01      	subs	r3, #1
 800e96c:	4a2d      	ldr	r2, [pc, #180]	; (800ea24 <xPortStartScheduler+0x134>)
 800e96e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e970:	78fb      	ldrb	r3, [r7, #3]
 800e972:	b2db      	uxtb	r3, r3
 800e974:	005b      	lsls	r3, r3, #1
 800e976:	b2db      	uxtb	r3, r3
 800e978:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e97a:	78fb      	ldrb	r3, [r7, #3]
 800e97c:	b2db      	uxtb	r3, r3
 800e97e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e982:	2b80      	cmp	r3, #128	; 0x80
 800e984:	d0ef      	beq.n	800e966 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e986:	4b27      	ldr	r3, [pc, #156]	; (800ea24 <xPortStartScheduler+0x134>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	f1c3 0307 	rsb	r3, r3, #7
 800e98e:	2b04      	cmp	r3, #4
 800e990:	d00a      	beq.n	800e9a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800e992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e996:	f383 8811 	msr	BASEPRI, r3
 800e99a:	f3bf 8f6f 	isb	sy
 800e99e:	f3bf 8f4f 	dsb	sy
 800e9a2:	60bb      	str	r3, [r7, #8]
}
 800e9a4:	bf00      	nop
 800e9a6:	e7fe      	b.n	800e9a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e9a8:	4b1e      	ldr	r3, [pc, #120]	; (800ea24 <xPortStartScheduler+0x134>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	021b      	lsls	r3, r3, #8
 800e9ae:	4a1d      	ldr	r2, [pc, #116]	; (800ea24 <xPortStartScheduler+0x134>)
 800e9b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e9b2:	4b1c      	ldr	r3, [pc, #112]	; (800ea24 <xPortStartScheduler+0x134>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e9ba:	4a1a      	ldr	r2, [pc, #104]	; (800ea24 <xPortStartScheduler+0x134>)
 800e9bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	b2da      	uxtb	r2, r3
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e9c6:	4b18      	ldr	r3, [pc, #96]	; (800ea28 <xPortStartScheduler+0x138>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	4a17      	ldr	r2, [pc, #92]	; (800ea28 <xPortStartScheduler+0x138>)
 800e9cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e9d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e9d2:	4b15      	ldr	r3, [pc, #84]	; (800ea28 <xPortStartScheduler+0x138>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	4a14      	ldr	r2, [pc, #80]	; (800ea28 <xPortStartScheduler+0x138>)
 800e9d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e9dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e9de:	f000 f8dd 	bl	800eb9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e9e2:	4b12      	ldr	r3, [pc, #72]	; (800ea2c <xPortStartScheduler+0x13c>)
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e9e8:	f000 f8fc 	bl	800ebe4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e9ec:	4b10      	ldr	r3, [pc, #64]	; (800ea30 <xPortStartScheduler+0x140>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	4a0f      	ldr	r2, [pc, #60]	; (800ea30 <xPortStartScheduler+0x140>)
 800e9f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e9f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e9f8:	f7ff ff66 	bl	800e8c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e9fc:	f001 fb6e 	bl	80100dc <vTaskSwitchContext>
	prvTaskExitError();
 800ea00:	f7ff ff20 	bl	800e844 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ea04:	2300      	movs	r3, #0
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	3718      	adds	r7, #24
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}
 800ea0e:	bf00      	nop
 800ea10:	e000ed00 	.word	0xe000ed00
 800ea14:	410fc271 	.word	0x410fc271
 800ea18:	410fc270 	.word	0x410fc270
 800ea1c:	e000e400 	.word	0xe000e400
 800ea20:	240044fc 	.word	0x240044fc
 800ea24:	24004500 	.word	0x24004500
 800ea28:	e000ed20 	.word	0xe000ed20
 800ea2c:	24000020 	.word	0x24000020
 800ea30:	e000ef34 	.word	0xe000ef34

0800ea34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ea34:	b480      	push	{r7}
 800ea36:	b083      	sub	sp, #12
 800ea38:	af00      	add	r7, sp, #0
	__asm volatile
 800ea3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea3e:	f383 8811 	msr	BASEPRI, r3
 800ea42:	f3bf 8f6f 	isb	sy
 800ea46:	f3bf 8f4f 	dsb	sy
 800ea4a:	607b      	str	r3, [r7, #4]
}
 800ea4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ea4e:	4b0f      	ldr	r3, [pc, #60]	; (800ea8c <vPortEnterCritical+0x58>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	3301      	adds	r3, #1
 800ea54:	4a0d      	ldr	r2, [pc, #52]	; (800ea8c <vPortEnterCritical+0x58>)
 800ea56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ea58:	4b0c      	ldr	r3, [pc, #48]	; (800ea8c <vPortEnterCritical+0x58>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	2b01      	cmp	r3, #1
 800ea5e:	d10f      	bne.n	800ea80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ea60:	4b0b      	ldr	r3, [pc, #44]	; (800ea90 <vPortEnterCritical+0x5c>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	b2db      	uxtb	r3, r3
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d00a      	beq.n	800ea80 <vPortEnterCritical+0x4c>
	__asm volatile
 800ea6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea6e:	f383 8811 	msr	BASEPRI, r3
 800ea72:	f3bf 8f6f 	isb	sy
 800ea76:	f3bf 8f4f 	dsb	sy
 800ea7a:	603b      	str	r3, [r7, #0]
}
 800ea7c:	bf00      	nop
 800ea7e:	e7fe      	b.n	800ea7e <vPortEnterCritical+0x4a>
	}
}
 800ea80:	bf00      	nop
 800ea82:	370c      	adds	r7, #12
 800ea84:	46bd      	mov	sp, r7
 800ea86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8a:	4770      	bx	lr
 800ea8c:	24000020 	.word	0x24000020
 800ea90:	e000ed04 	.word	0xe000ed04

0800ea94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ea94:	b480      	push	{r7}
 800ea96:	b083      	sub	sp, #12
 800ea98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ea9a:	4b12      	ldr	r3, [pc, #72]	; (800eae4 <vPortExitCritical+0x50>)
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d10a      	bne.n	800eab8 <vPortExitCritical+0x24>
	__asm volatile
 800eaa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa6:	f383 8811 	msr	BASEPRI, r3
 800eaaa:	f3bf 8f6f 	isb	sy
 800eaae:	f3bf 8f4f 	dsb	sy
 800eab2:	607b      	str	r3, [r7, #4]
}
 800eab4:	bf00      	nop
 800eab6:	e7fe      	b.n	800eab6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800eab8:	4b0a      	ldr	r3, [pc, #40]	; (800eae4 <vPortExitCritical+0x50>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	3b01      	subs	r3, #1
 800eabe:	4a09      	ldr	r2, [pc, #36]	; (800eae4 <vPortExitCritical+0x50>)
 800eac0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800eac2:	4b08      	ldr	r3, [pc, #32]	; (800eae4 <vPortExitCritical+0x50>)
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d105      	bne.n	800ead6 <vPortExitCritical+0x42>
 800eaca:	2300      	movs	r3, #0
 800eacc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	f383 8811 	msr	BASEPRI, r3
}
 800ead4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ead6:	bf00      	nop
 800ead8:	370c      	adds	r7, #12
 800eada:	46bd      	mov	sp, r7
 800eadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae0:	4770      	bx	lr
 800eae2:	bf00      	nop
 800eae4:	24000020 	.word	0x24000020
	...

0800eaf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800eaf0:	f3ef 8009 	mrs	r0, PSP
 800eaf4:	f3bf 8f6f 	isb	sy
 800eaf8:	4b15      	ldr	r3, [pc, #84]	; (800eb50 <pxCurrentTCBConst>)
 800eafa:	681a      	ldr	r2, [r3, #0]
 800eafc:	f01e 0f10 	tst.w	lr, #16
 800eb00:	bf08      	it	eq
 800eb02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800eb06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb0a:	6010      	str	r0, [r2, #0]
 800eb0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800eb10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800eb14:	f380 8811 	msr	BASEPRI, r0
 800eb18:	f3bf 8f4f 	dsb	sy
 800eb1c:	f3bf 8f6f 	isb	sy
 800eb20:	f001 fadc 	bl	80100dc <vTaskSwitchContext>
 800eb24:	f04f 0000 	mov.w	r0, #0
 800eb28:	f380 8811 	msr	BASEPRI, r0
 800eb2c:	bc09      	pop	{r0, r3}
 800eb2e:	6819      	ldr	r1, [r3, #0]
 800eb30:	6808      	ldr	r0, [r1, #0]
 800eb32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb36:	f01e 0f10 	tst.w	lr, #16
 800eb3a:	bf08      	it	eq
 800eb3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800eb40:	f380 8809 	msr	PSP, r0
 800eb44:	f3bf 8f6f 	isb	sy
 800eb48:	4770      	bx	lr
 800eb4a:	bf00      	nop
 800eb4c:	f3af 8000 	nop.w

0800eb50 <pxCurrentTCBConst>:
 800eb50:	24004504 	.word	0x24004504
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800eb54:	bf00      	nop
 800eb56:	bf00      	nop

0800eb58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b082      	sub	sp, #8
 800eb5c:	af00      	add	r7, sp, #0
	__asm volatile
 800eb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb62:	f383 8811 	msr	BASEPRI, r3
 800eb66:	f3bf 8f6f 	isb	sy
 800eb6a:	f3bf 8f4f 	dsb	sy
 800eb6e:	607b      	str	r3, [r7, #4]
}
 800eb70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800eb72:	f001 f9f9 	bl	800ff68 <xTaskIncrementTick>
 800eb76:	4603      	mov	r3, r0
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d003      	beq.n	800eb84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eb7c:	4b06      	ldr	r3, [pc, #24]	; (800eb98 <xPortSysTickHandler+0x40>)
 800eb7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb82:	601a      	str	r2, [r3, #0]
 800eb84:	2300      	movs	r3, #0
 800eb86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	f383 8811 	msr	BASEPRI, r3
}
 800eb8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800eb90:	bf00      	nop
 800eb92:	3708      	adds	r7, #8
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}
 800eb98:	e000ed04 	.word	0xe000ed04

0800eb9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800eba0:	4b0b      	ldr	r3, [pc, #44]	; (800ebd0 <vPortSetupTimerInterrupt+0x34>)
 800eba2:	2200      	movs	r2, #0
 800eba4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eba6:	4b0b      	ldr	r3, [pc, #44]	; (800ebd4 <vPortSetupTimerInterrupt+0x38>)
 800eba8:	2200      	movs	r2, #0
 800ebaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ebac:	4b0a      	ldr	r3, [pc, #40]	; (800ebd8 <vPortSetupTimerInterrupt+0x3c>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	4a0a      	ldr	r2, [pc, #40]	; (800ebdc <vPortSetupTimerInterrupt+0x40>)
 800ebb2:	fba2 2303 	umull	r2, r3, r2, r3
 800ebb6:	099b      	lsrs	r3, r3, #6
 800ebb8:	4a09      	ldr	r2, [pc, #36]	; (800ebe0 <vPortSetupTimerInterrupt+0x44>)
 800ebba:	3b01      	subs	r3, #1
 800ebbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ebbe:	4b04      	ldr	r3, [pc, #16]	; (800ebd0 <vPortSetupTimerInterrupt+0x34>)
 800ebc0:	2207      	movs	r2, #7
 800ebc2:	601a      	str	r2, [r3, #0]
}
 800ebc4:	bf00      	nop
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebcc:	4770      	bx	lr
 800ebce:	bf00      	nop
 800ebd0:	e000e010 	.word	0xe000e010
 800ebd4:	e000e018 	.word	0xe000e018
 800ebd8:	24000000 	.word	0x24000000
 800ebdc:	10624dd3 	.word	0x10624dd3
 800ebe0:	e000e014 	.word	0xe000e014

0800ebe4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ebe4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ebf4 <vPortEnableVFP+0x10>
 800ebe8:	6801      	ldr	r1, [r0, #0]
 800ebea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ebee:	6001      	str	r1, [r0, #0]
 800ebf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ebf2:	bf00      	nop
 800ebf4:	e000ed88 	.word	0xe000ed88

0800ebf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ebf8:	b480      	push	{r7}
 800ebfa:	b085      	sub	sp, #20
 800ebfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ebfe:	f3ef 8305 	mrs	r3, IPSR
 800ec02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	2b0f      	cmp	r3, #15
 800ec08:	d914      	bls.n	800ec34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ec0a:	4a17      	ldr	r2, [pc, #92]	; (800ec68 <vPortValidateInterruptPriority+0x70>)
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	4413      	add	r3, r2
 800ec10:	781b      	ldrb	r3, [r3, #0]
 800ec12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ec14:	4b15      	ldr	r3, [pc, #84]	; (800ec6c <vPortValidateInterruptPriority+0x74>)
 800ec16:	781b      	ldrb	r3, [r3, #0]
 800ec18:	7afa      	ldrb	r2, [r7, #11]
 800ec1a:	429a      	cmp	r2, r3
 800ec1c:	d20a      	bcs.n	800ec34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ec1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec22:	f383 8811 	msr	BASEPRI, r3
 800ec26:	f3bf 8f6f 	isb	sy
 800ec2a:	f3bf 8f4f 	dsb	sy
 800ec2e:	607b      	str	r3, [r7, #4]
}
 800ec30:	bf00      	nop
 800ec32:	e7fe      	b.n	800ec32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ec34:	4b0e      	ldr	r3, [pc, #56]	; (800ec70 <vPortValidateInterruptPriority+0x78>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ec3c:	4b0d      	ldr	r3, [pc, #52]	; (800ec74 <vPortValidateInterruptPriority+0x7c>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	429a      	cmp	r2, r3
 800ec42:	d90a      	bls.n	800ec5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ec44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec48:	f383 8811 	msr	BASEPRI, r3
 800ec4c:	f3bf 8f6f 	isb	sy
 800ec50:	f3bf 8f4f 	dsb	sy
 800ec54:	603b      	str	r3, [r7, #0]
}
 800ec56:	bf00      	nop
 800ec58:	e7fe      	b.n	800ec58 <vPortValidateInterruptPriority+0x60>
	}
 800ec5a:	bf00      	nop
 800ec5c:	3714      	adds	r7, #20
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec64:	4770      	bx	lr
 800ec66:	bf00      	nop
 800ec68:	e000e3f0 	.word	0xe000e3f0
 800ec6c:	240044fc 	.word	0x240044fc
 800ec70:	e000ed0c 	.word	0xe000ed0c
 800ec74:	24004500 	.word	0x24004500

0800ec78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b084      	sub	sp, #16
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
 800ec80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d10a      	bne.n	800eca2 <xQueueGenericReset+0x2a>
	__asm volatile
 800ec8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec90:	f383 8811 	msr	BASEPRI, r3
 800ec94:	f3bf 8f6f 	isb	sy
 800ec98:	f3bf 8f4f 	dsb	sy
 800ec9c:	60bb      	str	r3, [r7, #8]
}
 800ec9e:	bf00      	nop
 800eca0:	e7fe      	b.n	800eca0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800eca2:	f7ff fec7 	bl	800ea34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	681a      	ldr	r2, [r3, #0]
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecae:	68f9      	ldr	r1, [r7, #12]
 800ecb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ecb2:	fb01 f303 	mul.w	r3, r1, r3
 800ecb6:	441a      	add	r2, r3
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	681a      	ldr	r2, [r3, #0]
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681a      	ldr	r2, [r3, #0]
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecd2:	3b01      	subs	r3, #1
 800ecd4:	68f9      	ldr	r1, [r7, #12]
 800ecd6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ecd8:	fb01 f303 	mul.w	r3, r1, r3
 800ecdc:	441a      	add	r2, r3
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	22ff      	movs	r2, #255	; 0xff
 800ece6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	22ff      	movs	r2, #255	; 0xff
 800ecee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d114      	bne.n	800ed22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	691b      	ldr	r3, [r3, #16]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d01a      	beq.n	800ed36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	3310      	adds	r3, #16
 800ed04:	4618      	mov	r0, r3
 800ed06:	f001 fa97 	bl	8010238 <xTaskRemoveFromEventList>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d012      	beq.n	800ed36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ed10:	4b0c      	ldr	r3, [pc, #48]	; (800ed44 <xQueueGenericReset+0xcc>)
 800ed12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed16:	601a      	str	r2, [r3, #0]
 800ed18:	f3bf 8f4f 	dsb	sy
 800ed1c:	f3bf 8f6f 	isb	sy
 800ed20:	e009      	b.n	800ed36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	3310      	adds	r3, #16
 800ed26:	4618      	mov	r0, r3
 800ed28:	f7ff fca4 	bl	800e674 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	3324      	adds	r3, #36	; 0x24
 800ed30:	4618      	mov	r0, r3
 800ed32:	f7ff fc9f 	bl	800e674 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ed36:	f7ff fead 	bl	800ea94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ed3a:	2301      	movs	r3, #1
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	3710      	adds	r7, #16
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}
 800ed44:	e000ed04 	.word	0xe000ed04

0800ed48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b08e      	sub	sp, #56	; 0x38
 800ed4c:	af02      	add	r7, sp, #8
 800ed4e:	60f8      	str	r0, [r7, #12]
 800ed50:	60b9      	str	r1, [r7, #8]
 800ed52:	607a      	str	r2, [r7, #4]
 800ed54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d10a      	bne.n	800ed72 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ed5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed60:	f383 8811 	msr	BASEPRI, r3
 800ed64:	f3bf 8f6f 	isb	sy
 800ed68:	f3bf 8f4f 	dsb	sy
 800ed6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ed6e:	bf00      	nop
 800ed70:	e7fe      	b.n	800ed70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d10a      	bne.n	800ed8e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ed78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed7c:	f383 8811 	msr	BASEPRI, r3
 800ed80:	f3bf 8f6f 	isb	sy
 800ed84:	f3bf 8f4f 	dsb	sy
 800ed88:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ed8a:	bf00      	nop
 800ed8c:	e7fe      	b.n	800ed8c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d002      	beq.n	800ed9a <xQueueGenericCreateStatic+0x52>
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d001      	beq.n	800ed9e <xQueueGenericCreateStatic+0x56>
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	e000      	b.n	800eda0 <xQueueGenericCreateStatic+0x58>
 800ed9e:	2300      	movs	r3, #0
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d10a      	bne.n	800edba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800eda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eda8:	f383 8811 	msr	BASEPRI, r3
 800edac:	f3bf 8f6f 	isb	sy
 800edb0:	f3bf 8f4f 	dsb	sy
 800edb4:	623b      	str	r3, [r7, #32]
}
 800edb6:	bf00      	nop
 800edb8:	e7fe      	b.n	800edb8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d102      	bne.n	800edc6 <xQueueGenericCreateStatic+0x7e>
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d101      	bne.n	800edca <xQueueGenericCreateStatic+0x82>
 800edc6:	2301      	movs	r3, #1
 800edc8:	e000      	b.n	800edcc <xQueueGenericCreateStatic+0x84>
 800edca:	2300      	movs	r3, #0
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d10a      	bne.n	800ede6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800edd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd4:	f383 8811 	msr	BASEPRI, r3
 800edd8:	f3bf 8f6f 	isb	sy
 800eddc:	f3bf 8f4f 	dsb	sy
 800ede0:	61fb      	str	r3, [r7, #28]
}
 800ede2:	bf00      	nop
 800ede4:	e7fe      	b.n	800ede4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ede6:	2350      	movs	r3, #80	; 0x50
 800ede8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800edea:	697b      	ldr	r3, [r7, #20]
 800edec:	2b50      	cmp	r3, #80	; 0x50
 800edee:	d00a      	beq.n	800ee06 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800edf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf4:	f383 8811 	msr	BASEPRI, r3
 800edf8:	f3bf 8f6f 	isb	sy
 800edfc:	f3bf 8f4f 	dsb	sy
 800ee00:	61bb      	str	r3, [r7, #24]
}
 800ee02:	bf00      	nop
 800ee04:	e7fe      	b.n	800ee04 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ee06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ee0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d00d      	beq.n	800ee2e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ee12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee14:	2201      	movs	r2, #1
 800ee16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ee1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ee1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee20:	9300      	str	r3, [sp, #0]
 800ee22:	4613      	mov	r3, r2
 800ee24:	687a      	ldr	r2, [r7, #4]
 800ee26:	68b9      	ldr	r1, [r7, #8]
 800ee28:	68f8      	ldr	r0, [r7, #12]
 800ee2a:	f000 f83f 	bl	800eeac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ee2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ee30:	4618      	mov	r0, r3
 800ee32:	3730      	adds	r7, #48	; 0x30
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}

0800ee38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b08a      	sub	sp, #40	; 0x28
 800ee3c:	af02      	add	r7, sp, #8
 800ee3e:	60f8      	str	r0, [r7, #12]
 800ee40:	60b9      	str	r1, [r7, #8]
 800ee42:	4613      	mov	r3, r2
 800ee44:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d10a      	bne.n	800ee62 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ee4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee50:	f383 8811 	msr	BASEPRI, r3
 800ee54:	f3bf 8f6f 	isb	sy
 800ee58:	f3bf 8f4f 	dsb	sy
 800ee5c:	613b      	str	r3, [r7, #16]
}
 800ee5e:	bf00      	nop
 800ee60:	e7fe      	b.n	800ee60 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	68ba      	ldr	r2, [r7, #8]
 800ee66:	fb02 f303 	mul.w	r3, r2, r3
 800ee6a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ee6c:	69fb      	ldr	r3, [r7, #28]
 800ee6e:	3350      	adds	r3, #80	; 0x50
 800ee70:	4618      	mov	r0, r3
 800ee72:	f7ff fa15 	bl	800e2a0 <pvPortMalloc>
 800ee76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ee78:	69bb      	ldr	r3, [r7, #24]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d011      	beq.n	800eea2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ee7e:	69bb      	ldr	r3, [r7, #24]
 800ee80:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ee82:	697b      	ldr	r3, [r7, #20]
 800ee84:	3350      	adds	r3, #80	; 0x50
 800ee86:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ee88:	69bb      	ldr	r3, [r7, #24]
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ee90:	79fa      	ldrb	r2, [r7, #7]
 800ee92:	69bb      	ldr	r3, [r7, #24]
 800ee94:	9300      	str	r3, [sp, #0]
 800ee96:	4613      	mov	r3, r2
 800ee98:	697a      	ldr	r2, [r7, #20]
 800ee9a:	68b9      	ldr	r1, [r7, #8]
 800ee9c:	68f8      	ldr	r0, [r7, #12]
 800ee9e:	f000 f805 	bl	800eeac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800eea2:	69bb      	ldr	r3, [r7, #24]
	}
 800eea4:	4618      	mov	r0, r3
 800eea6:	3720      	adds	r7, #32
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}

0800eeac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b084      	sub	sp, #16
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	60f8      	str	r0, [r7, #12]
 800eeb4:	60b9      	str	r1, [r7, #8]
 800eeb6:	607a      	str	r2, [r7, #4]
 800eeb8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800eeba:	68bb      	ldr	r3, [r7, #8]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d103      	bne.n	800eec8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800eec0:	69bb      	ldr	r3, [r7, #24]
 800eec2:	69ba      	ldr	r2, [r7, #24]
 800eec4:	601a      	str	r2, [r3, #0]
 800eec6:	e002      	b.n	800eece <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800eec8:	69bb      	ldr	r3, [r7, #24]
 800eeca:	687a      	ldr	r2, [r7, #4]
 800eecc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800eece:	69bb      	ldr	r3, [r7, #24]
 800eed0:	68fa      	ldr	r2, [r7, #12]
 800eed2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800eed4:	69bb      	ldr	r3, [r7, #24]
 800eed6:	68ba      	ldr	r2, [r7, #8]
 800eed8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800eeda:	2101      	movs	r1, #1
 800eedc:	69b8      	ldr	r0, [r7, #24]
 800eede:	f7ff fecb 	bl	800ec78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800eee2:	69bb      	ldr	r3, [r7, #24]
 800eee4:	78fa      	ldrb	r2, [r7, #3]
 800eee6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800eeea:	bf00      	nop
 800eeec:	3710      	adds	r7, #16
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}

0800eef2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800eef2:	b580      	push	{r7, lr}
 800eef4:	b08a      	sub	sp, #40	; 0x28
 800eef6:	af02      	add	r7, sp, #8
 800eef8:	60f8      	str	r0, [r7, #12]
 800eefa:	60b9      	str	r1, [r7, #8]
 800eefc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d10a      	bne.n	800ef1a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800ef04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef08:	f383 8811 	msr	BASEPRI, r3
 800ef0c:	f3bf 8f6f 	isb	sy
 800ef10:	f3bf 8f4f 	dsb	sy
 800ef14:	61bb      	str	r3, [r7, #24]
}
 800ef16:	bf00      	nop
 800ef18:	e7fe      	b.n	800ef18 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ef1a:	68ba      	ldr	r2, [r7, #8]
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	d90a      	bls.n	800ef38 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800ef22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef26:	f383 8811 	msr	BASEPRI, r3
 800ef2a:	f3bf 8f6f 	isb	sy
 800ef2e:	f3bf 8f4f 	dsb	sy
 800ef32:	617b      	str	r3, [r7, #20]
}
 800ef34:	bf00      	nop
 800ef36:	e7fe      	b.n	800ef36 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ef38:	2302      	movs	r3, #2
 800ef3a:	9300      	str	r3, [sp, #0]
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2200      	movs	r2, #0
 800ef40:	2100      	movs	r1, #0
 800ef42:	68f8      	ldr	r0, [r7, #12]
 800ef44:	f7ff ff00 	bl	800ed48 <xQueueGenericCreateStatic>
 800ef48:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800ef4a:	69fb      	ldr	r3, [r7, #28]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d002      	beq.n	800ef56 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ef50:	69fb      	ldr	r3, [r7, #28]
 800ef52:	68ba      	ldr	r2, [r7, #8]
 800ef54:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ef56:	69fb      	ldr	r3, [r7, #28]
	}
 800ef58:	4618      	mov	r0, r3
 800ef5a:	3720      	adds	r7, #32
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}

0800ef60 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b086      	sub	sp, #24
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
 800ef68:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d10a      	bne.n	800ef86 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800ef70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef74:	f383 8811 	msr	BASEPRI, r3
 800ef78:	f3bf 8f6f 	isb	sy
 800ef7c:	f3bf 8f4f 	dsb	sy
 800ef80:	613b      	str	r3, [r7, #16]
}
 800ef82:	bf00      	nop
 800ef84:	e7fe      	b.n	800ef84 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ef86:	683a      	ldr	r2, [r7, #0]
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	d90a      	bls.n	800efa4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800ef8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef92:	f383 8811 	msr	BASEPRI, r3
 800ef96:	f3bf 8f6f 	isb	sy
 800ef9a:	f3bf 8f4f 	dsb	sy
 800ef9e:	60fb      	str	r3, [r7, #12]
}
 800efa0:	bf00      	nop
 800efa2:	e7fe      	b.n	800efa2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800efa4:	2202      	movs	r2, #2
 800efa6:	2100      	movs	r1, #0
 800efa8:	6878      	ldr	r0, [r7, #4]
 800efaa:	f7ff ff45 	bl	800ee38 <xQueueGenericCreate>
 800efae:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800efb0:	697b      	ldr	r3, [r7, #20]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d002      	beq.n	800efbc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800efb6:	697b      	ldr	r3, [r7, #20]
 800efb8:	683a      	ldr	r2, [r7, #0]
 800efba:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800efbc:	697b      	ldr	r3, [r7, #20]
	}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3718      	adds	r7, #24
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}
	...

0800efc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b08e      	sub	sp, #56	; 0x38
 800efcc:	af00      	add	r7, sp, #0
 800efce:	60f8      	str	r0, [r7, #12]
 800efd0:	60b9      	str	r1, [r7, #8]
 800efd2:	607a      	str	r2, [r7, #4]
 800efd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800efd6:	2300      	movs	r3, #0
 800efd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800efde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d10a      	bne.n	800effa <xQueueGenericSend+0x32>
	__asm volatile
 800efe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efe8:	f383 8811 	msr	BASEPRI, r3
 800efec:	f3bf 8f6f 	isb	sy
 800eff0:	f3bf 8f4f 	dsb	sy
 800eff4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800eff6:	bf00      	nop
 800eff8:	e7fe      	b.n	800eff8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800effa:	68bb      	ldr	r3, [r7, #8]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d103      	bne.n	800f008 <xQueueGenericSend+0x40>
 800f000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f004:	2b00      	cmp	r3, #0
 800f006:	d101      	bne.n	800f00c <xQueueGenericSend+0x44>
 800f008:	2301      	movs	r3, #1
 800f00a:	e000      	b.n	800f00e <xQueueGenericSend+0x46>
 800f00c:	2300      	movs	r3, #0
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d10a      	bne.n	800f028 <xQueueGenericSend+0x60>
	__asm volatile
 800f012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f016:	f383 8811 	msr	BASEPRI, r3
 800f01a:	f3bf 8f6f 	isb	sy
 800f01e:	f3bf 8f4f 	dsb	sy
 800f022:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f024:	bf00      	nop
 800f026:	e7fe      	b.n	800f026 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	2b02      	cmp	r3, #2
 800f02c:	d103      	bne.n	800f036 <xQueueGenericSend+0x6e>
 800f02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f032:	2b01      	cmp	r3, #1
 800f034:	d101      	bne.n	800f03a <xQueueGenericSend+0x72>
 800f036:	2301      	movs	r3, #1
 800f038:	e000      	b.n	800f03c <xQueueGenericSend+0x74>
 800f03a:	2300      	movs	r3, #0
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d10a      	bne.n	800f056 <xQueueGenericSend+0x8e>
	__asm volatile
 800f040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f044:	f383 8811 	msr	BASEPRI, r3
 800f048:	f3bf 8f6f 	isb	sy
 800f04c:	f3bf 8f4f 	dsb	sy
 800f050:	623b      	str	r3, [r7, #32]
}
 800f052:	bf00      	nop
 800f054:	e7fe      	b.n	800f054 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f056:	f001 faad 	bl	80105b4 <xTaskGetSchedulerState>
 800f05a:	4603      	mov	r3, r0
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d102      	bne.n	800f066 <xQueueGenericSend+0x9e>
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d101      	bne.n	800f06a <xQueueGenericSend+0xa2>
 800f066:	2301      	movs	r3, #1
 800f068:	e000      	b.n	800f06c <xQueueGenericSend+0xa4>
 800f06a:	2300      	movs	r3, #0
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d10a      	bne.n	800f086 <xQueueGenericSend+0xbe>
	__asm volatile
 800f070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f074:	f383 8811 	msr	BASEPRI, r3
 800f078:	f3bf 8f6f 	isb	sy
 800f07c:	f3bf 8f4f 	dsb	sy
 800f080:	61fb      	str	r3, [r7, #28]
}
 800f082:	bf00      	nop
 800f084:	e7fe      	b.n	800f084 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f086:	f7ff fcd5 	bl	800ea34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f08c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f092:	429a      	cmp	r2, r3
 800f094:	d302      	bcc.n	800f09c <xQueueGenericSend+0xd4>
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	2b02      	cmp	r3, #2
 800f09a:	d129      	bne.n	800f0f0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f09c:	683a      	ldr	r2, [r7, #0]
 800f09e:	68b9      	ldr	r1, [r7, #8]
 800f0a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0a2:	f000 fad1 	bl	800f648 <prvCopyDataToQueue>
 800f0a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d010      	beq.n	800f0d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0b2:	3324      	adds	r3, #36	; 0x24
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f001 f8bf 	bl	8010238 <xTaskRemoveFromEventList>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d013      	beq.n	800f0e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f0c0:	4b3f      	ldr	r3, [pc, #252]	; (800f1c0 <xQueueGenericSend+0x1f8>)
 800f0c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0c6:	601a      	str	r2, [r3, #0]
 800f0c8:	f3bf 8f4f 	dsb	sy
 800f0cc:	f3bf 8f6f 	isb	sy
 800f0d0:	e00a      	b.n	800f0e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d007      	beq.n	800f0e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f0d8:	4b39      	ldr	r3, [pc, #228]	; (800f1c0 <xQueueGenericSend+0x1f8>)
 800f0da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0de:	601a      	str	r2, [r3, #0]
 800f0e0:	f3bf 8f4f 	dsb	sy
 800f0e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f0e8:	f7ff fcd4 	bl	800ea94 <vPortExitCritical>
				return pdPASS;
 800f0ec:	2301      	movs	r3, #1
 800f0ee:	e063      	b.n	800f1b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d103      	bne.n	800f0fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f0f6:	f7ff fccd 	bl	800ea94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	e05c      	b.n	800f1b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f0fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f100:	2b00      	cmp	r3, #0
 800f102:	d106      	bne.n	800f112 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f104:	f107 0314 	add.w	r3, r7, #20
 800f108:	4618      	mov	r0, r3
 800f10a:	f001 f8f9 	bl	8010300 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f10e:	2301      	movs	r3, #1
 800f110:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f112:	f7ff fcbf 	bl	800ea94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f116:	f000 fe6b 	bl	800fdf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f11a:	f7ff fc8b 	bl	800ea34 <vPortEnterCritical>
 800f11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f120:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f124:	b25b      	sxtb	r3, r3
 800f126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f12a:	d103      	bne.n	800f134 <xQueueGenericSend+0x16c>
 800f12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f12e:	2200      	movs	r2, #0
 800f130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f136:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f13a:	b25b      	sxtb	r3, r3
 800f13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f140:	d103      	bne.n	800f14a <xQueueGenericSend+0x182>
 800f142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f144:	2200      	movs	r2, #0
 800f146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f14a:	f7ff fca3 	bl	800ea94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f14e:	1d3a      	adds	r2, r7, #4
 800f150:	f107 0314 	add.w	r3, r7, #20
 800f154:	4611      	mov	r1, r2
 800f156:	4618      	mov	r0, r3
 800f158:	f001 f8e8 	bl	801032c <xTaskCheckForTimeOut>
 800f15c:	4603      	mov	r3, r0
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d124      	bne.n	800f1ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f162:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f164:	f000 fb68 	bl	800f838 <prvIsQueueFull>
 800f168:	4603      	mov	r3, r0
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d018      	beq.n	800f1a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f170:	3310      	adds	r3, #16
 800f172:	687a      	ldr	r2, [r7, #4]
 800f174:	4611      	mov	r1, r2
 800f176:	4618      	mov	r0, r3
 800f178:	f001 f80e 	bl	8010198 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f17c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f17e:	f000 faf3 	bl	800f768 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f182:	f000 fe43 	bl	800fe0c <xTaskResumeAll>
 800f186:	4603      	mov	r3, r0
 800f188:	2b00      	cmp	r3, #0
 800f18a:	f47f af7c 	bne.w	800f086 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f18e:	4b0c      	ldr	r3, [pc, #48]	; (800f1c0 <xQueueGenericSend+0x1f8>)
 800f190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f194:	601a      	str	r2, [r3, #0]
 800f196:	f3bf 8f4f 	dsb	sy
 800f19a:	f3bf 8f6f 	isb	sy
 800f19e:	e772      	b.n	800f086 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f1a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1a2:	f000 fae1 	bl	800f768 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f1a6:	f000 fe31 	bl	800fe0c <xTaskResumeAll>
 800f1aa:	e76c      	b.n	800f086 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f1ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1ae:	f000 fadb 	bl	800f768 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f1b2:	f000 fe2b 	bl	800fe0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f1b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	3738      	adds	r7, #56	; 0x38
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}
 800f1c0:	e000ed04 	.word	0xe000ed04

0800f1c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b090      	sub	sp, #64	; 0x40
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	60f8      	str	r0, [r7, #12]
 800f1cc:	60b9      	str	r1, [r7, #8]
 800f1ce:	607a      	str	r2, [r7, #4]
 800f1d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d10a      	bne.n	800f1f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1e0:	f383 8811 	msr	BASEPRI, r3
 800f1e4:	f3bf 8f6f 	isb	sy
 800f1e8:	f3bf 8f4f 	dsb	sy
 800f1ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f1ee:	bf00      	nop
 800f1f0:	e7fe      	b.n	800f1f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d103      	bne.n	800f200 <xQueueGenericSendFromISR+0x3c>
 800f1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d101      	bne.n	800f204 <xQueueGenericSendFromISR+0x40>
 800f200:	2301      	movs	r3, #1
 800f202:	e000      	b.n	800f206 <xQueueGenericSendFromISR+0x42>
 800f204:	2300      	movs	r3, #0
 800f206:	2b00      	cmp	r3, #0
 800f208:	d10a      	bne.n	800f220 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f20e:	f383 8811 	msr	BASEPRI, r3
 800f212:	f3bf 8f6f 	isb	sy
 800f216:	f3bf 8f4f 	dsb	sy
 800f21a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f21c:	bf00      	nop
 800f21e:	e7fe      	b.n	800f21e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	2b02      	cmp	r3, #2
 800f224:	d103      	bne.n	800f22e <xQueueGenericSendFromISR+0x6a>
 800f226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f22a:	2b01      	cmp	r3, #1
 800f22c:	d101      	bne.n	800f232 <xQueueGenericSendFromISR+0x6e>
 800f22e:	2301      	movs	r3, #1
 800f230:	e000      	b.n	800f234 <xQueueGenericSendFromISR+0x70>
 800f232:	2300      	movs	r3, #0
 800f234:	2b00      	cmp	r3, #0
 800f236:	d10a      	bne.n	800f24e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f23c:	f383 8811 	msr	BASEPRI, r3
 800f240:	f3bf 8f6f 	isb	sy
 800f244:	f3bf 8f4f 	dsb	sy
 800f248:	623b      	str	r3, [r7, #32]
}
 800f24a:	bf00      	nop
 800f24c:	e7fe      	b.n	800f24c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f24e:	f7ff fcd3 	bl	800ebf8 <vPortValidateInterruptPriority>
	__asm volatile
 800f252:	f3ef 8211 	mrs	r2, BASEPRI
 800f256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f25a:	f383 8811 	msr	BASEPRI, r3
 800f25e:	f3bf 8f6f 	isb	sy
 800f262:	f3bf 8f4f 	dsb	sy
 800f266:	61fa      	str	r2, [r7, #28]
 800f268:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800f26a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f26c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f276:	429a      	cmp	r2, r3
 800f278:	d302      	bcc.n	800f280 <xQueueGenericSendFromISR+0xbc>
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	2b02      	cmp	r3, #2
 800f27e:	d12f      	bne.n	800f2e0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f282:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f28c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f28e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f290:	683a      	ldr	r2, [r7, #0]
 800f292:	68b9      	ldr	r1, [r7, #8]
 800f294:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f296:	f000 f9d7 	bl	800f648 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f29a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2a2:	d112      	bne.n	800f2ca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d016      	beq.n	800f2da <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ae:	3324      	adds	r3, #36	; 0x24
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f000 ffc1 	bl	8010238 <xTaskRemoveFromEventList>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d00e      	beq.n	800f2da <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d00b      	beq.n	800f2da <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2201      	movs	r2, #1
 800f2c6:	601a      	str	r2, [r3, #0]
 800f2c8:	e007      	b.n	800f2da <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f2ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f2ce:	3301      	adds	r3, #1
 800f2d0:	b2db      	uxtb	r3, r3
 800f2d2:	b25a      	sxtb	r2, r3
 800f2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f2da:	2301      	movs	r3, #1
 800f2dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f2de:	e001      	b.n	800f2e4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2e6:	617b      	str	r3, [r7, #20]
	__asm volatile
 800f2e8:	697b      	ldr	r3, [r7, #20]
 800f2ea:	f383 8811 	msr	BASEPRI, r3
}
 800f2ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f2f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	3740      	adds	r7, #64	; 0x40
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}
	...

0800f2fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b08c      	sub	sp, #48	; 0x30
 800f300:	af00      	add	r7, sp, #0
 800f302:	60f8      	str	r0, [r7, #12]
 800f304:	60b9      	str	r1, [r7, #8]
 800f306:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f308:	2300      	movs	r3, #0
 800f30a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f312:	2b00      	cmp	r3, #0
 800f314:	d10a      	bne.n	800f32c <xQueueReceive+0x30>
	__asm volatile
 800f316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f31a:	f383 8811 	msr	BASEPRI, r3
 800f31e:	f3bf 8f6f 	isb	sy
 800f322:	f3bf 8f4f 	dsb	sy
 800f326:	623b      	str	r3, [r7, #32]
}
 800f328:	bf00      	nop
 800f32a:	e7fe      	b.n	800f32a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d103      	bne.n	800f33a <xQueueReceive+0x3e>
 800f332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f336:	2b00      	cmp	r3, #0
 800f338:	d101      	bne.n	800f33e <xQueueReceive+0x42>
 800f33a:	2301      	movs	r3, #1
 800f33c:	e000      	b.n	800f340 <xQueueReceive+0x44>
 800f33e:	2300      	movs	r3, #0
 800f340:	2b00      	cmp	r3, #0
 800f342:	d10a      	bne.n	800f35a <xQueueReceive+0x5e>
	__asm volatile
 800f344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f348:	f383 8811 	msr	BASEPRI, r3
 800f34c:	f3bf 8f6f 	isb	sy
 800f350:	f3bf 8f4f 	dsb	sy
 800f354:	61fb      	str	r3, [r7, #28]
}
 800f356:	bf00      	nop
 800f358:	e7fe      	b.n	800f358 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f35a:	f001 f92b 	bl	80105b4 <xTaskGetSchedulerState>
 800f35e:	4603      	mov	r3, r0
 800f360:	2b00      	cmp	r3, #0
 800f362:	d102      	bne.n	800f36a <xQueueReceive+0x6e>
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d101      	bne.n	800f36e <xQueueReceive+0x72>
 800f36a:	2301      	movs	r3, #1
 800f36c:	e000      	b.n	800f370 <xQueueReceive+0x74>
 800f36e:	2300      	movs	r3, #0
 800f370:	2b00      	cmp	r3, #0
 800f372:	d10a      	bne.n	800f38a <xQueueReceive+0x8e>
	__asm volatile
 800f374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f378:	f383 8811 	msr	BASEPRI, r3
 800f37c:	f3bf 8f6f 	isb	sy
 800f380:	f3bf 8f4f 	dsb	sy
 800f384:	61bb      	str	r3, [r7, #24]
}
 800f386:	bf00      	nop
 800f388:	e7fe      	b.n	800f388 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f38a:	f7ff fb53 	bl	800ea34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f392:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f396:	2b00      	cmp	r3, #0
 800f398:	d01f      	beq.n	800f3da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f39a:	68b9      	ldr	r1, [r7, #8]
 800f39c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f39e:	f000 f9bd 	bl	800f71c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3a4:	1e5a      	subs	r2, r3, #1
 800f3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ac:	691b      	ldr	r3, [r3, #16]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d00f      	beq.n	800f3d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b4:	3310      	adds	r3, #16
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f000 ff3e 	bl	8010238 <xTaskRemoveFromEventList>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d007      	beq.n	800f3d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f3c2:	4b3d      	ldr	r3, [pc, #244]	; (800f4b8 <xQueueReceive+0x1bc>)
 800f3c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3c8:	601a      	str	r2, [r3, #0]
 800f3ca:	f3bf 8f4f 	dsb	sy
 800f3ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f3d2:	f7ff fb5f 	bl	800ea94 <vPortExitCritical>
				return pdPASS;
 800f3d6:	2301      	movs	r3, #1
 800f3d8:	e069      	b.n	800f4ae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d103      	bne.n	800f3e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f3e0:	f7ff fb58 	bl	800ea94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	e062      	b.n	800f4ae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d106      	bne.n	800f3fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f3ee:	f107 0310 	add.w	r3, r7, #16
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f000 ff84 	bl	8010300 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f3f8:	2301      	movs	r3, #1
 800f3fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f3fc:	f7ff fb4a 	bl	800ea94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f400:	f000 fcf6 	bl	800fdf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f404:	f7ff fb16 	bl	800ea34 <vPortEnterCritical>
 800f408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f40a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f40e:	b25b      	sxtb	r3, r3
 800f410:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f414:	d103      	bne.n	800f41e <xQueueReceive+0x122>
 800f416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f418:	2200      	movs	r2, #0
 800f41a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f420:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f424:	b25b      	sxtb	r3, r3
 800f426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f42a:	d103      	bne.n	800f434 <xQueueReceive+0x138>
 800f42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f42e:	2200      	movs	r2, #0
 800f430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f434:	f7ff fb2e 	bl	800ea94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f438:	1d3a      	adds	r2, r7, #4
 800f43a:	f107 0310 	add.w	r3, r7, #16
 800f43e:	4611      	mov	r1, r2
 800f440:	4618      	mov	r0, r3
 800f442:	f000 ff73 	bl	801032c <xTaskCheckForTimeOut>
 800f446:	4603      	mov	r3, r0
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d123      	bne.n	800f494 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f44c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f44e:	f000 f9dd 	bl	800f80c <prvIsQueueEmpty>
 800f452:	4603      	mov	r3, r0
 800f454:	2b00      	cmp	r3, #0
 800f456:	d017      	beq.n	800f488 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f45a:	3324      	adds	r3, #36	; 0x24
 800f45c:	687a      	ldr	r2, [r7, #4]
 800f45e:	4611      	mov	r1, r2
 800f460:	4618      	mov	r0, r3
 800f462:	f000 fe99 	bl	8010198 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f466:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f468:	f000 f97e 	bl	800f768 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f46c:	f000 fcce 	bl	800fe0c <xTaskResumeAll>
 800f470:	4603      	mov	r3, r0
 800f472:	2b00      	cmp	r3, #0
 800f474:	d189      	bne.n	800f38a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f476:	4b10      	ldr	r3, [pc, #64]	; (800f4b8 <xQueueReceive+0x1bc>)
 800f478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f47c:	601a      	str	r2, [r3, #0]
 800f47e:	f3bf 8f4f 	dsb	sy
 800f482:	f3bf 8f6f 	isb	sy
 800f486:	e780      	b.n	800f38a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f48a:	f000 f96d 	bl	800f768 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f48e:	f000 fcbd 	bl	800fe0c <xTaskResumeAll>
 800f492:	e77a      	b.n	800f38a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f494:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f496:	f000 f967 	bl	800f768 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f49a:	f000 fcb7 	bl	800fe0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f49e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4a0:	f000 f9b4 	bl	800f80c <prvIsQueueEmpty>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	f43f af6f 	beq.w	800f38a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f4ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	3730      	adds	r7, #48	; 0x30
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bd80      	pop	{r7, pc}
 800f4b6:	bf00      	nop
 800f4b8:	e000ed04 	.word	0xe000ed04

0800f4bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b08e      	sub	sp, #56	; 0x38
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	60f8      	str	r0, [r7, #12]
 800f4c4:	60b9      	str	r1, [r7, #8]
 800f4c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d10a      	bne.n	800f4e8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800f4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4d6:	f383 8811 	msr	BASEPRI, r3
 800f4da:	f3bf 8f6f 	isb	sy
 800f4de:	f3bf 8f4f 	dsb	sy
 800f4e2:	623b      	str	r3, [r7, #32]
}
 800f4e4:	bf00      	nop
 800f4e6:	e7fe      	b.n	800f4e6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d103      	bne.n	800f4f6 <xQueueReceiveFromISR+0x3a>
 800f4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d101      	bne.n	800f4fa <xQueueReceiveFromISR+0x3e>
 800f4f6:	2301      	movs	r3, #1
 800f4f8:	e000      	b.n	800f4fc <xQueueReceiveFromISR+0x40>
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d10a      	bne.n	800f516 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800f500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f504:	f383 8811 	msr	BASEPRI, r3
 800f508:	f3bf 8f6f 	isb	sy
 800f50c:	f3bf 8f4f 	dsb	sy
 800f510:	61fb      	str	r3, [r7, #28]
}
 800f512:	bf00      	nop
 800f514:	e7fe      	b.n	800f514 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f516:	f7ff fb6f 	bl	800ebf8 <vPortValidateInterruptPriority>
	__asm volatile
 800f51a:	f3ef 8211 	mrs	r2, BASEPRI
 800f51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f522:	f383 8811 	msr	BASEPRI, r3
 800f526:	f3bf 8f6f 	isb	sy
 800f52a:	f3bf 8f4f 	dsb	sy
 800f52e:	61ba      	str	r2, [r7, #24]
 800f530:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f532:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f534:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f53a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d02f      	beq.n	800f5a2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f544:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f54c:	68b9      	ldr	r1, [r7, #8]
 800f54e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f550:	f000 f8e4 	bl	800f71c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f556:	1e5a      	subs	r2, r3, #1
 800f558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f55a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f55c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f564:	d112      	bne.n	800f58c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f568:	691b      	ldr	r3, [r3, #16]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d016      	beq.n	800f59c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f570:	3310      	adds	r3, #16
 800f572:	4618      	mov	r0, r3
 800f574:	f000 fe60 	bl	8010238 <xTaskRemoveFromEventList>
 800f578:	4603      	mov	r3, r0
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d00e      	beq.n	800f59c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d00b      	beq.n	800f59c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	2201      	movs	r2, #1
 800f588:	601a      	str	r2, [r3, #0]
 800f58a:	e007      	b.n	800f59c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f58c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f590:	3301      	adds	r3, #1
 800f592:	b2db      	uxtb	r3, r3
 800f594:	b25a      	sxtb	r2, r3
 800f596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f59c:	2301      	movs	r3, #1
 800f59e:	637b      	str	r3, [r7, #52]	; 0x34
 800f5a0:	e001      	b.n	800f5a6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	637b      	str	r3, [r7, #52]	; 0x34
 800f5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f5aa:	693b      	ldr	r3, [r7, #16]
 800f5ac:	f383 8811 	msr	BASEPRI, r3
}
 800f5b0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f5b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	3738      	adds	r7, #56	; 0x38
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}

0800f5bc <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b086      	sub	sp, #24
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800f5c8:	697b      	ldr	r3, [r7, #20]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d10a      	bne.n	800f5e4 <uxQueueSpacesAvailable+0x28>
	__asm volatile
 800f5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5d2:	f383 8811 	msr	BASEPRI, r3
 800f5d6:	f3bf 8f6f 	isb	sy
 800f5da:	f3bf 8f4f 	dsb	sy
 800f5de:	60fb      	str	r3, [r7, #12]
}
 800f5e0:	bf00      	nop
 800f5e2:	e7fe      	b.n	800f5e2 <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 800f5e4:	f7ff fa26 	bl	800ea34 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f5ec:	697b      	ldr	r3, [r7, #20]
 800f5ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5f0:	1ad3      	subs	r3, r2, r3
 800f5f2:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800f5f4:	f7ff fa4e 	bl	800ea94 <vPortExitCritical>

	return uxReturn;
 800f5f8:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	3718      	adds	r7, #24
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd80      	pop	{r7, pc}

0800f602 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f602:	b580      	push	{r7, lr}
 800f604:	b084      	sub	sp, #16
 800f606:	af00      	add	r7, sp, #0
 800f608:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d10a      	bne.n	800f62a <vQueueDelete+0x28>
	__asm volatile
 800f614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f618:	f383 8811 	msr	BASEPRI, r3
 800f61c:	f3bf 8f6f 	isb	sy
 800f620:	f3bf 8f4f 	dsb	sy
 800f624:	60bb      	str	r3, [r7, #8]
}
 800f626:	bf00      	nop
 800f628:	e7fe      	b.n	800f628 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f62a:	68f8      	ldr	r0, [r7, #12]
 800f62c:	f000 f946 	bl	800f8bc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f636:	2b00      	cmp	r3, #0
 800f638:	d102      	bne.n	800f640 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800f63a:	68f8      	ldr	r0, [r7, #12]
 800f63c:	f7fe fefc 	bl	800e438 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f640:	bf00      	nop
 800f642:	3710      	adds	r7, #16
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}

0800f648 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b086      	sub	sp, #24
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	60f8      	str	r0, [r7, #12]
 800f650:	60b9      	str	r1, [r7, #8]
 800f652:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f654:	2300      	movs	r3, #0
 800f656:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f65c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f662:	2b00      	cmp	r3, #0
 800f664:	d10d      	bne.n	800f682 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d14d      	bne.n	800f70a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	689b      	ldr	r3, [r3, #8]
 800f672:	4618      	mov	r0, r3
 800f674:	f000 ffbc 	bl	80105f0 <xTaskPriorityDisinherit>
 800f678:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	2200      	movs	r2, #0
 800f67e:	609a      	str	r2, [r3, #8]
 800f680:	e043      	b.n	800f70a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d119      	bne.n	800f6bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	6858      	ldr	r0, [r3, #4]
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f690:	461a      	mov	r2, r3
 800f692:	68b9      	ldr	r1, [r7, #8]
 800f694:	f001 fbe6 	bl	8010e64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	685a      	ldr	r2, [r3, #4]
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6a0:	441a      	add	r2, r3
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	685a      	ldr	r2, [r3, #4]
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	689b      	ldr	r3, [r3, #8]
 800f6ae:	429a      	cmp	r2, r3
 800f6b0:	d32b      	bcc.n	800f70a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	681a      	ldr	r2, [r3, #0]
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	605a      	str	r2, [r3, #4]
 800f6ba:	e026      	b.n	800f70a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	68d8      	ldr	r0, [r3, #12]
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6c4:	461a      	mov	r2, r3
 800f6c6:	68b9      	ldr	r1, [r7, #8]
 800f6c8:	f001 fbcc 	bl	8010e64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	68da      	ldr	r2, [r3, #12]
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6d4:	425b      	negs	r3, r3
 800f6d6:	441a      	add	r2, r3
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	68da      	ldr	r2, [r3, #12]
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	429a      	cmp	r2, r3
 800f6e6:	d207      	bcs.n	800f6f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	689a      	ldr	r2, [r3, #8]
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6f0:	425b      	negs	r3, r3
 800f6f2:	441a      	add	r2, r3
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2b02      	cmp	r3, #2
 800f6fc:	d105      	bne.n	800f70a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f6fe:	693b      	ldr	r3, [r7, #16]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d002      	beq.n	800f70a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	3b01      	subs	r3, #1
 800f708:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f70a:	693b      	ldr	r3, [r7, #16]
 800f70c:	1c5a      	adds	r2, r3, #1
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f712:	697b      	ldr	r3, [r7, #20]
}
 800f714:	4618      	mov	r0, r3
 800f716:	3718      	adds	r7, #24
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}

0800f71c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b082      	sub	sp, #8
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
 800f724:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d018      	beq.n	800f760 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	68da      	ldr	r2, [r3, #12]
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f736:	441a      	add	r2, r3
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	68da      	ldr	r2, [r3, #12]
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	689b      	ldr	r3, [r3, #8]
 800f744:	429a      	cmp	r2, r3
 800f746:	d303      	bcc.n	800f750 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681a      	ldr	r2, [r3, #0]
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	68d9      	ldr	r1, [r3, #12]
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f758:	461a      	mov	r2, r3
 800f75a:	6838      	ldr	r0, [r7, #0]
 800f75c:	f001 fb82 	bl	8010e64 <memcpy>
	}
}
 800f760:	bf00      	nop
 800f762:	3708      	adds	r7, #8
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}

0800f768 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b084      	sub	sp, #16
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f770:	f7ff f960 	bl	800ea34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f77a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f77c:	e011      	b.n	800f7a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f782:	2b00      	cmp	r3, #0
 800f784:	d012      	beq.n	800f7ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	3324      	adds	r3, #36	; 0x24
 800f78a:	4618      	mov	r0, r3
 800f78c:	f000 fd54 	bl	8010238 <xTaskRemoveFromEventList>
 800f790:	4603      	mov	r3, r0
 800f792:	2b00      	cmp	r3, #0
 800f794:	d001      	beq.n	800f79a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f796:	f000 fe2b 	bl	80103f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f79a:	7bfb      	ldrb	r3, [r7, #15]
 800f79c:	3b01      	subs	r3, #1
 800f79e:	b2db      	uxtb	r3, r3
 800f7a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f7a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	dce9      	bgt.n	800f77e <prvUnlockQueue+0x16>
 800f7aa:	e000      	b.n	800f7ae <prvUnlockQueue+0x46>
					break;
 800f7ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	22ff      	movs	r2, #255	; 0xff
 800f7b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f7b6:	f7ff f96d 	bl	800ea94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f7ba:	f7ff f93b 	bl	800ea34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f7c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f7c6:	e011      	b.n	800f7ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	691b      	ldr	r3, [r3, #16]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d012      	beq.n	800f7f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	3310      	adds	r3, #16
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f000 fd2f 	bl	8010238 <xTaskRemoveFromEventList>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d001      	beq.n	800f7e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f7e0:	f000 fe06 	bl	80103f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f7e4:	7bbb      	ldrb	r3, [r7, #14]
 800f7e6:	3b01      	subs	r3, #1
 800f7e8:	b2db      	uxtb	r3, r3
 800f7ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f7ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	dce9      	bgt.n	800f7c8 <prvUnlockQueue+0x60>
 800f7f4:	e000      	b.n	800f7f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f7f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	22ff      	movs	r2, #255	; 0xff
 800f7fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f800:	f7ff f948 	bl	800ea94 <vPortExitCritical>
}
 800f804:	bf00      	nop
 800f806:	3710      	adds	r7, #16
 800f808:	46bd      	mov	sp, r7
 800f80a:	bd80      	pop	{r7, pc}

0800f80c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b084      	sub	sp, #16
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f814:	f7ff f90e 	bl	800ea34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d102      	bne.n	800f826 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f820:	2301      	movs	r3, #1
 800f822:	60fb      	str	r3, [r7, #12]
 800f824:	e001      	b.n	800f82a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f826:	2300      	movs	r3, #0
 800f828:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f82a:	f7ff f933 	bl	800ea94 <vPortExitCritical>

	return xReturn;
 800f82e:	68fb      	ldr	r3, [r7, #12]
}
 800f830:	4618      	mov	r0, r3
 800f832:	3710      	adds	r7, #16
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}

0800f838 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b084      	sub	sp, #16
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f840:	f7ff f8f8 	bl	800ea34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f84c:	429a      	cmp	r2, r3
 800f84e:	d102      	bne.n	800f856 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f850:	2301      	movs	r3, #1
 800f852:	60fb      	str	r3, [r7, #12]
 800f854:	e001      	b.n	800f85a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f856:	2300      	movs	r3, #0
 800f858:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f85a:	f7ff f91b 	bl	800ea94 <vPortExitCritical>

	return xReturn;
 800f85e:	68fb      	ldr	r3, [r7, #12]
}
 800f860:	4618      	mov	r0, r3
 800f862:	3710      	adds	r7, #16
 800f864:	46bd      	mov	sp, r7
 800f866:	bd80      	pop	{r7, pc}

0800f868 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f868:	b480      	push	{r7}
 800f86a:	b085      	sub	sp, #20
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
 800f870:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f872:	2300      	movs	r3, #0
 800f874:	60fb      	str	r3, [r7, #12]
 800f876:	e014      	b.n	800f8a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f878:	4a0f      	ldr	r2, [pc, #60]	; (800f8b8 <vQueueAddToRegistry+0x50>)
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d10b      	bne.n	800f89c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f884:	490c      	ldr	r1, [pc, #48]	; (800f8b8 <vQueueAddToRegistry+0x50>)
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	683a      	ldr	r2, [r7, #0]
 800f88a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f88e:	4a0a      	ldr	r2, [pc, #40]	; (800f8b8 <vQueueAddToRegistry+0x50>)
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	00db      	lsls	r3, r3, #3
 800f894:	4413      	add	r3, r2
 800f896:	687a      	ldr	r2, [r7, #4]
 800f898:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f89a:	e006      	b.n	800f8aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	3301      	adds	r3, #1
 800f8a0:	60fb      	str	r3, [r7, #12]
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	2b07      	cmp	r3, #7
 800f8a6:	d9e7      	bls.n	800f878 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f8a8:	bf00      	nop
 800f8aa:	bf00      	nop
 800f8ac:	3714      	adds	r7, #20
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b4:	4770      	bx	lr
 800f8b6:	bf00      	nop
 800f8b8:	24005384 	.word	0x24005384

0800f8bc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f8bc:	b480      	push	{r7}
 800f8be:	b085      	sub	sp, #20
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	60fb      	str	r3, [r7, #12]
 800f8c8:	e016      	b.n	800f8f8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f8ca:	4a10      	ldr	r2, [pc, #64]	; (800f90c <vQueueUnregisterQueue+0x50>)
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	00db      	lsls	r3, r3, #3
 800f8d0:	4413      	add	r3, r2
 800f8d2:	685b      	ldr	r3, [r3, #4]
 800f8d4:	687a      	ldr	r2, [r7, #4]
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	d10b      	bne.n	800f8f2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f8da:	4a0c      	ldr	r2, [pc, #48]	; (800f90c <vQueueUnregisterQueue+0x50>)
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	2100      	movs	r1, #0
 800f8e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f8e4:	4a09      	ldr	r2, [pc, #36]	; (800f90c <vQueueUnregisterQueue+0x50>)
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	00db      	lsls	r3, r3, #3
 800f8ea:	4413      	add	r3, r2
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	605a      	str	r2, [r3, #4]
				break;
 800f8f0:	e006      	b.n	800f900 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	3301      	adds	r3, #1
 800f8f6:	60fb      	str	r3, [r7, #12]
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	2b07      	cmp	r3, #7
 800f8fc:	d9e5      	bls.n	800f8ca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f8fe:	bf00      	nop
 800f900:	bf00      	nop
 800f902:	3714      	adds	r7, #20
 800f904:	46bd      	mov	sp, r7
 800f906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90a:	4770      	bx	lr
 800f90c:	24005384 	.word	0x24005384

0800f910 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f910:	b580      	push	{r7, lr}
 800f912:	b086      	sub	sp, #24
 800f914:	af00      	add	r7, sp, #0
 800f916:	60f8      	str	r0, [r7, #12]
 800f918:	60b9      	str	r1, [r7, #8]
 800f91a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f920:	f7ff f888 	bl	800ea34 <vPortEnterCritical>
 800f924:	697b      	ldr	r3, [r7, #20]
 800f926:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f92a:	b25b      	sxtb	r3, r3
 800f92c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f930:	d103      	bne.n	800f93a <vQueueWaitForMessageRestricted+0x2a>
 800f932:	697b      	ldr	r3, [r7, #20]
 800f934:	2200      	movs	r2, #0
 800f936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f940:	b25b      	sxtb	r3, r3
 800f942:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f946:	d103      	bne.n	800f950 <vQueueWaitForMessageRestricted+0x40>
 800f948:	697b      	ldr	r3, [r7, #20]
 800f94a:	2200      	movs	r2, #0
 800f94c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f950:	f7ff f8a0 	bl	800ea94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f954:	697b      	ldr	r3, [r7, #20]
 800f956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d106      	bne.n	800f96a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f95c:	697b      	ldr	r3, [r7, #20]
 800f95e:	3324      	adds	r3, #36	; 0x24
 800f960:	687a      	ldr	r2, [r7, #4]
 800f962:	68b9      	ldr	r1, [r7, #8]
 800f964:	4618      	mov	r0, r3
 800f966:	f000 fc3b 	bl	80101e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f96a:	6978      	ldr	r0, [r7, #20]
 800f96c:	f7ff fefc 	bl	800f768 <prvUnlockQueue>
	}
 800f970:	bf00      	nop
 800f972:	3718      	adds	r7, #24
 800f974:	46bd      	mov	sp, r7
 800f976:	bd80      	pop	{r7, pc}

0800f978 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b08e      	sub	sp, #56	; 0x38
 800f97c:	af04      	add	r7, sp, #16
 800f97e:	60f8      	str	r0, [r7, #12]
 800f980:	60b9      	str	r1, [r7, #8]
 800f982:	607a      	str	r2, [r7, #4]
 800f984:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d10a      	bne.n	800f9a2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800f98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f990:	f383 8811 	msr	BASEPRI, r3
 800f994:	f3bf 8f6f 	isb	sy
 800f998:	f3bf 8f4f 	dsb	sy
 800f99c:	623b      	str	r3, [r7, #32]
}
 800f99e:	bf00      	nop
 800f9a0:	e7fe      	b.n	800f9a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d10a      	bne.n	800f9be <xTaskCreateStatic+0x46>
	__asm volatile
 800f9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9ac:	f383 8811 	msr	BASEPRI, r3
 800f9b0:	f3bf 8f6f 	isb	sy
 800f9b4:	f3bf 8f4f 	dsb	sy
 800f9b8:	61fb      	str	r3, [r7, #28]
}
 800f9ba:	bf00      	nop
 800f9bc:	e7fe      	b.n	800f9bc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f9be:	235c      	movs	r3, #92	; 0x5c
 800f9c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f9c2:	693b      	ldr	r3, [r7, #16]
 800f9c4:	2b5c      	cmp	r3, #92	; 0x5c
 800f9c6:	d00a      	beq.n	800f9de <xTaskCreateStatic+0x66>
	__asm volatile
 800f9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9cc:	f383 8811 	msr	BASEPRI, r3
 800f9d0:	f3bf 8f6f 	isb	sy
 800f9d4:	f3bf 8f4f 	dsb	sy
 800f9d8:	61bb      	str	r3, [r7, #24]
}
 800f9da:	bf00      	nop
 800f9dc:	e7fe      	b.n	800f9dc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f9de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d01e      	beq.n	800fa24 <xTaskCreateStatic+0xac>
 800f9e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d01b      	beq.n	800fa24 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f9f4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9f8:	2202      	movs	r2, #2
 800f9fa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f9fe:	2300      	movs	r3, #0
 800fa00:	9303      	str	r3, [sp, #12]
 800fa02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa04:	9302      	str	r3, [sp, #8]
 800fa06:	f107 0314 	add.w	r3, r7, #20
 800fa0a:	9301      	str	r3, [sp, #4]
 800fa0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa0e:	9300      	str	r3, [sp, #0]
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	687a      	ldr	r2, [r7, #4]
 800fa14:	68b9      	ldr	r1, [r7, #8]
 800fa16:	68f8      	ldr	r0, [r7, #12]
 800fa18:	f000 f850 	bl	800fabc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fa1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa1e:	f000 f8dd 	bl	800fbdc <prvAddNewTaskToReadyList>
 800fa22:	e001      	b.n	800fa28 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800fa24:	2300      	movs	r3, #0
 800fa26:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fa28:	697b      	ldr	r3, [r7, #20]
	}
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	3728      	adds	r7, #40	; 0x28
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bd80      	pop	{r7, pc}

0800fa32 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fa32:	b580      	push	{r7, lr}
 800fa34:	b08c      	sub	sp, #48	; 0x30
 800fa36:	af04      	add	r7, sp, #16
 800fa38:	60f8      	str	r0, [r7, #12]
 800fa3a:	60b9      	str	r1, [r7, #8]
 800fa3c:	603b      	str	r3, [r7, #0]
 800fa3e:	4613      	mov	r3, r2
 800fa40:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fa42:	88fb      	ldrh	r3, [r7, #6]
 800fa44:	009b      	lsls	r3, r3, #2
 800fa46:	4618      	mov	r0, r3
 800fa48:	f7fe fc2a 	bl	800e2a0 <pvPortMalloc>
 800fa4c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fa4e:	697b      	ldr	r3, [r7, #20]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d00e      	beq.n	800fa72 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fa54:	205c      	movs	r0, #92	; 0x5c
 800fa56:	f7fe fc23 	bl	800e2a0 <pvPortMalloc>
 800fa5a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fa5c:	69fb      	ldr	r3, [r7, #28]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d003      	beq.n	800fa6a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fa62:	69fb      	ldr	r3, [r7, #28]
 800fa64:	697a      	ldr	r2, [r7, #20]
 800fa66:	631a      	str	r2, [r3, #48]	; 0x30
 800fa68:	e005      	b.n	800fa76 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fa6a:	6978      	ldr	r0, [r7, #20]
 800fa6c:	f7fe fce4 	bl	800e438 <vPortFree>
 800fa70:	e001      	b.n	800fa76 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fa72:	2300      	movs	r3, #0
 800fa74:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fa76:	69fb      	ldr	r3, [r7, #28]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d017      	beq.n	800faac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fa7c:	69fb      	ldr	r3, [r7, #28]
 800fa7e:	2200      	movs	r2, #0
 800fa80:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fa84:	88fa      	ldrh	r2, [r7, #6]
 800fa86:	2300      	movs	r3, #0
 800fa88:	9303      	str	r3, [sp, #12]
 800fa8a:	69fb      	ldr	r3, [r7, #28]
 800fa8c:	9302      	str	r3, [sp, #8]
 800fa8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa90:	9301      	str	r3, [sp, #4]
 800fa92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa94:	9300      	str	r3, [sp, #0]
 800fa96:	683b      	ldr	r3, [r7, #0]
 800fa98:	68b9      	ldr	r1, [r7, #8]
 800fa9a:	68f8      	ldr	r0, [r7, #12]
 800fa9c:	f000 f80e 	bl	800fabc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800faa0:	69f8      	ldr	r0, [r7, #28]
 800faa2:	f000 f89b 	bl	800fbdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800faa6:	2301      	movs	r3, #1
 800faa8:	61bb      	str	r3, [r7, #24]
 800faaa:	e002      	b.n	800fab2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800faac:	f04f 33ff 	mov.w	r3, #4294967295
 800fab0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fab2:	69bb      	ldr	r3, [r7, #24]
	}
 800fab4:	4618      	mov	r0, r3
 800fab6:	3720      	adds	r7, #32
 800fab8:	46bd      	mov	sp, r7
 800faba:	bd80      	pop	{r7, pc}

0800fabc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b088      	sub	sp, #32
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	60f8      	str	r0, [r7, #12]
 800fac4:	60b9      	str	r1, [r7, #8]
 800fac6:	607a      	str	r2, [r7, #4]
 800fac8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800faca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800facc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	009b      	lsls	r3, r3, #2
 800fad2:	461a      	mov	r2, r3
 800fad4:	21a5      	movs	r1, #165	; 0xa5
 800fad6:	f001 f9d3 	bl	8010e80 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fadc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fade:	6879      	ldr	r1, [r7, #4]
 800fae0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800fae4:	440b      	add	r3, r1
 800fae6:	009b      	lsls	r3, r3, #2
 800fae8:	4413      	add	r3, r2
 800faea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800faec:	69bb      	ldr	r3, [r7, #24]
 800faee:	f023 0307 	bic.w	r3, r3, #7
 800faf2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800faf4:	69bb      	ldr	r3, [r7, #24]
 800faf6:	f003 0307 	and.w	r3, r3, #7
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d00a      	beq.n	800fb14 <prvInitialiseNewTask+0x58>
	__asm volatile
 800fafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb02:	f383 8811 	msr	BASEPRI, r3
 800fb06:	f3bf 8f6f 	isb	sy
 800fb0a:	f3bf 8f4f 	dsb	sy
 800fb0e:	617b      	str	r3, [r7, #20]
}
 800fb10:	bf00      	nop
 800fb12:	e7fe      	b.n	800fb12 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fb14:	68bb      	ldr	r3, [r7, #8]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d01f      	beq.n	800fb5a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	61fb      	str	r3, [r7, #28]
 800fb1e:	e012      	b.n	800fb46 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fb20:	68ba      	ldr	r2, [r7, #8]
 800fb22:	69fb      	ldr	r3, [r7, #28]
 800fb24:	4413      	add	r3, r2
 800fb26:	7819      	ldrb	r1, [r3, #0]
 800fb28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb2a:	69fb      	ldr	r3, [r7, #28]
 800fb2c:	4413      	add	r3, r2
 800fb2e:	3334      	adds	r3, #52	; 0x34
 800fb30:	460a      	mov	r2, r1
 800fb32:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fb34:	68ba      	ldr	r2, [r7, #8]
 800fb36:	69fb      	ldr	r3, [r7, #28]
 800fb38:	4413      	add	r3, r2
 800fb3a:	781b      	ldrb	r3, [r3, #0]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d006      	beq.n	800fb4e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fb40:	69fb      	ldr	r3, [r7, #28]
 800fb42:	3301      	adds	r3, #1
 800fb44:	61fb      	str	r3, [r7, #28]
 800fb46:	69fb      	ldr	r3, [r7, #28]
 800fb48:	2b0f      	cmp	r3, #15
 800fb4a:	d9e9      	bls.n	800fb20 <prvInitialiseNewTask+0x64>
 800fb4c:	e000      	b.n	800fb50 <prvInitialiseNewTask+0x94>
			{
				break;
 800fb4e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fb50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb52:	2200      	movs	r2, #0
 800fb54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fb58:	e003      	b.n	800fb62 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb64:	2b37      	cmp	r3, #55	; 0x37
 800fb66:	d901      	bls.n	800fb6c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fb68:	2337      	movs	r3, #55	; 0x37
 800fb6a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fb6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb70:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb76:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fb78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb80:	3304      	adds	r3, #4
 800fb82:	4618      	mov	r0, r3
 800fb84:	f7fe fd96 	bl	800e6b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fb88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb8a:	3318      	adds	r3, #24
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f7fe fd91 	bl	800e6b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fba0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fba6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbaa:	2200      	movs	r2, #0
 800fbac:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbb0:	2200      	movs	r2, #0
 800fbb2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fbb6:	683a      	ldr	r2, [r7, #0]
 800fbb8:	68f9      	ldr	r1, [r7, #12]
 800fbba:	69b8      	ldr	r0, [r7, #24]
 800fbbc:	f7fe fe0e 	bl	800e7dc <pxPortInitialiseStack>
 800fbc0:	4602      	mov	r2, r0
 800fbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbc4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fbc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d002      	beq.n	800fbd2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fbd2:	bf00      	nop
 800fbd4:	3720      	adds	r7, #32
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}
	...

0800fbdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b082      	sub	sp, #8
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fbe4:	f7fe ff26 	bl	800ea34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fbe8:	4b2d      	ldr	r3, [pc, #180]	; (800fca0 <prvAddNewTaskToReadyList+0xc4>)
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	3301      	adds	r3, #1
 800fbee:	4a2c      	ldr	r2, [pc, #176]	; (800fca0 <prvAddNewTaskToReadyList+0xc4>)
 800fbf0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fbf2:	4b2c      	ldr	r3, [pc, #176]	; (800fca4 <prvAddNewTaskToReadyList+0xc8>)
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d109      	bne.n	800fc0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fbfa:	4a2a      	ldr	r2, [pc, #168]	; (800fca4 <prvAddNewTaskToReadyList+0xc8>)
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fc00:	4b27      	ldr	r3, [pc, #156]	; (800fca0 <prvAddNewTaskToReadyList+0xc4>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	2b01      	cmp	r3, #1
 800fc06:	d110      	bne.n	800fc2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fc08:	f000 fc16 	bl	8010438 <prvInitialiseTaskLists>
 800fc0c:	e00d      	b.n	800fc2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fc0e:	4b26      	ldr	r3, [pc, #152]	; (800fca8 <prvAddNewTaskToReadyList+0xcc>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d109      	bne.n	800fc2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fc16:	4b23      	ldr	r3, [pc, #140]	; (800fca4 <prvAddNewTaskToReadyList+0xc8>)
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc20:	429a      	cmp	r2, r3
 800fc22:	d802      	bhi.n	800fc2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fc24:	4a1f      	ldr	r2, [pc, #124]	; (800fca4 <prvAddNewTaskToReadyList+0xc8>)
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fc2a:	4b20      	ldr	r3, [pc, #128]	; (800fcac <prvAddNewTaskToReadyList+0xd0>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	3301      	adds	r3, #1
 800fc30:	4a1e      	ldr	r2, [pc, #120]	; (800fcac <prvAddNewTaskToReadyList+0xd0>)
 800fc32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fc34:	4b1d      	ldr	r3, [pc, #116]	; (800fcac <prvAddNewTaskToReadyList+0xd0>)
 800fc36:	681a      	ldr	r2, [r3, #0]
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc40:	4b1b      	ldr	r3, [pc, #108]	; (800fcb0 <prvAddNewTaskToReadyList+0xd4>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	429a      	cmp	r2, r3
 800fc46:	d903      	bls.n	800fc50 <prvAddNewTaskToReadyList+0x74>
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc4c:	4a18      	ldr	r2, [pc, #96]	; (800fcb0 <prvAddNewTaskToReadyList+0xd4>)
 800fc4e:	6013      	str	r3, [r2, #0]
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc54:	4613      	mov	r3, r2
 800fc56:	009b      	lsls	r3, r3, #2
 800fc58:	4413      	add	r3, r2
 800fc5a:	009b      	lsls	r3, r3, #2
 800fc5c:	4a15      	ldr	r2, [pc, #84]	; (800fcb4 <prvAddNewTaskToReadyList+0xd8>)
 800fc5e:	441a      	add	r2, r3
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	3304      	adds	r3, #4
 800fc64:	4619      	mov	r1, r3
 800fc66:	4610      	mov	r0, r2
 800fc68:	f7fe fd31 	bl	800e6ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fc6c:	f7fe ff12 	bl	800ea94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fc70:	4b0d      	ldr	r3, [pc, #52]	; (800fca8 <prvAddNewTaskToReadyList+0xcc>)
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d00e      	beq.n	800fc96 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fc78:	4b0a      	ldr	r3, [pc, #40]	; (800fca4 <prvAddNewTaskToReadyList+0xc8>)
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc82:	429a      	cmp	r2, r3
 800fc84:	d207      	bcs.n	800fc96 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fc86:	4b0c      	ldr	r3, [pc, #48]	; (800fcb8 <prvAddNewTaskToReadyList+0xdc>)
 800fc88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc8c:	601a      	str	r2, [r3, #0]
 800fc8e:	f3bf 8f4f 	dsb	sy
 800fc92:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fc96:	bf00      	nop
 800fc98:	3708      	adds	r7, #8
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	bd80      	pop	{r7, pc}
 800fc9e:	bf00      	nop
 800fca0:	240049d8 	.word	0x240049d8
 800fca4:	24004504 	.word	0x24004504
 800fca8:	240049e4 	.word	0x240049e4
 800fcac:	240049f4 	.word	0x240049f4
 800fcb0:	240049e0 	.word	0x240049e0
 800fcb4:	24004508 	.word	0x24004508
 800fcb8:	e000ed04 	.word	0xe000ed04

0800fcbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b084      	sub	sp, #16
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d017      	beq.n	800fcfe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fcce:	4b13      	ldr	r3, [pc, #76]	; (800fd1c <vTaskDelay+0x60>)
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d00a      	beq.n	800fcec <vTaskDelay+0x30>
	__asm volatile
 800fcd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcda:	f383 8811 	msr	BASEPRI, r3
 800fcde:	f3bf 8f6f 	isb	sy
 800fce2:	f3bf 8f4f 	dsb	sy
 800fce6:	60bb      	str	r3, [r7, #8]
}
 800fce8:	bf00      	nop
 800fcea:	e7fe      	b.n	800fcea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fcec:	f000 f880 	bl	800fdf0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fcf0:	2100      	movs	r1, #0
 800fcf2:	6878      	ldr	r0, [r7, #4]
 800fcf4:	f000 fcea 	bl	80106cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fcf8:	f000 f888 	bl	800fe0c <xTaskResumeAll>
 800fcfc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d107      	bne.n	800fd14 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800fd04:	4b06      	ldr	r3, [pc, #24]	; (800fd20 <vTaskDelay+0x64>)
 800fd06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd0a:	601a      	str	r2, [r3, #0]
 800fd0c:	f3bf 8f4f 	dsb	sy
 800fd10:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fd14:	bf00      	nop
 800fd16:	3710      	adds	r7, #16
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}
 800fd1c:	24004a00 	.word	0x24004a00
 800fd20:	e000ed04 	.word	0xe000ed04

0800fd24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b08a      	sub	sp, #40	; 0x28
 800fd28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fd2e:	2300      	movs	r3, #0
 800fd30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fd32:	463a      	mov	r2, r7
 800fd34:	1d39      	adds	r1, r7, #4
 800fd36:	f107 0308 	add.w	r3, r7, #8
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f7fe fa7c 	bl	800e238 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fd40:	6839      	ldr	r1, [r7, #0]
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	68ba      	ldr	r2, [r7, #8]
 800fd46:	9202      	str	r2, [sp, #8]
 800fd48:	9301      	str	r3, [sp, #4]
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	9300      	str	r3, [sp, #0]
 800fd4e:	2300      	movs	r3, #0
 800fd50:	460a      	mov	r2, r1
 800fd52:	4921      	ldr	r1, [pc, #132]	; (800fdd8 <vTaskStartScheduler+0xb4>)
 800fd54:	4821      	ldr	r0, [pc, #132]	; (800fddc <vTaskStartScheduler+0xb8>)
 800fd56:	f7ff fe0f 	bl	800f978 <xTaskCreateStatic>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	4a20      	ldr	r2, [pc, #128]	; (800fde0 <vTaskStartScheduler+0xbc>)
 800fd5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fd60:	4b1f      	ldr	r3, [pc, #124]	; (800fde0 <vTaskStartScheduler+0xbc>)
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d002      	beq.n	800fd6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fd68:	2301      	movs	r3, #1
 800fd6a:	617b      	str	r3, [r7, #20]
 800fd6c:	e001      	b.n	800fd72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fd6e:	2300      	movs	r3, #0
 800fd70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fd72:	697b      	ldr	r3, [r7, #20]
 800fd74:	2b01      	cmp	r3, #1
 800fd76:	d102      	bne.n	800fd7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fd78:	f000 fcfc 	bl	8010774 <xTimerCreateTimerTask>
 800fd7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fd7e:	697b      	ldr	r3, [r7, #20]
 800fd80:	2b01      	cmp	r3, #1
 800fd82:	d116      	bne.n	800fdb2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800fd84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd88:	f383 8811 	msr	BASEPRI, r3
 800fd8c:	f3bf 8f6f 	isb	sy
 800fd90:	f3bf 8f4f 	dsb	sy
 800fd94:	613b      	str	r3, [r7, #16]
}
 800fd96:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fd98:	4b12      	ldr	r3, [pc, #72]	; (800fde4 <vTaskStartScheduler+0xc0>)
 800fd9a:	f04f 32ff 	mov.w	r2, #4294967295
 800fd9e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fda0:	4b11      	ldr	r3, [pc, #68]	; (800fde8 <vTaskStartScheduler+0xc4>)
 800fda2:	2201      	movs	r2, #1
 800fda4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fda6:	4b11      	ldr	r3, [pc, #68]	; (800fdec <vTaskStartScheduler+0xc8>)
 800fda8:	2200      	movs	r2, #0
 800fdaa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fdac:	f7fe fda0 	bl	800e8f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fdb0:	e00e      	b.n	800fdd0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fdb2:	697b      	ldr	r3, [r7, #20]
 800fdb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdb8:	d10a      	bne.n	800fdd0 <vTaskStartScheduler+0xac>
	__asm volatile
 800fdba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdbe:	f383 8811 	msr	BASEPRI, r3
 800fdc2:	f3bf 8f6f 	isb	sy
 800fdc6:	f3bf 8f4f 	dsb	sy
 800fdca:	60fb      	str	r3, [r7, #12]
}
 800fdcc:	bf00      	nop
 800fdce:	e7fe      	b.n	800fdce <vTaskStartScheduler+0xaa>
}
 800fdd0:	bf00      	nop
 800fdd2:	3718      	adds	r7, #24
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}
 800fdd8:	08013bf8 	.word	0x08013bf8
 800fddc:	08010409 	.word	0x08010409
 800fde0:	240049fc 	.word	0x240049fc
 800fde4:	240049f8 	.word	0x240049f8
 800fde8:	240049e4 	.word	0x240049e4
 800fdec:	240049dc 	.word	0x240049dc

0800fdf0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fdf0:	b480      	push	{r7}
 800fdf2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fdf4:	4b04      	ldr	r3, [pc, #16]	; (800fe08 <vTaskSuspendAll+0x18>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	3301      	adds	r3, #1
 800fdfa:	4a03      	ldr	r2, [pc, #12]	; (800fe08 <vTaskSuspendAll+0x18>)
 800fdfc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fdfe:	bf00      	nop
 800fe00:	46bd      	mov	sp, r7
 800fe02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe06:	4770      	bx	lr
 800fe08:	24004a00 	.word	0x24004a00

0800fe0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b084      	sub	sp, #16
 800fe10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fe12:	2300      	movs	r3, #0
 800fe14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fe16:	2300      	movs	r3, #0
 800fe18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fe1a:	4b42      	ldr	r3, [pc, #264]	; (800ff24 <xTaskResumeAll+0x118>)
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d10a      	bne.n	800fe38 <xTaskResumeAll+0x2c>
	__asm volatile
 800fe22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe26:	f383 8811 	msr	BASEPRI, r3
 800fe2a:	f3bf 8f6f 	isb	sy
 800fe2e:	f3bf 8f4f 	dsb	sy
 800fe32:	603b      	str	r3, [r7, #0]
}
 800fe34:	bf00      	nop
 800fe36:	e7fe      	b.n	800fe36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fe38:	f7fe fdfc 	bl	800ea34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fe3c:	4b39      	ldr	r3, [pc, #228]	; (800ff24 <xTaskResumeAll+0x118>)
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	3b01      	subs	r3, #1
 800fe42:	4a38      	ldr	r2, [pc, #224]	; (800ff24 <xTaskResumeAll+0x118>)
 800fe44:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe46:	4b37      	ldr	r3, [pc, #220]	; (800ff24 <xTaskResumeAll+0x118>)
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d162      	bne.n	800ff14 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fe4e:	4b36      	ldr	r3, [pc, #216]	; (800ff28 <xTaskResumeAll+0x11c>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d05e      	beq.n	800ff14 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fe56:	e02f      	b.n	800feb8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe58:	4b34      	ldr	r3, [pc, #208]	; (800ff2c <xTaskResumeAll+0x120>)
 800fe5a:	68db      	ldr	r3, [r3, #12]
 800fe5c:	68db      	ldr	r3, [r3, #12]
 800fe5e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	3318      	adds	r3, #24
 800fe64:	4618      	mov	r0, r3
 800fe66:	f7fe fc8f 	bl	800e788 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	3304      	adds	r3, #4
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f7fe fc8a 	bl	800e788 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe78:	4b2d      	ldr	r3, [pc, #180]	; (800ff30 <xTaskResumeAll+0x124>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	429a      	cmp	r2, r3
 800fe7e:	d903      	bls.n	800fe88 <xTaskResumeAll+0x7c>
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe84:	4a2a      	ldr	r2, [pc, #168]	; (800ff30 <xTaskResumeAll+0x124>)
 800fe86:	6013      	str	r3, [r2, #0]
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe8c:	4613      	mov	r3, r2
 800fe8e:	009b      	lsls	r3, r3, #2
 800fe90:	4413      	add	r3, r2
 800fe92:	009b      	lsls	r3, r3, #2
 800fe94:	4a27      	ldr	r2, [pc, #156]	; (800ff34 <xTaskResumeAll+0x128>)
 800fe96:	441a      	add	r2, r3
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	3304      	adds	r3, #4
 800fe9c:	4619      	mov	r1, r3
 800fe9e:	4610      	mov	r0, r2
 800fea0:	f7fe fc15 	bl	800e6ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fea8:	4b23      	ldr	r3, [pc, #140]	; (800ff38 <xTaskResumeAll+0x12c>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feae:	429a      	cmp	r2, r3
 800feb0:	d302      	bcc.n	800feb8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800feb2:	4b22      	ldr	r3, [pc, #136]	; (800ff3c <xTaskResumeAll+0x130>)
 800feb4:	2201      	movs	r2, #1
 800feb6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800feb8:	4b1c      	ldr	r3, [pc, #112]	; (800ff2c <xTaskResumeAll+0x120>)
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d1cb      	bne.n	800fe58 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d001      	beq.n	800feca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fec6:	f000 fb55 	bl	8010574 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800feca:	4b1d      	ldr	r3, [pc, #116]	; (800ff40 <xTaskResumeAll+0x134>)
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d010      	beq.n	800fef8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fed6:	f000 f847 	bl	800ff68 <xTaskIncrementTick>
 800feda:	4603      	mov	r3, r0
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d002      	beq.n	800fee6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800fee0:	4b16      	ldr	r3, [pc, #88]	; (800ff3c <xTaskResumeAll+0x130>)
 800fee2:	2201      	movs	r2, #1
 800fee4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	3b01      	subs	r3, #1
 800feea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d1f1      	bne.n	800fed6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800fef2:	4b13      	ldr	r3, [pc, #76]	; (800ff40 <xTaskResumeAll+0x134>)
 800fef4:	2200      	movs	r2, #0
 800fef6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fef8:	4b10      	ldr	r3, [pc, #64]	; (800ff3c <xTaskResumeAll+0x130>)
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d009      	beq.n	800ff14 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ff00:	2301      	movs	r3, #1
 800ff02:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ff04:	4b0f      	ldr	r3, [pc, #60]	; (800ff44 <xTaskResumeAll+0x138>)
 800ff06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff0a:	601a      	str	r2, [r3, #0]
 800ff0c:	f3bf 8f4f 	dsb	sy
 800ff10:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ff14:	f7fe fdbe 	bl	800ea94 <vPortExitCritical>

	return xAlreadyYielded;
 800ff18:	68bb      	ldr	r3, [r7, #8]
}
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	3710      	adds	r7, #16
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	bd80      	pop	{r7, pc}
 800ff22:	bf00      	nop
 800ff24:	24004a00 	.word	0x24004a00
 800ff28:	240049d8 	.word	0x240049d8
 800ff2c:	24004998 	.word	0x24004998
 800ff30:	240049e0 	.word	0x240049e0
 800ff34:	24004508 	.word	0x24004508
 800ff38:	24004504 	.word	0x24004504
 800ff3c:	240049ec 	.word	0x240049ec
 800ff40:	240049e8 	.word	0x240049e8
 800ff44:	e000ed04 	.word	0xe000ed04

0800ff48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ff48:	b480      	push	{r7}
 800ff4a:	b083      	sub	sp, #12
 800ff4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ff4e:	4b05      	ldr	r3, [pc, #20]	; (800ff64 <xTaskGetTickCount+0x1c>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ff54:	687b      	ldr	r3, [r7, #4]
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	370c      	adds	r7, #12
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff60:	4770      	bx	lr
 800ff62:	bf00      	nop
 800ff64:	240049dc 	.word	0x240049dc

0800ff68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b086      	sub	sp, #24
 800ff6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ff6e:	2300      	movs	r3, #0
 800ff70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff72:	4b4f      	ldr	r3, [pc, #316]	; (80100b0 <xTaskIncrementTick+0x148>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	f040 808f 	bne.w	801009a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ff7c:	4b4d      	ldr	r3, [pc, #308]	; (80100b4 <xTaskIncrementTick+0x14c>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	3301      	adds	r3, #1
 800ff82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ff84:	4a4b      	ldr	r2, [pc, #300]	; (80100b4 <xTaskIncrementTick+0x14c>)
 800ff86:	693b      	ldr	r3, [r7, #16]
 800ff88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ff8a:	693b      	ldr	r3, [r7, #16]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d120      	bne.n	800ffd2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ff90:	4b49      	ldr	r3, [pc, #292]	; (80100b8 <xTaskIncrementTick+0x150>)
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d00a      	beq.n	800ffb0 <xTaskIncrementTick+0x48>
	__asm volatile
 800ff9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff9e:	f383 8811 	msr	BASEPRI, r3
 800ffa2:	f3bf 8f6f 	isb	sy
 800ffa6:	f3bf 8f4f 	dsb	sy
 800ffaa:	603b      	str	r3, [r7, #0]
}
 800ffac:	bf00      	nop
 800ffae:	e7fe      	b.n	800ffae <xTaskIncrementTick+0x46>
 800ffb0:	4b41      	ldr	r3, [pc, #260]	; (80100b8 <xTaskIncrementTick+0x150>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	60fb      	str	r3, [r7, #12]
 800ffb6:	4b41      	ldr	r3, [pc, #260]	; (80100bc <xTaskIncrementTick+0x154>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	4a3f      	ldr	r2, [pc, #252]	; (80100b8 <xTaskIncrementTick+0x150>)
 800ffbc:	6013      	str	r3, [r2, #0]
 800ffbe:	4a3f      	ldr	r2, [pc, #252]	; (80100bc <xTaskIncrementTick+0x154>)
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	6013      	str	r3, [r2, #0]
 800ffc4:	4b3e      	ldr	r3, [pc, #248]	; (80100c0 <xTaskIncrementTick+0x158>)
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	3301      	adds	r3, #1
 800ffca:	4a3d      	ldr	r2, [pc, #244]	; (80100c0 <xTaskIncrementTick+0x158>)
 800ffcc:	6013      	str	r3, [r2, #0]
 800ffce:	f000 fad1 	bl	8010574 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ffd2:	4b3c      	ldr	r3, [pc, #240]	; (80100c4 <xTaskIncrementTick+0x15c>)
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	693a      	ldr	r2, [r7, #16]
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	d349      	bcc.n	8010070 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ffdc:	4b36      	ldr	r3, [pc, #216]	; (80100b8 <xTaskIncrementTick+0x150>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d104      	bne.n	800fff0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ffe6:	4b37      	ldr	r3, [pc, #220]	; (80100c4 <xTaskIncrementTick+0x15c>)
 800ffe8:	f04f 32ff 	mov.w	r2, #4294967295
 800ffec:	601a      	str	r2, [r3, #0]
					break;
 800ffee:	e03f      	b.n	8010070 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fff0:	4b31      	ldr	r3, [pc, #196]	; (80100b8 <xTaskIncrementTick+0x150>)
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	68db      	ldr	r3, [r3, #12]
 800fff6:	68db      	ldr	r3, [r3, #12]
 800fff8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fffa:	68bb      	ldr	r3, [r7, #8]
 800fffc:	685b      	ldr	r3, [r3, #4]
 800fffe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010000:	693a      	ldr	r2, [r7, #16]
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	429a      	cmp	r2, r3
 8010006:	d203      	bcs.n	8010010 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010008:	4a2e      	ldr	r2, [pc, #184]	; (80100c4 <xTaskIncrementTick+0x15c>)
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801000e:	e02f      	b.n	8010070 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010010:	68bb      	ldr	r3, [r7, #8]
 8010012:	3304      	adds	r3, #4
 8010014:	4618      	mov	r0, r3
 8010016:	f7fe fbb7 	bl	800e788 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801001a:	68bb      	ldr	r3, [r7, #8]
 801001c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801001e:	2b00      	cmp	r3, #0
 8010020:	d004      	beq.n	801002c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	3318      	adds	r3, #24
 8010026:	4618      	mov	r0, r3
 8010028:	f7fe fbae 	bl	800e788 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010030:	4b25      	ldr	r3, [pc, #148]	; (80100c8 <xTaskIncrementTick+0x160>)
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	429a      	cmp	r2, r3
 8010036:	d903      	bls.n	8010040 <xTaskIncrementTick+0xd8>
 8010038:	68bb      	ldr	r3, [r7, #8]
 801003a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801003c:	4a22      	ldr	r2, [pc, #136]	; (80100c8 <xTaskIncrementTick+0x160>)
 801003e:	6013      	str	r3, [r2, #0]
 8010040:	68bb      	ldr	r3, [r7, #8]
 8010042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010044:	4613      	mov	r3, r2
 8010046:	009b      	lsls	r3, r3, #2
 8010048:	4413      	add	r3, r2
 801004a:	009b      	lsls	r3, r3, #2
 801004c:	4a1f      	ldr	r2, [pc, #124]	; (80100cc <xTaskIncrementTick+0x164>)
 801004e:	441a      	add	r2, r3
 8010050:	68bb      	ldr	r3, [r7, #8]
 8010052:	3304      	adds	r3, #4
 8010054:	4619      	mov	r1, r3
 8010056:	4610      	mov	r0, r2
 8010058:	f7fe fb39 	bl	800e6ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801005c:	68bb      	ldr	r3, [r7, #8]
 801005e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010060:	4b1b      	ldr	r3, [pc, #108]	; (80100d0 <xTaskIncrementTick+0x168>)
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010066:	429a      	cmp	r2, r3
 8010068:	d3b8      	bcc.n	800ffdc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801006a:	2301      	movs	r3, #1
 801006c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801006e:	e7b5      	b.n	800ffdc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010070:	4b17      	ldr	r3, [pc, #92]	; (80100d0 <xTaskIncrementTick+0x168>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010076:	4915      	ldr	r1, [pc, #84]	; (80100cc <xTaskIncrementTick+0x164>)
 8010078:	4613      	mov	r3, r2
 801007a:	009b      	lsls	r3, r3, #2
 801007c:	4413      	add	r3, r2
 801007e:	009b      	lsls	r3, r3, #2
 8010080:	440b      	add	r3, r1
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	2b01      	cmp	r3, #1
 8010086:	d901      	bls.n	801008c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8010088:	2301      	movs	r3, #1
 801008a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801008c:	4b11      	ldr	r3, [pc, #68]	; (80100d4 <xTaskIncrementTick+0x16c>)
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d007      	beq.n	80100a4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8010094:	2301      	movs	r3, #1
 8010096:	617b      	str	r3, [r7, #20]
 8010098:	e004      	b.n	80100a4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801009a:	4b0f      	ldr	r3, [pc, #60]	; (80100d8 <xTaskIncrementTick+0x170>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	3301      	adds	r3, #1
 80100a0:	4a0d      	ldr	r2, [pc, #52]	; (80100d8 <xTaskIncrementTick+0x170>)
 80100a2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80100a4:	697b      	ldr	r3, [r7, #20]
}
 80100a6:	4618      	mov	r0, r3
 80100a8:	3718      	adds	r7, #24
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}
 80100ae:	bf00      	nop
 80100b0:	24004a00 	.word	0x24004a00
 80100b4:	240049dc 	.word	0x240049dc
 80100b8:	24004990 	.word	0x24004990
 80100bc:	24004994 	.word	0x24004994
 80100c0:	240049f0 	.word	0x240049f0
 80100c4:	240049f8 	.word	0x240049f8
 80100c8:	240049e0 	.word	0x240049e0
 80100cc:	24004508 	.word	0x24004508
 80100d0:	24004504 	.word	0x24004504
 80100d4:	240049ec 	.word	0x240049ec
 80100d8:	240049e8 	.word	0x240049e8

080100dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80100dc:	b480      	push	{r7}
 80100de:	b085      	sub	sp, #20
 80100e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80100e2:	4b28      	ldr	r3, [pc, #160]	; (8010184 <vTaskSwitchContext+0xa8>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d003      	beq.n	80100f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80100ea:	4b27      	ldr	r3, [pc, #156]	; (8010188 <vTaskSwitchContext+0xac>)
 80100ec:	2201      	movs	r2, #1
 80100ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80100f0:	e041      	b.n	8010176 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80100f2:	4b25      	ldr	r3, [pc, #148]	; (8010188 <vTaskSwitchContext+0xac>)
 80100f4:	2200      	movs	r2, #0
 80100f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80100f8:	4b24      	ldr	r3, [pc, #144]	; (801018c <vTaskSwitchContext+0xb0>)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	60fb      	str	r3, [r7, #12]
 80100fe:	e010      	b.n	8010122 <vTaskSwitchContext+0x46>
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d10a      	bne.n	801011c <vTaskSwitchContext+0x40>
	__asm volatile
 8010106:	f04f 0350 	mov.w	r3, #80	; 0x50
 801010a:	f383 8811 	msr	BASEPRI, r3
 801010e:	f3bf 8f6f 	isb	sy
 8010112:	f3bf 8f4f 	dsb	sy
 8010116:	607b      	str	r3, [r7, #4]
}
 8010118:	bf00      	nop
 801011a:	e7fe      	b.n	801011a <vTaskSwitchContext+0x3e>
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	3b01      	subs	r3, #1
 8010120:	60fb      	str	r3, [r7, #12]
 8010122:	491b      	ldr	r1, [pc, #108]	; (8010190 <vTaskSwitchContext+0xb4>)
 8010124:	68fa      	ldr	r2, [r7, #12]
 8010126:	4613      	mov	r3, r2
 8010128:	009b      	lsls	r3, r3, #2
 801012a:	4413      	add	r3, r2
 801012c:	009b      	lsls	r3, r3, #2
 801012e:	440b      	add	r3, r1
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d0e4      	beq.n	8010100 <vTaskSwitchContext+0x24>
 8010136:	68fa      	ldr	r2, [r7, #12]
 8010138:	4613      	mov	r3, r2
 801013a:	009b      	lsls	r3, r3, #2
 801013c:	4413      	add	r3, r2
 801013e:	009b      	lsls	r3, r3, #2
 8010140:	4a13      	ldr	r2, [pc, #76]	; (8010190 <vTaskSwitchContext+0xb4>)
 8010142:	4413      	add	r3, r2
 8010144:	60bb      	str	r3, [r7, #8]
 8010146:	68bb      	ldr	r3, [r7, #8]
 8010148:	685b      	ldr	r3, [r3, #4]
 801014a:	685a      	ldr	r2, [r3, #4]
 801014c:	68bb      	ldr	r3, [r7, #8]
 801014e:	605a      	str	r2, [r3, #4]
 8010150:	68bb      	ldr	r3, [r7, #8]
 8010152:	685a      	ldr	r2, [r3, #4]
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	3308      	adds	r3, #8
 8010158:	429a      	cmp	r2, r3
 801015a:	d104      	bne.n	8010166 <vTaskSwitchContext+0x8a>
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	685b      	ldr	r3, [r3, #4]
 8010160:	685a      	ldr	r2, [r3, #4]
 8010162:	68bb      	ldr	r3, [r7, #8]
 8010164:	605a      	str	r2, [r3, #4]
 8010166:	68bb      	ldr	r3, [r7, #8]
 8010168:	685b      	ldr	r3, [r3, #4]
 801016a:	68db      	ldr	r3, [r3, #12]
 801016c:	4a09      	ldr	r2, [pc, #36]	; (8010194 <vTaskSwitchContext+0xb8>)
 801016e:	6013      	str	r3, [r2, #0]
 8010170:	4a06      	ldr	r2, [pc, #24]	; (801018c <vTaskSwitchContext+0xb0>)
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	6013      	str	r3, [r2, #0]
}
 8010176:	bf00      	nop
 8010178:	3714      	adds	r7, #20
 801017a:	46bd      	mov	sp, r7
 801017c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010180:	4770      	bx	lr
 8010182:	bf00      	nop
 8010184:	24004a00 	.word	0x24004a00
 8010188:	240049ec 	.word	0x240049ec
 801018c:	240049e0 	.word	0x240049e0
 8010190:	24004508 	.word	0x24004508
 8010194:	24004504 	.word	0x24004504

08010198 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b084      	sub	sp, #16
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
 80101a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d10a      	bne.n	80101be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80101a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101ac:	f383 8811 	msr	BASEPRI, r3
 80101b0:	f3bf 8f6f 	isb	sy
 80101b4:	f3bf 8f4f 	dsb	sy
 80101b8:	60fb      	str	r3, [r7, #12]
}
 80101ba:	bf00      	nop
 80101bc:	e7fe      	b.n	80101bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80101be:	4b07      	ldr	r3, [pc, #28]	; (80101dc <vTaskPlaceOnEventList+0x44>)
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	3318      	adds	r3, #24
 80101c4:	4619      	mov	r1, r3
 80101c6:	6878      	ldr	r0, [r7, #4]
 80101c8:	f7fe faa5 	bl	800e716 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80101cc:	2101      	movs	r1, #1
 80101ce:	6838      	ldr	r0, [r7, #0]
 80101d0:	f000 fa7c 	bl	80106cc <prvAddCurrentTaskToDelayedList>
}
 80101d4:	bf00      	nop
 80101d6:	3710      	adds	r7, #16
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}
 80101dc:	24004504 	.word	0x24004504

080101e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b086      	sub	sp, #24
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	60f8      	str	r0, [r7, #12]
 80101e8:	60b9      	str	r1, [r7, #8]
 80101ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d10a      	bne.n	8010208 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80101f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101f6:	f383 8811 	msr	BASEPRI, r3
 80101fa:	f3bf 8f6f 	isb	sy
 80101fe:	f3bf 8f4f 	dsb	sy
 8010202:	617b      	str	r3, [r7, #20]
}
 8010204:	bf00      	nop
 8010206:	e7fe      	b.n	8010206 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010208:	4b0a      	ldr	r3, [pc, #40]	; (8010234 <vTaskPlaceOnEventListRestricted+0x54>)
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	3318      	adds	r3, #24
 801020e:	4619      	mov	r1, r3
 8010210:	68f8      	ldr	r0, [r7, #12]
 8010212:	f7fe fa5c 	bl	800e6ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d002      	beq.n	8010222 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801021c:	f04f 33ff 	mov.w	r3, #4294967295
 8010220:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010222:	6879      	ldr	r1, [r7, #4]
 8010224:	68b8      	ldr	r0, [r7, #8]
 8010226:	f000 fa51 	bl	80106cc <prvAddCurrentTaskToDelayedList>
	}
 801022a:	bf00      	nop
 801022c:	3718      	adds	r7, #24
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}
 8010232:	bf00      	nop
 8010234:	24004504 	.word	0x24004504

08010238 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b086      	sub	sp, #24
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	68db      	ldr	r3, [r3, #12]
 8010244:	68db      	ldr	r3, [r3, #12]
 8010246:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010248:	693b      	ldr	r3, [r7, #16]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d10a      	bne.n	8010264 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801024e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010252:	f383 8811 	msr	BASEPRI, r3
 8010256:	f3bf 8f6f 	isb	sy
 801025a:	f3bf 8f4f 	dsb	sy
 801025e:	60fb      	str	r3, [r7, #12]
}
 8010260:	bf00      	nop
 8010262:	e7fe      	b.n	8010262 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010264:	693b      	ldr	r3, [r7, #16]
 8010266:	3318      	adds	r3, #24
 8010268:	4618      	mov	r0, r3
 801026a:	f7fe fa8d 	bl	800e788 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801026e:	4b1e      	ldr	r3, [pc, #120]	; (80102e8 <xTaskRemoveFromEventList+0xb0>)
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d11d      	bne.n	80102b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010276:	693b      	ldr	r3, [r7, #16]
 8010278:	3304      	adds	r3, #4
 801027a:	4618      	mov	r0, r3
 801027c:	f7fe fa84 	bl	800e788 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010280:	693b      	ldr	r3, [r7, #16]
 8010282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010284:	4b19      	ldr	r3, [pc, #100]	; (80102ec <xTaskRemoveFromEventList+0xb4>)
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	429a      	cmp	r2, r3
 801028a:	d903      	bls.n	8010294 <xTaskRemoveFromEventList+0x5c>
 801028c:	693b      	ldr	r3, [r7, #16]
 801028e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010290:	4a16      	ldr	r2, [pc, #88]	; (80102ec <xTaskRemoveFromEventList+0xb4>)
 8010292:	6013      	str	r3, [r2, #0]
 8010294:	693b      	ldr	r3, [r7, #16]
 8010296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010298:	4613      	mov	r3, r2
 801029a:	009b      	lsls	r3, r3, #2
 801029c:	4413      	add	r3, r2
 801029e:	009b      	lsls	r3, r3, #2
 80102a0:	4a13      	ldr	r2, [pc, #76]	; (80102f0 <xTaskRemoveFromEventList+0xb8>)
 80102a2:	441a      	add	r2, r3
 80102a4:	693b      	ldr	r3, [r7, #16]
 80102a6:	3304      	adds	r3, #4
 80102a8:	4619      	mov	r1, r3
 80102aa:	4610      	mov	r0, r2
 80102ac:	f7fe fa0f 	bl	800e6ce <vListInsertEnd>
 80102b0:	e005      	b.n	80102be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80102b2:	693b      	ldr	r3, [r7, #16]
 80102b4:	3318      	adds	r3, #24
 80102b6:	4619      	mov	r1, r3
 80102b8:	480e      	ldr	r0, [pc, #56]	; (80102f4 <xTaskRemoveFromEventList+0xbc>)
 80102ba:	f7fe fa08 	bl	800e6ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80102be:	693b      	ldr	r3, [r7, #16]
 80102c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102c2:	4b0d      	ldr	r3, [pc, #52]	; (80102f8 <xTaskRemoveFromEventList+0xc0>)
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102c8:	429a      	cmp	r2, r3
 80102ca:	d905      	bls.n	80102d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80102cc:	2301      	movs	r3, #1
 80102ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80102d0:	4b0a      	ldr	r3, [pc, #40]	; (80102fc <xTaskRemoveFromEventList+0xc4>)
 80102d2:	2201      	movs	r2, #1
 80102d4:	601a      	str	r2, [r3, #0]
 80102d6:	e001      	b.n	80102dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80102d8:	2300      	movs	r3, #0
 80102da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80102dc:	697b      	ldr	r3, [r7, #20]
}
 80102de:	4618      	mov	r0, r3
 80102e0:	3718      	adds	r7, #24
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bd80      	pop	{r7, pc}
 80102e6:	bf00      	nop
 80102e8:	24004a00 	.word	0x24004a00
 80102ec:	240049e0 	.word	0x240049e0
 80102f0:	24004508 	.word	0x24004508
 80102f4:	24004998 	.word	0x24004998
 80102f8:	24004504 	.word	0x24004504
 80102fc:	240049ec 	.word	0x240049ec

08010300 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010300:	b480      	push	{r7}
 8010302:	b083      	sub	sp, #12
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010308:	4b06      	ldr	r3, [pc, #24]	; (8010324 <vTaskInternalSetTimeOutState+0x24>)
 801030a:	681a      	ldr	r2, [r3, #0]
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010310:	4b05      	ldr	r3, [pc, #20]	; (8010328 <vTaskInternalSetTimeOutState+0x28>)
 8010312:	681a      	ldr	r2, [r3, #0]
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	605a      	str	r2, [r3, #4]
}
 8010318:	bf00      	nop
 801031a:	370c      	adds	r7, #12
 801031c:	46bd      	mov	sp, r7
 801031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010322:	4770      	bx	lr
 8010324:	240049f0 	.word	0x240049f0
 8010328:	240049dc 	.word	0x240049dc

0801032c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b088      	sub	sp, #32
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
 8010334:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d10a      	bne.n	8010352 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801033c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010340:	f383 8811 	msr	BASEPRI, r3
 8010344:	f3bf 8f6f 	isb	sy
 8010348:	f3bf 8f4f 	dsb	sy
 801034c:	613b      	str	r3, [r7, #16]
}
 801034e:	bf00      	nop
 8010350:	e7fe      	b.n	8010350 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010352:	683b      	ldr	r3, [r7, #0]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d10a      	bne.n	801036e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010358:	f04f 0350 	mov.w	r3, #80	; 0x50
 801035c:	f383 8811 	msr	BASEPRI, r3
 8010360:	f3bf 8f6f 	isb	sy
 8010364:	f3bf 8f4f 	dsb	sy
 8010368:	60fb      	str	r3, [r7, #12]
}
 801036a:	bf00      	nop
 801036c:	e7fe      	b.n	801036c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801036e:	f7fe fb61 	bl	800ea34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010372:	4b1d      	ldr	r3, [pc, #116]	; (80103e8 <xTaskCheckForTimeOut+0xbc>)
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	685b      	ldr	r3, [r3, #4]
 801037c:	69ba      	ldr	r2, [r7, #24]
 801037e:	1ad3      	subs	r3, r2, r3
 8010380:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	f1b3 3fff 	cmp.w	r3, #4294967295
 801038a:	d102      	bne.n	8010392 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801038c:	2300      	movs	r3, #0
 801038e:	61fb      	str	r3, [r7, #28]
 8010390:	e023      	b.n	80103da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681a      	ldr	r2, [r3, #0]
 8010396:	4b15      	ldr	r3, [pc, #84]	; (80103ec <xTaskCheckForTimeOut+0xc0>)
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	429a      	cmp	r2, r3
 801039c:	d007      	beq.n	80103ae <xTaskCheckForTimeOut+0x82>
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	685b      	ldr	r3, [r3, #4]
 80103a2:	69ba      	ldr	r2, [r7, #24]
 80103a4:	429a      	cmp	r2, r3
 80103a6:	d302      	bcc.n	80103ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80103a8:	2301      	movs	r3, #1
 80103aa:	61fb      	str	r3, [r7, #28]
 80103ac:	e015      	b.n	80103da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	697a      	ldr	r2, [r7, #20]
 80103b4:	429a      	cmp	r2, r3
 80103b6:	d20b      	bcs.n	80103d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80103b8:	683b      	ldr	r3, [r7, #0]
 80103ba:	681a      	ldr	r2, [r3, #0]
 80103bc:	697b      	ldr	r3, [r7, #20]
 80103be:	1ad2      	subs	r2, r2, r3
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80103c4:	6878      	ldr	r0, [r7, #4]
 80103c6:	f7ff ff9b 	bl	8010300 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80103ca:	2300      	movs	r3, #0
 80103cc:	61fb      	str	r3, [r7, #28]
 80103ce:	e004      	b.n	80103da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80103d0:	683b      	ldr	r3, [r7, #0]
 80103d2:	2200      	movs	r2, #0
 80103d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80103d6:	2301      	movs	r3, #1
 80103d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80103da:	f7fe fb5b 	bl	800ea94 <vPortExitCritical>

	return xReturn;
 80103de:	69fb      	ldr	r3, [r7, #28]
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	3720      	adds	r7, #32
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}
 80103e8:	240049dc 	.word	0x240049dc
 80103ec:	240049f0 	.word	0x240049f0

080103f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80103f0:	b480      	push	{r7}
 80103f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80103f4:	4b03      	ldr	r3, [pc, #12]	; (8010404 <vTaskMissedYield+0x14>)
 80103f6:	2201      	movs	r2, #1
 80103f8:	601a      	str	r2, [r3, #0]
}
 80103fa:	bf00      	nop
 80103fc:	46bd      	mov	sp, r7
 80103fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010402:	4770      	bx	lr
 8010404:	240049ec 	.word	0x240049ec

08010408 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b082      	sub	sp, #8
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010410:	f000 f852 	bl	80104b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010414:	4b06      	ldr	r3, [pc, #24]	; (8010430 <prvIdleTask+0x28>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	2b01      	cmp	r3, #1
 801041a:	d9f9      	bls.n	8010410 <prvIdleTask+0x8>
			{
				taskYIELD();
 801041c:	4b05      	ldr	r3, [pc, #20]	; (8010434 <prvIdleTask+0x2c>)
 801041e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010422:	601a      	str	r2, [r3, #0]
 8010424:	f3bf 8f4f 	dsb	sy
 8010428:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801042c:	e7f0      	b.n	8010410 <prvIdleTask+0x8>
 801042e:	bf00      	nop
 8010430:	24004508 	.word	0x24004508
 8010434:	e000ed04 	.word	0xe000ed04

08010438 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b082      	sub	sp, #8
 801043c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801043e:	2300      	movs	r3, #0
 8010440:	607b      	str	r3, [r7, #4]
 8010442:	e00c      	b.n	801045e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010444:	687a      	ldr	r2, [r7, #4]
 8010446:	4613      	mov	r3, r2
 8010448:	009b      	lsls	r3, r3, #2
 801044a:	4413      	add	r3, r2
 801044c:	009b      	lsls	r3, r3, #2
 801044e:	4a12      	ldr	r2, [pc, #72]	; (8010498 <prvInitialiseTaskLists+0x60>)
 8010450:	4413      	add	r3, r2
 8010452:	4618      	mov	r0, r3
 8010454:	f7fe f90e 	bl	800e674 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	3301      	adds	r3, #1
 801045c:	607b      	str	r3, [r7, #4]
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	2b37      	cmp	r3, #55	; 0x37
 8010462:	d9ef      	bls.n	8010444 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010464:	480d      	ldr	r0, [pc, #52]	; (801049c <prvInitialiseTaskLists+0x64>)
 8010466:	f7fe f905 	bl	800e674 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801046a:	480d      	ldr	r0, [pc, #52]	; (80104a0 <prvInitialiseTaskLists+0x68>)
 801046c:	f7fe f902 	bl	800e674 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010470:	480c      	ldr	r0, [pc, #48]	; (80104a4 <prvInitialiseTaskLists+0x6c>)
 8010472:	f7fe f8ff 	bl	800e674 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010476:	480c      	ldr	r0, [pc, #48]	; (80104a8 <prvInitialiseTaskLists+0x70>)
 8010478:	f7fe f8fc 	bl	800e674 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801047c:	480b      	ldr	r0, [pc, #44]	; (80104ac <prvInitialiseTaskLists+0x74>)
 801047e:	f7fe f8f9 	bl	800e674 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010482:	4b0b      	ldr	r3, [pc, #44]	; (80104b0 <prvInitialiseTaskLists+0x78>)
 8010484:	4a05      	ldr	r2, [pc, #20]	; (801049c <prvInitialiseTaskLists+0x64>)
 8010486:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010488:	4b0a      	ldr	r3, [pc, #40]	; (80104b4 <prvInitialiseTaskLists+0x7c>)
 801048a:	4a05      	ldr	r2, [pc, #20]	; (80104a0 <prvInitialiseTaskLists+0x68>)
 801048c:	601a      	str	r2, [r3, #0]
}
 801048e:	bf00      	nop
 8010490:	3708      	adds	r7, #8
 8010492:	46bd      	mov	sp, r7
 8010494:	bd80      	pop	{r7, pc}
 8010496:	bf00      	nop
 8010498:	24004508 	.word	0x24004508
 801049c:	24004968 	.word	0x24004968
 80104a0:	2400497c 	.word	0x2400497c
 80104a4:	24004998 	.word	0x24004998
 80104a8:	240049ac 	.word	0x240049ac
 80104ac:	240049c4 	.word	0x240049c4
 80104b0:	24004990 	.word	0x24004990
 80104b4:	24004994 	.word	0x24004994

080104b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b082      	sub	sp, #8
 80104bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80104be:	e019      	b.n	80104f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80104c0:	f7fe fab8 	bl	800ea34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80104c4:	4b10      	ldr	r3, [pc, #64]	; (8010508 <prvCheckTasksWaitingTermination+0x50>)
 80104c6:	68db      	ldr	r3, [r3, #12]
 80104c8:	68db      	ldr	r3, [r3, #12]
 80104ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	3304      	adds	r3, #4
 80104d0:	4618      	mov	r0, r3
 80104d2:	f7fe f959 	bl	800e788 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80104d6:	4b0d      	ldr	r3, [pc, #52]	; (801050c <prvCheckTasksWaitingTermination+0x54>)
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	3b01      	subs	r3, #1
 80104dc:	4a0b      	ldr	r2, [pc, #44]	; (801050c <prvCheckTasksWaitingTermination+0x54>)
 80104de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80104e0:	4b0b      	ldr	r3, [pc, #44]	; (8010510 <prvCheckTasksWaitingTermination+0x58>)
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	3b01      	subs	r3, #1
 80104e6:	4a0a      	ldr	r2, [pc, #40]	; (8010510 <prvCheckTasksWaitingTermination+0x58>)
 80104e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80104ea:	f7fe fad3 	bl	800ea94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	f000 f810 	bl	8010514 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80104f4:	4b06      	ldr	r3, [pc, #24]	; (8010510 <prvCheckTasksWaitingTermination+0x58>)
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d1e1      	bne.n	80104c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80104fc:	bf00      	nop
 80104fe:	bf00      	nop
 8010500:	3708      	adds	r7, #8
 8010502:	46bd      	mov	sp, r7
 8010504:	bd80      	pop	{r7, pc}
 8010506:	bf00      	nop
 8010508:	240049ac 	.word	0x240049ac
 801050c:	240049d8 	.word	0x240049d8
 8010510:	240049c0 	.word	0x240049c0

08010514 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010514:	b580      	push	{r7, lr}
 8010516:	b084      	sub	sp, #16
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010522:	2b00      	cmp	r3, #0
 8010524:	d108      	bne.n	8010538 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801052a:	4618      	mov	r0, r3
 801052c:	f7fd ff84 	bl	800e438 <vPortFree>
				vPortFree( pxTCB );
 8010530:	6878      	ldr	r0, [r7, #4]
 8010532:	f7fd ff81 	bl	800e438 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010536:	e018      	b.n	801056a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801053e:	2b01      	cmp	r3, #1
 8010540:	d103      	bne.n	801054a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010542:	6878      	ldr	r0, [r7, #4]
 8010544:	f7fd ff78 	bl	800e438 <vPortFree>
	}
 8010548:	e00f      	b.n	801056a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010550:	2b02      	cmp	r3, #2
 8010552:	d00a      	beq.n	801056a <prvDeleteTCB+0x56>
	__asm volatile
 8010554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010558:	f383 8811 	msr	BASEPRI, r3
 801055c:	f3bf 8f6f 	isb	sy
 8010560:	f3bf 8f4f 	dsb	sy
 8010564:	60fb      	str	r3, [r7, #12]
}
 8010566:	bf00      	nop
 8010568:	e7fe      	b.n	8010568 <prvDeleteTCB+0x54>
	}
 801056a:	bf00      	nop
 801056c:	3710      	adds	r7, #16
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}
	...

08010574 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010574:	b480      	push	{r7}
 8010576:	b083      	sub	sp, #12
 8010578:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801057a:	4b0c      	ldr	r3, [pc, #48]	; (80105ac <prvResetNextTaskUnblockTime+0x38>)
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d104      	bne.n	801058e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010584:	4b0a      	ldr	r3, [pc, #40]	; (80105b0 <prvResetNextTaskUnblockTime+0x3c>)
 8010586:	f04f 32ff 	mov.w	r2, #4294967295
 801058a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801058c:	e008      	b.n	80105a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801058e:	4b07      	ldr	r3, [pc, #28]	; (80105ac <prvResetNextTaskUnblockTime+0x38>)
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	68db      	ldr	r3, [r3, #12]
 8010594:	68db      	ldr	r3, [r3, #12]
 8010596:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	685b      	ldr	r3, [r3, #4]
 801059c:	4a04      	ldr	r2, [pc, #16]	; (80105b0 <prvResetNextTaskUnblockTime+0x3c>)
 801059e:	6013      	str	r3, [r2, #0]
}
 80105a0:	bf00      	nop
 80105a2:	370c      	adds	r7, #12
 80105a4:	46bd      	mov	sp, r7
 80105a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105aa:	4770      	bx	lr
 80105ac:	24004990 	.word	0x24004990
 80105b0:	240049f8 	.word	0x240049f8

080105b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80105b4:	b480      	push	{r7}
 80105b6:	b083      	sub	sp, #12
 80105b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80105ba:	4b0b      	ldr	r3, [pc, #44]	; (80105e8 <xTaskGetSchedulerState+0x34>)
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d102      	bne.n	80105c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80105c2:	2301      	movs	r3, #1
 80105c4:	607b      	str	r3, [r7, #4]
 80105c6:	e008      	b.n	80105da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80105c8:	4b08      	ldr	r3, [pc, #32]	; (80105ec <xTaskGetSchedulerState+0x38>)
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d102      	bne.n	80105d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80105d0:	2302      	movs	r3, #2
 80105d2:	607b      	str	r3, [r7, #4]
 80105d4:	e001      	b.n	80105da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80105d6:	2300      	movs	r3, #0
 80105d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80105da:	687b      	ldr	r3, [r7, #4]
	}
 80105dc:	4618      	mov	r0, r3
 80105de:	370c      	adds	r7, #12
 80105e0:	46bd      	mov	sp, r7
 80105e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e6:	4770      	bx	lr
 80105e8:	240049e4 	.word	0x240049e4
 80105ec:	24004a00 	.word	0x24004a00

080105f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b086      	sub	sp, #24
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80105fc:	2300      	movs	r3, #0
 80105fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d056      	beq.n	80106b4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010606:	4b2e      	ldr	r3, [pc, #184]	; (80106c0 <xTaskPriorityDisinherit+0xd0>)
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	693a      	ldr	r2, [r7, #16]
 801060c:	429a      	cmp	r2, r3
 801060e:	d00a      	beq.n	8010626 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010614:	f383 8811 	msr	BASEPRI, r3
 8010618:	f3bf 8f6f 	isb	sy
 801061c:	f3bf 8f4f 	dsb	sy
 8010620:	60fb      	str	r3, [r7, #12]
}
 8010622:	bf00      	nop
 8010624:	e7fe      	b.n	8010624 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010626:	693b      	ldr	r3, [r7, #16]
 8010628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801062a:	2b00      	cmp	r3, #0
 801062c:	d10a      	bne.n	8010644 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801062e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010632:	f383 8811 	msr	BASEPRI, r3
 8010636:	f3bf 8f6f 	isb	sy
 801063a:	f3bf 8f4f 	dsb	sy
 801063e:	60bb      	str	r3, [r7, #8]
}
 8010640:	bf00      	nop
 8010642:	e7fe      	b.n	8010642 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010644:	693b      	ldr	r3, [r7, #16]
 8010646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010648:	1e5a      	subs	r2, r3, #1
 801064a:	693b      	ldr	r3, [r7, #16]
 801064c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801064e:	693b      	ldr	r3, [r7, #16]
 8010650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010652:	693b      	ldr	r3, [r7, #16]
 8010654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010656:	429a      	cmp	r2, r3
 8010658:	d02c      	beq.n	80106b4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801065a:	693b      	ldr	r3, [r7, #16]
 801065c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801065e:	2b00      	cmp	r3, #0
 8010660:	d128      	bne.n	80106b4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010662:	693b      	ldr	r3, [r7, #16]
 8010664:	3304      	adds	r3, #4
 8010666:	4618      	mov	r0, r3
 8010668:	f7fe f88e 	bl	800e788 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801066c:	693b      	ldr	r3, [r7, #16]
 801066e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010670:	693b      	ldr	r3, [r7, #16]
 8010672:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010674:	693b      	ldr	r3, [r7, #16]
 8010676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010678:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801067c:	693b      	ldr	r3, [r7, #16]
 801067e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010680:	693b      	ldr	r3, [r7, #16]
 8010682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010684:	4b0f      	ldr	r3, [pc, #60]	; (80106c4 <xTaskPriorityDisinherit+0xd4>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	429a      	cmp	r2, r3
 801068a:	d903      	bls.n	8010694 <xTaskPriorityDisinherit+0xa4>
 801068c:	693b      	ldr	r3, [r7, #16]
 801068e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010690:	4a0c      	ldr	r2, [pc, #48]	; (80106c4 <xTaskPriorityDisinherit+0xd4>)
 8010692:	6013      	str	r3, [r2, #0]
 8010694:	693b      	ldr	r3, [r7, #16]
 8010696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010698:	4613      	mov	r3, r2
 801069a:	009b      	lsls	r3, r3, #2
 801069c:	4413      	add	r3, r2
 801069e:	009b      	lsls	r3, r3, #2
 80106a0:	4a09      	ldr	r2, [pc, #36]	; (80106c8 <xTaskPriorityDisinherit+0xd8>)
 80106a2:	441a      	add	r2, r3
 80106a4:	693b      	ldr	r3, [r7, #16]
 80106a6:	3304      	adds	r3, #4
 80106a8:	4619      	mov	r1, r3
 80106aa:	4610      	mov	r0, r2
 80106ac:	f7fe f80f 	bl	800e6ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80106b0:	2301      	movs	r3, #1
 80106b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80106b4:	697b      	ldr	r3, [r7, #20]
	}
 80106b6:	4618      	mov	r0, r3
 80106b8:	3718      	adds	r7, #24
 80106ba:	46bd      	mov	sp, r7
 80106bc:	bd80      	pop	{r7, pc}
 80106be:	bf00      	nop
 80106c0:	24004504 	.word	0x24004504
 80106c4:	240049e0 	.word	0x240049e0
 80106c8:	24004508 	.word	0x24004508

080106cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b084      	sub	sp, #16
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
 80106d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80106d6:	4b21      	ldr	r3, [pc, #132]	; (801075c <prvAddCurrentTaskToDelayedList+0x90>)
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80106dc:	4b20      	ldr	r3, [pc, #128]	; (8010760 <prvAddCurrentTaskToDelayedList+0x94>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	3304      	adds	r3, #4
 80106e2:	4618      	mov	r0, r3
 80106e4:	f7fe f850 	bl	800e788 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106ee:	d10a      	bne.n	8010706 <prvAddCurrentTaskToDelayedList+0x3a>
 80106f0:	683b      	ldr	r3, [r7, #0]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d007      	beq.n	8010706 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80106f6:	4b1a      	ldr	r3, [pc, #104]	; (8010760 <prvAddCurrentTaskToDelayedList+0x94>)
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	3304      	adds	r3, #4
 80106fc:	4619      	mov	r1, r3
 80106fe:	4819      	ldr	r0, [pc, #100]	; (8010764 <prvAddCurrentTaskToDelayedList+0x98>)
 8010700:	f7fd ffe5 	bl	800e6ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010704:	e026      	b.n	8010754 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010706:	68fa      	ldr	r2, [r7, #12]
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	4413      	add	r3, r2
 801070c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801070e:	4b14      	ldr	r3, [pc, #80]	; (8010760 <prvAddCurrentTaskToDelayedList+0x94>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	68ba      	ldr	r2, [r7, #8]
 8010714:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010716:	68ba      	ldr	r2, [r7, #8]
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	429a      	cmp	r2, r3
 801071c:	d209      	bcs.n	8010732 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801071e:	4b12      	ldr	r3, [pc, #72]	; (8010768 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010720:	681a      	ldr	r2, [r3, #0]
 8010722:	4b0f      	ldr	r3, [pc, #60]	; (8010760 <prvAddCurrentTaskToDelayedList+0x94>)
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	3304      	adds	r3, #4
 8010728:	4619      	mov	r1, r3
 801072a:	4610      	mov	r0, r2
 801072c:	f7fd fff3 	bl	800e716 <vListInsert>
}
 8010730:	e010      	b.n	8010754 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010732:	4b0e      	ldr	r3, [pc, #56]	; (801076c <prvAddCurrentTaskToDelayedList+0xa0>)
 8010734:	681a      	ldr	r2, [r3, #0]
 8010736:	4b0a      	ldr	r3, [pc, #40]	; (8010760 <prvAddCurrentTaskToDelayedList+0x94>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	3304      	adds	r3, #4
 801073c:	4619      	mov	r1, r3
 801073e:	4610      	mov	r0, r2
 8010740:	f7fd ffe9 	bl	800e716 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010744:	4b0a      	ldr	r3, [pc, #40]	; (8010770 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	68ba      	ldr	r2, [r7, #8]
 801074a:	429a      	cmp	r2, r3
 801074c:	d202      	bcs.n	8010754 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801074e:	4a08      	ldr	r2, [pc, #32]	; (8010770 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010750:	68bb      	ldr	r3, [r7, #8]
 8010752:	6013      	str	r3, [r2, #0]
}
 8010754:	bf00      	nop
 8010756:	3710      	adds	r7, #16
 8010758:	46bd      	mov	sp, r7
 801075a:	bd80      	pop	{r7, pc}
 801075c:	240049dc 	.word	0x240049dc
 8010760:	24004504 	.word	0x24004504
 8010764:	240049c4 	.word	0x240049c4
 8010768:	24004994 	.word	0x24004994
 801076c:	24004990 	.word	0x24004990
 8010770:	240049f8 	.word	0x240049f8

08010774 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b08a      	sub	sp, #40	; 0x28
 8010778:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801077a:	2300      	movs	r3, #0
 801077c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801077e:	f000 fb07 	bl	8010d90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010782:	4b1c      	ldr	r3, [pc, #112]	; (80107f4 <xTimerCreateTimerTask+0x80>)
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d021      	beq.n	80107ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801078a:	2300      	movs	r3, #0
 801078c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801078e:	2300      	movs	r3, #0
 8010790:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010792:	1d3a      	adds	r2, r7, #4
 8010794:	f107 0108 	add.w	r1, r7, #8
 8010798:	f107 030c 	add.w	r3, r7, #12
 801079c:	4618      	mov	r0, r3
 801079e:	f7fd fd65 	bl	800e26c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80107a2:	6879      	ldr	r1, [r7, #4]
 80107a4:	68bb      	ldr	r3, [r7, #8]
 80107a6:	68fa      	ldr	r2, [r7, #12]
 80107a8:	9202      	str	r2, [sp, #8]
 80107aa:	9301      	str	r3, [sp, #4]
 80107ac:	2302      	movs	r3, #2
 80107ae:	9300      	str	r3, [sp, #0]
 80107b0:	2300      	movs	r3, #0
 80107b2:	460a      	mov	r2, r1
 80107b4:	4910      	ldr	r1, [pc, #64]	; (80107f8 <xTimerCreateTimerTask+0x84>)
 80107b6:	4811      	ldr	r0, [pc, #68]	; (80107fc <xTimerCreateTimerTask+0x88>)
 80107b8:	f7ff f8de 	bl	800f978 <xTaskCreateStatic>
 80107bc:	4603      	mov	r3, r0
 80107be:	4a10      	ldr	r2, [pc, #64]	; (8010800 <xTimerCreateTimerTask+0x8c>)
 80107c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80107c2:	4b0f      	ldr	r3, [pc, #60]	; (8010800 <xTimerCreateTimerTask+0x8c>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d001      	beq.n	80107ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80107ca:	2301      	movs	r3, #1
 80107cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80107ce:	697b      	ldr	r3, [r7, #20]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d10a      	bne.n	80107ea <xTimerCreateTimerTask+0x76>
	__asm volatile
 80107d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107d8:	f383 8811 	msr	BASEPRI, r3
 80107dc:	f3bf 8f6f 	isb	sy
 80107e0:	f3bf 8f4f 	dsb	sy
 80107e4:	613b      	str	r3, [r7, #16]
}
 80107e6:	bf00      	nop
 80107e8:	e7fe      	b.n	80107e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80107ea:	697b      	ldr	r3, [r7, #20]
}
 80107ec:	4618      	mov	r0, r3
 80107ee:	3718      	adds	r7, #24
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bd80      	pop	{r7, pc}
 80107f4:	24004a34 	.word	0x24004a34
 80107f8:	08013c00 	.word	0x08013c00
 80107fc:	08010939 	.word	0x08010939
 8010800:	24004a38 	.word	0x24004a38

08010804 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b08a      	sub	sp, #40	; 0x28
 8010808:	af00      	add	r7, sp, #0
 801080a:	60f8      	str	r0, [r7, #12]
 801080c:	60b9      	str	r1, [r7, #8]
 801080e:	607a      	str	r2, [r7, #4]
 8010810:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010812:	2300      	movs	r3, #0
 8010814:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d10a      	bne.n	8010832 <xTimerGenericCommand+0x2e>
	__asm volatile
 801081c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010820:	f383 8811 	msr	BASEPRI, r3
 8010824:	f3bf 8f6f 	isb	sy
 8010828:	f3bf 8f4f 	dsb	sy
 801082c:	623b      	str	r3, [r7, #32]
}
 801082e:	bf00      	nop
 8010830:	e7fe      	b.n	8010830 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010832:	4b1a      	ldr	r3, [pc, #104]	; (801089c <xTimerGenericCommand+0x98>)
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d02a      	beq.n	8010890 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801083a:	68bb      	ldr	r3, [r7, #8]
 801083c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010846:	68bb      	ldr	r3, [r7, #8]
 8010848:	2b05      	cmp	r3, #5
 801084a:	dc18      	bgt.n	801087e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801084c:	f7ff feb2 	bl	80105b4 <xTaskGetSchedulerState>
 8010850:	4603      	mov	r3, r0
 8010852:	2b02      	cmp	r3, #2
 8010854:	d109      	bne.n	801086a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010856:	4b11      	ldr	r3, [pc, #68]	; (801089c <xTimerGenericCommand+0x98>)
 8010858:	6818      	ldr	r0, [r3, #0]
 801085a:	f107 0110 	add.w	r1, r7, #16
 801085e:	2300      	movs	r3, #0
 8010860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010862:	f7fe fbb1 	bl	800efc8 <xQueueGenericSend>
 8010866:	6278      	str	r0, [r7, #36]	; 0x24
 8010868:	e012      	b.n	8010890 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801086a:	4b0c      	ldr	r3, [pc, #48]	; (801089c <xTimerGenericCommand+0x98>)
 801086c:	6818      	ldr	r0, [r3, #0]
 801086e:	f107 0110 	add.w	r1, r7, #16
 8010872:	2300      	movs	r3, #0
 8010874:	2200      	movs	r2, #0
 8010876:	f7fe fba7 	bl	800efc8 <xQueueGenericSend>
 801087a:	6278      	str	r0, [r7, #36]	; 0x24
 801087c:	e008      	b.n	8010890 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801087e:	4b07      	ldr	r3, [pc, #28]	; (801089c <xTimerGenericCommand+0x98>)
 8010880:	6818      	ldr	r0, [r3, #0]
 8010882:	f107 0110 	add.w	r1, r7, #16
 8010886:	2300      	movs	r3, #0
 8010888:	683a      	ldr	r2, [r7, #0]
 801088a:	f7fe fc9b 	bl	800f1c4 <xQueueGenericSendFromISR>
 801088e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010892:	4618      	mov	r0, r3
 8010894:	3728      	adds	r7, #40	; 0x28
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}
 801089a:	bf00      	nop
 801089c:	24004a34 	.word	0x24004a34

080108a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b088      	sub	sp, #32
 80108a4:	af02      	add	r7, sp, #8
 80108a6:	6078      	str	r0, [r7, #4]
 80108a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80108aa:	4b22      	ldr	r3, [pc, #136]	; (8010934 <prvProcessExpiredTimer+0x94>)
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	68db      	ldr	r3, [r3, #12]
 80108b0:	68db      	ldr	r3, [r3, #12]
 80108b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80108b4:	697b      	ldr	r3, [r7, #20]
 80108b6:	3304      	adds	r3, #4
 80108b8:	4618      	mov	r0, r3
 80108ba:	f7fd ff65 	bl	800e788 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80108be:	697b      	ldr	r3, [r7, #20]
 80108c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80108c4:	f003 0304 	and.w	r3, r3, #4
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d022      	beq.n	8010912 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80108cc:	697b      	ldr	r3, [r7, #20]
 80108ce:	699a      	ldr	r2, [r3, #24]
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	18d1      	adds	r1, r2, r3
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	683a      	ldr	r2, [r7, #0]
 80108d8:	6978      	ldr	r0, [r7, #20]
 80108da:	f000 f8d1 	bl	8010a80 <prvInsertTimerInActiveList>
 80108de:	4603      	mov	r3, r0
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d01f      	beq.n	8010924 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80108e4:	2300      	movs	r3, #0
 80108e6:	9300      	str	r3, [sp, #0]
 80108e8:	2300      	movs	r3, #0
 80108ea:	687a      	ldr	r2, [r7, #4]
 80108ec:	2100      	movs	r1, #0
 80108ee:	6978      	ldr	r0, [r7, #20]
 80108f0:	f7ff ff88 	bl	8010804 <xTimerGenericCommand>
 80108f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80108f6:	693b      	ldr	r3, [r7, #16]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d113      	bne.n	8010924 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80108fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010900:	f383 8811 	msr	BASEPRI, r3
 8010904:	f3bf 8f6f 	isb	sy
 8010908:	f3bf 8f4f 	dsb	sy
 801090c:	60fb      	str	r3, [r7, #12]
}
 801090e:	bf00      	nop
 8010910:	e7fe      	b.n	8010910 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010912:	697b      	ldr	r3, [r7, #20]
 8010914:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010918:	f023 0301 	bic.w	r3, r3, #1
 801091c:	b2da      	uxtb	r2, r3
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010924:	697b      	ldr	r3, [r7, #20]
 8010926:	6a1b      	ldr	r3, [r3, #32]
 8010928:	6978      	ldr	r0, [r7, #20]
 801092a:	4798      	blx	r3
}
 801092c:	bf00      	nop
 801092e:	3718      	adds	r7, #24
 8010930:	46bd      	mov	sp, r7
 8010932:	bd80      	pop	{r7, pc}
 8010934:	24004a2c 	.word	0x24004a2c

08010938 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b084      	sub	sp, #16
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010940:	f107 0308 	add.w	r3, r7, #8
 8010944:	4618      	mov	r0, r3
 8010946:	f000 f857 	bl	80109f8 <prvGetNextExpireTime>
 801094a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801094c:	68bb      	ldr	r3, [r7, #8]
 801094e:	4619      	mov	r1, r3
 8010950:	68f8      	ldr	r0, [r7, #12]
 8010952:	f000 f803 	bl	801095c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010956:	f000 f8d5 	bl	8010b04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801095a:	e7f1      	b.n	8010940 <prvTimerTask+0x8>

0801095c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b084      	sub	sp, #16
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
 8010964:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010966:	f7ff fa43 	bl	800fdf0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801096a:	f107 0308 	add.w	r3, r7, #8
 801096e:	4618      	mov	r0, r3
 8010970:	f000 f866 	bl	8010a40 <prvSampleTimeNow>
 8010974:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010976:	68bb      	ldr	r3, [r7, #8]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d130      	bne.n	80109de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801097c:	683b      	ldr	r3, [r7, #0]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d10a      	bne.n	8010998 <prvProcessTimerOrBlockTask+0x3c>
 8010982:	687a      	ldr	r2, [r7, #4]
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	429a      	cmp	r2, r3
 8010988:	d806      	bhi.n	8010998 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801098a:	f7ff fa3f 	bl	800fe0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801098e:	68f9      	ldr	r1, [r7, #12]
 8010990:	6878      	ldr	r0, [r7, #4]
 8010992:	f7ff ff85 	bl	80108a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010996:	e024      	b.n	80109e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010998:	683b      	ldr	r3, [r7, #0]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d008      	beq.n	80109b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801099e:	4b13      	ldr	r3, [pc, #76]	; (80109ec <prvProcessTimerOrBlockTask+0x90>)
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d101      	bne.n	80109ac <prvProcessTimerOrBlockTask+0x50>
 80109a8:	2301      	movs	r3, #1
 80109aa:	e000      	b.n	80109ae <prvProcessTimerOrBlockTask+0x52>
 80109ac:	2300      	movs	r3, #0
 80109ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80109b0:	4b0f      	ldr	r3, [pc, #60]	; (80109f0 <prvProcessTimerOrBlockTask+0x94>)
 80109b2:	6818      	ldr	r0, [r3, #0]
 80109b4:	687a      	ldr	r2, [r7, #4]
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	1ad3      	subs	r3, r2, r3
 80109ba:	683a      	ldr	r2, [r7, #0]
 80109bc:	4619      	mov	r1, r3
 80109be:	f7fe ffa7 	bl	800f910 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80109c2:	f7ff fa23 	bl	800fe0c <xTaskResumeAll>
 80109c6:	4603      	mov	r3, r0
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d10a      	bne.n	80109e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80109cc:	4b09      	ldr	r3, [pc, #36]	; (80109f4 <prvProcessTimerOrBlockTask+0x98>)
 80109ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109d2:	601a      	str	r2, [r3, #0]
 80109d4:	f3bf 8f4f 	dsb	sy
 80109d8:	f3bf 8f6f 	isb	sy
}
 80109dc:	e001      	b.n	80109e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80109de:	f7ff fa15 	bl	800fe0c <xTaskResumeAll>
}
 80109e2:	bf00      	nop
 80109e4:	3710      	adds	r7, #16
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bd80      	pop	{r7, pc}
 80109ea:	bf00      	nop
 80109ec:	24004a30 	.word	0x24004a30
 80109f0:	24004a34 	.word	0x24004a34
 80109f4:	e000ed04 	.word	0xe000ed04

080109f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80109f8:	b480      	push	{r7}
 80109fa:	b085      	sub	sp, #20
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010a00:	4b0e      	ldr	r3, [pc, #56]	; (8010a3c <prvGetNextExpireTime+0x44>)
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d101      	bne.n	8010a0e <prvGetNextExpireTime+0x16>
 8010a0a:	2201      	movs	r2, #1
 8010a0c:	e000      	b.n	8010a10 <prvGetNextExpireTime+0x18>
 8010a0e:	2200      	movs	r2, #0
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d105      	bne.n	8010a28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010a1c:	4b07      	ldr	r3, [pc, #28]	; (8010a3c <prvGetNextExpireTime+0x44>)
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	68db      	ldr	r3, [r3, #12]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	60fb      	str	r3, [r7, #12]
 8010a26:	e001      	b.n	8010a2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010a28:	2300      	movs	r3, #0
 8010a2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010a2c:	68fb      	ldr	r3, [r7, #12]
}
 8010a2e:	4618      	mov	r0, r3
 8010a30:	3714      	adds	r7, #20
 8010a32:	46bd      	mov	sp, r7
 8010a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a38:	4770      	bx	lr
 8010a3a:	bf00      	nop
 8010a3c:	24004a2c 	.word	0x24004a2c

08010a40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b084      	sub	sp, #16
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010a48:	f7ff fa7e 	bl	800ff48 <xTaskGetTickCount>
 8010a4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010a4e:	4b0b      	ldr	r3, [pc, #44]	; (8010a7c <prvSampleTimeNow+0x3c>)
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	68fa      	ldr	r2, [r7, #12]
 8010a54:	429a      	cmp	r2, r3
 8010a56:	d205      	bcs.n	8010a64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010a58:	f000 f936 	bl	8010cc8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	2201      	movs	r2, #1
 8010a60:	601a      	str	r2, [r3, #0]
 8010a62:	e002      	b.n	8010a6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	2200      	movs	r2, #0
 8010a68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010a6a:	4a04      	ldr	r2, [pc, #16]	; (8010a7c <prvSampleTimeNow+0x3c>)
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010a70:	68fb      	ldr	r3, [r7, #12]
}
 8010a72:	4618      	mov	r0, r3
 8010a74:	3710      	adds	r7, #16
 8010a76:	46bd      	mov	sp, r7
 8010a78:	bd80      	pop	{r7, pc}
 8010a7a:	bf00      	nop
 8010a7c:	24004a3c 	.word	0x24004a3c

08010a80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b086      	sub	sp, #24
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	60f8      	str	r0, [r7, #12]
 8010a88:	60b9      	str	r1, [r7, #8]
 8010a8a:	607a      	str	r2, [r7, #4]
 8010a8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010a8e:	2300      	movs	r3, #0
 8010a90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	68ba      	ldr	r2, [r7, #8]
 8010a96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	68fa      	ldr	r2, [r7, #12]
 8010a9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010a9e:	68ba      	ldr	r2, [r7, #8]
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	429a      	cmp	r2, r3
 8010aa4:	d812      	bhi.n	8010acc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010aa6:	687a      	ldr	r2, [r7, #4]
 8010aa8:	683b      	ldr	r3, [r7, #0]
 8010aaa:	1ad2      	subs	r2, r2, r3
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	699b      	ldr	r3, [r3, #24]
 8010ab0:	429a      	cmp	r2, r3
 8010ab2:	d302      	bcc.n	8010aba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010ab4:	2301      	movs	r3, #1
 8010ab6:	617b      	str	r3, [r7, #20]
 8010ab8:	e01b      	b.n	8010af2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010aba:	4b10      	ldr	r3, [pc, #64]	; (8010afc <prvInsertTimerInActiveList+0x7c>)
 8010abc:	681a      	ldr	r2, [r3, #0]
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	3304      	adds	r3, #4
 8010ac2:	4619      	mov	r1, r3
 8010ac4:	4610      	mov	r0, r2
 8010ac6:	f7fd fe26 	bl	800e716 <vListInsert>
 8010aca:	e012      	b.n	8010af2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010acc:	687a      	ldr	r2, [r7, #4]
 8010ace:	683b      	ldr	r3, [r7, #0]
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	d206      	bcs.n	8010ae2 <prvInsertTimerInActiveList+0x62>
 8010ad4:	68ba      	ldr	r2, [r7, #8]
 8010ad6:	683b      	ldr	r3, [r7, #0]
 8010ad8:	429a      	cmp	r2, r3
 8010ada:	d302      	bcc.n	8010ae2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010adc:	2301      	movs	r3, #1
 8010ade:	617b      	str	r3, [r7, #20]
 8010ae0:	e007      	b.n	8010af2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010ae2:	4b07      	ldr	r3, [pc, #28]	; (8010b00 <prvInsertTimerInActiveList+0x80>)
 8010ae4:	681a      	ldr	r2, [r3, #0]
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	3304      	adds	r3, #4
 8010aea:	4619      	mov	r1, r3
 8010aec:	4610      	mov	r0, r2
 8010aee:	f7fd fe12 	bl	800e716 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010af2:	697b      	ldr	r3, [r7, #20]
}
 8010af4:	4618      	mov	r0, r3
 8010af6:	3718      	adds	r7, #24
 8010af8:	46bd      	mov	sp, r7
 8010afa:	bd80      	pop	{r7, pc}
 8010afc:	24004a30 	.word	0x24004a30
 8010b00:	24004a2c 	.word	0x24004a2c

08010b04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b08e      	sub	sp, #56	; 0x38
 8010b08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010b0a:	e0ca      	b.n	8010ca2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	da18      	bge.n	8010b44 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010b12:	1d3b      	adds	r3, r7, #4
 8010b14:	3304      	adds	r3, #4
 8010b16:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d10a      	bne.n	8010b34 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b22:	f383 8811 	msr	BASEPRI, r3
 8010b26:	f3bf 8f6f 	isb	sy
 8010b2a:	f3bf 8f4f 	dsb	sy
 8010b2e:	61fb      	str	r3, [r7, #28]
}
 8010b30:	bf00      	nop
 8010b32:	e7fe      	b.n	8010b32 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b3a:	6850      	ldr	r0, [r2, #4]
 8010b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b3e:	6892      	ldr	r2, [r2, #8]
 8010b40:	4611      	mov	r1, r2
 8010b42:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	f2c0 80aa 	blt.w	8010ca0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b52:	695b      	ldr	r3, [r3, #20]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d004      	beq.n	8010b62 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b5a:	3304      	adds	r3, #4
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	f7fd fe13 	bl	800e788 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010b62:	463b      	mov	r3, r7
 8010b64:	4618      	mov	r0, r3
 8010b66:	f7ff ff6b 	bl	8010a40 <prvSampleTimeNow>
 8010b6a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	2b09      	cmp	r3, #9
 8010b70:	f200 8097 	bhi.w	8010ca2 <prvProcessReceivedCommands+0x19e>
 8010b74:	a201      	add	r2, pc, #4	; (adr r2, 8010b7c <prvProcessReceivedCommands+0x78>)
 8010b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b7a:	bf00      	nop
 8010b7c:	08010ba5 	.word	0x08010ba5
 8010b80:	08010ba5 	.word	0x08010ba5
 8010b84:	08010ba5 	.word	0x08010ba5
 8010b88:	08010c19 	.word	0x08010c19
 8010b8c:	08010c2d 	.word	0x08010c2d
 8010b90:	08010c77 	.word	0x08010c77
 8010b94:	08010ba5 	.word	0x08010ba5
 8010b98:	08010ba5 	.word	0x08010ba5
 8010b9c:	08010c19 	.word	0x08010c19
 8010ba0:	08010c2d 	.word	0x08010c2d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ba6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010baa:	f043 0301 	orr.w	r3, r3, #1
 8010bae:	b2da      	uxtb	r2, r3
 8010bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010bb6:	68ba      	ldr	r2, [r7, #8]
 8010bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bba:	699b      	ldr	r3, [r3, #24]
 8010bbc:	18d1      	adds	r1, r2, r3
 8010bbe:	68bb      	ldr	r3, [r7, #8]
 8010bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010bc4:	f7ff ff5c 	bl	8010a80 <prvInsertTimerInActiveList>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d069      	beq.n	8010ca2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bd0:	6a1b      	ldr	r3, [r3, #32]
 8010bd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010bd4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010bdc:	f003 0304 	and.w	r3, r3, #4
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d05e      	beq.n	8010ca2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010be4:	68ba      	ldr	r2, [r7, #8]
 8010be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010be8:	699b      	ldr	r3, [r3, #24]
 8010bea:	441a      	add	r2, r3
 8010bec:	2300      	movs	r3, #0
 8010bee:	9300      	str	r3, [sp, #0]
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	2100      	movs	r1, #0
 8010bf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010bf6:	f7ff fe05 	bl	8010804 <xTimerGenericCommand>
 8010bfa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010bfc:	6a3b      	ldr	r3, [r7, #32]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d14f      	bne.n	8010ca2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c06:	f383 8811 	msr	BASEPRI, r3
 8010c0a:	f3bf 8f6f 	isb	sy
 8010c0e:	f3bf 8f4f 	dsb	sy
 8010c12:	61bb      	str	r3, [r7, #24]
}
 8010c14:	bf00      	nop
 8010c16:	e7fe      	b.n	8010c16 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c1e:	f023 0301 	bic.w	r3, r3, #1
 8010c22:	b2da      	uxtb	r2, r3
 8010c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010c2a:	e03a      	b.n	8010ca2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c32:	f043 0301 	orr.w	r3, r3, #1
 8010c36:	b2da      	uxtb	r2, r3
 8010c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010c3e:	68ba      	ldr	r2, [r7, #8]
 8010c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c42:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c46:	699b      	ldr	r3, [r3, #24]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d10a      	bne.n	8010c62 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c50:	f383 8811 	msr	BASEPRI, r3
 8010c54:	f3bf 8f6f 	isb	sy
 8010c58:	f3bf 8f4f 	dsb	sy
 8010c5c:	617b      	str	r3, [r7, #20]
}
 8010c5e:	bf00      	nop
 8010c60:	e7fe      	b.n	8010c60 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c64:	699a      	ldr	r2, [r3, #24]
 8010c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c68:	18d1      	adds	r1, r2, r3
 8010c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c70:	f7ff ff06 	bl	8010a80 <prvInsertTimerInActiveList>
					break;
 8010c74:	e015      	b.n	8010ca2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c7c:	f003 0302 	and.w	r3, r3, #2
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d103      	bne.n	8010c8c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010c84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c86:	f7fd fbd7 	bl	800e438 <vPortFree>
 8010c8a:	e00a      	b.n	8010ca2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c92:	f023 0301 	bic.w	r3, r3, #1
 8010c96:	b2da      	uxtb	r2, r3
 8010c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010c9e:	e000      	b.n	8010ca2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010ca0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010ca2:	4b08      	ldr	r3, [pc, #32]	; (8010cc4 <prvProcessReceivedCommands+0x1c0>)
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	1d39      	adds	r1, r7, #4
 8010ca8:	2200      	movs	r2, #0
 8010caa:	4618      	mov	r0, r3
 8010cac:	f7fe fb26 	bl	800f2fc <xQueueReceive>
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	f47f af2a 	bne.w	8010b0c <prvProcessReceivedCommands+0x8>
	}
}
 8010cb8:	bf00      	nop
 8010cba:	bf00      	nop
 8010cbc:	3730      	adds	r7, #48	; 0x30
 8010cbe:	46bd      	mov	sp, r7
 8010cc0:	bd80      	pop	{r7, pc}
 8010cc2:	bf00      	nop
 8010cc4:	24004a34 	.word	0x24004a34

08010cc8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b088      	sub	sp, #32
 8010ccc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010cce:	e048      	b.n	8010d62 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010cd0:	4b2d      	ldr	r3, [pc, #180]	; (8010d88 <prvSwitchTimerLists+0xc0>)
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	68db      	ldr	r3, [r3, #12]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010cda:	4b2b      	ldr	r3, [pc, #172]	; (8010d88 <prvSwitchTimerLists+0xc0>)
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	68db      	ldr	r3, [r3, #12]
 8010ce0:	68db      	ldr	r3, [r3, #12]
 8010ce2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	3304      	adds	r3, #4
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f7fd fd4d 	bl	800e788 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	6a1b      	ldr	r3, [r3, #32]
 8010cf2:	68f8      	ldr	r0, [r7, #12]
 8010cf4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010cfc:	f003 0304 	and.w	r3, r3, #4
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d02e      	beq.n	8010d62 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	699b      	ldr	r3, [r3, #24]
 8010d08:	693a      	ldr	r2, [r7, #16]
 8010d0a:	4413      	add	r3, r2
 8010d0c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010d0e:	68ba      	ldr	r2, [r7, #8]
 8010d10:	693b      	ldr	r3, [r7, #16]
 8010d12:	429a      	cmp	r2, r3
 8010d14:	d90e      	bls.n	8010d34 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	68ba      	ldr	r2, [r7, #8]
 8010d1a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	68fa      	ldr	r2, [r7, #12]
 8010d20:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010d22:	4b19      	ldr	r3, [pc, #100]	; (8010d88 <prvSwitchTimerLists+0xc0>)
 8010d24:	681a      	ldr	r2, [r3, #0]
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	3304      	adds	r3, #4
 8010d2a:	4619      	mov	r1, r3
 8010d2c:	4610      	mov	r0, r2
 8010d2e:	f7fd fcf2 	bl	800e716 <vListInsert>
 8010d32:	e016      	b.n	8010d62 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010d34:	2300      	movs	r3, #0
 8010d36:	9300      	str	r3, [sp, #0]
 8010d38:	2300      	movs	r3, #0
 8010d3a:	693a      	ldr	r2, [r7, #16]
 8010d3c:	2100      	movs	r1, #0
 8010d3e:	68f8      	ldr	r0, [r7, #12]
 8010d40:	f7ff fd60 	bl	8010804 <xTimerGenericCommand>
 8010d44:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d10a      	bne.n	8010d62 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d50:	f383 8811 	msr	BASEPRI, r3
 8010d54:	f3bf 8f6f 	isb	sy
 8010d58:	f3bf 8f4f 	dsb	sy
 8010d5c:	603b      	str	r3, [r7, #0]
}
 8010d5e:	bf00      	nop
 8010d60:	e7fe      	b.n	8010d60 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010d62:	4b09      	ldr	r3, [pc, #36]	; (8010d88 <prvSwitchTimerLists+0xc0>)
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d1b1      	bne.n	8010cd0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010d6c:	4b06      	ldr	r3, [pc, #24]	; (8010d88 <prvSwitchTimerLists+0xc0>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010d72:	4b06      	ldr	r3, [pc, #24]	; (8010d8c <prvSwitchTimerLists+0xc4>)
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	4a04      	ldr	r2, [pc, #16]	; (8010d88 <prvSwitchTimerLists+0xc0>)
 8010d78:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010d7a:	4a04      	ldr	r2, [pc, #16]	; (8010d8c <prvSwitchTimerLists+0xc4>)
 8010d7c:	697b      	ldr	r3, [r7, #20]
 8010d7e:	6013      	str	r3, [r2, #0]
}
 8010d80:	bf00      	nop
 8010d82:	3718      	adds	r7, #24
 8010d84:	46bd      	mov	sp, r7
 8010d86:	bd80      	pop	{r7, pc}
 8010d88:	24004a2c 	.word	0x24004a2c
 8010d8c:	24004a30 	.word	0x24004a30

08010d90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b082      	sub	sp, #8
 8010d94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010d96:	f7fd fe4d 	bl	800ea34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010d9a:	4b15      	ldr	r3, [pc, #84]	; (8010df0 <prvCheckForValidListAndQueue+0x60>)
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d120      	bne.n	8010de4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010da2:	4814      	ldr	r0, [pc, #80]	; (8010df4 <prvCheckForValidListAndQueue+0x64>)
 8010da4:	f7fd fc66 	bl	800e674 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010da8:	4813      	ldr	r0, [pc, #76]	; (8010df8 <prvCheckForValidListAndQueue+0x68>)
 8010daa:	f7fd fc63 	bl	800e674 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010dae:	4b13      	ldr	r3, [pc, #76]	; (8010dfc <prvCheckForValidListAndQueue+0x6c>)
 8010db0:	4a10      	ldr	r2, [pc, #64]	; (8010df4 <prvCheckForValidListAndQueue+0x64>)
 8010db2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010db4:	4b12      	ldr	r3, [pc, #72]	; (8010e00 <prvCheckForValidListAndQueue+0x70>)
 8010db6:	4a10      	ldr	r2, [pc, #64]	; (8010df8 <prvCheckForValidListAndQueue+0x68>)
 8010db8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010dba:	2300      	movs	r3, #0
 8010dbc:	9300      	str	r3, [sp, #0]
 8010dbe:	4b11      	ldr	r3, [pc, #68]	; (8010e04 <prvCheckForValidListAndQueue+0x74>)
 8010dc0:	4a11      	ldr	r2, [pc, #68]	; (8010e08 <prvCheckForValidListAndQueue+0x78>)
 8010dc2:	2110      	movs	r1, #16
 8010dc4:	200a      	movs	r0, #10
 8010dc6:	f7fd ffbf 	bl	800ed48 <xQueueGenericCreateStatic>
 8010dca:	4603      	mov	r3, r0
 8010dcc:	4a08      	ldr	r2, [pc, #32]	; (8010df0 <prvCheckForValidListAndQueue+0x60>)
 8010dce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010dd0:	4b07      	ldr	r3, [pc, #28]	; (8010df0 <prvCheckForValidListAndQueue+0x60>)
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d005      	beq.n	8010de4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010dd8:	4b05      	ldr	r3, [pc, #20]	; (8010df0 <prvCheckForValidListAndQueue+0x60>)
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	490b      	ldr	r1, [pc, #44]	; (8010e0c <prvCheckForValidListAndQueue+0x7c>)
 8010dde:	4618      	mov	r0, r3
 8010de0:	f7fe fd42 	bl	800f868 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010de4:	f7fd fe56 	bl	800ea94 <vPortExitCritical>
}
 8010de8:	bf00      	nop
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}
 8010dee:	bf00      	nop
 8010df0:	24004a34 	.word	0x24004a34
 8010df4:	24004a04 	.word	0x24004a04
 8010df8:	24004a18 	.word	0x24004a18
 8010dfc:	24004a2c 	.word	0x24004a2c
 8010e00:	24004a30 	.word	0x24004a30
 8010e04:	24004ae0 	.word	0x24004ae0
 8010e08:	24004a40 	.word	0x24004a40
 8010e0c:	08013c08 	.word	0x08013c08

08010e10 <__errno>:
 8010e10:	4b01      	ldr	r3, [pc, #4]	; (8010e18 <__errno+0x8>)
 8010e12:	6818      	ldr	r0, [r3, #0]
 8010e14:	4770      	bx	lr
 8010e16:	bf00      	nop
 8010e18:	24000024 	.word	0x24000024

08010e1c <__libc_init_array>:
 8010e1c:	b570      	push	{r4, r5, r6, lr}
 8010e1e:	4d0d      	ldr	r5, [pc, #52]	; (8010e54 <__libc_init_array+0x38>)
 8010e20:	4c0d      	ldr	r4, [pc, #52]	; (8010e58 <__libc_init_array+0x3c>)
 8010e22:	1b64      	subs	r4, r4, r5
 8010e24:	10a4      	asrs	r4, r4, #2
 8010e26:	2600      	movs	r6, #0
 8010e28:	42a6      	cmp	r6, r4
 8010e2a:	d109      	bne.n	8010e40 <__libc_init_array+0x24>
 8010e2c:	4d0b      	ldr	r5, [pc, #44]	; (8010e5c <__libc_init_array+0x40>)
 8010e2e:	4c0c      	ldr	r4, [pc, #48]	; (8010e60 <__libc_init_array+0x44>)
 8010e30:	f002 fe24 	bl	8013a7c <_init>
 8010e34:	1b64      	subs	r4, r4, r5
 8010e36:	10a4      	asrs	r4, r4, #2
 8010e38:	2600      	movs	r6, #0
 8010e3a:	42a6      	cmp	r6, r4
 8010e3c:	d105      	bne.n	8010e4a <__libc_init_array+0x2e>
 8010e3e:	bd70      	pop	{r4, r5, r6, pc}
 8010e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8010e44:	4798      	blx	r3
 8010e46:	3601      	adds	r6, #1
 8010e48:	e7ee      	b.n	8010e28 <__libc_init_array+0xc>
 8010e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010e4e:	4798      	blx	r3
 8010e50:	3601      	adds	r6, #1
 8010e52:	e7f2      	b.n	8010e3a <__libc_init_array+0x1e>
 8010e54:	080141b4 	.word	0x080141b4
 8010e58:	080141b4 	.word	0x080141b4
 8010e5c:	080141b4 	.word	0x080141b4
 8010e60:	080141b8 	.word	0x080141b8

08010e64 <memcpy>:
 8010e64:	440a      	add	r2, r1
 8010e66:	4291      	cmp	r1, r2
 8010e68:	f100 33ff 	add.w	r3, r0, #4294967295
 8010e6c:	d100      	bne.n	8010e70 <memcpy+0xc>
 8010e6e:	4770      	bx	lr
 8010e70:	b510      	push	{r4, lr}
 8010e72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010e7a:	4291      	cmp	r1, r2
 8010e7c:	d1f9      	bne.n	8010e72 <memcpy+0xe>
 8010e7e:	bd10      	pop	{r4, pc}

08010e80 <memset>:
 8010e80:	4402      	add	r2, r0
 8010e82:	4603      	mov	r3, r0
 8010e84:	4293      	cmp	r3, r2
 8010e86:	d100      	bne.n	8010e8a <memset+0xa>
 8010e88:	4770      	bx	lr
 8010e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8010e8e:	e7f9      	b.n	8010e84 <memset+0x4>

08010e90 <__cvt>:
 8010e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e92:	ed2d 8b02 	vpush	{d8}
 8010e96:	eeb0 8b40 	vmov.f64	d8, d0
 8010e9a:	b085      	sub	sp, #20
 8010e9c:	4617      	mov	r7, r2
 8010e9e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010ea0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010ea2:	ee18 2a90 	vmov	r2, s17
 8010ea6:	f025 0520 	bic.w	r5, r5, #32
 8010eaa:	2a00      	cmp	r2, #0
 8010eac:	bfb6      	itet	lt
 8010eae:	222d      	movlt	r2, #45	; 0x2d
 8010eb0:	2200      	movge	r2, #0
 8010eb2:	eeb1 8b40 	vneglt.f64	d8, d0
 8010eb6:	2d46      	cmp	r5, #70	; 0x46
 8010eb8:	460c      	mov	r4, r1
 8010eba:	701a      	strb	r2, [r3, #0]
 8010ebc:	d004      	beq.n	8010ec8 <__cvt+0x38>
 8010ebe:	2d45      	cmp	r5, #69	; 0x45
 8010ec0:	d100      	bne.n	8010ec4 <__cvt+0x34>
 8010ec2:	3401      	adds	r4, #1
 8010ec4:	2102      	movs	r1, #2
 8010ec6:	e000      	b.n	8010eca <__cvt+0x3a>
 8010ec8:	2103      	movs	r1, #3
 8010eca:	ab03      	add	r3, sp, #12
 8010ecc:	9301      	str	r3, [sp, #4]
 8010ece:	ab02      	add	r3, sp, #8
 8010ed0:	9300      	str	r3, [sp, #0]
 8010ed2:	4622      	mov	r2, r4
 8010ed4:	4633      	mov	r3, r6
 8010ed6:	eeb0 0b48 	vmov.f64	d0, d8
 8010eda:	f000 fcc9 	bl	8011870 <_dtoa_r>
 8010ede:	2d47      	cmp	r5, #71	; 0x47
 8010ee0:	d109      	bne.n	8010ef6 <__cvt+0x66>
 8010ee2:	07fb      	lsls	r3, r7, #31
 8010ee4:	d407      	bmi.n	8010ef6 <__cvt+0x66>
 8010ee6:	9b03      	ldr	r3, [sp, #12]
 8010ee8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010eea:	1a1b      	subs	r3, r3, r0
 8010eec:	6013      	str	r3, [r2, #0]
 8010eee:	b005      	add	sp, #20
 8010ef0:	ecbd 8b02 	vpop	{d8}
 8010ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ef6:	2d46      	cmp	r5, #70	; 0x46
 8010ef8:	eb00 0204 	add.w	r2, r0, r4
 8010efc:	d10c      	bne.n	8010f18 <__cvt+0x88>
 8010efe:	7803      	ldrb	r3, [r0, #0]
 8010f00:	2b30      	cmp	r3, #48	; 0x30
 8010f02:	d107      	bne.n	8010f14 <__cvt+0x84>
 8010f04:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f0c:	bf1c      	itt	ne
 8010f0e:	f1c4 0401 	rsbne	r4, r4, #1
 8010f12:	6034      	strne	r4, [r6, #0]
 8010f14:	6833      	ldr	r3, [r6, #0]
 8010f16:	441a      	add	r2, r3
 8010f18:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f20:	bf08      	it	eq
 8010f22:	9203      	streq	r2, [sp, #12]
 8010f24:	2130      	movs	r1, #48	; 0x30
 8010f26:	9b03      	ldr	r3, [sp, #12]
 8010f28:	4293      	cmp	r3, r2
 8010f2a:	d2dc      	bcs.n	8010ee6 <__cvt+0x56>
 8010f2c:	1c5c      	adds	r4, r3, #1
 8010f2e:	9403      	str	r4, [sp, #12]
 8010f30:	7019      	strb	r1, [r3, #0]
 8010f32:	e7f8      	b.n	8010f26 <__cvt+0x96>

08010f34 <__exponent>:
 8010f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f36:	4603      	mov	r3, r0
 8010f38:	2900      	cmp	r1, #0
 8010f3a:	bfb8      	it	lt
 8010f3c:	4249      	neglt	r1, r1
 8010f3e:	f803 2b02 	strb.w	r2, [r3], #2
 8010f42:	bfb4      	ite	lt
 8010f44:	222d      	movlt	r2, #45	; 0x2d
 8010f46:	222b      	movge	r2, #43	; 0x2b
 8010f48:	2909      	cmp	r1, #9
 8010f4a:	7042      	strb	r2, [r0, #1]
 8010f4c:	dd2a      	ble.n	8010fa4 <__exponent+0x70>
 8010f4e:	f10d 0407 	add.w	r4, sp, #7
 8010f52:	46a4      	mov	ip, r4
 8010f54:	270a      	movs	r7, #10
 8010f56:	46a6      	mov	lr, r4
 8010f58:	460a      	mov	r2, r1
 8010f5a:	fb91 f6f7 	sdiv	r6, r1, r7
 8010f5e:	fb07 1516 	mls	r5, r7, r6, r1
 8010f62:	3530      	adds	r5, #48	; 0x30
 8010f64:	2a63      	cmp	r2, #99	; 0x63
 8010f66:	f104 34ff 	add.w	r4, r4, #4294967295
 8010f6a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010f6e:	4631      	mov	r1, r6
 8010f70:	dcf1      	bgt.n	8010f56 <__exponent+0x22>
 8010f72:	3130      	adds	r1, #48	; 0x30
 8010f74:	f1ae 0502 	sub.w	r5, lr, #2
 8010f78:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010f7c:	1c44      	adds	r4, r0, #1
 8010f7e:	4629      	mov	r1, r5
 8010f80:	4561      	cmp	r1, ip
 8010f82:	d30a      	bcc.n	8010f9a <__exponent+0x66>
 8010f84:	f10d 0209 	add.w	r2, sp, #9
 8010f88:	eba2 020e 	sub.w	r2, r2, lr
 8010f8c:	4565      	cmp	r5, ip
 8010f8e:	bf88      	it	hi
 8010f90:	2200      	movhi	r2, #0
 8010f92:	4413      	add	r3, r2
 8010f94:	1a18      	subs	r0, r3, r0
 8010f96:	b003      	add	sp, #12
 8010f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010f9e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010fa2:	e7ed      	b.n	8010f80 <__exponent+0x4c>
 8010fa4:	2330      	movs	r3, #48	; 0x30
 8010fa6:	3130      	adds	r1, #48	; 0x30
 8010fa8:	7083      	strb	r3, [r0, #2]
 8010faa:	70c1      	strb	r1, [r0, #3]
 8010fac:	1d03      	adds	r3, r0, #4
 8010fae:	e7f1      	b.n	8010f94 <__exponent+0x60>

08010fb0 <_printf_float>:
 8010fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fb4:	b08b      	sub	sp, #44	; 0x2c
 8010fb6:	460c      	mov	r4, r1
 8010fb8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8010fbc:	4616      	mov	r6, r2
 8010fbe:	461f      	mov	r7, r3
 8010fc0:	4605      	mov	r5, r0
 8010fc2:	f001 f9d7 	bl	8012374 <_localeconv_r>
 8010fc6:	f8d0 b000 	ldr.w	fp, [r0]
 8010fca:	4658      	mov	r0, fp
 8010fcc:	f7ef f988 	bl	80002e0 <strlen>
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	9308      	str	r3, [sp, #32]
 8010fd4:	f8d8 3000 	ldr.w	r3, [r8]
 8010fd8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010fdc:	6822      	ldr	r2, [r4, #0]
 8010fde:	3307      	adds	r3, #7
 8010fe0:	f023 0307 	bic.w	r3, r3, #7
 8010fe4:	f103 0108 	add.w	r1, r3, #8
 8010fe8:	f8c8 1000 	str.w	r1, [r8]
 8010fec:	4682      	mov	sl, r0
 8010fee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010ff2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8010ff6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8011258 <_printf_float+0x2a8>
 8010ffa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8010ffe:	eeb0 6bc0 	vabs.f64	d6, d0
 8011002:	eeb4 6b47 	vcmp.f64	d6, d7
 8011006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801100a:	dd24      	ble.n	8011056 <_printf_float+0xa6>
 801100c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011014:	d502      	bpl.n	801101c <_printf_float+0x6c>
 8011016:	232d      	movs	r3, #45	; 0x2d
 8011018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801101c:	4b90      	ldr	r3, [pc, #576]	; (8011260 <_printf_float+0x2b0>)
 801101e:	4891      	ldr	r0, [pc, #580]	; (8011264 <_printf_float+0x2b4>)
 8011020:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011024:	bf94      	ite	ls
 8011026:	4698      	movls	r8, r3
 8011028:	4680      	movhi	r8, r0
 801102a:	2303      	movs	r3, #3
 801102c:	6123      	str	r3, [r4, #16]
 801102e:	f022 0204 	bic.w	r2, r2, #4
 8011032:	2300      	movs	r3, #0
 8011034:	6022      	str	r2, [r4, #0]
 8011036:	9304      	str	r3, [sp, #16]
 8011038:	9700      	str	r7, [sp, #0]
 801103a:	4633      	mov	r3, r6
 801103c:	aa09      	add	r2, sp, #36	; 0x24
 801103e:	4621      	mov	r1, r4
 8011040:	4628      	mov	r0, r5
 8011042:	f000 f9d3 	bl	80113ec <_printf_common>
 8011046:	3001      	adds	r0, #1
 8011048:	f040 808a 	bne.w	8011160 <_printf_float+0x1b0>
 801104c:	f04f 30ff 	mov.w	r0, #4294967295
 8011050:	b00b      	add	sp, #44	; 0x2c
 8011052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011056:	eeb4 0b40 	vcmp.f64	d0, d0
 801105a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801105e:	d709      	bvc.n	8011074 <_printf_float+0xc4>
 8011060:	ee10 3a90 	vmov	r3, s1
 8011064:	2b00      	cmp	r3, #0
 8011066:	bfbc      	itt	lt
 8011068:	232d      	movlt	r3, #45	; 0x2d
 801106a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801106e:	487e      	ldr	r0, [pc, #504]	; (8011268 <_printf_float+0x2b8>)
 8011070:	4b7e      	ldr	r3, [pc, #504]	; (801126c <_printf_float+0x2bc>)
 8011072:	e7d5      	b.n	8011020 <_printf_float+0x70>
 8011074:	6863      	ldr	r3, [r4, #4]
 8011076:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801107a:	9104      	str	r1, [sp, #16]
 801107c:	1c59      	adds	r1, r3, #1
 801107e:	d13c      	bne.n	80110fa <_printf_float+0x14a>
 8011080:	2306      	movs	r3, #6
 8011082:	6063      	str	r3, [r4, #4]
 8011084:	2300      	movs	r3, #0
 8011086:	9303      	str	r3, [sp, #12]
 8011088:	ab08      	add	r3, sp, #32
 801108a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801108e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011092:	ab07      	add	r3, sp, #28
 8011094:	6861      	ldr	r1, [r4, #4]
 8011096:	9300      	str	r3, [sp, #0]
 8011098:	6022      	str	r2, [r4, #0]
 801109a:	f10d 031b 	add.w	r3, sp, #27
 801109e:	4628      	mov	r0, r5
 80110a0:	f7ff fef6 	bl	8010e90 <__cvt>
 80110a4:	9b04      	ldr	r3, [sp, #16]
 80110a6:	9907      	ldr	r1, [sp, #28]
 80110a8:	2b47      	cmp	r3, #71	; 0x47
 80110aa:	4680      	mov	r8, r0
 80110ac:	d108      	bne.n	80110c0 <_printf_float+0x110>
 80110ae:	1cc8      	adds	r0, r1, #3
 80110b0:	db02      	blt.n	80110b8 <_printf_float+0x108>
 80110b2:	6863      	ldr	r3, [r4, #4]
 80110b4:	4299      	cmp	r1, r3
 80110b6:	dd41      	ble.n	801113c <_printf_float+0x18c>
 80110b8:	f1a9 0902 	sub.w	r9, r9, #2
 80110bc:	fa5f f989 	uxtb.w	r9, r9
 80110c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80110c4:	d820      	bhi.n	8011108 <_printf_float+0x158>
 80110c6:	3901      	subs	r1, #1
 80110c8:	464a      	mov	r2, r9
 80110ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80110ce:	9107      	str	r1, [sp, #28]
 80110d0:	f7ff ff30 	bl	8010f34 <__exponent>
 80110d4:	9a08      	ldr	r2, [sp, #32]
 80110d6:	9004      	str	r0, [sp, #16]
 80110d8:	1813      	adds	r3, r2, r0
 80110da:	2a01      	cmp	r2, #1
 80110dc:	6123      	str	r3, [r4, #16]
 80110de:	dc02      	bgt.n	80110e6 <_printf_float+0x136>
 80110e0:	6822      	ldr	r2, [r4, #0]
 80110e2:	07d2      	lsls	r2, r2, #31
 80110e4:	d501      	bpl.n	80110ea <_printf_float+0x13a>
 80110e6:	3301      	adds	r3, #1
 80110e8:	6123      	str	r3, [r4, #16]
 80110ea:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d0a2      	beq.n	8011038 <_printf_float+0x88>
 80110f2:	232d      	movs	r3, #45	; 0x2d
 80110f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80110f8:	e79e      	b.n	8011038 <_printf_float+0x88>
 80110fa:	9904      	ldr	r1, [sp, #16]
 80110fc:	2947      	cmp	r1, #71	; 0x47
 80110fe:	d1c1      	bne.n	8011084 <_printf_float+0xd4>
 8011100:	2b00      	cmp	r3, #0
 8011102:	d1bf      	bne.n	8011084 <_printf_float+0xd4>
 8011104:	2301      	movs	r3, #1
 8011106:	e7bc      	b.n	8011082 <_printf_float+0xd2>
 8011108:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801110c:	d118      	bne.n	8011140 <_printf_float+0x190>
 801110e:	2900      	cmp	r1, #0
 8011110:	6863      	ldr	r3, [r4, #4]
 8011112:	dd0b      	ble.n	801112c <_printf_float+0x17c>
 8011114:	6121      	str	r1, [r4, #16]
 8011116:	b913      	cbnz	r3, 801111e <_printf_float+0x16e>
 8011118:	6822      	ldr	r2, [r4, #0]
 801111a:	07d0      	lsls	r0, r2, #31
 801111c:	d502      	bpl.n	8011124 <_printf_float+0x174>
 801111e:	3301      	adds	r3, #1
 8011120:	440b      	add	r3, r1
 8011122:	6123      	str	r3, [r4, #16]
 8011124:	2300      	movs	r3, #0
 8011126:	65a1      	str	r1, [r4, #88]	; 0x58
 8011128:	9304      	str	r3, [sp, #16]
 801112a:	e7de      	b.n	80110ea <_printf_float+0x13a>
 801112c:	b913      	cbnz	r3, 8011134 <_printf_float+0x184>
 801112e:	6822      	ldr	r2, [r4, #0]
 8011130:	07d2      	lsls	r2, r2, #31
 8011132:	d501      	bpl.n	8011138 <_printf_float+0x188>
 8011134:	3302      	adds	r3, #2
 8011136:	e7f4      	b.n	8011122 <_printf_float+0x172>
 8011138:	2301      	movs	r3, #1
 801113a:	e7f2      	b.n	8011122 <_printf_float+0x172>
 801113c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011140:	9b08      	ldr	r3, [sp, #32]
 8011142:	4299      	cmp	r1, r3
 8011144:	db05      	blt.n	8011152 <_printf_float+0x1a2>
 8011146:	6823      	ldr	r3, [r4, #0]
 8011148:	6121      	str	r1, [r4, #16]
 801114a:	07d8      	lsls	r0, r3, #31
 801114c:	d5ea      	bpl.n	8011124 <_printf_float+0x174>
 801114e:	1c4b      	adds	r3, r1, #1
 8011150:	e7e7      	b.n	8011122 <_printf_float+0x172>
 8011152:	2900      	cmp	r1, #0
 8011154:	bfd4      	ite	le
 8011156:	f1c1 0202 	rsble	r2, r1, #2
 801115a:	2201      	movgt	r2, #1
 801115c:	4413      	add	r3, r2
 801115e:	e7e0      	b.n	8011122 <_printf_float+0x172>
 8011160:	6823      	ldr	r3, [r4, #0]
 8011162:	055a      	lsls	r2, r3, #21
 8011164:	d407      	bmi.n	8011176 <_printf_float+0x1c6>
 8011166:	6923      	ldr	r3, [r4, #16]
 8011168:	4642      	mov	r2, r8
 801116a:	4631      	mov	r1, r6
 801116c:	4628      	mov	r0, r5
 801116e:	47b8      	blx	r7
 8011170:	3001      	adds	r0, #1
 8011172:	d12a      	bne.n	80111ca <_printf_float+0x21a>
 8011174:	e76a      	b.n	801104c <_printf_float+0x9c>
 8011176:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801117a:	f240 80e2 	bls.w	8011342 <_printf_float+0x392>
 801117e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011182:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801118a:	d133      	bne.n	80111f4 <_printf_float+0x244>
 801118c:	4a38      	ldr	r2, [pc, #224]	; (8011270 <_printf_float+0x2c0>)
 801118e:	2301      	movs	r3, #1
 8011190:	4631      	mov	r1, r6
 8011192:	4628      	mov	r0, r5
 8011194:	47b8      	blx	r7
 8011196:	3001      	adds	r0, #1
 8011198:	f43f af58 	beq.w	801104c <_printf_float+0x9c>
 801119c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80111a0:	429a      	cmp	r2, r3
 80111a2:	db02      	blt.n	80111aa <_printf_float+0x1fa>
 80111a4:	6823      	ldr	r3, [r4, #0]
 80111a6:	07d8      	lsls	r0, r3, #31
 80111a8:	d50f      	bpl.n	80111ca <_printf_float+0x21a>
 80111aa:	4653      	mov	r3, sl
 80111ac:	465a      	mov	r2, fp
 80111ae:	4631      	mov	r1, r6
 80111b0:	4628      	mov	r0, r5
 80111b2:	47b8      	blx	r7
 80111b4:	3001      	adds	r0, #1
 80111b6:	f43f af49 	beq.w	801104c <_printf_float+0x9c>
 80111ba:	f04f 0800 	mov.w	r8, #0
 80111be:	f104 091a 	add.w	r9, r4, #26
 80111c2:	9b08      	ldr	r3, [sp, #32]
 80111c4:	3b01      	subs	r3, #1
 80111c6:	4543      	cmp	r3, r8
 80111c8:	dc09      	bgt.n	80111de <_printf_float+0x22e>
 80111ca:	6823      	ldr	r3, [r4, #0]
 80111cc:	079b      	lsls	r3, r3, #30
 80111ce:	f100 8108 	bmi.w	80113e2 <_printf_float+0x432>
 80111d2:	68e0      	ldr	r0, [r4, #12]
 80111d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111d6:	4298      	cmp	r0, r3
 80111d8:	bfb8      	it	lt
 80111da:	4618      	movlt	r0, r3
 80111dc:	e738      	b.n	8011050 <_printf_float+0xa0>
 80111de:	2301      	movs	r3, #1
 80111e0:	464a      	mov	r2, r9
 80111e2:	4631      	mov	r1, r6
 80111e4:	4628      	mov	r0, r5
 80111e6:	47b8      	blx	r7
 80111e8:	3001      	adds	r0, #1
 80111ea:	f43f af2f 	beq.w	801104c <_printf_float+0x9c>
 80111ee:	f108 0801 	add.w	r8, r8, #1
 80111f2:	e7e6      	b.n	80111c2 <_printf_float+0x212>
 80111f4:	9b07      	ldr	r3, [sp, #28]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	dc3c      	bgt.n	8011274 <_printf_float+0x2c4>
 80111fa:	4a1d      	ldr	r2, [pc, #116]	; (8011270 <_printf_float+0x2c0>)
 80111fc:	2301      	movs	r3, #1
 80111fe:	4631      	mov	r1, r6
 8011200:	4628      	mov	r0, r5
 8011202:	47b8      	blx	r7
 8011204:	3001      	adds	r0, #1
 8011206:	f43f af21 	beq.w	801104c <_printf_float+0x9c>
 801120a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801120e:	4313      	orrs	r3, r2
 8011210:	d102      	bne.n	8011218 <_printf_float+0x268>
 8011212:	6823      	ldr	r3, [r4, #0]
 8011214:	07d9      	lsls	r1, r3, #31
 8011216:	d5d8      	bpl.n	80111ca <_printf_float+0x21a>
 8011218:	4653      	mov	r3, sl
 801121a:	465a      	mov	r2, fp
 801121c:	4631      	mov	r1, r6
 801121e:	4628      	mov	r0, r5
 8011220:	47b8      	blx	r7
 8011222:	3001      	adds	r0, #1
 8011224:	f43f af12 	beq.w	801104c <_printf_float+0x9c>
 8011228:	f04f 0900 	mov.w	r9, #0
 801122c:	f104 0a1a 	add.w	sl, r4, #26
 8011230:	9b07      	ldr	r3, [sp, #28]
 8011232:	425b      	negs	r3, r3
 8011234:	454b      	cmp	r3, r9
 8011236:	dc01      	bgt.n	801123c <_printf_float+0x28c>
 8011238:	9b08      	ldr	r3, [sp, #32]
 801123a:	e795      	b.n	8011168 <_printf_float+0x1b8>
 801123c:	2301      	movs	r3, #1
 801123e:	4652      	mov	r2, sl
 8011240:	4631      	mov	r1, r6
 8011242:	4628      	mov	r0, r5
 8011244:	47b8      	blx	r7
 8011246:	3001      	adds	r0, #1
 8011248:	f43f af00 	beq.w	801104c <_printf_float+0x9c>
 801124c:	f109 0901 	add.w	r9, r9, #1
 8011250:	e7ee      	b.n	8011230 <_printf_float+0x280>
 8011252:	bf00      	nop
 8011254:	f3af 8000 	nop.w
 8011258:	ffffffff 	.word	0xffffffff
 801125c:	7fefffff 	.word	0x7fefffff
 8011260:	08013dd0 	.word	0x08013dd0
 8011264:	08013dd4 	.word	0x08013dd4
 8011268:	08013ddc 	.word	0x08013ddc
 801126c:	08013dd8 	.word	0x08013dd8
 8011270:	08013de0 	.word	0x08013de0
 8011274:	9a08      	ldr	r2, [sp, #32]
 8011276:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011278:	429a      	cmp	r2, r3
 801127a:	bfa8      	it	ge
 801127c:	461a      	movge	r2, r3
 801127e:	2a00      	cmp	r2, #0
 8011280:	4691      	mov	r9, r2
 8011282:	dc38      	bgt.n	80112f6 <_printf_float+0x346>
 8011284:	2300      	movs	r3, #0
 8011286:	9305      	str	r3, [sp, #20]
 8011288:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801128c:	f104 021a 	add.w	r2, r4, #26
 8011290:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011292:	9905      	ldr	r1, [sp, #20]
 8011294:	9304      	str	r3, [sp, #16]
 8011296:	eba3 0309 	sub.w	r3, r3, r9
 801129a:	428b      	cmp	r3, r1
 801129c:	dc33      	bgt.n	8011306 <_printf_float+0x356>
 801129e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80112a2:	429a      	cmp	r2, r3
 80112a4:	db3c      	blt.n	8011320 <_printf_float+0x370>
 80112a6:	6823      	ldr	r3, [r4, #0]
 80112a8:	07da      	lsls	r2, r3, #31
 80112aa:	d439      	bmi.n	8011320 <_printf_float+0x370>
 80112ac:	9a08      	ldr	r2, [sp, #32]
 80112ae:	9b04      	ldr	r3, [sp, #16]
 80112b0:	9907      	ldr	r1, [sp, #28]
 80112b2:	1ad3      	subs	r3, r2, r3
 80112b4:	eba2 0901 	sub.w	r9, r2, r1
 80112b8:	4599      	cmp	r9, r3
 80112ba:	bfa8      	it	ge
 80112bc:	4699      	movge	r9, r3
 80112be:	f1b9 0f00 	cmp.w	r9, #0
 80112c2:	dc35      	bgt.n	8011330 <_printf_float+0x380>
 80112c4:	f04f 0800 	mov.w	r8, #0
 80112c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80112cc:	f104 0a1a 	add.w	sl, r4, #26
 80112d0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80112d4:	1a9b      	subs	r3, r3, r2
 80112d6:	eba3 0309 	sub.w	r3, r3, r9
 80112da:	4543      	cmp	r3, r8
 80112dc:	f77f af75 	ble.w	80111ca <_printf_float+0x21a>
 80112e0:	2301      	movs	r3, #1
 80112e2:	4652      	mov	r2, sl
 80112e4:	4631      	mov	r1, r6
 80112e6:	4628      	mov	r0, r5
 80112e8:	47b8      	blx	r7
 80112ea:	3001      	adds	r0, #1
 80112ec:	f43f aeae 	beq.w	801104c <_printf_float+0x9c>
 80112f0:	f108 0801 	add.w	r8, r8, #1
 80112f4:	e7ec      	b.n	80112d0 <_printf_float+0x320>
 80112f6:	4613      	mov	r3, r2
 80112f8:	4631      	mov	r1, r6
 80112fa:	4642      	mov	r2, r8
 80112fc:	4628      	mov	r0, r5
 80112fe:	47b8      	blx	r7
 8011300:	3001      	adds	r0, #1
 8011302:	d1bf      	bne.n	8011284 <_printf_float+0x2d4>
 8011304:	e6a2      	b.n	801104c <_printf_float+0x9c>
 8011306:	2301      	movs	r3, #1
 8011308:	4631      	mov	r1, r6
 801130a:	4628      	mov	r0, r5
 801130c:	9204      	str	r2, [sp, #16]
 801130e:	47b8      	blx	r7
 8011310:	3001      	adds	r0, #1
 8011312:	f43f ae9b 	beq.w	801104c <_printf_float+0x9c>
 8011316:	9b05      	ldr	r3, [sp, #20]
 8011318:	9a04      	ldr	r2, [sp, #16]
 801131a:	3301      	adds	r3, #1
 801131c:	9305      	str	r3, [sp, #20]
 801131e:	e7b7      	b.n	8011290 <_printf_float+0x2e0>
 8011320:	4653      	mov	r3, sl
 8011322:	465a      	mov	r2, fp
 8011324:	4631      	mov	r1, r6
 8011326:	4628      	mov	r0, r5
 8011328:	47b8      	blx	r7
 801132a:	3001      	adds	r0, #1
 801132c:	d1be      	bne.n	80112ac <_printf_float+0x2fc>
 801132e:	e68d      	b.n	801104c <_printf_float+0x9c>
 8011330:	9a04      	ldr	r2, [sp, #16]
 8011332:	464b      	mov	r3, r9
 8011334:	4442      	add	r2, r8
 8011336:	4631      	mov	r1, r6
 8011338:	4628      	mov	r0, r5
 801133a:	47b8      	blx	r7
 801133c:	3001      	adds	r0, #1
 801133e:	d1c1      	bne.n	80112c4 <_printf_float+0x314>
 8011340:	e684      	b.n	801104c <_printf_float+0x9c>
 8011342:	9a08      	ldr	r2, [sp, #32]
 8011344:	2a01      	cmp	r2, #1
 8011346:	dc01      	bgt.n	801134c <_printf_float+0x39c>
 8011348:	07db      	lsls	r3, r3, #31
 801134a:	d537      	bpl.n	80113bc <_printf_float+0x40c>
 801134c:	2301      	movs	r3, #1
 801134e:	4642      	mov	r2, r8
 8011350:	4631      	mov	r1, r6
 8011352:	4628      	mov	r0, r5
 8011354:	47b8      	blx	r7
 8011356:	3001      	adds	r0, #1
 8011358:	f43f ae78 	beq.w	801104c <_printf_float+0x9c>
 801135c:	4653      	mov	r3, sl
 801135e:	465a      	mov	r2, fp
 8011360:	4631      	mov	r1, r6
 8011362:	4628      	mov	r0, r5
 8011364:	47b8      	blx	r7
 8011366:	3001      	adds	r0, #1
 8011368:	f43f ae70 	beq.w	801104c <_printf_float+0x9c>
 801136c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011370:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011378:	d01b      	beq.n	80113b2 <_printf_float+0x402>
 801137a:	9b08      	ldr	r3, [sp, #32]
 801137c:	f108 0201 	add.w	r2, r8, #1
 8011380:	3b01      	subs	r3, #1
 8011382:	4631      	mov	r1, r6
 8011384:	4628      	mov	r0, r5
 8011386:	47b8      	blx	r7
 8011388:	3001      	adds	r0, #1
 801138a:	d10e      	bne.n	80113aa <_printf_float+0x3fa>
 801138c:	e65e      	b.n	801104c <_printf_float+0x9c>
 801138e:	2301      	movs	r3, #1
 8011390:	464a      	mov	r2, r9
 8011392:	4631      	mov	r1, r6
 8011394:	4628      	mov	r0, r5
 8011396:	47b8      	blx	r7
 8011398:	3001      	adds	r0, #1
 801139a:	f43f ae57 	beq.w	801104c <_printf_float+0x9c>
 801139e:	f108 0801 	add.w	r8, r8, #1
 80113a2:	9b08      	ldr	r3, [sp, #32]
 80113a4:	3b01      	subs	r3, #1
 80113a6:	4543      	cmp	r3, r8
 80113a8:	dcf1      	bgt.n	801138e <_printf_float+0x3de>
 80113aa:	9b04      	ldr	r3, [sp, #16]
 80113ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80113b0:	e6db      	b.n	801116a <_printf_float+0x1ba>
 80113b2:	f04f 0800 	mov.w	r8, #0
 80113b6:	f104 091a 	add.w	r9, r4, #26
 80113ba:	e7f2      	b.n	80113a2 <_printf_float+0x3f2>
 80113bc:	2301      	movs	r3, #1
 80113be:	4642      	mov	r2, r8
 80113c0:	e7df      	b.n	8011382 <_printf_float+0x3d2>
 80113c2:	2301      	movs	r3, #1
 80113c4:	464a      	mov	r2, r9
 80113c6:	4631      	mov	r1, r6
 80113c8:	4628      	mov	r0, r5
 80113ca:	47b8      	blx	r7
 80113cc:	3001      	adds	r0, #1
 80113ce:	f43f ae3d 	beq.w	801104c <_printf_float+0x9c>
 80113d2:	f108 0801 	add.w	r8, r8, #1
 80113d6:	68e3      	ldr	r3, [r4, #12]
 80113d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80113da:	1a5b      	subs	r3, r3, r1
 80113dc:	4543      	cmp	r3, r8
 80113de:	dcf0      	bgt.n	80113c2 <_printf_float+0x412>
 80113e0:	e6f7      	b.n	80111d2 <_printf_float+0x222>
 80113e2:	f04f 0800 	mov.w	r8, #0
 80113e6:	f104 0919 	add.w	r9, r4, #25
 80113ea:	e7f4      	b.n	80113d6 <_printf_float+0x426>

080113ec <_printf_common>:
 80113ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113f0:	4616      	mov	r6, r2
 80113f2:	4699      	mov	r9, r3
 80113f4:	688a      	ldr	r2, [r1, #8]
 80113f6:	690b      	ldr	r3, [r1, #16]
 80113f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80113fc:	4293      	cmp	r3, r2
 80113fe:	bfb8      	it	lt
 8011400:	4613      	movlt	r3, r2
 8011402:	6033      	str	r3, [r6, #0]
 8011404:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011408:	4607      	mov	r7, r0
 801140a:	460c      	mov	r4, r1
 801140c:	b10a      	cbz	r2, 8011412 <_printf_common+0x26>
 801140e:	3301      	adds	r3, #1
 8011410:	6033      	str	r3, [r6, #0]
 8011412:	6823      	ldr	r3, [r4, #0]
 8011414:	0699      	lsls	r1, r3, #26
 8011416:	bf42      	ittt	mi
 8011418:	6833      	ldrmi	r3, [r6, #0]
 801141a:	3302      	addmi	r3, #2
 801141c:	6033      	strmi	r3, [r6, #0]
 801141e:	6825      	ldr	r5, [r4, #0]
 8011420:	f015 0506 	ands.w	r5, r5, #6
 8011424:	d106      	bne.n	8011434 <_printf_common+0x48>
 8011426:	f104 0a19 	add.w	sl, r4, #25
 801142a:	68e3      	ldr	r3, [r4, #12]
 801142c:	6832      	ldr	r2, [r6, #0]
 801142e:	1a9b      	subs	r3, r3, r2
 8011430:	42ab      	cmp	r3, r5
 8011432:	dc26      	bgt.n	8011482 <_printf_common+0x96>
 8011434:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011438:	1e13      	subs	r3, r2, #0
 801143a:	6822      	ldr	r2, [r4, #0]
 801143c:	bf18      	it	ne
 801143e:	2301      	movne	r3, #1
 8011440:	0692      	lsls	r2, r2, #26
 8011442:	d42b      	bmi.n	801149c <_printf_common+0xb0>
 8011444:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011448:	4649      	mov	r1, r9
 801144a:	4638      	mov	r0, r7
 801144c:	47c0      	blx	r8
 801144e:	3001      	adds	r0, #1
 8011450:	d01e      	beq.n	8011490 <_printf_common+0xa4>
 8011452:	6823      	ldr	r3, [r4, #0]
 8011454:	68e5      	ldr	r5, [r4, #12]
 8011456:	6832      	ldr	r2, [r6, #0]
 8011458:	f003 0306 	and.w	r3, r3, #6
 801145c:	2b04      	cmp	r3, #4
 801145e:	bf08      	it	eq
 8011460:	1aad      	subeq	r5, r5, r2
 8011462:	68a3      	ldr	r3, [r4, #8]
 8011464:	6922      	ldr	r2, [r4, #16]
 8011466:	bf0c      	ite	eq
 8011468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801146c:	2500      	movne	r5, #0
 801146e:	4293      	cmp	r3, r2
 8011470:	bfc4      	itt	gt
 8011472:	1a9b      	subgt	r3, r3, r2
 8011474:	18ed      	addgt	r5, r5, r3
 8011476:	2600      	movs	r6, #0
 8011478:	341a      	adds	r4, #26
 801147a:	42b5      	cmp	r5, r6
 801147c:	d11a      	bne.n	80114b4 <_printf_common+0xc8>
 801147e:	2000      	movs	r0, #0
 8011480:	e008      	b.n	8011494 <_printf_common+0xa8>
 8011482:	2301      	movs	r3, #1
 8011484:	4652      	mov	r2, sl
 8011486:	4649      	mov	r1, r9
 8011488:	4638      	mov	r0, r7
 801148a:	47c0      	blx	r8
 801148c:	3001      	adds	r0, #1
 801148e:	d103      	bne.n	8011498 <_printf_common+0xac>
 8011490:	f04f 30ff 	mov.w	r0, #4294967295
 8011494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011498:	3501      	adds	r5, #1
 801149a:	e7c6      	b.n	801142a <_printf_common+0x3e>
 801149c:	18e1      	adds	r1, r4, r3
 801149e:	1c5a      	adds	r2, r3, #1
 80114a0:	2030      	movs	r0, #48	; 0x30
 80114a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80114a6:	4422      	add	r2, r4
 80114a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80114ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80114b0:	3302      	adds	r3, #2
 80114b2:	e7c7      	b.n	8011444 <_printf_common+0x58>
 80114b4:	2301      	movs	r3, #1
 80114b6:	4622      	mov	r2, r4
 80114b8:	4649      	mov	r1, r9
 80114ba:	4638      	mov	r0, r7
 80114bc:	47c0      	blx	r8
 80114be:	3001      	adds	r0, #1
 80114c0:	d0e6      	beq.n	8011490 <_printf_common+0xa4>
 80114c2:	3601      	adds	r6, #1
 80114c4:	e7d9      	b.n	801147a <_printf_common+0x8e>
	...

080114c8 <_printf_i>:
 80114c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80114cc:	460c      	mov	r4, r1
 80114ce:	4691      	mov	r9, r2
 80114d0:	7e27      	ldrb	r7, [r4, #24]
 80114d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80114d4:	2f78      	cmp	r7, #120	; 0x78
 80114d6:	4680      	mov	r8, r0
 80114d8:	469a      	mov	sl, r3
 80114da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80114de:	d807      	bhi.n	80114f0 <_printf_i+0x28>
 80114e0:	2f62      	cmp	r7, #98	; 0x62
 80114e2:	d80a      	bhi.n	80114fa <_printf_i+0x32>
 80114e4:	2f00      	cmp	r7, #0
 80114e6:	f000 80d8 	beq.w	801169a <_printf_i+0x1d2>
 80114ea:	2f58      	cmp	r7, #88	; 0x58
 80114ec:	f000 80a3 	beq.w	8011636 <_printf_i+0x16e>
 80114f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80114f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80114f8:	e03a      	b.n	8011570 <_printf_i+0xa8>
 80114fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80114fe:	2b15      	cmp	r3, #21
 8011500:	d8f6      	bhi.n	80114f0 <_printf_i+0x28>
 8011502:	a001      	add	r0, pc, #4	; (adr r0, 8011508 <_printf_i+0x40>)
 8011504:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011508:	08011561 	.word	0x08011561
 801150c:	08011575 	.word	0x08011575
 8011510:	080114f1 	.word	0x080114f1
 8011514:	080114f1 	.word	0x080114f1
 8011518:	080114f1 	.word	0x080114f1
 801151c:	080114f1 	.word	0x080114f1
 8011520:	08011575 	.word	0x08011575
 8011524:	080114f1 	.word	0x080114f1
 8011528:	080114f1 	.word	0x080114f1
 801152c:	080114f1 	.word	0x080114f1
 8011530:	080114f1 	.word	0x080114f1
 8011534:	08011681 	.word	0x08011681
 8011538:	080115a5 	.word	0x080115a5
 801153c:	08011663 	.word	0x08011663
 8011540:	080114f1 	.word	0x080114f1
 8011544:	080114f1 	.word	0x080114f1
 8011548:	080116a3 	.word	0x080116a3
 801154c:	080114f1 	.word	0x080114f1
 8011550:	080115a5 	.word	0x080115a5
 8011554:	080114f1 	.word	0x080114f1
 8011558:	080114f1 	.word	0x080114f1
 801155c:	0801166b 	.word	0x0801166b
 8011560:	680b      	ldr	r3, [r1, #0]
 8011562:	1d1a      	adds	r2, r3, #4
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	600a      	str	r2, [r1, #0]
 8011568:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801156c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011570:	2301      	movs	r3, #1
 8011572:	e0a3      	b.n	80116bc <_printf_i+0x1f4>
 8011574:	6825      	ldr	r5, [r4, #0]
 8011576:	6808      	ldr	r0, [r1, #0]
 8011578:	062e      	lsls	r6, r5, #24
 801157a:	f100 0304 	add.w	r3, r0, #4
 801157e:	d50a      	bpl.n	8011596 <_printf_i+0xce>
 8011580:	6805      	ldr	r5, [r0, #0]
 8011582:	600b      	str	r3, [r1, #0]
 8011584:	2d00      	cmp	r5, #0
 8011586:	da03      	bge.n	8011590 <_printf_i+0xc8>
 8011588:	232d      	movs	r3, #45	; 0x2d
 801158a:	426d      	negs	r5, r5
 801158c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011590:	485e      	ldr	r0, [pc, #376]	; (801170c <_printf_i+0x244>)
 8011592:	230a      	movs	r3, #10
 8011594:	e019      	b.n	80115ca <_printf_i+0x102>
 8011596:	f015 0f40 	tst.w	r5, #64	; 0x40
 801159a:	6805      	ldr	r5, [r0, #0]
 801159c:	600b      	str	r3, [r1, #0]
 801159e:	bf18      	it	ne
 80115a0:	b22d      	sxthne	r5, r5
 80115a2:	e7ef      	b.n	8011584 <_printf_i+0xbc>
 80115a4:	680b      	ldr	r3, [r1, #0]
 80115a6:	6825      	ldr	r5, [r4, #0]
 80115a8:	1d18      	adds	r0, r3, #4
 80115aa:	6008      	str	r0, [r1, #0]
 80115ac:	0628      	lsls	r0, r5, #24
 80115ae:	d501      	bpl.n	80115b4 <_printf_i+0xec>
 80115b0:	681d      	ldr	r5, [r3, #0]
 80115b2:	e002      	b.n	80115ba <_printf_i+0xf2>
 80115b4:	0669      	lsls	r1, r5, #25
 80115b6:	d5fb      	bpl.n	80115b0 <_printf_i+0xe8>
 80115b8:	881d      	ldrh	r5, [r3, #0]
 80115ba:	4854      	ldr	r0, [pc, #336]	; (801170c <_printf_i+0x244>)
 80115bc:	2f6f      	cmp	r7, #111	; 0x6f
 80115be:	bf0c      	ite	eq
 80115c0:	2308      	moveq	r3, #8
 80115c2:	230a      	movne	r3, #10
 80115c4:	2100      	movs	r1, #0
 80115c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80115ca:	6866      	ldr	r6, [r4, #4]
 80115cc:	60a6      	str	r6, [r4, #8]
 80115ce:	2e00      	cmp	r6, #0
 80115d0:	bfa2      	ittt	ge
 80115d2:	6821      	ldrge	r1, [r4, #0]
 80115d4:	f021 0104 	bicge.w	r1, r1, #4
 80115d8:	6021      	strge	r1, [r4, #0]
 80115da:	b90d      	cbnz	r5, 80115e0 <_printf_i+0x118>
 80115dc:	2e00      	cmp	r6, #0
 80115de:	d04d      	beq.n	801167c <_printf_i+0x1b4>
 80115e0:	4616      	mov	r6, r2
 80115e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80115e6:	fb03 5711 	mls	r7, r3, r1, r5
 80115ea:	5dc7      	ldrb	r7, [r0, r7]
 80115ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80115f0:	462f      	mov	r7, r5
 80115f2:	42bb      	cmp	r3, r7
 80115f4:	460d      	mov	r5, r1
 80115f6:	d9f4      	bls.n	80115e2 <_printf_i+0x11a>
 80115f8:	2b08      	cmp	r3, #8
 80115fa:	d10b      	bne.n	8011614 <_printf_i+0x14c>
 80115fc:	6823      	ldr	r3, [r4, #0]
 80115fe:	07df      	lsls	r7, r3, #31
 8011600:	d508      	bpl.n	8011614 <_printf_i+0x14c>
 8011602:	6923      	ldr	r3, [r4, #16]
 8011604:	6861      	ldr	r1, [r4, #4]
 8011606:	4299      	cmp	r1, r3
 8011608:	bfde      	ittt	le
 801160a:	2330      	movle	r3, #48	; 0x30
 801160c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011610:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011614:	1b92      	subs	r2, r2, r6
 8011616:	6122      	str	r2, [r4, #16]
 8011618:	f8cd a000 	str.w	sl, [sp]
 801161c:	464b      	mov	r3, r9
 801161e:	aa03      	add	r2, sp, #12
 8011620:	4621      	mov	r1, r4
 8011622:	4640      	mov	r0, r8
 8011624:	f7ff fee2 	bl	80113ec <_printf_common>
 8011628:	3001      	adds	r0, #1
 801162a:	d14c      	bne.n	80116c6 <_printf_i+0x1fe>
 801162c:	f04f 30ff 	mov.w	r0, #4294967295
 8011630:	b004      	add	sp, #16
 8011632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011636:	4835      	ldr	r0, [pc, #212]	; (801170c <_printf_i+0x244>)
 8011638:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801163c:	6823      	ldr	r3, [r4, #0]
 801163e:	680e      	ldr	r6, [r1, #0]
 8011640:	061f      	lsls	r7, r3, #24
 8011642:	f856 5b04 	ldr.w	r5, [r6], #4
 8011646:	600e      	str	r6, [r1, #0]
 8011648:	d514      	bpl.n	8011674 <_printf_i+0x1ac>
 801164a:	07d9      	lsls	r1, r3, #31
 801164c:	bf44      	itt	mi
 801164e:	f043 0320 	orrmi.w	r3, r3, #32
 8011652:	6023      	strmi	r3, [r4, #0]
 8011654:	b91d      	cbnz	r5, 801165e <_printf_i+0x196>
 8011656:	6823      	ldr	r3, [r4, #0]
 8011658:	f023 0320 	bic.w	r3, r3, #32
 801165c:	6023      	str	r3, [r4, #0]
 801165e:	2310      	movs	r3, #16
 8011660:	e7b0      	b.n	80115c4 <_printf_i+0xfc>
 8011662:	6823      	ldr	r3, [r4, #0]
 8011664:	f043 0320 	orr.w	r3, r3, #32
 8011668:	6023      	str	r3, [r4, #0]
 801166a:	2378      	movs	r3, #120	; 0x78
 801166c:	4828      	ldr	r0, [pc, #160]	; (8011710 <_printf_i+0x248>)
 801166e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011672:	e7e3      	b.n	801163c <_printf_i+0x174>
 8011674:	065e      	lsls	r6, r3, #25
 8011676:	bf48      	it	mi
 8011678:	b2ad      	uxthmi	r5, r5
 801167a:	e7e6      	b.n	801164a <_printf_i+0x182>
 801167c:	4616      	mov	r6, r2
 801167e:	e7bb      	b.n	80115f8 <_printf_i+0x130>
 8011680:	680b      	ldr	r3, [r1, #0]
 8011682:	6826      	ldr	r6, [r4, #0]
 8011684:	6960      	ldr	r0, [r4, #20]
 8011686:	1d1d      	adds	r5, r3, #4
 8011688:	600d      	str	r5, [r1, #0]
 801168a:	0635      	lsls	r5, r6, #24
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	d501      	bpl.n	8011694 <_printf_i+0x1cc>
 8011690:	6018      	str	r0, [r3, #0]
 8011692:	e002      	b.n	801169a <_printf_i+0x1d2>
 8011694:	0671      	lsls	r1, r6, #25
 8011696:	d5fb      	bpl.n	8011690 <_printf_i+0x1c8>
 8011698:	8018      	strh	r0, [r3, #0]
 801169a:	2300      	movs	r3, #0
 801169c:	6123      	str	r3, [r4, #16]
 801169e:	4616      	mov	r6, r2
 80116a0:	e7ba      	b.n	8011618 <_printf_i+0x150>
 80116a2:	680b      	ldr	r3, [r1, #0]
 80116a4:	1d1a      	adds	r2, r3, #4
 80116a6:	600a      	str	r2, [r1, #0]
 80116a8:	681e      	ldr	r6, [r3, #0]
 80116aa:	6862      	ldr	r2, [r4, #4]
 80116ac:	2100      	movs	r1, #0
 80116ae:	4630      	mov	r0, r6
 80116b0:	f7ee fe1e 	bl	80002f0 <memchr>
 80116b4:	b108      	cbz	r0, 80116ba <_printf_i+0x1f2>
 80116b6:	1b80      	subs	r0, r0, r6
 80116b8:	6060      	str	r0, [r4, #4]
 80116ba:	6863      	ldr	r3, [r4, #4]
 80116bc:	6123      	str	r3, [r4, #16]
 80116be:	2300      	movs	r3, #0
 80116c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80116c4:	e7a8      	b.n	8011618 <_printf_i+0x150>
 80116c6:	6923      	ldr	r3, [r4, #16]
 80116c8:	4632      	mov	r2, r6
 80116ca:	4649      	mov	r1, r9
 80116cc:	4640      	mov	r0, r8
 80116ce:	47d0      	blx	sl
 80116d0:	3001      	adds	r0, #1
 80116d2:	d0ab      	beq.n	801162c <_printf_i+0x164>
 80116d4:	6823      	ldr	r3, [r4, #0]
 80116d6:	079b      	lsls	r3, r3, #30
 80116d8:	d413      	bmi.n	8011702 <_printf_i+0x23a>
 80116da:	68e0      	ldr	r0, [r4, #12]
 80116dc:	9b03      	ldr	r3, [sp, #12]
 80116de:	4298      	cmp	r0, r3
 80116e0:	bfb8      	it	lt
 80116e2:	4618      	movlt	r0, r3
 80116e4:	e7a4      	b.n	8011630 <_printf_i+0x168>
 80116e6:	2301      	movs	r3, #1
 80116e8:	4632      	mov	r2, r6
 80116ea:	4649      	mov	r1, r9
 80116ec:	4640      	mov	r0, r8
 80116ee:	47d0      	blx	sl
 80116f0:	3001      	adds	r0, #1
 80116f2:	d09b      	beq.n	801162c <_printf_i+0x164>
 80116f4:	3501      	adds	r5, #1
 80116f6:	68e3      	ldr	r3, [r4, #12]
 80116f8:	9903      	ldr	r1, [sp, #12]
 80116fa:	1a5b      	subs	r3, r3, r1
 80116fc:	42ab      	cmp	r3, r5
 80116fe:	dcf2      	bgt.n	80116e6 <_printf_i+0x21e>
 8011700:	e7eb      	b.n	80116da <_printf_i+0x212>
 8011702:	2500      	movs	r5, #0
 8011704:	f104 0619 	add.w	r6, r4, #25
 8011708:	e7f5      	b.n	80116f6 <_printf_i+0x22e>
 801170a:	bf00      	nop
 801170c:	08013de2 	.word	0x08013de2
 8011710:	08013df3 	.word	0x08013df3

08011714 <siprintf>:
 8011714:	b40e      	push	{r1, r2, r3}
 8011716:	b500      	push	{lr}
 8011718:	b09c      	sub	sp, #112	; 0x70
 801171a:	ab1d      	add	r3, sp, #116	; 0x74
 801171c:	9002      	str	r0, [sp, #8]
 801171e:	9006      	str	r0, [sp, #24]
 8011720:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011724:	4809      	ldr	r0, [pc, #36]	; (801174c <siprintf+0x38>)
 8011726:	9107      	str	r1, [sp, #28]
 8011728:	9104      	str	r1, [sp, #16]
 801172a:	4909      	ldr	r1, [pc, #36]	; (8011750 <siprintf+0x3c>)
 801172c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011730:	9105      	str	r1, [sp, #20]
 8011732:	6800      	ldr	r0, [r0, #0]
 8011734:	9301      	str	r3, [sp, #4]
 8011736:	a902      	add	r1, sp, #8
 8011738:	f001 fabc 	bl	8012cb4 <_svfiprintf_r>
 801173c:	9b02      	ldr	r3, [sp, #8]
 801173e:	2200      	movs	r2, #0
 8011740:	701a      	strb	r2, [r3, #0]
 8011742:	b01c      	add	sp, #112	; 0x70
 8011744:	f85d eb04 	ldr.w	lr, [sp], #4
 8011748:	b003      	add	sp, #12
 801174a:	4770      	bx	lr
 801174c:	24000024 	.word	0x24000024
 8011750:	ffff0208 	.word	0xffff0208

08011754 <quorem>:
 8011754:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011758:	6903      	ldr	r3, [r0, #16]
 801175a:	690c      	ldr	r4, [r1, #16]
 801175c:	42a3      	cmp	r3, r4
 801175e:	4607      	mov	r7, r0
 8011760:	f2c0 8081 	blt.w	8011866 <quorem+0x112>
 8011764:	3c01      	subs	r4, #1
 8011766:	f101 0814 	add.w	r8, r1, #20
 801176a:	f100 0514 	add.w	r5, r0, #20
 801176e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011772:	9301      	str	r3, [sp, #4]
 8011774:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011778:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801177c:	3301      	adds	r3, #1
 801177e:	429a      	cmp	r2, r3
 8011780:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011784:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011788:	fbb2 f6f3 	udiv	r6, r2, r3
 801178c:	d331      	bcc.n	80117f2 <quorem+0x9e>
 801178e:	f04f 0e00 	mov.w	lr, #0
 8011792:	4640      	mov	r0, r8
 8011794:	46ac      	mov	ip, r5
 8011796:	46f2      	mov	sl, lr
 8011798:	f850 2b04 	ldr.w	r2, [r0], #4
 801179c:	b293      	uxth	r3, r2
 801179e:	fb06 e303 	mla	r3, r6, r3, lr
 80117a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80117a6:	b29b      	uxth	r3, r3
 80117a8:	ebaa 0303 	sub.w	r3, sl, r3
 80117ac:	0c12      	lsrs	r2, r2, #16
 80117ae:	f8dc a000 	ldr.w	sl, [ip]
 80117b2:	fb06 e202 	mla	r2, r6, r2, lr
 80117b6:	fa13 f38a 	uxtah	r3, r3, sl
 80117ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80117be:	fa1f fa82 	uxth.w	sl, r2
 80117c2:	f8dc 2000 	ldr.w	r2, [ip]
 80117c6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80117ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80117ce:	b29b      	uxth	r3, r3
 80117d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80117d4:	4581      	cmp	r9, r0
 80117d6:	f84c 3b04 	str.w	r3, [ip], #4
 80117da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80117de:	d2db      	bcs.n	8011798 <quorem+0x44>
 80117e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80117e4:	b92b      	cbnz	r3, 80117f2 <quorem+0x9e>
 80117e6:	9b01      	ldr	r3, [sp, #4]
 80117e8:	3b04      	subs	r3, #4
 80117ea:	429d      	cmp	r5, r3
 80117ec:	461a      	mov	r2, r3
 80117ee:	d32e      	bcc.n	801184e <quorem+0xfa>
 80117f0:	613c      	str	r4, [r7, #16]
 80117f2:	4638      	mov	r0, r7
 80117f4:	f001 f848 	bl	8012888 <__mcmp>
 80117f8:	2800      	cmp	r0, #0
 80117fa:	db24      	blt.n	8011846 <quorem+0xf2>
 80117fc:	3601      	adds	r6, #1
 80117fe:	4628      	mov	r0, r5
 8011800:	f04f 0c00 	mov.w	ip, #0
 8011804:	f858 2b04 	ldr.w	r2, [r8], #4
 8011808:	f8d0 e000 	ldr.w	lr, [r0]
 801180c:	b293      	uxth	r3, r2
 801180e:	ebac 0303 	sub.w	r3, ip, r3
 8011812:	0c12      	lsrs	r2, r2, #16
 8011814:	fa13 f38e 	uxtah	r3, r3, lr
 8011818:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801181c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011820:	b29b      	uxth	r3, r3
 8011822:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011826:	45c1      	cmp	r9, r8
 8011828:	f840 3b04 	str.w	r3, [r0], #4
 801182c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011830:	d2e8      	bcs.n	8011804 <quorem+0xb0>
 8011832:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011836:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801183a:	b922      	cbnz	r2, 8011846 <quorem+0xf2>
 801183c:	3b04      	subs	r3, #4
 801183e:	429d      	cmp	r5, r3
 8011840:	461a      	mov	r2, r3
 8011842:	d30a      	bcc.n	801185a <quorem+0x106>
 8011844:	613c      	str	r4, [r7, #16]
 8011846:	4630      	mov	r0, r6
 8011848:	b003      	add	sp, #12
 801184a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801184e:	6812      	ldr	r2, [r2, #0]
 8011850:	3b04      	subs	r3, #4
 8011852:	2a00      	cmp	r2, #0
 8011854:	d1cc      	bne.n	80117f0 <quorem+0x9c>
 8011856:	3c01      	subs	r4, #1
 8011858:	e7c7      	b.n	80117ea <quorem+0x96>
 801185a:	6812      	ldr	r2, [r2, #0]
 801185c:	3b04      	subs	r3, #4
 801185e:	2a00      	cmp	r2, #0
 8011860:	d1f0      	bne.n	8011844 <quorem+0xf0>
 8011862:	3c01      	subs	r4, #1
 8011864:	e7eb      	b.n	801183e <quorem+0xea>
 8011866:	2000      	movs	r0, #0
 8011868:	e7ee      	b.n	8011848 <quorem+0xf4>
 801186a:	0000      	movs	r0, r0
 801186c:	0000      	movs	r0, r0
	...

08011870 <_dtoa_r>:
 8011870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011874:	ec59 8b10 	vmov	r8, r9, d0
 8011878:	b095      	sub	sp, #84	; 0x54
 801187a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801187c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801187e:	9107      	str	r1, [sp, #28]
 8011880:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8011884:	4606      	mov	r6, r0
 8011886:	9209      	str	r2, [sp, #36]	; 0x24
 8011888:	9310      	str	r3, [sp, #64]	; 0x40
 801188a:	b975      	cbnz	r5, 80118aa <_dtoa_r+0x3a>
 801188c:	2010      	movs	r0, #16
 801188e:	f000 fd75 	bl	801237c <malloc>
 8011892:	4602      	mov	r2, r0
 8011894:	6270      	str	r0, [r6, #36]	; 0x24
 8011896:	b920      	cbnz	r0, 80118a2 <_dtoa_r+0x32>
 8011898:	4bab      	ldr	r3, [pc, #684]	; (8011b48 <_dtoa_r+0x2d8>)
 801189a:	21ea      	movs	r1, #234	; 0xea
 801189c:	48ab      	ldr	r0, [pc, #684]	; (8011b4c <_dtoa_r+0x2dc>)
 801189e:	f001 fb19 	bl	8012ed4 <__assert_func>
 80118a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80118a6:	6005      	str	r5, [r0, #0]
 80118a8:	60c5      	str	r5, [r0, #12]
 80118aa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80118ac:	6819      	ldr	r1, [r3, #0]
 80118ae:	b151      	cbz	r1, 80118c6 <_dtoa_r+0x56>
 80118b0:	685a      	ldr	r2, [r3, #4]
 80118b2:	604a      	str	r2, [r1, #4]
 80118b4:	2301      	movs	r3, #1
 80118b6:	4093      	lsls	r3, r2
 80118b8:	608b      	str	r3, [r1, #8]
 80118ba:	4630      	mov	r0, r6
 80118bc:	f000 fda6 	bl	801240c <_Bfree>
 80118c0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80118c2:	2200      	movs	r2, #0
 80118c4:	601a      	str	r2, [r3, #0]
 80118c6:	f1b9 0300 	subs.w	r3, r9, #0
 80118ca:	bfbb      	ittet	lt
 80118cc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80118d0:	9303      	strlt	r3, [sp, #12]
 80118d2:	2300      	movge	r3, #0
 80118d4:	2201      	movlt	r2, #1
 80118d6:	bfac      	ite	ge
 80118d8:	6023      	strge	r3, [r4, #0]
 80118da:	6022      	strlt	r2, [r4, #0]
 80118dc:	4b9c      	ldr	r3, [pc, #624]	; (8011b50 <_dtoa_r+0x2e0>)
 80118de:	9c03      	ldr	r4, [sp, #12]
 80118e0:	43a3      	bics	r3, r4
 80118e2:	d11a      	bne.n	801191a <_dtoa_r+0xaa>
 80118e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80118e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80118ea:	6013      	str	r3, [r2, #0]
 80118ec:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80118f0:	ea53 0308 	orrs.w	r3, r3, r8
 80118f4:	f000 8512 	beq.w	801231c <_dtoa_r+0xaac>
 80118f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80118fa:	b953      	cbnz	r3, 8011912 <_dtoa_r+0xa2>
 80118fc:	4b95      	ldr	r3, [pc, #596]	; (8011b54 <_dtoa_r+0x2e4>)
 80118fe:	e01f      	b.n	8011940 <_dtoa_r+0xd0>
 8011900:	4b95      	ldr	r3, [pc, #596]	; (8011b58 <_dtoa_r+0x2e8>)
 8011902:	9300      	str	r3, [sp, #0]
 8011904:	3308      	adds	r3, #8
 8011906:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011908:	6013      	str	r3, [r2, #0]
 801190a:	9800      	ldr	r0, [sp, #0]
 801190c:	b015      	add	sp, #84	; 0x54
 801190e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011912:	4b90      	ldr	r3, [pc, #576]	; (8011b54 <_dtoa_r+0x2e4>)
 8011914:	9300      	str	r3, [sp, #0]
 8011916:	3303      	adds	r3, #3
 8011918:	e7f5      	b.n	8011906 <_dtoa_r+0x96>
 801191a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801191e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011926:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801192a:	d10b      	bne.n	8011944 <_dtoa_r+0xd4>
 801192c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801192e:	2301      	movs	r3, #1
 8011930:	6013      	str	r3, [r2, #0]
 8011932:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011934:	2b00      	cmp	r3, #0
 8011936:	f000 84ee 	beq.w	8012316 <_dtoa_r+0xaa6>
 801193a:	4888      	ldr	r0, [pc, #544]	; (8011b5c <_dtoa_r+0x2ec>)
 801193c:	6018      	str	r0, [r3, #0]
 801193e:	1e43      	subs	r3, r0, #1
 8011940:	9300      	str	r3, [sp, #0]
 8011942:	e7e2      	b.n	801190a <_dtoa_r+0x9a>
 8011944:	a913      	add	r1, sp, #76	; 0x4c
 8011946:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801194a:	aa12      	add	r2, sp, #72	; 0x48
 801194c:	4630      	mov	r0, r6
 801194e:	f001 f83f 	bl	80129d0 <__d2b>
 8011952:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8011956:	4605      	mov	r5, r0
 8011958:	9812      	ldr	r0, [sp, #72]	; 0x48
 801195a:	2900      	cmp	r1, #0
 801195c:	d047      	beq.n	80119ee <_dtoa_r+0x17e>
 801195e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8011960:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011964:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011968:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801196c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011970:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011974:	2400      	movs	r4, #0
 8011976:	ec43 2b16 	vmov	d6, r2, r3
 801197a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801197e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8011b30 <_dtoa_r+0x2c0>
 8011982:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011986:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8011b38 <_dtoa_r+0x2c8>
 801198a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801198e:	eeb0 7b46 	vmov.f64	d7, d6
 8011992:	ee06 1a90 	vmov	s13, r1
 8011996:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801199a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011b40 <_dtoa_r+0x2d0>
 801199e:	eea5 7b06 	vfma.f64	d7, d5, d6
 80119a2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80119a6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80119aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119ae:	ee16 ba90 	vmov	fp, s13
 80119b2:	9411      	str	r4, [sp, #68]	; 0x44
 80119b4:	d508      	bpl.n	80119c8 <_dtoa_r+0x158>
 80119b6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80119ba:	eeb4 6b47 	vcmp.f64	d6, d7
 80119be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119c2:	bf18      	it	ne
 80119c4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80119c8:	f1bb 0f16 	cmp.w	fp, #22
 80119cc:	d832      	bhi.n	8011a34 <_dtoa_r+0x1c4>
 80119ce:	4b64      	ldr	r3, [pc, #400]	; (8011b60 <_dtoa_r+0x2f0>)
 80119d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80119d4:	ed93 7b00 	vldr	d7, [r3]
 80119d8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80119dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80119e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119e4:	d501      	bpl.n	80119ea <_dtoa_r+0x17a>
 80119e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80119ea:	2300      	movs	r3, #0
 80119ec:	e023      	b.n	8011a36 <_dtoa_r+0x1c6>
 80119ee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80119f0:	4401      	add	r1, r0
 80119f2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80119f6:	2b20      	cmp	r3, #32
 80119f8:	bfc3      	ittte	gt
 80119fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80119fe:	fa04 f303 	lslgt.w	r3, r4, r3
 8011a02:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8011a06:	f1c3 0320 	rsble	r3, r3, #32
 8011a0a:	bfc6      	itte	gt
 8011a0c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8011a10:	ea43 0308 	orrgt.w	r3, r3, r8
 8011a14:	fa08 f303 	lslle.w	r3, r8, r3
 8011a18:	ee07 3a90 	vmov	s15, r3
 8011a1c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011a20:	3901      	subs	r1, #1
 8011a22:	ed8d 7b00 	vstr	d7, [sp]
 8011a26:	9c01      	ldr	r4, [sp, #4]
 8011a28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011a2c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8011a30:	2401      	movs	r4, #1
 8011a32:	e7a0      	b.n	8011976 <_dtoa_r+0x106>
 8011a34:	2301      	movs	r3, #1
 8011a36:	930f      	str	r3, [sp, #60]	; 0x3c
 8011a38:	1a43      	subs	r3, r0, r1
 8011a3a:	1e5a      	subs	r2, r3, #1
 8011a3c:	bf45      	ittet	mi
 8011a3e:	f1c3 0301 	rsbmi	r3, r3, #1
 8011a42:	9305      	strmi	r3, [sp, #20]
 8011a44:	2300      	movpl	r3, #0
 8011a46:	2300      	movmi	r3, #0
 8011a48:	9206      	str	r2, [sp, #24]
 8011a4a:	bf54      	ite	pl
 8011a4c:	9305      	strpl	r3, [sp, #20]
 8011a4e:	9306      	strmi	r3, [sp, #24]
 8011a50:	f1bb 0f00 	cmp.w	fp, #0
 8011a54:	db18      	blt.n	8011a88 <_dtoa_r+0x218>
 8011a56:	9b06      	ldr	r3, [sp, #24]
 8011a58:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8011a5c:	445b      	add	r3, fp
 8011a5e:	9306      	str	r3, [sp, #24]
 8011a60:	2300      	movs	r3, #0
 8011a62:	9a07      	ldr	r2, [sp, #28]
 8011a64:	2a09      	cmp	r2, #9
 8011a66:	d849      	bhi.n	8011afc <_dtoa_r+0x28c>
 8011a68:	2a05      	cmp	r2, #5
 8011a6a:	bfc4      	itt	gt
 8011a6c:	3a04      	subgt	r2, #4
 8011a6e:	9207      	strgt	r2, [sp, #28]
 8011a70:	9a07      	ldr	r2, [sp, #28]
 8011a72:	f1a2 0202 	sub.w	r2, r2, #2
 8011a76:	bfcc      	ite	gt
 8011a78:	2400      	movgt	r4, #0
 8011a7a:	2401      	movle	r4, #1
 8011a7c:	2a03      	cmp	r2, #3
 8011a7e:	d848      	bhi.n	8011b12 <_dtoa_r+0x2a2>
 8011a80:	e8df f002 	tbb	[pc, r2]
 8011a84:	3a2c2e0b 	.word	0x3a2c2e0b
 8011a88:	9b05      	ldr	r3, [sp, #20]
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	eba3 030b 	sub.w	r3, r3, fp
 8011a90:	9305      	str	r3, [sp, #20]
 8011a92:	920e      	str	r2, [sp, #56]	; 0x38
 8011a94:	f1cb 0300 	rsb	r3, fp, #0
 8011a98:	e7e3      	b.n	8011a62 <_dtoa_r+0x1f2>
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	9208      	str	r2, [sp, #32]
 8011a9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011aa0:	2a00      	cmp	r2, #0
 8011aa2:	dc39      	bgt.n	8011b18 <_dtoa_r+0x2a8>
 8011aa4:	f04f 0a01 	mov.w	sl, #1
 8011aa8:	46d1      	mov	r9, sl
 8011aaa:	4652      	mov	r2, sl
 8011aac:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8011ab0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8011ab2:	2100      	movs	r1, #0
 8011ab4:	6079      	str	r1, [r7, #4]
 8011ab6:	2004      	movs	r0, #4
 8011ab8:	f100 0c14 	add.w	ip, r0, #20
 8011abc:	4594      	cmp	ip, r2
 8011abe:	6879      	ldr	r1, [r7, #4]
 8011ac0:	d92f      	bls.n	8011b22 <_dtoa_r+0x2b2>
 8011ac2:	4630      	mov	r0, r6
 8011ac4:	930c      	str	r3, [sp, #48]	; 0x30
 8011ac6:	f000 fc61 	bl	801238c <_Balloc>
 8011aca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011acc:	9000      	str	r0, [sp, #0]
 8011ace:	4602      	mov	r2, r0
 8011ad0:	2800      	cmp	r0, #0
 8011ad2:	d149      	bne.n	8011b68 <_dtoa_r+0x2f8>
 8011ad4:	4b23      	ldr	r3, [pc, #140]	; (8011b64 <_dtoa_r+0x2f4>)
 8011ad6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011ada:	e6df      	b.n	801189c <_dtoa_r+0x2c>
 8011adc:	2201      	movs	r2, #1
 8011ade:	e7dd      	b.n	8011a9c <_dtoa_r+0x22c>
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	9208      	str	r2, [sp, #32]
 8011ae4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ae6:	eb0b 0a02 	add.w	sl, fp, r2
 8011aea:	f10a 0901 	add.w	r9, sl, #1
 8011aee:	464a      	mov	r2, r9
 8011af0:	2a01      	cmp	r2, #1
 8011af2:	bfb8      	it	lt
 8011af4:	2201      	movlt	r2, #1
 8011af6:	e7db      	b.n	8011ab0 <_dtoa_r+0x240>
 8011af8:	2201      	movs	r2, #1
 8011afa:	e7f2      	b.n	8011ae2 <_dtoa_r+0x272>
 8011afc:	2401      	movs	r4, #1
 8011afe:	2200      	movs	r2, #0
 8011b00:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8011b04:	f04f 3aff 	mov.w	sl, #4294967295
 8011b08:	2100      	movs	r1, #0
 8011b0a:	46d1      	mov	r9, sl
 8011b0c:	2212      	movs	r2, #18
 8011b0e:	9109      	str	r1, [sp, #36]	; 0x24
 8011b10:	e7ce      	b.n	8011ab0 <_dtoa_r+0x240>
 8011b12:	2201      	movs	r2, #1
 8011b14:	9208      	str	r2, [sp, #32]
 8011b16:	e7f5      	b.n	8011b04 <_dtoa_r+0x294>
 8011b18:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8011b1c:	46d1      	mov	r9, sl
 8011b1e:	4652      	mov	r2, sl
 8011b20:	e7c6      	b.n	8011ab0 <_dtoa_r+0x240>
 8011b22:	3101      	adds	r1, #1
 8011b24:	6079      	str	r1, [r7, #4]
 8011b26:	0040      	lsls	r0, r0, #1
 8011b28:	e7c6      	b.n	8011ab8 <_dtoa_r+0x248>
 8011b2a:	bf00      	nop
 8011b2c:	f3af 8000 	nop.w
 8011b30:	636f4361 	.word	0x636f4361
 8011b34:	3fd287a7 	.word	0x3fd287a7
 8011b38:	8b60c8b3 	.word	0x8b60c8b3
 8011b3c:	3fc68a28 	.word	0x3fc68a28
 8011b40:	509f79fb 	.word	0x509f79fb
 8011b44:	3fd34413 	.word	0x3fd34413
 8011b48:	08013e11 	.word	0x08013e11
 8011b4c:	08013e28 	.word	0x08013e28
 8011b50:	7ff00000 	.word	0x7ff00000
 8011b54:	08013e0d 	.word	0x08013e0d
 8011b58:	08013e04 	.word	0x08013e04
 8011b5c:	08013de1 	.word	0x08013de1
 8011b60:	08013f20 	.word	0x08013f20
 8011b64:	08013e87 	.word	0x08013e87
 8011b68:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8011b6a:	9900      	ldr	r1, [sp, #0]
 8011b6c:	6011      	str	r1, [r2, #0]
 8011b6e:	f1b9 0f0e 	cmp.w	r9, #14
 8011b72:	d872      	bhi.n	8011c5a <_dtoa_r+0x3ea>
 8011b74:	2c00      	cmp	r4, #0
 8011b76:	d070      	beq.n	8011c5a <_dtoa_r+0x3ea>
 8011b78:	f1bb 0f00 	cmp.w	fp, #0
 8011b7c:	f340 80a6 	ble.w	8011ccc <_dtoa_r+0x45c>
 8011b80:	49ca      	ldr	r1, [pc, #808]	; (8011eac <_dtoa_r+0x63c>)
 8011b82:	f00b 020f 	and.w	r2, fp, #15
 8011b86:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8011b8a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011b8e:	ed92 7b00 	vldr	d7, [r2]
 8011b92:	ea4f 112b 	mov.w	r1, fp, asr #4
 8011b96:	f000 808d 	beq.w	8011cb4 <_dtoa_r+0x444>
 8011b9a:	4ac5      	ldr	r2, [pc, #788]	; (8011eb0 <_dtoa_r+0x640>)
 8011b9c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8011ba0:	ed92 6b08 	vldr	d6, [r2, #32]
 8011ba4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8011ba8:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011bac:	f001 010f 	and.w	r1, r1, #15
 8011bb0:	2203      	movs	r2, #3
 8011bb2:	48bf      	ldr	r0, [pc, #764]	; (8011eb0 <_dtoa_r+0x640>)
 8011bb4:	2900      	cmp	r1, #0
 8011bb6:	d17f      	bne.n	8011cb8 <_dtoa_r+0x448>
 8011bb8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011bbc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011bc0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011bc4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011bc6:	2900      	cmp	r1, #0
 8011bc8:	f000 80b2 	beq.w	8011d30 <_dtoa_r+0x4c0>
 8011bcc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011bd0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011bd4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bdc:	f140 80a8 	bpl.w	8011d30 <_dtoa_r+0x4c0>
 8011be0:	f1b9 0f00 	cmp.w	r9, #0
 8011be4:	f000 80a4 	beq.w	8011d30 <_dtoa_r+0x4c0>
 8011be8:	f1ba 0f00 	cmp.w	sl, #0
 8011bec:	dd31      	ble.n	8011c52 <_dtoa_r+0x3e2>
 8011bee:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8011bf2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011bf6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011bfa:	f10b 37ff 	add.w	r7, fp, #4294967295
 8011bfe:	3201      	adds	r2, #1
 8011c00:	4650      	mov	r0, sl
 8011c02:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011c06:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8011c0a:	ee07 2a90 	vmov	s15, r2
 8011c0e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011c12:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011c16:	ed8d 5b02 	vstr	d5, [sp, #8]
 8011c1a:	9c03      	ldr	r4, [sp, #12]
 8011c1c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8011c20:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8011c24:	2800      	cmp	r0, #0
 8011c26:	f040 8086 	bne.w	8011d36 <_dtoa_r+0x4c6>
 8011c2a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011c2e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011c32:	ec42 1b17 	vmov	d7, r1, r2
 8011c36:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c3e:	f300 8272 	bgt.w	8012126 <_dtoa_r+0x8b6>
 8011c42:	eeb1 7b47 	vneg.f64	d7, d7
 8011c46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c4e:	f100 8267 	bmi.w	8012120 <_dtoa_r+0x8b0>
 8011c52:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8011c56:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8011c5a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011c5c:	2a00      	cmp	r2, #0
 8011c5e:	f2c0 8129 	blt.w	8011eb4 <_dtoa_r+0x644>
 8011c62:	f1bb 0f0e 	cmp.w	fp, #14
 8011c66:	f300 8125 	bgt.w	8011eb4 <_dtoa_r+0x644>
 8011c6a:	4b90      	ldr	r3, [pc, #576]	; (8011eac <_dtoa_r+0x63c>)
 8011c6c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011c70:	ed93 6b00 	vldr	d6, [r3]
 8011c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	f280 80c3 	bge.w	8011e02 <_dtoa_r+0x592>
 8011c7c:	f1b9 0f00 	cmp.w	r9, #0
 8011c80:	f300 80bf 	bgt.w	8011e02 <_dtoa_r+0x592>
 8011c84:	f040 824c 	bne.w	8012120 <_dtoa_r+0x8b0>
 8011c88:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011c8c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011c90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011c94:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c9c:	464c      	mov	r4, r9
 8011c9e:	464f      	mov	r7, r9
 8011ca0:	f280 8222 	bge.w	80120e8 <_dtoa_r+0x878>
 8011ca4:	f8dd 8000 	ldr.w	r8, [sp]
 8011ca8:	2331      	movs	r3, #49	; 0x31
 8011caa:	f808 3b01 	strb.w	r3, [r8], #1
 8011cae:	f10b 0b01 	add.w	fp, fp, #1
 8011cb2:	e21e      	b.n	80120f2 <_dtoa_r+0x882>
 8011cb4:	2202      	movs	r2, #2
 8011cb6:	e77c      	b.n	8011bb2 <_dtoa_r+0x342>
 8011cb8:	07cc      	lsls	r4, r1, #31
 8011cba:	d504      	bpl.n	8011cc6 <_dtoa_r+0x456>
 8011cbc:	ed90 6b00 	vldr	d6, [r0]
 8011cc0:	3201      	adds	r2, #1
 8011cc2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011cc6:	1049      	asrs	r1, r1, #1
 8011cc8:	3008      	adds	r0, #8
 8011cca:	e773      	b.n	8011bb4 <_dtoa_r+0x344>
 8011ccc:	d02e      	beq.n	8011d2c <_dtoa_r+0x4bc>
 8011cce:	f1cb 0100 	rsb	r1, fp, #0
 8011cd2:	4a76      	ldr	r2, [pc, #472]	; (8011eac <_dtoa_r+0x63c>)
 8011cd4:	f001 000f 	and.w	r0, r1, #15
 8011cd8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011cdc:	ed92 7b00 	vldr	d7, [r2]
 8011ce0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8011ce4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011ce8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8011cec:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8011cf0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8011cf4:	486e      	ldr	r0, [pc, #440]	; (8011eb0 <_dtoa_r+0x640>)
 8011cf6:	1109      	asrs	r1, r1, #4
 8011cf8:	2400      	movs	r4, #0
 8011cfa:	2202      	movs	r2, #2
 8011cfc:	b939      	cbnz	r1, 8011d0e <_dtoa_r+0x49e>
 8011cfe:	2c00      	cmp	r4, #0
 8011d00:	f43f af60 	beq.w	8011bc4 <_dtoa_r+0x354>
 8011d04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011d08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d0c:	e75a      	b.n	8011bc4 <_dtoa_r+0x354>
 8011d0e:	07cf      	lsls	r7, r1, #31
 8011d10:	d509      	bpl.n	8011d26 <_dtoa_r+0x4b6>
 8011d12:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8011d16:	ed90 7b00 	vldr	d7, [r0]
 8011d1a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011d1e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8011d22:	3201      	adds	r2, #1
 8011d24:	2401      	movs	r4, #1
 8011d26:	1049      	asrs	r1, r1, #1
 8011d28:	3008      	adds	r0, #8
 8011d2a:	e7e7      	b.n	8011cfc <_dtoa_r+0x48c>
 8011d2c:	2202      	movs	r2, #2
 8011d2e:	e749      	b.n	8011bc4 <_dtoa_r+0x354>
 8011d30:	465f      	mov	r7, fp
 8011d32:	4648      	mov	r0, r9
 8011d34:	e765      	b.n	8011c02 <_dtoa_r+0x392>
 8011d36:	ec42 1b17 	vmov	d7, r1, r2
 8011d3a:	4a5c      	ldr	r2, [pc, #368]	; (8011eac <_dtoa_r+0x63c>)
 8011d3c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011d40:	ed12 4b02 	vldr	d4, [r2, #-8]
 8011d44:	9a00      	ldr	r2, [sp, #0]
 8011d46:	1814      	adds	r4, r2, r0
 8011d48:	9a08      	ldr	r2, [sp, #32]
 8011d4a:	b352      	cbz	r2, 8011da2 <_dtoa_r+0x532>
 8011d4c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8011d50:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8011d54:	f8dd 8000 	ldr.w	r8, [sp]
 8011d58:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8011d5c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011d60:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011d64:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011d68:	ee14 2a90 	vmov	r2, s9
 8011d6c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011d70:	3230      	adds	r2, #48	; 0x30
 8011d72:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011d76:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d7e:	f808 2b01 	strb.w	r2, [r8], #1
 8011d82:	d439      	bmi.n	8011df8 <_dtoa_r+0x588>
 8011d84:	ee32 5b46 	vsub.f64	d5, d2, d6
 8011d88:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8011d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d90:	d472      	bmi.n	8011e78 <_dtoa_r+0x608>
 8011d92:	45a0      	cmp	r8, r4
 8011d94:	f43f af5d 	beq.w	8011c52 <_dtoa_r+0x3e2>
 8011d98:	ee27 7b03 	vmul.f64	d7, d7, d3
 8011d9c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011da0:	e7e0      	b.n	8011d64 <_dtoa_r+0x4f4>
 8011da2:	f8dd 8000 	ldr.w	r8, [sp]
 8011da6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011daa:	4621      	mov	r1, r4
 8011dac:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011db0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011db4:	ee14 2a90 	vmov	r2, s9
 8011db8:	3230      	adds	r2, #48	; 0x30
 8011dba:	f808 2b01 	strb.w	r2, [r8], #1
 8011dbe:	45a0      	cmp	r8, r4
 8011dc0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011dc4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011dc8:	d118      	bne.n	8011dfc <_dtoa_r+0x58c>
 8011dca:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011dce:	ee37 4b05 	vadd.f64	d4, d7, d5
 8011dd2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8011dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dda:	dc4d      	bgt.n	8011e78 <_dtoa_r+0x608>
 8011ddc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011de0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011de8:	f57f af33 	bpl.w	8011c52 <_dtoa_r+0x3e2>
 8011dec:	4688      	mov	r8, r1
 8011dee:	3901      	subs	r1, #1
 8011df0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8011df4:	2b30      	cmp	r3, #48	; 0x30
 8011df6:	d0f9      	beq.n	8011dec <_dtoa_r+0x57c>
 8011df8:	46bb      	mov	fp, r7
 8011dfa:	e02a      	b.n	8011e52 <_dtoa_r+0x5e2>
 8011dfc:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011e00:	e7d6      	b.n	8011db0 <_dtoa_r+0x540>
 8011e02:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011e06:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8011e0a:	f8dd 8000 	ldr.w	r8, [sp]
 8011e0e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8011e12:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8011e16:	ee15 3a10 	vmov	r3, s10
 8011e1a:	3330      	adds	r3, #48	; 0x30
 8011e1c:	f808 3b01 	strb.w	r3, [r8], #1
 8011e20:	9b00      	ldr	r3, [sp, #0]
 8011e22:	eba8 0303 	sub.w	r3, r8, r3
 8011e26:	4599      	cmp	r9, r3
 8011e28:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011e2c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8011e30:	d133      	bne.n	8011e9a <_dtoa_r+0x62a>
 8011e32:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011e36:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e3e:	dc1a      	bgt.n	8011e76 <_dtoa_r+0x606>
 8011e40:	eeb4 7b46 	vcmp.f64	d7, d6
 8011e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e48:	d103      	bne.n	8011e52 <_dtoa_r+0x5e2>
 8011e4a:	ee15 3a10 	vmov	r3, s10
 8011e4e:	07d9      	lsls	r1, r3, #31
 8011e50:	d411      	bmi.n	8011e76 <_dtoa_r+0x606>
 8011e52:	4629      	mov	r1, r5
 8011e54:	4630      	mov	r0, r6
 8011e56:	f000 fad9 	bl	801240c <_Bfree>
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011e5e:	f888 3000 	strb.w	r3, [r8]
 8011e62:	f10b 0301 	add.w	r3, fp, #1
 8011e66:	6013      	str	r3, [r2, #0]
 8011e68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	f43f ad4d 	beq.w	801190a <_dtoa_r+0x9a>
 8011e70:	f8c3 8000 	str.w	r8, [r3]
 8011e74:	e549      	b.n	801190a <_dtoa_r+0x9a>
 8011e76:	465f      	mov	r7, fp
 8011e78:	4643      	mov	r3, r8
 8011e7a:	4698      	mov	r8, r3
 8011e7c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011e80:	2a39      	cmp	r2, #57	; 0x39
 8011e82:	d106      	bne.n	8011e92 <_dtoa_r+0x622>
 8011e84:	9a00      	ldr	r2, [sp, #0]
 8011e86:	429a      	cmp	r2, r3
 8011e88:	d1f7      	bne.n	8011e7a <_dtoa_r+0x60a>
 8011e8a:	9900      	ldr	r1, [sp, #0]
 8011e8c:	2230      	movs	r2, #48	; 0x30
 8011e8e:	3701      	adds	r7, #1
 8011e90:	700a      	strb	r2, [r1, #0]
 8011e92:	781a      	ldrb	r2, [r3, #0]
 8011e94:	3201      	adds	r2, #1
 8011e96:	701a      	strb	r2, [r3, #0]
 8011e98:	e7ae      	b.n	8011df8 <_dtoa_r+0x588>
 8011e9a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011e9e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ea6:	d1b2      	bne.n	8011e0e <_dtoa_r+0x59e>
 8011ea8:	e7d3      	b.n	8011e52 <_dtoa_r+0x5e2>
 8011eaa:	bf00      	nop
 8011eac:	08013f20 	.word	0x08013f20
 8011eb0:	08013ef8 	.word	0x08013ef8
 8011eb4:	9908      	ldr	r1, [sp, #32]
 8011eb6:	2900      	cmp	r1, #0
 8011eb8:	f000 80d1 	beq.w	801205e <_dtoa_r+0x7ee>
 8011ebc:	9907      	ldr	r1, [sp, #28]
 8011ebe:	2901      	cmp	r1, #1
 8011ec0:	f300 80b4 	bgt.w	801202c <_dtoa_r+0x7bc>
 8011ec4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011ec6:	2900      	cmp	r1, #0
 8011ec8:	f000 80ac 	beq.w	8012024 <_dtoa_r+0x7b4>
 8011ecc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011ed0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8011ed4:	461c      	mov	r4, r3
 8011ed6:	930a      	str	r3, [sp, #40]	; 0x28
 8011ed8:	9b05      	ldr	r3, [sp, #20]
 8011eda:	4413      	add	r3, r2
 8011edc:	9305      	str	r3, [sp, #20]
 8011ede:	9b06      	ldr	r3, [sp, #24]
 8011ee0:	2101      	movs	r1, #1
 8011ee2:	4413      	add	r3, r2
 8011ee4:	4630      	mov	r0, r6
 8011ee6:	9306      	str	r3, [sp, #24]
 8011ee8:	f000 fb4c 	bl	8012584 <__i2b>
 8011eec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011eee:	4607      	mov	r7, r0
 8011ef0:	f1b8 0f00 	cmp.w	r8, #0
 8011ef4:	dd0d      	ble.n	8011f12 <_dtoa_r+0x6a2>
 8011ef6:	9a06      	ldr	r2, [sp, #24]
 8011ef8:	2a00      	cmp	r2, #0
 8011efa:	dd0a      	ble.n	8011f12 <_dtoa_r+0x6a2>
 8011efc:	4542      	cmp	r2, r8
 8011efe:	9905      	ldr	r1, [sp, #20]
 8011f00:	bfa8      	it	ge
 8011f02:	4642      	movge	r2, r8
 8011f04:	1a89      	subs	r1, r1, r2
 8011f06:	9105      	str	r1, [sp, #20]
 8011f08:	9906      	ldr	r1, [sp, #24]
 8011f0a:	eba8 0802 	sub.w	r8, r8, r2
 8011f0e:	1a8a      	subs	r2, r1, r2
 8011f10:	9206      	str	r2, [sp, #24]
 8011f12:	b303      	cbz	r3, 8011f56 <_dtoa_r+0x6e6>
 8011f14:	9a08      	ldr	r2, [sp, #32]
 8011f16:	2a00      	cmp	r2, #0
 8011f18:	f000 80a6 	beq.w	8012068 <_dtoa_r+0x7f8>
 8011f1c:	2c00      	cmp	r4, #0
 8011f1e:	dd13      	ble.n	8011f48 <_dtoa_r+0x6d8>
 8011f20:	4639      	mov	r1, r7
 8011f22:	4622      	mov	r2, r4
 8011f24:	4630      	mov	r0, r6
 8011f26:	930c      	str	r3, [sp, #48]	; 0x30
 8011f28:	f000 fbe8 	bl	80126fc <__pow5mult>
 8011f2c:	462a      	mov	r2, r5
 8011f2e:	4601      	mov	r1, r0
 8011f30:	4607      	mov	r7, r0
 8011f32:	4630      	mov	r0, r6
 8011f34:	f000 fb3c 	bl	80125b0 <__multiply>
 8011f38:	4629      	mov	r1, r5
 8011f3a:	900a      	str	r0, [sp, #40]	; 0x28
 8011f3c:	4630      	mov	r0, r6
 8011f3e:	f000 fa65 	bl	801240c <_Bfree>
 8011f42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011f44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f46:	4615      	mov	r5, r2
 8011f48:	1b1a      	subs	r2, r3, r4
 8011f4a:	d004      	beq.n	8011f56 <_dtoa_r+0x6e6>
 8011f4c:	4629      	mov	r1, r5
 8011f4e:	4630      	mov	r0, r6
 8011f50:	f000 fbd4 	bl	80126fc <__pow5mult>
 8011f54:	4605      	mov	r5, r0
 8011f56:	2101      	movs	r1, #1
 8011f58:	4630      	mov	r0, r6
 8011f5a:	f000 fb13 	bl	8012584 <__i2b>
 8011f5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	4604      	mov	r4, r0
 8011f64:	f340 8082 	ble.w	801206c <_dtoa_r+0x7fc>
 8011f68:	461a      	mov	r2, r3
 8011f6a:	4601      	mov	r1, r0
 8011f6c:	4630      	mov	r0, r6
 8011f6e:	f000 fbc5 	bl	80126fc <__pow5mult>
 8011f72:	9b07      	ldr	r3, [sp, #28]
 8011f74:	2b01      	cmp	r3, #1
 8011f76:	4604      	mov	r4, r0
 8011f78:	dd7b      	ble.n	8012072 <_dtoa_r+0x802>
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	930a      	str	r3, [sp, #40]	; 0x28
 8011f7e:	6922      	ldr	r2, [r4, #16]
 8011f80:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011f84:	6910      	ldr	r0, [r2, #16]
 8011f86:	f000 faad 	bl	80124e4 <__hi0bits>
 8011f8a:	f1c0 0020 	rsb	r0, r0, #32
 8011f8e:	9b06      	ldr	r3, [sp, #24]
 8011f90:	4418      	add	r0, r3
 8011f92:	f010 001f 	ands.w	r0, r0, #31
 8011f96:	f000 808d 	beq.w	80120b4 <_dtoa_r+0x844>
 8011f9a:	f1c0 0220 	rsb	r2, r0, #32
 8011f9e:	2a04      	cmp	r2, #4
 8011fa0:	f340 8086 	ble.w	80120b0 <_dtoa_r+0x840>
 8011fa4:	f1c0 001c 	rsb	r0, r0, #28
 8011fa8:	9b05      	ldr	r3, [sp, #20]
 8011faa:	4403      	add	r3, r0
 8011fac:	9305      	str	r3, [sp, #20]
 8011fae:	9b06      	ldr	r3, [sp, #24]
 8011fb0:	4403      	add	r3, r0
 8011fb2:	4480      	add	r8, r0
 8011fb4:	9306      	str	r3, [sp, #24]
 8011fb6:	9b05      	ldr	r3, [sp, #20]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	dd05      	ble.n	8011fc8 <_dtoa_r+0x758>
 8011fbc:	4629      	mov	r1, r5
 8011fbe:	461a      	mov	r2, r3
 8011fc0:	4630      	mov	r0, r6
 8011fc2:	f000 fbf5 	bl	80127b0 <__lshift>
 8011fc6:	4605      	mov	r5, r0
 8011fc8:	9b06      	ldr	r3, [sp, #24]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	dd05      	ble.n	8011fda <_dtoa_r+0x76a>
 8011fce:	4621      	mov	r1, r4
 8011fd0:	461a      	mov	r2, r3
 8011fd2:	4630      	mov	r0, r6
 8011fd4:	f000 fbec 	bl	80127b0 <__lshift>
 8011fd8:	4604      	mov	r4, r0
 8011fda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d06b      	beq.n	80120b8 <_dtoa_r+0x848>
 8011fe0:	4621      	mov	r1, r4
 8011fe2:	4628      	mov	r0, r5
 8011fe4:	f000 fc50 	bl	8012888 <__mcmp>
 8011fe8:	2800      	cmp	r0, #0
 8011fea:	da65      	bge.n	80120b8 <_dtoa_r+0x848>
 8011fec:	2300      	movs	r3, #0
 8011fee:	4629      	mov	r1, r5
 8011ff0:	220a      	movs	r2, #10
 8011ff2:	4630      	mov	r0, r6
 8011ff4:	f000 fa2c 	bl	8012450 <__multadd>
 8011ff8:	9b08      	ldr	r3, [sp, #32]
 8011ffa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011ffe:	4605      	mov	r5, r0
 8012000:	2b00      	cmp	r3, #0
 8012002:	f000 8192 	beq.w	801232a <_dtoa_r+0xaba>
 8012006:	4639      	mov	r1, r7
 8012008:	2300      	movs	r3, #0
 801200a:	220a      	movs	r2, #10
 801200c:	4630      	mov	r0, r6
 801200e:	f000 fa1f 	bl	8012450 <__multadd>
 8012012:	f1ba 0f00 	cmp.w	sl, #0
 8012016:	4607      	mov	r7, r0
 8012018:	f300 808e 	bgt.w	8012138 <_dtoa_r+0x8c8>
 801201c:	9b07      	ldr	r3, [sp, #28]
 801201e:	2b02      	cmp	r3, #2
 8012020:	dc51      	bgt.n	80120c6 <_dtoa_r+0x856>
 8012022:	e089      	b.n	8012138 <_dtoa_r+0x8c8>
 8012024:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012026:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801202a:	e751      	b.n	8011ed0 <_dtoa_r+0x660>
 801202c:	f109 34ff 	add.w	r4, r9, #4294967295
 8012030:	42a3      	cmp	r3, r4
 8012032:	bfbf      	itttt	lt
 8012034:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8012036:	1ae3      	sublt	r3, r4, r3
 8012038:	18d2      	addlt	r2, r2, r3
 801203a:	4613      	movlt	r3, r2
 801203c:	bfb7      	itett	lt
 801203e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012040:	1b1c      	subge	r4, r3, r4
 8012042:	4623      	movlt	r3, r4
 8012044:	2400      	movlt	r4, #0
 8012046:	f1b9 0f00 	cmp.w	r9, #0
 801204a:	bfb5      	itete	lt
 801204c:	9a05      	ldrlt	r2, [sp, #20]
 801204e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8012052:	eba2 0809 	sublt.w	r8, r2, r9
 8012056:	464a      	movge	r2, r9
 8012058:	bfb8      	it	lt
 801205a:	2200      	movlt	r2, #0
 801205c:	e73b      	b.n	8011ed6 <_dtoa_r+0x666>
 801205e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012062:	9f08      	ldr	r7, [sp, #32]
 8012064:	461c      	mov	r4, r3
 8012066:	e743      	b.n	8011ef0 <_dtoa_r+0x680>
 8012068:	461a      	mov	r2, r3
 801206a:	e76f      	b.n	8011f4c <_dtoa_r+0x6dc>
 801206c:	9b07      	ldr	r3, [sp, #28]
 801206e:	2b01      	cmp	r3, #1
 8012070:	dc18      	bgt.n	80120a4 <_dtoa_r+0x834>
 8012072:	9b02      	ldr	r3, [sp, #8]
 8012074:	b9b3      	cbnz	r3, 80120a4 <_dtoa_r+0x834>
 8012076:	9b03      	ldr	r3, [sp, #12]
 8012078:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801207c:	b9a2      	cbnz	r2, 80120a8 <_dtoa_r+0x838>
 801207e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8012082:	0d12      	lsrs	r2, r2, #20
 8012084:	0512      	lsls	r2, r2, #20
 8012086:	b18a      	cbz	r2, 80120ac <_dtoa_r+0x83c>
 8012088:	9b05      	ldr	r3, [sp, #20]
 801208a:	3301      	adds	r3, #1
 801208c:	9305      	str	r3, [sp, #20]
 801208e:	9b06      	ldr	r3, [sp, #24]
 8012090:	3301      	adds	r3, #1
 8012092:	9306      	str	r3, [sp, #24]
 8012094:	2301      	movs	r3, #1
 8012096:	930a      	str	r3, [sp, #40]	; 0x28
 8012098:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801209a:	2b00      	cmp	r3, #0
 801209c:	f47f af6f 	bne.w	8011f7e <_dtoa_r+0x70e>
 80120a0:	2001      	movs	r0, #1
 80120a2:	e774      	b.n	8011f8e <_dtoa_r+0x71e>
 80120a4:	2300      	movs	r3, #0
 80120a6:	e7f6      	b.n	8012096 <_dtoa_r+0x826>
 80120a8:	9b02      	ldr	r3, [sp, #8]
 80120aa:	e7f4      	b.n	8012096 <_dtoa_r+0x826>
 80120ac:	920a      	str	r2, [sp, #40]	; 0x28
 80120ae:	e7f3      	b.n	8012098 <_dtoa_r+0x828>
 80120b0:	d081      	beq.n	8011fb6 <_dtoa_r+0x746>
 80120b2:	4610      	mov	r0, r2
 80120b4:	301c      	adds	r0, #28
 80120b6:	e777      	b.n	8011fa8 <_dtoa_r+0x738>
 80120b8:	f1b9 0f00 	cmp.w	r9, #0
 80120bc:	dc37      	bgt.n	801212e <_dtoa_r+0x8be>
 80120be:	9b07      	ldr	r3, [sp, #28]
 80120c0:	2b02      	cmp	r3, #2
 80120c2:	dd34      	ble.n	801212e <_dtoa_r+0x8be>
 80120c4:	46ca      	mov	sl, r9
 80120c6:	f1ba 0f00 	cmp.w	sl, #0
 80120ca:	d10d      	bne.n	80120e8 <_dtoa_r+0x878>
 80120cc:	4621      	mov	r1, r4
 80120ce:	4653      	mov	r3, sl
 80120d0:	2205      	movs	r2, #5
 80120d2:	4630      	mov	r0, r6
 80120d4:	f000 f9bc 	bl	8012450 <__multadd>
 80120d8:	4601      	mov	r1, r0
 80120da:	4604      	mov	r4, r0
 80120dc:	4628      	mov	r0, r5
 80120de:	f000 fbd3 	bl	8012888 <__mcmp>
 80120e2:	2800      	cmp	r0, #0
 80120e4:	f73f adde 	bgt.w	8011ca4 <_dtoa_r+0x434>
 80120e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120ea:	f8dd 8000 	ldr.w	r8, [sp]
 80120ee:	ea6f 0b03 	mvn.w	fp, r3
 80120f2:	f04f 0900 	mov.w	r9, #0
 80120f6:	4621      	mov	r1, r4
 80120f8:	4630      	mov	r0, r6
 80120fa:	f000 f987 	bl	801240c <_Bfree>
 80120fe:	2f00      	cmp	r7, #0
 8012100:	f43f aea7 	beq.w	8011e52 <_dtoa_r+0x5e2>
 8012104:	f1b9 0f00 	cmp.w	r9, #0
 8012108:	d005      	beq.n	8012116 <_dtoa_r+0x8a6>
 801210a:	45b9      	cmp	r9, r7
 801210c:	d003      	beq.n	8012116 <_dtoa_r+0x8a6>
 801210e:	4649      	mov	r1, r9
 8012110:	4630      	mov	r0, r6
 8012112:	f000 f97b 	bl	801240c <_Bfree>
 8012116:	4639      	mov	r1, r7
 8012118:	4630      	mov	r0, r6
 801211a:	f000 f977 	bl	801240c <_Bfree>
 801211e:	e698      	b.n	8011e52 <_dtoa_r+0x5e2>
 8012120:	2400      	movs	r4, #0
 8012122:	4627      	mov	r7, r4
 8012124:	e7e0      	b.n	80120e8 <_dtoa_r+0x878>
 8012126:	46bb      	mov	fp, r7
 8012128:	4604      	mov	r4, r0
 801212a:	4607      	mov	r7, r0
 801212c:	e5ba      	b.n	8011ca4 <_dtoa_r+0x434>
 801212e:	9b08      	ldr	r3, [sp, #32]
 8012130:	46ca      	mov	sl, r9
 8012132:	2b00      	cmp	r3, #0
 8012134:	f000 8100 	beq.w	8012338 <_dtoa_r+0xac8>
 8012138:	f1b8 0f00 	cmp.w	r8, #0
 801213c:	dd05      	ble.n	801214a <_dtoa_r+0x8da>
 801213e:	4639      	mov	r1, r7
 8012140:	4642      	mov	r2, r8
 8012142:	4630      	mov	r0, r6
 8012144:	f000 fb34 	bl	80127b0 <__lshift>
 8012148:	4607      	mov	r7, r0
 801214a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801214c:	2b00      	cmp	r3, #0
 801214e:	d05d      	beq.n	801220c <_dtoa_r+0x99c>
 8012150:	6879      	ldr	r1, [r7, #4]
 8012152:	4630      	mov	r0, r6
 8012154:	f000 f91a 	bl	801238c <_Balloc>
 8012158:	4680      	mov	r8, r0
 801215a:	b928      	cbnz	r0, 8012168 <_dtoa_r+0x8f8>
 801215c:	4b82      	ldr	r3, [pc, #520]	; (8012368 <_dtoa_r+0xaf8>)
 801215e:	4602      	mov	r2, r0
 8012160:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012164:	f7ff bb9a 	b.w	801189c <_dtoa_r+0x2c>
 8012168:	693a      	ldr	r2, [r7, #16]
 801216a:	3202      	adds	r2, #2
 801216c:	0092      	lsls	r2, r2, #2
 801216e:	f107 010c 	add.w	r1, r7, #12
 8012172:	300c      	adds	r0, #12
 8012174:	f7fe fe76 	bl	8010e64 <memcpy>
 8012178:	2201      	movs	r2, #1
 801217a:	4641      	mov	r1, r8
 801217c:	4630      	mov	r0, r6
 801217e:	f000 fb17 	bl	80127b0 <__lshift>
 8012182:	9b00      	ldr	r3, [sp, #0]
 8012184:	3301      	adds	r3, #1
 8012186:	9305      	str	r3, [sp, #20]
 8012188:	9b00      	ldr	r3, [sp, #0]
 801218a:	4453      	add	r3, sl
 801218c:	9309      	str	r3, [sp, #36]	; 0x24
 801218e:	9b02      	ldr	r3, [sp, #8]
 8012190:	f003 0301 	and.w	r3, r3, #1
 8012194:	46b9      	mov	r9, r7
 8012196:	9308      	str	r3, [sp, #32]
 8012198:	4607      	mov	r7, r0
 801219a:	9b05      	ldr	r3, [sp, #20]
 801219c:	4621      	mov	r1, r4
 801219e:	3b01      	subs	r3, #1
 80121a0:	4628      	mov	r0, r5
 80121a2:	9302      	str	r3, [sp, #8]
 80121a4:	f7ff fad6 	bl	8011754 <quorem>
 80121a8:	4603      	mov	r3, r0
 80121aa:	3330      	adds	r3, #48	; 0x30
 80121ac:	9006      	str	r0, [sp, #24]
 80121ae:	4649      	mov	r1, r9
 80121b0:	4628      	mov	r0, r5
 80121b2:	930a      	str	r3, [sp, #40]	; 0x28
 80121b4:	f000 fb68 	bl	8012888 <__mcmp>
 80121b8:	463a      	mov	r2, r7
 80121ba:	4682      	mov	sl, r0
 80121bc:	4621      	mov	r1, r4
 80121be:	4630      	mov	r0, r6
 80121c0:	f000 fb7e 	bl	80128c0 <__mdiff>
 80121c4:	68c2      	ldr	r2, [r0, #12]
 80121c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121c8:	4680      	mov	r8, r0
 80121ca:	bb0a      	cbnz	r2, 8012210 <_dtoa_r+0x9a0>
 80121cc:	4601      	mov	r1, r0
 80121ce:	4628      	mov	r0, r5
 80121d0:	f000 fb5a 	bl	8012888 <__mcmp>
 80121d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121d6:	4602      	mov	r2, r0
 80121d8:	4641      	mov	r1, r8
 80121da:	4630      	mov	r0, r6
 80121dc:	920e      	str	r2, [sp, #56]	; 0x38
 80121de:	930a      	str	r3, [sp, #40]	; 0x28
 80121e0:	f000 f914 	bl	801240c <_Bfree>
 80121e4:	9b07      	ldr	r3, [sp, #28]
 80121e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80121e8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80121ec:	ea43 0102 	orr.w	r1, r3, r2
 80121f0:	9b08      	ldr	r3, [sp, #32]
 80121f2:	430b      	orrs	r3, r1
 80121f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121f6:	d10d      	bne.n	8012214 <_dtoa_r+0x9a4>
 80121f8:	2b39      	cmp	r3, #57	; 0x39
 80121fa:	d029      	beq.n	8012250 <_dtoa_r+0x9e0>
 80121fc:	f1ba 0f00 	cmp.w	sl, #0
 8012200:	dd01      	ble.n	8012206 <_dtoa_r+0x996>
 8012202:	9b06      	ldr	r3, [sp, #24]
 8012204:	3331      	adds	r3, #49	; 0x31
 8012206:	9a02      	ldr	r2, [sp, #8]
 8012208:	7013      	strb	r3, [r2, #0]
 801220a:	e774      	b.n	80120f6 <_dtoa_r+0x886>
 801220c:	4638      	mov	r0, r7
 801220e:	e7b8      	b.n	8012182 <_dtoa_r+0x912>
 8012210:	2201      	movs	r2, #1
 8012212:	e7e1      	b.n	80121d8 <_dtoa_r+0x968>
 8012214:	f1ba 0f00 	cmp.w	sl, #0
 8012218:	db06      	blt.n	8012228 <_dtoa_r+0x9b8>
 801221a:	9907      	ldr	r1, [sp, #28]
 801221c:	ea41 0a0a 	orr.w	sl, r1, sl
 8012220:	9908      	ldr	r1, [sp, #32]
 8012222:	ea5a 0101 	orrs.w	r1, sl, r1
 8012226:	d120      	bne.n	801226a <_dtoa_r+0x9fa>
 8012228:	2a00      	cmp	r2, #0
 801222a:	ddec      	ble.n	8012206 <_dtoa_r+0x996>
 801222c:	4629      	mov	r1, r5
 801222e:	2201      	movs	r2, #1
 8012230:	4630      	mov	r0, r6
 8012232:	9305      	str	r3, [sp, #20]
 8012234:	f000 fabc 	bl	80127b0 <__lshift>
 8012238:	4621      	mov	r1, r4
 801223a:	4605      	mov	r5, r0
 801223c:	f000 fb24 	bl	8012888 <__mcmp>
 8012240:	2800      	cmp	r0, #0
 8012242:	9b05      	ldr	r3, [sp, #20]
 8012244:	dc02      	bgt.n	801224c <_dtoa_r+0x9dc>
 8012246:	d1de      	bne.n	8012206 <_dtoa_r+0x996>
 8012248:	07da      	lsls	r2, r3, #31
 801224a:	d5dc      	bpl.n	8012206 <_dtoa_r+0x996>
 801224c:	2b39      	cmp	r3, #57	; 0x39
 801224e:	d1d8      	bne.n	8012202 <_dtoa_r+0x992>
 8012250:	9a02      	ldr	r2, [sp, #8]
 8012252:	2339      	movs	r3, #57	; 0x39
 8012254:	7013      	strb	r3, [r2, #0]
 8012256:	4643      	mov	r3, r8
 8012258:	4698      	mov	r8, r3
 801225a:	3b01      	subs	r3, #1
 801225c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8012260:	2a39      	cmp	r2, #57	; 0x39
 8012262:	d051      	beq.n	8012308 <_dtoa_r+0xa98>
 8012264:	3201      	adds	r2, #1
 8012266:	701a      	strb	r2, [r3, #0]
 8012268:	e745      	b.n	80120f6 <_dtoa_r+0x886>
 801226a:	2a00      	cmp	r2, #0
 801226c:	dd03      	ble.n	8012276 <_dtoa_r+0xa06>
 801226e:	2b39      	cmp	r3, #57	; 0x39
 8012270:	d0ee      	beq.n	8012250 <_dtoa_r+0x9e0>
 8012272:	3301      	adds	r3, #1
 8012274:	e7c7      	b.n	8012206 <_dtoa_r+0x996>
 8012276:	9a05      	ldr	r2, [sp, #20]
 8012278:	9909      	ldr	r1, [sp, #36]	; 0x24
 801227a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801227e:	428a      	cmp	r2, r1
 8012280:	d02b      	beq.n	80122da <_dtoa_r+0xa6a>
 8012282:	4629      	mov	r1, r5
 8012284:	2300      	movs	r3, #0
 8012286:	220a      	movs	r2, #10
 8012288:	4630      	mov	r0, r6
 801228a:	f000 f8e1 	bl	8012450 <__multadd>
 801228e:	45b9      	cmp	r9, r7
 8012290:	4605      	mov	r5, r0
 8012292:	f04f 0300 	mov.w	r3, #0
 8012296:	f04f 020a 	mov.w	r2, #10
 801229a:	4649      	mov	r1, r9
 801229c:	4630      	mov	r0, r6
 801229e:	d107      	bne.n	80122b0 <_dtoa_r+0xa40>
 80122a0:	f000 f8d6 	bl	8012450 <__multadd>
 80122a4:	4681      	mov	r9, r0
 80122a6:	4607      	mov	r7, r0
 80122a8:	9b05      	ldr	r3, [sp, #20]
 80122aa:	3301      	adds	r3, #1
 80122ac:	9305      	str	r3, [sp, #20]
 80122ae:	e774      	b.n	801219a <_dtoa_r+0x92a>
 80122b0:	f000 f8ce 	bl	8012450 <__multadd>
 80122b4:	4639      	mov	r1, r7
 80122b6:	4681      	mov	r9, r0
 80122b8:	2300      	movs	r3, #0
 80122ba:	220a      	movs	r2, #10
 80122bc:	4630      	mov	r0, r6
 80122be:	f000 f8c7 	bl	8012450 <__multadd>
 80122c2:	4607      	mov	r7, r0
 80122c4:	e7f0      	b.n	80122a8 <_dtoa_r+0xa38>
 80122c6:	f1ba 0f00 	cmp.w	sl, #0
 80122ca:	9a00      	ldr	r2, [sp, #0]
 80122cc:	bfcc      	ite	gt
 80122ce:	46d0      	movgt	r8, sl
 80122d0:	f04f 0801 	movle.w	r8, #1
 80122d4:	4490      	add	r8, r2
 80122d6:	f04f 0900 	mov.w	r9, #0
 80122da:	4629      	mov	r1, r5
 80122dc:	2201      	movs	r2, #1
 80122de:	4630      	mov	r0, r6
 80122e0:	9302      	str	r3, [sp, #8]
 80122e2:	f000 fa65 	bl	80127b0 <__lshift>
 80122e6:	4621      	mov	r1, r4
 80122e8:	4605      	mov	r5, r0
 80122ea:	f000 facd 	bl	8012888 <__mcmp>
 80122ee:	2800      	cmp	r0, #0
 80122f0:	dcb1      	bgt.n	8012256 <_dtoa_r+0x9e6>
 80122f2:	d102      	bne.n	80122fa <_dtoa_r+0xa8a>
 80122f4:	9b02      	ldr	r3, [sp, #8]
 80122f6:	07db      	lsls	r3, r3, #31
 80122f8:	d4ad      	bmi.n	8012256 <_dtoa_r+0x9e6>
 80122fa:	4643      	mov	r3, r8
 80122fc:	4698      	mov	r8, r3
 80122fe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012302:	2a30      	cmp	r2, #48	; 0x30
 8012304:	d0fa      	beq.n	80122fc <_dtoa_r+0xa8c>
 8012306:	e6f6      	b.n	80120f6 <_dtoa_r+0x886>
 8012308:	9a00      	ldr	r2, [sp, #0]
 801230a:	429a      	cmp	r2, r3
 801230c:	d1a4      	bne.n	8012258 <_dtoa_r+0x9e8>
 801230e:	f10b 0b01 	add.w	fp, fp, #1
 8012312:	2331      	movs	r3, #49	; 0x31
 8012314:	e778      	b.n	8012208 <_dtoa_r+0x998>
 8012316:	4b15      	ldr	r3, [pc, #84]	; (801236c <_dtoa_r+0xafc>)
 8012318:	f7ff bb12 	b.w	8011940 <_dtoa_r+0xd0>
 801231c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801231e:	2b00      	cmp	r3, #0
 8012320:	f47f aaee 	bne.w	8011900 <_dtoa_r+0x90>
 8012324:	4b12      	ldr	r3, [pc, #72]	; (8012370 <_dtoa_r+0xb00>)
 8012326:	f7ff bb0b 	b.w	8011940 <_dtoa_r+0xd0>
 801232a:	f1ba 0f00 	cmp.w	sl, #0
 801232e:	dc03      	bgt.n	8012338 <_dtoa_r+0xac8>
 8012330:	9b07      	ldr	r3, [sp, #28]
 8012332:	2b02      	cmp	r3, #2
 8012334:	f73f aec7 	bgt.w	80120c6 <_dtoa_r+0x856>
 8012338:	f8dd 8000 	ldr.w	r8, [sp]
 801233c:	4621      	mov	r1, r4
 801233e:	4628      	mov	r0, r5
 8012340:	f7ff fa08 	bl	8011754 <quorem>
 8012344:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012348:	f808 3b01 	strb.w	r3, [r8], #1
 801234c:	9a00      	ldr	r2, [sp, #0]
 801234e:	eba8 0202 	sub.w	r2, r8, r2
 8012352:	4592      	cmp	sl, r2
 8012354:	ddb7      	ble.n	80122c6 <_dtoa_r+0xa56>
 8012356:	4629      	mov	r1, r5
 8012358:	2300      	movs	r3, #0
 801235a:	220a      	movs	r2, #10
 801235c:	4630      	mov	r0, r6
 801235e:	f000 f877 	bl	8012450 <__multadd>
 8012362:	4605      	mov	r5, r0
 8012364:	e7ea      	b.n	801233c <_dtoa_r+0xacc>
 8012366:	bf00      	nop
 8012368:	08013e87 	.word	0x08013e87
 801236c:	08013de0 	.word	0x08013de0
 8012370:	08013e04 	.word	0x08013e04

08012374 <_localeconv_r>:
 8012374:	4800      	ldr	r0, [pc, #0]	; (8012378 <_localeconv_r+0x4>)
 8012376:	4770      	bx	lr
 8012378:	24000178 	.word	0x24000178

0801237c <malloc>:
 801237c:	4b02      	ldr	r3, [pc, #8]	; (8012388 <malloc+0xc>)
 801237e:	4601      	mov	r1, r0
 8012380:	6818      	ldr	r0, [r3, #0]
 8012382:	f000 bbe1 	b.w	8012b48 <_malloc_r>
 8012386:	bf00      	nop
 8012388:	24000024 	.word	0x24000024

0801238c <_Balloc>:
 801238c:	b570      	push	{r4, r5, r6, lr}
 801238e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012390:	4604      	mov	r4, r0
 8012392:	460d      	mov	r5, r1
 8012394:	b976      	cbnz	r6, 80123b4 <_Balloc+0x28>
 8012396:	2010      	movs	r0, #16
 8012398:	f7ff fff0 	bl	801237c <malloc>
 801239c:	4602      	mov	r2, r0
 801239e:	6260      	str	r0, [r4, #36]	; 0x24
 80123a0:	b920      	cbnz	r0, 80123ac <_Balloc+0x20>
 80123a2:	4b18      	ldr	r3, [pc, #96]	; (8012404 <_Balloc+0x78>)
 80123a4:	4818      	ldr	r0, [pc, #96]	; (8012408 <_Balloc+0x7c>)
 80123a6:	2166      	movs	r1, #102	; 0x66
 80123a8:	f000 fd94 	bl	8012ed4 <__assert_func>
 80123ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80123b0:	6006      	str	r6, [r0, #0]
 80123b2:	60c6      	str	r6, [r0, #12]
 80123b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80123b6:	68f3      	ldr	r3, [r6, #12]
 80123b8:	b183      	cbz	r3, 80123dc <_Balloc+0x50>
 80123ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80123bc:	68db      	ldr	r3, [r3, #12]
 80123be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80123c2:	b9b8      	cbnz	r0, 80123f4 <_Balloc+0x68>
 80123c4:	2101      	movs	r1, #1
 80123c6:	fa01 f605 	lsl.w	r6, r1, r5
 80123ca:	1d72      	adds	r2, r6, #5
 80123cc:	0092      	lsls	r2, r2, #2
 80123ce:	4620      	mov	r0, r4
 80123d0:	f000 fb5a 	bl	8012a88 <_calloc_r>
 80123d4:	b160      	cbz	r0, 80123f0 <_Balloc+0x64>
 80123d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80123da:	e00e      	b.n	80123fa <_Balloc+0x6e>
 80123dc:	2221      	movs	r2, #33	; 0x21
 80123de:	2104      	movs	r1, #4
 80123e0:	4620      	mov	r0, r4
 80123e2:	f000 fb51 	bl	8012a88 <_calloc_r>
 80123e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80123e8:	60f0      	str	r0, [r6, #12]
 80123ea:	68db      	ldr	r3, [r3, #12]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d1e4      	bne.n	80123ba <_Balloc+0x2e>
 80123f0:	2000      	movs	r0, #0
 80123f2:	bd70      	pop	{r4, r5, r6, pc}
 80123f4:	6802      	ldr	r2, [r0, #0]
 80123f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80123fa:	2300      	movs	r3, #0
 80123fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012400:	e7f7      	b.n	80123f2 <_Balloc+0x66>
 8012402:	bf00      	nop
 8012404:	08013e11 	.word	0x08013e11
 8012408:	08013e98 	.word	0x08013e98

0801240c <_Bfree>:
 801240c:	b570      	push	{r4, r5, r6, lr}
 801240e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012410:	4605      	mov	r5, r0
 8012412:	460c      	mov	r4, r1
 8012414:	b976      	cbnz	r6, 8012434 <_Bfree+0x28>
 8012416:	2010      	movs	r0, #16
 8012418:	f7ff ffb0 	bl	801237c <malloc>
 801241c:	4602      	mov	r2, r0
 801241e:	6268      	str	r0, [r5, #36]	; 0x24
 8012420:	b920      	cbnz	r0, 801242c <_Bfree+0x20>
 8012422:	4b09      	ldr	r3, [pc, #36]	; (8012448 <_Bfree+0x3c>)
 8012424:	4809      	ldr	r0, [pc, #36]	; (801244c <_Bfree+0x40>)
 8012426:	218a      	movs	r1, #138	; 0x8a
 8012428:	f000 fd54 	bl	8012ed4 <__assert_func>
 801242c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012430:	6006      	str	r6, [r0, #0]
 8012432:	60c6      	str	r6, [r0, #12]
 8012434:	b13c      	cbz	r4, 8012446 <_Bfree+0x3a>
 8012436:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012438:	6862      	ldr	r2, [r4, #4]
 801243a:	68db      	ldr	r3, [r3, #12]
 801243c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012440:	6021      	str	r1, [r4, #0]
 8012442:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012446:	bd70      	pop	{r4, r5, r6, pc}
 8012448:	08013e11 	.word	0x08013e11
 801244c:	08013e98 	.word	0x08013e98

08012450 <__multadd>:
 8012450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012454:	690e      	ldr	r6, [r1, #16]
 8012456:	4607      	mov	r7, r0
 8012458:	4698      	mov	r8, r3
 801245a:	460c      	mov	r4, r1
 801245c:	f101 0014 	add.w	r0, r1, #20
 8012460:	2300      	movs	r3, #0
 8012462:	6805      	ldr	r5, [r0, #0]
 8012464:	b2a9      	uxth	r1, r5
 8012466:	fb02 8101 	mla	r1, r2, r1, r8
 801246a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801246e:	0c2d      	lsrs	r5, r5, #16
 8012470:	fb02 c505 	mla	r5, r2, r5, ip
 8012474:	b289      	uxth	r1, r1
 8012476:	3301      	adds	r3, #1
 8012478:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801247c:	429e      	cmp	r6, r3
 801247e:	f840 1b04 	str.w	r1, [r0], #4
 8012482:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8012486:	dcec      	bgt.n	8012462 <__multadd+0x12>
 8012488:	f1b8 0f00 	cmp.w	r8, #0
 801248c:	d022      	beq.n	80124d4 <__multadd+0x84>
 801248e:	68a3      	ldr	r3, [r4, #8]
 8012490:	42b3      	cmp	r3, r6
 8012492:	dc19      	bgt.n	80124c8 <__multadd+0x78>
 8012494:	6861      	ldr	r1, [r4, #4]
 8012496:	4638      	mov	r0, r7
 8012498:	3101      	adds	r1, #1
 801249a:	f7ff ff77 	bl	801238c <_Balloc>
 801249e:	4605      	mov	r5, r0
 80124a0:	b928      	cbnz	r0, 80124ae <__multadd+0x5e>
 80124a2:	4602      	mov	r2, r0
 80124a4:	4b0d      	ldr	r3, [pc, #52]	; (80124dc <__multadd+0x8c>)
 80124a6:	480e      	ldr	r0, [pc, #56]	; (80124e0 <__multadd+0x90>)
 80124a8:	21b5      	movs	r1, #181	; 0xb5
 80124aa:	f000 fd13 	bl	8012ed4 <__assert_func>
 80124ae:	6922      	ldr	r2, [r4, #16]
 80124b0:	3202      	adds	r2, #2
 80124b2:	f104 010c 	add.w	r1, r4, #12
 80124b6:	0092      	lsls	r2, r2, #2
 80124b8:	300c      	adds	r0, #12
 80124ba:	f7fe fcd3 	bl	8010e64 <memcpy>
 80124be:	4621      	mov	r1, r4
 80124c0:	4638      	mov	r0, r7
 80124c2:	f7ff ffa3 	bl	801240c <_Bfree>
 80124c6:	462c      	mov	r4, r5
 80124c8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80124cc:	3601      	adds	r6, #1
 80124ce:	f8c3 8014 	str.w	r8, [r3, #20]
 80124d2:	6126      	str	r6, [r4, #16]
 80124d4:	4620      	mov	r0, r4
 80124d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124da:	bf00      	nop
 80124dc:	08013e87 	.word	0x08013e87
 80124e0:	08013e98 	.word	0x08013e98

080124e4 <__hi0bits>:
 80124e4:	0c03      	lsrs	r3, r0, #16
 80124e6:	041b      	lsls	r3, r3, #16
 80124e8:	b9d3      	cbnz	r3, 8012520 <__hi0bits+0x3c>
 80124ea:	0400      	lsls	r0, r0, #16
 80124ec:	2310      	movs	r3, #16
 80124ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80124f2:	bf04      	itt	eq
 80124f4:	0200      	lsleq	r0, r0, #8
 80124f6:	3308      	addeq	r3, #8
 80124f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80124fc:	bf04      	itt	eq
 80124fe:	0100      	lsleq	r0, r0, #4
 8012500:	3304      	addeq	r3, #4
 8012502:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012506:	bf04      	itt	eq
 8012508:	0080      	lsleq	r0, r0, #2
 801250a:	3302      	addeq	r3, #2
 801250c:	2800      	cmp	r0, #0
 801250e:	db05      	blt.n	801251c <__hi0bits+0x38>
 8012510:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012514:	f103 0301 	add.w	r3, r3, #1
 8012518:	bf08      	it	eq
 801251a:	2320      	moveq	r3, #32
 801251c:	4618      	mov	r0, r3
 801251e:	4770      	bx	lr
 8012520:	2300      	movs	r3, #0
 8012522:	e7e4      	b.n	80124ee <__hi0bits+0xa>

08012524 <__lo0bits>:
 8012524:	6803      	ldr	r3, [r0, #0]
 8012526:	f013 0207 	ands.w	r2, r3, #7
 801252a:	4601      	mov	r1, r0
 801252c:	d00b      	beq.n	8012546 <__lo0bits+0x22>
 801252e:	07da      	lsls	r2, r3, #31
 8012530:	d424      	bmi.n	801257c <__lo0bits+0x58>
 8012532:	0798      	lsls	r0, r3, #30
 8012534:	bf49      	itett	mi
 8012536:	085b      	lsrmi	r3, r3, #1
 8012538:	089b      	lsrpl	r3, r3, #2
 801253a:	2001      	movmi	r0, #1
 801253c:	600b      	strmi	r3, [r1, #0]
 801253e:	bf5c      	itt	pl
 8012540:	600b      	strpl	r3, [r1, #0]
 8012542:	2002      	movpl	r0, #2
 8012544:	4770      	bx	lr
 8012546:	b298      	uxth	r0, r3
 8012548:	b9b0      	cbnz	r0, 8012578 <__lo0bits+0x54>
 801254a:	0c1b      	lsrs	r3, r3, #16
 801254c:	2010      	movs	r0, #16
 801254e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012552:	bf04      	itt	eq
 8012554:	0a1b      	lsreq	r3, r3, #8
 8012556:	3008      	addeq	r0, #8
 8012558:	071a      	lsls	r2, r3, #28
 801255a:	bf04      	itt	eq
 801255c:	091b      	lsreq	r3, r3, #4
 801255e:	3004      	addeq	r0, #4
 8012560:	079a      	lsls	r2, r3, #30
 8012562:	bf04      	itt	eq
 8012564:	089b      	lsreq	r3, r3, #2
 8012566:	3002      	addeq	r0, #2
 8012568:	07da      	lsls	r2, r3, #31
 801256a:	d403      	bmi.n	8012574 <__lo0bits+0x50>
 801256c:	085b      	lsrs	r3, r3, #1
 801256e:	f100 0001 	add.w	r0, r0, #1
 8012572:	d005      	beq.n	8012580 <__lo0bits+0x5c>
 8012574:	600b      	str	r3, [r1, #0]
 8012576:	4770      	bx	lr
 8012578:	4610      	mov	r0, r2
 801257a:	e7e8      	b.n	801254e <__lo0bits+0x2a>
 801257c:	2000      	movs	r0, #0
 801257e:	4770      	bx	lr
 8012580:	2020      	movs	r0, #32
 8012582:	4770      	bx	lr

08012584 <__i2b>:
 8012584:	b510      	push	{r4, lr}
 8012586:	460c      	mov	r4, r1
 8012588:	2101      	movs	r1, #1
 801258a:	f7ff feff 	bl	801238c <_Balloc>
 801258e:	4602      	mov	r2, r0
 8012590:	b928      	cbnz	r0, 801259e <__i2b+0x1a>
 8012592:	4b05      	ldr	r3, [pc, #20]	; (80125a8 <__i2b+0x24>)
 8012594:	4805      	ldr	r0, [pc, #20]	; (80125ac <__i2b+0x28>)
 8012596:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801259a:	f000 fc9b 	bl	8012ed4 <__assert_func>
 801259e:	2301      	movs	r3, #1
 80125a0:	6144      	str	r4, [r0, #20]
 80125a2:	6103      	str	r3, [r0, #16]
 80125a4:	bd10      	pop	{r4, pc}
 80125a6:	bf00      	nop
 80125a8:	08013e87 	.word	0x08013e87
 80125ac:	08013e98 	.word	0x08013e98

080125b0 <__multiply>:
 80125b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125b4:	4614      	mov	r4, r2
 80125b6:	690a      	ldr	r2, [r1, #16]
 80125b8:	6923      	ldr	r3, [r4, #16]
 80125ba:	429a      	cmp	r2, r3
 80125bc:	bfb8      	it	lt
 80125be:	460b      	movlt	r3, r1
 80125c0:	460d      	mov	r5, r1
 80125c2:	bfbc      	itt	lt
 80125c4:	4625      	movlt	r5, r4
 80125c6:	461c      	movlt	r4, r3
 80125c8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80125cc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80125d0:	68ab      	ldr	r3, [r5, #8]
 80125d2:	6869      	ldr	r1, [r5, #4]
 80125d4:	eb0a 0709 	add.w	r7, sl, r9
 80125d8:	42bb      	cmp	r3, r7
 80125da:	b085      	sub	sp, #20
 80125dc:	bfb8      	it	lt
 80125de:	3101      	addlt	r1, #1
 80125e0:	f7ff fed4 	bl	801238c <_Balloc>
 80125e4:	b930      	cbnz	r0, 80125f4 <__multiply+0x44>
 80125e6:	4602      	mov	r2, r0
 80125e8:	4b42      	ldr	r3, [pc, #264]	; (80126f4 <__multiply+0x144>)
 80125ea:	4843      	ldr	r0, [pc, #268]	; (80126f8 <__multiply+0x148>)
 80125ec:	f240 115d 	movw	r1, #349	; 0x15d
 80125f0:	f000 fc70 	bl	8012ed4 <__assert_func>
 80125f4:	f100 0614 	add.w	r6, r0, #20
 80125f8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80125fc:	4633      	mov	r3, r6
 80125fe:	2200      	movs	r2, #0
 8012600:	4543      	cmp	r3, r8
 8012602:	d31e      	bcc.n	8012642 <__multiply+0x92>
 8012604:	f105 0c14 	add.w	ip, r5, #20
 8012608:	f104 0314 	add.w	r3, r4, #20
 801260c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8012610:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012614:	9202      	str	r2, [sp, #8]
 8012616:	ebac 0205 	sub.w	r2, ip, r5
 801261a:	3a15      	subs	r2, #21
 801261c:	f022 0203 	bic.w	r2, r2, #3
 8012620:	3204      	adds	r2, #4
 8012622:	f105 0115 	add.w	r1, r5, #21
 8012626:	458c      	cmp	ip, r1
 8012628:	bf38      	it	cc
 801262a:	2204      	movcc	r2, #4
 801262c:	9201      	str	r2, [sp, #4]
 801262e:	9a02      	ldr	r2, [sp, #8]
 8012630:	9303      	str	r3, [sp, #12]
 8012632:	429a      	cmp	r2, r3
 8012634:	d808      	bhi.n	8012648 <__multiply+0x98>
 8012636:	2f00      	cmp	r7, #0
 8012638:	dc55      	bgt.n	80126e6 <__multiply+0x136>
 801263a:	6107      	str	r7, [r0, #16]
 801263c:	b005      	add	sp, #20
 801263e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012642:	f843 2b04 	str.w	r2, [r3], #4
 8012646:	e7db      	b.n	8012600 <__multiply+0x50>
 8012648:	f8b3 a000 	ldrh.w	sl, [r3]
 801264c:	f1ba 0f00 	cmp.w	sl, #0
 8012650:	d020      	beq.n	8012694 <__multiply+0xe4>
 8012652:	f105 0e14 	add.w	lr, r5, #20
 8012656:	46b1      	mov	r9, r6
 8012658:	2200      	movs	r2, #0
 801265a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801265e:	f8d9 b000 	ldr.w	fp, [r9]
 8012662:	b2a1      	uxth	r1, r4
 8012664:	fa1f fb8b 	uxth.w	fp, fp
 8012668:	fb0a b101 	mla	r1, sl, r1, fp
 801266c:	4411      	add	r1, r2
 801266e:	f8d9 2000 	ldr.w	r2, [r9]
 8012672:	0c24      	lsrs	r4, r4, #16
 8012674:	0c12      	lsrs	r2, r2, #16
 8012676:	fb0a 2404 	mla	r4, sl, r4, r2
 801267a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801267e:	b289      	uxth	r1, r1
 8012680:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012684:	45f4      	cmp	ip, lr
 8012686:	f849 1b04 	str.w	r1, [r9], #4
 801268a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801268e:	d8e4      	bhi.n	801265a <__multiply+0xaa>
 8012690:	9901      	ldr	r1, [sp, #4]
 8012692:	5072      	str	r2, [r6, r1]
 8012694:	9a03      	ldr	r2, [sp, #12]
 8012696:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801269a:	3304      	adds	r3, #4
 801269c:	f1b9 0f00 	cmp.w	r9, #0
 80126a0:	d01f      	beq.n	80126e2 <__multiply+0x132>
 80126a2:	6834      	ldr	r4, [r6, #0]
 80126a4:	f105 0114 	add.w	r1, r5, #20
 80126a8:	46b6      	mov	lr, r6
 80126aa:	f04f 0a00 	mov.w	sl, #0
 80126ae:	880a      	ldrh	r2, [r1, #0]
 80126b0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80126b4:	fb09 b202 	mla	r2, r9, r2, fp
 80126b8:	4492      	add	sl, r2
 80126ba:	b2a4      	uxth	r4, r4
 80126bc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80126c0:	f84e 4b04 	str.w	r4, [lr], #4
 80126c4:	f851 4b04 	ldr.w	r4, [r1], #4
 80126c8:	f8be 2000 	ldrh.w	r2, [lr]
 80126cc:	0c24      	lsrs	r4, r4, #16
 80126ce:	fb09 2404 	mla	r4, r9, r4, r2
 80126d2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80126d6:	458c      	cmp	ip, r1
 80126d8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80126dc:	d8e7      	bhi.n	80126ae <__multiply+0xfe>
 80126de:	9a01      	ldr	r2, [sp, #4]
 80126e0:	50b4      	str	r4, [r6, r2]
 80126e2:	3604      	adds	r6, #4
 80126e4:	e7a3      	b.n	801262e <__multiply+0x7e>
 80126e6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d1a5      	bne.n	801263a <__multiply+0x8a>
 80126ee:	3f01      	subs	r7, #1
 80126f0:	e7a1      	b.n	8012636 <__multiply+0x86>
 80126f2:	bf00      	nop
 80126f4:	08013e87 	.word	0x08013e87
 80126f8:	08013e98 	.word	0x08013e98

080126fc <__pow5mult>:
 80126fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012700:	4615      	mov	r5, r2
 8012702:	f012 0203 	ands.w	r2, r2, #3
 8012706:	4606      	mov	r6, r0
 8012708:	460f      	mov	r7, r1
 801270a:	d007      	beq.n	801271c <__pow5mult+0x20>
 801270c:	4c25      	ldr	r4, [pc, #148]	; (80127a4 <__pow5mult+0xa8>)
 801270e:	3a01      	subs	r2, #1
 8012710:	2300      	movs	r3, #0
 8012712:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012716:	f7ff fe9b 	bl	8012450 <__multadd>
 801271a:	4607      	mov	r7, r0
 801271c:	10ad      	asrs	r5, r5, #2
 801271e:	d03d      	beq.n	801279c <__pow5mult+0xa0>
 8012720:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012722:	b97c      	cbnz	r4, 8012744 <__pow5mult+0x48>
 8012724:	2010      	movs	r0, #16
 8012726:	f7ff fe29 	bl	801237c <malloc>
 801272a:	4602      	mov	r2, r0
 801272c:	6270      	str	r0, [r6, #36]	; 0x24
 801272e:	b928      	cbnz	r0, 801273c <__pow5mult+0x40>
 8012730:	4b1d      	ldr	r3, [pc, #116]	; (80127a8 <__pow5mult+0xac>)
 8012732:	481e      	ldr	r0, [pc, #120]	; (80127ac <__pow5mult+0xb0>)
 8012734:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012738:	f000 fbcc 	bl	8012ed4 <__assert_func>
 801273c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012740:	6004      	str	r4, [r0, #0]
 8012742:	60c4      	str	r4, [r0, #12]
 8012744:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012748:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801274c:	b94c      	cbnz	r4, 8012762 <__pow5mult+0x66>
 801274e:	f240 2171 	movw	r1, #625	; 0x271
 8012752:	4630      	mov	r0, r6
 8012754:	f7ff ff16 	bl	8012584 <__i2b>
 8012758:	2300      	movs	r3, #0
 801275a:	f8c8 0008 	str.w	r0, [r8, #8]
 801275e:	4604      	mov	r4, r0
 8012760:	6003      	str	r3, [r0, #0]
 8012762:	f04f 0900 	mov.w	r9, #0
 8012766:	07eb      	lsls	r3, r5, #31
 8012768:	d50a      	bpl.n	8012780 <__pow5mult+0x84>
 801276a:	4639      	mov	r1, r7
 801276c:	4622      	mov	r2, r4
 801276e:	4630      	mov	r0, r6
 8012770:	f7ff ff1e 	bl	80125b0 <__multiply>
 8012774:	4639      	mov	r1, r7
 8012776:	4680      	mov	r8, r0
 8012778:	4630      	mov	r0, r6
 801277a:	f7ff fe47 	bl	801240c <_Bfree>
 801277e:	4647      	mov	r7, r8
 8012780:	106d      	asrs	r5, r5, #1
 8012782:	d00b      	beq.n	801279c <__pow5mult+0xa0>
 8012784:	6820      	ldr	r0, [r4, #0]
 8012786:	b938      	cbnz	r0, 8012798 <__pow5mult+0x9c>
 8012788:	4622      	mov	r2, r4
 801278a:	4621      	mov	r1, r4
 801278c:	4630      	mov	r0, r6
 801278e:	f7ff ff0f 	bl	80125b0 <__multiply>
 8012792:	6020      	str	r0, [r4, #0]
 8012794:	f8c0 9000 	str.w	r9, [r0]
 8012798:	4604      	mov	r4, r0
 801279a:	e7e4      	b.n	8012766 <__pow5mult+0x6a>
 801279c:	4638      	mov	r0, r7
 801279e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127a2:	bf00      	nop
 80127a4:	08013fe8 	.word	0x08013fe8
 80127a8:	08013e11 	.word	0x08013e11
 80127ac:	08013e98 	.word	0x08013e98

080127b0 <__lshift>:
 80127b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127b4:	460c      	mov	r4, r1
 80127b6:	6849      	ldr	r1, [r1, #4]
 80127b8:	6923      	ldr	r3, [r4, #16]
 80127ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80127be:	68a3      	ldr	r3, [r4, #8]
 80127c0:	4607      	mov	r7, r0
 80127c2:	4691      	mov	r9, r2
 80127c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80127c8:	f108 0601 	add.w	r6, r8, #1
 80127cc:	42b3      	cmp	r3, r6
 80127ce:	db0b      	blt.n	80127e8 <__lshift+0x38>
 80127d0:	4638      	mov	r0, r7
 80127d2:	f7ff fddb 	bl	801238c <_Balloc>
 80127d6:	4605      	mov	r5, r0
 80127d8:	b948      	cbnz	r0, 80127ee <__lshift+0x3e>
 80127da:	4602      	mov	r2, r0
 80127dc:	4b28      	ldr	r3, [pc, #160]	; (8012880 <__lshift+0xd0>)
 80127de:	4829      	ldr	r0, [pc, #164]	; (8012884 <__lshift+0xd4>)
 80127e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80127e4:	f000 fb76 	bl	8012ed4 <__assert_func>
 80127e8:	3101      	adds	r1, #1
 80127ea:	005b      	lsls	r3, r3, #1
 80127ec:	e7ee      	b.n	80127cc <__lshift+0x1c>
 80127ee:	2300      	movs	r3, #0
 80127f0:	f100 0114 	add.w	r1, r0, #20
 80127f4:	f100 0210 	add.w	r2, r0, #16
 80127f8:	4618      	mov	r0, r3
 80127fa:	4553      	cmp	r3, sl
 80127fc:	db33      	blt.n	8012866 <__lshift+0xb6>
 80127fe:	6920      	ldr	r0, [r4, #16]
 8012800:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012804:	f104 0314 	add.w	r3, r4, #20
 8012808:	f019 091f 	ands.w	r9, r9, #31
 801280c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012810:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012814:	d02b      	beq.n	801286e <__lshift+0xbe>
 8012816:	f1c9 0e20 	rsb	lr, r9, #32
 801281a:	468a      	mov	sl, r1
 801281c:	2200      	movs	r2, #0
 801281e:	6818      	ldr	r0, [r3, #0]
 8012820:	fa00 f009 	lsl.w	r0, r0, r9
 8012824:	4302      	orrs	r2, r0
 8012826:	f84a 2b04 	str.w	r2, [sl], #4
 801282a:	f853 2b04 	ldr.w	r2, [r3], #4
 801282e:	459c      	cmp	ip, r3
 8012830:	fa22 f20e 	lsr.w	r2, r2, lr
 8012834:	d8f3      	bhi.n	801281e <__lshift+0x6e>
 8012836:	ebac 0304 	sub.w	r3, ip, r4
 801283a:	3b15      	subs	r3, #21
 801283c:	f023 0303 	bic.w	r3, r3, #3
 8012840:	3304      	adds	r3, #4
 8012842:	f104 0015 	add.w	r0, r4, #21
 8012846:	4584      	cmp	ip, r0
 8012848:	bf38      	it	cc
 801284a:	2304      	movcc	r3, #4
 801284c:	50ca      	str	r2, [r1, r3]
 801284e:	b10a      	cbz	r2, 8012854 <__lshift+0xa4>
 8012850:	f108 0602 	add.w	r6, r8, #2
 8012854:	3e01      	subs	r6, #1
 8012856:	4638      	mov	r0, r7
 8012858:	612e      	str	r6, [r5, #16]
 801285a:	4621      	mov	r1, r4
 801285c:	f7ff fdd6 	bl	801240c <_Bfree>
 8012860:	4628      	mov	r0, r5
 8012862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012866:	f842 0f04 	str.w	r0, [r2, #4]!
 801286a:	3301      	adds	r3, #1
 801286c:	e7c5      	b.n	80127fa <__lshift+0x4a>
 801286e:	3904      	subs	r1, #4
 8012870:	f853 2b04 	ldr.w	r2, [r3], #4
 8012874:	f841 2f04 	str.w	r2, [r1, #4]!
 8012878:	459c      	cmp	ip, r3
 801287a:	d8f9      	bhi.n	8012870 <__lshift+0xc0>
 801287c:	e7ea      	b.n	8012854 <__lshift+0xa4>
 801287e:	bf00      	nop
 8012880:	08013e87 	.word	0x08013e87
 8012884:	08013e98 	.word	0x08013e98

08012888 <__mcmp>:
 8012888:	b530      	push	{r4, r5, lr}
 801288a:	6902      	ldr	r2, [r0, #16]
 801288c:	690c      	ldr	r4, [r1, #16]
 801288e:	1b12      	subs	r2, r2, r4
 8012890:	d10e      	bne.n	80128b0 <__mcmp+0x28>
 8012892:	f100 0314 	add.w	r3, r0, #20
 8012896:	3114      	adds	r1, #20
 8012898:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801289c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80128a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80128a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80128a8:	42a5      	cmp	r5, r4
 80128aa:	d003      	beq.n	80128b4 <__mcmp+0x2c>
 80128ac:	d305      	bcc.n	80128ba <__mcmp+0x32>
 80128ae:	2201      	movs	r2, #1
 80128b0:	4610      	mov	r0, r2
 80128b2:	bd30      	pop	{r4, r5, pc}
 80128b4:	4283      	cmp	r3, r0
 80128b6:	d3f3      	bcc.n	80128a0 <__mcmp+0x18>
 80128b8:	e7fa      	b.n	80128b0 <__mcmp+0x28>
 80128ba:	f04f 32ff 	mov.w	r2, #4294967295
 80128be:	e7f7      	b.n	80128b0 <__mcmp+0x28>

080128c0 <__mdiff>:
 80128c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128c4:	460c      	mov	r4, r1
 80128c6:	4606      	mov	r6, r0
 80128c8:	4611      	mov	r1, r2
 80128ca:	4620      	mov	r0, r4
 80128cc:	4617      	mov	r7, r2
 80128ce:	f7ff ffdb 	bl	8012888 <__mcmp>
 80128d2:	1e05      	subs	r5, r0, #0
 80128d4:	d110      	bne.n	80128f8 <__mdiff+0x38>
 80128d6:	4629      	mov	r1, r5
 80128d8:	4630      	mov	r0, r6
 80128da:	f7ff fd57 	bl	801238c <_Balloc>
 80128de:	b930      	cbnz	r0, 80128ee <__mdiff+0x2e>
 80128e0:	4b39      	ldr	r3, [pc, #228]	; (80129c8 <__mdiff+0x108>)
 80128e2:	4602      	mov	r2, r0
 80128e4:	f240 2132 	movw	r1, #562	; 0x232
 80128e8:	4838      	ldr	r0, [pc, #224]	; (80129cc <__mdiff+0x10c>)
 80128ea:	f000 faf3 	bl	8012ed4 <__assert_func>
 80128ee:	2301      	movs	r3, #1
 80128f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80128f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128f8:	bfa4      	itt	ge
 80128fa:	463b      	movge	r3, r7
 80128fc:	4627      	movge	r7, r4
 80128fe:	4630      	mov	r0, r6
 8012900:	6879      	ldr	r1, [r7, #4]
 8012902:	bfa6      	itte	ge
 8012904:	461c      	movge	r4, r3
 8012906:	2500      	movge	r5, #0
 8012908:	2501      	movlt	r5, #1
 801290a:	f7ff fd3f 	bl	801238c <_Balloc>
 801290e:	b920      	cbnz	r0, 801291a <__mdiff+0x5a>
 8012910:	4b2d      	ldr	r3, [pc, #180]	; (80129c8 <__mdiff+0x108>)
 8012912:	4602      	mov	r2, r0
 8012914:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012918:	e7e6      	b.n	80128e8 <__mdiff+0x28>
 801291a:	693e      	ldr	r6, [r7, #16]
 801291c:	60c5      	str	r5, [r0, #12]
 801291e:	6925      	ldr	r5, [r4, #16]
 8012920:	f107 0114 	add.w	r1, r7, #20
 8012924:	f104 0914 	add.w	r9, r4, #20
 8012928:	f100 0e14 	add.w	lr, r0, #20
 801292c:	f107 0210 	add.w	r2, r7, #16
 8012930:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8012934:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8012938:	46f2      	mov	sl, lr
 801293a:	2700      	movs	r7, #0
 801293c:	f859 3b04 	ldr.w	r3, [r9], #4
 8012940:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012944:	fa1f f883 	uxth.w	r8, r3
 8012948:	fa17 f78b 	uxtah	r7, r7, fp
 801294c:	0c1b      	lsrs	r3, r3, #16
 801294e:	eba7 0808 	sub.w	r8, r7, r8
 8012952:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012956:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801295a:	fa1f f888 	uxth.w	r8, r8
 801295e:	141f      	asrs	r7, r3, #16
 8012960:	454d      	cmp	r5, r9
 8012962:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012966:	f84a 3b04 	str.w	r3, [sl], #4
 801296a:	d8e7      	bhi.n	801293c <__mdiff+0x7c>
 801296c:	1b2b      	subs	r3, r5, r4
 801296e:	3b15      	subs	r3, #21
 8012970:	f023 0303 	bic.w	r3, r3, #3
 8012974:	3304      	adds	r3, #4
 8012976:	3415      	adds	r4, #21
 8012978:	42a5      	cmp	r5, r4
 801297a:	bf38      	it	cc
 801297c:	2304      	movcc	r3, #4
 801297e:	4419      	add	r1, r3
 8012980:	4473      	add	r3, lr
 8012982:	469e      	mov	lr, r3
 8012984:	460d      	mov	r5, r1
 8012986:	4565      	cmp	r5, ip
 8012988:	d30e      	bcc.n	80129a8 <__mdiff+0xe8>
 801298a:	f10c 0203 	add.w	r2, ip, #3
 801298e:	1a52      	subs	r2, r2, r1
 8012990:	f022 0203 	bic.w	r2, r2, #3
 8012994:	3903      	subs	r1, #3
 8012996:	458c      	cmp	ip, r1
 8012998:	bf38      	it	cc
 801299a:	2200      	movcc	r2, #0
 801299c:	441a      	add	r2, r3
 801299e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80129a2:	b17b      	cbz	r3, 80129c4 <__mdiff+0x104>
 80129a4:	6106      	str	r6, [r0, #16]
 80129a6:	e7a5      	b.n	80128f4 <__mdiff+0x34>
 80129a8:	f855 8b04 	ldr.w	r8, [r5], #4
 80129ac:	fa17 f488 	uxtah	r4, r7, r8
 80129b0:	1422      	asrs	r2, r4, #16
 80129b2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80129b6:	b2a4      	uxth	r4, r4
 80129b8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80129bc:	f84e 4b04 	str.w	r4, [lr], #4
 80129c0:	1417      	asrs	r7, r2, #16
 80129c2:	e7e0      	b.n	8012986 <__mdiff+0xc6>
 80129c4:	3e01      	subs	r6, #1
 80129c6:	e7ea      	b.n	801299e <__mdiff+0xde>
 80129c8:	08013e87 	.word	0x08013e87
 80129cc:	08013e98 	.word	0x08013e98

080129d0 <__d2b>:
 80129d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80129d4:	4689      	mov	r9, r1
 80129d6:	2101      	movs	r1, #1
 80129d8:	ec57 6b10 	vmov	r6, r7, d0
 80129dc:	4690      	mov	r8, r2
 80129de:	f7ff fcd5 	bl	801238c <_Balloc>
 80129e2:	4604      	mov	r4, r0
 80129e4:	b930      	cbnz	r0, 80129f4 <__d2b+0x24>
 80129e6:	4602      	mov	r2, r0
 80129e8:	4b25      	ldr	r3, [pc, #148]	; (8012a80 <__d2b+0xb0>)
 80129ea:	4826      	ldr	r0, [pc, #152]	; (8012a84 <__d2b+0xb4>)
 80129ec:	f240 310a 	movw	r1, #778	; 0x30a
 80129f0:	f000 fa70 	bl	8012ed4 <__assert_func>
 80129f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80129f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80129fc:	bb35      	cbnz	r5, 8012a4c <__d2b+0x7c>
 80129fe:	2e00      	cmp	r6, #0
 8012a00:	9301      	str	r3, [sp, #4]
 8012a02:	d028      	beq.n	8012a56 <__d2b+0x86>
 8012a04:	4668      	mov	r0, sp
 8012a06:	9600      	str	r6, [sp, #0]
 8012a08:	f7ff fd8c 	bl	8012524 <__lo0bits>
 8012a0c:	9900      	ldr	r1, [sp, #0]
 8012a0e:	b300      	cbz	r0, 8012a52 <__d2b+0x82>
 8012a10:	9a01      	ldr	r2, [sp, #4]
 8012a12:	f1c0 0320 	rsb	r3, r0, #32
 8012a16:	fa02 f303 	lsl.w	r3, r2, r3
 8012a1a:	430b      	orrs	r3, r1
 8012a1c:	40c2      	lsrs	r2, r0
 8012a1e:	6163      	str	r3, [r4, #20]
 8012a20:	9201      	str	r2, [sp, #4]
 8012a22:	9b01      	ldr	r3, [sp, #4]
 8012a24:	61a3      	str	r3, [r4, #24]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	bf14      	ite	ne
 8012a2a:	2202      	movne	r2, #2
 8012a2c:	2201      	moveq	r2, #1
 8012a2e:	6122      	str	r2, [r4, #16]
 8012a30:	b1d5      	cbz	r5, 8012a68 <__d2b+0x98>
 8012a32:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012a36:	4405      	add	r5, r0
 8012a38:	f8c9 5000 	str.w	r5, [r9]
 8012a3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012a40:	f8c8 0000 	str.w	r0, [r8]
 8012a44:	4620      	mov	r0, r4
 8012a46:	b003      	add	sp, #12
 8012a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012a50:	e7d5      	b.n	80129fe <__d2b+0x2e>
 8012a52:	6161      	str	r1, [r4, #20]
 8012a54:	e7e5      	b.n	8012a22 <__d2b+0x52>
 8012a56:	a801      	add	r0, sp, #4
 8012a58:	f7ff fd64 	bl	8012524 <__lo0bits>
 8012a5c:	9b01      	ldr	r3, [sp, #4]
 8012a5e:	6163      	str	r3, [r4, #20]
 8012a60:	2201      	movs	r2, #1
 8012a62:	6122      	str	r2, [r4, #16]
 8012a64:	3020      	adds	r0, #32
 8012a66:	e7e3      	b.n	8012a30 <__d2b+0x60>
 8012a68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012a6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012a70:	f8c9 0000 	str.w	r0, [r9]
 8012a74:	6918      	ldr	r0, [r3, #16]
 8012a76:	f7ff fd35 	bl	80124e4 <__hi0bits>
 8012a7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012a7e:	e7df      	b.n	8012a40 <__d2b+0x70>
 8012a80:	08013e87 	.word	0x08013e87
 8012a84:	08013e98 	.word	0x08013e98

08012a88 <_calloc_r>:
 8012a88:	b513      	push	{r0, r1, r4, lr}
 8012a8a:	434a      	muls	r2, r1
 8012a8c:	4611      	mov	r1, r2
 8012a8e:	9201      	str	r2, [sp, #4]
 8012a90:	f000 f85a 	bl	8012b48 <_malloc_r>
 8012a94:	4604      	mov	r4, r0
 8012a96:	b118      	cbz	r0, 8012aa0 <_calloc_r+0x18>
 8012a98:	9a01      	ldr	r2, [sp, #4]
 8012a9a:	2100      	movs	r1, #0
 8012a9c:	f7fe f9f0 	bl	8010e80 <memset>
 8012aa0:	4620      	mov	r0, r4
 8012aa2:	b002      	add	sp, #8
 8012aa4:	bd10      	pop	{r4, pc}
	...

08012aa8 <_free_r>:
 8012aa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012aaa:	2900      	cmp	r1, #0
 8012aac:	d048      	beq.n	8012b40 <_free_r+0x98>
 8012aae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ab2:	9001      	str	r0, [sp, #4]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	f1a1 0404 	sub.w	r4, r1, #4
 8012aba:	bfb8      	it	lt
 8012abc:	18e4      	addlt	r4, r4, r3
 8012abe:	f000 fa65 	bl	8012f8c <__malloc_lock>
 8012ac2:	4a20      	ldr	r2, [pc, #128]	; (8012b44 <_free_r+0x9c>)
 8012ac4:	9801      	ldr	r0, [sp, #4]
 8012ac6:	6813      	ldr	r3, [r2, #0]
 8012ac8:	4615      	mov	r5, r2
 8012aca:	b933      	cbnz	r3, 8012ada <_free_r+0x32>
 8012acc:	6063      	str	r3, [r4, #4]
 8012ace:	6014      	str	r4, [r2, #0]
 8012ad0:	b003      	add	sp, #12
 8012ad2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012ad6:	f000 ba5f 	b.w	8012f98 <__malloc_unlock>
 8012ada:	42a3      	cmp	r3, r4
 8012adc:	d90b      	bls.n	8012af6 <_free_r+0x4e>
 8012ade:	6821      	ldr	r1, [r4, #0]
 8012ae0:	1862      	adds	r2, r4, r1
 8012ae2:	4293      	cmp	r3, r2
 8012ae4:	bf04      	itt	eq
 8012ae6:	681a      	ldreq	r2, [r3, #0]
 8012ae8:	685b      	ldreq	r3, [r3, #4]
 8012aea:	6063      	str	r3, [r4, #4]
 8012aec:	bf04      	itt	eq
 8012aee:	1852      	addeq	r2, r2, r1
 8012af0:	6022      	streq	r2, [r4, #0]
 8012af2:	602c      	str	r4, [r5, #0]
 8012af4:	e7ec      	b.n	8012ad0 <_free_r+0x28>
 8012af6:	461a      	mov	r2, r3
 8012af8:	685b      	ldr	r3, [r3, #4]
 8012afa:	b10b      	cbz	r3, 8012b00 <_free_r+0x58>
 8012afc:	42a3      	cmp	r3, r4
 8012afe:	d9fa      	bls.n	8012af6 <_free_r+0x4e>
 8012b00:	6811      	ldr	r1, [r2, #0]
 8012b02:	1855      	adds	r5, r2, r1
 8012b04:	42a5      	cmp	r5, r4
 8012b06:	d10b      	bne.n	8012b20 <_free_r+0x78>
 8012b08:	6824      	ldr	r4, [r4, #0]
 8012b0a:	4421      	add	r1, r4
 8012b0c:	1854      	adds	r4, r2, r1
 8012b0e:	42a3      	cmp	r3, r4
 8012b10:	6011      	str	r1, [r2, #0]
 8012b12:	d1dd      	bne.n	8012ad0 <_free_r+0x28>
 8012b14:	681c      	ldr	r4, [r3, #0]
 8012b16:	685b      	ldr	r3, [r3, #4]
 8012b18:	6053      	str	r3, [r2, #4]
 8012b1a:	4421      	add	r1, r4
 8012b1c:	6011      	str	r1, [r2, #0]
 8012b1e:	e7d7      	b.n	8012ad0 <_free_r+0x28>
 8012b20:	d902      	bls.n	8012b28 <_free_r+0x80>
 8012b22:	230c      	movs	r3, #12
 8012b24:	6003      	str	r3, [r0, #0]
 8012b26:	e7d3      	b.n	8012ad0 <_free_r+0x28>
 8012b28:	6825      	ldr	r5, [r4, #0]
 8012b2a:	1961      	adds	r1, r4, r5
 8012b2c:	428b      	cmp	r3, r1
 8012b2e:	bf04      	itt	eq
 8012b30:	6819      	ldreq	r1, [r3, #0]
 8012b32:	685b      	ldreq	r3, [r3, #4]
 8012b34:	6063      	str	r3, [r4, #4]
 8012b36:	bf04      	itt	eq
 8012b38:	1949      	addeq	r1, r1, r5
 8012b3a:	6021      	streq	r1, [r4, #0]
 8012b3c:	6054      	str	r4, [r2, #4]
 8012b3e:	e7c7      	b.n	8012ad0 <_free_r+0x28>
 8012b40:	b003      	add	sp, #12
 8012b42:	bd30      	pop	{r4, r5, pc}
 8012b44:	24004b30 	.word	0x24004b30

08012b48 <_malloc_r>:
 8012b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b4a:	1ccd      	adds	r5, r1, #3
 8012b4c:	f025 0503 	bic.w	r5, r5, #3
 8012b50:	3508      	adds	r5, #8
 8012b52:	2d0c      	cmp	r5, #12
 8012b54:	bf38      	it	cc
 8012b56:	250c      	movcc	r5, #12
 8012b58:	2d00      	cmp	r5, #0
 8012b5a:	4606      	mov	r6, r0
 8012b5c:	db01      	blt.n	8012b62 <_malloc_r+0x1a>
 8012b5e:	42a9      	cmp	r1, r5
 8012b60:	d903      	bls.n	8012b6a <_malloc_r+0x22>
 8012b62:	230c      	movs	r3, #12
 8012b64:	6033      	str	r3, [r6, #0]
 8012b66:	2000      	movs	r0, #0
 8012b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b6a:	f000 fa0f 	bl	8012f8c <__malloc_lock>
 8012b6e:	4921      	ldr	r1, [pc, #132]	; (8012bf4 <_malloc_r+0xac>)
 8012b70:	680a      	ldr	r2, [r1, #0]
 8012b72:	4614      	mov	r4, r2
 8012b74:	b99c      	cbnz	r4, 8012b9e <_malloc_r+0x56>
 8012b76:	4f20      	ldr	r7, [pc, #128]	; (8012bf8 <_malloc_r+0xb0>)
 8012b78:	683b      	ldr	r3, [r7, #0]
 8012b7a:	b923      	cbnz	r3, 8012b86 <_malloc_r+0x3e>
 8012b7c:	4621      	mov	r1, r4
 8012b7e:	4630      	mov	r0, r6
 8012b80:	f000 f998 	bl	8012eb4 <_sbrk_r>
 8012b84:	6038      	str	r0, [r7, #0]
 8012b86:	4629      	mov	r1, r5
 8012b88:	4630      	mov	r0, r6
 8012b8a:	f000 f993 	bl	8012eb4 <_sbrk_r>
 8012b8e:	1c43      	adds	r3, r0, #1
 8012b90:	d123      	bne.n	8012bda <_malloc_r+0x92>
 8012b92:	230c      	movs	r3, #12
 8012b94:	6033      	str	r3, [r6, #0]
 8012b96:	4630      	mov	r0, r6
 8012b98:	f000 f9fe 	bl	8012f98 <__malloc_unlock>
 8012b9c:	e7e3      	b.n	8012b66 <_malloc_r+0x1e>
 8012b9e:	6823      	ldr	r3, [r4, #0]
 8012ba0:	1b5b      	subs	r3, r3, r5
 8012ba2:	d417      	bmi.n	8012bd4 <_malloc_r+0x8c>
 8012ba4:	2b0b      	cmp	r3, #11
 8012ba6:	d903      	bls.n	8012bb0 <_malloc_r+0x68>
 8012ba8:	6023      	str	r3, [r4, #0]
 8012baa:	441c      	add	r4, r3
 8012bac:	6025      	str	r5, [r4, #0]
 8012bae:	e004      	b.n	8012bba <_malloc_r+0x72>
 8012bb0:	6863      	ldr	r3, [r4, #4]
 8012bb2:	42a2      	cmp	r2, r4
 8012bb4:	bf0c      	ite	eq
 8012bb6:	600b      	streq	r3, [r1, #0]
 8012bb8:	6053      	strne	r3, [r2, #4]
 8012bba:	4630      	mov	r0, r6
 8012bbc:	f000 f9ec 	bl	8012f98 <__malloc_unlock>
 8012bc0:	f104 000b 	add.w	r0, r4, #11
 8012bc4:	1d23      	adds	r3, r4, #4
 8012bc6:	f020 0007 	bic.w	r0, r0, #7
 8012bca:	1ac2      	subs	r2, r0, r3
 8012bcc:	d0cc      	beq.n	8012b68 <_malloc_r+0x20>
 8012bce:	1a1b      	subs	r3, r3, r0
 8012bd0:	50a3      	str	r3, [r4, r2]
 8012bd2:	e7c9      	b.n	8012b68 <_malloc_r+0x20>
 8012bd4:	4622      	mov	r2, r4
 8012bd6:	6864      	ldr	r4, [r4, #4]
 8012bd8:	e7cc      	b.n	8012b74 <_malloc_r+0x2c>
 8012bda:	1cc4      	adds	r4, r0, #3
 8012bdc:	f024 0403 	bic.w	r4, r4, #3
 8012be0:	42a0      	cmp	r0, r4
 8012be2:	d0e3      	beq.n	8012bac <_malloc_r+0x64>
 8012be4:	1a21      	subs	r1, r4, r0
 8012be6:	4630      	mov	r0, r6
 8012be8:	f000 f964 	bl	8012eb4 <_sbrk_r>
 8012bec:	3001      	adds	r0, #1
 8012bee:	d1dd      	bne.n	8012bac <_malloc_r+0x64>
 8012bf0:	e7cf      	b.n	8012b92 <_malloc_r+0x4a>
 8012bf2:	bf00      	nop
 8012bf4:	24004b30 	.word	0x24004b30
 8012bf8:	24004b34 	.word	0x24004b34

08012bfc <__ssputs_r>:
 8012bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c00:	688e      	ldr	r6, [r1, #8]
 8012c02:	429e      	cmp	r6, r3
 8012c04:	4682      	mov	sl, r0
 8012c06:	460c      	mov	r4, r1
 8012c08:	4690      	mov	r8, r2
 8012c0a:	461f      	mov	r7, r3
 8012c0c:	d838      	bhi.n	8012c80 <__ssputs_r+0x84>
 8012c0e:	898a      	ldrh	r2, [r1, #12]
 8012c10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012c14:	d032      	beq.n	8012c7c <__ssputs_r+0x80>
 8012c16:	6825      	ldr	r5, [r4, #0]
 8012c18:	6909      	ldr	r1, [r1, #16]
 8012c1a:	eba5 0901 	sub.w	r9, r5, r1
 8012c1e:	6965      	ldr	r5, [r4, #20]
 8012c20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012c24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012c28:	3301      	adds	r3, #1
 8012c2a:	444b      	add	r3, r9
 8012c2c:	106d      	asrs	r5, r5, #1
 8012c2e:	429d      	cmp	r5, r3
 8012c30:	bf38      	it	cc
 8012c32:	461d      	movcc	r5, r3
 8012c34:	0553      	lsls	r3, r2, #21
 8012c36:	d531      	bpl.n	8012c9c <__ssputs_r+0xa0>
 8012c38:	4629      	mov	r1, r5
 8012c3a:	f7ff ff85 	bl	8012b48 <_malloc_r>
 8012c3e:	4606      	mov	r6, r0
 8012c40:	b950      	cbnz	r0, 8012c58 <__ssputs_r+0x5c>
 8012c42:	230c      	movs	r3, #12
 8012c44:	f8ca 3000 	str.w	r3, [sl]
 8012c48:	89a3      	ldrh	r3, [r4, #12]
 8012c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c4e:	81a3      	strh	r3, [r4, #12]
 8012c50:	f04f 30ff 	mov.w	r0, #4294967295
 8012c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c58:	6921      	ldr	r1, [r4, #16]
 8012c5a:	464a      	mov	r2, r9
 8012c5c:	f7fe f902 	bl	8010e64 <memcpy>
 8012c60:	89a3      	ldrh	r3, [r4, #12]
 8012c62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c6a:	81a3      	strh	r3, [r4, #12]
 8012c6c:	6126      	str	r6, [r4, #16]
 8012c6e:	6165      	str	r5, [r4, #20]
 8012c70:	444e      	add	r6, r9
 8012c72:	eba5 0509 	sub.w	r5, r5, r9
 8012c76:	6026      	str	r6, [r4, #0]
 8012c78:	60a5      	str	r5, [r4, #8]
 8012c7a:	463e      	mov	r6, r7
 8012c7c:	42be      	cmp	r6, r7
 8012c7e:	d900      	bls.n	8012c82 <__ssputs_r+0x86>
 8012c80:	463e      	mov	r6, r7
 8012c82:	4632      	mov	r2, r6
 8012c84:	6820      	ldr	r0, [r4, #0]
 8012c86:	4641      	mov	r1, r8
 8012c88:	f000 f966 	bl	8012f58 <memmove>
 8012c8c:	68a3      	ldr	r3, [r4, #8]
 8012c8e:	6822      	ldr	r2, [r4, #0]
 8012c90:	1b9b      	subs	r3, r3, r6
 8012c92:	4432      	add	r2, r6
 8012c94:	60a3      	str	r3, [r4, #8]
 8012c96:	6022      	str	r2, [r4, #0]
 8012c98:	2000      	movs	r0, #0
 8012c9a:	e7db      	b.n	8012c54 <__ssputs_r+0x58>
 8012c9c:	462a      	mov	r2, r5
 8012c9e:	f000 f981 	bl	8012fa4 <_realloc_r>
 8012ca2:	4606      	mov	r6, r0
 8012ca4:	2800      	cmp	r0, #0
 8012ca6:	d1e1      	bne.n	8012c6c <__ssputs_r+0x70>
 8012ca8:	6921      	ldr	r1, [r4, #16]
 8012caa:	4650      	mov	r0, sl
 8012cac:	f7ff fefc 	bl	8012aa8 <_free_r>
 8012cb0:	e7c7      	b.n	8012c42 <__ssputs_r+0x46>
	...

08012cb4 <_svfiprintf_r>:
 8012cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cb8:	4698      	mov	r8, r3
 8012cba:	898b      	ldrh	r3, [r1, #12]
 8012cbc:	061b      	lsls	r3, r3, #24
 8012cbe:	b09d      	sub	sp, #116	; 0x74
 8012cc0:	4607      	mov	r7, r0
 8012cc2:	460d      	mov	r5, r1
 8012cc4:	4614      	mov	r4, r2
 8012cc6:	d50e      	bpl.n	8012ce6 <_svfiprintf_r+0x32>
 8012cc8:	690b      	ldr	r3, [r1, #16]
 8012cca:	b963      	cbnz	r3, 8012ce6 <_svfiprintf_r+0x32>
 8012ccc:	2140      	movs	r1, #64	; 0x40
 8012cce:	f7ff ff3b 	bl	8012b48 <_malloc_r>
 8012cd2:	6028      	str	r0, [r5, #0]
 8012cd4:	6128      	str	r0, [r5, #16]
 8012cd6:	b920      	cbnz	r0, 8012ce2 <_svfiprintf_r+0x2e>
 8012cd8:	230c      	movs	r3, #12
 8012cda:	603b      	str	r3, [r7, #0]
 8012cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8012ce0:	e0d1      	b.n	8012e86 <_svfiprintf_r+0x1d2>
 8012ce2:	2340      	movs	r3, #64	; 0x40
 8012ce4:	616b      	str	r3, [r5, #20]
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	9309      	str	r3, [sp, #36]	; 0x24
 8012cea:	2320      	movs	r3, #32
 8012cec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012cf0:	f8cd 800c 	str.w	r8, [sp, #12]
 8012cf4:	2330      	movs	r3, #48	; 0x30
 8012cf6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012ea0 <_svfiprintf_r+0x1ec>
 8012cfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012cfe:	f04f 0901 	mov.w	r9, #1
 8012d02:	4623      	mov	r3, r4
 8012d04:	469a      	mov	sl, r3
 8012d06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d0a:	b10a      	cbz	r2, 8012d10 <_svfiprintf_r+0x5c>
 8012d0c:	2a25      	cmp	r2, #37	; 0x25
 8012d0e:	d1f9      	bne.n	8012d04 <_svfiprintf_r+0x50>
 8012d10:	ebba 0b04 	subs.w	fp, sl, r4
 8012d14:	d00b      	beq.n	8012d2e <_svfiprintf_r+0x7a>
 8012d16:	465b      	mov	r3, fp
 8012d18:	4622      	mov	r2, r4
 8012d1a:	4629      	mov	r1, r5
 8012d1c:	4638      	mov	r0, r7
 8012d1e:	f7ff ff6d 	bl	8012bfc <__ssputs_r>
 8012d22:	3001      	adds	r0, #1
 8012d24:	f000 80aa 	beq.w	8012e7c <_svfiprintf_r+0x1c8>
 8012d28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012d2a:	445a      	add	r2, fp
 8012d2c:	9209      	str	r2, [sp, #36]	; 0x24
 8012d2e:	f89a 3000 	ldrb.w	r3, [sl]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	f000 80a2 	beq.w	8012e7c <_svfiprintf_r+0x1c8>
 8012d38:	2300      	movs	r3, #0
 8012d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8012d3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012d42:	f10a 0a01 	add.w	sl, sl, #1
 8012d46:	9304      	str	r3, [sp, #16]
 8012d48:	9307      	str	r3, [sp, #28]
 8012d4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012d4e:	931a      	str	r3, [sp, #104]	; 0x68
 8012d50:	4654      	mov	r4, sl
 8012d52:	2205      	movs	r2, #5
 8012d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d58:	4851      	ldr	r0, [pc, #324]	; (8012ea0 <_svfiprintf_r+0x1ec>)
 8012d5a:	f7ed fac9 	bl	80002f0 <memchr>
 8012d5e:	9a04      	ldr	r2, [sp, #16]
 8012d60:	b9d8      	cbnz	r0, 8012d9a <_svfiprintf_r+0xe6>
 8012d62:	06d0      	lsls	r0, r2, #27
 8012d64:	bf44      	itt	mi
 8012d66:	2320      	movmi	r3, #32
 8012d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d6c:	0711      	lsls	r1, r2, #28
 8012d6e:	bf44      	itt	mi
 8012d70:	232b      	movmi	r3, #43	; 0x2b
 8012d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d76:	f89a 3000 	ldrb.w	r3, [sl]
 8012d7a:	2b2a      	cmp	r3, #42	; 0x2a
 8012d7c:	d015      	beq.n	8012daa <_svfiprintf_r+0xf6>
 8012d7e:	9a07      	ldr	r2, [sp, #28]
 8012d80:	4654      	mov	r4, sl
 8012d82:	2000      	movs	r0, #0
 8012d84:	f04f 0c0a 	mov.w	ip, #10
 8012d88:	4621      	mov	r1, r4
 8012d8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d8e:	3b30      	subs	r3, #48	; 0x30
 8012d90:	2b09      	cmp	r3, #9
 8012d92:	d94e      	bls.n	8012e32 <_svfiprintf_r+0x17e>
 8012d94:	b1b0      	cbz	r0, 8012dc4 <_svfiprintf_r+0x110>
 8012d96:	9207      	str	r2, [sp, #28]
 8012d98:	e014      	b.n	8012dc4 <_svfiprintf_r+0x110>
 8012d9a:	eba0 0308 	sub.w	r3, r0, r8
 8012d9e:	fa09 f303 	lsl.w	r3, r9, r3
 8012da2:	4313      	orrs	r3, r2
 8012da4:	9304      	str	r3, [sp, #16]
 8012da6:	46a2      	mov	sl, r4
 8012da8:	e7d2      	b.n	8012d50 <_svfiprintf_r+0x9c>
 8012daa:	9b03      	ldr	r3, [sp, #12]
 8012dac:	1d19      	adds	r1, r3, #4
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	9103      	str	r1, [sp, #12]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	bfbb      	ittet	lt
 8012db6:	425b      	neglt	r3, r3
 8012db8:	f042 0202 	orrlt.w	r2, r2, #2
 8012dbc:	9307      	strge	r3, [sp, #28]
 8012dbe:	9307      	strlt	r3, [sp, #28]
 8012dc0:	bfb8      	it	lt
 8012dc2:	9204      	strlt	r2, [sp, #16]
 8012dc4:	7823      	ldrb	r3, [r4, #0]
 8012dc6:	2b2e      	cmp	r3, #46	; 0x2e
 8012dc8:	d10c      	bne.n	8012de4 <_svfiprintf_r+0x130>
 8012dca:	7863      	ldrb	r3, [r4, #1]
 8012dcc:	2b2a      	cmp	r3, #42	; 0x2a
 8012dce:	d135      	bne.n	8012e3c <_svfiprintf_r+0x188>
 8012dd0:	9b03      	ldr	r3, [sp, #12]
 8012dd2:	1d1a      	adds	r2, r3, #4
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	9203      	str	r2, [sp, #12]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	bfb8      	it	lt
 8012ddc:	f04f 33ff 	movlt.w	r3, #4294967295
 8012de0:	3402      	adds	r4, #2
 8012de2:	9305      	str	r3, [sp, #20]
 8012de4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012eb0 <_svfiprintf_r+0x1fc>
 8012de8:	7821      	ldrb	r1, [r4, #0]
 8012dea:	2203      	movs	r2, #3
 8012dec:	4650      	mov	r0, sl
 8012dee:	f7ed fa7f 	bl	80002f0 <memchr>
 8012df2:	b140      	cbz	r0, 8012e06 <_svfiprintf_r+0x152>
 8012df4:	2340      	movs	r3, #64	; 0x40
 8012df6:	eba0 000a 	sub.w	r0, r0, sl
 8012dfa:	fa03 f000 	lsl.w	r0, r3, r0
 8012dfe:	9b04      	ldr	r3, [sp, #16]
 8012e00:	4303      	orrs	r3, r0
 8012e02:	3401      	adds	r4, #1
 8012e04:	9304      	str	r3, [sp, #16]
 8012e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e0a:	4826      	ldr	r0, [pc, #152]	; (8012ea4 <_svfiprintf_r+0x1f0>)
 8012e0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012e10:	2206      	movs	r2, #6
 8012e12:	f7ed fa6d 	bl	80002f0 <memchr>
 8012e16:	2800      	cmp	r0, #0
 8012e18:	d038      	beq.n	8012e8c <_svfiprintf_r+0x1d8>
 8012e1a:	4b23      	ldr	r3, [pc, #140]	; (8012ea8 <_svfiprintf_r+0x1f4>)
 8012e1c:	bb1b      	cbnz	r3, 8012e66 <_svfiprintf_r+0x1b2>
 8012e1e:	9b03      	ldr	r3, [sp, #12]
 8012e20:	3307      	adds	r3, #7
 8012e22:	f023 0307 	bic.w	r3, r3, #7
 8012e26:	3308      	adds	r3, #8
 8012e28:	9303      	str	r3, [sp, #12]
 8012e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e2c:	4433      	add	r3, r6
 8012e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8012e30:	e767      	b.n	8012d02 <_svfiprintf_r+0x4e>
 8012e32:	fb0c 3202 	mla	r2, ip, r2, r3
 8012e36:	460c      	mov	r4, r1
 8012e38:	2001      	movs	r0, #1
 8012e3a:	e7a5      	b.n	8012d88 <_svfiprintf_r+0xd4>
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	3401      	adds	r4, #1
 8012e40:	9305      	str	r3, [sp, #20]
 8012e42:	4619      	mov	r1, r3
 8012e44:	f04f 0c0a 	mov.w	ip, #10
 8012e48:	4620      	mov	r0, r4
 8012e4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e4e:	3a30      	subs	r2, #48	; 0x30
 8012e50:	2a09      	cmp	r2, #9
 8012e52:	d903      	bls.n	8012e5c <_svfiprintf_r+0x1a8>
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d0c5      	beq.n	8012de4 <_svfiprintf_r+0x130>
 8012e58:	9105      	str	r1, [sp, #20]
 8012e5a:	e7c3      	b.n	8012de4 <_svfiprintf_r+0x130>
 8012e5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012e60:	4604      	mov	r4, r0
 8012e62:	2301      	movs	r3, #1
 8012e64:	e7f0      	b.n	8012e48 <_svfiprintf_r+0x194>
 8012e66:	ab03      	add	r3, sp, #12
 8012e68:	9300      	str	r3, [sp, #0]
 8012e6a:	462a      	mov	r2, r5
 8012e6c:	4b0f      	ldr	r3, [pc, #60]	; (8012eac <_svfiprintf_r+0x1f8>)
 8012e6e:	a904      	add	r1, sp, #16
 8012e70:	4638      	mov	r0, r7
 8012e72:	f7fe f89d 	bl	8010fb0 <_printf_float>
 8012e76:	1c42      	adds	r2, r0, #1
 8012e78:	4606      	mov	r6, r0
 8012e7a:	d1d6      	bne.n	8012e2a <_svfiprintf_r+0x176>
 8012e7c:	89ab      	ldrh	r3, [r5, #12]
 8012e7e:	065b      	lsls	r3, r3, #25
 8012e80:	f53f af2c 	bmi.w	8012cdc <_svfiprintf_r+0x28>
 8012e84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012e86:	b01d      	add	sp, #116	; 0x74
 8012e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e8c:	ab03      	add	r3, sp, #12
 8012e8e:	9300      	str	r3, [sp, #0]
 8012e90:	462a      	mov	r2, r5
 8012e92:	4b06      	ldr	r3, [pc, #24]	; (8012eac <_svfiprintf_r+0x1f8>)
 8012e94:	a904      	add	r1, sp, #16
 8012e96:	4638      	mov	r0, r7
 8012e98:	f7fe fb16 	bl	80114c8 <_printf_i>
 8012e9c:	e7eb      	b.n	8012e76 <_svfiprintf_r+0x1c2>
 8012e9e:	bf00      	nop
 8012ea0:	08013ff4 	.word	0x08013ff4
 8012ea4:	08013ffe 	.word	0x08013ffe
 8012ea8:	08010fb1 	.word	0x08010fb1
 8012eac:	08012bfd 	.word	0x08012bfd
 8012eb0:	08013ffa 	.word	0x08013ffa

08012eb4 <_sbrk_r>:
 8012eb4:	b538      	push	{r3, r4, r5, lr}
 8012eb6:	4d06      	ldr	r5, [pc, #24]	; (8012ed0 <_sbrk_r+0x1c>)
 8012eb8:	2300      	movs	r3, #0
 8012eba:	4604      	mov	r4, r0
 8012ebc:	4608      	mov	r0, r1
 8012ebe:	602b      	str	r3, [r5, #0]
 8012ec0:	f7ef fb5e 	bl	8002580 <_sbrk>
 8012ec4:	1c43      	adds	r3, r0, #1
 8012ec6:	d102      	bne.n	8012ece <_sbrk_r+0x1a>
 8012ec8:	682b      	ldr	r3, [r5, #0]
 8012eca:	b103      	cbz	r3, 8012ece <_sbrk_r+0x1a>
 8012ecc:	6023      	str	r3, [r4, #0]
 8012ece:	bd38      	pop	{r3, r4, r5, pc}
 8012ed0:	240053c4 	.word	0x240053c4

08012ed4 <__assert_func>:
 8012ed4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012ed6:	4614      	mov	r4, r2
 8012ed8:	461a      	mov	r2, r3
 8012eda:	4b09      	ldr	r3, [pc, #36]	; (8012f00 <__assert_func+0x2c>)
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	4605      	mov	r5, r0
 8012ee0:	68d8      	ldr	r0, [r3, #12]
 8012ee2:	b14c      	cbz	r4, 8012ef8 <__assert_func+0x24>
 8012ee4:	4b07      	ldr	r3, [pc, #28]	; (8012f04 <__assert_func+0x30>)
 8012ee6:	9100      	str	r1, [sp, #0]
 8012ee8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012eec:	4906      	ldr	r1, [pc, #24]	; (8012f08 <__assert_func+0x34>)
 8012eee:	462b      	mov	r3, r5
 8012ef0:	f000 f80e 	bl	8012f10 <fiprintf>
 8012ef4:	f000 faa4 	bl	8013440 <abort>
 8012ef8:	4b04      	ldr	r3, [pc, #16]	; (8012f0c <__assert_func+0x38>)
 8012efa:	461c      	mov	r4, r3
 8012efc:	e7f3      	b.n	8012ee6 <__assert_func+0x12>
 8012efe:	bf00      	nop
 8012f00:	24000024 	.word	0x24000024
 8012f04:	08014005 	.word	0x08014005
 8012f08:	08014012 	.word	0x08014012
 8012f0c:	08014040 	.word	0x08014040

08012f10 <fiprintf>:
 8012f10:	b40e      	push	{r1, r2, r3}
 8012f12:	b503      	push	{r0, r1, lr}
 8012f14:	4601      	mov	r1, r0
 8012f16:	ab03      	add	r3, sp, #12
 8012f18:	4805      	ldr	r0, [pc, #20]	; (8012f30 <fiprintf+0x20>)
 8012f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f1e:	6800      	ldr	r0, [r0, #0]
 8012f20:	9301      	str	r3, [sp, #4]
 8012f22:	f000 f88f 	bl	8013044 <_vfiprintf_r>
 8012f26:	b002      	add	sp, #8
 8012f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f2c:	b003      	add	sp, #12
 8012f2e:	4770      	bx	lr
 8012f30:	24000024 	.word	0x24000024

08012f34 <__ascii_mbtowc>:
 8012f34:	b082      	sub	sp, #8
 8012f36:	b901      	cbnz	r1, 8012f3a <__ascii_mbtowc+0x6>
 8012f38:	a901      	add	r1, sp, #4
 8012f3a:	b142      	cbz	r2, 8012f4e <__ascii_mbtowc+0x1a>
 8012f3c:	b14b      	cbz	r3, 8012f52 <__ascii_mbtowc+0x1e>
 8012f3e:	7813      	ldrb	r3, [r2, #0]
 8012f40:	600b      	str	r3, [r1, #0]
 8012f42:	7812      	ldrb	r2, [r2, #0]
 8012f44:	1e10      	subs	r0, r2, #0
 8012f46:	bf18      	it	ne
 8012f48:	2001      	movne	r0, #1
 8012f4a:	b002      	add	sp, #8
 8012f4c:	4770      	bx	lr
 8012f4e:	4610      	mov	r0, r2
 8012f50:	e7fb      	b.n	8012f4a <__ascii_mbtowc+0x16>
 8012f52:	f06f 0001 	mvn.w	r0, #1
 8012f56:	e7f8      	b.n	8012f4a <__ascii_mbtowc+0x16>

08012f58 <memmove>:
 8012f58:	4288      	cmp	r0, r1
 8012f5a:	b510      	push	{r4, lr}
 8012f5c:	eb01 0402 	add.w	r4, r1, r2
 8012f60:	d902      	bls.n	8012f68 <memmove+0x10>
 8012f62:	4284      	cmp	r4, r0
 8012f64:	4623      	mov	r3, r4
 8012f66:	d807      	bhi.n	8012f78 <memmove+0x20>
 8012f68:	1e43      	subs	r3, r0, #1
 8012f6a:	42a1      	cmp	r1, r4
 8012f6c:	d008      	beq.n	8012f80 <memmove+0x28>
 8012f6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012f72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012f76:	e7f8      	b.n	8012f6a <memmove+0x12>
 8012f78:	4402      	add	r2, r0
 8012f7a:	4601      	mov	r1, r0
 8012f7c:	428a      	cmp	r2, r1
 8012f7e:	d100      	bne.n	8012f82 <memmove+0x2a>
 8012f80:	bd10      	pop	{r4, pc}
 8012f82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012f86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012f8a:	e7f7      	b.n	8012f7c <memmove+0x24>

08012f8c <__malloc_lock>:
 8012f8c:	4801      	ldr	r0, [pc, #4]	; (8012f94 <__malloc_lock+0x8>)
 8012f8e:	f000 bc17 	b.w	80137c0 <__retarget_lock_acquire_recursive>
 8012f92:	bf00      	nop
 8012f94:	240053cc 	.word	0x240053cc

08012f98 <__malloc_unlock>:
 8012f98:	4801      	ldr	r0, [pc, #4]	; (8012fa0 <__malloc_unlock+0x8>)
 8012f9a:	f000 bc12 	b.w	80137c2 <__retarget_lock_release_recursive>
 8012f9e:	bf00      	nop
 8012fa0:	240053cc 	.word	0x240053cc

08012fa4 <_realloc_r>:
 8012fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fa6:	4607      	mov	r7, r0
 8012fa8:	4614      	mov	r4, r2
 8012faa:	460e      	mov	r6, r1
 8012fac:	b921      	cbnz	r1, 8012fb8 <_realloc_r+0x14>
 8012fae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012fb2:	4611      	mov	r1, r2
 8012fb4:	f7ff bdc8 	b.w	8012b48 <_malloc_r>
 8012fb8:	b922      	cbnz	r2, 8012fc4 <_realloc_r+0x20>
 8012fba:	f7ff fd75 	bl	8012aa8 <_free_r>
 8012fbe:	4625      	mov	r5, r4
 8012fc0:	4628      	mov	r0, r5
 8012fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fc4:	f000 fc62 	bl	801388c <_malloc_usable_size_r>
 8012fc8:	42a0      	cmp	r0, r4
 8012fca:	d20f      	bcs.n	8012fec <_realloc_r+0x48>
 8012fcc:	4621      	mov	r1, r4
 8012fce:	4638      	mov	r0, r7
 8012fd0:	f7ff fdba 	bl	8012b48 <_malloc_r>
 8012fd4:	4605      	mov	r5, r0
 8012fd6:	2800      	cmp	r0, #0
 8012fd8:	d0f2      	beq.n	8012fc0 <_realloc_r+0x1c>
 8012fda:	4631      	mov	r1, r6
 8012fdc:	4622      	mov	r2, r4
 8012fde:	f7fd ff41 	bl	8010e64 <memcpy>
 8012fe2:	4631      	mov	r1, r6
 8012fe4:	4638      	mov	r0, r7
 8012fe6:	f7ff fd5f 	bl	8012aa8 <_free_r>
 8012fea:	e7e9      	b.n	8012fc0 <_realloc_r+0x1c>
 8012fec:	4635      	mov	r5, r6
 8012fee:	e7e7      	b.n	8012fc0 <_realloc_r+0x1c>

08012ff0 <__sfputc_r>:
 8012ff0:	6893      	ldr	r3, [r2, #8]
 8012ff2:	3b01      	subs	r3, #1
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	b410      	push	{r4}
 8012ff8:	6093      	str	r3, [r2, #8]
 8012ffa:	da08      	bge.n	801300e <__sfputc_r+0x1e>
 8012ffc:	6994      	ldr	r4, [r2, #24]
 8012ffe:	42a3      	cmp	r3, r4
 8013000:	db01      	blt.n	8013006 <__sfputc_r+0x16>
 8013002:	290a      	cmp	r1, #10
 8013004:	d103      	bne.n	801300e <__sfputc_r+0x1e>
 8013006:	f85d 4b04 	ldr.w	r4, [sp], #4
 801300a:	f000 b94b 	b.w	80132a4 <__swbuf_r>
 801300e:	6813      	ldr	r3, [r2, #0]
 8013010:	1c58      	adds	r0, r3, #1
 8013012:	6010      	str	r0, [r2, #0]
 8013014:	7019      	strb	r1, [r3, #0]
 8013016:	4608      	mov	r0, r1
 8013018:	f85d 4b04 	ldr.w	r4, [sp], #4
 801301c:	4770      	bx	lr

0801301e <__sfputs_r>:
 801301e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013020:	4606      	mov	r6, r0
 8013022:	460f      	mov	r7, r1
 8013024:	4614      	mov	r4, r2
 8013026:	18d5      	adds	r5, r2, r3
 8013028:	42ac      	cmp	r4, r5
 801302a:	d101      	bne.n	8013030 <__sfputs_r+0x12>
 801302c:	2000      	movs	r0, #0
 801302e:	e007      	b.n	8013040 <__sfputs_r+0x22>
 8013030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013034:	463a      	mov	r2, r7
 8013036:	4630      	mov	r0, r6
 8013038:	f7ff ffda 	bl	8012ff0 <__sfputc_r>
 801303c:	1c43      	adds	r3, r0, #1
 801303e:	d1f3      	bne.n	8013028 <__sfputs_r+0xa>
 8013040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013044 <_vfiprintf_r>:
 8013044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013048:	460d      	mov	r5, r1
 801304a:	b09d      	sub	sp, #116	; 0x74
 801304c:	4614      	mov	r4, r2
 801304e:	4698      	mov	r8, r3
 8013050:	4606      	mov	r6, r0
 8013052:	b118      	cbz	r0, 801305c <_vfiprintf_r+0x18>
 8013054:	6983      	ldr	r3, [r0, #24]
 8013056:	b90b      	cbnz	r3, 801305c <_vfiprintf_r+0x18>
 8013058:	f000 fb14 	bl	8013684 <__sinit>
 801305c:	4b89      	ldr	r3, [pc, #548]	; (8013284 <_vfiprintf_r+0x240>)
 801305e:	429d      	cmp	r5, r3
 8013060:	d11b      	bne.n	801309a <_vfiprintf_r+0x56>
 8013062:	6875      	ldr	r5, [r6, #4]
 8013064:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013066:	07d9      	lsls	r1, r3, #31
 8013068:	d405      	bmi.n	8013076 <_vfiprintf_r+0x32>
 801306a:	89ab      	ldrh	r3, [r5, #12]
 801306c:	059a      	lsls	r2, r3, #22
 801306e:	d402      	bmi.n	8013076 <_vfiprintf_r+0x32>
 8013070:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013072:	f000 fba5 	bl	80137c0 <__retarget_lock_acquire_recursive>
 8013076:	89ab      	ldrh	r3, [r5, #12]
 8013078:	071b      	lsls	r3, r3, #28
 801307a:	d501      	bpl.n	8013080 <_vfiprintf_r+0x3c>
 801307c:	692b      	ldr	r3, [r5, #16]
 801307e:	b9eb      	cbnz	r3, 80130bc <_vfiprintf_r+0x78>
 8013080:	4629      	mov	r1, r5
 8013082:	4630      	mov	r0, r6
 8013084:	f000 f96e 	bl	8013364 <__swsetup_r>
 8013088:	b1c0      	cbz	r0, 80130bc <_vfiprintf_r+0x78>
 801308a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801308c:	07dc      	lsls	r4, r3, #31
 801308e:	d50e      	bpl.n	80130ae <_vfiprintf_r+0x6a>
 8013090:	f04f 30ff 	mov.w	r0, #4294967295
 8013094:	b01d      	add	sp, #116	; 0x74
 8013096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801309a:	4b7b      	ldr	r3, [pc, #492]	; (8013288 <_vfiprintf_r+0x244>)
 801309c:	429d      	cmp	r5, r3
 801309e:	d101      	bne.n	80130a4 <_vfiprintf_r+0x60>
 80130a0:	68b5      	ldr	r5, [r6, #8]
 80130a2:	e7df      	b.n	8013064 <_vfiprintf_r+0x20>
 80130a4:	4b79      	ldr	r3, [pc, #484]	; (801328c <_vfiprintf_r+0x248>)
 80130a6:	429d      	cmp	r5, r3
 80130a8:	bf08      	it	eq
 80130aa:	68f5      	ldreq	r5, [r6, #12]
 80130ac:	e7da      	b.n	8013064 <_vfiprintf_r+0x20>
 80130ae:	89ab      	ldrh	r3, [r5, #12]
 80130b0:	0598      	lsls	r0, r3, #22
 80130b2:	d4ed      	bmi.n	8013090 <_vfiprintf_r+0x4c>
 80130b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80130b6:	f000 fb84 	bl	80137c2 <__retarget_lock_release_recursive>
 80130ba:	e7e9      	b.n	8013090 <_vfiprintf_r+0x4c>
 80130bc:	2300      	movs	r3, #0
 80130be:	9309      	str	r3, [sp, #36]	; 0x24
 80130c0:	2320      	movs	r3, #32
 80130c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80130c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80130ca:	2330      	movs	r3, #48	; 0x30
 80130cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013290 <_vfiprintf_r+0x24c>
 80130d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80130d4:	f04f 0901 	mov.w	r9, #1
 80130d8:	4623      	mov	r3, r4
 80130da:	469a      	mov	sl, r3
 80130dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80130e0:	b10a      	cbz	r2, 80130e6 <_vfiprintf_r+0xa2>
 80130e2:	2a25      	cmp	r2, #37	; 0x25
 80130e4:	d1f9      	bne.n	80130da <_vfiprintf_r+0x96>
 80130e6:	ebba 0b04 	subs.w	fp, sl, r4
 80130ea:	d00b      	beq.n	8013104 <_vfiprintf_r+0xc0>
 80130ec:	465b      	mov	r3, fp
 80130ee:	4622      	mov	r2, r4
 80130f0:	4629      	mov	r1, r5
 80130f2:	4630      	mov	r0, r6
 80130f4:	f7ff ff93 	bl	801301e <__sfputs_r>
 80130f8:	3001      	adds	r0, #1
 80130fa:	f000 80aa 	beq.w	8013252 <_vfiprintf_r+0x20e>
 80130fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013100:	445a      	add	r2, fp
 8013102:	9209      	str	r2, [sp, #36]	; 0x24
 8013104:	f89a 3000 	ldrb.w	r3, [sl]
 8013108:	2b00      	cmp	r3, #0
 801310a:	f000 80a2 	beq.w	8013252 <_vfiprintf_r+0x20e>
 801310e:	2300      	movs	r3, #0
 8013110:	f04f 32ff 	mov.w	r2, #4294967295
 8013114:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013118:	f10a 0a01 	add.w	sl, sl, #1
 801311c:	9304      	str	r3, [sp, #16]
 801311e:	9307      	str	r3, [sp, #28]
 8013120:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013124:	931a      	str	r3, [sp, #104]	; 0x68
 8013126:	4654      	mov	r4, sl
 8013128:	2205      	movs	r2, #5
 801312a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801312e:	4858      	ldr	r0, [pc, #352]	; (8013290 <_vfiprintf_r+0x24c>)
 8013130:	f7ed f8de 	bl	80002f0 <memchr>
 8013134:	9a04      	ldr	r2, [sp, #16]
 8013136:	b9d8      	cbnz	r0, 8013170 <_vfiprintf_r+0x12c>
 8013138:	06d1      	lsls	r1, r2, #27
 801313a:	bf44      	itt	mi
 801313c:	2320      	movmi	r3, #32
 801313e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013142:	0713      	lsls	r3, r2, #28
 8013144:	bf44      	itt	mi
 8013146:	232b      	movmi	r3, #43	; 0x2b
 8013148:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801314c:	f89a 3000 	ldrb.w	r3, [sl]
 8013150:	2b2a      	cmp	r3, #42	; 0x2a
 8013152:	d015      	beq.n	8013180 <_vfiprintf_r+0x13c>
 8013154:	9a07      	ldr	r2, [sp, #28]
 8013156:	4654      	mov	r4, sl
 8013158:	2000      	movs	r0, #0
 801315a:	f04f 0c0a 	mov.w	ip, #10
 801315e:	4621      	mov	r1, r4
 8013160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013164:	3b30      	subs	r3, #48	; 0x30
 8013166:	2b09      	cmp	r3, #9
 8013168:	d94e      	bls.n	8013208 <_vfiprintf_r+0x1c4>
 801316a:	b1b0      	cbz	r0, 801319a <_vfiprintf_r+0x156>
 801316c:	9207      	str	r2, [sp, #28]
 801316e:	e014      	b.n	801319a <_vfiprintf_r+0x156>
 8013170:	eba0 0308 	sub.w	r3, r0, r8
 8013174:	fa09 f303 	lsl.w	r3, r9, r3
 8013178:	4313      	orrs	r3, r2
 801317a:	9304      	str	r3, [sp, #16]
 801317c:	46a2      	mov	sl, r4
 801317e:	e7d2      	b.n	8013126 <_vfiprintf_r+0xe2>
 8013180:	9b03      	ldr	r3, [sp, #12]
 8013182:	1d19      	adds	r1, r3, #4
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	9103      	str	r1, [sp, #12]
 8013188:	2b00      	cmp	r3, #0
 801318a:	bfbb      	ittet	lt
 801318c:	425b      	neglt	r3, r3
 801318e:	f042 0202 	orrlt.w	r2, r2, #2
 8013192:	9307      	strge	r3, [sp, #28]
 8013194:	9307      	strlt	r3, [sp, #28]
 8013196:	bfb8      	it	lt
 8013198:	9204      	strlt	r2, [sp, #16]
 801319a:	7823      	ldrb	r3, [r4, #0]
 801319c:	2b2e      	cmp	r3, #46	; 0x2e
 801319e:	d10c      	bne.n	80131ba <_vfiprintf_r+0x176>
 80131a0:	7863      	ldrb	r3, [r4, #1]
 80131a2:	2b2a      	cmp	r3, #42	; 0x2a
 80131a4:	d135      	bne.n	8013212 <_vfiprintf_r+0x1ce>
 80131a6:	9b03      	ldr	r3, [sp, #12]
 80131a8:	1d1a      	adds	r2, r3, #4
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	9203      	str	r2, [sp, #12]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	bfb8      	it	lt
 80131b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80131b6:	3402      	adds	r4, #2
 80131b8:	9305      	str	r3, [sp, #20]
 80131ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80132a0 <_vfiprintf_r+0x25c>
 80131be:	7821      	ldrb	r1, [r4, #0]
 80131c0:	2203      	movs	r2, #3
 80131c2:	4650      	mov	r0, sl
 80131c4:	f7ed f894 	bl	80002f0 <memchr>
 80131c8:	b140      	cbz	r0, 80131dc <_vfiprintf_r+0x198>
 80131ca:	2340      	movs	r3, #64	; 0x40
 80131cc:	eba0 000a 	sub.w	r0, r0, sl
 80131d0:	fa03 f000 	lsl.w	r0, r3, r0
 80131d4:	9b04      	ldr	r3, [sp, #16]
 80131d6:	4303      	orrs	r3, r0
 80131d8:	3401      	adds	r4, #1
 80131da:	9304      	str	r3, [sp, #16]
 80131dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131e0:	482c      	ldr	r0, [pc, #176]	; (8013294 <_vfiprintf_r+0x250>)
 80131e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80131e6:	2206      	movs	r2, #6
 80131e8:	f7ed f882 	bl	80002f0 <memchr>
 80131ec:	2800      	cmp	r0, #0
 80131ee:	d03f      	beq.n	8013270 <_vfiprintf_r+0x22c>
 80131f0:	4b29      	ldr	r3, [pc, #164]	; (8013298 <_vfiprintf_r+0x254>)
 80131f2:	bb1b      	cbnz	r3, 801323c <_vfiprintf_r+0x1f8>
 80131f4:	9b03      	ldr	r3, [sp, #12]
 80131f6:	3307      	adds	r3, #7
 80131f8:	f023 0307 	bic.w	r3, r3, #7
 80131fc:	3308      	adds	r3, #8
 80131fe:	9303      	str	r3, [sp, #12]
 8013200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013202:	443b      	add	r3, r7
 8013204:	9309      	str	r3, [sp, #36]	; 0x24
 8013206:	e767      	b.n	80130d8 <_vfiprintf_r+0x94>
 8013208:	fb0c 3202 	mla	r2, ip, r2, r3
 801320c:	460c      	mov	r4, r1
 801320e:	2001      	movs	r0, #1
 8013210:	e7a5      	b.n	801315e <_vfiprintf_r+0x11a>
 8013212:	2300      	movs	r3, #0
 8013214:	3401      	adds	r4, #1
 8013216:	9305      	str	r3, [sp, #20]
 8013218:	4619      	mov	r1, r3
 801321a:	f04f 0c0a 	mov.w	ip, #10
 801321e:	4620      	mov	r0, r4
 8013220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013224:	3a30      	subs	r2, #48	; 0x30
 8013226:	2a09      	cmp	r2, #9
 8013228:	d903      	bls.n	8013232 <_vfiprintf_r+0x1ee>
 801322a:	2b00      	cmp	r3, #0
 801322c:	d0c5      	beq.n	80131ba <_vfiprintf_r+0x176>
 801322e:	9105      	str	r1, [sp, #20]
 8013230:	e7c3      	b.n	80131ba <_vfiprintf_r+0x176>
 8013232:	fb0c 2101 	mla	r1, ip, r1, r2
 8013236:	4604      	mov	r4, r0
 8013238:	2301      	movs	r3, #1
 801323a:	e7f0      	b.n	801321e <_vfiprintf_r+0x1da>
 801323c:	ab03      	add	r3, sp, #12
 801323e:	9300      	str	r3, [sp, #0]
 8013240:	462a      	mov	r2, r5
 8013242:	4b16      	ldr	r3, [pc, #88]	; (801329c <_vfiprintf_r+0x258>)
 8013244:	a904      	add	r1, sp, #16
 8013246:	4630      	mov	r0, r6
 8013248:	f7fd feb2 	bl	8010fb0 <_printf_float>
 801324c:	4607      	mov	r7, r0
 801324e:	1c78      	adds	r0, r7, #1
 8013250:	d1d6      	bne.n	8013200 <_vfiprintf_r+0x1bc>
 8013252:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013254:	07d9      	lsls	r1, r3, #31
 8013256:	d405      	bmi.n	8013264 <_vfiprintf_r+0x220>
 8013258:	89ab      	ldrh	r3, [r5, #12]
 801325a:	059a      	lsls	r2, r3, #22
 801325c:	d402      	bmi.n	8013264 <_vfiprintf_r+0x220>
 801325e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013260:	f000 faaf 	bl	80137c2 <__retarget_lock_release_recursive>
 8013264:	89ab      	ldrh	r3, [r5, #12]
 8013266:	065b      	lsls	r3, r3, #25
 8013268:	f53f af12 	bmi.w	8013090 <_vfiprintf_r+0x4c>
 801326c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801326e:	e711      	b.n	8013094 <_vfiprintf_r+0x50>
 8013270:	ab03      	add	r3, sp, #12
 8013272:	9300      	str	r3, [sp, #0]
 8013274:	462a      	mov	r2, r5
 8013276:	4b09      	ldr	r3, [pc, #36]	; (801329c <_vfiprintf_r+0x258>)
 8013278:	a904      	add	r1, sp, #16
 801327a:	4630      	mov	r0, r6
 801327c:	f7fe f924 	bl	80114c8 <_printf_i>
 8013280:	e7e4      	b.n	801324c <_vfiprintf_r+0x208>
 8013282:	bf00      	nop
 8013284:	0801416c 	.word	0x0801416c
 8013288:	0801418c 	.word	0x0801418c
 801328c:	0801414c 	.word	0x0801414c
 8013290:	08013ff4 	.word	0x08013ff4
 8013294:	08013ffe 	.word	0x08013ffe
 8013298:	08010fb1 	.word	0x08010fb1
 801329c:	0801301f 	.word	0x0801301f
 80132a0:	08013ffa 	.word	0x08013ffa

080132a4 <__swbuf_r>:
 80132a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132a6:	460e      	mov	r6, r1
 80132a8:	4614      	mov	r4, r2
 80132aa:	4605      	mov	r5, r0
 80132ac:	b118      	cbz	r0, 80132b6 <__swbuf_r+0x12>
 80132ae:	6983      	ldr	r3, [r0, #24]
 80132b0:	b90b      	cbnz	r3, 80132b6 <__swbuf_r+0x12>
 80132b2:	f000 f9e7 	bl	8013684 <__sinit>
 80132b6:	4b21      	ldr	r3, [pc, #132]	; (801333c <__swbuf_r+0x98>)
 80132b8:	429c      	cmp	r4, r3
 80132ba:	d12b      	bne.n	8013314 <__swbuf_r+0x70>
 80132bc:	686c      	ldr	r4, [r5, #4]
 80132be:	69a3      	ldr	r3, [r4, #24]
 80132c0:	60a3      	str	r3, [r4, #8]
 80132c2:	89a3      	ldrh	r3, [r4, #12]
 80132c4:	071a      	lsls	r2, r3, #28
 80132c6:	d52f      	bpl.n	8013328 <__swbuf_r+0x84>
 80132c8:	6923      	ldr	r3, [r4, #16]
 80132ca:	b36b      	cbz	r3, 8013328 <__swbuf_r+0x84>
 80132cc:	6923      	ldr	r3, [r4, #16]
 80132ce:	6820      	ldr	r0, [r4, #0]
 80132d0:	1ac0      	subs	r0, r0, r3
 80132d2:	6963      	ldr	r3, [r4, #20]
 80132d4:	b2f6      	uxtb	r6, r6
 80132d6:	4283      	cmp	r3, r0
 80132d8:	4637      	mov	r7, r6
 80132da:	dc04      	bgt.n	80132e6 <__swbuf_r+0x42>
 80132dc:	4621      	mov	r1, r4
 80132de:	4628      	mov	r0, r5
 80132e0:	f000 f93c 	bl	801355c <_fflush_r>
 80132e4:	bb30      	cbnz	r0, 8013334 <__swbuf_r+0x90>
 80132e6:	68a3      	ldr	r3, [r4, #8]
 80132e8:	3b01      	subs	r3, #1
 80132ea:	60a3      	str	r3, [r4, #8]
 80132ec:	6823      	ldr	r3, [r4, #0]
 80132ee:	1c5a      	adds	r2, r3, #1
 80132f0:	6022      	str	r2, [r4, #0]
 80132f2:	701e      	strb	r6, [r3, #0]
 80132f4:	6963      	ldr	r3, [r4, #20]
 80132f6:	3001      	adds	r0, #1
 80132f8:	4283      	cmp	r3, r0
 80132fa:	d004      	beq.n	8013306 <__swbuf_r+0x62>
 80132fc:	89a3      	ldrh	r3, [r4, #12]
 80132fe:	07db      	lsls	r3, r3, #31
 8013300:	d506      	bpl.n	8013310 <__swbuf_r+0x6c>
 8013302:	2e0a      	cmp	r6, #10
 8013304:	d104      	bne.n	8013310 <__swbuf_r+0x6c>
 8013306:	4621      	mov	r1, r4
 8013308:	4628      	mov	r0, r5
 801330a:	f000 f927 	bl	801355c <_fflush_r>
 801330e:	b988      	cbnz	r0, 8013334 <__swbuf_r+0x90>
 8013310:	4638      	mov	r0, r7
 8013312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013314:	4b0a      	ldr	r3, [pc, #40]	; (8013340 <__swbuf_r+0x9c>)
 8013316:	429c      	cmp	r4, r3
 8013318:	d101      	bne.n	801331e <__swbuf_r+0x7a>
 801331a:	68ac      	ldr	r4, [r5, #8]
 801331c:	e7cf      	b.n	80132be <__swbuf_r+0x1a>
 801331e:	4b09      	ldr	r3, [pc, #36]	; (8013344 <__swbuf_r+0xa0>)
 8013320:	429c      	cmp	r4, r3
 8013322:	bf08      	it	eq
 8013324:	68ec      	ldreq	r4, [r5, #12]
 8013326:	e7ca      	b.n	80132be <__swbuf_r+0x1a>
 8013328:	4621      	mov	r1, r4
 801332a:	4628      	mov	r0, r5
 801332c:	f000 f81a 	bl	8013364 <__swsetup_r>
 8013330:	2800      	cmp	r0, #0
 8013332:	d0cb      	beq.n	80132cc <__swbuf_r+0x28>
 8013334:	f04f 37ff 	mov.w	r7, #4294967295
 8013338:	e7ea      	b.n	8013310 <__swbuf_r+0x6c>
 801333a:	bf00      	nop
 801333c:	0801416c 	.word	0x0801416c
 8013340:	0801418c 	.word	0x0801418c
 8013344:	0801414c 	.word	0x0801414c

08013348 <__ascii_wctomb>:
 8013348:	b149      	cbz	r1, 801335e <__ascii_wctomb+0x16>
 801334a:	2aff      	cmp	r2, #255	; 0xff
 801334c:	bf85      	ittet	hi
 801334e:	238a      	movhi	r3, #138	; 0x8a
 8013350:	6003      	strhi	r3, [r0, #0]
 8013352:	700a      	strbls	r2, [r1, #0]
 8013354:	f04f 30ff 	movhi.w	r0, #4294967295
 8013358:	bf98      	it	ls
 801335a:	2001      	movls	r0, #1
 801335c:	4770      	bx	lr
 801335e:	4608      	mov	r0, r1
 8013360:	4770      	bx	lr
	...

08013364 <__swsetup_r>:
 8013364:	4b32      	ldr	r3, [pc, #200]	; (8013430 <__swsetup_r+0xcc>)
 8013366:	b570      	push	{r4, r5, r6, lr}
 8013368:	681d      	ldr	r5, [r3, #0]
 801336a:	4606      	mov	r6, r0
 801336c:	460c      	mov	r4, r1
 801336e:	b125      	cbz	r5, 801337a <__swsetup_r+0x16>
 8013370:	69ab      	ldr	r3, [r5, #24]
 8013372:	b913      	cbnz	r3, 801337a <__swsetup_r+0x16>
 8013374:	4628      	mov	r0, r5
 8013376:	f000 f985 	bl	8013684 <__sinit>
 801337a:	4b2e      	ldr	r3, [pc, #184]	; (8013434 <__swsetup_r+0xd0>)
 801337c:	429c      	cmp	r4, r3
 801337e:	d10f      	bne.n	80133a0 <__swsetup_r+0x3c>
 8013380:	686c      	ldr	r4, [r5, #4]
 8013382:	89a3      	ldrh	r3, [r4, #12]
 8013384:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013388:	0719      	lsls	r1, r3, #28
 801338a:	d42c      	bmi.n	80133e6 <__swsetup_r+0x82>
 801338c:	06dd      	lsls	r5, r3, #27
 801338e:	d411      	bmi.n	80133b4 <__swsetup_r+0x50>
 8013390:	2309      	movs	r3, #9
 8013392:	6033      	str	r3, [r6, #0]
 8013394:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013398:	81a3      	strh	r3, [r4, #12]
 801339a:	f04f 30ff 	mov.w	r0, #4294967295
 801339e:	e03e      	b.n	801341e <__swsetup_r+0xba>
 80133a0:	4b25      	ldr	r3, [pc, #148]	; (8013438 <__swsetup_r+0xd4>)
 80133a2:	429c      	cmp	r4, r3
 80133a4:	d101      	bne.n	80133aa <__swsetup_r+0x46>
 80133a6:	68ac      	ldr	r4, [r5, #8]
 80133a8:	e7eb      	b.n	8013382 <__swsetup_r+0x1e>
 80133aa:	4b24      	ldr	r3, [pc, #144]	; (801343c <__swsetup_r+0xd8>)
 80133ac:	429c      	cmp	r4, r3
 80133ae:	bf08      	it	eq
 80133b0:	68ec      	ldreq	r4, [r5, #12]
 80133b2:	e7e6      	b.n	8013382 <__swsetup_r+0x1e>
 80133b4:	0758      	lsls	r0, r3, #29
 80133b6:	d512      	bpl.n	80133de <__swsetup_r+0x7a>
 80133b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80133ba:	b141      	cbz	r1, 80133ce <__swsetup_r+0x6a>
 80133bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80133c0:	4299      	cmp	r1, r3
 80133c2:	d002      	beq.n	80133ca <__swsetup_r+0x66>
 80133c4:	4630      	mov	r0, r6
 80133c6:	f7ff fb6f 	bl	8012aa8 <_free_r>
 80133ca:	2300      	movs	r3, #0
 80133cc:	6363      	str	r3, [r4, #52]	; 0x34
 80133ce:	89a3      	ldrh	r3, [r4, #12]
 80133d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80133d4:	81a3      	strh	r3, [r4, #12]
 80133d6:	2300      	movs	r3, #0
 80133d8:	6063      	str	r3, [r4, #4]
 80133da:	6923      	ldr	r3, [r4, #16]
 80133dc:	6023      	str	r3, [r4, #0]
 80133de:	89a3      	ldrh	r3, [r4, #12]
 80133e0:	f043 0308 	orr.w	r3, r3, #8
 80133e4:	81a3      	strh	r3, [r4, #12]
 80133e6:	6923      	ldr	r3, [r4, #16]
 80133e8:	b94b      	cbnz	r3, 80133fe <__swsetup_r+0x9a>
 80133ea:	89a3      	ldrh	r3, [r4, #12]
 80133ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80133f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80133f4:	d003      	beq.n	80133fe <__swsetup_r+0x9a>
 80133f6:	4621      	mov	r1, r4
 80133f8:	4630      	mov	r0, r6
 80133fa:	f000 fa07 	bl	801380c <__smakebuf_r>
 80133fe:	89a0      	ldrh	r0, [r4, #12]
 8013400:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013404:	f010 0301 	ands.w	r3, r0, #1
 8013408:	d00a      	beq.n	8013420 <__swsetup_r+0xbc>
 801340a:	2300      	movs	r3, #0
 801340c:	60a3      	str	r3, [r4, #8]
 801340e:	6963      	ldr	r3, [r4, #20]
 8013410:	425b      	negs	r3, r3
 8013412:	61a3      	str	r3, [r4, #24]
 8013414:	6923      	ldr	r3, [r4, #16]
 8013416:	b943      	cbnz	r3, 801342a <__swsetup_r+0xc6>
 8013418:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801341c:	d1ba      	bne.n	8013394 <__swsetup_r+0x30>
 801341e:	bd70      	pop	{r4, r5, r6, pc}
 8013420:	0781      	lsls	r1, r0, #30
 8013422:	bf58      	it	pl
 8013424:	6963      	ldrpl	r3, [r4, #20]
 8013426:	60a3      	str	r3, [r4, #8]
 8013428:	e7f4      	b.n	8013414 <__swsetup_r+0xb0>
 801342a:	2000      	movs	r0, #0
 801342c:	e7f7      	b.n	801341e <__swsetup_r+0xba>
 801342e:	bf00      	nop
 8013430:	24000024 	.word	0x24000024
 8013434:	0801416c 	.word	0x0801416c
 8013438:	0801418c 	.word	0x0801418c
 801343c:	0801414c 	.word	0x0801414c

08013440 <abort>:
 8013440:	b508      	push	{r3, lr}
 8013442:	2006      	movs	r0, #6
 8013444:	f000 fa52 	bl	80138ec <raise>
 8013448:	2001      	movs	r0, #1
 801344a:	f7ef f821 	bl	8002490 <_exit>
	...

08013450 <__sflush_r>:
 8013450:	898a      	ldrh	r2, [r1, #12]
 8013452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013456:	4605      	mov	r5, r0
 8013458:	0710      	lsls	r0, r2, #28
 801345a:	460c      	mov	r4, r1
 801345c:	d458      	bmi.n	8013510 <__sflush_r+0xc0>
 801345e:	684b      	ldr	r3, [r1, #4]
 8013460:	2b00      	cmp	r3, #0
 8013462:	dc05      	bgt.n	8013470 <__sflush_r+0x20>
 8013464:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013466:	2b00      	cmp	r3, #0
 8013468:	dc02      	bgt.n	8013470 <__sflush_r+0x20>
 801346a:	2000      	movs	r0, #0
 801346c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013470:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013472:	2e00      	cmp	r6, #0
 8013474:	d0f9      	beq.n	801346a <__sflush_r+0x1a>
 8013476:	2300      	movs	r3, #0
 8013478:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801347c:	682f      	ldr	r7, [r5, #0]
 801347e:	602b      	str	r3, [r5, #0]
 8013480:	d032      	beq.n	80134e8 <__sflush_r+0x98>
 8013482:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013484:	89a3      	ldrh	r3, [r4, #12]
 8013486:	075a      	lsls	r2, r3, #29
 8013488:	d505      	bpl.n	8013496 <__sflush_r+0x46>
 801348a:	6863      	ldr	r3, [r4, #4]
 801348c:	1ac0      	subs	r0, r0, r3
 801348e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013490:	b10b      	cbz	r3, 8013496 <__sflush_r+0x46>
 8013492:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013494:	1ac0      	subs	r0, r0, r3
 8013496:	2300      	movs	r3, #0
 8013498:	4602      	mov	r2, r0
 801349a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801349c:	6a21      	ldr	r1, [r4, #32]
 801349e:	4628      	mov	r0, r5
 80134a0:	47b0      	blx	r6
 80134a2:	1c43      	adds	r3, r0, #1
 80134a4:	89a3      	ldrh	r3, [r4, #12]
 80134a6:	d106      	bne.n	80134b6 <__sflush_r+0x66>
 80134a8:	6829      	ldr	r1, [r5, #0]
 80134aa:	291d      	cmp	r1, #29
 80134ac:	d82c      	bhi.n	8013508 <__sflush_r+0xb8>
 80134ae:	4a2a      	ldr	r2, [pc, #168]	; (8013558 <__sflush_r+0x108>)
 80134b0:	40ca      	lsrs	r2, r1
 80134b2:	07d6      	lsls	r6, r2, #31
 80134b4:	d528      	bpl.n	8013508 <__sflush_r+0xb8>
 80134b6:	2200      	movs	r2, #0
 80134b8:	6062      	str	r2, [r4, #4]
 80134ba:	04d9      	lsls	r1, r3, #19
 80134bc:	6922      	ldr	r2, [r4, #16]
 80134be:	6022      	str	r2, [r4, #0]
 80134c0:	d504      	bpl.n	80134cc <__sflush_r+0x7c>
 80134c2:	1c42      	adds	r2, r0, #1
 80134c4:	d101      	bne.n	80134ca <__sflush_r+0x7a>
 80134c6:	682b      	ldr	r3, [r5, #0]
 80134c8:	b903      	cbnz	r3, 80134cc <__sflush_r+0x7c>
 80134ca:	6560      	str	r0, [r4, #84]	; 0x54
 80134cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80134ce:	602f      	str	r7, [r5, #0]
 80134d0:	2900      	cmp	r1, #0
 80134d2:	d0ca      	beq.n	801346a <__sflush_r+0x1a>
 80134d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80134d8:	4299      	cmp	r1, r3
 80134da:	d002      	beq.n	80134e2 <__sflush_r+0x92>
 80134dc:	4628      	mov	r0, r5
 80134de:	f7ff fae3 	bl	8012aa8 <_free_r>
 80134e2:	2000      	movs	r0, #0
 80134e4:	6360      	str	r0, [r4, #52]	; 0x34
 80134e6:	e7c1      	b.n	801346c <__sflush_r+0x1c>
 80134e8:	6a21      	ldr	r1, [r4, #32]
 80134ea:	2301      	movs	r3, #1
 80134ec:	4628      	mov	r0, r5
 80134ee:	47b0      	blx	r6
 80134f0:	1c41      	adds	r1, r0, #1
 80134f2:	d1c7      	bne.n	8013484 <__sflush_r+0x34>
 80134f4:	682b      	ldr	r3, [r5, #0]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d0c4      	beq.n	8013484 <__sflush_r+0x34>
 80134fa:	2b1d      	cmp	r3, #29
 80134fc:	d001      	beq.n	8013502 <__sflush_r+0xb2>
 80134fe:	2b16      	cmp	r3, #22
 8013500:	d101      	bne.n	8013506 <__sflush_r+0xb6>
 8013502:	602f      	str	r7, [r5, #0]
 8013504:	e7b1      	b.n	801346a <__sflush_r+0x1a>
 8013506:	89a3      	ldrh	r3, [r4, #12]
 8013508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801350c:	81a3      	strh	r3, [r4, #12]
 801350e:	e7ad      	b.n	801346c <__sflush_r+0x1c>
 8013510:	690f      	ldr	r7, [r1, #16]
 8013512:	2f00      	cmp	r7, #0
 8013514:	d0a9      	beq.n	801346a <__sflush_r+0x1a>
 8013516:	0793      	lsls	r3, r2, #30
 8013518:	680e      	ldr	r6, [r1, #0]
 801351a:	bf08      	it	eq
 801351c:	694b      	ldreq	r3, [r1, #20]
 801351e:	600f      	str	r7, [r1, #0]
 8013520:	bf18      	it	ne
 8013522:	2300      	movne	r3, #0
 8013524:	eba6 0807 	sub.w	r8, r6, r7
 8013528:	608b      	str	r3, [r1, #8]
 801352a:	f1b8 0f00 	cmp.w	r8, #0
 801352e:	dd9c      	ble.n	801346a <__sflush_r+0x1a>
 8013530:	6a21      	ldr	r1, [r4, #32]
 8013532:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013534:	4643      	mov	r3, r8
 8013536:	463a      	mov	r2, r7
 8013538:	4628      	mov	r0, r5
 801353a:	47b0      	blx	r6
 801353c:	2800      	cmp	r0, #0
 801353e:	dc06      	bgt.n	801354e <__sflush_r+0xfe>
 8013540:	89a3      	ldrh	r3, [r4, #12]
 8013542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013546:	81a3      	strh	r3, [r4, #12]
 8013548:	f04f 30ff 	mov.w	r0, #4294967295
 801354c:	e78e      	b.n	801346c <__sflush_r+0x1c>
 801354e:	4407      	add	r7, r0
 8013550:	eba8 0800 	sub.w	r8, r8, r0
 8013554:	e7e9      	b.n	801352a <__sflush_r+0xda>
 8013556:	bf00      	nop
 8013558:	20400001 	.word	0x20400001

0801355c <_fflush_r>:
 801355c:	b538      	push	{r3, r4, r5, lr}
 801355e:	690b      	ldr	r3, [r1, #16]
 8013560:	4605      	mov	r5, r0
 8013562:	460c      	mov	r4, r1
 8013564:	b913      	cbnz	r3, 801356c <_fflush_r+0x10>
 8013566:	2500      	movs	r5, #0
 8013568:	4628      	mov	r0, r5
 801356a:	bd38      	pop	{r3, r4, r5, pc}
 801356c:	b118      	cbz	r0, 8013576 <_fflush_r+0x1a>
 801356e:	6983      	ldr	r3, [r0, #24]
 8013570:	b90b      	cbnz	r3, 8013576 <_fflush_r+0x1a>
 8013572:	f000 f887 	bl	8013684 <__sinit>
 8013576:	4b14      	ldr	r3, [pc, #80]	; (80135c8 <_fflush_r+0x6c>)
 8013578:	429c      	cmp	r4, r3
 801357a:	d11b      	bne.n	80135b4 <_fflush_r+0x58>
 801357c:	686c      	ldr	r4, [r5, #4]
 801357e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d0ef      	beq.n	8013566 <_fflush_r+0xa>
 8013586:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013588:	07d0      	lsls	r0, r2, #31
 801358a:	d404      	bmi.n	8013596 <_fflush_r+0x3a>
 801358c:	0599      	lsls	r1, r3, #22
 801358e:	d402      	bmi.n	8013596 <_fflush_r+0x3a>
 8013590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013592:	f000 f915 	bl	80137c0 <__retarget_lock_acquire_recursive>
 8013596:	4628      	mov	r0, r5
 8013598:	4621      	mov	r1, r4
 801359a:	f7ff ff59 	bl	8013450 <__sflush_r>
 801359e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80135a0:	07da      	lsls	r2, r3, #31
 80135a2:	4605      	mov	r5, r0
 80135a4:	d4e0      	bmi.n	8013568 <_fflush_r+0xc>
 80135a6:	89a3      	ldrh	r3, [r4, #12]
 80135a8:	059b      	lsls	r3, r3, #22
 80135aa:	d4dd      	bmi.n	8013568 <_fflush_r+0xc>
 80135ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80135ae:	f000 f908 	bl	80137c2 <__retarget_lock_release_recursive>
 80135b2:	e7d9      	b.n	8013568 <_fflush_r+0xc>
 80135b4:	4b05      	ldr	r3, [pc, #20]	; (80135cc <_fflush_r+0x70>)
 80135b6:	429c      	cmp	r4, r3
 80135b8:	d101      	bne.n	80135be <_fflush_r+0x62>
 80135ba:	68ac      	ldr	r4, [r5, #8]
 80135bc:	e7df      	b.n	801357e <_fflush_r+0x22>
 80135be:	4b04      	ldr	r3, [pc, #16]	; (80135d0 <_fflush_r+0x74>)
 80135c0:	429c      	cmp	r4, r3
 80135c2:	bf08      	it	eq
 80135c4:	68ec      	ldreq	r4, [r5, #12]
 80135c6:	e7da      	b.n	801357e <_fflush_r+0x22>
 80135c8:	0801416c 	.word	0x0801416c
 80135cc:	0801418c 	.word	0x0801418c
 80135d0:	0801414c 	.word	0x0801414c

080135d4 <std>:
 80135d4:	2300      	movs	r3, #0
 80135d6:	b510      	push	{r4, lr}
 80135d8:	4604      	mov	r4, r0
 80135da:	e9c0 3300 	strd	r3, r3, [r0]
 80135de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80135e2:	6083      	str	r3, [r0, #8]
 80135e4:	8181      	strh	r1, [r0, #12]
 80135e6:	6643      	str	r3, [r0, #100]	; 0x64
 80135e8:	81c2      	strh	r2, [r0, #14]
 80135ea:	6183      	str	r3, [r0, #24]
 80135ec:	4619      	mov	r1, r3
 80135ee:	2208      	movs	r2, #8
 80135f0:	305c      	adds	r0, #92	; 0x5c
 80135f2:	f7fd fc45 	bl	8010e80 <memset>
 80135f6:	4b05      	ldr	r3, [pc, #20]	; (801360c <std+0x38>)
 80135f8:	6263      	str	r3, [r4, #36]	; 0x24
 80135fa:	4b05      	ldr	r3, [pc, #20]	; (8013610 <std+0x3c>)
 80135fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80135fe:	4b05      	ldr	r3, [pc, #20]	; (8013614 <std+0x40>)
 8013600:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013602:	4b05      	ldr	r3, [pc, #20]	; (8013618 <std+0x44>)
 8013604:	6224      	str	r4, [r4, #32]
 8013606:	6323      	str	r3, [r4, #48]	; 0x30
 8013608:	bd10      	pop	{r4, pc}
 801360a:	bf00      	nop
 801360c:	08013925 	.word	0x08013925
 8013610:	08013947 	.word	0x08013947
 8013614:	0801397f 	.word	0x0801397f
 8013618:	080139a3 	.word	0x080139a3

0801361c <_cleanup_r>:
 801361c:	4901      	ldr	r1, [pc, #4]	; (8013624 <_cleanup_r+0x8>)
 801361e:	f000 b8af 	b.w	8013780 <_fwalk_reent>
 8013622:	bf00      	nop
 8013624:	0801355d 	.word	0x0801355d

08013628 <__sfmoreglue>:
 8013628:	b570      	push	{r4, r5, r6, lr}
 801362a:	1e4a      	subs	r2, r1, #1
 801362c:	2568      	movs	r5, #104	; 0x68
 801362e:	4355      	muls	r5, r2
 8013630:	460e      	mov	r6, r1
 8013632:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013636:	f7ff fa87 	bl	8012b48 <_malloc_r>
 801363a:	4604      	mov	r4, r0
 801363c:	b140      	cbz	r0, 8013650 <__sfmoreglue+0x28>
 801363e:	2100      	movs	r1, #0
 8013640:	e9c0 1600 	strd	r1, r6, [r0]
 8013644:	300c      	adds	r0, #12
 8013646:	60a0      	str	r0, [r4, #8]
 8013648:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801364c:	f7fd fc18 	bl	8010e80 <memset>
 8013650:	4620      	mov	r0, r4
 8013652:	bd70      	pop	{r4, r5, r6, pc}

08013654 <__sfp_lock_acquire>:
 8013654:	4801      	ldr	r0, [pc, #4]	; (801365c <__sfp_lock_acquire+0x8>)
 8013656:	f000 b8b3 	b.w	80137c0 <__retarget_lock_acquire_recursive>
 801365a:	bf00      	nop
 801365c:	240053d0 	.word	0x240053d0

08013660 <__sfp_lock_release>:
 8013660:	4801      	ldr	r0, [pc, #4]	; (8013668 <__sfp_lock_release+0x8>)
 8013662:	f000 b8ae 	b.w	80137c2 <__retarget_lock_release_recursive>
 8013666:	bf00      	nop
 8013668:	240053d0 	.word	0x240053d0

0801366c <__sinit_lock_acquire>:
 801366c:	4801      	ldr	r0, [pc, #4]	; (8013674 <__sinit_lock_acquire+0x8>)
 801366e:	f000 b8a7 	b.w	80137c0 <__retarget_lock_acquire_recursive>
 8013672:	bf00      	nop
 8013674:	240053cb 	.word	0x240053cb

08013678 <__sinit_lock_release>:
 8013678:	4801      	ldr	r0, [pc, #4]	; (8013680 <__sinit_lock_release+0x8>)
 801367a:	f000 b8a2 	b.w	80137c2 <__retarget_lock_release_recursive>
 801367e:	bf00      	nop
 8013680:	240053cb 	.word	0x240053cb

08013684 <__sinit>:
 8013684:	b510      	push	{r4, lr}
 8013686:	4604      	mov	r4, r0
 8013688:	f7ff fff0 	bl	801366c <__sinit_lock_acquire>
 801368c:	69a3      	ldr	r3, [r4, #24]
 801368e:	b11b      	cbz	r3, 8013698 <__sinit+0x14>
 8013690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013694:	f7ff bff0 	b.w	8013678 <__sinit_lock_release>
 8013698:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801369c:	6523      	str	r3, [r4, #80]	; 0x50
 801369e:	4b13      	ldr	r3, [pc, #76]	; (80136ec <__sinit+0x68>)
 80136a0:	4a13      	ldr	r2, [pc, #76]	; (80136f0 <__sinit+0x6c>)
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80136a6:	42a3      	cmp	r3, r4
 80136a8:	bf04      	itt	eq
 80136aa:	2301      	moveq	r3, #1
 80136ac:	61a3      	streq	r3, [r4, #24]
 80136ae:	4620      	mov	r0, r4
 80136b0:	f000 f820 	bl	80136f4 <__sfp>
 80136b4:	6060      	str	r0, [r4, #4]
 80136b6:	4620      	mov	r0, r4
 80136b8:	f000 f81c 	bl	80136f4 <__sfp>
 80136bc:	60a0      	str	r0, [r4, #8]
 80136be:	4620      	mov	r0, r4
 80136c0:	f000 f818 	bl	80136f4 <__sfp>
 80136c4:	2200      	movs	r2, #0
 80136c6:	60e0      	str	r0, [r4, #12]
 80136c8:	2104      	movs	r1, #4
 80136ca:	6860      	ldr	r0, [r4, #4]
 80136cc:	f7ff ff82 	bl	80135d4 <std>
 80136d0:	68a0      	ldr	r0, [r4, #8]
 80136d2:	2201      	movs	r2, #1
 80136d4:	2109      	movs	r1, #9
 80136d6:	f7ff ff7d 	bl	80135d4 <std>
 80136da:	68e0      	ldr	r0, [r4, #12]
 80136dc:	2202      	movs	r2, #2
 80136de:	2112      	movs	r1, #18
 80136e0:	f7ff ff78 	bl	80135d4 <std>
 80136e4:	2301      	movs	r3, #1
 80136e6:	61a3      	str	r3, [r4, #24]
 80136e8:	e7d2      	b.n	8013690 <__sinit+0xc>
 80136ea:	bf00      	nop
 80136ec:	08013dcc 	.word	0x08013dcc
 80136f0:	0801361d 	.word	0x0801361d

080136f4 <__sfp>:
 80136f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136f6:	4607      	mov	r7, r0
 80136f8:	f7ff ffac 	bl	8013654 <__sfp_lock_acquire>
 80136fc:	4b1e      	ldr	r3, [pc, #120]	; (8013778 <__sfp+0x84>)
 80136fe:	681e      	ldr	r6, [r3, #0]
 8013700:	69b3      	ldr	r3, [r6, #24]
 8013702:	b913      	cbnz	r3, 801370a <__sfp+0x16>
 8013704:	4630      	mov	r0, r6
 8013706:	f7ff ffbd 	bl	8013684 <__sinit>
 801370a:	3648      	adds	r6, #72	; 0x48
 801370c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013710:	3b01      	subs	r3, #1
 8013712:	d503      	bpl.n	801371c <__sfp+0x28>
 8013714:	6833      	ldr	r3, [r6, #0]
 8013716:	b30b      	cbz	r3, 801375c <__sfp+0x68>
 8013718:	6836      	ldr	r6, [r6, #0]
 801371a:	e7f7      	b.n	801370c <__sfp+0x18>
 801371c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013720:	b9d5      	cbnz	r5, 8013758 <__sfp+0x64>
 8013722:	4b16      	ldr	r3, [pc, #88]	; (801377c <__sfp+0x88>)
 8013724:	60e3      	str	r3, [r4, #12]
 8013726:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801372a:	6665      	str	r5, [r4, #100]	; 0x64
 801372c:	f000 f847 	bl	80137be <__retarget_lock_init_recursive>
 8013730:	f7ff ff96 	bl	8013660 <__sfp_lock_release>
 8013734:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013738:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801373c:	6025      	str	r5, [r4, #0]
 801373e:	61a5      	str	r5, [r4, #24]
 8013740:	2208      	movs	r2, #8
 8013742:	4629      	mov	r1, r5
 8013744:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013748:	f7fd fb9a 	bl	8010e80 <memset>
 801374c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013750:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013754:	4620      	mov	r0, r4
 8013756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013758:	3468      	adds	r4, #104	; 0x68
 801375a:	e7d9      	b.n	8013710 <__sfp+0x1c>
 801375c:	2104      	movs	r1, #4
 801375e:	4638      	mov	r0, r7
 8013760:	f7ff ff62 	bl	8013628 <__sfmoreglue>
 8013764:	4604      	mov	r4, r0
 8013766:	6030      	str	r0, [r6, #0]
 8013768:	2800      	cmp	r0, #0
 801376a:	d1d5      	bne.n	8013718 <__sfp+0x24>
 801376c:	f7ff ff78 	bl	8013660 <__sfp_lock_release>
 8013770:	230c      	movs	r3, #12
 8013772:	603b      	str	r3, [r7, #0]
 8013774:	e7ee      	b.n	8013754 <__sfp+0x60>
 8013776:	bf00      	nop
 8013778:	08013dcc 	.word	0x08013dcc
 801377c:	ffff0001 	.word	0xffff0001

08013780 <_fwalk_reent>:
 8013780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013784:	4606      	mov	r6, r0
 8013786:	4688      	mov	r8, r1
 8013788:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801378c:	2700      	movs	r7, #0
 801378e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013792:	f1b9 0901 	subs.w	r9, r9, #1
 8013796:	d505      	bpl.n	80137a4 <_fwalk_reent+0x24>
 8013798:	6824      	ldr	r4, [r4, #0]
 801379a:	2c00      	cmp	r4, #0
 801379c:	d1f7      	bne.n	801378e <_fwalk_reent+0xe>
 801379e:	4638      	mov	r0, r7
 80137a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137a4:	89ab      	ldrh	r3, [r5, #12]
 80137a6:	2b01      	cmp	r3, #1
 80137a8:	d907      	bls.n	80137ba <_fwalk_reent+0x3a>
 80137aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80137ae:	3301      	adds	r3, #1
 80137b0:	d003      	beq.n	80137ba <_fwalk_reent+0x3a>
 80137b2:	4629      	mov	r1, r5
 80137b4:	4630      	mov	r0, r6
 80137b6:	47c0      	blx	r8
 80137b8:	4307      	orrs	r7, r0
 80137ba:	3568      	adds	r5, #104	; 0x68
 80137bc:	e7e9      	b.n	8013792 <_fwalk_reent+0x12>

080137be <__retarget_lock_init_recursive>:
 80137be:	4770      	bx	lr

080137c0 <__retarget_lock_acquire_recursive>:
 80137c0:	4770      	bx	lr

080137c2 <__retarget_lock_release_recursive>:
 80137c2:	4770      	bx	lr

080137c4 <__swhatbuf_r>:
 80137c4:	b570      	push	{r4, r5, r6, lr}
 80137c6:	460e      	mov	r6, r1
 80137c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137cc:	2900      	cmp	r1, #0
 80137ce:	b096      	sub	sp, #88	; 0x58
 80137d0:	4614      	mov	r4, r2
 80137d2:	461d      	mov	r5, r3
 80137d4:	da07      	bge.n	80137e6 <__swhatbuf_r+0x22>
 80137d6:	2300      	movs	r3, #0
 80137d8:	602b      	str	r3, [r5, #0]
 80137da:	89b3      	ldrh	r3, [r6, #12]
 80137dc:	061a      	lsls	r2, r3, #24
 80137de:	d410      	bmi.n	8013802 <__swhatbuf_r+0x3e>
 80137e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80137e4:	e00e      	b.n	8013804 <__swhatbuf_r+0x40>
 80137e6:	466a      	mov	r2, sp
 80137e8:	f000 f902 	bl	80139f0 <_fstat_r>
 80137ec:	2800      	cmp	r0, #0
 80137ee:	dbf2      	blt.n	80137d6 <__swhatbuf_r+0x12>
 80137f0:	9a01      	ldr	r2, [sp, #4]
 80137f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80137f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80137fa:	425a      	negs	r2, r3
 80137fc:	415a      	adcs	r2, r3
 80137fe:	602a      	str	r2, [r5, #0]
 8013800:	e7ee      	b.n	80137e0 <__swhatbuf_r+0x1c>
 8013802:	2340      	movs	r3, #64	; 0x40
 8013804:	2000      	movs	r0, #0
 8013806:	6023      	str	r3, [r4, #0]
 8013808:	b016      	add	sp, #88	; 0x58
 801380a:	bd70      	pop	{r4, r5, r6, pc}

0801380c <__smakebuf_r>:
 801380c:	898b      	ldrh	r3, [r1, #12]
 801380e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013810:	079d      	lsls	r5, r3, #30
 8013812:	4606      	mov	r6, r0
 8013814:	460c      	mov	r4, r1
 8013816:	d507      	bpl.n	8013828 <__smakebuf_r+0x1c>
 8013818:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801381c:	6023      	str	r3, [r4, #0]
 801381e:	6123      	str	r3, [r4, #16]
 8013820:	2301      	movs	r3, #1
 8013822:	6163      	str	r3, [r4, #20]
 8013824:	b002      	add	sp, #8
 8013826:	bd70      	pop	{r4, r5, r6, pc}
 8013828:	ab01      	add	r3, sp, #4
 801382a:	466a      	mov	r2, sp
 801382c:	f7ff ffca 	bl	80137c4 <__swhatbuf_r>
 8013830:	9900      	ldr	r1, [sp, #0]
 8013832:	4605      	mov	r5, r0
 8013834:	4630      	mov	r0, r6
 8013836:	f7ff f987 	bl	8012b48 <_malloc_r>
 801383a:	b948      	cbnz	r0, 8013850 <__smakebuf_r+0x44>
 801383c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013840:	059a      	lsls	r2, r3, #22
 8013842:	d4ef      	bmi.n	8013824 <__smakebuf_r+0x18>
 8013844:	f023 0303 	bic.w	r3, r3, #3
 8013848:	f043 0302 	orr.w	r3, r3, #2
 801384c:	81a3      	strh	r3, [r4, #12]
 801384e:	e7e3      	b.n	8013818 <__smakebuf_r+0xc>
 8013850:	4b0d      	ldr	r3, [pc, #52]	; (8013888 <__smakebuf_r+0x7c>)
 8013852:	62b3      	str	r3, [r6, #40]	; 0x28
 8013854:	89a3      	ldrh	r3, [r4, #12]
 8013856:	6020      	str	r0, [r4, #0]
 8013858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801385c:	81a3      	strh	r3, [r4, #12]
 801385e:	9b00      	ldr	r3, [sp, #0]
 8013860:	6163      	str	r3, [r4, #20]
 8013862:	9b01      	ldr	r3, [sp, #4]
 8013864:	6120      	str	r0, [r4, #16]
 8013866:	b15b      	cbz	r3, 8013880 <__smakebuf_r+0x74>
 8013868:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801386c:	4630      	mov	r0, r6
 801386e:	f000 f8d1 	bl	8013a14 <_isatty_r>
 8013872:	b128      	cbz	r0, 8013880 <__smakebuf_r+0x74>
 8013874:	89a3      	ldrh	r3, [r4, #12]
 8013876:	f023 0303 	bic.w	r3, r3, #3
 801387a:	f043 0301 	orr.w	r3, r3, #1
 801387e:	81a3      	strh	r3, [r4, #12]
 8013880:	89a0      	ldrh	r0, [r4, #12]
 8013882:	4305      	orrs	r5, r0
 8013884:	81a5      	strh	r5, [r4, #12]
 8013886:	e7cd      	b.n	8013824 <__smakebuf_r+0x18>
 8013888:	0801361d 	.word	0x0801361d

0801388c <_malloc_usable_size_r>:
 801388c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013890:	1f18      	subs	r0, r3, #4
 8013892:	2b00      	cmp	r3, #0
 8013894:	bfbc      	itt	lt
 8013896:	580b      	ldrlt	r3, [r1, r0]
 8013898:	18c0      	addlt	r0, r0, r3
 801389a:	4770      	bx	lr

0801389c <_raise_r>:
 801389c:	291f      	cmp	r1, #31
 801389e:	b538      	push	{r3, r4, r5, lr}
 80138a0:	4604      	mov	r4, r0
 80138a2:	460d      	mov	r5, r1
 80138a4:	d904      	bls.n	80138b0 <_raise_r+0x14>
 80138a6:	2316      	movs	r3, #22
 80138a8:	6003      	str	r3, [r0, #0]
 80138aa:	f04f 30ff 	mov.w	r0, #4294967295
 80138ae:	bd38      	pop	{r3, r4, r5, pc}
 80138b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80138b2:	b112      	cbz	r2, 80138ba <_raise_r+0x1e>
 80138b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80138b8:	b94b      	cbnz	r3, 80138ce <_raise_r+0x32>
 80138ba:	4620      	mov	r0, r4
 80138bc:	f000 f830 	bl	8013920 <_getpid_r>
 80138c0:	462a      	mov	r2, r5
 80138c2:	4601      	mov	r1, r0
 80138c4:	4620      	mov	r0, r4
 80138c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80138ca:	f000 b817 	b.w	80138fc <_kill_r>
 80138ce:	2b01      	cmp	r3, #1
 80138d0:	d00a      	beq.n	80138e8 <_raise_r+0x4c>
 80138d2:	1c59      	adds	r1, r3, #1
 80138d4:	d103      	bne.n	80138de <_raise_r+0x42>
 80138d6:	2316      	movs	r3, #22
 80138d8:	6003      	str	r3, [r0, #0]
 80138da:	2001      	movs	r0, #1
 80138dc:	e7e7      	b.n	80138ae <_raise_r+0x12>
 80138de:	2400      	movs	r4, #0
 80138e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80138e4:	4628      	mov	r0, r5
 80138e6:	4798      	blx	r3
 80138e8:	2000      	movs	r0, #0
 80138ea:	e7e0      	b.n	80138ae <_raise_r+0x12>

080138ec <raise>:
 80138ec:	4b02      	ldr	r3, [pc, #8]	; (80138f8 <raise+0xc>)
 80138ee:	4601      	mov	r1, r0
 80138f0:	6818      	ldr	r0, [r3, #0]
 80138f2:	f7ff bfd3 	b.w	801389c <_raise_r>
 80138f6:	bf00      	nop
 80138f8:	24000024 	.word	0x24000024

080138fc <_kill_r>:
 80138fc:	b538      	push	{r3, r4, r5, lr}
 80138fe:	4d07      	ldr	r5, [pc, #28]	; (801391c <_kill_r+0x20>)
 8013900:	2300      	movs	r3, #0
 8013902:	4604      	mov	r4, r0
 8013904:	4608      	mov	r0, r1
 8013906:	4611      	mov	r1, r2
 8013908:	602b      	str	r3, [r5, #0]
 801390a:	f7ee fdb1 	bl	8002470 <_kill>
 801390e:	1c43      	adds	r3, r0, #1
 8013910:	d102      	bne.n	8013918 <_kill_r+0x1c>
 8013912:	682b      	ldr	r3, [r5, #0]
 8013914:	b103      	cbz	r3, 8013918 <_kill_r+0x1c>
 8013916:	6023      	str	r3, [r4, #0]
 8013918:	bd38      	pop	{r3, r4, r5, pc}
 801391a:	bf00      	nop
 801391c:	240053c4 	.word	0x240053c4

08013920 <_getpid_r>:
 8013920:	f7ee bd9e 	b.w	8002460 <_getpid>

08013924 <__sread>:
 8013924:	b510      	push	{r4, lr}
 8013926:	460c      	mov	r4, r1
 8013928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801392c:	f000 f894 	bl	8013a58 <_read_r>
 8013930:	2800      	cmp	r0, #0
 8013932:	bfab      	itete	ge
 8013934:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013936:	89a3      	ldrhlt	r3, [r4, #12]
 8013938:	181b      	addge	r3, r3, r0
 801393a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801393e:	bfac      	ite	ge
 8013940:	6563      	strge	r3, [r4, #84]	; 0x54
 8013942:	81a3      	strhlt	r3, [r4, #12]
 8013944:	bd10      	pop	{r4, pc}

08013946 <__swrite>:
 8013946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801394a:	461f      	mov	r7, r3
 801394c:	898b      	ldrh	r3, [r1, #12]
 801394e:	05db      	lsls	r3, r3, #23
 8013950:	4605      	mov	r5, r0
 8013952:	460c      	mov	r4, r1
 8013954:	4616      	mov	r6, r2
 8013956:	d505      	bpl.n	8013964 <__swrite+0x1e>
 8013958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801395c:	2302      	movs	r3, #2
 801395e:	2200      	movs	r2, #0
 8013960:	f000 f868 	bl	8013a34 <_lseek_r>
 8013964:	89a3      	ldrh	r3, [r4, #12]
 8013966:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801396a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801396e:	81a3      	strh	r3, [r4, #12]
 8013970:	4632      	mov	r2, r6
 8013972:	463b      	mov	r3, r7
 8013974:	4628      	mov	r0, r5
 8013976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801397a:	f000 b817 	b.w	80139ac <_write_r>

0801397e <__sseek>:
 801397e:	b510      	push	{r4, lr}
 8013980:	460c      	mov	r4, r1
 8013982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013986:	f000 f855 	bl	8013a34 <_lseek_r>
 801398a:	1c43      	adds	r3, r0, #1
 801398c:	89a3      	ldrh	r3, [r4, #12]
 801398e:	bf15      	itete	ne
 8013990:	6560      	strne	r0, [r4, #84]	; 0x54
 8013992:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013996:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801399a:	81a3      	strheq	r3, [r4, #12]
 801399c:	bf18      	it	ne
 801399e:	81a3      	strhne	r3, [r4, #12]
 80139a0:	bd10      	pop	{r4, pc}

080139a2 <__sclose>:
 80139a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139a6:	f000 b813 	b.w	80139d0 <_close_r>
	...

080139ac <_write_r>:
 80139ac:	b538      	push	{r3, r4, r5, lr}
 80139ae:	4d07      	ldr	r5, [pc, #28]	; (80139cc <_write_r+0x20>)
 80139b0:	4604      	mov	r4, r0
 80139b2:	4608      	mov	r0, r1
 80139b4:	4611      	mov	r1, r2
 80139b6:	2200      	movs	r2, #0
 80139b8:	602a      	str	r2, [r5, #0]
 80139ba:	461a      	mov	r2, r3
 80139bc:	f7ee fd8f 	bl	80024de <_write>
 80139c0:	1c43      	adds	r3, r0, #1
 80139c2:	d102      	bne.n	80139ca <_write_r+0x1e>
 80139c4:	682b      	ldr	r3, [r5, #0]
 80139c6:	b103      	cbz	r3, 80139ca <_write_r+0x1e>
 80139c8:	6023      	str	r3, [r4, #0]
 80139ca:	bd38      	pop	{r3, r4, r5, pc}
 80139cc:	240053c4 	.word	0x240053c4

080139d0 <_close_r>:
 80139d0:	b538      	push	{r3, r4, r5, lr}
 80139d2:	4d06      	ldr	r5, [pc, #24]	; (80139ec <_close_r+0x1c>)
 80139d4:	2300      	movs	r3, #0
 80139d6:	4604      	mov	r4, r0
 80139d8:	4608      	mov	r0, r1
 80139da:	602b      	str	r3, [r5, #0]
 80139dc:	f7ee fd9b 	bl	8002516 <_close>
 80139e0:	1c43      	adds	r3, r0, #1
 80139e2:	d102      	bne.n	80139ea <_close_r+0x1a>
 80139e4:	682b      	ldr	r3, [r5, #0]
 80139e6:	b103      	cbz	r3, 80139ea <_close_r+0x1a>
 80139e8:	6023      	str	r3, [r4, #0]
 80139ea:	bd38      	pop	{r3, r4, r5, pc}
 80139ec:	240053c4 	.word	0x240053c4

080139f0 <_fstat_r>:
 80139f0:	b538      	push	{r3, r4, r5, lr}
 80139f2:	4d07      	ldr	r5, [pc, #28]	; (8013a10 <_fstat_r+0x20>)
 80139f4:	2300      	movs	r3, #0
 80139f6:	4604      	mov	r4, r0
 80139f8:	4608      	mov	r0, r1
 80139fa:	4611      	mov	r1, r2
 80139fc:	602b      	str	r3, [r5, #0]
 80139fe:	f7ee fd96 	bl	800252e <_fstat>
 8013a02:	1c43      	adds	r3, r0, #1
 8013a04:	d102      	bne.n	8013a0c <_fstat_r+0x1c>
 8013a06:	682b      	ldr	r3, [r5, #0]
 8013a08:	b103      	cbz	r3, 8013a0c <_fstat_r+0x1c>
 8013a0a:	6023      	str	r3, [r4, #0]
 8013a0c:	bd38      	pop	{r3, r4, r5, pc}
 8013a0e:	bf00      	nop
 8013a10:	240053c4 	.word	0x240053c4

08013a14 <_isatty_r>:
 8013a14:	b538      	push	{r3, r4, r5, lr}
 8013a16:	4d06      	ldr	r5, [pc, #24]	; (8013a30 <_isatty_r+0x1c>)
 8013a18:	2300      	movs	r3, #0
 8013a1a:	4604      	mov	r4, r0
 8013a1c:	4608      	mov	r0, r1
 8013a1e:	602b      	str	r3, [r5, #0]
 8013a20:	f7ee fd95 	bl	800254e <_isatty>
 8013a24:	1c43      	adds	r3, r0, #1
 8013a26:	d102      	bne.n	8013a2e <_isatty_r+0x1a>
 8013a28:	682b      	ldr	r3, [r5, #0]
 8013a2a:	b103      	cbz	r3, 8013a2e <_isatty_r+0x1a>
 8013a2c:	6023      	str	r3, [r4, #0]
 8013a2e:	bd38      	pop	{r3, r4, r5, pc}
 8013a30:	240053c4 	.word	0x240053c4

08013a34 <_lseek_r>:
 8013a34:	b538      	push	{r3, r4, r5, lr}
 8013a36:	4d07      	ldr	r5, [pc, #28]	; (8013a54 <_lseek_r+0x20>)
 8013a38:	4604      	mov	r4, r0
 8013a3a:	4608      	mov	r0, r1
 8013a3c:	4611      	mov	r1, r2
 8013a3e:	2200      	movs	r2, #0
 8013a40:	602a      	str	r2, [r5, #0]
 8013a42:	461a      	mov	r2, r3
 8013a44:	f7ee fd8e 	bl	8002564 <_lseek>
 8013a48:	1c43      	adds	r3, r0, #1
 8013a4a:	d102      	bne.n	8013a52 <_lseek_r+0x1e>
 8013a4c:	682b      	ldr	r3, [r5, #0]
 8013a4e:	b103      	cbz	r3, 8013a52 <_lseek_r+0x1e>
 8013a50:	6023      	str	r3, [r4, #0]
 8013a52:	bd38      	pop	{r3, r4, r5, pc}
 8013a54:	240053c4 	.word	0x240053c4

08013a58 <_read_r>:
 8013a58:	b538      	push	{r3, r4, r5, lr}
 8013a5a:	4d07      	ldr	r5, [pc, #28]	; (8013a78 <_read_r+0x20>)
 8013a5c:	4604      	mov	r4, r0
 8013a5e:	4608      	mov	r0, r1
 8013a60:	4611      	mov	r1, r2
 8013a62:	2200      	movs	r2, #0
 8013a64:	602a      	str	r2, [r5, #0]
 8013a66:	461a      	mov	r2, r3
 8013a68:	f7ee fd1c 	bl	80024a4 <_read>
 8013a6c:	1c43      	adds	r3, r0, #1
 8013a6e:	d102      	bne.n	8013a76 <_read_r+0x1e>
 8013a70:	682b      	ldr	r3, [r5, #0]
 8013a72:	b103      	cbz	r3, 8013a76 <_read_r+0x1e>
 8013a74:	6023      	str	r3, [r4, #0]
 8013a76:	bd38      	pop	{r3, r4, r5, pc}
 8013a78:	240053c4 	.word	0x240053c4

08013a7c <_init>:
 8013a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a7e:	bf00      	nop
 8013a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a82:	bc08      	pop	{r3}
 8013a84:	469e      	mov	lr, r3
 8013a86:	4770      	bx	lr

08013a88 <_fini>:
 8013a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a8a:	bf00      	nop
 8013a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a8e:	bc08      	pop	{r3}
 8013a90:	469e      	mov	lr, r3
 8013a92:	4770      	bx	lr
