
Linear_Actuator_IRC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010fa8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b4  08011248  08011248  00021248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080119fc  080119fc  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  080119fc  080119fc  000219fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011a04  08011a04  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011a04  08011a04  00021a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011a08  08011a08  00021a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  24000000  08011a0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f88  240001e8  08011bf4  000301e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24005170  08011bf4  00035170  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003789d  00000000  00000000  00030216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056d9  00000000  00000000  00067ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020d0  00000000  00000000  0006d190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f28  00000000  00000000  0006f260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e2cd  00000000  00000000  00071188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000252eb  00000000  00000000  000af455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019b5f9  00000000  00000000  000d4740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0026fd39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a26c  00000000  00000000  0026fd8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011230 	.word	0x08011230

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	08011230 	.word	0x08011230

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a6 	b.w	8000a6c <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468c      	mov	ip, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f040 8083 	bne.w	80008be <__udivmoddi4+0x116>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d947      	bls.n	800084e <__udivmoddi4+0xa6>
 80007be:	fab2 f282 	clz	r2, r2
 80007c2:	b142      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	f1c2 0020 	rsb	r0, r2, #32
 80007c8:	fa24 f000 	lsr.w	r0, r4, r0
 80007cc:	4091      	lsls	r1, r2
 80007ce:	4097      	lsls	r7, r2
 80007d0:	ea40 0c01 	orr.w	ip, r0, r1
 80007d4:	4094      	lsls	r4, r2
 80007d6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007da:	0c23      	lsrs	r3, r4, #16
 80007dc:	fbbc f6f8 	udiv	r6, ip, r8
 80007e0:	fa1f fe87 	uxth.w	lr, r7
 80007e4:	fb08 c116 	mls	r1, r8, r6, ip
 80007e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ec:	fb06 f10e 	mul.w	r1, r6, lr
 80007f0:	4299      	cmp	r1, r3
 80007f2:	d909      	bls.n	8000808 <__udivmoddi4+0x60>
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fa:	f080 8119 	bcs.w	8000a30 <__udivmoddi4+0x288>
 80007fe:	4299      	cmp	r1, r3
 8000800:	f240 8116 	bls.w	8000a30 <__udivmoddi4+0x288>
 8000804:	3e02      	subs	r6, #2
 8000806:	443b      	add	r3, r7
 8000808:	1a5b      	subs	r3, r3, r1
 800080a:	b2a4      	uxth	r4, r4
 800080c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000810:	fb08 3310 	mls	r3, r8, r0, r3
 8000814:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000818:	fb00 fe0e 	mul.w	lr, r0, lr
 800081c:	45a6      	cmp	lr, r4
 800081e:	d909      	bls.n	8000834 <__udivmoddi4+0x8c>
 8000820:	193c      	adds	r4, r7, r4
 8000822:	f100 33ff 	add.w	r3, r0, #4294967295
 8000826:	f080 8105 	bcs.w	8000a34 <__udivmoddi4+0x28c>
 800082a:	45a6      	cmp	lr, r4
 800082c:	f240 8102 	bls.w	8000a34 <__udivmoddi4+0x28c>
 8000830:	3802      	subs	r0, #2
 8000832:	443c      	add	r4, r7
 8000834:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000838:	eba4 040e 	sub.w	r4, r4, lr
 800083c:	2600      	movs	r6, #0
 800083e:	b11d      	cbz	r5, 8000848 <__udivmoddi4+0xa0>
 8000840:	40d4      	lsrs	r4, r2
 8000842:	2300      	movs	r3, #0
 8000844:	e9c5 4300 	strd	r4, r3, [r5]
 8000848:	4631      	mov	r1, r6
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	b902      	cbnz	r2, 8000852 <__udivmoddi4+0xaa>
 8000850:	deff      	udf	#255	; 0xff
 8000852:	fab2 f282 	clz	r2, r2
 8000856:	2a00      	cmp	r2, #0
 8000858:	d150      	bne.n	80008fc <__udivmoddi4+0x154>
 800085a:	1bcb      	subs	r3, r1, r7
 800085c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000860:	fa1f f887 	uxth.w	r8, r7
 8000864:	2601      	movs	r6, #1
 8000866:	fbb3 fcfe 	udiv	ip, r3, lr
 800086a:	0c21      	lsrs	r1, r4, #16
 800086c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000870:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000874:	fb08 f30c 	mul.w	r3, r8, ip
 8000878:	428b      	cmp	r3, r1
 800087a:	d907      	bls.n	800088c <__udivmoddi4+0xe4>
 800087c:	1879      	adds	r1, r7, r1
 800087e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000882:	d202      	bcs.n	800088a <__udivmoddi4+0xe2>
 8000884:	428b      	cmp	r3, r1
 8000886:	f200 80e9 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 800088a:	4684      	mov	ip, r0
 800088c:	1ac9      	subs	r1, r1, r3
 800088e:	b2a3      	uxth	r3, r4
 8000890:	fbb1 f0fe 	udiv	r0, r1, lr
 8000894:	fb0e 1110 	mls	r1, lr, r0, r1
 8000898:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800089c:	fb08 f800 	mul.w	r8, r8, r0
 80008a0:	45a0      	cmp	r8, r4
 80008a2:	d907      	bls.n	80008b4 <__udivmoddi4+0x10c>
 80008a4:	193c      	adds	r4, r7, r4
 80008a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80008aa:	d202      	bcs.n	80008b2 <__udivmoddi4+0x10a>
 80008ac:	45a0      	cmp	r8, r4
 80008ae:	f200 80d9 	bhi.w	8000a64 <__udivmoddi4+0x2bc>
 80008b2:	4618      	mov	r0, r3
 80008b4:	eba4 0408 	sub.w	r4, r4, r8
 80008b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008bc:	e7bf      	b.n	800083e <__udivmoddi4+0x96>
 80008be:	428b      	cmp	r3, r1
 80008c0:	d909      	bls.n	80008d6 <__udivmoddi4+0x12e>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	f000 80b1 	beq.w	8000a2a <__udivmoddi4+0x282>
 80008c8:	2600      	movs	r6, #0
 80008ca:	e9c5 0100 	strd	r0, r1, [r5]
 80008ce:	4630      	mov	r0, r6
 80008d0:	4631      	mov	r1, r6
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	fab3 f683 	clz	r6, r3
 80008da:	2e00      	cmp	r6, #0
 80008dc:	d14a      	bne.n	8000974 <__udivmoddi4+0x1cc>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d302      	bcc.n	80008e8 <__udivmoddi4+0x140>
 80008e2:	4282      	cmp	r2, r0
 80008e4:	f200 80b8 	bhi.w	8000a58 <__udivmoddi4+0x2b0>
 80008e8:	1a84      	subs	r4, r0, r2
 80008ea:	eb61 0103 	sbc.w	r1, r1, r3
 80008ee:	2001      	movs	r0, #1
 80008f0:	468c      	mov	ip, r1
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d0a8      	beq.n	8000848 <__udivmoddi4+0xa0>
 80008f6:	e9c5 4c00 	strd	r4, ip, [r5]
 80008fa:	e7a5      	b.n	8000848 <__udivmoddi4+0xa0>
 80008fc:	f1c2 0320 	rsb	r3, r2, #32
 8000900:	fa20 f603 	lsr.w	r6, r0, r3
 8000904:	4097      	lsls	r7, r2
 8000906:	fa01 f002 	lsl.w	r0, r1, r2
 800090a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800090e:	40d9      	lsrs	r1, r3
 8000910:	4330      	orrs	r0, r6
 8000912:	0c03      	lsrs	r3, r0, #16
 8000914:	fbb1 f6fe 	udiv	r6, r1, lr
 8000918:	fa1f f887 	uxth.w	r8, r7
 800091c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000920:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000924:	fb06 f108 	mul.w	r1, r6, r8
 8000928:	4299      	cmp	r1, r3
 800092a:	fa04 f402 	lsl.w	r4, r4, r2
 800092e:	d909      	bls.n	8000944 <__udivmoddi4+0x19c>
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	f106 3cff 	add.w	ip, r6, #4294967295
 8000936:	f080 808d 	bcs.w	8000a54 <__udivmoddi4+0x2ac>
 800093a:	4299      	cmp	r1, r3
 800093c:	f240 808a 	bls.w	8000a54 <__udivmoddi4+0x2ac>
 8000940:	3e02      	subs	r6, #2
 8000942:	443b      	add	r3, r7
 8000944:	1a5b      	subs	r3, r3, r1
 8000946:	b281      	uxth	r1, r0
 8000948:	fbb3 f0fe 	udiv	r0, r3, lr
 800094c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000950:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000954:	fb00 f308 	mul.w	r3, r0, r8
 8000958:	428b      	cmp	r3, r1
 800095a:	d907      	bls.n	800096c <__udivmoddi4+0x1c4>
 800095c:	1879      	adds	r1, r7, r1
 800095e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000962:	d273      	bcs.n	8000a4c <__udivmoddi4+0x2a4>
 8000964:	428b      	cmp	r3, r1
 8000966:	d971      	bls.n	8000a4c <__udivmoddi4+0x2a4>
 8000968:	3802      	subs	r0, #2
 800096a:	4439      	add	r1, r7
 800096c:	1acb      	subs	r3, r1, r3
 800096e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000972:	e778      	b.n	8000866 <__udivmoddi4+0xbe>
 8000974:	f1c6 0c20 	rsb	ip, r6, #32
 8000978:	fa03 f406 	lsl.w	r4, r3, r6
 800097c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000980:	431c      	orrs	r4, r3
 8000982:	fa20 f70c 	lsr.w	r7, r0, ip
 8000986:	fa01 f306 	lsl.w	r3, r1, r6
 800098a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800098e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000992:	431f      	orrs	r7, r3
 8000994:	0c3b      	lsrs	r3, r7, #16
 8000996:	fbb1 f9fe 	udiv	r9, r1, lr
 800099a:	fa1f f884 	uxth.w	r8, r4
 800099e:	fb0e 1119 	mls	r1, lr, r9, r1
 80009a2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009a6:	fb09 fa08 	mul.w	sl, r9, r8
 80009aa:	458a      	cmp	sl, r1
 80009ac:	fa02 f206 	lsl.w	r2, r2, r6
 80009b0:	fa00 f306 	lsl.w	r3, r0, r6
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x220>
 80009b6:	1861      	adds	r1, r4, r1
 80009b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80009bc:	d248      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 80009be:	458a      	cmp	sl, r1
 80009c0:	d946      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 80009c2:	f1a9 0902 	sub.w	r9, r9, #2
 80009c6:	4421      	add	r1, r4
 80009c8:	eba1 010a 	sub.w	r1, r1, sl
 80009cc:	b2bf      	uxth	r7, r7
 80009ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80009d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009d6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009da:	fb00 f808 	mul.w	r8, r0, r8
 80009de:	45b8      	cmp	r8, r7
 80009e0:	d907      	bls.n	80009f2 <__udivmoddi4+0x24a>
 80009e2:	19e7      	adds	r7, r4, r7
 80009e4:	f100 31ff 	add.w	r1, r0, #4294967295
 80009e8:	d22e      	bcs.n	8000a48 <__udivmoddi4+0x2a0>
 80009ea:	45b8      	cmp	r8, r7
 80009ec:	d92c      	bls.n	8000a48 <__udivmoddi4+0x2a0>
 80009ee:	3802      	subs	r0, #2
 80009f0:	4427      	add	r7, r4
 80009f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009f6:	eba7 0708 	sub.w	r7, r7, r8
 80009fa:	fba0 8902 	umull	r8, r9, r0, r2
 80009fe:	454f      	cmp	r7, r9
 8000a00:	46c6      	mov	lr, r8
 8000a02:	4649      	mov	r1, r9
 8000a04:	d31a      	bcc.n	8000a3c <__udivmoddi4+0x294>
 8000a06:	d017      	beq.n	8000a38 <__udivmoddi4+0x290>
 8000a08:	b15d      	cbz	r5, 8000a22 <__udivmoddi4+0x27a>
 8000a0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a16:	40f2      	lsrs	r2, r6
 8000a18:	ea4c 0202 	orr.w	r2, ip, r2
 8000a1c:	40f7      	lsrs	r7, r6
 8000a1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a22:	2600      	movs	r6, #0
 8000a24:	4631      	mov	r1, r6
 8000a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2a:	462e      	mov	r6, r5
 8000a2c:	4628      	mov	r0, r5
 8000a2e:	e70b      	b.n	8000848 <__udivmoddi4+0xa0>
 8000a30:	4606      	mov	r6, r0
 8000a32:	e6e9      	b.n	8000808 <__udivmoddi4+0x60>
 8000a34:	4618      	mov	r0, r3
 8000a36:	e6fd      	b.n	8000834 <__udivmoddi4+0x8c>
 8000a38:	4543      	cmp	r3, r8
 8000a3a:	d2e5      	bcs.n	8000a08 <__udivmoddi4+0x260>
 8000a3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a40:	eb69 0104 	sbc.w	r1, r9, r4
 8000a44:	3801      	subs	r0, #1
 8000a46:	e7df      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a48:	4608      	mov	r0, r1
 8000a4a:	e7d2      	b.n	80009f2 <__udivmoddi4+0x24a>
 8000a4c:	4660      	mov	r0, ip
 8000a4e:	e78d      	b.n	800096c <__udivmoddi4+0x1c4>
 8000a50:	4681      	mov	r9, r0
 8000a52:	e7b9      	b.n	80009c8 <__udivmoddi4+0x220>
 8000a54:	4666      	mov	r6, ip
 8000a56:	e775      	b.n	8000944 <__udivmoddi4+0x19c>
 8000a58:	4630      	mov	r0, r6
 8000a5a:	e74a      	b.n	80008f2 <__udivmoddi4+0x14a>
 8000a5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a60:	4439      	add	r1, r7
 8000a62:	e713      	b.n	800088c <__udivmoddi4+0xe4>
 8000a64:	3802      	subs	r0, #2
 8000a66:	443c      	add	r4, r7
 8000a68:	e724      	b.n	80008b4 <__udivmoddi4+0x10c>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_idiv0>:
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a74:	4b3f      	ldr	r3, [pc, #252]	; (8000b74 <SystemInit+0x104>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7a:	4a3e      	ldr	r2, [pc, #248]	; (8000b74 <SystemInit+0x104>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a84:	4b3b      	ldr	r3, [pc, #236]	; (8000b74 <SystemInit+0x104>)
 8000a86:	691b      	ldr	r3, [r3, #16]
 8000a88:	4a3a      	ldr	r2, [pc, #232]	; (8000b74 <SystemInit+0x104>)
 8000a8a:	f043 0310 	orr.w	r3, r3, #16
 8000a8e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a90:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <SystemInit+0x108>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f003 030f 	and.w	r3, r3, #15
 8000a98:	2b06      	cmp	r3, #6
 8000a9a:	d807      	bhi.n	8000aac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a9c:	4b36      	ldr	r3, [pc, #216]	; (8000b78 <SystemInit+0x108>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f023 030f 	bic.w	r3, r3, #15
 8000aa4:	4a34      	ldr	r2, [pc, #208]	; (8000b78 <SystemInit+0x108>)
 8000aa6:	f043 0307 	orr.w	r3, r3, #7
 8000aaa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aac:	4b33      	ldr	r3, [pc, #204]	; (8000b7c <SystemInit+0x10c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a32      	ldr	r2, [pc, #200]	; (8000b7c <SystemInit+0x10c>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab8:	4b30      	ldr	r3, [pc, #192]	; (8000b7c <SystemInit+0x10c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000abe:	4b2f      	ldr	r3, [pc, #188]	; (8000b7c <SystemInit+0x10c>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	492e      	ldr	r1, [pc, #184]	; (8000b7c <SystemInit+0x10c>)
 8000ac4:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <SystemInit+0x110>)
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000aca:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <SystemInit+0x108>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f003 0308 	and.w	r3, r3, #8
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d007      	beq.n	8000ae6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ad6:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <SystemInit+0x108>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f023 030f 	bic.w	r3, r3, #15
 8000ade:	4a26      	ldr	r2, [pc, #152]	; (8000b78 <SystemInit+0x108>)
 8000ae0:	f043 0307 	orr.w	r3, r3, #7
 8000ae4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ae6:	4b25      	ldr	r3, [pc, #148]	; (8000b7c <SystemInit+0x10c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000aec:	4b23      	ldr	r3, [pc, #140]	; (8000b7c <SystemInit+0x10c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000af2:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <SystemInit+0x10c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000af8:	4b20      	ldr	r3, [pc, #128]	; (8000b7c <SystemInit+0x10c>)
 8000afa:	4a22      	ldr	r2, [pc, #136]	; (8000b84 <SystemInit+0x114>)
 8000afc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000afe:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <SystemInit+0x10c>)
 8000b00:	4a21      	ldr	r2, [pc, #132]	; (8000b88 <SystemInit+0x118>)
 8000b02:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b04:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <SystemInit+0x10c>)
 8000b06:	4a21      	ldr	r2, [pc, #132]	; (8000b8c <SystemInit+0x11c>)
 8000b08:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <SystemInit+0x10c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b10:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <SystemInit+0x10c>)
 8000b12:	4a1e      	ldr	r2, [pc, #120]	; (8000b8c <SystemInit+0x11c>)
 8000b14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <SystemInit+0x10c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b1c:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <SystemInit+0x10c>)
 8000b1e:	4a1b      	ldr	r2, [pc, #108]	; (8000b8c <SystemInit+0x11c>)
 8000b20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b22:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <SystemInit+0x10c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <SystemInit+0x10c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <SystemInit+0x10c>)
 8000b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <SystemInit+0x10c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <SystemInit+0x120>)
 8000b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3e:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <SystemInit+0x120>)
 8000b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b44:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <SystemInit+0x124>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <SystemInit+0x128>)
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b52:	d202      	bcs.n	8000b5a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <SystemInit+0x12c>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <SystemInit+0x130>)
 8000b5c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b60:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000b62:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <SystemInit+0x104>)
 8000b64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b68:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00
 8000b78:	52002000 	.word	0x52002000
 8000b7c:	58024400 	.word	0x58024400
 8000b80:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b84:	02020200 	.word	0x02020200
 8000b88:	01ff0000 	.word	0x01ff0000
 8000b8c:	01010280 	.word	0x01010280
 8000b90:	580000c0 	.word	0x580000c0
 8000b94:	5c001000 	.word	0x5c001000
 8000b98:	ffff0000 	.word	0xffff0000
 8000b9c:	51008108 	.word	0x51008108
 8000ba0:	52004000 	.word	0x52004000

08000ba4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000baa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bae:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000bb0:	bf00      	nop
 8000bb2:	4b54      	ldr	r3, [pc, #336]	; (8000d04 <main+0x160>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d004      	beq.n	8000bc8 <main+0x24>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	1e5a      	subs	r2, r3, #1
 8000bc2:	607a      	str	r2, [r7, #4]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	dcf4      	bgt.n	8000bb2 <main+0xe>
		;
	if (timeout < 0) {
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	da01      	bge.n	8000bd2 <main+0x2e>
		Error_Handler();
 8000bce:	f000 fe7d 	bl	80018cc <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd2:	f001 fa25 	bl	8002020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd6:	f000 f8cd 	bl	8000d74 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000bda:	4b4a      	ldr	r3, [pc, #296]	; (8000d04 <main+0x160>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be0:	4a48      	ldr	r2, [pc, #288]	; (8000d04 <main+0x160>)
 8000be2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000be6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bea:	4b46      	ldr	r3, [pc, #280]	; (8000d04 <main+0x160>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f003 f9a3 	bl	8003f44 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2000      	movs	r0, #0
 8000c02:	f003 f9b9 	bl	8003f78 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000c06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c0a:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000c0c:	bf00      	nop
 8000c0e:	4b3d      	ldr	r3, [pc, #244]	; (8000d04 <main+0x160>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d104      	bne.n	8000c24 <main+0x80>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	1e5a      	subs	r2, r3, #1
 8000c1e:	607a      	str	r2, [r7, #4]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	dcf4      	bgt.n	8000c0e <main+0x6a>
		;
	if (timeout < 0) {
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	da01      	bge.n	8000c2e <main+0x8a>
		Error_Handler();
 8000c2a:	f000 fe4f 	bl	80018cc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2e:	f000 fac3 	bl	80011b8 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000c32:	f000 f925 	bl	8000e80 <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8000c36:	f000 f987 	bl	8000f48 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c3a:	f000 f9d9 	bl	8000ff0 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000c3e:	f000 fa3d 	bl	80010bc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c42:	f000 fa87 	bl	8001154 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  GoHome();
 8000c46:	f000 fb8b 	bl	8001360 <GoHome>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c4a:	f008 ffc3 	bl	8009bd4 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of positionControlQueue */
  positionControlQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &positionControlQueue_attributes);
 8000c4e:	4a2e      	ldr	r2, [pc, #184]	; (8000d08 <main+0x164>)
 8000c50:	2102      	movs	r1, #2
 8000c52:	2010      	movs	r0, #16
 8000c54:	f009 f8b5 	bl	8009dc2 <osMessageQueueNew>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	4a2c      	ldr	r2, [pc, #176]	; (8000d0c <main+0x168>)
 8000c5c:	6013      	str	r3, [r2, #0]

  /* creation of positionCanQueue */
  positionCanQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &positionCanQueue_attributes);
 8000c5e:	4a2c      	ldr	r2, [pc, #176]	; (8000d10 <main+0x16c>)
 8000c60:	2102      	movs	r1, #2
 8000c62:	2010      	movs	r0, #16
 8000c64:	f009 f8ad 	bl	8009dc2 <osMessageQueueNew>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4a2a      	ldr	r2, [pc, #168]	; (8000d14 <main+0x170>)
 8000c6c:	6013      	str	r3, [r2, #0]

  /* creation of doneQueue */
  doneQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &doneQueue_attributes);
 8000c6e:	4a2a      	ldr	r2, [pc, #168]	; (8000d18 <main+0x174>)
 8000c70:	2102      	movs	r1, #2
 8000c72:	2010      	movs	r0, #16
 8000c74:	f009 f8a5 	bl	8009dc2 <osMessageQueueNew>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	4a28      	ldr	r2, [pc, #160]	; (8000d1c <main+0x178>)
 8000c7c:	6013      	str	r3, [r2, #0]

  /* creation of systemDiagnosisQueue */
  systemDiagnosisQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &systemDiagnosisQueue_attributes);
 8000c7e:	4a28      	ldr	r2, [pc, #160]	; (8000d20 <main+0x17c>)
 8000c80:	2102      	movs	r1, #2
 8000c82:	2010      	movs	r0, #16
 8000c84:	f009 f89d 	bl	8009dc2 <osMessageQueueNew>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	4a26      	ldr	r2, [pc, #152]	; (8000d24 <main+0x180>)
 8000c8c:	6013      	str	r3, [r2, #0]

  /* creation of canDiagnosisQueue */
  canDiagnosisQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &canDiagnosisQueue_attributes);
 8000c8e:	4a26      	ldr	r2, [pc, #152]	; (8000d28 <main+0x184>)
 8000c90:	2102      	movs	r1, #2
 8000c92:	2010      	movs	r0, #16
 8000c94:	f009 f895 	bl	8009dc2 <osMessageQueueNew>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	4a24      	ldr	r2, [pc, #144]	; (8000d2c <main+0x188>)
 8000c9c:	6013      	str	r3, [r2, #0]

  /* creation of interCanQueue */
  interCanQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &interCanQueue_attributes);
 8000c9e:	4a24      	ldr	r2, [pc, #144]	; (8000d30 <main+0x18c>)
 8000ca0:	2102      	movs	r1, #2
 8000ca2:	2010      	movs	r0, #16
 8000ca4:	f009 f88d 	bl	8009dc2 <osMessageQueueNew>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	4a22      	ldr	r2, [pc, #136]	; (8000d34 <main+0x190>)
 8000cac:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of readEncoderTask */
  readEncoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &readEncoderTask_attributes);
 8000cae:	4a22      	ldr	r2, [pc, #136]	; (8000d38 <main+0x194>)
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4822      	ldr	r0, [pc, #136]	; (8000d3c <main+0x198>)
 8000cb4:	f008 ffd8 	bl	8009c68 <osThreadNew>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	4a21      	ldr	r2, [pc, #132]	; (8000d40 <main+0x19c>)
 8000cbc:	6013      	str	r3, [r2, #0]

  /* creation of controlTask */
  controlTaskHandle = osThreadNew(StartControlTask, NULL, &controlTask_attributes);
 8000cbe:	4a21      	ldr	r2, [pc, #132]	; (8000d44 <main+0x1a0>)
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4821      	ldr	r0, [pc, #132]	; (8000d48 <main+0x1a4>)
 8000cc4:	f008 ffd0 	bl	8009c68 <osThreadNew>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	4a20      	ldr	r2, [pc, #128]	; (8000d4c <main+0x1a8>)
 8000ccc:	6013      	str	r3, [r2, #0]

  /* creation of diagnosisTask */
  diagnosisTaskHandle = osThreadNew(StartDiagnosisTask, NULL, &diagnosisTask_attributes);
 8000cce:	4a20      	ldr	r2, [pc, #128]	; (8000d50 <main+0x1ac>)
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4820      	ldr	r0, [pc, #128]	; (8000d54 <main+0x1b0>)
 8000cd4:	f008 ffc8 	bl	8009c68 <osThreadNew>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	4a1f      	ldr	r2, [pc, #124]	; (8000d58 <main+0x1b4>)
 8000cdc:	6013      	str	r3, [r2, #0]

  /* creation of canRxTask */
  canRxTaskHandle = osThreadNew(StartCanRxTask, NULL, &canRxTask_attributes);
 8000cde:	4a1f      	ldr	r2, [pc, #124]	; (8000d5c <main+0x1b8>)
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	481f      	ldr	r0, [pc, #124]	; (8000d60 <main+0x1bc>)
 8000ce4:	f008 ffc0 	bl	8009c68 <osThreadNew>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	4a1e      	ldr	r2, [pc, #120]	; (8000d64 <main+0x1c0>)
 8000cec:	6013      	str	r3, [r2, #0]

  /* creation of canTxTask */
  canTxTaskHandle = osThreadNew(StartCanTxTask, NULL, &canTxTask_attributes);
 8000cee:	4a1e      	ldr	r2, [pc, #120]	; (8000d68 <main+0x1c4>)
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	481e      	ldr	r0, [pc, #120]	; (8000d6c <main+0x1c8>)
 8000cf4:	f008 ffb8 	bl	8009c68 <osThreadNew>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	4a1d      	ldr	r2, [pc, #116]	; (8000d70 <main+0x1cc>)
 8000cfc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000cfe:	f008 ff8d 	bl	8009c1c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000d02:	e7fe      	b.n	8000d02 <main+0x15e>
 8000d04:	58024400 	.word	0x58024400
 8000d08:	08011470 	.word	0x08011470
 8000d0c:	240050c8 	.word	0x240050c8
 8000d10:	08011488 	.word	0x08011488
 8000d14:	24005014 	.word	0x24005014
 8000d18:	080114a0 	.word	0x080114a0
 8000d1c:	24005024 	.word	0x24005024
 8000d20:	080114b8 	.word	0x080114b8
 8000d24:	24004bb0 	.word	0x24004bb0
 8000d28:	080114d0 	.word	0x080114d0
 8000d2c:	24005018 	.word	0x24005018
 8000d30:	080114e8 	.word	0x080114e8
 8000d34:	2400501c 	.word	0x2400501c
 8000d38:	080113bc 	.word	0x080113bc
 8000d3c:	080015d9 	.word	0x080015d9
 8000d40:	24004fbc 	.word	0x24004fbc
 8000d44:	080113e0 	.word	0x080113e0
 8000d48:	08001671 	.word	0x08001671
 8000d4c:	240050cc 	.word	0x240050cc
 8000d50:	08011404 	.word	0x08011404
 8000d54:	08001845 	.word	0x08001845
 8000d58:	24005010 	.word	0x24005010
 8000d5c:	08011428 	.word	0x08011428
 8000d60:	08001855 	.word	0x08001855
 8000d64:	24005020 	.word	0x24005020
 8000d68:	0801144c 	.word	0x0801144c
 8000d6c:	080018bd 	.word	0x080018bd
 8000d70:	24004fc0 	.word	0x24004fc0

08000d74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b09c      	sub	sp, #112	; 0x70
 8000d78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7e:	224c      	movs	r2, #76	; 0x4c
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f00b feb8 	bl	800caf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	2220      	movs	r2, #32
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f00b feb2 	bl	800caf8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d94:	2004      	movs	r0, #4
 8000d96:	f003 fa4b 	bl	8004230 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	603b      	str	r3, [r7, #0]
 8000d9e:	4b35      	ldr	r3, [pc, #212]	; (8000e74 <SystemClock_Config+0x100>)
 8000da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da2:	4a34      	ldr	r2, [pc, #208]	; (8000e74 <SystemClock_Config+0x100>)
 8000da4:	f023 0301 	bic.w	r3, r3, #1
 8000da8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000daa:	4b32      	ldr	r3, [pc, #200]	; (8000e74 <SystemClock_Config+0x100>)
 8000dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	4b30      	ldr	r3, [pc, #192]	; (8000e78 <SystemClock_Config+0x104>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dbc:	4a2e      	ldr	r2, [pc, #184]	; (8000e78 <SystemClock_Config+0x104>)
 8000dbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc2:	6193      	str	r3, [r2, #24]
 8000dc4:	4b2c      	ldr	r3, [pc, #176]	; (8000e78 <SystemClock_Config+0x104>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dcc:	603b      	str	r3, [r7, #0]
 8000dce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dd0:	bf00      	nop
 8000dd2:	4b29      	ldr	r3, [pc, #164]	; (8000e78 <SystemClock_Config+0x104>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dde:	d1f8      	bne.n	8000dd2 <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000de0:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <SystemClock_Config+0x108>)
 8000de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de4:	f023 0303 	bic.w	r3, r3, #3
 8000de8:	4a24      	ldr	r2, [pc, #144]	; (8000e7c <SystemClock_Config+0x108>)
 8000dea:	f043 0302 	orr.w	r3, r3, #2
 8000dee:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000df0:	2301      	movs	r3, #1
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000df4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000df8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e02:	2301      	movs	r3, #1
 8000e04:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000e06:	2314      	movs	r3, #20
 8000e08:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e0e:	2304      	movs	r3, #4
 8000e10:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e12:	2302      	movs	r3, #2
 8000e14:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e16:	230c      	movs	r3, #12
 8000e18:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e26:	4618      	mov	r0, r3
 8000e28:	f003 fa6c 	bl	8004304 <HAL_RCC_OscConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e32:	f000 fd4b 	bl	80018cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e36:	233f      	movs	r3, #63	; 0x3f
 8000e38:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e4a:	2340      	movs	r3, #64	; 0x40
 8000e4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	2101      	movs	r1, #1
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f003 fe62 	bl	8004b24 <HAL_RCC_ClockConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000e66:	f000 fd31 	bl	80018cc <Error_Handler>
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	3770      	adds	r7, #112	; 0x70
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	58000400 	.word	0x58000400
 8000e78:	58024800 	.word	0x58024800
 8000e7c:	58024400 	.word	0x58024400

08000e80 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000e84:	4b2e      	ldr	r3, [pc, #184]	; (8000f40 <MX_FDCAN1_Init+0xc0>)
 8000e86:	4a2f      	ldr	r2, [pc, #188]	; (8000f44 <MX_FDCAN1_Init+0xc4>)
 8000e88:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e8a:	4b2d      	ldr	r3, [pc, #180]	; (8000f40 <MX_FDCAN1_Init+0xc0>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e90:	4b2b      	ldr	r3, [pc, #172]	; (8000f40 <MX_FDCAN1_Init+0xc0>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000e96:	4b2a      	ldr	r3, [pc, #168]	; (8000f40 <MX_FDCAN1_Init+0xc0>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e9c:	4b28      	ldr	r3, [pc, #160]	; (8000f40 <MX_FDCAN1_Init+0xc0>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000ea2:	4b27      	ldr	r3, [pc, #156]	; (8000f40 <MX_FDCAN1_Init+0xc0>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 0x1;
 8000ea8:	4b25      	ldr	r3, [pc, #148]	; (8000f40 <MX_FDCAN1_Init+0xc0>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 0x8;
 8000eae:	4b24      	ldr	r3, [pc, #144]	; (8000f40 <MX_FDCAN1_Init+0xc0>)
 8000eb0:	2208      	movs	r2, #8
 8000eb2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x1F;
 8000eb4:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <MX_FDCAN1_Init+0xc0>)
 8000eb6:	221f      	movs	r2, #31
 8000eb8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 0x8;
 8000eba:	4b21      	ldr	r3, [pc, #132]	; (8000f40 <MX_FDCAN1_Init+0xc0>)
 8000ebc:	2208      	movs	r2, #8
 8000ebe:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000ec0:	4b1f      	ldr	r3, [pc, #124]	; (8000f40 <MX_FDCAN1_Init+0xc0>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000ec6:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <MX_FDCAN1_Init+0xc0>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000ecc:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <MX_FDCAN1_Init+0xc0>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <MX_FDCAN1_Init+0xc0>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000ed8:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <MX_FDCAN1_Init+0xc0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000ede:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <MX_FDCAN1_Init+0xc0>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ee4:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <MX_FDCAN1_Init+0xc0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <MX_FDCAN1_Init+0xc0>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000ef0:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <MX_FDCAN1_Init+0xc0>)
 8000ef2:	2204      	movs	r2, #4
 8000ef4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000ef6:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <MX_FDCAN1_Init+0xc0>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000efc:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <MX_FDCAN1_Init+0xc0>)
 8000efe:	2204      	movs	r2, #4
 8000f00:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <MX_FDCAN1_Init+0xc0>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f08:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <MX_FDCAN1_Init+0xc0>)
 8000f0a:	2204      	movs	r2, #4
 8000f0c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_FDCAN1_Init+0xc0>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000f14:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <MX_FDCAN1_Init+0xc0>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_FDCAN1_Init+0xc0>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f20:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <MX_FDCAN1_Init+0xc0>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_FDCAN1_Init+0xc0>)
 8000f28:	2204      	movs	r2, #4
 8000f2a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000f2c:	4804      	ldr	r0, [pc, #16]	; (8000f40 <MX_FDCAN1_Init+0xc0>)
 8000f2e:	f001 ffab 	bl	8002e88 <HAL_FDCAN_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000f38:	f000 fcc8 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	24005028 	.word	0x24005028
 8000f44:	4000a000 	.word	0x4000a000

08000f48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08c      	sub	sp, #48	; 0x30
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f4e:	f107 030c 	add.w	r3, r7, #12
 8000f52:	2224      	movs	r2, #36	; 0x24
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f00b fdce 	bl	800caf8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f66:	4b21      	ldr	r3, [pc, #132]	; (8000fec <MX_TIM2_Init+0xa4>)
 8000f68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f6e:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <MX_TIM2_Init+0xa4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f74:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <MX_TIM2_Init+0xa4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <MX_TIM2_Init+0xa4>)
 8000f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f82:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <MX_TIM2_Init+0xa4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f88:	4b18      	ldr	r3, [pc, #96]	; (8000fec <MX_TIM2_Init+0xa4>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f96:	2301      	movs	r3, #1
 8000f98:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000f9e:	230a      	movs	r3, #10
 8000fa0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000fae:	230a      	movs	r3, #10
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	480c      	ldr	r0, [pc, #48]	; (8000fec <MX_TIM2_Init+0xa4>)
 8000fba:	f005 fe97 	bl	8006cec <HAL_TIM_Encoder_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000fc4:	f000 fc82 	bl	80018cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_TIM2_Init+0xa4>)
 8000fd6:	f006 fe53 	bl	8007c80 <HAL_TIMEx_MasterConfigSynchronization>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000fe0:	f000 fc74 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fe4:	bf00      	nop
 8000fe6:	3730      	adds	r7, #48	; 0x30
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	240050d0 	.word	0x240050d0

08000ff0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff6:	f107 031c 	add.w	r3, r7, #28
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001002:	463b      	mov	r3, r7
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
 8001010:	615a      	str	r2, [r3, #20]
 8001012:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001014:	4b27      	ldr	r3, [pc, #156]	; (80010b4 <MX_TIM3_Init+0xc4>)
 8001016:	4a28      	ldr	r2, [pc, #160]	; (80010b8 <MX_TIM3_Init+0xc8>)
 8001018:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 800101a:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <MX_TIM3_Init+0xc4>)
 800101c:	2203      	movs	r2, #3
 800101e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001020:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <MX_TIM3_Init+0xc4>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001026:	4b23      	ldr	r3, [pc, #140]	; (80010b4 <MX_TIM3_Init+0xc4>)
 8001028:	f240 32e7 	movw	r2, #999	; 0x3e7
 800102c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <MX_TIM3_Init+0xc4>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001034:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <MX_TIM3_Init+0xc4>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800103a:	481e      	ldr	r0, [pc, #120]	; (80010b4 <MX_TIM3_Init+0xc4>)
 800103c:	f005 fc60 	bl	8006900 <HAL_TIM_PWM_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001046:	f000 fc41 	bl	80018cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001052:	f107 031c 	add.w	r3, r7, #28
 8001056:	4619      	mov	r1, r3
 8001058:	4816      	ldr	r0, [pc, #88]	; (80010b4 <MX_TIM3_Init+0xc4>)
 800105a:	f006 fe11 	bl	8007c80 <HAL_TIMEx_MasterConfigSynchronization>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001064:	f000 fc32 	bl	80018cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001068:	2360      	movs	r3, #96	; 0x60
 800106a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001074:	2300      	movs	r3, #0
 8001076:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001078:	463b      	mov	r3, r7
 800107a:	2208      	movs	r2, #8
 800107c:	4619      	mov	r1, r3
 800107e:	480d      	ldr	r0, [pc, #52]	; (80010b4 <MX_TIM3_Init+0xc4>)
 8001080:	f006 f92e 	bl	80072e0 <HAL_TIM_PWM_ConfigChannel>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800108a:	f000 fc1f 	bl	80018cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800108e:	463b      	mov	r3, r7
 8001090:	220c      	movs	r2, #12
 8001092:	4619      	mov	r1, r3
 8001094:	4807      	ldr	r0, [pc, #28]	; (80010b4 <MX_TIM3_Init+0xc4>)
 8001096:	f006 f923 	bl	80072e0 <HAL_TIM_PWM_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80010a0:	f000 fc14 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010a4:	4803      	ldr	r0, [pc, #12]	; (80010b4 <MX_TIM3_Init+0xc4>)
 80010a6:	f000 fd35 	bl	8001b14 <HAL_TIM_MspPostInit>

}
 80010aa:	bf00      	nop
 80010ac:	3728      	adds	r7, #40	; 0x28
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	24004fc4 	.word	0x24004fc4
 80010b8:	40000400 	.word	0x40000400

080010bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010c0:	4b22      	ldr	r3, [pc, #136]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010c2:	4a23      	ldr	r2, [pc, #140]	; (8001150 <MX_USART3_UART_Init+0x94>)
 80010c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010c6:	4b21      	ldr	r3, [pc, #132]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010ce:	4b1f      	ldr	r3, [pc, #124]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010da:	4b1c      	ldr	r3, [pc, #112]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010e0:	4b1a      	ldr	r3, [pc, #104]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010e2:	220c      	movs	r2, #12
 80010e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e6:	4b19      	ldr	r3, [pc, #100]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <MX_USART3_UART_Init+0x90>)
 8001100:	2200      	movs	r2, #0
 8001102:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001104:	4811      	ldr	r0, [pc, #68]	; (800114c <MX_USART3_UART_Init+0x90>)
 8001106:	f006 fe61 	bl	8007dcc <HAL_UART_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001110:	f000 fbdc 	bl	80018cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001114:	2100      	movs	r1, #0
 8001116:	480d      	ldr	r0, [pc, #52]	; (800114c <MX_USART3_UART_Init+0x90>)
 8001118:	f008 f99f 	bl	800945a <HAL_UARTEx_SetTxFifoThreshold>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001122:	f000 fbd3 	bl	80018cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001126:	2100      	movs	r1, #0
 8001128:	4808      	ldr	r0, [pc, #32]	; (800114c <MX_USART3_UART_Init+0x90>)
 800112a:	f008 f9d4 	bl	80094d6 <HAL_UARTEx_SetRxFifoThreshold>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001134:	f000 fbca 	bl	80018cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001138:	4804      	ldr	r0, [pc, #16]	; (800114c <MX_USART3_UART_Init+0x90>)
 800113a:	f008 f955 	bl	80093e8 <HAL_UARTEx_DisableFifoMode>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001144:	f000 fbc2 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	24004b20 	.word	0x24004b20
 8001150:	40004800 	.word	0x40004800

08001154 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001158:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800115a:	4a16      	ldr	r2, [pc, #88]	; (80011b4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800115c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800115e:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001160:	2209      	movs	r2, #9
 8001162:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001166:	2202      	movs	r2, #2
 8001168:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001172:	2202      	movs	r2, #2
 8001174:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001178:	2200      	movs	r2, #0
 800117a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800117e:	2200      	movs	r2, #0
 8001180:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001184:	2200      	movs	r2, #0
 8001186:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800118a:	2201      	movs	r2, #1
 800118c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001190:	2201      	movs	r2, #1
 8001192:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001196:	2200      	movs	r2, #0
 8001198:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800119c:	f002 ff00 	bl	8003fa0 <HAL_PCD_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80011a6:	f000 fb91 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	24004bb4 	.word	0x24004bb4
 80011b4:	40080000 	.word	0x40080000

080011b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08c      	sub	sp, #48	; 0x30
 80011bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ce:	4b5d      	ldr	r3, [pc, #372]	; (8001344 <MX_GPIO_Init+0x18c>)
 80011d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d4:	4a5b      	ldr	r2, [pc, #364]	; (8001344 <MX_GPIO_Init+0x18c>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011de:	4b59      	ldr	r3, [pc, #356]	; (8001344 <MX_GPIO_Init+0x18c>)
 80011e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	61bb      	str	r3, [r7, #24]
 80011ea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ec:	4b55      	ldr	r3, [pc, #340]	; (8001344 <MX_GPIO_Init+0x18c>)
 80011ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f2:	4a54      	ldr	r2, [pc, #336]	; (8001344 <MX_GPIO_Init+0x18c>)
 80011f4:	f043 0320 	orr.w	r3, r3, #32
 80011f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011fc:	4b51      	ldr	r3, [pc, #324]	; (8001344 <MX_GPIO_Init+0x18c>)
 80011fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001202:	f003 0320 	and.w	r3, r3, #32
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800120a:	4b4e      	ldr	r3, [pc, #312]	; (8001344 <MX_GPIO_Init+0x18c>)
 800120c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001210:	4a4c      	ldr	r2, [pc, #304]	; (8001344 <MX_GPIO_Init+0x18c>)
 8001212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001216:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800121a:	4b4a      	ldr	r3, [pc, #296]	; (8001344 <MX_GPIO_Init+0x18c>)
 800121c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001228:	4b46      	ldr	r3, [pc, #280]	; (8001344 <MX_GPIO_Init+0x18c>)
 800122a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122e:	4a45      	ldr	r2, [pc, #276]	; (8001344 <MX_GPIO_Init+0x18c>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001238:	4b42      	ldr	r3, [pc, #264]	; (8001344 <MX_GPIO_Init+0x18c>)
 800123a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001246:	4b3f      	ldr	r3, [pc, #252]	; (8001344 <MX_GPIO_Init+0x18c>)
 8001248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124c:	4a3d      	ldr	r2, [pc, #244]	; (8001344 <MX_GPIO_Init+0x18c>)
 800124e:	f043 0302 	orr.w	r3, r3, #2
 8001252:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001256:	4b3b      	ldr	r3, [pc, #236]	; (8001344 <MX_GPIO_Init+0x18c>)
 8001258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001264:	4b37      	ldr	r3, [pc, #220]	; (8001344 <MX_GPIO_Init+0x18c>)
 8001266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126a:	4a36      	ldr	r2, [pc, #216]	; (8001344 <MX_GPIO_Init+0x18c>)
 800126c:	f043 0308 	orr.w	r3, r3, #8
 8001270:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001274:	4b33      	ldr	r3, [pc, #204]	; (8001344 <MX_GPIO_Init+0x18c>)
 8001276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001282:	4b30      	ldr	r3, [pc, #192]	; (8001344 <MX_GPIO_Init+0x18c>)
 8001284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001288:	4a2e      	ldr	r2, [pc, #184]	; (8001344 <MX_GPIO_Init+0x18c>)
 800128a:	f043 0310 	orr.w	r3, r3, #16
 800128e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001292:	4b2c      	ldr	r3, [pc, #176]	; (8001344 <MX_GPIO_Init+0x18c>)
 8001294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001298:	f003 0310 	and.w	r3, r3, #16
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	f244 0101 	movw	r1, #16385	; 0x4001
 80012a6:	4828      	ldr	r0, [pc, #160]	; (8001348 <MX_GPIO_Init+0x190>)
 80012a8:	f002 fe32 	bl	8003f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2102      	movs	r1, #2
 80012b0:	4826      	ldr	r0, [pc, #152]	; (800134c <MX_GPIO_Init+0x194>)
 80012b2:	f002 fe2d 	bl	8003f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012bc:	2300      	movs	r3, #0
 80012be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	4619      	mov	r1, r3
 80012ca:	4821      	ldr	r0, [pc, #132]	; (8001350 <MX_GPIO_Init+0x198>)
 80012cc:	f002 fc58 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin;
 80012d0:	f44f 7320 	mov.w	r3, #640	; 0x280
 80012d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d6:	2300      	movs	r3, #0
 80012d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012da:	2302      	movs	r3, #2
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	4619      	mov	r1, r3
 80012e4:	481b      	ldr	r0, [pc, #108]	; (8001354 <MX_GPIO_Init+0x19c>)
 80012e6:	f002 fc4b 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : Limit_Switch_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_Pin;
 80012ea:	2308      	movs	r3, #8
 80012ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012f2:	2302      	movs	r3, #2
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Limit_Switch_GPIO_Port, &GPIO_InitStruct);
 80012f6:	f107 031c 	add.w	r3, r7, #28
 80012fa:	4619      	mov	r1, r3
 80012fc:	4816      	ldr	r0, [pc, #88]	; (8001358 <MX_GPIO_Init+0x1a0>)
 80012fe:	f002 fc3f 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001302:	f244 0301 	movw	r3, #16385	; 0x4001
 8001306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001308:	2301      	movs	r3, #1
 800130a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4619      	mov	r1, r3
 800131a:	480b      	ldr	r0, [pc, #44]	; (8001348 <MX_GPIO_Init+0x190>)
 800131c:	f002 fc30 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001320:	2302      	movs	r3, #2
 8001322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001324:	2301      	movs	r3, #1
 8001326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	4619      	mov	r1, r3
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_GPIO_Init+0x194>)
 8001338:	f002 fc22 	bl	8003b80 <HAL_GPIO_Init>

}
 800133c:	bf00      	nop
 800133e:	3730      	adds	r7, #48	; 0x30
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	58024400 	.word	0x58024400
 8001348:	58020400 	.word	0x58020400
 800134c:	58021000 	.word	0x58021000
 8001350:	58020800 	.word	0x58020800
 8001354:	58021400 	.word	0x58021400
 8001358:	58020000 	.word	0x58020000
 800135c:	00000000 	.word	0x00000000

08001360 <GoHome>:

/* USER CODE BEGIN 4 */
void GoHome(void) {
 8001360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001362:	b0a3      	sub	sp, #140	; 0x8c
 8001364:	af12      	add	r7, sp, #72	; 0x48
	//Deten el encoder
	HAL_TIM_Encoder_Stop(&htim2, TIM_CHANNEL_ALL);
 8001366:	213c      	movs	r1, #60	; 0x3c
 8001368:	487d      	ldr	r0, [pc, #500]	; (8001560 <GoHome+0x200>)
 800136a:	f005 fdf3 	bl	8006f54 <HAL_TIM_Encoder_Stop>

	uint8_t MSG[50] = { '\0' };
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	f107 0308 	add.w	r3, r7, #8
 8001376:	222e      	movs	r2, #46	; 0x2e
 8001378:	2100      	movs	r1, #0
 800137a:	4618      	mov	r0, r3
 800137c:	f00b fbbc 	bl	800caf8 <memset>
	sprintf(MSG, "Limit Switch pressed\n");
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	4978      	ldr	r1, [pc, #480]	; (8001564 <GoHome+0x204>)
 8001384:	4618      	mov	r0, r3
 8001386:	f00c fa0b 	bl	800d7a0 <siprintf>

	//Pon el motor en reversa
	setPWM(htim3, reversePWM, 255, 255);
 800138a:	4e77      	ldr	r6, [pc, #476]	; (8001568 <GoHome+0x208>)
 800138c:	23ff      	movs	r3, #255	; 0xff
 800138e:	9311      	str	r3, [sp, #68]	; 0x44
 8001390:	23ff      	movs	r3, #255	; 0xff
 8001392:	9310      	str	r3, [sp, #64]	; 0x40
 8001394:	230c      	movs	r3, #12
 8001396:	930f      	str	r3, [sp, #60]	; 0x3c
 8001398:	466d      	mov	r5, sp
 800139a:	f106 0410 	add.w	r4, r6, #16
 800139e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013aa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80013ae:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80013b2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80013b6:	f000 f8df 	bl	8001578 <setPWM>
	setPWM(htim3, forwardPWM, 255, 0);
 80013ba:	4e6b      	ldr	r6, [pc, #428]	; (8001568 <GoHome+0x208>)
 80013bc:	2300      	movs	r3, #0
 80013be:	9311      	str	r3, [sp, #68]	; 0x44
 80013c0:	23ff      	movs	r3, #255	; 0xff
 80013c2:	9310      	str	r3, [sp, #64]	; 0x40
 80013c4:	2308      	movs	r3, #8
 80013c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80013c8:	466d      	mov	r5, sp
 80013ca:	f106 0410 	add.w	r4, r6, #16
 80013ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013da:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80013de:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80013e2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80013e6:	f000 f8c7 	bl	8001578 <setPWM>

	//Espera a que el switch se presione
	while (HAL_GPIO_ReadPin(Limit_Switch_GPIO_Port, Limit_Switch_Pin));
 80013ea:	bf00      	nop
 80013ec:	2108      	movs	r1, #8
 80013ee:	485f      	ldr	r0, [pc, #380]	; (800156c <GoHome+0x20c>)
 80013f0:	f002 fd76 	bl	8003ee0 <HAL_GPIO_ReadPin>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f8      	bne.n	80013ec <GoHome+0x8c>

	HAL_UART_Transmit(&huart3, MSG, sizeof(MSG), 100);
 80013fa:	1d39      	adds	r1, r7, #4
 80013fc:	2364      	movs	r3, #100	; 0x64
 80013fe:	2232      	movs	r2, #50	; 0x32
 8001400:	485b      	ldr	r0, [pc, #364]	; (8001570 <GoHome+0x210>)
 8001402:	f006 fd33 	bl	8007e6c <HAL_UART_Transmit>

	//Hacer que el motor se mueve en reversa 2cm
	setPWM(htim3, reversePWM, 255, 0);
 8001406:	4e58      	ldr	r6, [pc, #352]	; (8001568 <GoHome+0x208>)
 8001408:	2300      	movs	r3, #0
 800140a:	9311      	str	r3, [sp, #68]	; 0x44
 800140c:	23ff      	movs	r3, #255	; 0xff
 800140e:	9310      	str	r3, [sp, #64]	; 0x40
 8001410:	230c      	movs	r3, #12
 8001412:	930f      	str	r3, [sp, #60]	; 0x3c
 8001414:	466d      	mov	r5, sp
 8001416:	f106 0410 	add.w	r4, r6, #16
 800141a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800141c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800141e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001422:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001424:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001426:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800142a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800142e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001432:	f000 f8a1 	bl	8001578 <setPWM>
	setPWM(htim3, forwardPWM, 255, 255);
 8001436:	4e4c      	ldr	r6, [pc, #304]	; (8001568 <GoHome+0x208>)
 8001438:	23ff      	movs	r3, #255	; 0xff
 800143a:	9311      	str	r3, [sp, #68]	; 0x44
 800143c:	23ff      	movs	r3, #255	; 0xff
 800143e:	9310      	str	r3, [sp, #64]	; 0x40
 8001440:	2308      	movs	r3, #8
 8001442:	930f      	str	r3, [sp, #60]	; 0x3c
 8001444:	466d      	mov	r5, sp
 8001446:	f106 0410 	add.w	r4, r6, #16
 800144a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800144c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800144e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001450:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001452:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001454:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001456:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800145a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800145e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001462:	f000 f889 	bl	8001578 <setPWM>
	int32_t steps;
	float cm = 0;
 8001466:	f04f 0300 	mov.w	r3, #0
 800146a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800146c:	213c      	movs	r1, #60	; 0x3c
 800146e:	483c      	ldr	r0, [pc, #240]	; (8001560 <GoHome+0x200>)
 8001470:	f005 fce2 	bl	8006e38 <HAL_TIM_Encoder_Start>
	//Pon valor del encoder en 0
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001474:	4b3a      	ldr	r3, [pc, #232]	; (8001560 <GoHome+0x200>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2200      	movs	r2, #0
 800147a:	625a      	str	r2, [r3, #36]	; 0x24
	while (cm < 2) {
 800147c:	e024      	b.n	80014c8 <GoHome+0x168>
		steps = __HAL_TIM_GET_COUNTER(&htim2);
 800147e:	4b38      	ldr	r3, [pc, #224]	; (8001560 <GoHome+0x200>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	63bb      	str	r3, [r7, #56]	; 0x38
		cm = steps * 0.4 / 497;
 8001486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001488:	ee07 3a90 	vmov	s15, r3
 800148c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001490:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8001550 <GoHome+0x1f0>
 8001494:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001498:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8001558 <GoHome+0x1f8>
 800149c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014a0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014a4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		sprintf(MSG, "Centimeters = %f\n\r    ", cm);
 80014a8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80014ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014b0:	1d38      	adds	r0, r7, #4
 80014b2:	ec53 2b17 	vmov	r2, r3, d7
 80014b6:	492f      	ldr	r1, [pc, #188]	; (8001574 <GoHome+0x214>)
 80014b8:	f00c f972 	bl	800d7a0 <siprintf>
		HAL_UART_Transmit(&huart3, MSG, sizeof(MSG), 40);
 80014bc:	1d39      	adds	r1, r7, #4
 80014be:	2328      	movs	r3, #40	; 0x28
 80014c0:	2232      	movs	r2, #50	; 0x32
 80014c2:	482b      	ldr	r0, [pc, #172]	; (8001570 <GoHome+0x210>)
 80014c4:	f006 fcd2 	bl	8007e6c <HAL_UART_Transmit>
	while (cm < 2) {
 80014c8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80014cc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80014d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d8:	d4d1      	bmi.n	800147e <GoHome+0x11e>
	}
	//volver a poner el valor del encoder en 0
	setPWM(htim3, reversePWM, 255, 0);
 80014da:	4e23      	ldr	r6, [pc, #140]	; (8001568 <GoHome+0x208>)
 80014dc:	2300      	movs	r3, #0
 80014de:	9311      	str	r3, [sp, #68]	; 0x44
 80014e0:	23ff      	movs	r3, #255	; 0xff
 80014e2:	9310      	str	r3, [sp, #64]	; 0x40
 80014e4:	230c      	movs	r3, #12
 80014e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80014e8:	466d      	mov	r5, sp
 80014ea:	f106 0410 	add.w	r4, r6, #16
 80014ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014fa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80014fe:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001502:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001506:	f000 f837 	bl	8001578 <setPWM>
	setPWM(htim3, forwardPWM, 255, 0);
 800150a:	4e17      	ldr	r6, [pc, #92]	; (8001568 <GoHome+0x208>)
 800150c:	2300      	movs	r3, #0
 800150e:	9311      	str	r3, [sp, #68]	; 0x44
 8001510:	23ff      	movs	r3, #255	; 0xff
 8001512:	9310      	str	r3, [sp, #64]	; 0x40
 8001514:	2308      	movs	r3, #8
 8001516:	930f      	str	r3, [sp, #60]	; 0x3c
 8001518:	466d      	mov	r5, sp
 800151a:	f106 0410 	add.w	r4, r6, #16
 800151e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001520:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001524:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001528:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800152a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800152e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001532:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001536:	f000 f81f 	bl	8001578 <setPWM>
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <GoHome+0x200>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2200      	movs	r2, #0
 8001540:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001542:	bf00      	nop
 8001544:	3744      	adds	r7, #68	; 0x44
 8001546:	46bd      	mov	sp, r7
 8001548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800154a:	bf00      	nop
 800154c:	f3af 8000 	nop.w
 8001550:	9999999a 	.word	0x9999999a
 8001554:	3fd99999 	.word	0x3fd99999
 8001558:	00000000 	.word	0x00000000
 800155c:	407f1000 	.word	0x407f1000
 8001560:	240050d0 	.word	0x240050d0
 8001564:	08011300 	.word	0x08011300
 8001568:	24004fc4 	.word	0x24004fc4
 800156c:	58020000 	.word	0x58020000
 8001570:	24004b20 	.word	0x24004b20
 8001574:	08011318 	.word	0x08011318

08001578 <setPWM>:

void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint16_t pulse) {
 8001578:	b084      	sub	sp, #16
 800157a:	b580      	push	{r7, lr}
 800157c:	b088      	sub	sp, #32
 800157e:	af00      	add	r7, sp, #0
 8001580:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001584:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 8001588:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800158a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800158e:	f005 fb17 	bl	8006bc0 <HAL_TIM_PWM_Stop>
	TIM_OC_InitTypeDef sConfigOC;
	timer.Init.Period = period; // set the period duration
 8001592:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8001596:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
 8001598:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800159c:	f005 f9b0 	bl	8006900 <HAL_TIM_PWM_Init>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a0:	2360      	movs	r3, #96	; 0x60
 80015a2:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = pulse; // set the pulse duration
 80015a4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80015a8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80015b6:	4619      	mov	r1, r3
 80015b8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80015bc:	f005 fe90 	bl	80072e0 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 80015c0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80015c2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80015c6:	f005 f9f3 	bl	80069b0 <HAL_TIM_PWM_Start>
}
 80015ca:	bf00      	nop
 80015cc:	3720      	adds	r7, #32
 80015ce:	46bd      	mov	sp, r7
 80015d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015d4:	b004      	add	sp, #16
 80015d6:	4770      	bx	lr

080015d8 <StartEncoderTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b092      	sub	sp, #72	; 0x48
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t MSG[50] = { '\0' };
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	f107 0310 	add.w	r3, r7, #16
 80015e8:	222e      	movs	r2, #46	; 0x2e
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f00b fa83 	bl	800caf8 <memset>
	int32_t steps=0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t mm=0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t ret[4] = { '\0' };
 80015fa:	2300      	movs	r3, #0
 80015fc:	60bb      	str	r3, [r7, #8]
	//HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
	/* Infinite loop */
	for (;;) {

		steps = __HAL_TIM_GET_COUNTER(&htim2);
 80015fe:	4b17      	ldr	r3, [pc, #92]	; (800165c <StartEncoderTask+0x84>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	647b      	str	r3, [r7, #68]	; 0x44
		mm = steps * 4 / 497;
 8001606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4a15      	ldr	r2, [pc, #84]	; (8001660 <StartEncoderTask+0x88>)
 800160c:	fb82 1203 	smull	r1, r2, r2, r3
 8001610:	11d2      	asrs	r2, r2, #7
 8001612:	17db      	asrs	r3, r3, #31
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	643b      	str	r3, [r7, #64]	; 0x40
		sprintf(MSG, "Milimeters = %d\n\r    ", mm);
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800161e:	4911      	ldr	r1, [pc, #68]	; (8001664 <StartEncoderTask+0x8c>)
 8001620:	4618      	mov	r0, r3
 8001622:	f00c f8bd 	bl	800d7a0 <siprintf>
		HAL_UART_Transmit(&huart3, MSG, sizeof(MSG), 100);
 8001626:	f107 010c 	add.w	r1, r7, #12
 800162a:	2364      	movs	r3, #100	; 0x64
 800162c:	2232      	movs	r2, #50	; 0x32
 800162e:	480e      	ldr	r0, [pc, #56]	; (8001668 <StartEncoderTask+0x90>)
 8001630:	f006 fc1c 	bl	8007e6c <HAL_UART_Transmit>
		itoa(mm, ret,10);
 8001634:	f107 0308 	add.w	r3, r7, #8
 8001638:	220a      	movs	r2, #10
 800163a:	4619      	mov	r1, r3
 800163c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800163e:	f00b fa4b 	bl	800cad8 <itoa>
		osMessageQueuePut(positionControlQueueHandle, ret, 5, 100);
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <StartEncoderTask+0x94>)
 8001644:	6818      	ldr	r0, [r3, #0]
 8001646:	f107 0108 	add.w	r1, r7, #8
 800164a:	2364      	movs	r3, #100	; 0x64
 800164c:	2205      	movs	r2, #5
 800164e:	f008 fc2b 	bl	8009ea8 <osMessageQueuePut>
		osDelay(20);
 8001652:	2014      	movs	r0, #20
 8001654:	f008 fb9a 	bl	8009d8c <osDelay>
	for (;;) {
 8001658:	e7d1      	b.n	80015fe <StartEncoderTask+0x26>
 800165a:	bf00      	nop
 800165c:	240050d0 	.word	0x240050d0
 8001660:	41ee7ca7 	.word	0x41ee7ca7
 8001664:	08011330 	.word	0x08011330
 8001668:	24004b20 	.word	0x24004b20
 800166c:	240050c8 	.word	0x240050c8

08001670 <StartControlTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControlTask */
void StartControlTask(void *argument)
{
 8001670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001672:	b099      	sub	sp, #100	; 0x64
 8001674:	af12      	add	r7, sp, #72	; 0x48
 8001676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControlTask */
	uint8_t desPos[4] = { "\0" };
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
	uint8_t pos[4] = { "\0" };
 800167c:	2300      	movs	r3, #0
 800167e:	60bb      	str	r3, [r7, #8]
	float num1=0;
 8001680:	f04f 0300 	mov.w	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
	int num2=0;
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
	/* Infinite loop */
	for (;;) {
		osMessageQueueGet(positionControlQueueHandle, &pos, 5, 100);
 800168a:	4b6b      	ldr	r3, [pc, #428]	; (8001838 <StartControlTask+0x1c8>)
 800168c:	6818      	ldr	r0, [r3, #0]
 800168e:	f107 0108 	add.w	r1, r7, #8
 8001692:	2364      	movs	r3, #100	; 0x64
 8001694:	2205      	movs	r2, #5
 8001696:	f008 fc67 	bl	8009f68 <osMessageQueueGet>
		osMessageQueueGet(positionCanQueueHandle, &desPos, 5, 100);
 800169a:	4b68      	ldr	r3, [pc, #416]	; (800183c <StartControlTask+0x1cc>)
 800169c:	6818      	ldr	r0, [r3, #0]
 800169e:	f107 010c 	add.w	r1, r7, #12
 80016a2:	2364      	movs	r3, #100	; 0x64
 80016a4:	2205      	movs	r2, #5
 80016a6:	f008 fc5f 	bl	8009f68 <osMessageQueueGet>
		num1 = atoi(pos);
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	4618      	mov	r0, r3
 80016b0:	f00b f9cc 	bl	800ca4c <atoi>
 80016b4:	ee07 0a90 	vmov	s15, r0
 80016b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016bc:	edc7 7a05 	vstr	s15, [r7, #20]
		num2 = atoi(desPos)*10;
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	4618      	mov	r0, r3
 80016c6:	f00b f9c1 	bl	800ca4c <atoi>
 80016ca:	4602      	mov	r2, r0
 80016cc:	4613      	mov	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	613b      	str	r3, [r7, #16]
		if(num1>num2+1){
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	3301      	adds	r3, #1
 80016da:	ee07 3a90 	vmov	s15, r3
 80016de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80016e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ee:	dd30      	ble.n	8001752 <StartControlTask+0xe2>
			setPWM(htim3, reversePWM, 255, 255);
 80016f0:	4e53      	ldr	r6, [pc, #332]	; (8001840 <StartControlTask+0x1d0>)
 80016f2:	23ff      	movs	r3, #255	; 0xff
 80016f4:	9311      	str	r3, [sp, #68]	; 0x44
 80016f6:	23ff      	movs	r3, #255	; 0xff
 80016f8:	9310      	str	r3, [sp, #64]	; 0x40
 80016fa:	230c      	movs	r3, #12
 80016fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80016fe:	466d      	mov	r5, sp
 8001700:	f106 0410 	add.w	r4, r6, #16
 8001704:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001706:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800170a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800170c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800170e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001710:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001714:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001718:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800171c:	f7ff ff2c 	bl	8001578 <setPWM>
			setPWM(htim3, forwardPWM, 255, 0);
 8001720:	4e47      	ldr	r6, [pc, #284]	; (8001840 <StartControlTask+0x1d0>)
 8001722:	2300      	movs	r3, #0
 8001724:	9311      	str	r3, [sp, #68]	; 0x44
 8001726:	23ff      	movs	r3, #255	; 0xff
 8001728:	9310      	str	r3, [sp, #64]	; 0x40
 800172a:	2308      	movs	r3, #8
 800172c:	930f      	str	r3, [sp, #60]	; 0x3c
 800172e:	466d      	mov	r5, sp
 8001730:	f106 0410 	add.w	r4, r6, #16
 8001734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001736:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800173a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800173c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800173e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001740:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001744:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001748:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800174c:	f7ff ff14 	bl	8001578 <setPWM>
 8001750:	e06d      	b.n	800182e <StartControlTask+0x1be>
		}else if(num1<num2-1){
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	3b01      	subs	r3, #1
 8001756:	ee07 3a90 	vmov	s15, r3
 800175a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800175e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001762:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176a:	d530      	bpl.n	80017ce <StartControlTask+0x15e>
			setPWM(htim3, reversePWM, 255, 0);
 800176c:	4e34      	ldr	r6, [pc, #208]	; (8001840 <StartControlTask+0x1d0>)
 800176e:	2300      	movs	r3, #0
 8001770:	9311      	str	r3, [sp, #68]	; 0x44
 8001772:	23ff      	movs	r3, #255	; 0xff
 8001774:	9310      	str	r3, [sp, #64]	; 0x40
 8001776:	230c      	movs	r3, #12
 8001778:	930f      	str	r3, [sp, #60]	; 0x3c
 800177a:	466d      	mov	r5, sp
 800177c:	f106 0410 	add.w	r4, r6, #16
 8001780:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001782:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001788:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800178a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800178c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001790:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001794:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001798:	f7ff feee 	bl	8001578 <setPWM>
			setPWM(htim3, forwardPWM, 255, 255);
 800179c:	4e28      	ldr	r6, [pc, #160]	; (8001840 <StartControlTask+0x1d0>)
 800179e:	23ff      	movs	r3, #255	; 0xff
 80017a0:	9311      	str	r3, [sp, #68]	; 0x44
 80017a2:	23ff      	movs	r3, #255	; 0xff
 80017a4:	9310      	str	r3, [sp, #64]	; 0x40
 80017a6:	2308      	movs	r3, #8
 80017a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80017aa:	466d      	mov	r5, sp
 80017ac:	f106 0410 	add.w	r4, r6, #16
 80017b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017bc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80017c0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80017c4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80017c8:	f7ff fed6 	bl	8001578 <setPWM>
 80017cc:	e02f      	b.n	800182e <StartControlTask+0x1be>
		}else{
			setPWM(htim3, reversePWM, 255, 0);
 80017ce:	4e1c      	ldr	r6, [pc, #112]	; (8001840 <StartControlTask+0x1d0>)
 80017d0:	2300      	movs	r3, #0
 80017d2:	9311      	str	r3, [sp, #68]	; 0x44
 80017d4:	23ff      	movs	r3, #255	; 0xff
 80017d6:	9310      	str	r3, [sp, #64]	; 0x40
 80017d8:	230c      	movs	r3, #12
 80017da:	930f      	str	r3, [sp, #60]	; 0x3c
 80017dc:	466d      	mov	r5, sp
 80017de:	f106 0410 	add.w	r4, r6, #16
 80017e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ee:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80017f2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80017f6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80017fa:	f7ff febd 	bl	8001578 <setPWM>
			setPWM(htim3, forwardPWM, 255, 0);
 80017fe:	4e10      	ldr	r6, [pc, #64]	; (8001840 <StartControlTask+0x1d0>)
 8001800:	2300      	movs	r3, #0
 8001802:	9311      	str	r3, [sp, #68]	; 0x44
 8001804:	23ff      	movs	r3, #255	; 0xff
 8001806:	9310      	str	r3, [sp, #64]	; 0x40
 8001808:	2308      	movs	r3, #8
 800180a:	930f      	str	r3, [sp, #60]	; 0x3c
 800180c:	466d      	mov	r5, sp
 800180e:	f106 0410 	add.w	r4, r6, #16
 8001812:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001814:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800181a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800181c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800181e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001822:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001826:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800182a:	f7ff fea5 	bl	8001578 <setPWM>
		}
		osDelay(20);
 800182e:	2014      	movs	r0, #20
 8001830:	f008 faac 	bl	8009d8c <osDelay>
	for (;;) {
 8001834:	e729      	b.n	800168a <StartControlTask+0x1a>
 8001836:	bf00      	nop
 8001838:	240050c8 	.word	0x240050c8
 800183c:	24005014 	.word	0x24005014
 8001840:	24004fc4 	.word	0x24004fc4

08001844 <StartDiagnosisTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDiagnosisTask */
void StartDiagnosisTask(void *argument)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDiagnosisTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 800184c:	2001      	movs	r0, #1
 800184e:	f008 fa9d 	bl	8009d8c <osDelay>
 8001852:	e7fb      	b.n	800184c <StartDiagnosisTask+0x8>

08001854 <StartCanRxTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCanRxTask */
void StartCanRxTask(void *argument)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCanRxTask */
	uint8_t pb[4]= { "\0" };
 800185c:	2300      	movs	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */

	for (;;) {
		if(HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin)){
 8001860:	2180      	movs	r1, #128	; 0x80
 8001862:	4814      	ldr	r0, [pc, #80]	; (80018b4 <StartCanRxTask+0x60>)
 8001864:	f002 fb3c 	bl	8003ee0 <HAL_GPIO_ReadPin>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d007      	beq.n	800187e <StartCanRxTask+0x2a>
			itoa(100,pb,10);
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	220a      	movs	r2, #10
 8001874:	4619      	mov	r1, r3
 8001876:	2064      	movs	r0, #100	; 0x64
 8001878:	f00b f92e 	bl	800cad8 <itoa>
 800187c:	e00e      	b.n	800189c <StartCanRxTask+0x48>
		}else if(HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin)){
 800187e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001882:	480c      	ldr	r0, [pc, #48]	; (80018b4 <StartCanRxTask+0x60>)
 8001884:	f002 fb2c 	bl	8003ee0 <HAL_GPIO_ReadPin>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d006      	beq.n	800189c <StartCanRxTask+0x48>
			itoa(200,pb,10);
 800188e:	f107 030c 	add.w	r3, r7, #12
 8001892:	220a      	movs	r2, #10
 8001894:	4619      	mov	r1, r3
 8001896:	20c8      	movs	r0, #200	; 0xc8
 8001898:	f00b f91e 	bl	800cad8 <itoa>
		}
		osMessageQueuePut(positionCanQueueHandle, pb, 5, 200);
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <StartCanRxTask+0x64>)
 800189e:	6818      	ldr	r0, [r3, #0]
 80018a0:	f107 010c 	add.w	r1, r7, #12
 80018a4:	23c8      	movs	r3, #200	; 0xc8
 80018a6:	2205      	movs	r2, #5
 80018a8:	f008 fafe 	bl	8009ea8 <osMessageQueuePut>

		osDelay(20);
 80018ac:	2014      	movs	r0, #20
 80018ae:	f008 fa6d 	bl	8009d8c <osDelay>
		if(HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin)){
 80018b2:	e7d5      	b.n	8001860 <StartCanRxTask+0xc>
 80018b4:	58021400 	.word	0x58021400
 80018b8:	24005014 	.word	0x24005014

080018bc <StartCanTxTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCanTxTask */
void StartCanTxTask(void *argument)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCanTxTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80018c4:	2001      	movs	r0, #1
 80018c6:	f008 fa61 	bl	8009d8c <osDelay>
 80018ca:	e7fb      	b.n	80018c4 <StartCanTxTask+0x8>

080018cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d0:	b672      	cpsid	i
}
 80018d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80018d4:	e7fe      	b.n	80018d4 <Error_Handler+0x8>
	...

080018d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018de:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <HAL_MspInit+0x38>)
 80018e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018e4:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <HAL_MspInit+0x38>)
 80018e6:	f043 0302 	orr.w	r3, r3, #2
 80018ea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <HAL_MspInit+0x38>)
 80018f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018fc:	2200      	movs	r2, #0
 80018fe:	210f      	movs	r1, #15
 8001900:	f06f 0001 	mvn.w	r0, #1
 8001904:	f000 fd29 	bl	800235a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	58024400 	.word	0x58024400

08001914 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b0b8      	sub	sp, #224	; 0xe0
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	22bc      	movs	r2, #188	; 0xbc
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f00b f8df 	bl	800caf8 <memset>
  if(hfdcan->Instance==FDCAN1)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a29      	ldr	r2, [pc, #164]	; (80019e4 <HAL_FDCAN_MspInit+0xd0>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d14a      	bne.n	80019da <HAL_FDCAN_MspInit+0xc6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001944:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001948:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800194a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800194e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001950:	f107 0310 	add.w	r3, r7, #16
 8001954:	4618      	mov	r0, r3
 8001956:	f003 fc71 	bl	800523c <HAL_RCCEx_PeriphCLKConfig>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001960:	f7ff ffb4 	bl	80018cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001964:	4b20      	ldr	r3, [pc, #128]	; (80019e8 <HAL_FDCAN_MspInit+0xd4>)
 8001966:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800196a:	4a1f      	ldr	r2, [pc, #124]	; (80019e8 <HAL_FDCAN_MspInit+0xd4>)
 800196c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001970:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001974:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <HAL_FDCAN_MspInit+0xd4>)
 8001976:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800197a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001982:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <HAL_FDCAN_MspInit+0xd4>)
 8001984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001988:	4a17      	ldr	r2, [pc, #92]	; (80019e8 <HAL_FDCAN_MspInit+0xd4>)
 800198a:	f043 0308 	orr.w	r3, r3, #8
 800198e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <HAL_FDCAN_MspInit+0xd4>)
 8001994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001998:	f003 0308 	and.w	r3, r3, #8
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019a0:	2303      	movs	r3, #3
 80019a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b2:	2300      	movs	r3, #0
 80019b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80019b8:	2309      	movs	r3, #9
 80019ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019be:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019c2:	4619      	mov	r1, r3
 80019c4:	4809      	ldr	r0, [pc, #36]	; (80019ec <HAL_FDCAN_MspInit+0xd8>)
 80019c6:	f002 f8db 	bl	8003b80 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2105      	movs	r1, #5
 80019ce:	2013      	movs	r0, #19
 80019d0:	f000 fcc3 	bl	800235a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80019d4:	2013      	movs	r0, #19
 80019d6:	f000 fcda 	bl	800238e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80019da:	bf00      	nop
 80019dc:	37e0      	adds	r7, #224	; 0xe0
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	4000a000 	.word	0x4000a000
 80019e8:	58024400 	.word	0x58024400
 80019ec:	58020c00 	.word	0x58020c00

080019f0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	; 0x28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a10:	d154      	bne.n	8001abc <HAL_TIM_Encoder_MspInit+0xcc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a12:	4b2c      	ldr	r3, [pc, #176]	; (8001ac4 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001a14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a18:	4a2a      	ldr	r2, [pc, #168]	; (8001ac4 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a22:	4b28      	ldr	r3, [pc, #160]	; (8001ac4 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001a24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a30:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a36:	4a23      	ldr	r2, [pc, #140]	; (8001ac4 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a40:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a54:	4a1b      	ldr	r2, [pc, #108]	; (8001ac4 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001a56:	f043 0302 	orr.w	r3, r3, #2
 8001a5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a5e:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a74:	2301      	movs	r3, #1
 8001a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	4619      	mov	r1, r3
 8001a86:	4810      	ldr	r0, [pc, #64]	; (8001ac8 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001a88:	f002 f87a 	bl	8003b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a8c:	2308      	movs	r3, #8
 8001a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a90:	2302      	movs	r3, #2
 8001a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a94:	2301      	movs	r3, #1
 8001a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4809      	ldr	r0, [pc, #36]	; (8001acc <HAL_TIM_Encoder_MspInit+0xdc>)
 8001aa8:	f002 f86a 	bl	8003b80 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2105      	movs	r1, #5
 8001ab0:	201c      	movs	r0, #28
 8001ab2:	f000 fc52 	bl	800235a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ab6:	201c      	movs	r0, #28
 8001ab8:	f000 fc69 	bl	800238e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001abc:	bf00      	nop
 8001abe:	3728      	adds	r7, #40	; 0x28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	58024400 	.word	0x58024400
 8001ac8:	58020000 	.word	0x58020000
 8001acc:	58020400 	.word	0x58020400

08001ad0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <HAL_TIM_PWM_MspInit+0x3c>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d10e      	bne.n	8001b00 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <HAL_TIM_PWM_MspInit+0x40>)
 8001ae4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ae8:	4a09      	ldr	r2, [pc, #36]	; (8001b10 <HAL_TIM_PWM_MspInit+0x40>)
 8001aea:	f043 0302 	orr.w	r3, r3, #2
 8001aee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001af2:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <HAL_TIM_PWM_MspInit+0x40>)
 8001af4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	40000400 	.word	0x40000400
 8001b10:	58024400 	.word	0x58024400

08001b14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	; 0x28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a22      	ldr	r2, [pc, #136]	; (8001bbc <HAL_TIM_MspPostInit+0xa8>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d13e      	bne.n	8001bb4 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b36:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <HAL_TIM_MspPostInit+0xac>)
 8001b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b3c:	4a20      	ldr	r2, [pc, #128]	; (8001bc0 <HAL_TIM_MspPostInit+0xac>)
 8001b3e:	f043 0302 	orr.w	r3, r3, #2
 8001b42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b46:	4b1e      	ldr	r3, [pc, #120]	; (8001bc0 <HAL_TIM_MspPostInit+0xac>)
 8001b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b54:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <HAL_TIM_MspPostInit+0xac>)
 8001b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b5a:	4a19      	ldr	r2, [pc, #100]	; (8001bc0 <HAL_TIM_MspPostInit+0xac>)
 8001b5c:	f043 0304 	orr.w	r3, r3, #4
 8001b60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b64:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <HAL_TIM_MspPostInit+0xac>)
 8001b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = PWM_Reverse_Pin;
 8001b72:	2302      	movs	r3, #2
 8001b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b76:	2302      	movs	r3, #2
 8001b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b82:	2302      	movs	r3, #2
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_Reverse_GPIO_Port, &GPIO_InitStruct);
 8001b86:	f107 0314 	add.w	r3, r7, #20
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	480d      	ldr	r0, [pc, #52]	; (8001bc4 <HAL_TIM_MspPostInit+0xb0>)
 8001b8e:	f001 fff7 	bl	8003b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_Forward_Pin;
 8001b92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_Forward_GPIO_Port, &GPIO_InitStruct);
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	4619      	mov	r1, r3
 8001bae:	4806      	ldr	r0, [pc, #24]	; (8001bc8 <HAL_TIM_MspPostInit+0xb4>)
 8001bb0:	f001 ffe6 	bl	8003b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001bb4:	bf00      	nop
 8001bb6:	3728      	adds	r7, #40	; 0x28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40000400 	.word	0x40000400
 8001bc0:	58024400 	.word	0x58024400
 8001bc4:	58020400 	.word	0x58020400
 8001bc8:	58020800 	.word	0x58020800

08001bcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b0b8      	sub	sp, #224	; 0xe0
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001be4:	f107 0310 	add.w	r3, r7, #16
 8001be8:	22bc      	movs	r2, #188	; 0xbc
 8001bea:	2100      	movs	r1, #0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f00a ff83 	bl	800caf8 <memset>
  if(huart->Instance==USART3)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a29      	ldr	r2, [pc, #164]	; (8001c9c <HAL_UART_MspInit+0xd0>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d14a      	bne.n	8001c92 <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c06:	f107 0310 	add.w	r3, r7, #16
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f003 fb16 	bl	800523c <HAL_RCCEx_PeriphCLKConfig>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001c16:	f7ff fe59 	bl	80018cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c1a:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <HAL_UART_MspInit+0xd4>)
 8001c1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c20:	4a1f      	ldr	r2, [pc, #124]	; (8001ca0 <HAL_UART_MspInit+0xd4>)
 8001c22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <HAL_UART_MspInit+0xd4>)
 8001c2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c38:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <HAL_UART_MspInit+0xd4>)
 8001c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c3e:	4a18      	ldr	r2, [pc, #96]	; (8001ca0 <HAL_UART_MspInit+0xd4>)
 8001c40:	f043 0308 	orr.w	r3, r3, #8
 8001c44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c48:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <HAL_UART_MspInit+0xd4>)
 8001c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001c56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c70:	2307      	movs	r3, #7
 8001c72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c76:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4809      	ldr	r0, [pc, #36]	; (8001ca4 <HAL_UART_MspInit+0xd8>)
 8001c7e:	f001 ff7f 	bl	8003b80 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2105      	movs	r1, #5
 8001c86:	2027      	movs	r0, #39	; 0x27
 8001c88:	f000 fb67 	bl	800235a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c8c:	2027      	movs	r0, #39	; 0x27
 8001c8e:	f000 fb7e 	bl	800238e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c92:	bf00      	nop
 8001c94:	37e0      	adds	r7, #224	; 0xe0
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40004800 	.word	0x40004800
 8001ca0:	58024400 	.word	0x58024400
 8001ca4:	58020c00 	.word	0x58020c00

08001ca8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b0b8      	sub	sp, #224	; 0xe0
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cc0:	f107 0310 	add.w	r3, r7, #16
 8001cc4:	22bc      	movs	r2, #188	; 0xbc
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f00a ff15 	bl	800caf8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a37      	ldr	r2, [pc, #220]	; (8001db0 <HAL_PCD_MspInit+0x108>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d166      	bne.n	8001da6 <HAL_PCD_MspInit+0xfe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001cd8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001cdc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001ce2:	2312      	movs	r3, #18
 8001ce4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001cea:	2303      	movs	r3, #3
 8001cec:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001cf2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cf6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8001cf8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001cfc:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001cfe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d06:	f107 0310 	add.w	r3, r7, #16
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f003 fa96 	bl	800523c <HAL_RCCEx_PeriphCLKConfig>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8001d16:	f7ff fdd9 	bl	80018cc <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001d1a:	f002 fae3 	bl	80042e4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1e:	4b25      	ldr	r3, [pc, #148]	; (8001db4 <HAL_PCD_MspInit+0x10c>)
 8001d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d24:	4a23      	ldr	r2, [pc, #140]	; (8001db4 <HAL_PCD_MspInit+0x10c>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d2e:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <HAL_PCD_MspInit+0x10c>)
 8001d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001d3c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001d40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001d56:	230a      	movs	r3, #10
 8001d58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d60:	4619      	mov	r1, r3
 8001d62:	4815      	ldr	r0, [pc, #84]	; (8001db8 <HAL_PCD_MspInit+0x110>)
 8001d64:	f001 ff0c 	bl	8003b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d80:	4619      	mov	r1, r3
 8001d82:	480d      	ldr	r0, [pc, #52]	; (8001db8 <HAL_PCD_MspInit+0x110>)
 8001d84:	f001 fefc 	bl	8003b80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_PCD_MspInit+0x10c>)
 8001d8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d8e:	4a09      	ldr	r2, [pc, #36]	; (8001db4 <HAL_PCD_MspInit+0x10c>)
 8001d90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d94:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_PCD_MspInit+0x10c>)
 8001d9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001da6:	bf00      	nop
 8001da8:	37e0      	adds	r7, #224	; 0xe0
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40080000 	.word	0x40080000
 8001db4:	58024400 	.word	0x58024400
 8001db8:	58020000 	.word	0x58020000

08001dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <NMI_Handler+0x4>

08001dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dc6:	e7fe      	b.n	8001dc6 <HardFault_Handler+0x4>

08001dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <MemManage_Handler+0x4>

08001dce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <BusFault_Handler+0x4>

08001dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <UsageFault_Handler+0x4>

08001dda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dec:	f000 f98a 	bl	8002104 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001df0:	f00a f9fe 	bl	800c1f0 <xTaskGetSchedulerState>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d001      	beq.n	8001dfe <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001dfa:	f008 fda5 	bl	800a948 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001e08:	4802      	ldr	r0, [pc, #8]	; (8001e14 <FDCAN1_IT0_IRQHandler+0x10>)
 8001e0a:	f001 fa1f 	bl	800324c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	24005028 	.word	0x24005028

08001e18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e1c:	4802      	ldr	r0, [pc, #8]	; (8001e28 <TIM2_IRQHandler+0x10>)
 8001e1e:	f005 f940 	bl	80070a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	240050d0 	.word	0x240050d0

08001e2c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e30:	4802      	ldr	r0, [pc, #8]	; (8001e3c <USART3_IRQHandler+0x10>)
 8001e32:	f006 f8b1 	bl	8007f98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	24004b20 	.word	0x24004b20

08001e40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
	return 1;
 8001e44:	2301      	movs	r3, #1
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <_kill>:

int _kill(int pid, int sig)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e5a:	f00a fdfb 	bl	800ca54 <__errno>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2216      	movs	r2, #22
 8001e62:	601a      	str	r2, [r3, #0]
	return -1;
 8001e64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <_exit>:

void _exit (int status)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e78:	f04f 31ff 	mov.w	r1, #4294967295
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff ffe7 	bl	8001e50 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e82:	e7fe      	b.n	8001e82 <_exit+0x12>

08001e84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	e00a      	b.n	8001eac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e96:	f3af 8000 	nop.w
 8001e9a:	4601      	mov	r1, r0
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	60ba      	str	r2, [r7, #8]
 8001ea2:	b2ca      	uxtb	r2, r1
 8001ea4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	dbf0      	blt.n	8001e96 <_read+0x12>
	}

return len;
 8001eb4:	687b      	ldr	r3, [r7, #4]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	60f8      	str	r0, [r7, #12]
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	e009      	b.n	8001ee4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	60ba      	str	r2, [r7, #8]
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	dbf1      	blt.n	8001ed0 <_write+0x12>
	}
	return len;
 8001eec:	687b      	ldr	r3, [r7, #4]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <_close>:

int _close(int file)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
	return -1;
 8001efe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f1e:	605a      	str	r2, [r3, #4]
	return 0;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <_isatty>:

int _isatty(int file)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
	return 1;
 8001f36:	2301      	movs	r3, #1
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
	return 0;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f68:	4a14      	ldr	r2, [pc, #80]	; (8001fbc <_sbrk+0x5c>)
 8001f6a:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <_sbrk+0x60>)
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f74:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <_sbrk+0x64>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d102      	bne.n	8001f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <_sbrk+0x64>)
 8001f7e:	4a12      	ldr	r2, [pc, #72]	; (8001fc8 <_sbrk+0x68>)
 8001f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f82:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <_sbrk+0x64>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d207      	bcs.n	8001fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f90:	f00a fd60 	bl	800ca54 <__errno>
 8001f94:	4603      	mov	r3, r0
 8001f96:	220c      	movs	r2, #12
 8001f98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9e:	e009      	b.n	8001fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <_sbrk+0x64>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fa6:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <_sbrk+0x64>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	4a05      	ldr	r2, [pc, #20]	; (8001fc4 <_sbrk+0x64>)
 8001fb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	24080000 	.word	0x24080000
 8001fc0:	00000400 	.word	0x00000400
 8001fc4:	24000204 	.word	0x24000204
 8001fc8:	24005170 	.word	0x24005170

08001fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002004 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fd0:	f7fe fd4e 	bl	8000a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fd4:	480c      	ldr	r0, [pc, #48]	; (8002008 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fd6:	490d      	ldr	r1, [pc, #52]	; (800200c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fd8:	4a0d      	ldr	r2, [pc, #52]	; (8002010 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fdc:	e002      	b.n	8001fe4 <LoopCopyDataInit>

08001fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fe2:	3304      	adds	r3, #4

08001fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe8:	d3f9      	bcc.n	8001fde <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fea:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fec:	4c0a      	ldr	r4, [pc, #40]	; (8002018 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff0:	e001      	b.n	8001ff6 <LoopFillZerobss>

08001ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff4:	3204      	adds	r2, #4

08001ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff8:	d3fb      	bcc.n	8001ff2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ffa:	f00a fd31 	bl	800ca60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ffe:	f7fe fdd1 	bl	8000ba4 <main>
  bx  lr
 8002002:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002004:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002008:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800200c:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8002010:	08011a0c 	.word	0x08011a0c
  ldr r2, =_sbss
 8002014:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8002018:	24005170 	.word	0x24005170

0800201c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800201c:	e7fe      	b.n	800201c <ADC3_IRQHandler>
	...

08002020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002026:	2003      	movs	r0, #3
 8002028:	f000 f98c 	bl	8002344 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800202c:	f002 ff30 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 8002030:	4602      	mov	r2, r0
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <HAL_Init+0x68>)
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	0a1b      	lsrs	r3, r3, #8
 8002038:	f003 030f 	and.w	r3, r3, #15
 800203c:	4913      	ldr	r1, [pc, #76]	; (800208c <HAL_Init+0x6c>)
 800203e:	5ccb      	ldrb	r3, [r1, r3]
 8002040:	f003 031f 	and.w	r3, r3, #31
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
 8002048:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800204a:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <HAL_Init+0x68>)
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	4a0e      	ldr	r2, [pc, #56]	; (800208c <HAL_Init+0x6c>)
 8002054:	5cd3      	ldrb	r3, [r2, r3]
 8002056:	f003 031f 	and.w	r3, r3, #31
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	fa22 f303 	lsr.w	r3, r2, r3
 8002060:	4a0b      	ldr	r2, [pc, #44]	; (8002090 <HAL_Init+0x70>)
 8002062:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002064:	4a0b      	ldr	r2, [pc, #44]	; (8002094 <HAL_Init+0x74>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800206a:	200f      	movs	r0, #15
 800206c:	f000 f814 	bl	8002098 <HAL_InitTick>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e002      	b.n	8002080 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800207a:	f7ff fc2d 	bl	80018d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	58024400 	.word	0x58024400
 800208c:	080113ac 	.word	0x080113ac
 8002090:	24000004 	.word	0x24000004
 8002094:	24000000 	.word	0x24000000

08002098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80020a0:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <HAL_InitTick+0x60>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e021      	b.n	80020f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80020ac:	4b13      	ldr	r3, [pc, #76]	; (80020fc <HAL_InitTick+0x64>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <HAL_InitTick+0x60>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	4619      	mov	r1, r3
 80020b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80020be:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 f971 	bl	80023aa <HAL_SYSTICK_Config>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e00e      	b.n	80020f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b0f      	cmp	r3, #15
 80020d6:	d80a      	bhi.n	80020ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020d8:	2200      	movs	r2, #0
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	f04f 30ff 	mov.w	r0, #4294967295
 80020e0:	f000 f93b 	bl	800235a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020e4:	4a06      	ldr	r2, [pc, #24]	; (8002100 <HAL_InitTick+0x68>)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	e000      	b.n	80020f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	2400000c 	.word	0x2400000c
 80020fc:	24000000 	.word	0x24000000
 8002100:	24000008 	.word	0x24000008

08002104 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002108:	4b06      	ldr	r3, [pc, #24]	; (8002124 <HAL_IncTick+0x20>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	461a      	mov	r2, r3
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_IncTick+0x24>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4413      	add	r3, r2
 8002114:	4a04      	ldr	r2, [pc, #16]	; (8002128 <HAL_IncTick+0x24>)
 8002116:	6013      	str	r3, [r2, #0]
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	2400000c 	.word	0x2400000c
 8002128:	2400511c 	.word	0x2400511c

0800212c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return uwTick;
 8002130:	4b03      	ldr	r3, [pc, #12]	; (8002140 <HAL_GetTick+0x14>)
 8002132:	681b      	ldr	r3, [r3, #0]
}
 8002134:	4618      	mov	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	2400511c 	.word	0x2400511c

08002144 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800214c:	f7ff ffee 	bl	800212c <HAL_GetTick>
 8002150:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215c:	d005      	beq.n	800216a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800215e:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <HAL_Delay+0x44>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4413      	add	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800216a:	bf00      	nop
 800216c:	f7ff ffde 	bl	800212c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	429a      	cmp	r2, r3
 800217a:	d8f7      	bhi.n	800216c <HAL_Delay+0x28>
  {
  }
}
 800217c:	bf00      	nop
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	2400000c 	.word	0x2400000c

0800218c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002190:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <HAL_GetREVID+0x14>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	0c1b      	lsrs	r3, r3, #16
}
 8002196:	4618      	mov	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	5c001000 	.word	0x5c001000

080021a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b4:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <__NVIC_SetPriorityGrouping+0x40>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021c0:	4013      	ands	r3, r2
 80021c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <__NVIC_SetPriorityGrouping+0x44>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021d2:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <__NVIC_SetPriorityGrouping+0x40>)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	60d3      	str	r3, [r2, #12]
}
 80021d8:	bf00      	nop
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000ed00 	.word	0xe000ed00
 80021e8:	05fa0000 	.word	0x05fa0000

080021ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021f0:	4b04      	ldr	r3, [pc, #16]	; (8002204 <__NVIC_GetPriorityGrouping+0x18>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	0a1b      	lsrs	r3, r3, #8
 80021f6:	f003 0307 	and.w	r3, r3, #7
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002216:	2b00      	cmp	r3, #0
 8002218:	db0b      	blt.n	8002232 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800221a:	88fb      	ldrh	r3, [r7, #6]
 800221c:	f003 021f 	and.w	r2, r3, #31
 8002220:	4907      	ldr	r1, [pc, #28]	; (8002240 <__NVIC_EnableIRQ+0x38>)
 8002222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002226:	095b      	lsrs	r3, r3, #5
 8002228:	2001      	movs	r0, #1
 800222a:	fa00 f202 	lsl.w	r2, r0, r2
 800222e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	e000e100 	.word	0xe000e100

08002244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	6039      	str	r1, [r7, #0]
 800224e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002250:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002254:	2b00      	cmp	r3, #0
 8002256:	db0a      	blt.n	800226e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	b2da      	uxtb	r2, r3
 800225c:	490c      	ldr	r1, [pc, #48]	; (8002290 <__NVIC_SetPriority+0x4c>)
 800225e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002262:	0112      	lsls	r2, r2, #4
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	440b      	add	r3, r1
 8002268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800226c:	e00a      	b.n	8002284 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	b2da      	uxtb	r2, r3
 8002272:	4908      	ldr	r1, [pc, #32]	; (8002294 <__NVIC_SetPriority+0x50>)
 8002274:	88fb      	ldrh	r3, [r7, #6]
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	3b04      	subs	r3, #4
 800227c:	0112      	lsls	r2, r2, #4
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	440b      	add	r3, r1
 8002282:	761a      	strb	r2, [r3, #24]
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	e000e100 	.word	0xe000e100
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002298:	b480      	push	{r7}
 800229a:	b089      	sub	sp, #36	; 0x24
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f1c3 0307 	rsb	r3, r3, #7
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	bf28      	it	cs
 80022b6:	2304      	movcs	r3, #4
 80022b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	3304      	adds	r3, #4
 80022be:	2b06      	cmp	r3, #6
 80022c0:	d902      	bls.n	80022c8 <NVIC_EncodePriority+0x30>
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3b03      	subs	r3, #3
 80022c6:	e000      	b.n	80022ca <NVIC_EncodePriority+0x32>
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022cc:	f04f 32ff 	mov.w	r2, #4294967295
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43da      	mvns	r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	401a      	ands	r2, r3
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022e0:	f04f 31ff 	mov.w	r1, #4294967295
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ea:	43d9      	mvns	r1, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f0:	4313      	orrs	r3, r2
         );
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3724      	adds	r7, #36	; 0x24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3b01      	subs	r3, #1
 800230c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002310:	d301      	bcc.n	8002316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002312:	2301      	movs	r3, #1
 8002314:	e00f      	b.n	8002336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002316:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <SysTick_Config+0x40>)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3b01      	subs	r3, #1
 800231c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800231e:	210f      	movs	r1, #15
 8002320:	f04f 30ff 	mov.w	r0, #4294967295
 8002324:	f7ff ff8e 	bl	8002244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002328:	4b05      	ldr	r3, [pc, #20]	; (8002340 <SysTick_Config+0x40>)
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800232e:	4b04      	ldr	r3, [pc, #16]	; (8002340 <SysTick_Config+0x40>)
 8002330:	2207      	movs	r2, #7
 8002332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	e000e010 	.word	0xe000e010

08002344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7ff ff29 	bl	80021a4 <__NVIC_SetPriorityGrouping>
}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b086      	sub	sp, #24
 800235e:	af00      	add	r7, sp, #0
 8002360:	4603      	mov	r3, r0
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	607a      	str	r2, [r7, #4]
 8002366:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002368:	f7ff ff40 	bl	80021ec <__NVIC_GetPriorityGrouping>
 800236c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68b9      	ldr	r1, [r7, #8]
 8002372:	6978      	ldr	r0, [r7, #20]
 8002374:	f7ff ff90 	bl	8002298 <NVIC_EncodePriority>
 8002378:	4602      	mov	r2, r0
 800237a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff5f 	bl	8002244 <__NVIC_SetPriority>
}
 8002386:	bf00      	nop
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	4603      	mov	r3, r0
 8002396:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002398:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff33 	bl	8002208 <__NVIC_EnableIRQ>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff ffa4 	bl	8002300 <SysTick_Config>
 80023b8:	4603      	mov	r3, r0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80023cc:	f7ff feae 	bl	800212c <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e2dc      	b.n	8002996 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d008      	beq.n	80023fa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2280      	movs	r2, #128	; 0x80
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e2cd      	b.n	8002996 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a76      	ldr	r2, [pc, #472]	; (80025d8 <HAL_DMA_Abort+0x214>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d04a      	beq.n	800249a <HAL_DMA_Abort+0xd6>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a74      	ldr	r2, [pc, #464]	; (80025dc <HAL_DMA_Abort+0x218>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d045      	beq.n	800249a <HAL_DMA_Abort+0xd6>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a73      	ldr	r2, [pc, #460]	; (80025e0 <HAL_DMA_Abort+0x21c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d040      	beq.n	800249a <HAL_DMA_Abort+0xd6>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a71      	ldr	r2, [pc, #452]	; (80025e4 <HAL_DMA_Abort+0x220>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d03b      	beq.n	800249a <HAL_DMA_Abort+0xd6>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a70      	ldr	r2, [pc, #448]	; (80025e8 <HAL_DMA_Abort+0x224>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d036      	beq.n	800249a <HAL_DMA_Abort+0xd6>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a6e      	ldr	r2, [pc, #440]	; (80025ec <HAL_DMA_Abort+0x228>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d031      	beq.n	800249a <HAL_DMA_Abort+0xd6>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a6d      	ldr	r2, [pc, #436]	; (80025f0 <HAL_DMA_Abort+0x22c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d02c      	beq.n	800249a <HAL_DMA_Abort+0xd6>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a6b      	ldr	r2, [pc, #428]	; (80025f4 <HAL_DMA_Abort+0x230>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d027      	beq.n	800249a <HAL_DMA_Abort+0xd6>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a6a      	ldr	r2, [pc, #424]	; (80025f8 <HAL_DMA_Abort+0x234>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d022      	beq.n	800249a <HAL_DMA_Abort+0xd6>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a68      	ldr	r2, [pc, #416]	; (80025fc <HAL_DMA_Abort+0x238>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d01d      	beq.n	800249a <HAL_DMA_Abort+0xd6>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a67      	ldr	r2, [pc, #412]	; (8002600 <HAL_DMA_Abort+0x23c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d018      	beq.n	800249a <HAL_DMA_Abort+0xd6>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a65      	ldr	r2, [pc, #404]	; (8002604 <HAL_DMA_Abort+0x240>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d013      	beq.n	800249a <HAL_DMA_Abort+0xd6>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a64      	ldr	r2, [pc, #400]	; (8002608 <HAL_DMA_Abort+0x244>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d00e      	beq.n	800249a <HAL_DMA_Abort+0xd6>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a62      	ldr	r2, [pc, #392]	; (800260c <HAL_DMA_Abort+0x248>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d009      	beq.n	800249a <HAL_DMA_Abort+0xd6>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a61      	ldr	r2, [pc, #388]	; (8002610 <HAL_DMA_Abort+0x24c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d004      	beq.n	800249a <HAL_DMA_Abort+0xd6>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a5f      	ldr	r2, [pc, #380]	; (8002614 <HAL_DMA_Abort+0x250>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d101      	bne.n	800249e <HAL_DMA_Abort+0xda>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <HAL_DMA_Abort+0xdc>
 800249e:	2300      	movs	r3, #0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d013      	beq.n	80024cc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 021e 	bic.w	r2, r2, #30
 80024b2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	695a      	ldr	r2, [r3, #20]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024c2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	e00a      	b.n	80024e2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 020e 	bic.w	r2, r2, #14
 80024da:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a3c      	ldr	r2, [pc, #240]	; (80025d8 <HAL_DMA_Abort+0x214>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d072      	beq.n	80025d2 <HAL_DMA_Abort+0x20e>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a3a      	ldr	r2, [pc, #232]	; (80025dc <HAL_DMA_Abort+0x218>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d06d      	beq.n	80025d2 <HAL_DMA_Abort+0x20e>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a39      	ldr	r2, [pc, #228]	; (80025e0 <HAL_DMA_Abort+0x21c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d068      	beq.n	80025d2 <HAL_DMA_Abort+0x20e>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a37      	ldr	r2, [pc, #220]	; (80025e4 <HAL_DMA_Abort+0x220>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d063      	beq.n	80025d2 <HAL_DMA_Abort+0x20e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a36      	ldr	r2, [pc, #216]	; (80025e8 <HAL_DMA_Abort+0x224>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d05e      	beq.n	80025d2 <HAL_DMA_Abort+0x20e>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a34      	ldr	r2, [pc, #208]	; (80025ec <HAL_DMA_Abort+0x228>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d059      	beq.n	80025d2 <HAL_DMA_Abort+0x20e>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a33      	ldr	r2, [pc, #204]	; (80025f0 <HAL_DMA_Abort+0x22c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d054      	beq.n	80025d2 <HAL_DMA_Abort+0x20e>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a31      	ldr	r2, [pc, #196]	; (80025f4 <HAL_DMA_Abort+0x230>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d04f      	beq.n	80025d2 <HAL_DMA_Abort+0x20e>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a30      	ldr	r2, [pc, #192]	; (80025f8 <HAL_DMA_Abort+0x234>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d04a      	beq.n	80025d2 <HAL_DMA_Abort+0x20e>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a2e      	ldr	r2, [pc, #184]	; (80025fc <HAL_DMA_Abort+0x238>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d045      	beq.n	80025d2 <HAL_DMA_Abort+0x20e>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a2d      	ldr	r2, [pc, #180]	; (8002600 <HAL_DMA_Abort+0x23c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d040      	beq.n	80025d2 <HAL_DMA_Abort+0x20e>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a2b      	ldr	r2, [pc, #172]	; (8002604 <HAL_DMA_Abort+0x240>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d03b      	beq.n	80025d2 <HAL_DMA_Abort+0x20e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a2a      	ldr	r2, [pc, #168]	; (8002608 <HAL_DMA_Abort+0x244>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d036      	beq.n	80025d2 <HAL_DMA_Abort+0x20e>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a28      	ldr	r2, [pc, #160]	; (800260c <HAL_DMA_Abort+0x248>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d031      	beq.n	80025d2 <HAL_DMA_Abort+0x20e>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a27      	ldr	r2, [pc, #156]	; (8002610 <HAL_DMA_Abort+0x24c>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d02c      	beq.n	80025d2 <HAL_DMA_Abort+0x20e>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a25      	ldr	r2, [pc, #148]	; (8002614 <HAL_DMA_Abort+0x250>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d027      	beq.n	80025d2 <HAL_DMA_Abort+0x20e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a24      	ldr	r2, [pc, #144]	; (8002618 <HAL_DMA_Abort+0x254>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d022      	beq.n	80025d2 <HAL_DMA_Abort+0x20e>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a22      	ldr	r2, [pc, #136]	; (800261c <HAL_DMA_Abort+0x258>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d01d      	beq.n	80025d2 <HAL_DMA_Abort+0x20e>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a21      	ldr	r2, [pc, #132]	; (8002620 <HAL_DMA_Abort+0x25c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d018      	beq.n	80025d2 <HAL_DMA_Abort+0x20e>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a1f      	ldr	r2, [pc, #124]	; (8002624 <HAL_DMA_Abort+0x260>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d013      	beq.n	80025d2 <HAL_DMA_Abort+0x20e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a1e      	ldr	r2, [pc, #120]	; (8002628 <HAL_DMA_Abort+0x264>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d00e      	beq.n	80025d2 <HAL_DMA_Abort+0x20e>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a1c      	ldr	r2, [pc, #112]	; (800262c <HAL_DMA_Abort+0x268>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d009      	beq.n	80025d2 <HAL_DMA_Abort+0x20e>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a1b      	ldr	r2, [pc, #108]	; (8002630 <HAL_DMA_Abort+0x26c>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d004      	beq.n	80025d2 <HAL_DMA_Abort+0x20e>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a19      	ldr	r2, [pc, #100]	; (8002634 <HAL_DMA_Abort+0x270>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d132      	bne.n	8002638 <HAL_DMA_Abort+0x274>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e031      	b.n	800263a <HAL_DMA_Abort+0x276>
 80025d6:	bf00      	nop
 80025d8:	40020010 	.word	0x40020010
 80025dc:	40020028 	.word	0x40020028
 80025e0:	40020040 	.word	0x40020040
 80025e4:	40020058 	.word	0x40020058
 80025e8:	40020070 	.word	0x40020070
 80025ec:	40020088 	.word	0x40020088
 80025f0:	400200a0 	.word	0x400200a0
 80025f4:	400200b8 	.word	0x400200b8
 80025f8:	40020410 	.word	0x40020410
 80025fc:	40020428 	.word	0x40020428
 8002600:	40020440 	.word	0x40020440
 8002604:	40020458 	.word	0x40020458
 8002608:	40020470 	.word	0x40020470
 800260c:	40020488 	.word	0x40020488
 8002610:	400204a0 	.word	0x400204a0
 8002614:	400204b8 	.word	0x400204b8
 8002618:	58025408 	.word	0x58025408
 800261c:	5802541c 	.word	0x5802541c
 8002620:	58025430 	.word	0x58025430
 8002624:	58025444 	.word	0x58025444
 8002628:	58025458 	.word	0x58025458
 800262c:	5802546c 	.word	0x5802546c
 8002630:	58025480 	.word	0x58025480
 8002634:	58025494 	.word	0x58025494
 8002638:	2300      	movs	r3, #0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d007      	beq.n	800264e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002648:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800264c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a6d      	ldr	r2, [pc, #436]	; (8002808 <HAL_DMA_Abort+0x444>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d04a      	beq.n	80026ee <HAL_DMA_Abort+0x32a>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a6b      	ldr	r2, [pc, #428]	; (800280c <HAL_DMA_Abort+0x448>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d045      	beq.n	80026ee <HAL_DMA_Abort+0x32a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a6a      	ldr	r2, [pc, #424]	; (8002810 <HAL_DMA_Abort+0x44c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d040      	beq.n	80026ee <HAL_DMA_Abort+0x32a>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a68      	ldr	r2, [pc, #416]	; (8002814 <HAL_DMA_Abort+0x450>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d03b      	beq.n	80026ee <HAL_DMA_Abort+0x32a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a67      	ldr	r2, [pc, #412]	; (8002818 <HAL_DMA_Abort+0x454>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d036      	beq.n	80026ee <HAL_DMA_Abort+0x32a>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a65      	ldr	r2, [pc, #404]	; (800281c <HAL_DMA_Abort+0x458>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d031      	beq.n	80026ee <HAL_DMA_Abort+0x32a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a64      	ldr	r2, [pc, #400]	; (8002820 <HAL_DMA_Abort+0x45c>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d02c      	beq.n	80026ee <HAL_DMA_Abort+0x32a>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a62      	ldr	r2, [pc, #392]	; (8002824 <HAL_DMA_Abort+0x460>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d027      	beq.n	80026ee <HAL_DMA_Abort+0x32a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a61      	ldr	r2, [pc, #388]	; (8002828 <HAL_DMA_Abort+0x464>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d022      	beq.n	80026ee <HAL_DMA_Abort+0x32a>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a5f      	ldr	r2, [pc, #380]	; (800282c <HAL_DMA_Abort+0x468>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d01d      	beq.n	80026ee <HAL_DMA_Abort+0x32a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a5e      	ldr	r2, [pc, #376]	; (8002830 <HAL_DMA_Abort+0x46c>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d018      	beq.n	80026ee <HAL_DMA_Abort+0x32a>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a5c      	ldr	r2, [pc, #368]	; (8002834 <HAL_DMA_Abort+0x470>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d013      	beq.n	80026ee <HAL_DMA_Abort+0x32a>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a5b      	ldr	r2, [pc, #364]	; (8002838 <HAL_DMA_Abort+0x474>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d00e      	beq.n	80026ee <HAL_DMA_Abort+0x32a>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a59      	ldr	r2, [pc, #356]	; (800283c <HAL_DMA_Abort+0x478>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d009      	beq.n	80026ee <HAL_DMA_Abort+0x32a>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a58      	ldr	r2, [pc, #352]	; (8002840 <HAL_DMA_Abort+0x47c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d004      	beq.n	80026ee <HAL_DMA_Abort+0x32a>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a56      	ldr	r2, [pc, #344]	; (8002844 <HAL_DMA_Abort+0x480>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d108      	bne.n	8002700 <HAL_DMA_Abort+0x33c>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0201 	bic.w	r2, r2, #1
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	e007      	b.n	8002710 <HAL_DMA_Abort+0x34c>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 0201 	bic.w	r2, r2, #1
 800270e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002710:	e013      	b.n	800273a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002712:	f7ff fd0b 	bl	800212c <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b05      	cmp	r3, #5
 800271e:	d90c      	bls.n	800273a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2220      	movs	r2, #32
 8002724:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2203      	movs	r2, #3
 8002732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e12d      	b.n	8002996 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1e5      	bne.n	8002712 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a2f      	ldr	r2, [pc, #188]	; (8002808 <HAL_DMA_Abort+0x444>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d04a      	beq.n	80027e6 <HAL_DMA_Abort+0x422>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a2d      	ldr	r2, [pc, #180]	; (800280c <HAL_DMA_Abort+0x448>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d045      	beq.n	80027e6 <HAL_DMA_Abort+0x422>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a2c      	ldr	r2, [pc, #176]	; (8002810 <HAL_DMA_Abort+0x44c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d040      	beq.n	80027e6 <HAL_DMA_Abort+0x422>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a2a      	ldr	r2, [pc, #168]	; (8002814 <HAL_DMA_Abort+0x450>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d03b      	beq.n	80027e6 <HAL_DMA_Abort+0x422>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a29      	ldr	r2, [pc, #164]	; (8002818 <HAL_DMA_Abort+0x454>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d036      	beq.n	80027e6 <HAL_DMA_Abort+0x422>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a27      	ldr	r2, [pc, #156]	; (800281c <HAL_DMA_Abort+0x458>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d031      	beq.n	80027e6 <HAL_DMA_Abort+0x422>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a26      	ldr	r2, [pc, #152]	; (8002820 <HAL_DMA_Abort+0x45c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d02c      	beq.n	80027e6 <HAL_DMA_Abort+0x422>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a24      	ldr	r2, [pc, #144]	; (8002824 <HAL_DMA_Abort+0x460>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d027      	beq.n	80027e6 <HAL_DMA_Abort+0x422>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a23      	ldr	r2, [pc, #140]	; (8002828 <HAL_DMA_Abort+0x464>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d022      	beq.n	80027e6 <HAL_DMA_Abort+0x422>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a21      	ldr	r2, [pc, #132]	; (800282c <HAL_DMA_Abort+0x468>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d01d      	beq.n	80027e6 <HAL_DMA_Abort+0x422>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a20      	ldr	r2, [pc, #128]	; (8002830 <HAL_DMA_Abort+0x46c>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d018      	beq.n	80027e6 <HAL_DMA_Abort+0x422>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1e      	ldr	r2, [pc, #120]	; (8002834 <HAL_DMA_Abort+0x470>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d013      	beq.n	80027e6 <HAL_DMA_Abort+0x422>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a1d      	ldr	r2, [pc, #116]	; (8002838 <HAL_DMA_Abort+0x474>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d00e      	beq.n	80027e6 <HAL_DMA_Abort+0x422>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a1b      	ldr	r2, [pc, #108]	; (800283c <HAL_DMA_Abort+0x478>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d009      	beq.n	80027e6 <HAL_DMA_Abort+0x422>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a1a      	ldr	r2, [pc, #104]	; (8002840 <HAL_DMA_Abort+0x47c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d004      	beq.n	80027e6 <HAL_DMA_Abort+0x422>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a18      	ldr	r2, [pc, #96]	; (8002844 <HAL_DMA_Abort+0x480>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d101      	bne.n	80027ea <HAL_DMA_Abort+0x426>
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <HAL_DMA_Abort+0x428>
 80027ea:	2300      	movs	r3, #0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d02b      	beq.n	8002848 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fa:	f003 031f 	and.w	r3, r3, #31
 80027fe:	223f      	movs	r2, #63	; 0x3f
 8002800:	409a      	lsls	r2, r3
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	609a      	str	r2, [r3, #8]
 8002806:	e02a      	b.n	800285e <HAL_DMA_Abort+0x49a>
 8002808:	40020010 	.word	0x40020010
 800280c:	40020028 	.word	0x40020028
 8002810:	40020040 	.word	0x40020040
 8002814:	40020058 	.word	0x40020058
 8002818:	40020070 	.word	0x40020070
 800281c:	40020088 	.word	0x40020088
 8002820:	400200a0 	.word	0x400200a0
 8002824:	400200b8 	.word	0x400200b8
 8002828:	40020410 	.word	0x40020410
 800282c:	40020428 	.word	0x40020428
 8002830:	40020440 	.word	0x40020440
 8002834:	40020458 	.word	0x40020458
 8002838:	40020470 	.word	0x40020470
 800283c:	40020488 	.word	0x40020488
 8002840:	400204a0 	.word	0x400204a0
 8002844:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002852:	f003 031f 	and.w	r3, r3, #31
 8002856:	2201      	movs	r2, #1
 8002858:	409a      	lsls	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a4f      	ldr	r2, [pc, #316]	; (80029a0 <HAL_DMA_Abort+0x5dc>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d072      	beq.n	800294e <HAL_DMA_Abort+0x58a>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a4d      	ldr	r2, [pc, #308]	; (80029a4 <HAL_DMA_Abort+0x5e0>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d06d      	beq.n	800294e <HAL_DMA_Abort+0x58a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a4c      	ldr	r2, [pc, #304]	; (80029a8 <HAL_DMA_Abort+0x5e4>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d068      	beq.n	800294e <HAL_DMA_Abort+0x58a>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a4a      	ldr	r2, [pc, #296]	; (80029ac <HAL_DMA_Abort+0x5e8>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d063      	beq.n	800294e <HAL_DMA_Abort+0x58a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a49      	ldr	r2, [pc, #292]	; (80029b0 <HAL_DMA_Abort+0x5ec>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d05e      	beq.n	800294e <HAL_DMA_Abort+0x58a>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a47      	ldr	r2, [pc, #284]	; (80029b4 <HAL_DMA_Abort+0x5f0>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d059      	beq.n	800294e <HAL_DMA_Abort+0x58a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a46      	ldr	r2, [pc, #280]	; (80029b8 <HAL_DMA_Abort+0x5f4>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d054      	beq.n	800294e <HAL_DMA_Abort+0x58a>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a44      	ldr	r2, [pc, #272]	; (80029bc <HAL_DMA_Abort+0x5f8>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d04f      	beq.n	800294e <HAL_DMA_Abort+0x58a>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a43      	ldr	r2, [pc, #268]	; (80029c0 <HAL_DMA_Abort+0x5fc>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d04a      	beq.n	800294e <HAL_DMA_Abort+0x58a>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a41      	ldr	r2, [pc, #260]	; (80029c4 <HAL_DMA_Abort+0x600>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d045      	beq.n	800294e <HAL_DMA_Abort+0x58a>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a40      	ldr	r2, [pc, #256]	; (80029c8 <HAL_DMA_Abort+0x604>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d040      	beq.n	800294e <HAL_DMA_Abort+0x58a>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a3e      	ldr	r2, [pc, #248]	; (80029cc <HAL_DMA_Abort+0x608>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d03b      	beq.n	800294e <HAL_DMA_Abort+0x58a>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a3d      	ldr	r2, [pc, #244]	; (80029d0 <HAL_DMA_Abort+0x60c>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d036      	beq.n	800294e <HAL_DMA_Abort+0x58a>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a3b      	ldr	r2, [pc, #236]	; (80029d4 <HAL_DMA_Abort+0x610>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d031      	beq.n	800294e <HAL_DMA_Abort+0x58a>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a3a      	ldr	r2, [pc, #232]	; (80029d8 <HAL_DMA_Abort+0x614>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d02c      	beq.n	800294e <HAL_DMA_Abort+0x58a>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a38      	ldr	r2, [pc, #224]	; (80029dc <HAL_DMA_Abort+0x618>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d027      	beq.n	800294e <HAL_DMA_Abort+0x58a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a37      	ldr	r2, [pc, #220]	; (80029e0 <HAL_DMA_Abort+0x61c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d022      	beq.n	800294e <HAL_DMA_Abort+0x58a>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a35      	ldr	r2, [pc, #212]	; (80029e4 <HAL_DMA_Abort+0x620>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d01d      	beq.n	800294e <HAL_DMA_Abort+0x58a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a34      	ldr	r2, [pc, #208]	; (80029e8 <HAL_DMA_Abort+0x624>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d018      	beq.n	800294e <HAL_DMA_Abort+0x58a>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a32      	ldr	r2, [pc, #200]	; (80029ec <HAL_DMA_Abort+0x628>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d013      	beq.n	800294e <HAL_DMA_Abort+0x58a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a31      	ldr	r2, [pc, #196]	; (80029f0 <HAL_DMA_Abort+0x62c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d00e      	beq.n	800294e <HAL_DMA_Abort+0x58a>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a2f      	ldr	r2, [pc, #188]	; (80029f4 <HAL_DMA_Abort+0x630>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d009      	beq.n	800294e <HAL_DMA_Abort+0x58a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a2e      	ldr	r2, [pc, #184]	; (80029f8 <HAL_DMA_Abort+0x634>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d004      	beq.n	800294e <HAL_DMA_Abort+0x58a>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a2c      	ldr	r2, [pc, #176]	; (80029fc <HAL_DMA_Abort+0x638>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d101      	bne.n	8002952 <HAL_DMA_Abort+0x58e>
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <HAL_DMA_Abort+0x590>
 8002952:	2300      	movs	r3, #0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d015      	beq.n	8002984 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002960:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00c      	beq.n	8002984 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002974:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002978:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002982:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40020010 	.word	0x40020010
 80029a4:	40020028 	.word	0x40020028
 80029a8:	40020040 	.word	0x40020040
 80029ac:	40020058 	.word	0x40020058
 80029b0:	40020070 	.word	0x40020070
 80029b4:	40020088 	.word	0x40020088
 80029b8:	400200a0 	.word	0x400200a0
 80029bc:	400200b8 	.word	0x400200b8
 80029c0:	40020410 	.word	0x40020410
 80029c4:	40020428 	.word	0x40020428
 80029c8:	40020440 	.word	0x40020440
 80029cc:	40020458 	.word	0x40020458
 80029d0:	40020470 	.word	0x40020470
 80029d4:	40020488 	.word	0x40020488
 80029d8:	400204a0 	.word	0x400204a0
 80029dc:	400204b8 	.word	0x400204b8
 80029e0:	58025408 	.word	0x58025408
 80029e4:	5802541c 	.word	0x5802541c
 80029e8:	58025430 	.word	0x58025430
 80029ec:	58025444 	.word	0x58025444
 80029f0:	58025458 	.word	0x58025458
 80029f4:	5802546c 	.word	0x5802546c
 80029f8:	58025480 	.word	0x58025480
 80029fc:	58025494 	.word	0x58025494

08002a00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e205      	b.n	8002e1e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d004      	beq.n	8002a28 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2280      	movs	r2, #128	; 0x80
 8002a22:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e1fa      	b.n	8002e1e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a8c      	ldr	r2, [pc, #560]	; (8002c60 <HAL_DMA_Abort_IT+0x260>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d04a      	beq.n	8002ac8 <HAL_DMA_Abort_IT+0xc8>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a8b      	ldr	r2, [pc, #556]	; (8002c64 <HAL_DMA_Abort_IT+0x264>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d045      	beq.n	8002ac8 <HAL_DMA_Abort_IT+0xc8>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a89      	ldr	r2, [pc, #548]	; (8002c68 <HAL_DMA_Abort_IT+0x268>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d040      	beq.n	8002ac8 <HAL_DMA_Abort_IT+0xc8>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a88      	ldr	r2, [pc, #544]	; (8002c6c <HAL_DMA_Abort_IT+0x26c>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d03b      	beq.n	8002ac8 <HAL_DMA_Abort_IT+0xc8>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a86      	ldr	r2, [pc, #536]	; (8002c70 <HAL_DMA_Abort_IT+0x270>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d036      	beq.n	8002ac8 <HAL_DMA_Abort_IT+0xc8>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a85      	ldr	r2, [pc, #532]	; (8002c74 <HAL_DMA_Abort_IT+0x274>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d031      	beq.n	8002ac8 <HAL_DMA_Abort_IT+0xc8>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a83      	ldr	r2, [pc, #524]	; (8002c78 <HAL_DMA_Abort_IT+0x278>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d02c      	beq.n	8002ac8 <HAL_DMA_Abort_IT+0xc8>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a82      	ldr	r2, [pc, #520]	; (8002c7c <HAL_DMA_Abort_IT+0x27c>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d027      	beq.n	8002ac8 <HAL_DMA_Abort_IT+0xc8>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a80      	ldr	r2, [pc, #512]	; (8002c80 <HAL_DMA_Abort_IT+0x280>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d022      	beq.n	8002ac8 <HAL_DMA_Abort_IT+0xc8>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a7f      	ldr	r2, [pc, #508]	; (8002c84 <HAL_DMA_Abort_IT+0x284>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d01d      	beq.n	8002ac8 <HAL_DMA_Abort_IT+0xc8>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a7d      	ldr	r2, [pc, #500]	; (8002c88 <HAL_DMA_Abort_IT+0x288>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d018      	beq.n	8002ac8 <HAL_DMA_Abort_IT+0xc8>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a7c      	ldr	r2, [pc, #496]	; (8002c8c <HAL_DMA_Abort_IT+0x28c>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d013      	beq.n	8002ac8 <HAL_DMA_Abort_IT+0xc8>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a7a      	ldr	r2, [pc, #488]	; (8002c90 <HAL_DMA_Abort_IT+0x290>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d00e      	beq.n	8002ac8 <HAL_DMA_Abort_IT+0xc8>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a79      	ldr	r2, [pc, #484]	; (8002c94 <HAL_DMA_Abort_IT+0x294>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d009      	beq.n	8002ac8 <HAL_DMA_Abort_IT+0xc8>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a77      	ldr	r2, [pc, #476]	; (8002c98 <HAL_DMA_Abort_IT+0x298>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d004      	beq.n	8002ac8 <HAL_DMA_Abort_IT+0xc8>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a76      	ldr	r2, [pc, #472]	; (8002c9c <HAL_DMA_Abort_IT+0x29c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d101      	bne.n	8002acc <HAL_DMA_Abort_IT+0xcc>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <HAL_DMA_Abort_IT+0xce>
 8002acc:	2300      	movs	r3, #0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d065      	beq.n	8002b9e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2204      	movs	r2, #4
 8002ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a60      	ldr	r2, [pc, #384]	; (8002c60 <HAL_DMA_Abort_IT+0x260>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d04a      	beq.n	8002b7a <HAL_DMA_Abort_IT+0x17a>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a5e      	ldr	r2, [pc, #376]	; (8002c64 <HAL_DMA_Abort_IT+0x264>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d045      	beq.n	8002b7a <HAL_DMA_Abort_IT+0x17a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a5d      	ldr	r2, [pc, #372]	; (8002c68 <HAL_DMA_Abort_IT+0x268>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d040      	beq.n	8002b7a <HAL_DMA_Abort_IT+0x17a>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a5b      	ldr	r2, [pc, #364]	; (8002c6c <HAL_DMA_Abort_IT+0x26c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d03b      	beq.n	8002b7a <HAL_DMA_Abort_IT+0x17a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a5a      	ldr	r2, [pc, #360]	; (8002c70 <HAL_DMA_Abort_IT+0x270>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d036      	beq.n	8002b7a <HAL_DMA_Abort_IT+0x17a>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a58      	ldr	r2, [pc, #352]	; (8002c74 <HAL_DMA_Abort_IT+0x274>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d031      	beq.n	8002b7a <HAL_DMA_Abort_IT+0x17a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a57      	ldr	r2, [pc, #348]	; (8002c78 <HAL_DMA_Abort_IT+0x278>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d02c      	beq.n	8002b7a <HAL_DMA_Abort_IT+0x17a>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a55      	ldr	r2, [pc, #340]	; (8002c7c <HAL_DMA_Abort_IT+0x27c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d027      	beq.n	8002b7a <HAL_DMA_Abort_IT+0x17a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a54      	ldr	r2, [pc, #336]	; (8002c80 <HAL_DMA_Abort_IT+0x280>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d022      	beq.n	8002b7a <HAL_DMA_Abort_IT+0x17a>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a52      	ldr	r2, [pc, #328]	; (8002c84 <HAL_DMA_Abort_IT+0x284>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d01d      	beq.n	8002b7a <HAL_DMA_Abort_IT+0x17a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a51      	ldr	r2, [pc, #324]	; (8002c88 <HAL_DMA_Abort_IT+0x288>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d018      	beq.n	8002b7a <HAL_DMA_Abort_IT+0x17a>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a4f      	ldr	r2, [pc, #316]	; (8002c8c <HAL_DMA_Abort_IT+0x28c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d013      	beq.n	8002b7a <HAL_DMA_Abort_IT+0x17a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a4e      	ldr	r2, [pc, #312]	; (8002c90 <HAL_DMA_Abort_IT+0x290>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d00e      	beq.n	8002b7a <HAL_DMA_Abort_IT+0x17a>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a4c      	ldr	r2, [pc, #304]	; (8002c94 <HAL_DMA_Abort_IT+0x294>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d009      	beq.n	8002b7a <HAL_DMA_Abort_IT+0x17a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a4b      	ldr	r2, [pc, #300]	; (8002c98 <HAL_DMA_Abort_IT+0x298>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d004      	beq.n	8002b7a <HAL_DMA_Abort_IT+0x17a>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a49      	ldr	r2, [pc, #292]	; (8002c9c <HAL_DMA_Abort_IT+0x29c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d108      	bne.n	8002b8c <HAL_DMA_Abort_IT+0x18c>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0201 	bic.w	r2, r2, #1
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	e147      	b.n	8002e1c <HAL_DMA_Abort_IT+0x41c>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0201 	bic.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	e13e      	b.n	8002e1c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 020e 	bic.w	r2, r2, #14
 8002bac:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a2b      	ldr	r2, [pc, #172]	; (8002c60 <HAL_DMA_Abort_IT+0x260>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d04a      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x24e>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a29      	ldr	r2, [pc, #164]	; (8002c64 <HAL_DMA_Abort_IT+0x264>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d045      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x24e>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a28      	ldr	r2, [pc, #160]	; (8002c68 <HAL_DMA_Abort_IT+0x268>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d040      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x24e>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a26      	ldr	r2, [pc, #152]	; (8002c6c <HAL_DMA_Abort_IT+0x26c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d03b      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x24e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a25      	ldr	r2, [pc, #148]	; (8002c70 <HAL_DMA_Abort_IT+0x270>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d036      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x24e>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a23      	ldr	r2, [pc, #140]	; (8002c74 <HAL_DMA_Abort_IT+0x274>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d031      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x24e>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a22      	ldr	r2, [pc, #136]	; (8002c78 <HAL_DMA_Abort_IT+0x278>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d02c      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x24e>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a20      	ldr	r2, [pc, #128]	; (8002c7c <HAL_DMA_Abort_IT+0x27c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d027      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x24e>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a1f      	ldr	r2, [pc, #124]	; (8002c80 <HAL_DMA_Abort_IT+0x280>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d022      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x24e>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a1d      	ldr	r2, [pc, #116]	; (8002c84 <HAL_DMA_Abort_IT+0x284>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d01d      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x24e>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a1c      	ldr	r2, [pc, #112]	; (8002c88 <HAL_DMA_Abort_IT+0x288>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d018      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x24e>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a1a      	ldr	r2, [pc, #104]	; (8002c8c <HAL_DMA_Abort_IT+0x28c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d013      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x24e>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a19      	ldr	r2, [pc, #100]	; (8002c90 <HAL_DMA_Abort_IT+0x290>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d00e      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x24e>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a17      	ldr	r2, [pc, #92]	; (8002c94 <HAL_DMA_Abort_IT+0x294>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d009      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x24e>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a16      	ldr	r2, [pc, #88]	; (8002c98 <HAL_DMA_Abort_IT+0x298>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d004      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x24e>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a14      	ldr	r2, [pc, #80]	; (8002c9c <HAL_DMA_Abort_IT+0x29c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d128      	bne.n	8002ca0 <HAL_DMA_Abort_IT+0x2a0>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0201 	bic.w	r2, r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	e027      	b.n	8002cb0 <HAL_DMA_Abort_IT+0x2b0>
 8002c60:	40020010 	.word	0x40020010
 8002c64:	40020028 	.word	0x40020028
 8002c68:	40020040 	.word	0x40020040
 8002c6c:	40020058 	.word	0x40020058
 8002c70:	40020070 	.word	0x40020070
 8002c74:	40020088 	.word	0x40020088
 8002c78:	400200a0 	.word	0x400200a0
 8002c7c:	400200b8 	.word	0x400200b8
 8002c80:	40020410 	.word	0x40020410
 8002c84:	40020428 	.word	0x40020428
 8002c88:	40020440 	.word	0x40020440
 8002c8c:	40020458 	.word	0x40020458
 8002c90:	40020470 	.word	0x40020470
 8002c94:	40020488 	.word	0x40020488
 8002c98:	400204a0 	.word	0x400204a0
 8002c9c:	400204b8 	.word	0x400204b8
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0201 	bic.w	r2, r2, #1
 8002cae:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a5c      	ldr	r2, [pc, #368]	; (8002e28 <HAL_DMA_Abort_IT+0x428>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d072      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x3a0>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a5b      	ldr	r2, [pc, #364]	; (8002e2c <HAL_DMA_Abort_IT+0x42c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d06d      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x3a0>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a59      	ldr	r2, [pc, #356]	; (8002e30 <HAL_DMA_Abort_IT+0x430>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d068      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x3a0>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a58      	ldr	r2, [pc, #352]	; (8002e34 <HAL_DMA_Abort_IT+0x434>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d063      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x3a0>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a56      	ldr	r2, [pc, #344]	; (8002e38 <HAL_DMA_Abort_IT+0x438>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d05e      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x3a0>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a55      	ldr	r2, [pc, #340]	; (8002e3c <HAL_DMA_Abort_IT+0x43c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d059      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x3a0>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a53      	ldr	r2, [pc, #332]	; (8002e40 <HAL_DMA_Abort_IT+0x440>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d054      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x3a0>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a52      	ldr	r2, [pc, #328]	; (8002e44 <HAL_DMA_Abort_IT+0x444>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d04f      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x3a0>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a50      	ldr	r2, [pc, #320]	; (8002e48 <HAL_DMA_Abort_IT+0x448>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d04a      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x3a0>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a4f      	ldr	r2, [pc, #316]	; (8002e4c <HAL_DMA_Abort_IT+0x44c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d045      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x3a0>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a4d      	ldr	r2, [pc, #308]	; (8002e50 <HAL_DMA_Abort_IT+0x450>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d040      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x3a0>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a4c      	ldr	r2, [pc, #304]	; (8002e54 <HAL_DMA_Abort_IT+0x454>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d03b      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x3a0>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a4a      	ldr	r2, [pc, #296]	; (8002e58 <HAL_DMA_Abort_IT+0x458>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d036      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x3a0>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a49      	ldr	r2, [pc, #292]	; (8002e5c <HAL_DMA_Abort_IT+0x45c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d031      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x3a0>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a47      	ldr	r2, [pc, #284]	; (8002e60 <HAL_DMA_Abort_IT+0x460>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d02c      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x3a0>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a46      	ldr	r2, [pc, #280]	; (8002e64 <HAL_DMA_Abort_IT+0x464>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d027      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x3a0>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a44      	ldr	r2, [pc, #272]	; (8002e68 <HAL_DMA_Abort_IT+0x468>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d022      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x3a0>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a43      	ldr	r2, [pc, #268]	; (8002e6c <HAL_DMA_Abort_IT+0x46c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d01d      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x3a0>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a41      	ldr	r2, [pc, #260]	; (8002e70 <HAL_DMA_Abort_IT+0x470>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d018      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x3a0>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a40      	ldr	r2, [pc, #256]	; (8002e74 <HAL_DMA_Abort_IT+0x474>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d013      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x3a0>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a3e      	ldr	r2, [pc, #248]	; (8002e78 <HAL_DMA_Abort_IT+0x478>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d00e      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x3a0>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a3d      	ldr	r2, [pc, #244]	; (8002e7c <HAL_DMA_Abort_IT+0x47c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d009      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x3a0>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a3b      	ldr	r2, [pc, #236]	; (8002e80 <HAL_DMA_Abort_IT+0x480>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d004      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x3a0>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a3a      	ldr	r2, [pc, #232]	; (8002e84 <HAL_DMA_Abort_IT+0x484>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d101      	bne.n	8002da4 <HAL_DMA_Abort_IT+0x3a4>
 8002da0:	2301      	movs	r3, #1
 8002da2:	e000      	b.n	8002da6 <HAL_DMA_Abort_IT+0x3a6>
 8002da4:	2300      	movs	r3, #0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d028      	beq.n	8002dfc <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002db8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbe:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc4:	f003 031f 	and.w	r3, r3, #31
 8002dc8:	2201      	movs	r2, #1
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002dd8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00c      	beq.n	8002dfc <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002df0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002dfa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40020010 	.word	0x40020010
 8002e2c:	40020028 	.word	0x40020028
 8002e30:	40020040 	.word	0x40020040
 8002e34:	40020058 	.word	0x40020058
 8002e38:	40020070 	.word	0x40020070
 8002e3c:	40020088 	.word	0x40020088
 8002e40:	400200a0 	.word	0x400200a0
 8002e44:	400200b8 	.word	0x400200b8
 8002e48:	40020410 	.word	0x40020410
 8002e4c:	40020428 	.word	0x40020428
 8002e50:	40020440 	.word	0x40020440
 8002e54:	40020458 	.word	0x40020458
 8002e58:	40020470 	.word	0x40020470
 8002e5c:	40020488 	.word	0x40020488
 8002e60:	400204a0 	.word	0x400204a0
 8002e64:	400204b8 	.word	0x400204b8
 8002e68:	58025408 	.word	0x58025408
 8002e6c:	5802541c 	.word	0x5802541c
 8002e70:	58025430 	.word	0x58025430
 8002e74:	58025444 	.word	0x58025444
 8002e78:	58025458 	.word	0x58025458
 8002e7c:	5802546c 	.word	0x5802546c
 8002e80:	58025480 	.word	0x58025480
 8002e84:	58025494 	.word	0x58025494

08002e88 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b098      	sub	sp, #96	; 0x60
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002e90:	4a84      	ldr	r2, [pc, #528]	; (80030a4 <HAL_FDCAN_Init+0x21c>)
 8002e92:	f107 030c 	add.w	r3, r7, #12
 8002e96:	4611      	mov	r1, r2
 8002e98:	224c      	movs	r2, #76	; 0x4c
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f009 fe1e 	bl	800cadc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e1ca      	b.n	8003240 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a7e      	ldr	r2, [pc, #504]	; (80030a8 <HAL_FDCAN_Init+0x220>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d106      	bne.n	8002ec2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d106      	bne.n	8002edc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7fe fd1c 	bl	8001914 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699a      	ldr	r2, [r3, #24]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0210 	bic.w	r2, r2, #16
 8002eea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eec:	f7ff f91e 	bl	800212c <HAL_GetTick>
 8002ef0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002ef2:	e014      	b.n	8002f1e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002ef4:	f7ff f91a 	bl	800212c <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b0a      	cmp	r3, #10
 8002f00:	d90d      	bls.n	8002f1e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f08:	f043 0201 	orr.w	r2, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2203      	movs	r2, #3
 8002f16:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e190      	b.n	8003240 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	f003 0308 	and.w	r3, r3, #8
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d0e3      	beq.n	8002ef4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0201 	orr.w	r2, r2, #1
 8002f3a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f3c:	f7ff f8f6 	bl	800212c <HAL_GetTick>
 8002f40:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002f42:	e014      	b.n	8002f6e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002f44:	f7ff f8f2 	bl	800212c <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b0a      	cmp	r3, #10
 8002f50:	d90d      	bls.n	8002f6e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f58:	f043 0201 	orr.w	r2, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2203      	movs	r2, #3
 8002f66:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e168      	b.n	8003240 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0e3      	beq.n	8002f44 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699a      	ldr	r2, [r3, #24]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0202 	orr.w	r2, r2, #2
 8002f8a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	7c1b      	ldrb	r3, [r3, #16]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d108      	bne.n	8002fa6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fa2:	619a      	str	r2, [r3, #24]
 8002fa4:	e007      	b.n	8002fb6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	699a      	ldr	r2, [r3, #24]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fb4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	7c5b      	ldrb	r3, [r3, #17]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d108      	bne.n	8002fd0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	699a      	ldr	r2, [r3, #24]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fcc:	619a      	str	r2, [r3, #24]
 8002fce:	e007      	b.n	8002fe0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699a      	ldr	r2, [r3, #24]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002fde:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	7c9b      	ldrb	r3, [r3, #18]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d108      	bne.n	8002ffa <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699a      	ldr	r2, [r3, #24]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ff6:	619a      	str	r2, [r3, #24]
 8002ff8:	e007      	b.n	800300a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699a      	ldr	r2, [r3, #24]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003008:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699a      	ldr	r2, [r3, #24]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800302e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691a      	ldr	r2, [r3, #16]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0210 	bic.w	r2, r2, #16
 800303e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d108      	bne.n	800305a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699a      	ldr	r2, [r3, #24]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0204 	orr.w	r2, r2, #4
 8003056:	619a      	str	r2, [r3, #24]
 8003058:	e030      	b.n	80030bc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d02c      	beq.n	80030bc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	2b02      	cmp	r3, #2
 8003068:	d020      	beq.n	80030ac <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	699a      	ldr	r2, [r3, #24]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003078:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0210 	orr.w	r2, r2, #16
 8003088:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	2b03      	cmp	r3, #3
 8003090:	d114      	bne.n	80030bc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	699a      	ldr	r2, [r3, #24]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f042 0220 	orr.w	r2, r2, #32
 80030a0:	619a      	str	r2, [r3, #24]
 80030a2:	e00b      	b.n	80030bc <HAL_FDCAN_Init+0x234>
 80030a4:	08011348 	.word	0x08011348
 80030a8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699a      	ldr	r2, [r3, #24]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0220 	orr.w	r2, r2, #32
 80030ba:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	3b01      	subs	r3, #1
 80030c2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	3b01      	subs	r3, #1
 80030ca:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80030cc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80030d4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	3b01      	subs	r3, #1
 80030de:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80030e4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80030e6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030f0:	d115      	bne.n	800311e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fc:	3b01      	subs	r3, #1
 80030fe:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003100:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	3b01      	subs	r3, #1
 8003108:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800310a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	3b01      	subs	r3, #1
 8003114:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800311a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800311c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003144:	4413      	add	r3, r2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d012      	beq.n	8003170 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003152:	f023 0107 	bic.w	r1, r3, #7
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003160:	4413      	add	r3, r2
 8003162:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	2b00      	cmp	r3, #0
 8003176:	d012      	beq.n	800319e <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003180:	f023 0107 	bic.w	r1, r3, #7
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800318e:	4413      	add	r3, r2
 8003190:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d013      	beq.n	80031ce <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80031ae:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80031bc:	4413      	add	r3, r2
 80031be:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80031c2:	011a      	lsls	r2, r3, #4
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d013      	beq.n	80031fe <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80031de:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80031ec:	4413      	add	r3, r2
 80031ee:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80031f2:	021a      	lsls	r2, r3, #8
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a11      	ldr	r2, [pc, #68]	; (8003248 <HAL_FDCAN_Init+0x3c0>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d107      	bne.n	8003218 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f022 0203 	bic.w	r2, r2, #3
 8003216:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 fb1f 	bl	8003874 <FDCAN_CalcultateRamBlockAddresses>
 8003236:	4603      	mov	r3, r0
 8003238:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800323c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8003240:	4618      	mov	r0, r3
 8003242:	3760      	adds	r7, #96	; 0x60
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	4000a000 	.word	0x4000a000

0800324c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b092      	sub	sp, #72	; 0x48
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8003254:	4b90      	ldr	r3, [pc, #576]	; (8003498 <HAL_FDCAN_IRQHandler+0x24c>)
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	079b      	lsls	r3, r3, #30
 800325a:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800325c:	4b8e      	ldr	r3, [pc, #568]	; (8003498 <HAL_FDCAN_IRQHandler+0x24c>)
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	079b      	lsls	r3, r3, #30
 8003262:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003264:	4013      	ands	r3, r2
 8003266:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800326e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003272:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800327c:	4013      	ands	r3, r2
 800327e:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003292:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003294:	4013      	ands	r3, r2
 8003296:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800329e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032ac:	4013      	ands	r3, r2
 80032ae:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032b6:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80032ba:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032c4:	4013      	ands	r3, r2
 80032c6:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ce:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80032d2:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032dc:	4013      	ands	r3, r2
 80032de:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d011      	beq.n	8003312 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00a      	beq.n	8003312 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003304:	651a      	str	r2, [r3, #80]	; 0x50
 8003306:	4b64      	ldr	r3, [pc, #400]	; (8003498 <HAL_FDCAN_IRQHandler+0x24c>)
 8003308:	2200      	movs	r2, #0
 800330a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 fa65 	bl	80037dc <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800331c:	2b00      	cmp	r3, #0
 800331e:	d01e      	beq.n	800335e <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332a:	2b00      	cmp	r3, #0
 800332c:	d017      	beq.n	800335e <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003336:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003340:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003342:	4013      	ands	r3, r2
 8003344:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800334e:	651a      	str	r2, [r3, #80]	; 0x50
 8003350:	4b51      	ldr	r3, [pc, #324]	; (8003498 <HAL_FDCAN_IRQHandler+0x24c>)
 8003352:	2200      	movs	r2, #0
 8003354:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003356:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 fa16 	bl	800378a <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800335e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00d      	beq.n	8003380 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800336a:	4b4c      	ldr	r3, [pc, #304]	; (800349c <HAL_FDCAN_IRQHandler+0x250>)
 800336c:	400b      	ands	r3, r1
 800336e:	6513      	str	r3, [r2, #80]	; 0x50
 8003370:	4a49      	ldr	r2, [pc, #292]	; (8003498 <HAL_FDCAN_IRQHandler+0x24c>)
 8003372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003374:	0f9b      	lsrs	r3, r3, #30
 8003376:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8003378:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f9c4 	bl	8003708 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00d      	beq.n	80033a2 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800338c:	4b43      	ldr	r3, [pc, #268]	; (800349c <HAL_FDCAN_IRQHandler+0x250>)
 800338e:	400b      	ands	r3, r1
 8003390:	6513      	str	r3, [r2, #80]	; 0x50
 8003392:	4a41      	ldr	r2, [pc, #260]	; (8003498 <HAL_FDCAN_IRQHandler+0x24c>)
 8003394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003396:	0f9b      	lsrs	r3, r3, #30
 8003398:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800339a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f9be 	bl	800371e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80033a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00d      	beq.n	80033c4 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80033ae:	4b3b      	ldr	r3, [pc, #236]	; (800349c <HAL_FDCAN_IRQHandler+0x250>)
 80033b0:	400b      	ands	r3, r1
 80033b2:	6513      	str	r3, [r2, #80]	; 0x50
 80033b4:	4a38      	ldr	r2, [pc, #224]	; (8003498 <HAL_FDCAN_IRQHandler+0x24c>)
 80033b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033b8:	0f9b      	lsrs	r3, r3, #30
 80033ba:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80033bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f9b8 	bl	8003734 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80033c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00d      	beq.n	80033e6 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033d0:	4b32      	ldr	r3, [pc, #200]	; (800349c <HAL_FDCAN_IRQHandler+0x250>)
 80033d2:	400b      	ands	r3, r1
 80033d4:	6513      	str	r3, [r2, #80]	; 0x50
 80033d6:	4a30      	ldr	r2, [pc, #192]	; (8003498 <HAL_FDCAN_IRQHandler+0x24c>)
 80033d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033da:	0f9b      	lsrs	r3, r3, #30
 80033dc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80033de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f9b2 	bl	800374a <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d011      	beq.n	8003418 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800340a:	651a      	str	r2, [r3, #80]	; 0x50
 800340c:	4b22      	ldr	r3, [pc, #136]	; (8003498 <HAL_FDCAN_IRQHandler+0x24c>)
 800340e:	2200      	movs	r2, #0
 8003410:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f9a4 	bl	8003760 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003422:	2b00      	cmp	r3, #0
 8003424:	d01e      	beq.n	8003464 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800342c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003430:	2b00      	cmp	r3, #0
 8003432:	d017      	beq.n	8003464 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800343c:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003448:	4013      	ands	r3, r2
 800344a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003454:	651a      	str	r2, [r3, #80]	; 0x50
 8003456:	4b10      	ldr	r3, [pc, #64]	; (8003498 <HAL_FDCAN_IRQHandler+0x24c>)
 8003458:	2200      	movs	r2, #0
 800345a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800345c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f988 	bl	8003774 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d016      	beq.n	80034a0 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003478:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00f      	beq.n	80034a0 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003488:	651a      	str	r2, [r3, #80]	; 0x50
 800348a:	4b03      	ldr	r3, [pc, #12]	; (8003498 <HAL_FDCAN_IRQHandler+0x24c>)
 800348c:	2200      	movs	r2, #0
 800348e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 f985 	bl	80037a0 <HAL_FDCAN_RxBufferNewMessageCallback>
 8003496:	e003      	b.n	80034a0 <HAL_FDCAN_IRQHandler+0x254>
 8003498:	4000a800 	.word	0x4000a800
 800349c:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d011      	beq.n	80034d2 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80034c4:	651a      	str	r2, [r3, #80]	; 0x50
 80034c6:	4b8d      	ldr	r3, [pc, #564]	; (80036fc <HAL_FDCAN_IRQHandler+0x4b0>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f971 	bl	80037b4 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d011      	beq.n	8003504 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80034f6:	651a      	str	r2, [r3, #80]	; 0x50
 80034f8:	4b80      	ldr	r3, [pc, #512]	; (80036fc <HAL_FDCAN_IRQHandler+0x4b0>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f962 	bl	80037c8 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d016      	beq.n	8003540 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00f      	beq.n	8003540 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003528:	651a      	str	r2, [r3, #80]	; 0x50
 800352a:	4b74      	ldr	r3, [pc, #464]	; (80036fc <HAL_FDCAN_IRQHandler+0x4b0>)
 800352c:	2200      	movs	r2, #0
 800352e:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003536:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00d      	beq.n	8003562 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800354c:	4b6c      	ldr	r3, [pc, #432]	; (8003700 <HAL_FDCAN_IRQHandler+0x4b4>)
 800354e:	400b      	ands	r3, r1
 8003550:	6513      	str	r3, [r2, #80]	; 0x50
 8003552:	4a6a      	ldr	r2, [pc, #424]	; (80036fc <HAL_FDCAN_IRQHandler+0x4b0>)
 8003554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003556:	0f9b      	lsrs	r3, r3, #30
 8003558:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800355a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f951 	bl	8003804 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003564:	2b00      	cmp	r3, #0
 8003566:	d011      	beq.n	800358c <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800356e:	4b64      	ldr	r3, [pc, #400]	; (8003700 <HAL_FDCAN_IRQHandler+0x4b4>)
 8003570:	400b      	ands	r3, r1
 8003572:	6513      	str	r3, [r2, #80]	; 0x50
 8003574:	4a61      	ldr	r2, [pc, #388]	; (80036fc <HAL_FDCAN_IRQHandler+0x4b0>)
 8003576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003578:	0f9b      	lsrs	r3, r3, #30
 800357a:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a5c      	ldr	r2, [pc, #368]	; (8003704 <HAL_FDCAN_IRQHandler+0x4b8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	f040 80a6 	bne.w	80036e4 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 809e 	beq.w	80036e4 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035bc:	4013      	ands	r3, r2
 80035be:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80035ca:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	6a3a      	ldr	r2, [r7, #32]
 80035d4:	4013      	ands	r3, r2
 80035d6:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80035e2:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	69fa      	ldr	r2, [r7, #28]
 80035ec:	4013      	ands	r3, r2
 80035ee:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 80035fa:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	4013      	ands	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8003612:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	4013      	ands	r3, r2
 800361e:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	2b00      	cmp	r3, #0
 8003624:	d007      	beq.n	8003636 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800362c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800362e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f8f2 	bl	800381a <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d007      	beq.n	800364c <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	6a3a      	ldr	r2, [r7, #32]
 8003642:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8003644:	6a39      	ldr	r1, [r7, #32]
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f8f2 	bl	8003830 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003656:	2b00      	cmp	r3, #0
 8003658:	d01b      	beq.n	8003692 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003664:	2b00      	cmp	r3, #0
 8003666:	d014      	beq.n	8003692 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366e:	0c1b      	lsrs	r3, r3, #16
 8003670:	b29b      	uxth	r3, r3
 8003672:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800367e:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2240      	movs	r2, #64	; 0x40
 8003686:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	6939      	ldr	r1, [r7, #16]
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f8da 	bl	8003846 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d007      	beq.n	80036a8 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80036a0:	69f9      	ldr	r1, [r7, #28]
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f8db 	bl	800385e <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00b      	beq.n	80036c6 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00b      	beq.n	80036e4 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d002      	beq.n	80036f4 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f87e 	bl	80037f0 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80036f4:	bf00      	nop
 80036f6:	3748      	adds	r7, #72	; 0x48
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	4000a800 	.word	0x4000a800
 8003700:	3fcfffff 	.word	0x3fcfffff
 8003704:	4000a000 	.word	0x4000a000

08003708 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
 8003726:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8003846:	b480      	push	{r7}
 8003848:	b085      	sub	sp, #20
 800384a:	af00      	add	r7, sp, #0
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8003852:	bf00      	nop
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003880:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800388a:	4ba7      	ldr	r3, [pc, #668]	; (8003b28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800388c:	4013      	ands	r3, r2
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	0091      	lsls	r1, r2, #2
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6812      	ldr	r2, [r2, #0]
 8003896:	430b      	orrs	r3, r1
 8003898:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038a4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ac:	041a      	lsls	r2, r3, #16
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	4413      	add	r3, r2
 80038c0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80038ca:	4b97      	ldr	r3, [pc, #604]	; (8003b28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80038cc:	4013      	ands	r3, r2
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	0091      	lsls	r1, r2, #2
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6812      	ldr	r2, [r2, #0]
 80038d6:	430b      	orrs	r3, r1
 80038d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ec:	041a      	lsls	r2, r3, #16
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	4413      	add	r3, r2
 8003902:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800390c:	4b86      	ldr	r3, [pc, #536]	; (8003b28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800390e:	4013      	ands	r3, r2
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	0091      	lsls	r1, r2, #2
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	430b      	orrs	r3, r1
 800391a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003926:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	041a      	lsls	r2, r3, #16
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003942:	fb02 f303 	mul.w	r3, r2, r3
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	4413      	add	r3, r2
 800394a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003954:	4b74      	ldr	r3, [pc, #464]	; (8003b28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003956:	4013      	ands	r3, r2
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	0091      	lsls	r1, r2, #2
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6812      	ldr	r2, [r2, #0]
 8003960:	430b      	orrs	r3, r1
 8003962:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800396e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003976:	041a      	lsls	r2, r3, #16
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800398a:	fb02 f303 	mul.w	r3, r2, r3
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	4413      	add	r3, r2
 8003992:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800399c:	4b62      	ldr	r3, [pc, #392]	; (8003b28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800399e:	4013      	ands	r3, r2
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	0091      	lsls	r1, r2, #2
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	430b      	orrs	r3, r1
 80039aa:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80039b6:	fb02 f303 	mul.w	r3, r2, r3
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	4413      	add	r3, r2
 80039be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80039c8:	4b57      	ldr	r3, [pc, #348]	; (8003b28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80039ca:	4013      	ands	r3, r2
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	0091      	lsls	r1, r2, #2
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	430b      	orrs	r3, r1
 80039d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039e2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ea:	041a      	lsls	r2, r3, #16
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	4413      	add	r3, r2
 8003a00:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003a0a:	4b47      	ldr	r3, [pc, #284]	; (8003b28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	0091      	lsls	r1, r2, #2
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6812      	ldr	r2, [r2, #0]
 8003a16:	430b      	orrs	r3, r1
 8003a18:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003a24:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2c:	041a      	lsls	r2, r3, #16
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003a40:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a48:	061a      	lsls	r2, r3, #24
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a58:	4b34      	ldr	r3, [pc, #208]	; (8003b2c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003a5a:	4413      	add	r3, r2
 8003a5c:	009a      	lsls	r2, r3, #2
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	441a      	add	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	441a      	add	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003a8e:	fb01 f303 	mul.w	r3, r1, r3
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	441a      	add	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003aa6:	fb01 f303 	mul.w	r3, r1, r3
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	441a      	add	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003abe:	fb01 f303 	mul.w	r3, r1, r3
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	441a      	add	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	441a      	add	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003aee:	fb01 f303 	mul.w	r3, r1, r3
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	441a      	add	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003b0a:	fb01 f303 	mul.w	r3, r1, r3
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	441a      	add	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1e:	4a04      	ldr	r2, [pc, #16]	; (8003b30 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d915      	bls.n	8003b50 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003b24:	e006      	b.n	8003b34 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003b26:	bf00      	nop
 8003b28:	ffff0003 	.word	0xffff0003
 8003b2c:	10002b00 	.word	0x10002b00
 8003b30:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b3a:	f043 0220 	orr.w	r2, r3, #32
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2203      	movs	r2, #3
 8003b48:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e010      	b.n	8003b72 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	e005      	b.n	8003b64 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	3304      	adds	r3, #4
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d3f3      	bcc.n	8003b58 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop

08003b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b089      	sub	sp, #36	; 0x24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003b8e:	4b89      	ldr	r3, [pc, #548]	; (8003db4 <HAL_GPIO_Init+0x234>)
 8003b90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b92:	e194      	b.n	8003ebe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	2101      	movs	r1, #1
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 8186 	beq.w	8003eb8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d00b      	beq.n	8003bcc <HAL_GPIO_Init+0x4c>
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d007      	beq.n	8003bcc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003bc0:	2b11      	cmp	r3, #17
 8003bc2:	d003      	beq.n	8003bcc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b12      	cmp	r3, #18
 8003bca:	d130      	bne.n	8003c2e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	2203      	movs	r2, #3
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	4013      	ands	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c02:	2201      	movs	r2, #1
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	43db      	mvns	r3, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	091b      	lsrs	r3, r3, #4
 8003c18:	f003 0201 	and.w	r2, r3, #1
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	2203      	movs	r2, #3
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	4013      	ands	r3, r2
 8003c44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d003      	beq.n	8003c6e <HAL_GPIO_Init+0xee>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b12      	cmp	r3, #18
 8003c6c:	d123      	bne.n	8003cb6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	08da      	lsrs	r2, r3, #3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3208      	adds	r2, #8
 8003c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	220f      	movs	r2, #15
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	691a      	ldr	r2, [r3, #16]
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	08da      	lsrs	r2, r3, #3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3208      	adds	r2, #8
 8003cb0:	69b9      	ldr	r1, [r7, #24]
 8003cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	2203      	movs	r2, #3
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f003 0203 	and.w	r2, r3, #3
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 80e0 	beq.w	8003eb8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cf8:	4b2f      	ldr	r3, [pc, #188]	; (8003db8 <HAL_GPIO_Init+0x238>)
 8003cfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003cfe:	4a2e      	ldr	r2, [pc, #184]	; (8003db8 <HAL_GPIO_Init+0x238>)
 8003d00:	f043 0302 	orr.w	r3, r3, #2
 8003d04:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003d08:	4b2b      	ldr	r3, [pc, #172]	; (8003db8 <HAL_GPIO_Init+0x238>)
 8003d0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d16:	4a29      	ldr	r2, [pc, #164]	; (8003dbc <HAL_GPIO_Init+0x23c>)
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	089b      	lsrs	r3, r3, #2
 8003d1c:	3302      	adds	r3, #2
 8003d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	220f      	movs	r2, #15
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	43db      	mvns	r3, r3
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	4013      	ands	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a20      	ldr	r2, [pc, #128]	; (8003dc0 <HAL_GPIO_Init+0x240>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d052      	beq.n	8003de8 <HAL_GPIO_Init+0x268>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a1f      	ldr	r2, [pc, #124]	; (8003dc4 <HAL_GPIO_Init+0x244>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d031      	beq.n	8003dae <HAL_GPIO_Init+0x22e>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a1e      	ldr	r2, [pc, #120]	; (8003dc8 <HAL_GPIO_Init+0x248>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d02b      	beq.n	8003daa <HAL_GPIO_Init+0x22a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a1d      	ldr	r2, [pc, #116]	; (8003dcc <HAL_GPIO_Init+0x24c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d025      	beq.n	8003da6 <HAL_GPIO_Init+0x226>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a1c      	ldr	r2, [pc, #112]	; (8003dd0 <HAL_GPIO_Init+0x250>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d01f      	beq.n	8003da2 <HAL_GPIO_Init+0x222>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a1b      	ldr	r2, [pc, #108]	; (8003dd4 <HAL_GPIO_Init+0x254>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d019      	beq.n	8003d9e <HAL_GPIO_Init+0x21e>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a1a      	ldr	r2, [pc, #104]	; (8003dd8 <HAL_GPIO_Init+0x258>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d013      	beq.n	8003d9a <HAL_GPIO_Init+0x21a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a19      	ldr	r2, [pc, #100]	; (8003ddc <HAL_GPIO_Init+0x25c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d00d      	beq.n	8003d96 <HAL_GPIO_Init+0x216>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a18      	ldr	r2, [pc, #96]	; (8003de0 <HAL_GPIO_Init+0x260>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d007      	beq.n	8003d92 <HAL_GPIO_Init+0x212>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a17      	ldr	r2, [pc, #92]	; (8003de4 <HAL_GPIO_Init+0x264>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d101      	bne.n	8003d8e <HAL_GPIO_Init+0x20e>
 8003d8a:	2309      	movs	r3, #9
 8003d8c:	e02d      	b.n	8003dea <HAL_GPIO_Init+0x26a>
 8003d8e:	230a      	movs	r3, #10
 8003d90:	e02b      	b.n	8003dea <HAL_GPIO_Init+0x26a>
 8003d92:	2308      	movs	r3, #8
 8003d94:	e029      	b.n	8003dea <HAL_GPIO_Init+0x26a>
 8003d96:	2307      	movs	r3, #7
 8003d98:	e027      	b.n	8003dea <HAL_GPIO_Init+0x26a>
 8003d9a:	2306      	movs	r3, #6
 8003d9c:	e025      	b.n	8003dea <HAL_GPIO_Init+0x26a>
 8003d9e:	2305      	movs	r3, #5
 8003da0:	e023      	b.n	8003dea <HAL_GPIO_Init+0x26a>
 8003da2:	2304      	movs	r3, #4
 8003da4:	e021      	b.n	8003dea <HAL_GPIO_Init+0x26a>
 8003da6:	2303      	movs	r3, #3
 8003da8:	e01f      	b.n	8003dea <HAL_GPIO_Init+0x26a>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e01d      	b.n	8003dea <HAL_GPIO_Init+0x26a>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e01b      	b.n	8003dea <HAL_GPIO_Init+0x26a>
 8003db2:	bf00      	nop
 8003db4:	58000080 	.word	0x58000080
 8003db8:	58024400 	.word	0x58024400
 8003dbc:	58000400 	.word	0x58000400
 8003dc0:	58020000 	.word	0x58020000
 8003dc4:	58020400 	.word	0x58020400
 8003dc8:	58020800 	.word	0x58020800
 8003dcc:	58020c00 	.word	0x58020c00
 8003dd0:	58021000 	.word	0x58021000
 8003dd4:	58021400 	.word	0x58021400
 8003dd8:	58021800 	.word	0x58021800
 8003ddc:	58021c00 	.word	0x58021c00
 8003de0:	58022000 	.word	0x58022000
 8003de4:	58022400 	.word	0x58022400
 8003de8:	2300      	movs	r3, #0
 8003dea:	69fa      	ldr	r2, [r7, #28]
 8003dec:	f002 0203 	and.w	r2, r2, #3
 8003df0:	0092      	lsls	r2, r2, #2
 8003df2:	4093      	lsls	r3, r2
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dfa:	4938      	ldr	r1, [pc, #224]	; (8003edc <HAL_GPIO_Init+0x35c>)
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	089b      	lsrs	r3, r3, #2
 8003e00:	3302      	adds	r3, #2
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	43db      	mvns	r3, r3
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4013      	ands	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	43db      	mvns	r3, r3
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	43db      	mvns	r3, r3
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003e82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	43db      	mvns	r3, r3
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003eb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f47f ae63 	bne.w	8003b94 <HAL_GPIO_Init+0x14>
  }
}
 8003ece:	bf00      	nop
 8003ed0:	bf00      	nop
 8003ed2:	3724      	adds	r7, #36	; 0x24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	58000400 	.word	0x58000400

08003ee0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	887b      	ldrh	r3, [r7, #2]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d002      	beq.n	8003efe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	73fb      	strb	r3, [r7, #15]
 8003efc:	e001      	b.n	8003f02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003efe:	2300      	movs	r3, #0
 8003f00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	807b      	strh	r3, [r7, #2]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f20:	787b      	ldrb	r3, [r7, #1]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f26:	887a      	ldrh	r2, [r7, #2]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003f2c:	e003      	b.n	8003f36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003f2e:	887b      	ldrh	r3, [r7, #2]
 8003f30:	041a      	lsls	r2, r3, #16
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	619a      	str	r2, [r3, #24]
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
	...

08003f44 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003f4c:	4a08      	ldr	r2, [pc, #32]	; (8003f70 <HAL_HSEM_FastTake+0x2c>)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3320      	adds	r3, #32
 8003f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f56:	4a07      	ldr	r2, [pc, #28]	; (8003f74 <HAL_HSEM_FastTake+0x30>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d101      	bne.n	8003f60 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	e000      	b.n	8003f62 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	58026400 	.word	0x58026400
 8003f74:	80000300 	.word	0x80000300

08003f78 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003f82:	4906      	ldr	r1, [pc, #24]	; (8003f9c <HAL_HSEM_Release+0x24>)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	58026400 	.word	0x58026400

08003fa0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fa2:	b08f      	sub	sp, #60	; 0x3c
 8003fa4:	af0a      	add	r7, sp, #40	; 0x28
 8003fa6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e116      	b.n	80041e0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d106      	bne.n	8003fd2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7fd fe6b 	bl	8001ca8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2203      	movs	r2, #3
 8003fd6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d102      	bne.n	8003fec <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f005 fb6b 	bl	80096cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	603b      	str	r3, [r7, #0]
 8003ffc:	687e      	ldr	r6, [r7, #4]
 8003ffe:	466d      	mov	r5, sp
 8004000:	f106 0410 	add.w	r4, r6, #16
 8004004:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004006:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800400a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800400c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004010:	e885 0003 	stmia.w	r5, {r0, r1}
 8004014:	1d33      	adds	r3, r6, #4
 8004016:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004018:	6838      	ldr	r0, [r7, #0]
 800401a:	f005 fae9 	bl	80095f0 <USB_CoreInit>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e0d7      	b.n	80041e0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2100      	movs	r1, #0
 8004036:	4618      	mov	r0, r3
 8004038:	f005 fb59 	bl	80096ee <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800403c:	2300      	movs	r3, #0
 800403e:	73fb      	strb	r3, [r7, #15]
 8004040:	e04a      	b.n	80040d8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004042:	7bfa      	ldrb	r2, [r7, #15]
 8004044:	6879      	ldr	r1, [r7, #4]
 8004046:	4613      	mov	r3, r2
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	1a9b      	subs	r3, r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	440b      	add	r3, r1
 8004050:	333d      	adds	r3, #61	; 0x3d
 8004052:	2201      	movs	r2, #1
 8004054:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004056:	7bfa      	ldrb	r2, [r7, #15]
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	4613      	mov	r3, r2
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	1a9b      	subs	r3, r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	440b      	add	r3, r1
 8004064:	333c      	adds	r3, #60	; 0x3c
 8004066:	7bfa      	ldrb	r2, [r7, #15]
 8004068:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800406a:	7bfa      	ldrb	r2, [r7, #15]
 800406c:	7bfb      	ldrb	r3, [r7, #15]
 800406e:	b298      	uxth	r0, r3
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	4613      	mov	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	1a9b      	subs	r3, r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	440b      	add	r3, r1
 800407c:	3342      	adds	r3, #66	; 0x42
 800407e:	4602      	mov	r2, r0
 8004080:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004082:	7bfa      	ldrb	r2, [r7, #15]
 8004084:	6879      	ldr	r1, [r7, #4]
 8004086:	4613      	mov	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	1a9b      	subs	r3, r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	440b      	add	r3, r1
 8004090:	333f      	adds	r3, #63	; 0x3f
 8004092:	2200      	movs	r2, #0
 8004094:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004096:	7bfa      	ldrb	r2, [r7, #15]
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	4613      	mov	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	1a9b      	subs	r3, r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	440b      	add	r3, r1
 80040a4:	3344      	adds	r3, #68	; 0x44
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80040aa:	7bfa      	ldrb	r2, [r7, #15]
 80040ac:	6879      	ldr	r1, [r7, #4]
 80040ae:	4613      	mov	r3, r2
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	1a9b      	subs	r3, r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	440b      	add	r3, r1
 80040b8:	3348      	adds	r3, #72	; 0x48
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80040be:	7bfa      	ldrb	r2, [r7, #15]
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	4613      	mov	r3, r2
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	1a9b      	subs	r3, r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	440b      	add	r3, r1
 80040cc:	3350      	adds	r3, #80	; 0x50
 80040ce:	2200      	movs	r2, #0
 80040d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040d2:	7bfb      	ldrb	r3, [r7, #15]
 80040d4:	3301      	adds	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
 80040d8:	7bfa      	ldrb	r2, [r7, #15]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d3af      	bcc.n	8004042 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040e2:	2300      	movs	r3, #0
 80040e4:	73fb      	strb	r3, [r7, #15]
 80040e6:	e044      	b.n	8004172 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80040e8:	7bfa      	ldrb	r2, [r7, #15]
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	4613      	mov	r3, r2
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	1a9b      	subs	r3, r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80040fa:	2200      	movs	r2, #0
 80040fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80040fe:	7bfa      	ldrb	r2, [r7, #15]
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	4613      	mov	r3, r2
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	1a9b      	subs	r3, r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	440b      	add	r3, r1
 800410c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004110:	7bfa      	ldrb	r2, [r7, #15]
 8004112:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004114:	7bfa      	ldrb	r2, [r7, #15]
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	4613      	mov	r3, r2
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	1a9b      	subs	r3, r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	440b      	add	r3, r1
 8004122:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004126:	2200      	movs	r2, #0
 8004128:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800412a:	7bfa      	ldrb	r2, [r7, #15]
 800412c:	6879      	ldr	r1, [r7, #4]
 800412e:	4613      	mov	r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	1a9b      	subs	r3, r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	440b      	add	r3, r1
 8004138:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004140:	7bfa      	ldrb	r2, [r7, #15]
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	4613      	mov	r3, r2
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	1a9b      	subs	r3, r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004156:	7bfa      	ldrb	r2, [r7, #15]
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	4613      	mov	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	1a9b      	subs	r3, r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	440b      	add	r3, r1
 8004164:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800416c:	7bfb      	ldrb	r3, [r7, #15]
 800416e:	3301      	adds	r3, #1
 8004170:	73fb      	strb	r3, [r7, #15]
 8004172:	7bfa      	ldrb	r2, [r7, #15]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	429a      	cmp	r2, r3
 800417a:	d3b5      	bcc.n	80040e8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	603b      	str	r3, [r7, #0]
 8004182:	687e      	ldr	r6, [r7, #4]
 8004184:	466d      	mov	r5, sp
 8004186:	f106 0410 	add.w	r4, r6, #16
 800418a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800418c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800418e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004190:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004192:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004196:	e885 0003 	stmia.w	r5, {r0, r1}
 800419a:	1d33      	adds	r3, r6, #4
 800419c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800419e:	6838      	ldr	r0, [r7, #0]
 80041a0:	f005 fad0 	bl	8009744 <USB_DevInit>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d005      	beq.n	80041b6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2202      	movs	r2, #2
 80041ae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e014      	b.n	80041e0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d102      	bne.n	80041d4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f80a 	bl	80041e8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4618      	mov	r0, r3
 80041da:	f005 fc72 	bl	8009ac2 <USB_DevDisconnect>

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004216:	4b05      	ldr	r3, [pc, #20]	; (800422c <HAL_PCDEx_ActivateLPM+0x44>)
 8004218:	4313      	orrs	r3, r2
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	10000003 	.word	0x10000003

08004230 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004238:	4b29      	ldr	r3, [pc, #164]	; (80042e0 <HAL_PWREx_ConfigSupply+0xb0>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	2b06      	cmp	r3, #6
 8004242:	d00a      	beq.n	800425a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004244:	4b26      	ldr	r3, [pc, #152]	; (80042e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	429a      	cmp	r2, r3
 8004250:	d001      	beq.n	8004256 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e040      	b.n	80042d8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	e03e      	b.n	80042d8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800425a:	4b21      	ldr	r3, [pc, #132]	; (80042e0 <HAL_PWREx_ConfigSupply+0xb0>)
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004262:	491f      	ldr	r1, [pc, #124]	; (80042e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4313      	orrs	r3, r2
 8004268:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800426a:	f7fd ff5f 	bl	800212c <HAL_GetTick>
 800426e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004270:	e009      	b.n	8004286 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004272:	f7fd ff5b 	bl	800212c <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004280:	d901      	bls.n	8004286 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e028      	b.n	80042d8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004286:	4b16      	ldr	r3, [pc, #88]	; (80042e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800428e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004292:	d1ee      	bne.n	8004272 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b1e      	cmp	r3, #30
 8004298:	d008      	beq.n	80042ac <HAL_PWREx_ConfigSupply+0x7c>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b2e      	cmp	r3, #46	; 0x2e
 800429e:	d005      	beq.n	80042ac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b1d      	cmp	r3, #29
 80042a4:	d002      	beq.n	80042ac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b2d      	cmp	r3, #45	; 0x2d
 80042aa:	d114      	bne.n	80042d6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80042ac:	f7fd ff3e 	bl	800212c <HAL_GetTick>
 80042b0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80042b2:	e009      	b.n	80042c8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80042b4:	f7fd ff3a 	bl	800212c <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042c2:	d901      	bls.n	80042c8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e007      	b.n	80042d8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80042c8:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <HAL_PWREx_ConfigSupply+0xb0>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d4:	d1ee      	bne.n	80042b4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	58024800 	.word	0x58024800

080042e4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80042e8:	4b05      	ldr	r3, [pc, #20]	; (8004300 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	4a04      	ldr	r2, [pc, #16]	; (8004300 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80042ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042f2:	60d3      	str	r3, [r2, #12]
}
 80042f4:	bf00      	nop
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	58024800 	.word	0x58024800

08004304 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b08c      	sub	sp, #48	; 0x30
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e3ff      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 8087 	beq.w	8004432 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004324:	4b99      	ldr	r3, [pc, #612]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800432c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800432e:	4b97      	ldr	r3, [pc, #604]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004332:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004336:	2b10      	cmp	r3, #16
 8004338:	d007      	beq.n	800434a <HAL_RCC_OscConfig+0x46>
 800433a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433c:	2b18      	cmp	r3, #24
 800433e:	d110      	bne.n	8004362 <HAL_RCC_OscConfig+0x5e>
 8004340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d10b      	bne.n	8004362 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800434a:	4b90      	ldr	r3, [pc, #576]	; (800458c <HAL_RCC_OscConfig+0x288>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d06c      	beq.n	8004430 <HAL_RCC_OscConfig+0x12c>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d168      	bne.n	8004430 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e3d9      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800436a:	d106      	bne.n	800437a <HAL_RCC_OscConfig+0x76>
 800436c:	4b87      	ldr	r3, [pc, #540]	; (800458c <HAL_RCC_OscConfig+0x288>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a86      	ldr	r2, [pc, #536]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004376:	6013      	str	r3, [r2, #0]
 8004378:	e02e      	b.n	80043d8 <HAL_RCC_OscConfig+0xd4>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10c      	bne.n	800439c <HAL_RCC_OscConfig+0x98>
 8004382:	4b82      	ldr	r3, [pc, #520]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a81      	ldr	r2, [pc, #516]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800438c:	6013      	str	r3, [r2, #0]
 800438e:	4b7f      	ldr	r3, [pc, #508]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a7e      	ldr	r2, [pc, #504]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004394:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	e01d      	b.n	80043d8 <HAL_RCC_OscConfig+0xd4>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043a4:	d10c      	bne.n	80043c0 <HAL_RCC_OscConfig+0xbc>
 80043a6:	4b79      	ldr	r3, [pc, #484]	; (800458c <HAL_RCC_OscConfig+0x288>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a78      	ldr	r2, [pc, #480]	; (800458c <HAL_RCC_OscConfig+0x288>)
 80043ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043b0:	6013      	str	r3, [r2, #0]
 80043b2:	4b76      	ldr	r3, [pc, #472]	; (800458c <HAL_RCC_OscConfig+0x288>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a75      	ldr	r2, [pc, #468]	; (800458c <HAL_RCC_OscConfig+0x288>)
 80043b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	e00b      	b.n	80043d8 <HAL_RCC_OscConfig+0xd4>
 80043c0:	4b72      	ldr	r3, [pc, #456]	; (800458c <HAL_RCC_OscConfig+0x288>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a71      	ldr	r2, [pc, #452]	; (800458c <HAL_RCC_OscConfig+0x288>)
 80043c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ca:	6013      	str	r3, [r2, #0]
 80043cc:	4b6f      	ldr	r3, [pc, #444]	; (800458c <HAL_RCC_OscConfig+0x288>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a6e      	ldr	r2, [pc, #440]	; (800458c <HAL_RCC_OscConfig+0x288>)
 80043d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d013      	beq.n	8004408 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e0:	f7fd fea4 	bl	800212c <HAL_GetTick>
 80043e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043e8:	f7fd fea0 	bl	800212c <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b64      	cmp	r3, #100	; 0x64
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e38d      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043fa:	4b64      	ldr	r3, [pc, #400]	; (800458c <HAL_RCC_OscConfig+0x288>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0f0      	beq.n	80043e8 <HAL_RCC_OscConfig+0xe4>
 8004406:	e014      	b.n	8004432 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004408:	f7fd fe90 	bl	800212c <HAL_GetTick>
 800440c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004410:	f7fd fe8c 	bl	800212c <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b64      	cmp	r3, #100	; 0x64
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e379      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004422:	4b5a      	ldr	r3, [pc, #360]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0x10c>
 800442e:	e000      	b.n	8004432 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 80ae 	beq.w	800459c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004440:	4b52      	ldr	r3, [pc, #328]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004448:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800444a:	4b50      	ldr	r3, [pc, #320]	; (800458c <HAL_RCC_OscConfig+0x288>)
 800444c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d007      	beq.n	8004466 <HAL_RCC_OscConfig+0x162>
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	2b18      	cmp	r3, #24
 800445a:	d13a      	bne.n	80044d2 <HAL_RCC_OscConfig+0x1ce>
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d135      	bne.n	80044d2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004466:	4b49      	ldr	r3, [pc, #292]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	2b00      	cmp	r3, #0
 8004470:	d005      	beq.n	800447e <HAL_RCC_OscConfig+0x17a>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e34b      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800447e:	f7fd fe85 	bl	800218c <HAL_GetREVID>
 8004482:	4603      	mov	r3, r0
 8004484:	f241 0203 	movw	r2, #4099	; 0x1003
 8004488:	4293      	cmp	r3, r2
 800448a:	d817      	bhi.n	80044bc <HAL_RCC_OscConfig+0x1b8>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	2b40      	cmp	r3, #64	; 0x40
 8004492:	d108      	bne.n	80044a6 <HAL_RCC_OscConfig+0x1a2>
 8004494:	4b3d      	ldr	r3, [pc, #244]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800449c:	4a3b      	ldr	r2, [pc, #236]	; (800458c <HAL_RCC_OscConfig+0x288>)
 800449e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044a2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044a4:	e07a      	b.n	800459c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a6:	4b39      	ldr	r3, [pc, #228]	; (800458c <HAL_RCC_OscConfig+0x288>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	031b      	lsls	r3, r3, #12
 80044b4:	4935      	ldr	r1, [pc, #212]	; (800458c <HAL_RCC_OscConfig+0x288>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044ba:	e06f      	b.n	800459c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044bc:	4b33      	ldr	r3, [pc, #204]	; (800458c <HAL_RCC_OscConfig+0x288>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	061b      	lsls	r3, r3, #24
 80044ca:	4930      	ldr	r1, [pc, #192]	; (800458c <HAL_RCC_OscConfig+0x288>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044d0:	e064      	b.n	800459c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d045      	beq.n	8004566 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044da:	4b2c      	ldr	r3, [pc, #176]	; (800458c <HAL_RCC_OscConfig+0x288>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f023 0219 	bic.w	r2, r3, #25
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	4929      	ldr	r1, [pc, #164]	; (800458c <HAL_RCC_OscConfig+0x288>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ec:	f7fd fe1e 	bl	800212c <HAL_GetTick>
 80044f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044f4:	f7fd fe1a 	bl	800212c <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e307      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004506:	4b21      	ldr	r3, [pc, #132]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0304 	and.w	r3, r3, #4
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004512:	f7fd fe3b 	bl	800218c <HAL_GetREVID>
 8004516:	4603      	mov	r3, r0
 8004518:	f241 0203 	movw	r2, #4099	; 0x1003
 800451c:	4293      	cmp	r3, r2
 800451e:	d817      	bhi.n	8004550 <HAL_RCC_OscConfig+0x24c>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	2b40      	cmp	r3, #64	; 0x40
 8004526:	d108      	bne.n	800453a <HAL_RCC_OscConfig+0x236>
 8004528:	4b18      	ldr	r3, [pc, #96]	; (800458c <HAL_RCC_OscConfig+0x288>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004530:	4a16      	ldr	r2, [pc, #88]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004536:	6053      	str	r3, [r2, #4]
 8004538:	e030      	b.n	800459c <HAL_RCC_OscConfig+0x298>
 800453a:	4b14      	ldr	r3, [pc, #80]	; (800458c <HAL_RCC_OscConfig+0x288>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	031b      	lsls	r3, r3, #12
 8004548:	4910      	ldr	r1, [pc, #64]	; (800458c <HAL_RCC_OscConfig+0x288>)
 800454a:	4313      	orrs	r3, r2
 800454c:	604b      	str	r3, [r1, #4]
 800454e:	e025      	b.n	800459c <HAL_RCC_OscConfig+0x298>
 8004550:	4b0e      	ldr	r3, [pc, #56]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	061b      	lsls	r3, r3, #24
 800455e:	490b      	ldr	r1, [pc, #44]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004560:	4313      	orrs	r3, r2
 8004562:	604b      	str	r3, [r1, #4]
 8004564:	e01a      	b.n	800459c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004566:	4b09      	ldr	r3, [pc, #36]	; (800458c <HAL_RCC_OscConfig+0x288>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a08      	ldr	r2, [pc, #32]	; (800458c <HAL_RCC_OscConfig+0x288>)
 800456c:	f023 0301 	bic.w	r3, r3, #1
 8004570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004572:	f7fd fddb 	bl	800212c <HAL_GetTick>
 8004576:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004578:	e00a      	b.n	8004590 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800457a:	f7fd fdd7 	bl	800212c <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d903      	bls.n	8004590 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e2c4      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
 800458c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004590:	4ba4      	ldr	r3, [pc, #656]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1ee      	bne.n	800457a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0310 	and.w	r3, r3, #16
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 80a9 	beq.w	80046fc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045aa:	4b9e      	ldr	r3, [pc, #632]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045b4:	4b9b      	ldr	r3, [pc, #620]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d007      	beq.n	80045d0 <HAL_RCC_OscConfig+0x2cc>
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	2b18      	cmp	r3, #24
 80045c4:	d13a      	bne.n	800463c <HAL_RCC_OscConfig+0x338>
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f003 0303 	and.w	r3, r3, #3
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d135      	bne.n	800463c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045d0:	4b94      	ldr	r3, [pc, #592]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d005      	beq.n	80045e8 <HAL_RCC_OscConfig+0x2e4>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	2b80      	cmp	r3, #128	; 0x80
 80045e2:	d001      	beq.n	80045e8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e296      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045e8:	f7fd fdd0 	bl	800218c <HAL_GetREVID>
 80045ec:	4603      	mov	r3, r0
 80045ee:	f241 0203 	movw	r2, #4099	; 0x1003
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d817      	bhi.n	8004626 <HAL_RCC_OscConfig+0x322>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	2b20      	cmp	r3, #32
 80045fc:	d108      	bne.n	8004610 <HAL_RCC_OscConfig+0x30c>
 80045fe:	4b89      	ldr	r3, [pc, #548]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004606:	4a87      	ldr	r2, [pc, #540]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 8004608:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800460c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800460e:	e075      	b.n	80046fc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004610:	4b84      	ldr	r3, [pc, #528]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	069b      	lsls	r3, r3, #26
 800461e:	4981      	ldr	r1, [pc, #516]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 8004620:	4313      	orrs	r3, r2
 8004622:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004624:	e06a      	b.n	80046fc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004626:	4b7f      	ldr	r3, [pc, #508]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	061b      	lsls	r3, r3, #24
 8004634:	497b      	ldr	r1, [pc, #492]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 8004636:	4313      	orrs	r3, r2
 8004638:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800463a:	e05f      	b.n	80046fc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d042      	beq.n	80046ca <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004644:	4b77      	ldr	r3, [pc, #476]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a76      	ldr	r2, [pc, #472]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 800464a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800464e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004650:	f7fd fd6c 	bl	800212c <HAL_GetTick>
 8004654:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004658:	f7fd fd68 	bl	800212c <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e255      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800466a:	4b6e      	ldr	r3, [pc, #440]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0f0      	beq.n	8004658 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004676:	f7fd fd89 	bl	800218c <HAL_GetREVID>
 800467a:	4603      	mov	r3, r0
 800467c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004680:	4293      	cmp	r3, r2
 8004682:	d817      	bhi.n	80046b4 <HAL_RCC_OscConfig+0x3b0>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	2b20      	cmp	r3, #32
 800468a:	d108      	bne.n	800469e <HAL_RCC_OscConfig+0x39a>
 800468c:	4b65      	ldr	r3, [pc, #404]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004694:	4a63      	ldr	r2, [pc, #396]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 8004696:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800469a:	6053      	str	r3, [r2, #4]
 800469c:	e02e      	b.n	80046fc <HAL_RCC_OscConfig+0x3f8>
 800469e:	4b61      	ldr	r3, [pc, #388]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	069b      	lsls	r3, r3, #26
 80046ac:	495d      	ldr	r1, [pc, #372]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	604b      	str	r3, [r1, #4]
 80046b2:	e023      	b.n	80046fc <HAL_RCC_OscConfig+0x3f8>
 80046b4:	4b5b      	ldr	r3, [pc, #364]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	061b      	lsls	r3, r3, #24
 80046c2:	4958      	ldr	r1, [pc, #352]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60cb      	str	r3, [r1, #12]
 80046c8:	e018      	b.n	80046fc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80046ca:	4b56      	ldr	r3, [pc, #344]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a55      	ldr	r2, [pc, #340]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 80046d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d6:	f7fd fd29 	bl	800212c <HAL_GetTick>
 80046da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80046de:	f7fd fd25 	bl	800212c <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e212      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80046f0:	4b4c      	ldr	r3, [pc, #304]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1f0      	bne.n	80046de <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0308 	and.w	r3, r3, #8
 8004704:	2b00      	cmp	r3, #0
 8004706:	d036      	beq.n	8004776 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d019      	beq.n	8004744 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004710:	4b44      	ldr	r3, [pc, #272]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 8004712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004714:	4a43      	ldr	r2, [pc, #268]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 8004716:	f043 0301 	orr.w	r3, r3, #1
 800471a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471c:	f7fd fd06 	bl	800212c <HAL_GetTick>
 8004720:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004724:	f7fd fd02 	bl	800212c <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e1ef      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004736:	4b3b      	ldr	r3, [pc, #236]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 8004738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0f0      	beq.n	8004724 <HAL_RCC_OscConfig+0x420>
 8004742:	e018      	b.n	8004776 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004744:	4b37      	ldr	r3, [pc, #220]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 8004746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004748:	4a36      	ldr	r2, [pc, #216]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 800474a:	f023 0301 	bic.w	r3, r3, #1
 800474e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004750:	f7fd fcec 	bl	800212c <HAL_GetTick>
 8004754:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004758:	f7fd fce8 	bl	800212c <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e1d5      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800476a:	4b2e      	ldr	r3, [pc, #184]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 800476c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f0      	bne.n	8004758 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0320 	and.w	r3, r3, #32
 800477e:	2b00      	cmp	r3, #0
 8004780:	d036      	beq.n	80047f0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d019      	beq.n	80047be <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800478a:	4b26      	ldr	r3, [pc, #152]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a25      	ldr	r2, [pc, #148]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 8004790:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004794:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004796:	f7fd fcc9 	bl	800212c <HAL_GetTick>
 800479a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800479c:	e008      	b.n	80047b0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800479e:	f7fd fcc5 	bl	800212c <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d901      	bls.n	80047b0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e1b2      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80047b0:	4b1c      	ldr	r3, [pc, #112]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0f0      	beq.n	800479e <HAL_RCC_OscConfig+0x49a>
 80047bc:	e018      	b.n	80047f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80047be:	4b19      	ldr	r3, [pc, #100]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a18      	ldr	r2, [pc, #96]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 80047c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80047ca:	f7fd fcaf 	bl	800212c <HAL_GetTick>
 80047ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80047d0:	e008      	b.n	80047e4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80047d2:	f7fd fcab 	bl	800212c <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d901      	bls.n	80047e4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e198      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80047e4:	4b0f      	ldr	r3, [pc, #60]	; (8004824 <HAL_RCC_OscConfig+0x520>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1f0      	bne.n	80047d2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 8085 	beq.w	8004908 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047fe:	4b0a      	ldr	r3, [pc, #40]	; (8004828 <HAL_RCC_OscConfig+0x524>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a09      	ldr	r2, [pc, #36]	; (8004828 <HAL_RCC_OscConfig+0x524>)
 8004804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004808:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800480a:	f7fd fc8f 	bl	800212c <HAL_GetTick>
 800480e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004810:	e00c      	b.n	800482c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004812:	f7fd fc8b 	bl	800212c <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b64      	cmp	r3, #100	; 0x64
 800481e:	d905      	bls.n	800482c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e178      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
 8004824:	58024400 	.word	0x58024400
 8004828:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800482c:	4b96      	ldr	r3, [pc, #600]	; (8004a88 <HAL_RCC_OscConfig+0x784>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0ec      	beq.n	8004812 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d106      	bne.n	800484e <HAL_RCC_OscConfig+0x54a>
 8004840:	4b92      	ldr	r3, [pc, #584]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004844:	4a91      	ldr	r2, [pc, #580]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004846:	f043 0301 	orr.w	r3, r3, #1
 800484a:	6713      	str	r3, [r2, #112]	; 0x70
 800484c:	e02d      	b.n	80048aa <HAL_RCC_OscConfig+0x5a6>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10c      	bne.n	8004870 <HAL_RCC_OscConfig+0x56c>
 8004856:	4b8d      	ldr	r3, [pc, #564]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485a:	4a8c      	ldr	r2, [pc, #560]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 800485c:	f023 0301 	bic.w	r3, r3, #1
 8004860:	6713      	str	r3, [r2, #112]	; 0x70
 8004862:	4b8a      	ldr	r3, [pc, #552]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004866:	4a89      	ldr	r2, [pc, #548]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004868:	f023 0304 	bic.w	r3, r3, #4
 800486c:	6713      	str	r3, [r2, #112]	; 0x70
 800486e:	e01c      	b.n	80048aa <HAL_RCC_OscConfig+0x5a6>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	2b05      	cmp	r3, #5
 8004876:	d10c      	bne.n	8004892 <HAL_RCC_OscConfig+0x58e>
 8004878:	4b84      	ldr	r3, [pc, #528]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 800487a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487c:	4a83      	ldr	r2, [pc, #524]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 800487e:	f043 0304 	orr.w	r3, r3, #4
 8004882:	6713      	str	r3, [r2, #112]	; 0x70
 8004884:	4b81      	ldr	r3, [pc, #516]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004888:	4a80      	ldr	r2, [pc, #512]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 800488a:	f043 0301 	orr.w	r3, r3, #1
 800488e:	6713      	str	r3, [r2, #112]	; 0x70
 8004890:	e00b      	b.n	80048aa <HAL_RCC_OscConfig+0x5a6>
 8004892:	4b7e      	ldr	r3, [pc, #504]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004896:	4a7d      	ldr	r2, [pc, #500]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004898:	f023 0301 	bic.w	r3, r3, #1
 800489c:	6713      	str	r3, [r2, #112]	; 0x70
 800489e:	4b7b      	ldr	r3, [pc, #492]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80048a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a2:	4a7a      	ldr	r2, [pc, #488]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80048a4:	f023 0304 	bic.w	r3, r3, #4
 80048a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d015      	beq.n	80048de <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b2:	f7fd fc3b 	bl	800212c <HAL_GetTick>
 80048b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048b8:	e00a      	b.n	80048d0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048ba:	f7fd fc37 	bl	800212c <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e122      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048d0:	4b6e      	ldr	r3, [pc, #440]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80048d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0ee      	beq.n	80048ba <HAL_RCC_OscConfig+0x5b6>
 80048dc:	e014      	b.n	8004908 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048de:	f7fd fc25 	bl	800212c <HAL_GetTick>
 80048e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048e4:	e00a      	b.n	80048fc <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048e6:	f7fd fc21 	bl	800212c <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e10c      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048fc:	4b63      	ldr	r3, [pc, #396]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80048fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1ee      	bne.n	80048e6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 8101 	beq.w	8004b14 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004912:	4b5e      	ldr	r3, [pc, #376]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800491a:	2b18      	cmp	r3, #24
 800491c:	f000 80bc 	beq.w	8004a98 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	2b02      	cmp	r3, #2
 8004926:	f040 8095 	bne.w	8004a54 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800492a:	4b58      	ldr	r3, [pc, #352]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a57      	ldr	r2, [pc, #348]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004930:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004936:	f7fd fbf9 	bl	800212c <HAL_GetTick>
 800493a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800493c:	e008      	b.n	8004950 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800493e:	f7fd fbf5 	bl	800212c <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d901      	bls.n	8004950 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e0e2      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004950:	4b4e      	ldr	r3, [pc, #312]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1f0      	bne.n	800493e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800495c:	4b4b      	ldr	r3, [pc, #300]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 800495e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004960:	4b4b      	ldr	r3, [pc, #300]	; (8004a90 <HAL_RCC_OscConfig+0x78c>)
 8004962:	4013      	ands	r3, r2
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800496c:	0112      	lsls	r2, r2, #4
 800496e:	430a      	orrs	r2, r1
 8004970:	4946      	ldr	r1, [pc, #280]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004972:	4313      	orrs	r3, r2
 8004974:	628b      	str	r3, [r1, #40]	; 0x28
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	3b01      	subs	r3, #1
 800497c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004984:	3b01      	subs	r3, #1
 8004986:	025b      	lsls	r3, r3, #9
 8004988:	b29b      	uxth	r3, r3
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004990:	3b01      	subs	r3, #1
 8004992:	041b      	lsls	r3, r3, #16
 8004994:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004998:	431a      	orrs	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499e:	3b01      	subs	r3, #1
 80049a0:	061b      	lsls	r3, r3, #24
 80049a2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80049a6:	4939      	ldr	r1, [pc, #228]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80049ac:	4b37      	ldr	r3, [pc, #220]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80049ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b0:	4a36      	ldr	r2, [pc, #216]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80049b2:	f023 0301 	bic.w	r3, r3, #1
 80049b6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80049b8:	4b34      	ldr	r3, [pc, #208]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80049ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049bc:	4b35      	ldr	r3, [pc, #212]	; (8004a94 <HAL_RCC_OscConfig+0x790>)
 80049be:	4013      	ands	r3, r2
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80049c4:	00d2      	lsls	r2, r2, #3
 80049c6:	4931      	ldr	r1, [pc, #196]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80049cc:	4b2f      	ldr	r3, [pc, #188]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d0:	f023 020c 	bic.w	r2, r3, #12
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d8:	492c      	ldr	r1, [pc, #176]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80049de:	4b2b      	ldr	r3, [pc, #172]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80049e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e2:	f023 0202 	bic.w	r2, r3, #2
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ea:	4928      	ldr	r1, [pc, #160]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80049f0:	4b26      	ldr	r3, [pc, #152]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80049f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f4:	4a25      	ldr	r2, [pc, #148]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80049f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049fc:	4b23      	ldr	r3, [pc, #140]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	4a22      	ldr	r2, [pc, #136]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004a08:	4b20      	ldr	r3, [pc, #128]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0c:	4a1f      	ldr	r2, [pc, #124]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004a0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004a14:	4b1d      	ldr	r3, [pc, #116]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	4a1c      	ldr	r2, [pc, #112]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004a1a:	f043 0301 	orr.w	r3, r3, #1
 8004a1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a20:	4b1a      	ldr	r3, [pc, #104]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a19      	ldr	r2, [pc, #100]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2c:	f7fd fb7e 	bl	800212c <HAL_GetTick>
 8004a30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a34:	f7fd fb7a 	bl	800212c <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e067      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a46:	4b11      	ldr	r3, [pc, #68]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0f0      	beq.n	8004a34 <HAL_RCC_OscConfig+0x730>
 8004a52:	e05f      	b.n	8004b14 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a54:	4b0d      	ldr	r3, [pc, #52]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a0c      	ldr	r2, [pc, #48]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004a5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a60:	f7fd fb64 	bl	800212c <HAL_GetTick>
 8004a64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a68:	f7fd fb60 	bl	800212c <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e04d      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a7a:	4b04      	ldr	r3, [pc, #16]	; (8004a8c <HAL_RCC_OscConfig+0x788>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1f0      	bne.n	8004a68 <HAL_RCC_OscConfig+0x764>
 8004a86:	e045      	b.n	8004b14 <HAL_RCC_OscConfig+0x810>
 8004a88:	58024800 	.word	0x58024800
 8004a8c:	58024400 	.word	0x58024400
 8004a90:	fffffc0c 	.word	0xfffffc0c
 8004a94:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004a98:	4b21      	ldr	r3, [pc, #132]	; (8004b20 <HAL_RCC_OscConfig+0x81c>)
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004a9e:	4b20      	ldr	r3, [pc, #128]	; (8004b20 <HAL_RCC_OscConfig+0x81c>)
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d031      	beq.n	8004b10 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	f003 0203 	and.w	r2, r3, #3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d12a      	bne.n	8004b10 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	091b      	lsrs	r3, r3, #4
 8004abe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d122      	bne.n	8004b10 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d11a      	bne.n	8004b10 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	0a5b      	lsrs	r3, r3, #9
 8004ade:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d111      	bne.n	8004b10 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	0c1b      	lsrs	r3, r3, #16
 8004af0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d108      	bne.n	8004b10 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	0e1b      	lsrs	r3, r3, #24
 8004b02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d001      	beq.n	8004b14 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e000      	b.n	8004b16 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3730      	adds	r7, #48	; 0x30
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	58024400 	.word	0x58024400

08004b24 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e19c      	b.n	8004e72 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b38:	4b8a      	ldr	r3, [pc, #552]	; (8004d64 <HAL_RCC_ClockConfig+0x240>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 030f 	and.w	r3, r3, #15
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d910      	bls.n	8004b68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b46:	4b87      	ldr	r3, [pc, #540]	; (8004d64 <HAL_RCC_ClockConfig+0x240>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f023 020f 	bic.w	r2, r3, #15
 8004b4e:	4985      	ldr	r1, [pc, #532]	; (8004d64 <HAL_RCC_ClockConfig+0x240>)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b56:	4b83      	ldr	r3, [pc, #524]	; (8004d64 <HAL_RCC_ClockConfig+0x240>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d001      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e184      	b.n	8004e72 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d010      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691a      	ldr	r2, [r3, #16]
 8004b78:	4b7b      	ldr	r3, [pc, #492]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d908      	bls.n	8004b96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b84:	4b78      	ldr	r3, [pc, #480]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	4975      	ldr	r1, [pc, #468]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0308 	and.w	r3, r3, #8
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d010      	beq.n	8004bc4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	695a      	ldr	r2, [r3, #20]
 8004ba6:	4b70      	ldr	r3, [pc, #448]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d908      	bls.n	8004bc4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004bb2:	4b6d      	ldr	r3, [pc, #436]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	496a      	ldr	r1, [pc, #424]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0310 	and.w	r3, r3, #16
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d010      	beq.n	8004bf2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	699a      	ldr	r2, [r3, #24]
 8004bd4:	4b64      	ldr	r3, [pc, #400]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d908      	bls.n	8004bf2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004be0:	4b61      	ldr	r3, [pc, #388]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	495e      	ldr	r1, [pc, #376]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d010      	beq.n	8004c20 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	69da      	ldr	r2, [r3, #28]
 8004c02:	4b59      	ldr	r3, [pc, #356]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d908      	bls.n	8004c20 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004c0e:	4b56      	ldr	r3, [pc, #344]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	4953      	ldr	r1, [pc, #332]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d010      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68da      	ldr	r2, [r3, #12]
 8004c30:	4b4d      	ldr	r3, [pc, #308]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	f003 030f 	and.w	r3, r3, #15
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d908      	bls.n	8004c4e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c3c:	4b4a      	ldr	r3, [pc, #296]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	f023 020f 	bic.w	r2, r3, #15
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	4947      	ldr	r1, [pc, #284]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d055      	beq.n	8004d06 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004c5a:	4b43      	ldr	r3, [pc, #268]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	4940      	ldr	r1, [pc, #256]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d107      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c74:	4b3c      	ldr	r3, [pc, #240]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d121      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e0f6      	b.n	8004e72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2b03      	cmp	r3, #3
 8004c8a:	d107      	bne.n	8004c9c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c8c:	4b36      	ldr	r3, [pc, #216]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d115      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e0ea      	b.n	8004e72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d107      	bne.n	8004cb4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ca4:	4b30      	ldr	r3, [pc, #192]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d109      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e0de      	b.n	8004e72 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cb4:	4b2c      	ldr	r3, [pc, #176]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e0d6      	b.n	8004e72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004cc4:	4b28      	ldr	r3, [pc, #160]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	f023 0207 	bic.w	r2, r3, #7
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	4925      	ldr	r1, [pc, #148]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd6:	f7fd fa29 	bl	800212c <HAL_GetTick>
 8004cda:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cdc:	e00a      	b.n	8004cf4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cde:	f7fd fa25 	bl	800212c <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e0be      	b.n	8004e72 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cf4:	4b1c      	ldr	r3, [pc, #112]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d1eb      	bne.n	8004cde <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d010      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	4b14      	ldr	r3, [pc, #80]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	f003 030f 	and.w	r3, r3, #15
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d208      	bcs.n	8004d34 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d22:	4b11      	ldr	r3, [pc, #68]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	f023 020f 	bic.w	r2, r3, #15
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	490e      	ldr	r1, [pc, #56]	; (8004d68 <HAL_RCC_ClockConfig+0x244>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d34:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <HAL_RCC_ClockConfig+0x240>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 030f 	and.w	r3, r3, #15
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d214      	bcs.n	8004d6c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d42:	4b08      	ldr	r3, [pc, #32]	; (8004d64 <HAL_RCC_ClockConfig+0x240>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f023 020f 	bic.w	r2, r3, #15
 8004d4a:	4906      	ldr	r1, [pc, #24]	; (8004d64 <HAL_RCC_ClockConfig+0x240>)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d52:	4b04      	ldr	r3, [pc, #16]	; (8004d64 <HAL_RCC_ClockConfig+0x240>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d005      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e086      	b.n	8004e72 <HAL_RCC_ClockConfig+0x34e>
 8004d64:	52002000 	.word	0x52002000
 8004d68:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0304 	and.w	r3, r3, #4
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d010      	beq.n	8004d9a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691a      	ldr	r2, [r3, #16]
 8004d7c:	4b3f      	ldr	r3, [pc, #252]	; (8004e7c <HAL_RCC_ClockConfig+0x358>)
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d208      	bcs.n	8004d9a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d88:	4b3c      	ldr	r3, [pc, #240]	; (8004e7c <HAL_RCC_ClockConfig+0x358>)
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	4939      	ldr	r1, [pc, #228]	; (8004e7c <HAL_RCC_ClockConfig+0x358>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d010      	beq.n	8004dc8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695a      	ldr	r2, [r3, #20]
 8004daa:	4b34      	ldr	r3, [pc, #208]	; (8004e7c <HAL_RCC_ClockConfig+0x358>)
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d208      	bcs.n	8004dc8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004db6:	4b31      	ldr	r3, [pc, #196]	; (8004e7c <HAL_RCC_ClockConfig+0x358>)
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	492e      	ldr	r1, [pc, #184]	; (8004e7c <HAL_RCC_ClockConfig+0x358>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0310 	and.w	r3, r3, #16
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d010      	beq.n	8004df6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699a      	ldr	r2, [r3, #24]
 8004dd8:	4b28      	ldr	r3, [pc, #160]	; (8004e7c <HAL_RCC_ClockConfig+0x358>)
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d208      	bcs.n	8004df6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004de4:	4b25      	ldr	r3, [pc, #148]	; (8004e7c <HAL_RCC_ClockConfig+0x358>)
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	4922      	ldr	r1, [pc, #136]	; (8004e7c <HAL_RCC_ClockConfig+0x358>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0320 	and.w	r3, r3, #32
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d010      	beq.n	8004e24 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	69da      	ldr	r2, [r3, #28]
 8004e06:	4b1d      	ldr	r3, [pc, #116]	; (8004e7c <HAL_RCC_ClockConfig+0x358>)
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d208      	bcs.n	8004e24 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004e12:	4b1a      	ldr	r3, [pc, #104]	; (8004e7c <HAL_RCC_ClockConfig+0x358>)
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	4917      	ldr	r1, [pc, #92]	; (8004e7c <HAL_RCC_ClockConfig+0x358>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e24:	f000 f834 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	4b14      	ldr	r3, [pc, #80]	; (8004e7c <HAL_RCC_ClockConfig+0x358>)
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	0a1b      	lsrs	r3, r3, #8
 8004e30:	f003 030f 	and.w	r3, r3, #15
 8004e34:	4912      	ldr	r1, [pc, #72]	; (8004e80 <HAL_RCC_ClockConfig+0x35c>)
 8004e36:	5ccb      	ldrb	r3, [r1, r3]
 8004e38:	f003 031f 	and.w	r3, r3, #31
 8004e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e40:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e42:	4b0e      	ldr	r3, [pc, #56]	; (8004e7c <HAL_RCC_ClockConfig+0x358>)
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	f003 030f 	and.w	r3, r3, #15
 8004e4a:	4a0d      	ldr	r2, [pc, #52]	; (8004e80 <HAL_RCC_ClockConfig+0x35c>)
 8004e4c:	5cd3      	ldrb	r3, [r2, r3]
 8004e4e:	f003 031f 	and.w	r3, r3, #31
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	fa22 f303 	lsr.w	r3, r2, r3
 8004e58:	4a0a      	ldr	r2, [pc, #40]	; (8004e84 <HAL_RCC_ClockConfig+0x360>)
 8004e5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e5c:	4a0a      	ldr	r2, [pc, #40]	; (8004e88 <HAL_RCC_ClockConfig+0x364>)
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004e62:	4b0a      	ldr	r3, [pc, #40]	; (8004e8c <HAL_RCC_ClockConfig+0x368>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7fd f916 	bl	8002098 <HAL_InitTick>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3718      	adds	r7, #24
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	58024400 	.word	0x58024400
 8004e80:	080113ac 	.word	0x080113ac
 8004e84:	24000004 	.word	0x24000004
 8004e88:	24000000 	.word	0x24000000
 8004e8c:	24000008 	.word	0x24000008

08004e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b089      	sub	sp, #36	; 0x24
 8004e94:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e96:	4bb3      	ldr	r3, [pc, #716]	; (8005164 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e9e:	2b18      	cmp	r3, #24
 8004ea0:	f200 8155 	bhi.w	800514e <HAL_RCC_GetSysClockFreq+0x2be>
 8004ea4:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <HAL_RCC_GetSysClockFreq+0x1c>)
 8004ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eaa:	bf00      	nop
 8004eac:	08004f11 	.word	0x08004f11
 8004eb0:	0800514f 	.word	0x0800514f
 8004eb4:	0800514f 	.word	0x0800514f
 8004eb8:	0800514f 	.word	0x0800514f
 8004ebc:	0800514f 	.word	0x0800514f
 8004ec0:	0800514f 	.word	0x0800514f
 8004ec4:	0800514f 	.word	0x0800514f
 8004ec8:	0800514f 	.word	0x0800514f
 8004ecc:	08004f37 	.word	0x08004f37
 8004ed0:	0800514f 	.word	0x0800514f
 8004ed4:	0800514f 	.word	0x0800514f
 8004ed8:	0800514f 	.word	0x0800514f
 8004edc:	0800514f 	.word	0x0800514f
 8004ee0:	0800514f 	.word	0x0800514f
 8004ee4:	0800514f 	.word	0x0800514f
 8004ee8:	0800514f 	.word	0x0800514f
 8004eec:	08004f3d 	.word	0x08004f3d
 8004ef0:	0800514f 	.word	0x0800514f
 8004ef4:	0800514f 	.word	0x0800514f
 8004ef8:	0800514f 	.word	0x0800514f
 8004efc:	0800514f 	.word	0x0800514f
 8004f00:	0800514f 	.word	0x0800514f
 8004f04:	0800514f 	.word	0x0800514f
 8004f08:	0800514f 	.word	0x0800514f
 8004f0c:	08004f43 	.word	0x08004f43
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f10:	4b94      	ldr	r3, [pc, #592]	; (8005164 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0320 	and.w	r3, r3, #32
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d009      	beq.n	8004f30 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f1c:	4b91      	ldr	r3, [pc, #580]	; (8005164 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	08db      	lsrs	r3, r3, #3
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	4a90      	ldr	r2, [pc, #576]	; (8005168 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f28:	fa22 f303 	lsr.w	r3, r2, r3
 8004f2c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004f2e:	e111      	b.n	8005154 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004f30:	4b8d      	ldr	r3, [pc, #564]	; (8005168 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f32:	61bb      	str	r3, [r7, #24]
    break;
 8004f34:	e10e      	b.n	8005154 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004f36:	4b8d      	ldr	r3, [pc, #564]	; (800516c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f38:	61bb      	str	r3, [r7, #24]
    break;
 8004f3a:	e10b      	b.n	8005154 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004f3c:	4b8c      	ldr	r3, [pc, #560]	; (8005170 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004f3e:	61bb      	str	r3, [r7, #24]
    break;
 8004f40:	e108      	b.n	8005154 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f42:	4b88      	ldr	r3, [pc, #544]	; (8005164 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f46:	f003 0303 	and.w	r3, r3, #3
 8004f4a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004f4c:	4b85      	ldr	r3, [pc, #532]	; (8005164 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f50:	091b      	lsrs	r3, r3, #4
 8004f52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f56:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004f58:	4b82      	ldr	r3, [pc, #520]	; (8005164 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004f62:	4b80      	ldr	r3, [pc, #512]	; (8005164 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f66:	08db      	lsrs	r3, r3, #3
 8004f68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	fb02 f303 	mul.w	r3, r2, r3
 8004f72:	ee07 3a90 	vmov	s15, r3
 8004f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f7a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 80e1 	beq.w	8005148 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	f000 8083 	beq.w	8005094 <HAL_RCC_GetSysClockFreq+0x204>
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	f200 80a1 	bhi.w	80050d8 <HAL_RCC_GetSysClockFreq+0x248>
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d003      	beq.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x114>
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d056      	beq.n	8005050 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004fa2:	e099      	b.n	80050d8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fa4:	4b6f      	ldr	r3, [pc, #444]	; (8005164 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d02d      	beq.n	800500c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004fb0:	4b6c      	ldr	r3, [pc, #432]	; (8005164 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	08db      	lsrs	r3, r3, #3
 8004fb6:	f003 0303 	and.w	r3, r3, #3
 8004fba:	4a6b      	ldr	r2, [pc, #428]	; (8005168 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	ee07 3a90 	vmov	s15, r3
 8004fc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	ee07 3a90 	vmov	s15, r3
 8004fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fda:	4b62      	ldr	r3, [pc, #392]	; (8005164 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fe2:	ee07 3a90 	vmov	s15, r3
 8004fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fea:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fee:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005174 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ffa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005006:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800500a:	e087      	b.n	800511c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	ee07 3a90 	vmov	s15, r3
 8005012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005016:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005178 <HAL_RCC_GetSysClockFreq+0x2e8>
 800501a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800501e:	4b51      	ldr	r3, [pc, #324]	; (8005164 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005026:	ee07 3a90 	vmov	s15, r3
 800502a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800502e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005032:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005174 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800503a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800503e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800504a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800504e:	e065      	b.n	800511c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	ee07 3a90 	vmov	s15, r3
 8005056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800505a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800517c <HAL_RCC_GetSysClockFreq+0x2ec>
 800505e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005062:	4b40      	ldr	r3, [pc, #256]	; (8005164 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800506a:	ee07 3a90 	vmov	s15, r3
 800506e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005072:	ed97 6a02 	vldr	s12, [r7, #8]
 8005076:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005174 <HAL_RCC_GetSysClockFreq+0x2e4>
 800507a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800507e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800508a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800508e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005092:	e043      	b.n	800511c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	ee07 3a90 	vmov	s15, r3
 800509a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800509e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005180 <HAL_RCC_GetSysClockFreq+0x2f0>
 80050a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050a6:	4b2f      	ldr	r3, [pc, #188]	; (8005164 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ae:	ee07 3a90 	vmov	s15, r3
 80050b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80050ba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005174 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050d6:	e021      	b.n	800511c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	ee07 3a90 	vmov	s15, r3
 80050de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800517c <HAL_RCC_GetSysClockFreq+0x2ec>
 80050e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ea:	4b1e      	ldr	r3, [pc, #120]	; (8005164 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f2:	ee07 3a90 	vmov	s15, r3
 80050f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80050fe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005174 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800510a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800510e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005116:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800511a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800511c:	4b11      	ldr	r3, [pc, #68]	; (8005164 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800511e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005120:	0a5b      	lsrs	r3, r3, #9
 8005122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005126:	3301      	adds	r3, #1
 8005128:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	ee07 3a90 	vmov	s15, r3
 8005130:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005134:	edd7 6a07 	vldr	s13, [r7, #28]
 8005138:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800513c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005140:	ee17 3a90 	vmov	r3, s15
 8005144:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005146:	e005      	b.n	8005154 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005148:	2300      	movs	r3, #0
 800514a:	61bb      	str	r3, [r7, #24]
    break;
 800514c:	e002      	b.n	8005154 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800514e:	4b07      	ldr	r3, [pc, #28]	; (800516c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005150:	61bb      	str	r3, [r7, #24]
    break;
 8005152:	bf00      	nop
  }

  return sysclockfreq;
 8005154:	69bb      	ldr	r3, [r7, #24]
}
 8005156:	4618      	mov	r0, r3
 8005158:	3724      	adds	r7, #36	; 0x24
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	58024400 	.word	0x58024400
 8005168:	03d09000 	.word	0x03d09000
 800516c:	003d0900 	.word	0x003d0900
 8005170:	007a1200 	.word	0x007a1200
 8005174:	46000000 	.word	0x46000000
 8005178:	4c742400 	.word	0x4c742400
 800517c:	4a742400 	.word	0x4a742400
 8005180:	4af42400 	.word	0x4af42400

08005184 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800518a:	f7ff fe81 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 800518e:	4602      	mov	r2, r0
 8005190:	4b10      	ldr	r3, [pc, #64]	; (80051d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	0a1b      	lsrs	r3, r3, #8
 8005196:	f003 030f 	and.w	r3, r3, #15
 800519a:	490f      	ldr	r1, [pc, #60]	; (80051d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800519c:	5ccb      	ldrb	r3, [r1, r3]
 800519e:	f003 031f 	and.w	r3, r3, #31
 80051a2:	fa22 f303 	lsr.w	r3, r2, r3
 80051a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80051a8:	4b0a      	ldr	r3, [pc, #40]	; (80051d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	f003 030f 	and.w	r3, r3, #15
 80051b0:	4a09      	ldr	r2, [pc, #36]	; (80051d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80051b2:	5cd3      	ldrb	r3, [r2, r3]
 80051b4:	f003 031f 	and.w	r3, r3, #31
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	fa22 f303 	lsr.w	r3, r2, r3
 80051be:	4a07      	ldr	r2, [pc, #28]	; (80051dc <HAL_RCC_GetHCLKFreq+0x58>)
 80051c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80051c2:	4a07      	ldr	r2, [pc, #28]	; (80051e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80051c8:	4b04      	ldr	r3, [pc, #16]	; (80051dc <HAL_RCC_GetHCLKFreq+0x58>)
 80051ca:	681b      	ldr	r3, [r3, #0]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3708      	adds	r7, #8
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	58024400 	.word	0x58024400
 80051d8:	080113ac 	.word	0x080113ac
 80051dc:	24000004 	.word	0x24000004
 80051e0:	24000000 	.word	0x24000000

080051e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80051e8:	f7ff ffcc 	bl	8005184 <HAL_RCC_GetHCLKFreq>
 80051ec:	4602      	mov	r2, r0
 80051ee:	4b06      	ldr	r3, [pc, #24]	; (8005208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	091b      	lsrs	r3, r3, #4
 80051f4:	f003 0307 	and.w	r3, r3, #7
 80051f8:	4904      	ldr	r1, [pc, #16]	; (800520c <HAL_RCC_GetPCLK1Freq+0x28>)
 80051fa:	5ccb      	ldrb	r3, [r1, r3]
 80051fc:	f003 031f 	and.w	r3, r3, #31
 8005200:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005204:	4618      	mov	r0, r3
 8005206:	bd80      	pop	{r7, pc}
 8005208:	58024400 	.word	0x58024400
 800520c:	080113ac 	.word	0x080113ac

08005210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005214:	f7ff ffb6 	bl	8005184 <HAL_RCC_GetHCLKFreq>
 8005218:	4602      	mov	r2, r0
 800521a:	4b06      	ldr	r3, [pc, #24]	; (8005234 <HAL_RCC_GetPCLK2Freq+0x24>)
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	0a1b      	lsrs	r3, r3, #8
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	4904      	ldr	r1, [pc, #16]	; (8005238 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005226:	5ccb      	ldrb	r3, [r1, r3]
 8005228:	f003 031f 	and.w	r3, r3, #31
 800522c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005230:	4618      	mov	r0, r3
 8005232:	bd80      	pop	{r7, pc}
 8005234:	58024400 	.word	0x58024400
 8005238:	080113ac 	.word	0x080113ac

0800523c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005244:	2300      	movs	r3, #0
 8005246:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005248:	2300      	movs	r3, #0
 800524a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d03f      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800525c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005260:	d02a      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005262:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005266:	d824      	bhi.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005268:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800526c:	d018      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800526e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005272:	d81e      	bhi.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005274:	2b00      	cmp	r3, #0
 8005276:	d003      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005278:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800527c:	d007      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800527e:	e018      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005280:	4bab      	ldr	r3, [pc, #684]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005284:	4aaa      	ldr	r2, [pc, #680]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800528a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800528c:	e015      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	3304      	adds	r3, #4
 8005292:	2102      	movs	r1, #2
 8005294:	4618      	mov	r0, r3
 8005296:	f001 f9cf 	bl	8006638 <RCCEx_PLL2_Config>
 800529a:	4603      	mov	r3, r0
 800529c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800529e:	e00c      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3324      	adds	r3, #36	; 0x24
 80052a4:	2102      	movs	r1, #2
 80052a6:	4618      	mov	r0, r3
 80052a8:	f001 fa78 	bl	800679c <RCCEx_PLL3_Config>
 80052ac:	4603      	mov	r3, r0
 80052ae:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80052b0:	e003      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	75fb      	strb	r3, [r7, #23]
      break;
 80052b6:	e000      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80052b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052ba:	7dfb      	ldrb	r3, [r7, #23]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d109      	bne.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80052c0:	4b9b      	ldr	r3, [pc, #620]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80052c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052cc:	4998      	ldr	r1, [pc, #608]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	650b      	str	r3, [r1, #80]	; 0x50
 80052d2:	e001      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d4:	7dfb      	ldrb	r3, [r7, #23]
 80052d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d03d      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e8:	2b04      	cmp	r3, #4
 80052ea:	d826      	bhi.n	800533a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80052ec:	a201      	add	r2, pc, #4	; (adr r2, 80052f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80052ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f2:	bf00      	nop
 80052f4:	08005309 	.word	0x08005309
 80052f8:	08005317 	.word	0x08005317
 80052fc:	08005329 	.word	0x08005329
 8005300:	08005341 	.word	0x08005341
 8005304:	08005341 	.word	0x08005341
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005308:	4b89      	ldr	r3, [pc, #548]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530c:	4a88      	ldr	r2, [pc, #544]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800530e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005312:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005314:	e015      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	3304      	adds	r3, #4
 800531a:	2100      	movs	r1, #0
 800531c:	4618      	mov	r0, r3
 800531e:	f001 f98b 	bl	8006638 <RCCEx_PLL2_Config>
 8005322:	4603      	mov	r3, r0
 8005324:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005326:	e00c      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	3324      	adds	r3, #36	; 0x24
 800532c:	2100      	movs	r1, #0
 800532e:	4618      	mov	r0, r3
 8005330:	f001 fa34 	bl	800679c <RCCEx_PLL3_Config>
 8005334:	4603      	mov	r3, r0
 8005336:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005338:	e003      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	75fb      	strb	r3, [r7, #23]
      break;
 800533e:	e000      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005340:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005342:	7dfb      	ldrb	r3, [r7, #23]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d109      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005348:	4b79      	ldr	r3, [pc, #484]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800534a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800534c:	f023 0207 	bic.w	r2, r3, #7
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005354:	4976      	ldr	r1, [pc, #472]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005356:	4313      	orrs	r3, r2
 8005358:	650b      	str	r3, [r1, #80]	; 0x50
 800535a:	e001      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800535c:	7dfb      	ldrb	r3, [r7, #23]
 800535e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005368:	2b00      	cmp	r3, #0
 800536a:	d042      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005374:	d02b      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800537a:	d825      	bhi.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800537c:	2bc0      	cmp	r3, #192	; 0xc0
 800537e:	d028      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005380:	2bc0      	cmp	r3, #192	; 0xc0
 8005382:	d821      	bhi.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005384:	2b80      	cmp	r3, #128	; 0x80
 8005386:	d016      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005388:	2b80      	cmp	r3, #128	; 0x80
 800538a:	d81d      	bhi.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800538c:	2b00      	cmp	r3, #0
 800538e:	d002      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005390:	2b40      	cmp	r3, #64	; 0x40
 8005392:	d007      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005394:	e018      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005396:	4b66      	ldr	r3, [pc, #408]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539a:	4a65      	ldr	r2, [pc, #404]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800539c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80053a2:	e017      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3304      	adds	r3, #4
 80053a8:	2100      	movs	r1, #0
 80053aa:	4618      	mov	r0, r3
 80053ac:	f001 f944 	bl	8006638 <RCCEx_PLL2_Config>
 80053b0:	4603      	mov	r3, r0
 80053b2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80053b4:	e00e      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	3324      	adds	r3, #36	; 0x24
 80053ba:	2100      	movs	r1, #0
 80053bc:	4618      	mov	r0, r3
 80053be:	f001 f9ed 	bl	800679c <RCCEx_PLL3_Config>
 80053c2:	4603      	mov	r3, r0
 80053c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80053c6:	e005      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	75fb      	strb	r3, [r7, #23]
      break;
 80053cc:	e002      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80053ce:	bf00      	nop
 80053d0:	e000      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80053d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053d4:	7dfb      	ldrb	r3, [r7, #23]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d109      	bne.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80053da:	4b55      	ldr	r3, [pc, #340]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053de:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e6:	4952      	ldr	r1, [pc, #328]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	650b      	str	r3, [r1, #80]	; 0x50
 80053ec:	e001      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ee:	7dfb      	ldrb	r3, [r7, #23]
 80053f0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d049      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005404:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005408:	d030      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800540a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800540e:	d82a      	bhi.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005410:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005414:	d02c      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005416:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800541a:	d824      	bhi.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800541c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005420:	d018      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005422:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005426:	d81e      	bhi.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005428:	2b00      	cmp	r3, #0
 800542a:	d003      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800542c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005430:	d007      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005432:	e018      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005434:	4b3e      	ldr	r3, [pc, #248]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005438:	4a3d      	ldr	r2, [pc, #244]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800543a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800543e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005440:	e017      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	3304      	adds	r3, #4
 8005446:	2100      	movs	r1, #0
 8005448:	4618      	mov	r0, r3
 800544a:	f001 f8f5 	bl	8006638 <RCCEx_PLL2_Config>
 800544e:	4603      	mov	r3, r0
 8005450:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005452:	e00e      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3324      	adds	r3, #36	; 0x24
 8005458:	2100      	movs	r1, #0
 800545a:	4618      	mov	r0, r3
 800545c:	f001 f99e 	bl	800679c <RCCEx_PLL3_Config>
 8005460:	4603      	mov	r3, r0
 8005462:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005464:	e005      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	75fb      	strb	r3, [r7, #23]
      break;
 800546a:	e002      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800546c:	bf00      	nop
 800546e:	e000      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005470:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005472:	7dfb      	ldrb	r3, [r7, #23]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10a      	bne.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005478:	4b2d      	ldr	r3, [pc, #180]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800547a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800547c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005486:	492a      	ldr	r1, [pc, #168]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005488:	4313      	orrs	r3, r2
 800548a:	658b      	str	r3, [r1, #88]	; 0x58
 800548c:	e001      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800548e:	7dfb      	ldrb	r3, [r7, #23]
 8005490:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800549a:	2b00      	cmp	r3, #0
 800549c:	d04c      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80054a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054a8:	d030      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80054aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054ae:	d82a      	bhi.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80054b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80054b4:	d02c      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80054b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80054ba:	d824      	bhi.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80054bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054c0:	d018      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80054c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054c6:	d81e      	bhi.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80054cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054d0:	d007      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80054d2:	e018      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054d4:	4b16      	ldr	r3, [pc, #88]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d8:	4a15      	ldr	r2, [pc, #84]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80054e0:	e017      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	3304      	adds	r3, #4
 80054e6:	2100      	movs	r1, #0
 80054e8:	4618      	mov	r0, r3
 80054ea:	f001 f8a5 	bl	8006638 <RCCEx_PLL2_Config>
 80054ee:	4603      	mov	r3, r0
 80054f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80054f2:	e00e      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3324      	adds	r3, #36	; 0x24
 80054f8:	2100      	movs	r1, #0
 80054fa:	4618      	mov	r0, r3
 80054fc:	f001 f94e 	bl	800679c <RCCEx_PLL3_Config>
 8005500:	4603      	mov	r3, r0
 8005502:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005504:	e005      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	75fb      	strb	r3, [r7, #23]
      break;
 800550a:	e002      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800550c:	bf00      	nop
 800550e:	e000      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005510:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005512:	7dfb      	ldrb	r3, [r7, #23]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10d      	bne.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005518:	4b05      	ldr	r3, [pc, #20]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800551a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005526:	4902      	ldr	r1, [pc, #8]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005528:	4313      	orrs	r3, r2
 800552a:	658b      	str	r3, [r1, #88]	; 0x58
 800552c:	e004      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800552e:	bf00      	nop
 8005530:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005534:	7dfb      	ldrb	r3, [r7, #23]
 8005536:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d032      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005548:	2b30      	cmp	r3, #48	; 0x30
 800554a:	d01c      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800554c:	2b30      	cmp	r3, #48	; 0x30
 800554e:	d817      	bhi.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005550:	2b20      	cmp	r3, #32
 8005552:	d00c      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005554:	2b20      	cmp	r3, #32
 8005556:	d813      	bhi.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005558:	2b00      	cmp	r3, #0
 800555a:	d016      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800555c:	2b10      	cmp	r3, #16
 800555e:	d10f      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005560:	4baf      	ldr	r3, [pc, #700]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005564:	4aae      	ldr	r2, [pc, #696]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800556a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800556c:	e00e      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	3304      	adds	r3, #4
 8005572:	2102      	movs	r1, #2
 8005574:	4618      	mov	r0, r3
 8005576:	f001 f85f 	bl	8006638 <RCCEx_PLL2_Config>
 800557a:	4603      	mov	r3, r0
 800557c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800557e:	e005      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	75fb      	strb	r3, [r7, #23]
      break;
 8005584:	e002      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005586:	bf00      	nop
 8005588:	e000      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800558a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800558c:	7dfb      	ldrb	r3, [r7, #23]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d109      	bne.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005592:	4ba3      	ldr	r3, [pc, #652]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005596:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800559e:	49a0      	ldr	r1, [pc, #640]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80055a4:	e001      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a6:	7dfb      	ldrb	r3, [r7, #23]
 80055a8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d047      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055be:	d030      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80055c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055c4:	d82a      	bhi.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80055c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055ca:	d02c      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80055cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055d0:	d824      	bhi.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80055d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055d6:	d018      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80055d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055dc:	d81e      	bhi.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80055e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055e6:	d007      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80055e8:	e018      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055ea:	4b8d      	ldr	r3, [pc, #564]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80055ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ee:	4a8c      	ldr	r2, [pc, #560]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80055f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80055f6:	e017      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3304      	adds	r3, #4
 80055fc:	2100      	movs	r1, #0
 80055fe:	4618      	mov	r0, r3
 8005600:	f001 f81a 	bl	8006638 <RCCEx_PLL2_Config>
 8005604:	4603      	mov	r3, r0
 8005606:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005608:	e00e      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	3324      	adds	r3, #36	; 0x24
 800560e:	2100      	movs	r1, #0
 8005610:	4618      	mov	r0, r3
 8005612:	f001 f8c3 	bl	800679c <RCCEx_PLL3_Config>
 8005616:	4603      	mov	r3, r0
 8005618:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800561a:	e005      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	75fb      	strb	r3, [r7, #23]
      break;
 8005620:	e002      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005622:	bf00      	nop
 8005624:	e000      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005626:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005628:	7dfb      	ldrb	r3, [r7, #23]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d109      	bne.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800562e:	4b7c      	ldr	r3, [pc, #496]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005632:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800563a:	4979      	ldr	r1, [pc, #484]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800563c:	4313      	orrs	r3, r2
 800563e:	650b      	str	r3, [r1, #80]	; 0x50
 8005640:	e001      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005642:	7dfb      	ldrb	r3, [r7, #23]
 8005644:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d049      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005656:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800565a:	d02e      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800565c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005660:	d828      	bhi.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005662:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005666:	d02a      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005668:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800566c:	d822      	bhi.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800566e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005672:	d026      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005674:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005678:	d81c      	bhi.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800567a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800567e:	d010      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005680:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005684:	d816      	bhi.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005686:	2b00      	cmp	r3, #0
 8005688:	d01d      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800568a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800568e:	d111      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3304      	adds	r3, #4
 8005694:	2101      	movs	r1, #1
 8005696:	4618      	mov	r0, r3
 8005698:	f000 ffce 	bl	8006638 <RCCEx_PLL2_Config>
 800569c:	4603      	mov	r3, r0
 800569e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80056a0:	e012      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	3324      	adds	r3, #36	; 0x24
 80056a6:	2101      	movs	r1, #1
 80056a8:	4618      	mov	r0, r3
 80056aa:	f001 f877 	bl	800679c <RCCEx_PLL3_Config>
 80056ae:	4603      	mov	r3, r0
 80056b0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80056b2:	e009      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	75fb      	strb	r3, [r7, #23]
      break;
 80056b8:	e006      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80056ba:	bf00      	nop
 80056bc:	e004      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80056be:	bf00      	nop
 80056c0:	e002      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80056c2:	bf00      	nop
 80056c4:	e000      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80056c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056c8:	7dfb      	ldrb	r3, [r7, #23]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d109      	bne.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80056ce:	4b54      	ldr	r3, [pc, #336]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80056d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056da:	4951      	ldr	r1, [pc, #324]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	650b      	str	r3, [r1, #80]	; 0x50
 80056e0:	e001      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e2:	7dfb      	ldrb	r3, [r7, #23]
 80056e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d04b      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80056f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056fc:	d02e      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x520>
 80056fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005702:	d828      	bhi.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005708:	d02a      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800570a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800570e:	d822      	bhi.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005710:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005714:	d026      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005716:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800571a:	d81c      	bhi.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800571c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005720:	d010      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005722:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005726:	d816      	bhi.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005728:	2b00      	cmp	r3, #0
 800572a:	d01d      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800572c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005730:	d111      	bne.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	3304      	adds	r3, #4
 8005736:	2101      	movs	r1, #1
 8005738:	4618      	mov	r0, r3
 800573a:	f000 ff7d 	bl	8006638 <RCCEx_PLL2_Config>
 800573e:	4603      	mov	r3, r0
 8005740:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005742:	e012      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	3324      	adds	r3, #36	; 0x24
 8005748:	2101      	movs	r1, #1
 800574a:	4618      	mov	r0, r3
 800574c:	f001 f826 	bl	800679c <RCCEx_PLL3_Config>
 8005750:	4603      	mov	r3, r0
 8005752:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005754:	e009      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	75fb      	strb	r3, [r7, #23]
      break;
 800575a:	e006      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800575c:	bf00      	nop
 800575e:	e004      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005760:	bf00      	nop
 8005762:	e002      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005764:	bf00      	nop
 8005766:	e000      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005768:	bf00      	nop
    }

    if(ret == HAL_OK)
 800576a:	7dfb      	ldrb	r3, [r7, #23]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10a      	bne.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005770:	4b2b      	ldr	r3, [pc, #172]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005774:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800577e:	4928      	ldr	r1, [pc, #160]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005780:	4313      	orrs	r3, r2
 8005782:	658b      	str	r3, [r1, #88]	; 0x58
 8005784:	e001      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005786:	7dfb      	ldrb	r3, [r7, #23]
 8005788:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d02f      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800579a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800579e:	d00e      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x582>
 80057a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057a4:	d814      	bhi.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d015      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80057aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057ae:	d10f      	bne.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057b0:	4b1b      	ldr	r3, [pc, #108]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80057b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b4:	4a1a      	ldr	r2, [pc, #104]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80057b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80057bc:	e00c      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3304      	adds	r3, #4
 80057c2:	2101      	movs	r1, #1
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 ff37 	bl	8006638 <RCCEx_PLL2_Config>
 80057ca:	4603      	mov	r3, r0
 80057cc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80057ce:	e003      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	75fb      	strb	r3, [r7, #23]
      break;
 80057d4:	e000      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80057d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057d8:	7dfb      	ldrb	r3, [r7, #23]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d109      	bne.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80057de:	4b10      	ldr	r3, [pc, #64]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80057e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ea:	490d      	ldr	r1, [pc, #52]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	650b      	str	r3, [r1, #80]	; 0x50
 80057f0:	e001      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f2:	7dfb      	ldrb	r3, [r7, #23]
 80057f4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d033      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005806:	2b03      	cmp	r3, #3
 8005808:	d81c      	bhi.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800580a:	a201      	add	r2, pc, #4	; (adr r2, 8005810 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800580c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005810:	0800584b 	.word	0x0800584b
 8005814:	08005825 	.word	0x08005825
 8005818:	08005833 	.word	0x08005833
 800581c:	0800584b 	.word	0x0800584b
 8005820:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005824:	4bb8      	ldr	r3, [pc, #736]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005828:	4ab7      	ldr	r2, [pc, #732]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800582a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800582e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005830:	e00c      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	3304      	adds	r3, #4
 8005836:	2102      	movs	r1, #2
 8005838:	4618      	mov	r0, r3
 800583a:	f000 fefd 	bl	8006638 <RCCEx_PLL2_Config>
 800583e:	4603      	mov	r3, r0
 8005840:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005842:	e003      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	75fb      	strb	r3, [r7, #23]
      break;
 8005848:	e000      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800584a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800584c:	7dfb      	ldrb	r3, [r7, #23]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d109      	bne.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005852:	4bad      	ldr	r3, [pc, #692]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005856:	f023 0203 	bic.w	r2, r3, #3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800585e:	49aa      	ldr	r1, [pc, #680]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005860:	4313      	orrs	r3, r2
 8005862:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005864:	e001      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005866:	7dfb      	ldrb	r3, [r7, #23]
 8005868:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 8086 	beq.w	8005984 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005878:	4ba4      	ldr	r3, [pc, #656]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4aa3      	ldr	r2, [pc, #652]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800587e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005882:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005884:	f7fc fc52 	bl	800212c <HAL_GetTick>
 8005888:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800588a:	e009      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800588c:	f7fc fc4e 	bl	800212c <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b64      	cmp	r3, #100	; 0x64
 8005898:	d902      	bls.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	75fb      	strb	r3, [r7, #23]
        break;
 800589e:	e005      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058a0:	4b9a      	ldr	r3, [pc, #616]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d0ef      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80058ac:	7dfb      	ldrb	r3, [r7, #23]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d166      	bne.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80058b2:	4b95      	ldr	r3, [pc, #596]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80058b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058bc:	4053      	eors	r3, r2
 80058be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d013      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058c6:	4b90      	ldr	r3, [pc, #576]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80058c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ce:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058d0:	4b8d      	ldr	r3, [pc, #564]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80058d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d4:	4a8c      	ldr	r2, [pc, #560]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80058d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058da:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058dc:	4b8a      	ldr	r3, [pc, #552]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80058de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e0:	4a89      	ldr	r2, [pc, #548]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80058e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058e6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80058e8:	4a87      	ldr	r2, [pc, #540]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058f8:	d115      	bne.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058fa:	f7fc fc17 	bl	800212c <HAL_GetTick>
 80058fe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005900:	e00b      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005902:	f7fc fc13 	bl	800212c <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005910:	4293      	cmp	r3, r2
 8005912:	d902      	bls.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	75fb      	strb	r3, [r7, #23]
            break;
 8005918:	e005      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800591a:	4b7b      	ldr	r3, [pc, #492]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800591c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0ed      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005926:	7dfb      	ldrb	r3, [r7, #23]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d126      	bne.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005936:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800593a:	d10d      	bne.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800593c:	4b72      	ldr	r3, [pc, #456]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800594a:	0919      	lsrs	r1, r3, #4
 800594c:	4b70      	ldr	r3, [pc, #448]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800594e:	400b      	ands	r3, r1
 8005950:	496d      	ldr	r1, [pc, #436]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005952:	4313      	orrs	r3, r2
 8005954:	610b      	str	r3, [r1, #16]
 8005956:	e005      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005958:	4b6b      	ldr	r3, [pc, #428]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	4a6a      	ldr	r2, [pc, #424]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800595e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005962:	6113      	str	r3, [r2, #16]
 8005964:	4b68      	ldr	r3, [pc, #416]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005966:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800596e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005972:	4965      	ldr	r1, [pc, #404]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005974:	4313      	orrs	r3, r2
 8005976:	670b      	str	r3, [r1, #112]	; 0x70
 8005978:	e004      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800597a:	7dfb      	ldrb	r3, [r7, #23]
 800597c:	75bb      	strb	r3, [r7, #22]
 800597e:	e001      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005980:	7dfb      	ldrb	r3, [r7, #23]
 8005982:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	2b00      	cmp	r3, #0
 800598e:	d07e      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005994:	2b28      	cmp	r3, #40	; 0x28
 8005996:	d867      	bhi.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005998:	a201      	add	r2, pc, #4	; (adr r2, 80059a0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800599a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599e:	bf00      	nop
 80059a0:	08005a6f 	.word	0x08005a6f
 80059a4:	08005a69 	.word	0x08005a69
 80059a8:	08005a69 	.word	0x08005a69
 80059ac:	08005a69 	.word	0x08005a69
 80059b0:	08005a69 	.word	0x08005a69
 80059b4:	08005a69 	.word	0x08005a69
 80059b8:	08005a69 	.word	0x08005a69
 80059bc:	08005a69 	.word	0x08005a69
 80059c0:	08005a45 	.word	0x08005a45
 80059c4:	08005a69 	.word	0x08005a69
 80059c8:	08005a69 	.word	0x08005a69
 80059cc:	08005a69 	.word	0x08005a69
 80059d0:	08005a69 	.word	0x08005a69
 80059d4:	08005a69 	.word	0x08005a69
 80059d8:	08005a69 	.word	0x08005a69
 80059dc:	08005a69 	.word	0x08005a69
 80059e0:	08005a57 	.word	0x08005a57
 80059e4:	08005a69 	.word	0x08005a69
 80059e8:	08005a69 	.word	0x08005a69
 80059ec:	08005a69 	.word	0x08005a69
 80059f0:	08005a69 	.word	0x08005a69
 80059f4:	08005a69 	.word	0x08005a69
 80059f8:	08005a69 	.word	0x08005a69
 80059fc:	08005a69 	.word	0x08005a69
 8005a00:	08005a6f 	.word	0x08005a6f
 8005a04:	08005a69 	.word	0x08005a69
 8005a08:	08005a69 	.word	0x08005a69
 8005a0c:	08005a69 	.word	0x08005a69
 8005a10:	08005a69 	.word	0x08005a69
 8005a14:	08005a69 	.word	0x08005a69
 8005a18:	08005a69 	.word	0x08005a69
 8005a1c:	08005a69 	.word	0x08005a69
 8005a20:	08005a6f 	.word	0x08005a6f
 8005a24:	08005a69 	.word	0x08005a69
 8005a28:	08005a69 	.word	0x08005a69
 8005a2c:	08005a69 	.word	0x08005a69
 8005a30:	08005a69 	.word	0x08005a69
 8005a34:	08005a69 	.word	0x08005a69
 8005a38:	08005a69 	.word	0x08005a69
 8005a3c:	08005a69 	.word	0x08005a69
 8005a40:	08005a6f 	.word	0x08005a6f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	3304      	adds	r3, #4
 8005a48:	2101      	movs	r1, #1
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 fdf4 	bl	8006638 <RCCEx_PLL2_Config>
 8005a50:	4603      	mov	r3, r0
 8005a52:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005a54:	e00c      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	3324      	adds	r3, #36	; 0x24
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f000 fe9d 	bl	800679c <RCCEx_PLL3_Config>
 8005a62:	4603      	mov	r3, r0
 8005a64:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005a66:	e003      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a6c:	e000      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8005a6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a70:	7dfb      	ldrb	r3, [r7, #23]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d109      	bne.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005a76:	4b24      	ldr	r3, [pc, #144]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a7a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a82:	4921      	ldr	r1, [pc, #132]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	654b      	str	r3, [r1, #84]	; 0x54
 8005a88:	e001      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a8a:	7dfb      	ldrb	r3, [r7, #23]
 8005a8c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d03e      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a9e:	2b05      	cmp	r3, #5
 8005aa0:	d820      	bhi.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8005aa2:	a201      	add	r2, pc, #4	; (adr r2, 8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8005aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa8:	08005aeb 	.word	0x08005aeb
 8005aac:	08005ac1 	.word	0x08005ac1
 8005ab0:	08005ad3 	.word	0x08005ad3
 8005ab4:	08005aeb 	.word	0x08005aeb
 8005ab8:	08005aeb 	.word	0x08005aeb
 8005abc:	08005aeb 	.word	0x08005aeb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3304      	adds	r3, #4
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 fdb6 	bl	8006638 <RCCEx_PLL2_Config>
 8005acc:	4603      	mov	r3, r0
 8005ace:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005ad0:	e00c      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	3324      	adds	r3, #36	; 0x24
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 fe5f 	bl	800679c <RCCEx_PLL3_Config>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005ae2:	e003      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ae8:	e000      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8005aea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aec:	7dfb      	ldrb	r3, [r7, #23]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d110      	bne.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005af2:	4b05      	ldr	r3, [pc, #20]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af6:	f023 0207 	bic.w	r2, r3, #7
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005afe:	4902      	ldr	r1, [pc, #8]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	654b      	str	r3, [r1, #84]	; 0x54
 8005b04:	e008      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8005b06:	bf00      	nop
 8005b08:	58024400 	.word	0x58024400
 8005b0c:	58024800 	.word	0x58024800
 8005b10:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b14:	7dfb      	ldrb	r3, [r7, #23]
 8005b16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0304 	and.w	r3, r3, #4
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d039      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b2a:	2b05      	cmp	r3, #5
 8005b2c:	d820      	bhi.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8005b2e:	a201      	add	r2, pc, #4	; (adr r2, 8005b34 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8005b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b34:	08005b77 	.word	0x08005b77
 8005b38:	08005b4d 	.word	0x08005b4d
 8005b3c:	08005b5f 	.word	0x08005b5f
 8005b40:	08005b77 	.word	0x08005b77
 8005b44:	08005b77 	.word	0x08005b77
 8005b48:	08005b77 	.word	0x08005b77
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	3304      	adds	r3, #4
 8005b50:	2101      	movs	r1, #1
 8005b52:	4618      	mov	r0, r3
 8005b54:	f000 fd70 	bl	8006638 <RCCEx_PLL2_Config>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005b5c:	e00c      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	3324      	adds	r3, #36	; 0x24
 8005b62:	2101      	movs	r1, #1
 8005b64:	4618      	mov	r0, r3
 8005b66:	f000 fe19 	bl	800679c <RCCEx_PLL3_Config>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005b6e:	e003      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	75fb      	strb	r3, [r7, #23]
      break;
 8005b74:	e000      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8005b76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b78:	7dfb      	ldrb	r3, [r7, #23]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10a      	bne.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b7e:	4bb7      	ldr	r3, [pc, #732]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b82:	f023 0207 	bic.w	r2, r3, #7
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b8c:	49b3      	ldr	r1, [pc, #716]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	658b      	str	r3, [r1, #88]	; 0x58
 8005b92:	e001      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b94:	7dfb      	ldrb	r3, [r7, #23]
 8005b96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0320 	and.w	r3, r3, #32
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d04b      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005baa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bae:	d02e      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8005bb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bb4:	d828      	bhi.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bba:	d02a      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bc0:	d822      	bhi.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005bc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005bc6:	d026      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005bc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005bcc:	d81c      	bhi.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005bce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bd2:	d010      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8005bd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bd8:	d816      	bhi.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d01d      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005bde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005be2:	d111      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	3304      	adds	r3, #4
 8005be8:	2100      	movs	r1, #0
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 fd24 	bl	8006638 <RCCEx_PLL2_Config>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005bf4:	e012      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	3324      	adds	r3, #36	; 0x24
 8005bfa:	2102      	movs	r1, #2
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f000 fdcd 	bl	800679c <RCCEx_PLL3_Config>
 8005c02:	4603      	mov	r3, r0
 8005c04:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005c06:	e009      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c0c:	e006      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005c0e:	bf00      	nop
 8005c10:	e004      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005c12:	bf00      	nop
 8005c14:	e002      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005c16:	bf00      	nop
 8005c18:	e000      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005c1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c1c:	7dfb      	ldrb	r3, [r7, #23]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10a      	bne.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c22:	4b8e      	ldr	r3, [pc, #568]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c26:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c30:	498a      	ldr	r1, [pc, #552]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	654b      	str	r3, [r1, #84]	; 0x54
 8005c36:	e001      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c38:	7dfb      	ldrb	r3, [r7, #23]
 8005c3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d04b      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c4e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005c52:	d02e      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8005c54:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005c58:	d828      	bhi.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c5e:	d02a      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c64:	d822      	bhi.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005c66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c6a:	d026      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005c6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c70:	d81c      	bhi.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005c72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c76:	d010      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8005c78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c7c:	d816      	bhi.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d01d      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c86:	d111      	bne.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3304      	adds	r3, #4
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 fcd2 	bl	8006638 <RCCEx_PLL2_Config>
 8005c94:	4603      	mov	r3, r0
 8005c96:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005c98:	e012      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	3324      	adds	r3, #36	; 0x24
 8005c9e:	2102      	movs	r1, #2
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f000 fd7b 	bl	800679c <RCCEx_PLL3_Config>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005caa:	e009      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	75fb      	strb	r3, [r7, #23]
      break;
 8005cb0:	e006      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005cb2:	bf00      	nop
 8005cb4:	e004      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005cb6:	bf00      	nop
 8005cb8:	e002      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005cba:	bf00      	nop
 8005cbc:	e000      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005cbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cc0:	7dfb      	ldrb	r3, [r7, #23]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10a      	bne.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005cc6:	4b65      	ldr	r3, [pc, #404]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cd4:	4961      	ldr	r1, [pc, #388]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	658b      	str	r3, [r1, #88]	; 0x58
 8005cda:	e001      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cdc:	7dfb      	ldrb	r3, [r7, #23]
 8005cde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d04b      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cf2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005cf6:	d02e      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8005cf8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005cfc:	d828      	bhi.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d02:	d02a      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8005d04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d08:	d822      	bhi.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005d0a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005d0e:	d026      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005d10:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005d14:	d81c      	bhi.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005d16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d1a:	d010      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005d1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d20:	d816      	bhi.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d01d      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d2a:	d111      	bne.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	3304      	adds	r3, #4
 8005d30:	2100      	movs	r1, #0
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 fc80 	bl	8006638 <RCCEx_PLL2_Config>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005d3c:	e012      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	3324      	adds	r3, #36	; 0x24
 8005d42:	2102      	movs	r1, #2
 8005d44:	4618      	mov	r0, r3
 8005d46:	f000 fd29 	bl	800679c <RCCEx_PLL3_Config>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005d4e:	e009      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	75fb      	strb	r3, [r7, #23]
      break;
 8005d54:	e006      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005d56:	bf00      	nop
 8005d58:	e004      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005d5a:	bf00      	nop
 8005d5c:	e002      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005d5e:	bf00      	nop
 8005d60:	e000      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005d62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d64:	7dfb      	ldrb	r3, [r7, #23]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10a      	bne.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005d6a:	4b3c      	ldr	r3, [pc, #240]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d78:	4938      	ldr	r1, [pc, #224]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	658b      	str	r3, [r1, #88]	; 0x58
 8005d7e:	e001      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d80:	7dfb      	ldrb	r3, [r7, #23]
 8005d82:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0308 	and.w	r3, r3, #8
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d01a      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d9a:	d10a      	bne.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3324      	adds	r3, #36	; 0x24
 8005da0:	2102      	movs	r1, #2
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fcfa 	bl	800679c <RCCEx_PLL3_Config>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005db2:	4b2a      	ldr	r3, [pc, #168]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dc0:	4926      	ldr	r1, [pc, #152]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0310 	and.w	r3, r3, #16
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d01a      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ddc:	d10a      	bne.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	3324      	adds	r3, #36	; 0x24
 8005de2:	2102      	movs	r1, #2
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 fcd9 	bl	800679c <RCCEx_PLL3_Config>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005df4:	4b19      	ldr	r3, [pc, #100]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e02:	4916      	ldr	r1, [pc, #88]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d036      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e1e:	d01f      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005e20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e24:	d817      	bhi.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8005e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e2e:	d009      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005e30:	e011      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	3304      	adds	r3, #4
 8005e36:	2100      	movs	r1, #0
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f000 fbfd 	bl	8006638 <RCCEx_PLL2_Config>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005e42:	e00e      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	3324      	adds	r3, #36	; 0x24
 8005e48:	2102      	movs	r1, #2
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 fca6 	bl	800679c <RCCEx_PLL3_Config>
 8005e50:	4603      	mov	r3, r0
 8005e52:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005e54:	e005      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	75fb      	strb	r3, [r7, #23]
      break;
 8005e5a:	e002      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8005e5c:	58024400 	.word	0x58024400
      break;
 8005e60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e62:	7dfb      	ldrb	r3, [r7, #23]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10a      	bne.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e68:	4b93      	ldr	r3, [pc, #588]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e76:	4990      	ldr	r1, [pc, #576]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	658b      	str	r3, [r1, #88]	; 0x58
 8005e7c:	e001      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e7e:	7dfb      	ldrb	r3, [r7, #23]
 8005e80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d033      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e98:	d01c      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8005e9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e9e:	d816      	bhi.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8005ea0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ea4:	d003      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8005ea6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005eaa:	d007      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8005eac:	e00f      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eae:	4b82      	ldr	r3, [pc, #520]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb2:	4a81      	ldr	r2, [pc, #516]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005eb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005eba:	e00c      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	3324      	adds	r3, #36	; 0x24
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 fc6a 	bl	800679c <RCCEx_PLL3_Config>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005ecc:	e003      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	75fb      	strb	r3, [r7, #23]
      break;
 8005ed2:	e000      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8005ed4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ed6:	7dfb      	ldrb	r3, [r7, #23]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10a      	bne.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005edc:	4b76      	ldr	r3, [pc, #472]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eea:	4973      	ldr	r1, [pc, #460]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	654b      	str	r3, [r1, #84]	; 0x54
 8005ef0:	e001      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef2:	7dfb      	ldrb	r3, [r7, #23]
 8005ef4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d029      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8005f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f0e:	d007      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005f10:	e00f      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f12:	4b69      	ldr	r3, [pc, #420]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f16:	4a68      	ldr	r2, [pc, #416]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005f1e:	e00b      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	3304      	adds	r3, #4
 8005f24:	2102      	movs	r1, #2
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 fb86 	bl	8006638 <RCCEx_PLL2_Config>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005f30:	e002      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	75fb      	strb	r3, [r7, #23]
      break;
 8005f36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f38:	7dfb      	ldrb	r3, [r7, #23]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d109      	bne.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005f3e:	4b5e      	ldr	r3, [pc, #376]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f4a:	495b      	ldr	r1, [pc, #364]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005f50:	e001      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f52:	7dfb      	ldrb	r3, [r7, #23]
 8005f54:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00a      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	3324      	adds	r3, #36	; 0x24
 8005f66:	2102      	movs	r1, #2
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 fc17 	bl	800679c <RCCEx_PLL3_Config>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d030      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f8c:	d017      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8005f8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f92:	d811      	bhi.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f98:	d013      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005f9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f9e:	d80b      	bhi.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d010      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fa8:	d106      	bne.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005faa:	4b43      	ldr	r3, [pc, #268]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fae:	4a42      	ldr	r2, [pc, #264]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005fb6:	e007      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	75fb      	strb	r3, [r7, #23]
      break;
 8005fbc:	e004      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005fbe:	bf00      	nop
 8005fc0:	e002      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005fc2:	bf00      	nop
 8005fc4:	e000      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005fc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fc8:	7dfb      	ldrb	r3, [r7, #23]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d109      	bne.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005fce:	4b3a      	ldr	r3, [pc, #232]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fda:	4937      	ldr	r1, [pc, #220]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	654b      	str	r3, [r1, #84]	; 0x54
 8005fe0:	e001      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe2:	7dfb      	ldrb	r3, [r7, #23]
 8005fe4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d008      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ff2:	4b31      	ldr	r3, [pc, #196]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ff6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffe:	492e      	ldr	r1, [pc, #184]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006000:	4313      	orrs	r3, r2
 8006002:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d009      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006010:	4b29      	ldr	r3, [pc, #164]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800601e:	4926      	ldr	r1, [pc, #152]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006020:	4313      	orrs	r3, r2
 8006022:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d008      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006030:	4b21      	ldr	r3, [pc, #132]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006034:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800603c:	491e      	ldr	r1, [pc, #120]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800603e:	4313      	orrs	r3, r2
 8006040:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00d      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800604e:	4b1a      	ldr	r3, [pc, #104]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	4a19      	ldr	r2, [pc, #100]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006054:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006058:	6113      	str	r3, [r2, #16]
 800605a:	4b17      	ldr	r3, [pc, #92]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800605c:	691a      	ldr	r2, [r3, #16]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006064:	4914      	ldr	r1, [pc, #80]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006066:	4313      	orrs	r3, r2
 8006068:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	da08      	bge.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006072:	4b11      	ldr	r3, [pc, #68]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006076:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800607e:	490e      	ldr	r1, [pc, #56]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006080:	4313      	orrs	r3, r2
 8006082:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d009      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006090:	4b09      	ldr	r3, [pc, #36]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006094:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800609e:	4906      	ldr	r1, [pc, #24]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80060a4:	7dbb      	ldrb	r3, [r7, #22]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	e000      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	58024400 	.word	0x58024400

080060bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80060c0:	f7ff f860 	bl	8005184 <HAL_RCC_GetHCLKFreq>
 80060c4:	4602      	mov	r2, r0
 80060c6:	4b06      	ldr	r3, [pc, #24]	; (80060e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	091b      	lsrs	r3, r3, #4
 80060cc:	f003 0307 	and.w	r3, r3, #7
 80060d0:	4904      	ldr	r1, [pc, #16]	; (80060e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80060d2:	5ccb      	ldrb	r3, [r1, r3]
 80060d4:	f003 031f 	and.w	r3, r3, #31
 80060d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80060dc:	4618      	mov	r0, r3
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	58024400 	.word	0x58024400
 80060e4:	080113ac 	.word	0x080113ac

080060e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b089      	sub	sp, #36	; 0x24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80060f0:	4ba1      	ldr	r3, [pc, #644]	; (8006378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f4:	f003 0303 	and.w	r3, r3, #3
 80060f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80060fa:	4b9f      	ldr	r3, [pc, #636]	; (8006378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fe:	0b1b      	lsrs	r3, r3, #12
 8006100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006104:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006106:	4b9c      	ldr	r3, [pc, #624]	; (8006378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610a:	091b      	lsrs	r3, r3, #4
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006112:	4b99      	ldr	r3, [pc, #612]	; (8006378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006116:	08db      	lsrs	r3, r3, #3
 8006118:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	fb02 f303 	mul.w	r3, r2, r3
 8006122:	ee07 3a90 	vmov	s15, r3
 8006126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800612a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 8111 	beq.w	8006358 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	2b02      	cmp	r3, #2
 800613a:	f000 8083 	beq.w	8006244 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	2b02      	cmp	r3, #2
 8006142:	f200 80a1 	bhi.w	8006288 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d056      	beq.n	8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006152:	e099      	b.n	8006288 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006154:	4b88      	ldr	r3, [pc, #544]	; (8006378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0320 	and.w	r3, r3, #32
 800615c:	2b00      	cmp	r3, #0
 800615e:	d02d      	beq.n	80061bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006160:	4b85      	ldr	r3, [pc, #532]	; (8006378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	08db      	lsrs	r3, r3, #3
 8006166:	f003 0303 	and.w	r3, r3, #3
 800616a:	4a84      	ldr	r2, [pc, #528]	; (800637c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800616c:	fa22 f303 	lsr.w	r3, r2, r3
 8006170:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	ee07 3a90 	vmov	s15, r3
 8006178:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	ee07 3a90 	vmov	s15, r3
 8006182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800618a:	4b7b      	ldr	r3, [pc, #492]	; (8006378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800618c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006192:	ee07 3a90 	vmov	s15, r3
 8006196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800619a:	ed97 6a03 	vldr	s12, [r7, #12]
 800619e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006380 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80061ba:	e087      	b.n	80062cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	ee07 3a90 	vmov	s15, r3
 80061c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006384 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80061ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ce:	4b6a      	ldr	r3, [pc, #424]	; (8006378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061d6:	ee07 3a90 	vmov	s15, r3
 80061da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061de:	ed97 6a03 	vldr	s12, [r7, #12]
 80061e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006380 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061fe:	e065      	b.n	80062cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	ee07 3a90 	vmov	s15, r3
 8006206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800620a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006388 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800620e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006212:	4b59      	ldr	r3, [pc, #356]	; (8006378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800621a:	ee07 3a90 	vmov	s15, r3
 800621e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006222:	ed97 6a03 	vldr	s12, [r7, #12]
 8006226:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006380 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800622a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800622e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800623a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800623e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006242:	e043      	b.n	80062cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	ee07 3a90 	vmov	s15, r3
 800624a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800624e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800638c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006256:	4b48      	ldr	r3, [pc, #288]	; (8006378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800625e:	ee07 3a90 	vmov	s15, r3
 8006262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006266:	ed97 6a03 	vldr	s12, [r7, #12]
 800626a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006380 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800626e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800627a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800627e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006282:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006286:	e021      	b.n	80062cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	ee07 3a90 	vmov	s15, r3
 800628e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006292:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006388 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800629a:	4b37      	ldr	r3, [pc, #220]	; (8006378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800629c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062a2:	ee07 3a90 	vmov	s15, r3
 80062a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80062ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006380 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80062cc:	4b2a      	ldr	r3, [pc, #168]	; (8006378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d0:	0a5b      	lsrs	r3, r3, #9
 80062d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062d6:	ee07 3a90 	vmov	s15, r3
 80062da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80062ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062f2:	ee17 2a90 	vmov	r2, s15
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80062fa:	4b1f      	ldr	r3, [pc, #124]	; (8006378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fe:	0c1b      	lsrs	r3, r3, #16
 8006300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006304:	ee07 3a90 	vmov	s15, r3
 8006308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800630c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006310:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006314:	edd7 6a07 	vldr	s13, [r7, #28]
 8006318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800631c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006320:	ee17 2a90 	vmov	r2, s15
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006328:	4b13      	ldr	r3, [pc, #76]	; (8006378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800632a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632c:	0e1b      	lsrs	r3, r3, #24
 800632e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006332:	ee07 3a90 	vmov	s15, r3
 8006336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800633a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800633e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006342:	edd7 6a07 	vldr	s13, [r7, #28]
 8006346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800634a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800634e:	ee17 2a90 	vmov	r2, s15
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006356:	e008      	b.n	800636a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	609a      	str	r2, [r3, #8]
}
 800636a:	bf00      	nop
 800636c:	3724      	adds	r7, #36	; 0x24
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	58024400 	.word	0x58024400
 800637c:	03d09000 	.word	0x03d09000
 8006380:	46000000 	.word	0x46000000
 8006384:	4c742400 	.word	0x4c742400
 8006388:	4a742400 	.word	0x4a742400
 800638c:	4af42400 	.word	0x4af42400

08006390 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006390:	b480      	push	{r7}
 8006392:	b089      	sub	sp, #36	; 0x24
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006398:	4ba1      	ldr	r3, [pc, #644]	; (8006620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800639a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639c:	f003 0303 	and.w	r3, r3, #3
 80063a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80063a2:	4b9f      	ldr	r3, [pc, #636]	; (8006620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a6:	0d1b      	lsrs	r3, r3, #20
 80063a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80063ae:	4b9c      	ldr	r3, [pc, #624]	; (8006620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b2:	0a1b      	lsrs	r3, r3, #8
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80063ba:	4b99      	ldr	r3, [pc, #612]	; (8006620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063be:	08db      	lsrs	r3, r3, #3
 80063c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	fb02 f303 	mul.w	r3, r2, r3
 80063ca:	ee07 3a90 	vmov	s15, r3
 80063ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 8111 	beq.w	8006600 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	f000 8083 	beq.w	80064ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	f200 80a1 	bhi.w	8006530 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d003      	beq.n	80063fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d056      	beq.n	80064a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80063fa:	e099      	b.n	8006530 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063fc:	4b88      	ldr	r3, [pc, #544]	; (8006620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0320 	and.w	r3, r3, #32
 8006404:	2b00      	cmp	r3, #0
 8006406:	d02d      	beq.n	8006464 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006408:	4b85      	ldr	r3, [pc, #532]	; (8006620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	08db      	lsrs	r3, r3, #3
 800640e:	f003 0303 	and.w	r3, r3, #3
 8006412:	4a84      	ldr	r2, [pc, #528]	; (8006624 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006414:	fa22 f303 	lsr.w	r3, r2, r3
 8006418:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	ee07 3a90 	vmov	s15, r3
 8006420:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	ee07 3a90 	vmov	s15, r3
 800642a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800642e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006432:	4b7b      	ldr	r3, [pc, #492]	; (8006620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800643a:	ee07 3a90 	vmov	s15, r3
 800643e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006442:	ed97 6a03 	vldr	s12, [r7, #12]
 8006446:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006628 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800644a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800644e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800645a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800645e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006462:	e087      	b.n	8006574 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	ee07 3a90 	vmov	s15, r3
 800646a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800646e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800662c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006476:	4b6a      	ldr	r3, [pc, #424]	; (8006620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800647e:	ee07 3a90 	vmov	s15, r3
 8006482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006486:	ed97 6a03 	vldr	s12, [r7, #12]
 800648a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006628 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800648e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800649a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800649e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064a6:	e065      	b.n	8006574 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	ee07 3a90 	vmov	s15, r3
 80064ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006630 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80064b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ba:	4b59      	ldr	r3, [pc, #356]	; (8006620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064c2:	ee07 3a90 	vmov	s15, r3
 80064c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80064ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006628 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064ea:	e043      	b.n	8006574 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	ee07 3a90 	vmov	s15, r3
 80064f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006634 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80064fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064fe:	4b48      	ldr	r3, [pc, #288]	; (8006620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006506:	ee07 3a90 	vmov	s15, r3
 800650a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800650e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006512:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006628 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800651a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800651e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800652a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800652e:	e021      	b.n	8006574 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	ee07 3a90 	vmov	s15, r3
 8006536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800653a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006630 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800653e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006542:	4b37      	ldr	r3, [pc, #220]	; (8006620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800654a:	ee07 3a90 	vmov	s15, r3
 800654e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006552:	ed97 6a03 	vldr	s12, [r7, #12]
 8006556:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006628 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800655a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800655e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800656a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800656e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006572:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006574:	4b2a      	ldr	r3, [pc, #168]	; (8006620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006578:	0a5b      	lsrs	r3, r3, #9
 800657a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800657e:	ee07 3a90 	vmov	s15, r3
 8006582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006586:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800658a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800658e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800659a:	ee17 2a90 	vmov	r2, s15
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80065a2:	4b1f      	ldr	r3, [pc, #124]	; (8006620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a6:	0c1b      	lsrs	r3, r3, #16
 80065a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065ac:	ee07 3a90 	vmov	s15, r3
 80065b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80065c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065c8:	ee17 2a90 	vmov	r2, s15
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80065d0:	4b13      	ldr	r3, [pc, #76]	; (8006620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d4:	0e1b      	lsrs	r3, r3, #24
 80065d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065da:	ee07 3a90 	vmov	s15, r3
 80065de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80065ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065f6:	ee17 2a90 	vmov	r2, s15
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80065fe:	e008      	b.n	8006612 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	609a      	str	r2, [r3, #8]
}
 8006612:	bf00      	nop
 8006614:	3724      	adds	r7, #36	; 0x24
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	58024400 	.word	0x58024400
 8006624:	03d09000 	.word	0x03d09000
 8006628:	46000000 	.word	0x46000000
 800662c:	4c742400 	.word	0x4c742400
 8006630:	4a742400 	.word	0x4a742400
 8006634:	4af42400 	.word	0x4af42400

08006638 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006642:	2300      	movs	r3, #0
 8006644:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006646:	4b53      	ldr	r3, [pc, #332]	; (8006794 <RCCEx_PLL2_Config+0x15c>)
 8006648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664a:	f003 0303 	and.w	r3, r3, #3
 800664e:	2b03      	cmp	r3, #3
 8006650:	d101      	bne.n	8006656 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e099      	b.n	800678a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006656:	4b4f      	ldr	r3, [pc, #316]	; (8006794 <RCCEx_PLL2_Config+0x15c>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a4e      	ldr	r2, [pc, #312]	; (8006794 <RCCEx_PLL2_Config+0x15c>)
 800665c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006660:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006662:	f7fb fd63 	bl	800212c <HAL_GetTick>
 8006666:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006668:	e008      	b.n	800667c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800666a:	f7fb fd5f 	bl	800212c <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	2b02      	cmp	r3, #2
 8006676:	d901      	bls.n	800667c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e086      	b.n	800678a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800667c:	4b45      	ldr	r3, [pc, #276]	; (8006794 <RCCEx_PLL2_Config+0x15c>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1f0      	bne.n	800666a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006688:	4b42      	ldr	r3, [pc, #264]	; (8006794 <RCCEx_PLL2_Config+0x15c>)
 800668a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	031b      	lsls	r3, r3, #12
 8006696:	493f      	ldr	r1, [pc, #252]	; (8006794 <RCCEx_PLL2_Config+0x15c>)
 8006698:	4313      	orrs	r3, r2
 800669a:	628b      	str	r3, [r1, #40]	; 0x28
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	3b01      	subs	r3, #1
 80066a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	3b01      	subs	r3, #1
 80066ac:	025b      	lsls	r3, r3, #9
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	431a      	orrs	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	3b01      	subs	r3, #1
 80066b8:	041b      	lsls	r3, r3, #16
 80066ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80066be:	431a      	orrs	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	3b01      	subs	r3, #1
 80066c6:	061b      	lsls	r3, r3, #24
 80066c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80066cc:	4931      	ldr	r1, [pc, #196]	; (8006794 <RCCEx_PLL2_Config+0x15c>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80066d2:	4b30      	ldr	r3, [pc, #192]	; (8006794 <RCCEx_PLL2_Config+0x15c>)
 80066d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	492d      	ldr	r1, [pc, #180]	; (8006794 <RCCEx_PLL2_Config+0x15c>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80066e4:	4b2b      	ldr	r3, [pc, #172]	; (8006794 <RCCEx_PLL2_Config+0x15c>)
 80066e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e8:	f023 0220 	bic.w	r2, r3, #32
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	4928      	ldr	r1, [pc, #160]	; (8006794 <RCCEx_PLL2_Config+0x15c>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80066f6:	4b27      	ldr	r3, [pc, #156]	; (8006794 <RCCEx_PLL2_Config+0x15c>)
 80066f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fa:	4a26      	ldr	r2, [pc, #152]	; (8006794 <RCCEx_PLL2_Config+0x15c>)
 80066fc:	f023 0310 	bic.w	r3, r3, #16
 8006700:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006702:	4b24      	ldr	r3, [pc, #144]	; (8006794 <RCCEx_PLL2_Config+0x15c>)
 8006704:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006706:	4b24      	ldr	r3, [pc, #144]	; (8006798 <RCCEx_PLL2_Config+0x160>)
 8006708:	4013      	ands	r3, r2
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	69d2      	ldr	r2, [r2, #28]
 800670e:	00d2      	lsls	r2, r2, #3
 8006710:	4920      	ldr	r1, [pc, #128]	; (8006794 <RCCEx_PLL2_Config+0x15c>)
 8006712:	4313      	orrs	r3, r2
 8006714:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006716:	4b1f      	ldr	r3, [pc, #124]	; (8006794 <RCCEx_PLL2_Config+0x15c>)
 8006718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671a:	4a1e      	ldr	r2, [pc, #120]	; (8006794 <RCCEx_PLL2_Config+0x15c>)
 800671c:	f043 0310 	orr.w	r3, r3, #16
 8006720:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d106      	bne.n	8006736 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006728:	4b1a      	ldr	r3, [pc, #104]	; (8006794 <RCCEx_PLL2_Config+0x15c>)
 800672a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672c:	4a19      	ldr	r2, [pc, #100]	; (8006794 <RCCEx_PLL2_Config+0x15c>)
 800672e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006732:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006734:	e00f      	b.n	8006756 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d106      	bne.n	800674a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800673c:	4b15      	ldr	r3, [pc, #84]	; (8006794 <RCCEx_PLL2_Config+0x15c>)
 800673e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006740:	4a14      	ldr	r2, [pc, #80]	; (8006794 <RCCEx_PLL2_Config+0x15c>)
 8006742:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006746:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006748:	e005      	b.n	8006756 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800674a:	4b12      	ldr	r3, [pc, #72]	; (8006794 <RCCEx_PLL2_Config+0x15c>)
 800674c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674e:	4a11      	ldr	r2, [pc, #68]	; (8006794 <RCCEx_PLL2_Config+0x15c>)
 8006750:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006754:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006756:	4b0f      	ldr	r3, [pc, #60]	; (8006794 <RCCEx_PLL2_Config+0x15c>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a0e      	ldr	r2, [pc, #56]	; (8006794 <RCCEx_PLL2_Config+0x15c>)
 800675c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006760:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006762:	f7fb fce3 	bl	800212c <HAL_GetTick>
 8006766:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006768:	e008      	b.n	800677c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800676a:	f7fb fcdf 	bl	800212c <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	2b02      	cmp	r3, #2
 8006776:	d901      	bls.n	800677c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e006      	b.n	800678a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800677c:	4b05      	ldr	r3, [pc, #20]	; (8006794 <RCCEx_PLL2_Config+0x15c>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d0f0      	beq.n	800676a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006788:	7bfb      	ldrb	r3, [r7, #15]
}
 800678a:	4618      	mov	r0, r3
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	58024400 	.word	0x58024400
 8006798:	ffff0007 	.word	0xffff0007

0800679c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067a6:	2300      	movs	r3, #0
 80067a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80067aa:	4b53      	ldr	r3, [pc, #332]	; (80068f8 <RCCEx_PLL3_Config+0x15c>)
 80067ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ae:	f003 0303 	and.w	r3, r3, #3
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	d101      	bne.n	80067ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e099      	b.n	80068ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80067ba:	4b4f      	ldr	r3, [pc, #316]	; (80068f8 <RCCEx_PLL3_Config+0x15c>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a4e      	ldr	r2, [pc, #312]	; (80068f8 <RCCEx_PLL3_Config+0x15c>)
 80067c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067c6:	f7fb fcb1 	bl	800212c <HAL_GetTick>
 80067ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80067cc:	e008      	b.n	80067e0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80067ce:	f7fb fcad 	bl	800212c <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d901      	bls.n	80067e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e086      	b.n	80068ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80067e0:	4b45      	ldr	r3, [pc, #276]	; (80068f8 <RCCEx_PLL3_Config+0x15c>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1f0      	bne.n	80067ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80067ec:	4b42      	ldr	r3, [pc, #264]	; (80068f8 <RCCEx_PLL3_Config+0x15c>)
 80067ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	051b      	lsls	r3, r3, #20
 80067fa:	493f      	ldr	r1, [pc, #252]	; (80068f8 <RCCEx_PLL3_Config+0x15c>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	628b      	str	r3, [r1, #40]	; 0x28
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	3b01      	subs	r3, #1
 8006806:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	3b01      	subs	r3, #1
 8006810:	025b      	lsls	r3, r3, #9
 8006812:	b29b      	uxth	r3, r3
 8006814:	431a      	orrs	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	3b01      	subs	r3, #1
 800681c:	041b      	lsls	r3, r3, #16
 800681e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006822:	431a      	orrs	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	3b01      	subs	r3, #1
 800682a:	061b      	lsls	r3, r3, #24
 800682c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006830:	4931      	ldr	r1, [pc, #196]	; (80068f8 <RCCEx_PLL3_Config+0x15c>)
 8006832:	4313      	orrs	r3, r2
 8006834:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006836:	4b30      	ldr	r3, [pc, #192]	; (80068f8 <RCCEx_PLL3_Config+0x15c>)
 8006838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	492d      	ldr	r1, [pc, #180]	; (80068f8 <RCCEx_PLL3_Config+0x15c>)
 8006844:	4313      	orrs	r3, r2
 8006846:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006848:	4b2b      	ldr	r3, [pc, #172]	; (80068f8 <RCCEx_PLL3_Config+0x15c>)
 800684a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	4928      	ldr	r1, [pc, #160]	; (80068f8 <RCCEx_PLL3_Config+0x15c>)
 8006856:	4313      	orrs	r3, r2
 8006858:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800685a:	4b27      	ldr	r3, [pc, #156]	; (80068f8 <RCCEx_PLL3_Config+0x15c>)
 800685c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685e:	4a26      	ldr	r2, [pc, #152]	; (80068f8 <RCCEx_PLL3_Config+0x15c>)
 8006860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006864:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006866:	4b24      	ldr	r3, [pc, #144]	; (80068f8 <RCCEx_PLL3_Config+0x15c>)
 8006868:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800686a:	4b24      	ldr	r3, [pc, #144]	; (80068fc <RCCEx_PLL3_Config+0x160>)
 800686c:	4013      	ands	r3, r2
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	69d2      	ldr	r2, [r2, #28]
 8006872:	00d2      	lsls	r2, r2, #3
 8006874:	4920      	ldr	r1, [pc, #128]	; (80068f8 <RCCEx_PLL3_Config+0x15c>)
 8006876:	4313      	orrs	r3, r2
 8006878:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800687a:	4b1f      	ldr	r3, [pc, #124]	; (80068f8 <RCCEx_PLL3_Config+0x15c>)
 800687c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687e:	4a1e      	ldr	r2, [pc, #120]	; (80068f8 <RCCEx_PLL3_Config+0x15c>)
 8006880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006884:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d106      	bne.n	800689a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800688c:	4b1a      	ldr	r3, [pc, #104]	; (80068f8 <RCCEx_PLL3_Config+0x15c>)
 800688e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006890:	4a19      	ldr	r2, [pc, #100]	; (80068f8 <RCCEx_PLL3_Config+0x15c>)
 8006892:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006896:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006898:	e00f      	b.n	80068ba <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d106      	bne.n	80068ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80068a0:	4b15      	ldr	r3, [pc, #84]	; (80068f8 <RCCEx_PLL3_Config+0x15c>)
 80068a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a4:	4a14      	ldr	r2, [pc, #80]	; (80068f8 <RCCEx_PLL3_Config+0x15c>)
 80068a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80068aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80068ac:	e005      	b.n	80068ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80068ae:	4b12      	ldr	r3, [pc, #72]	; (80068f8 <RCCEx_PLL3_Config+0x15c>)
 80068b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b2:	4a11      	ldr	r2, [pc, #68]	; (80068f8 <RCCEx_PLL3_Config+0x15c>)
 80068b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80068ba:	4b0f      	ldr	r3, [pc, #60]	; (80068f8 <RCCEx_PLL3_Config+0x15c>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a0e      	ldr	r2, [pc, #56]	; (80068f8 <RCCEx_PLL3_Config+0x15c>)
 80068c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068c6:	f7fb fc31 	bl	800212c <HAL_GetTick>
 80068ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80068cc:	e008      	b.n	80068e0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80068ce:	f7fb fc2d 	bl	800212c <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d901      	bls.n	80068e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e006      	b.n	80068ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80068e0:	4b05      	ldr	r3, [pc, #20]	; (80068f8 <RCCEx_PLL3_Config+0x15c>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d0f0      	beq.n	80068ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80068ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	58024400 	.word	0x58024400
 80068fc:	ffff0007 	.word	0xffff0007

08006900 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d101      	bne.n	8006912 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e049      	b.n	80069a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d106      	bne.n	800692c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7fb f8d2 	bl	8001ad0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2202      	movs	r2, #2
 8006930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	3304      	adds	r3, #4
 800693c:	4619      	mov	r1, r3
 800693e:	4610      	mov	r0, r2
 8006940:	f000 fe10 	bl	8007564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
	...

080069b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d109      	bne.n	80069d4 <HAL_TIM_PWM_Start+0x24>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	bf14      	ite	ne
 80069cc:	2301      	movne	r3, #1
 80069ce:	2300      	moveq	r3, #0
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	e03c      	b.n	8006a4e <HAL_TIM_PWM_Start+0x9e>
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	2b04      	cmp	r3, #4
 80069d8:	d109      	bne.n	80069ee <HAL_TIM_PWM_Start+0x3e>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	bf14      	ite	ne
 80069e6:	2301      	movne	r3, #1
 80069e8:	2300      	moveq	r3, #0
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	e02f      	b.n	8006a4e <HAL_TIM_PWM_Start+0x9e>
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	d109      	bne.n	8006a08 <HAL_TIM_PWM_Start+0x58>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	bf14      	ite	ne
 8006a00:	2301      	movne	r3, #1
 8006a02:	2300      	moveq	r3, #0
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	e022      	b.n	8006a4e <HAL_TIM_PWM_Start+0x9e>
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	2b0c      	cmp	r3, #12
 8006a0c:	d109      	bne.n	8006a22 <HAL_TIM_PWM_Start+0x72>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	bf14      	ite	ne
 8006a1a:	2301      	movne	r3, #1
 8006a1c:	2300      	moveq	r3, #0
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	e015      	b.n	8006a4e <HAL_TIM_PWM_Start+0x9e>
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2b10      	cmp	r3, #16
 8006a26:	d109      	bne.n	8006a3c <HAL_TIM_PWM_Start+0x8c>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	bf14      	ite	ne
 8006a34:	2301      	movne	r3, #1
 8006a36:	2300      	moveq	r3, #0
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	e008      	b.n	8006a4e <HAL_TIM_PWM_Start+0x9e>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	bf14      	ite	ne
 8006a48:	2301      	movne	r3, #1
 8006a4a:	2300      	moveq	r3, #0
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e09c      	b.n	8006b90 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d104      	bne.n	8006a66 <HAL_TIM_PWM_Start+0xb6>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a64:	e023      	b.n	8006aae <HAL_TIM_PWM_Start+0xfe>
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	2b04      	cmp	r3, #4
 8006a6a:	d104      	bne.n	8006a76 <HAL_TIM_PWM_Start+0xc6>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a74:	e01b      	b.n	8006aae <HAL_TIM_PWM_Start+0xfe>
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2b08      	cmp	r3, #8
 8006a7a:	d104      	bne.n	8006a86 <HAL_TIM_PWM_Start+0xd6>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a84:	e013      	b.n	8006aae <HAL_TIM_PWM_Start+0xfe>
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	2b0c      	cmp	r3, #12
 8006a8a:	d104      	bne.n	8006a96 <HAL_TIM_PWM_Start+0xe6>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2202      	movs	r2, #2
 8006a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a94:	e00b      	b.n	8006aae <HAL_TIM_PWM_Start+0xfe>
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b10      	cmp	r3, #16
 8006a9a:	d104      	bne.n	8006aa6 <HAL_TIM_PWM_Start+0xf6>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006aa4:	e003      	b.n	8006aae <HAL_TIM_PWM_Start+0xfe>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2202      	movs	r2, #2
 8006aaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	6839      	ldr	r1, [r7, #0]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f001 f8bc 	bl	8007c34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a35      	ldr	r2, [pc, #212]	; (8006b98 <HAL_TIM_PWM_Start+0x1e8>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d013      	beq.n	8006aee <HAL_TIM_PWM_Start+0x13e>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a34      	ldr	r2, [pc, #208]	; (8006b9c <HAL_TIM_PWM_Start+0x1ec>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d00e      	beq.n	8006aee <HAL_TIM_PWM_Start+0x13e>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a32      	ldr	r2, [pc, #200]	; (8006ba0 <HAL_TIM_PWM_Start+0x1f0>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d009      	beq.n	8006aee <HAL_TIM_PWM_Start+0x13e>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a31      	ldr	r2, [pc, #196]	; (8006ba4 <HAL_TIM_PWM_Start+0x1f4>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d004      	beq.n	8006aee <HAL_TIM_PWM_Start+0x13e>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a2f      	ldr	r2, [pc, #188]	; (8006ba8 <HAL_TIM_PWM_Start+0x1f8>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d101      	bne.n	8006af2 <HAL_TIM_PWM_Start+0x142>
 8006aee:	2301      	movs	r3, #1
 8006af0:	e000      	b.n	8006af4 <HAL_TIM_PWM_Start+0x144>
 8006af2:	2300      	movs	r3, #0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d007      	beq.n	8006b08 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b06:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a22      	ldr	r2, [pc, #136]	; (8006b98 <HAL_TIM_PWM_Start+0x1e8>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d01d      	beq.n	8006b4e <HAL_TIM_PWM_Start+0x19e>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b1a:	d018      	beq.n	8006b4e <HAL_TIM_PWM_Start+0x19e>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a22      	ldr	r2, [pc, #136]	; (8006bac <HAL_TIM_PWM_Start+0x1fc>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d013      	beq.n	8006b4e <HAL_TIM_PWM_Start+0x19e>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a21      	ldr	r2, [pc, #132]	; (8006bb0 <HAL_TIM_PWM_Start+0x200>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d00e      	beq.n	8006b4e <HAL_TIM_PWM_Start+0x19e>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a1f      	ldr	r2, [pc, #124]	; (8006bb4 <HAL_TIM_PWM_Start+0x204>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d009      	beq.n	8006b4e <HAL_TIM_PWM_Start+0x19e>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a17      	ldr	r2, [pc, #92]	; (8006b9c <HAL_TIM_PWM_Start+0x1ec>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d004      	beq.n	8006b4e <HAL_TIM_PWM_Start+0x19e>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a1b      	ldr	r2, [pc, #108]	; (8006bb8 <HAL_TIM_PWM_Start+0x208>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d115      	bne.n	8006b7a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689a      	ldr	r2, [r3, #8]
 8006b54:	4b19      	ldr	r3, [pc, #100]	; (8006bbc <HAL_TIM_PWM_Start+0x20c>)
 8006b56:	4013      	ands	r3, r2
 8006b58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2b06      	cmp	r3, #6
 8006b5e:	d015      	beq.n	8006b8c <HAL_TIM_PWM_Start+0x1dc>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b66:	d011      	beq.n	8006b8c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f042 0201 	orr.w	r2, r2, #1
 8006b76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b78:	e008      	b.n	8006b8c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f042 0201 	orr.w	r2, r2, #1
 8006b88:	601a      	str	r2, [r3, #0]
 8006b8a:	e000      	b.n	8006b8e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	40010000 	.word	0x40010000
 8006b9c:	40010400 	.word	0x40010400
 8006ba0:	40014000 	.word	0x40014000
 8006ba4:	40014400 	.word	0x40014400
 8006ba8:	40014800 	.word	0x40014800
 8006bac:	40000400 	.word	0x40000400
 8006bb0:	40000800 	.word	0x40000800
 8006bb4:	40000c00 	.word	0x40000c00
 8006bb8:	40001800 	.word	0x40001800
 8006bbc:	00010007 	.word	0x00010007

08006bc0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f001 f82e 	bl	8007c34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a3e      	ldr	r2, [pc, #248]	; (8006cd8 <HAL_TIM_PWM_Stop+0x118>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d013      	beq.n	8006c0a <HAL_TIM_PWM_Stop+0x4a>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a3d      	ldr	r2, [pc, #244]	; (8006cdc <HAL_TIM_PWM_Stop+0x11c>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d00e      	beq.n	8006c0a <HAL_TIM_PWM_Stop+0x4a>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a3b      	ldr	r2, [pc, #236]	; (8006ce0 <HAL_TIM_PWM_Stop+0x120>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d009      	beq.n	8006c0a <HAL_TIM_PWM_Stop+0x4a>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a3a      	ldr	r2, [pc, #232]	; (8006ce4 <HAL_TIM_PWM_Stop+0x124>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d004      	beq.n	8006c0a <HAL_TIM_PWM_Stop+0x4a>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a38      	ldr	r2, [pc, #224]	; (8006ce8 <HAL_TIM_PWM_Stop+0x128>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d101      	bne.n	8006c0e <HAL_TIM_PWM_Stop+0x4e>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e000      	b.n	8006c10 <HAL_TIM_PWM_Stop+0x50>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d017      	beq.n	8006c44 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6a1a      	ldr	r2, [r3, #32]
 8006c1a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c1e:	4013      	ands	r3, r2
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d10f      	bne.n	8006c44 <HAL_TIM_PWM_Stop+0x84>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6a1a      	ldr	r2, [r3, #32]
 8006c2a:	f240 4344 	movw	r3, #1092	; 0x444
 8006c2e:	4013      	ands	r3, r2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d107      	bne.n	8006c44 <HAL_TIM_PWM_Stop+0x84>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c42:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	6a1a      	ldr	r2, [r3, #32]
 8006c4a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c4e:	4013      	ands	r3, r2
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10f      	bne.n	8006c74 <HAL_TIM_PWM_Stop+0xb4>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6a1a      	ldr	r2, [r3, #32]
 8006c5a:	f240 4344 	movw	r3, #1092	; 0x444
 8006c5e:	4013      	ands	r3, r2
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d107      	bne.n	8006c74 <HAL_TIM_PWM_Stop+0xb4>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f022 0201 	bic.w	r2, r2, #1
 8006c72:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d104      	bne.n	8006c84 <HAL_TIM_PWM_Stop+0xc4>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c82:	e023      	b.n	8006ccc <HAL_TIM_PWM_Stop+0x10c>
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	2b04      	cmp	r3, #4
 8006c88:	d104      	bne.n	8006c94 <HAL_TIM_PWM_Stop+0xd4>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c92:	e01b      	b.n	8006ccc <HAL_TIM_PWM_Stop+0x10c>
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	2b08      	cmp	r3, #8
 8006c98:	d104      	bne.n	8006ca4 <HAL_TIM_PWM_Stop+0xe4>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ca2:	e013      	b.n	8006ccc <HAL_TIM_PWM_Stop+0x10c>
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	2b0c      	cmp	r3, #12
 8006ca8:	d104      	bne.n	8006cb4 <HAL_TIM_PWM_Stop+0xf4>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006cb2:	e00b      	b.n	8006ccc <HAL_TIM_PWM_Stop+0x10c>
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	2b10      	cmp	r3, #16
 8006cb8:	d104      	bne.n	8006cc4 <HAL_TIM_PWM_Stop+0x104>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cc2:	e003      	b.n	8006ccc <HAL_TIM_PWM_Stop+0x10c>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3708      	adds	r7, #8
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	40010000 	.word	0x40010000
 8006cdc:	40010400 	.word	0x40010400
 8006ce0:	40014000 	.word	0x40014000
 8006ce4:	40014400 	.word	0x40014400
 8006ce8:	40014800 	.word	0x40014800

08006cec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b086      	sub	sp, #24
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d101      	bne.n	8006d00 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e08f      	b.n	8006e20 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d106      	bne.n	8006d1a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f7fa fe6b 	bl	80019f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2202      	movs	r2, #2
 8006d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6899      	ldr	r1, [r3, #8]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	4b3e      	ldr	r3, [pc, #248]	; (8006e28 <HAL_TIM_Encoder_Init+0x13c>)
 8006d2e:	400b      	ands	r3, r1
 8006d30:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	3304      	adds	r3, #4
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	f000 fc11 	bl	8007564 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	6a1b      	ldr	r3, [r3, #32]
 8006d58:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	4b31      	ldr	r3, [pc, #196]	; (8006e2c <HAL_TIM_Encoder_Init+0x140>)
 8006d68:	4013      	ands	r3, r2
 8006d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	689a      	ldr	r2, [r3, #8]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	021b      	lsls	r3, r3, #8
 8006d76:	4313      	orrs	r3, r2
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	4b2b      	ldr	r3, [pc, #172]	; (8006e30 <HAL_TIM_Encoder_Init+0x144>)
 8006d82:	4013      	ands	r3, r2
 8006d84:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006d86:	693a      	ldr	r2, [r7, #16]
 8006d88:	4b2a      	ldr	r3, [pc, #168]	; (8006e34 <HAL_TIM_Encoder_Init+0x148>)
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	68da      	ldr	r2, [r3, #12]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	021b      	lsls	r3, r3, #8
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	011a      	lsls	r2, r3, #4
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	031b      	lsls	r3, r3, #12
 8006dac:	4313      	orrs	r3, r2
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006dba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006dc2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	685a      	ldr	r2, [r3, #4]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	695b      	ldr	r3, [r3, #20]
 8006dcc:	011b      	lsls	r3, r3, #4
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3718      	adds	r7, #24
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	fffebff8 	.word	0xfffebff8
 8006e2c:	fffffcfc 	.word	0xfffffcfc
 8006e30:	fffff3f3 	.word	0xfffff3f3
 8006e34:	ffff0f0f 	.word	0xffff0f0f

08006e38 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e48:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e50:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e58:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e60:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d110      	bne.n	8006e8a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d102      	bne.n	8006e74 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e6e:	7b7b      	ldrb	r3, [r7, #13]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d001      	beq.n	8006e78 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e069      	b.n	8006f4c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2202      	movs	r2, #2
 8006e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e88:	e031      	b.n	8006eee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2b04      	cmp	r3, #4
 8006e8e:	d110      	bne.n	8006eb2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e90:	7bbb      	ldrb	r3, [r7, #14]
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d102      	bne.n	8006e9c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e96:	7b3b      	ldrb	r3, [r7, #12]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d001      	beq.n	8006ea0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e055      	b.n	8006f4c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2202      	movs	r2, #2
 8006eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006eb0:	e01d      	b.n	8006eee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006eb2:	7bfb      	ldrb	r3, [r7, #15]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d108      	bne.n	8006eca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006eb8:	7bbb      	ldrb	r3, [r7, #14]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d105      	bne.n	8006eca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ebe:	7b7b      	ldrb	r3, [r7, #13]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d102      	bne.n	8006eca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ec4:	7b3b      	ldrb	r3, [r7, #12]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d001      	beq.n	8006ece <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e03e      	b.n	8006f4c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2202      	movs	r2, #2
 8006ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2202      	movs	r2, #2
 8006eda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2202      	movs	r2, #2
 8006ee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2202      	movs	r2, #2
 8006eea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d003      	beq.n	8006efc <HAL_TIM_Encoder_Start+0xc4>
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	2b04      	cmp	r3, #4
 8006ef8:	d008      	beq.n	8006f0c <HAL_TIM_Encoder_Start+0xd4>
 8006efa:	e00f      	b.n	8006f1c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2201      	movs	r2, #1
 8006f02:	2100      	movs	r1, #0
 8006f04:	4618      	mov	r0, r3
 8006f06:	f000 fe95 	bl	8007c34 <TIM_CCxChannelCmd>
      break;
 8006f0a:	e016      	b.n	8006f3a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2201      	movs	r2, #1
 8006f12:	2104      	movs	r1, #4
 8006f14:	4618      	mov	r0, r3
 8006f16:	f000 fe8d 	bl	8007c34 <TIM_CCxChannelCmd>
      break;
 8006f1a:	e00e      	b.n	8006f3a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2201      	movs	r2, #1
 8006f22:	2100      	movs	r1, #0
 8006f24:	4618      	mov	r0, r3
 8006f26:	f000 fe85 	bl	8007c34 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	2104      	movs	r1, #4
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 fe7e 	bl	8007c34 <TIM_CCxChannelCmd>
      break;
 8006f38:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f042 0201 	orr.w	r2, r2, #1
 8006f48:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <HAL_TIM_Encoder_Stop+0x18>
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	2b04      	cmp	r3, #4
 8006f68:	d008      	beq.n	8006f7c <HAL_TIM_Encoder_Stop+0x28>
 8006f6a:	e00f      	b.n	8006f8c <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2200      	movs	r2, #0
 8006f72:	2100      	movs	r1, #0
 8006f74:	4618      	mov	r0, r3
 8006f76:	f000 fe5d 	bl	8007c34 <TIM_CCxChannelCmd>
      break;
 8006f7a:	e016      	b.n	8006faa <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2200      	movs	r2, #0
 8006f82:	2104      	movs	r1, #4
 8006f84:	4618      	mov	r0, r3
 8006f86:	f000 fe55 	bl	8007c34 <TIM_CCxChannelCmd>
      break;
 8006f8a:	e00e      	b.n	8006faa <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2200      	movs	r2, #0
 8006f92:	2100      	movs	r1, #0
 8006f94:	4618      	mov	r0, r3
 8006f96:	f000 fe4d 	bl	8007c34 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	2104      	movs	r1, #4
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 fe46 	bl	8007c34 <TIM_CCxChannelCmd>
      break;
 8006fa8:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	6a1a      	ldr	r2, [r3, #32]
 8006fb0:	f241 1311 	movw	r3, #4369	; 0x1111
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10f      	bne.n	8006fda <HAL_TIM_Encoder_Stop+0x86>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6a1a      	ldr	r2, [r3, #32]
 8006fc0:	f240 4344 	movw	r3, #1092	; 0x444
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d107      	bne.n	8006fda <HAL_TIM_Encoder_Stop+0x86>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f022 0201 	bic.w	r2, r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d002      	beq.n	8006fe6 <HAL_TIM_Encoder_Stop+0x92>
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	2b04      	cmp	r3, #4
 8006fe4:	d148      	bne.n	8007078 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d104      	bne.n	8006ff6 <HAL_TIM_Encoder_Stop+0xa2>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ff4:	e023      	b.n	800703e <HAL_TIM_Encoder_Stop+0xea>
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2b04      	cmp	r3, #4
 8006ffa:	d104      	bne.n	8007006 <HAL_TIM_Encoder_Stop+0xb2>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007004:	e01b      	b.n	800703e <HAL_TIM_Encoder_Stop+0xea>
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	2b08      	cmp	r3, #8
 800700a:	d104      	bne.n	8007016 <HAL_TIM_Encoder_Stop+0xc2>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007014:	e013      	b.n	800703e <HAL_TIM_Encoder_Stop+0xea>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2b0c      	cmp	r3, #12
 800701a:	d104      	bne.n	8007026 <HAL_TIM_Encoder_Stop+0xd2>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007024:	e00b      	b.n	800703e <HAL_TIM_Encoder_Stop+0xea>
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	2b10      	cmp	r3, #16
 800702a:	d104      	bne.n	8007036 <HAL_TIM_Encoder_Stop+0xe2>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007034:	e003      	b.n	800703e <HAL_TIM_Encoder_Stop+0xea>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d104      	bne.n	800704e <HAL_TIM_Encoder_Stop+0xfa>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800704c:	e024      	b.n	8007098 <HAL_TIM_Encoder_Stop+0x144>
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	2b04      	cmp	r3, #4
 8007052:	d104      	bne.n	800705e <HAL_TIM_Encoder_Stop+0x10a>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800705c:	e01c      	b.n	8007098 <HAL_TIM_Encoder_Stop+0x144>
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	2b08      	cmp	r3, #8
 8007062:	d104      	bne.n	800706e <HAL_TIM_Encoder_Stop+0x11a>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800706c:	e014      	b.n	8007098 <HAL_TIM_Encoder_Stop+0x144>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8007076:	e00f      	b.n	8007098 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return HAL_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3708      	adds	r7, #8
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b082      	sub	sp, #8
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	f003 0302 	and.w	r3, r3, #2
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d122      	bne.n	80070fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	f003 0302 	and.w	r3, r3, #2
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d11b      	bne.n	80070fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f06f 0202 	mvn.w	r2, #2
 80070ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	f003 0303 	and.w	r3, r3, #3
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d003      	beq.n	80070ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fa1f 	bl	8007528 <HAL_TIM_IC_CaptureCallback>
 80070ea:	e005      	b.n	80070f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fa11 	bl	8007514 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 fa22 	bl	800753c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	f003 0304 	and.w	r3, r3, #4
 8007108:	2b04      	cmp	r3, #4
 800710a:	d122      	bne.n	8007152 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	f003 0304 	and.w	r3, r3, #4
 8007116:	2b04      	cmp	r3, #4
 8007118:	d11b      	bne.n	8007152 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f06f 0204 	mvn.w	r2, #4
 8007122:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2202      	movs	r2, #2
 8007128:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	699b      	ldr	r3, [r3, #24]
 8007130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007134:	2b00      	cmp	r3, #0
 8007136:	d003      	beq.n	8007140 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f9f5 	bl	8007528 <HAL_TIM_IC_CaptureCallback>
 800713e:	e005      	b.n	800714c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 f9e7 	bl	8007514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f9f8 	bl	800753c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	f003 0308 	and.w	r3, r3, #8
 800715c:	2b08      	cmp	r3, #8
 800715e:	d122      	bne.n	80071a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	f003 0308 	and.w	r3, r3, #8
 800716a:	2b08      	cmp	r3, #8
 800716c:	d11b      	bne.n	80071a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f06f 0208 	mvn.w	r2, #8
 8007176:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2204      	movs	r2, #4
 800717c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	69db      	ldr	r3, [r3, #28]
 8007184:	f003 0303 	and.w	r3, r3, #3
 8007188:	2b00      	cmp	r3, #0
 800718a:	d003      	beq.n	8007194 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 f9cb 	bl	8007528 <HAL_TIM_IC_CaptureCallback>
 8007192:	e005      	b.n	80071a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 f9bd 	bl	8007514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f9ce 	bl	800753c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	f003 0310 	and.w	r3, r3, #16
 80071b0:	2b10      	cmp	r3, #16
 80071b2:	d122      	bne.n	80071fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	f003 0310 	and.w	r3, r3, #16
 80071be:	2b10      	cmp	r3, #16
 80071c0:	d11b      	bne.n	80071fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f06f 0210 	mvn.w	r2, #16
 80071ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2208      	movs	r2, #8
 80071d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	69db      	ldr	r3, [r3, #28]
 80071d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d003      	beq.n	80071e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f9a1 	bl	8007528 <HAL_TIM_IC_CaptureCallback>
 80071e6:	e005      	b.n	80071f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f993 	bl	8007514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f9a4 	bl	800753c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	2b01      	cmp	r3, #1
 8007206:	d10e      	bne.n	8007226 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	2b01      	cmp	r3, #1
 8007214:	d107      	bne.n	8007226 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f06f 0201 	mvn.w	r2, #1
 800721e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f96d 	bl	8007500 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007230:	2b80      	cmp	r3, #128	; 0x80
 8007232:	d10e      	bne.n	8007252 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800723e:	2b80      	cmp	r3, #128	; 0x80
 8007240:	d107      	bne.n	8007252 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800724a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fda9 	bl	8007da4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800725c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007260:	d10e      	bne.n	8007280 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800726c:	2b80      	cmp	r3, #128	; 0x80
 800726e:	d107      	bne.n	8007280 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 fd9c 	bl	8007db8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800728a:	2b40      	cmp	r3, #64	; 0x40
 800728c:	d10e      	bne.n	80072ac <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007298:	2b40      	cmp	r3, #64	; 0x40
 800729a:	d107      	bne.n	80072ac <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 f952 	bl	8007550 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	f003 0320 	and.w	r3, r3, #32
 80072b6:	2b20      	cmp	r3, #32
 80072b8:	d10e      	bne.n	80072d8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	f003 0320 	and.w	r3, r3, #32
 80072c4:	2b20      	cmp	r3, #32
 80072c6:	d107      	bne.n	80072d8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f06f 0220 	mvn.w	r2, #32
 80072d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fd5c 	bl	8007d90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072d8:	bf00      	nop
 80072da:	3708      	adds	r7, #8
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d101      	bne.n	80072fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80072f6:	2302      	movs	r3, #2
 80072f8:	e0fd      	b.n	80074f6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b14      	cmp	r3, #20
 8007306:	f200 80f0 	bhi.w	80074ea <HAL_TIM_PWM_ConfigChannel+0x20a>
 800730a:	a201      	add	r2, pc, #4	; (adr r2, 8007310 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800730c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007310:	08007365 	.word	0x08007365
 8007314:	080074eb 	.word	0x080074eb
 8007318:	080074eb 	.word	0x080074eb
 800731c:	080074eb 	.word	0x080074eb
 8007320:	080073a5 	.word	0x080073a5
 8007324:	080074eb 	.word	0x080074eb
 8007328:	080074eb 	.word	0x080074eb
 800732c:	080074eb 	.word	0x080074eb
 8007330:	080073e7 	.word	0x080073e7
 8007334:	080074eb 	.word	0x080074eb
 8007338:	080074eb 	.word	0x080074eb
 800733c:	080074eb 	.word	0x080074eb
 8007340:	08007427 	.word	0x08007427
 8007344:	080074eb 	.word	0x080074eb
 8007348:	080074eb 	.word	0x080074eb
 800734c:	080074eb 	.word	0x080074eb
 8007350:	08007469 	.word	0x08007469
 8007354:	080074eb 	.word	0x080074eb
 8007358:	080074eb 	.word	0x080074eb
 800735c:	080074eb 	.word	0x080074eb
 8007360:	080074a9 	.word	0x080074a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68b9      	ldr	r1, [r7, #8]
 800736a:	4618      	mov	r0, r3
 800736c:	f000 f994 	bl	8007698 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	699a      	ldr	r2, [r3, #24]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f042 0208 	orr.w	r2, r2, #8
 800737e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	699a      	ldr	r2, [r3, #24]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f022 0204 	bic.w	r2, r2, #4
 800738e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6999      	ldr	r1, [r3, #24]
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	691a      	ldr	r2, [r3, #16]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	430a      	orrs	r2, r1
 80073a0:	619a      	str	r2, [r3, #24]
      break;
 80073a2:	e0a3      	b.n	80074ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68b9      	ldr	r1, [r7, #8]
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 fa04 	bl	80077b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	699a      	ldr	r2, [r3, #24]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	699a      	ldr	r2, [r3, #24]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6999      	ldr	r1, [r3, #24]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	021a      	lsls	r2, r3, #8
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	430a      	orrs	r2, r1
 80073e2:	619a      	str	r2, [r3, #24]
      break;
 80073e4:	e082      	b.n	80074ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68b9      	ldr	r1, [r7, #8]
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 fa6d 	bl	80078cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	69da      	ldr	r2, [r3, #28]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f042 0208 	orr.w	r2, r2, #8
 8007400:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	69da      	ldr	r2, [r3, #28]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f022 0204 	bic.w	r2, r2, #4
 8007410:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	69d9      	ldr	r1, [r3, #28]
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	691a      	ldr	r2, [r3, #16]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	430a      	orrs	r2, r1
 8007422:	61da      	str	r2, [r3, #28]
      break;
 8007424:	e062      	b.n	80074ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68b9      	ldr	r1, [r7, #8]
 800742c:	4618      	mov	r0, r3
 800742e:	f000 fad3 	bl	80079d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	69da      	ldr	r2, [r3, #28]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007440:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	69da      	ldr	r2, [r3, #28]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007450:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	69d9      	ldr	r1, [r3, #28]
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	021a      	lsls	r2, r3, #8
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	430a      	orrs	r2, r1
 8007464:	61da      	str	r2, [r3, #28]
      break;
 8007466:	e041      	b.n	80074ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68b9      	ldr	r1, [r7, #8]
 800746e:	4618      	mov	r0, r3
 8007470:	f000 fb1a 	bl	8007aa8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f042 0208 	orr.w	r2, r2, #8
 8007482:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f022 0204 	bic.w	r2, r2, #4
 8007492:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	691a      	ldr	r2, [r3, #16]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	430a      	orrs	r2, r1
 80074a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80074a6:	e021      	b.n	80074ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68b9      	ldr	r1, [r7, #8]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 fb5c 	bl	8007b6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	021a      	lsls	r2, r3, #8
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	430a      	orrs	r2, r1
 80074e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80074e8:	e000      	b.n	80074ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80074ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop

08007500 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a40      	ldr	r2, [pc, #256]	; (8007678 <TIM_Base_SetConfig+0x114>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d013      	beq.n	80075a4 <TIM_Base_SetConfig+0x40>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007582:	d00f      	beq.n	80075a4 <TIM_Base_SetConfig+0x40>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a3d      	ldr	r2, [pc, #244]	; (800767c <TIM_Base_SetConfig+0x118>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d00b      	beq.n	80075a4 <TIM_Base_SetConfig+0x40>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a3c      	ldr	r2, [pc, #240]	; (8007680 <TIM_Base_SetConfig+0x11c>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d007      	beq.n	80075a4 <TIM_Base_SetConfig+0x40>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a3b      	ldr	r2, [pc, #236]	; (8007684 <TIM_Base_SetConfig+0x120>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d003      	beq.n	80075a4 <TIM_Base_SetConfig+0x40>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a3a      	ldr	r2, [pc, #232]	; (8007688 <TIM_Base_SetConfig+0x124>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d108      	bne.n	80075b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a2f      	ldr	r2, [pc, #188]	; (8007678 <TIM_Base_SetConfig+0x114>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d01f      	beq.n	80075fe <TIM_Base_SetConfig+0x9a>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075c4:	d01b      	beq.n	80075fe <TIM_Base_SetConfig+0x9a>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a2c      	ldr	r2, [pc, #176]	; (800767c <TIM_Base_SetConfig+0x118>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d017      	beq.n	80075fe <TIM_Base_SetConfig+0x9a>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a2b      	ldr	r2, [pc, #172]	; (8007680 <TIM_Base_SetConfig+0x11c>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d013      	beq.n	80075fe <TIM_Base_SetConfig+0x9a>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a2a      	ldr	r2, [pc, #168]	; (8007684 <TIM_Base_SetConfig+0x120>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d00f      	beq.n	80075fe <TIM_Base_SetConfig+0x9a>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a29      	ldr	r2, [pc, #164]	; (8007688 <TIM_Base_SetConfig+0x124>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d00b      	beq.n	80075fe <TIM_Base_SetConfig+0x9a>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a28      	ldr	r2, [pc, #160]	; (800768c <TIM_Base_SetConfig+0x128>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d007      	beq.n	80075fe <TIM_Base_SetConfig+0x9a>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a27      	ldr	r2, [pc, #156]	; (8007690 <TIM_Base_SetConfig+0x12c>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d003      	beq.n	80075fe <TIM_Base_SetConfig+0x9a>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a26      	ldr	r2, [pc, #152]	; (8007694 <TIM_Base_SetConfig+0x130>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d108      	bne.n	8007610 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	4313      	orrs	r3, r2
 800760e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	4313      	orrs	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	689a      	ldr	r2, [r3, #8]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a10      	ldr	r2, [pc, #64]	; (8007678 <TIM_Base_SetConfig+0x114>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d00f      	beq.n	800765c <TIM_Base_SetConfig+0xf8>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a12      	ldr	r2, [pc, #72]	; (8007688 <TIM_Base_SetConfig+0x124>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d00b      	beq.n	800765c <TIM_Base_SetConfig+0xf8>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a11      	ldr	r2, [pc, #68]	; (800768c <TIM_Base_SetConfig+0x128>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d007      	beq.n	800765c <TIM_Base_SetConfig+0xf8>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a10      	ldr	r2, [pc, #64]	; (8007690 <TIM_Base_SetConfig+0x12c>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d003      	beq.n	800765c <TIM_Base_SetConfig+0xf8>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a0f      	ldr	r2, [pc, #60]	; (8007694 <TIM_Base_SetConfig+0x130>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d103      	bne.n	8007664 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	691a      	ldr	r2, [r3, #16]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	615a      	str	r2, [r3, #20]
}
 800766a:	bf00      	nop
 800766c:	3714      	adds	r7, #20
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	40010000 	.word	0x40010000
 800767c:	40000400 	.word	0x40000400
 8007680:	40000800 	.word	0x40000800
 8007684:	40000c00 	.word	0x40000c00
 8007688:	40010400 	.word	0x40010400
 800768c:	40014000 	.word	0x40014000
 8007690:	40014400 	.word	0x40014400
 8007694:	40014800 	.word	0x40014800

08007698 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007698:	b480      	push	{r7}
 800769a:	b087      	sub	sp, #28
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a1b      	ldr	r3, [r3, #32]
 80076a6:	f023 0201 	bic.w	r2, r3, #1
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	4b37      	ldr	r3, [pc, #220]	; (80077a0 <TIM_OC1_SetConfig+0x108>)
 80076c4:	4013      	ands	r3, r2
 80076c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f023 0303 	bic.w	r3, r3, #3
 80076ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	f023 0302 	bic.w	r3, r3, #2
 80076e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	697a      	ldr	r2, [r7, #20]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a2d      	ldr	r2, [pc, #180]	; (80077a4 <TIM_OC1_SetConfig+0x10c>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d00f      	beq.n	8007714 <TIM_OC1_SetConfig+0x7c>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a2c      	ldr	r2, [pc, #176]	; (80077a8 <TIM_OC1_SetConfig+0x110>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d00b      	beq.n	8007714 <TIM_OC1_SetConfig+0x7c>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a2b      	ldr	r2, [pc, #172]	; (80077ac <TIM_OC1_SetConfig+0x114>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d007      	beq.n	8007714 <TIM_OC1_SetConfig+0x7c>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a2a      	ldr	r2, [pc, #168]	; (80077b0 <TIM_OC1_SetConfig+0x118>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d003      	beq.n	8007714 <TIM_OC1_SetConfig+0x7c>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a29      	ldr	r2, [pc, #164]	; (80077b4 <TIM_OC1_SetConfig+0x11c>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d10c      	bne.n	800772e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	f023 0308 	bic.w	r3, r3, #8
 800771a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	697a      	ldr	r2, [r7, #20]
 8007722:	4313      	orrs	r3, r2
 8007724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	f023 0304 	bic.w	r3, r3, #4
 800772c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a1c      	ldr	r2, [pc, #112]	; (80077a4 <TIM_OC1_SetConfig+0x10c>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d00f      	beq.n	8007756 <TIM_OC1_SetConfig+0xbe>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a1b      	ldr	r2, [pc, #108]	; (80077a8 <TIM_OC1_SetConfig+0x110>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d00b      	beq.n	8007756 <TIM_OC1_SetConfig+0xbe>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a1a      	ldr	r2, [pc, #104]	; (80077ac <TIM_OC1_SetConfig+0x114>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d007      	beq.n	8007756 <TIM_OC1_SetConfig+0xbe>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a19      	ldr	r2, [pc, #100]	; (80077b0 <TIM_OC1_SetConfig+0x118>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d003      	beq.n	8007756 <TIM_OC1_SetConfig+0xbe>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a18      	ldr	r2, [pc, #96]	; (80077b4 <TIM_OC1_SetConfig+0x11c>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d111      	bne.n	800777a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800775c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	4313      	orrs	r3, r2
 800776e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	699b      	ldr	r3, [r3, #24]
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	4313      	orrs	r3, r2
 8007778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	693a      	ldr	r2, [r7, #16]
 800777e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	685a      	ldr	r2, [r3, #4]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	697a      	ldr	r2, [r7, #20]
 8007792:	621a      	str	r2, [r3, #32]
}
 8007794:	bf00      	nop
 8007796:	371c      	adds	r7, #28
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr
 80077a0:	fffeff8f 	.word	0xfffeff8f
 80077a4:	40010000 	.word	0x40010000
 80077a8:	40010400 	.word	0x40010400
 80077ac:	40014000 	.word	0x40014000
 80077b0:	40014400 	.word	0x40014400
 80077b4:	40014800 	.word	0x40014800

080077b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b087      	sub	sp, #28
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a1b      	ldr	r3, [r3, #32]
 80077c6:	f023 0210 	bic.w	r2, r3, #16
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a1b      	ldr	r3, [r3, #32]
 80077d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	4b34      	ldr	r3, [pc, #208]	; (80078b4 <TIM_OC2_SetConfig+0xfc>)
 80077e4:	4013      	ands	r3, r2
 80077e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	021b      	lsls	r3, r3, #8
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	f023 0320 	bic.w	r3, r3, #32
 8007802:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	011b      	lsls	r3, r3, #4
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	4313      	orrs	r3, r2
 800780e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a29      	ldr	r2, [pc, #164]	; (80078b8 <TIM_OC2_SetConfig+0x100>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d003      	beq.n	8007820 <TIM_OC2_SetConfig+0x68>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a28      	ldr	r2, [pc, #160]	; (80078bc <TIM_OC2_SetConfig+0x104>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d10d      	bne.n	800783c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	011b      	lsls	r3, r3, #4
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	4313      	orrs	r3, r2
 8007832:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800783a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a1e      	ldr	r2, [pc, #120]	; (80078b8 <TIM_OC2_SetConfig+0x100>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d00f      	beq.n	8007864 <TIM_OC2_SetConfig+0xac>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a1d      	ldr	r2, [pc, #116]	; (80078bc <TIM_OC2_SetConfig+0x104>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d00b      	beq.n	8007864 <TIM_OC2_SetConfig+0xac>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a1c      	ldr	r2, [pc, #112]	; (80078c0 <TIM_OC2_SetConfig+0x108>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d007      	beq.n	8007864 <TIM_OC2_SetConfig+0xac>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a1b      	ldr	r2, [pc, #108]	; (80078c4 <TIM_OC2_SetConfig+0x10c>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d003      	beq.n	8007864 <TIM_OC2_SetConfig+0xac>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a1a      	ldr	r2, [pc, #104]	; (80078c8 <TIM_OC2_SetConfig+0x110>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d113      	bne.n	800788c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800786a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007872:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	695b      	ldr	r3, [r3, #20]
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	4313      	orrs	r3, r2
 800787e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	693a      	ldr	r2, [r7, #16]
 8007888:	4313      	orrs	r3, r2
 800788a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	621a      	str	r2, [r3, #32]
}
 80078a6:	bf00      	nop
 80078a8:	371c      	adds	r7, #28
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	feff8fff 	.word	0xfeff8fff
 80078b8:	40010000 	.word	0x40010000
 80078bc:	40010400 	.word	0x40010400
 80078c0:	40014000 	.word	0x40014000
 80078c4:	40014400 	.word	0x40014400
 80078c8:	40014800 	.word	0x40014800

080078cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b087      	sub	sp, #28
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f023 0303 	bic.w	r3, r3, #3
 8007902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	4313      	orrs	r3, r2
 800790c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007914:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	021b      	lsls	r3, r3, #8
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	4313      	orrs	r3, r2
 8007920:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a27      	ldr	r2, [pc, #156]	; (80079c4 <TIM_OC3_SetConfig+0xf8>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d003      	beq.n	8007932 <TIM_OC3_SetConfig+0x66>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a26      	ldr	r2, [pc, #152]	; (80079c8 <TIM_OC3_SetConfig+0xfc>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d10d      	bne.n	800794e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007938:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	021b      	lsls	r3, r3, #8
 8007940:	697a      	ldr	r2, [r7, #20]
 8007942:	4313      	orrs	r3, r2
 8007944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800794c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a1c      	ldr	r2, [pc, #112]	; (80079c4 <TIM_OC3_SetConfig+0xf8>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d00f      	beq.n	8007976 <TIM_OC3_SetConfig+0xaa>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a1b      	ldr	r2, [pc, #108]	; (80079c8 <TIM_OC3_SetConfig+0xfc>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d00b      	beq.n	8007976 <TIM_OC3_SetConfig+0xaa>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a1a      	ldr	r2, [pc, #104]	; (80079cc <TIM_OC3_SetConfig+0x100>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d007      	beq.n	8007976 <TIM_OC3_SetConfig+0xaa>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a19      	ldr	r2, [pc, #100]	; (80079d0 <TIM_OC3_SetConfig+0x104>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d003      	beq.n	8007976 <TIM_OC3_SetConfig+0xaa>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a18      	ldr	r2, [pc, #96]	; (80079d4 <TIM_OC3_SetConfig+0x108>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d113      	bne.n	800799e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800797c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007984:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	011b      	lsls	r3, r3, #4
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	4313      	orrs	r3, r2
 8007990:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	011b      	lsls	r3, r3, #4
 8007998:	693a      	ldr	r2, [r7, #16]
 800799a:	4313      	orrs	r3, r2
 800799c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	693a      	ldr	r2, [r7, #16]
 80079a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	685a      	ldr	r2, [r3, #4]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	697a      	ldr	r2, [r7, #20]
 80079b6:	621a      	str	r2, [r3, #32]
}
 80079b8:	bf00      	nop
 80079ba:	371c      	adds	r7, #28
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr
 80079c4:	40010000 	.word	0x40010000
 80079c8:	40010400 	.word	0x40010400
 80079cc:	40014000 	.word	0x40014000
 80079d0:	40014400 	.word	0x40014400
 80079d4:	40014800 	.word	0x40014800

080079d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a1b      	ldr	r3, [r3, #32]
 80079f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	69db      	ldr	r3, [r3, #28]
 80079fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	021b      	lsls	r3, r3, #8
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	031b      	lsls	r3, r3, #12
 8007a2a:	693a      	ldr	r2, [r7, #16]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a18      	ldr	r2, [pc, #96]	; (8007a94 <TIM_OC4_SetConfig+0xbc>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d00f      	beq.n	8007a58 <TIM_OC4_SetConfig+0x80>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a17      	ldr	r2, [pc, #92]	; (8007a98 <TIM_OC4_SetConfig+0xc0>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d00b      	beq.n	8007a58 <TIM_OC4_SetConfig+0x80>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a16      	ldr	r2, [pc, #88]	; (8007a9c <TIM_OC4_SetConfig+0xc4>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d007      	beq.n	8007a58 <TIM_OC4_SetConfig+0x80>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a15      	ldr	r2, [pc, #84]	; (8007aa0 <TIM_OC4_SetConfig+0xc8>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d003      	beq.n	8007a58 <TIM_OC4_SetConfig+0x80>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a14      	ldr	r2, [pc, #80]	; (8007aa4 <TIM_OC4_SetConfig+0xcc>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d109      	bne.n	8007a6c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	695b      	ldr	r3, [r3, #20]
 8007a64:	019b      	lsls	r3, r3, #6
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	693a      	ldr	r2, [r7, #16]
 8007a84:	621a      	str	r2, [r3, #32]
}
 8007a86:	bf00      	nop
 8007a88:	371c      	adds	r7, #28
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	40010000 	.word	0x40010000
 8007a98:	40010400 	.word	0x40010400
 8007a9c:	40014000 	.word	0x40014000
 8007aa0:	40014400 	.word	0x40014400
 8007aa4:	40014800 	.word	0x40014800

08007aa8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b087      	sub	sp, #28
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
 8007ab6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007ae8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	041b      	lsls	r3, r3, #16
 8007af0:	693a      	ldr	r2, [r7, #16]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a17      	ldr	r2, [pc, #92]	; (8007b58 <TIM_OC5_SetConfig+0xb0>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d00f      	beq.n	8007b1e <TIM_OC5_SetConfig+0x76>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a16      	ldr	r2, [pc, #88]	; (8007b5c <TIM_OC5_SetConfig+0xb4>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d00b      	beq.n	8007b1e <TIM_OC5_SetConfig+0x76>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a15      	ldr	r2, [pc, #84]	; (8007b60 <TIM_OC5_SetConfig+0xb8>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d007      	beq.n	8007b1e <TIM_OC5_SetConfig+0x76>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a14      	ldr	r2, [pc, #80]	; (8007b64 <TIM_OC5_SetConfig+0xbc>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d003      	beq.n	8007b1e <TIM_OC5_SetConfig+0x76>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a13      	ldr	r2, [pc, #76]	; (8007b68 <TIM_OC5_SetConfig+0xc0>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d109      	bne.n	8007b32 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	021b      	lsls	r3, r3, #8
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	697a      	ldr	r2, [r7, #20]
 8007b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	685a      	ldr	r2, [r3, #4]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	621a      	str	r2, [r3, #32]
}
 8007b4c:	bf00      	nop
 8007b4e:	371c      	adds	r7, #28
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr
 8007b58:	40010000 	.word	0x40010000
 8007b5c:	40010400 	.word	0x40010400
 8007b60:	40014000 	.word	0x40014000
 8007b64:	40014400 	.word	0x40014400
 8007b68:	40014800 	.word	0x40014800

08007b6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	021b      	lsls	r3, r3, #8
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007bae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	051b      	lsls	r3, r3, #20
 8007bb6:	693a      	ldr	r2, [r7, #16]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a18      	ldr	r2, [pc, #96]	; (8007c20 <TIM_OC6_SetConfig+0xb4>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d00f      	beq.n	8007be4 <TIM_OC6_SetConfig+0x78>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a17      	ldr	r2, [pc, #92]	; (8007c24 <TIM_OC6_SetConfig+0xb8>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d00b      	beq.n	8007be4 <TIM_OC6_SetConfig+0x78>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a16      	ldr	r2, [pc, #88]	; (8007c28 <TIM_OC6_SetConfig+0xbc>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d007      	beq.n	8007be4 <TIM_OC6_SetConfig+0x78>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a15      	ldr	r2, [pc, #84]	; (8007c2c <TIM_OC6_SetConfig+0xc0>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d003      	beq.n	8007be4 <TIM_OC6_SetConfig+0x78>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a14      	ldr	r2, [pc, #80]	; (8007c30 <TIM_OC6_SetConfig+0xc4>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d109      	bne.n	8007bf8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007bea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	695b      	ldr	r3, [r3, #20]
 8007bf0:	029b      	lsls	r3, r3, #10
 8007bf2:	697a      	ldr	r2, [r7, #20]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	685a      	ldr	r2, [r3, #4]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	693a      	ldr	r2, [r7, #16]
 8007c10:	621a      	str	r2, [r3, #32]
}
 8007c12:	bf00      	nop
 8007c14:	371c      	adds	r7, #28
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	40010000 	.word	0x40010000
 8007c24:	40010400 	.word	0x40010400
 8007c28:	40014000 	.word	0x40014000
 8007c2c:	40014400 	.word	0x40014400
 8007c30:	40014800 	.word	0x40014800

08007c34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b087      	sub	sp, #28
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	f003 031f 	and.w	r3, r3, #31
 8007c46:	2201      	movs	r2, #1
 8007c48:	fa02 f303 	lsl.w	r3, r2, r3
 8007c4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6a1a      	ldr	r2, [r3, #32]
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	43db      	mvns	r3, r3
 8007c56:	401a      	ands	r2, r3
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6a1a      	ldr	r2, [r3, #32]
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	f003 031f 	and.w	r3, r3, #31
 8007c66:	6879      	ldr	r1, [r7, #4]
 8007c68:	fa01 f303 	lsl.w	r3, r1, r3
 8007c6c:	431a      	orrs	r2, r3
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	621a      	str	r2, [r3, #32]
}
 8007c72:	bf00      	nop
 8007c74:	371c      	adds	r7, #28
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
	...

08007c80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d101      	bne.n	8007c98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c94:	2302      	movs	r3, #2
 8007c96:	e068      	b.n	8007d6a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2202      	movs	r2, #2
 8007ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a2e      	ldr	r2, [pc, #184]	; (8007d78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d004      	beq.n	8007ccc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a2d      	ldr	r2, [pc, #180]	; (8007d7c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d108      	bne.n	8007cde <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007cd2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ce4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a1e      	ldr	r2, [pc, #120]	; (8007d78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d01d      	beq.n	8007d3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d0a:	d018      	beq.n	8007d3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a1b      	ldr	r2, [pc, #108]	; (8007d80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d013      	beq.n	8007d3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a1a      	ldr	r2, [pc, #104]	; (8007d84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d00e      	beq.n	8007d3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a18      	ldr	r2, [pc, #96]	; (8007d88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d009      	beq.n	8007d3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a13      	ldr	r2, [pc, #76]	; (8007d7c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d004      	beq.n	8007d3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a14      	ldr	r2, [pc, #80]	; (8007d8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d10c      	bne.n	8007d58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	68ba      	ldr	r2, [r7, #8]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68ba      	ldr	r2, [r7, #8]
 8007d56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3714      	adds	r7, #20
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	40010000 	.word	0x40010000
 8007d7c:	40010400 	.word	0x40010400
 8007d80:	40000400 	.word	0x40000400
 8007d84:	40000800 	.word	0x40000800
 8007d88:	40000c00 	.word	0x40000c00
 8007d8c:	40001800 	.word	0x40001800

08007d90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d98:	bf00      	nop
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d101      	bne.n	8007dde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e042      	b.n	8007e64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d106      	bne.n	8007df6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f7f9 feeb 	bl	8001bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2224      	movs	r2, #36	; 0x24
 8007dfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f022 0201 	bic.w	r2, r2, #1
 8007e0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fb9c 	bl	800854c <UART_SetConfig>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d101      	bne.n	8007e1e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e022      	b.n	8007e64 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d002      	beq.n	8007e2c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f001 f8f0 	bl	800900c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	685a      	ldr	r2, [r3, #4]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	689a      	ldr	r2, [r3, #8]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f042 0201 	orr.w	r2, r2, #1
 8007e5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f001 f977 	bl	8009150 <UART_CheckIdleState>
 8007e62:	4603      	mov	r3, r0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3708      	adds	r7, #8
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b08a      	sub	sp, #40	; 0x28
 8007e70:	af02      	add	r7, sp, #8
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	603b      	str	r3, [r7, #0]
 8007e78:	4613      	mov	r3, r2
 8007e7a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e82:	2b20      	cmp	r3, #32
 8007e84:	f040 8083 	bne.w	8007f8e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d002      	beq.n	8007e94 <HAL_UART_Transmit+0x28>
 8007e8e:	88fb      	ldrh	r3, [r7, #6]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d101      	bne.n	8007e98 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e07b      	b.n	8007f90 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d101      	bne.n	8007ea6 <HAL_UART_Transmit+0x3a>
 8007ea2:	2302      	movs	r3, #2
 8007ea4:	e074      	b.n	8007f90 <HAL_UART_Transmit+0x124>
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2221      	movs	r2, #33	; 0x21
 8007eba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ebe:	f7fa f935 	bl	800212c <HAL_GetTick>
 8007ec2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	88fa      	ldrh	r2, [r7, #6]
 8007ec8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	88fa      	ldrh	r2, [r7, #6]
 8007ed0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007edc:	d108      	bne.n	8007ef0 <HAL_UART_Transmit+0x84>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d104      	bne.n	8007ef0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	61bb      	str	r3, [r7, #24]
 8007eee:	e003      	b.n	8007ef8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007f00:	e02c      	b.n	8007f5c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	2180      	movs	r1, #128	; 0x80
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f001 f96a 	bl	80091e6 <UART_WaitOnFlagUntilTimeout>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d001      	beq.n	8007f1c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e039      	b.n	8007f90 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d10b      	bne.n	8007f3a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	881b      	ldrh	r3, [r3, #0]
 8007f26:	461a      	mov	r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f30:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	3302      	adds	r3, #2
 8007f36:	61bb      	str	r3, [r7, #24]
 8007f38:	e007      	b.n	8007f4a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	781a      	ldrb	r2, [r3, #0]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	3301      	adds	r3, #1
 8007f48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	3b01      	subs	r3, #1
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d1cc      	bne.n	8007f02 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	2140      	movs	r1, #64	; 0x40
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f001 f937 	bl	80091e6 <UART_WaitOnFlagUntilTimeout>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d001      	beq.n	8007f82 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	e006      	b.n	8007f90 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2220      	movs	r2, #32
 8007f86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	e000      	b.n	8007f90 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007f8e:	2302      	movs	r3, #2
  }
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3720      	adds	r7, #32
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b088      	sub	sp, #32
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	69db      	ldr	r3, [r3, #28]
 8007fa6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007fb8:	69fa      	ldr	r2, [r7, #28]
 8007fba:	f640 030f 	movw	r3, #2063	; 0x80f
 8007fbe:	4013      	ands	r3, r2
 8007fc0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d118      	bne.n	8007ffa <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	f003 0320 	and.w	r3, r3, #32
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d013      	beq.n	8007ffa <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	f003 0320 	and.w	r3, r3, #32
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d104      	bne.n	8007fe6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d009      	beq.n	8007ffa <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	f000 8282 	beq.w	80084f4 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	4798      	blx	r3
      }
      return;
 8007ff8:	e27c      	b.n	80084f4 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f000 80ef 	beq.w	80081e0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008002:	697a      	ldr	r2, [r7, #20]
 8008004:	4b73      	ldr	r3, [pc, #460]	; (80081d4 <HAL_UART_IRQHandler+0x23c>)
 8008006:	4013      	ands	r3, r2
 8008008:	2b00      	cmp	r3, #0
 800800a:	d105      	bne.n	8008018 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800800c:	69ba      	ldr	r2, [r7, #24]
 800800e:	4b72      	ldr	r3, [pc, #456]	; (80081d8 <HAL_UART_IRQHandler+0x240>)
 8008010:	4013      	ands	r3, r2
 8008012:	2b00      	cmp	r3, #0
 8008014:	f000 80e4 	beq.w	80081e0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	2b00      	cmp	r3, #0
 8008020:	d010      	beq.n	8008044 <HAL_UART_IRQHandler+0xac>
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00b      	beq.n	8008044 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2201      	movs	r2, #1
 8008032:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800803a:	f043 0201 	orr.w	r2, r3, #1
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	f003 0302 	and.w	r3, r3, #2
 800804a:	2b00      	cmp	r3, #0
 800804c:	d010      	beq.n	8008070 <HAL_UART_IRQHandler+0xd8>
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	f003 0301 	and.w	r3, r3, #1
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00b      	beq.n	8008070 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2202      	movs	r2, #2
 800805e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008066:	f043 0204 	orr.w	r2, r3, #4
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	f003 0304 	and.w	r3, r3, #4
 8008076:	2b00      	cmp	r3, #0
 8008078:	d010      	beq.n	800809c <HAL_UART_IRQHandler+0x104>
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	f003 0301 	and.w	r3, r3, #1
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00b      	beq.n	800809c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2204      	movs	r2, #4
 800808a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008092:	f043 0202 	orr.w	r2, r3, #2
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	f003 0308 	and.w	r3, r3, #8
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d015      	beq.n	80080d2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	f003 0320 	and.w	r3, r3, #32
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d104      	bne.n	80080ba <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80080b0:	697a      	ldr	r2, [r7, #20]
 80080b2:	4b48      	ldr	r3, [pc, #288]	; (80081d4 <HAL_UART_IRQHandler+0x23c>)
 80080b4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00b      	beq.n	80080d2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2208      	movs	r2, #8
 80080c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080c8:	f043 0208 	orr.w	r2, r3, #8
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d011      	beq.n	8008100 <HAL_UART_IRQHandler+0x168>
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00c      	beq.n	8008100 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080f6:	f043 0220 	orr.w	r2, r3, #32
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008106:	2b00      	cmp	r3, #0
 8008108:	f000 81f6 	beq.w	80084f8 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	f003 0320 	and.w	r3, r3, #32
 8008112:	2b00      	cmp	r3, #0
 8008114:	d011      	beq.n	800813a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	f003 0320 	and.w	r3, r3, #32
 800811c:	2b00      	cmp	r3, #0
 800811e:	d104      	bne.n	800812a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d007      	beq.n	800813a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800812e:	2b00      	cmp	r3, #0
 8008130:	d003      	beq.n	800813a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008140:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800814c:	2b40      	cmp	r3, #64	; 0x40
 800814e:	d004      	beq.n	800815a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008156:	2b00      	cmp	r3, #0
 8008158:	d031      	beq.n	80081be <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f001 f8c4 	bl	80092e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800816a:	2b40      	cmp	r3, #64	; 0x40
 800816c:	d123      	bne.n	80081b6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	689a      	ldr	r2, [r3, #8]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800817c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008182:	2b00      	cmp	r3, #0
 8008184:	d013      	beq.n	80081ae <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800818a:	4a14      	ldr	r2, [pc, #80]	; (80081dc <HAL_UART_IRQHandler+0x244>)
 800818c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008192:	4618      	mov	r0, r3
 8008194:	f7fa fc34 	bl	8002a00 <HAL_DMA_Abort_IT>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d017      	beq.n	80081ce <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80081a8:	4610      	mov	r0, r2
 80081aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081ac:	e00f      	b.n	80081ce <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 f9b6 	bl	8008520 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081b4:	e00b      	b.n	80081ce <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f9b2 	bl	8008520 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081bc:	e007      	b.n	80081ce <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f9ae 	bl	8008520 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80081cc:	e194      	b.n	80084f8 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081ce:	bf00      	nop
    return;
 80081d0:	e192      	b.n	80084f8 <HAL_UART_IRQHandler+0x560>
 80081d2:	bf00      	nop
 80081d4:	10000001 	.word	0x10000001
 80081d8:	04000120 	.word	0x04000120
 80081dc:	0800934d 	.word	0x0800934d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	f040 810f 	bne.w	8008408 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	f003 0310 	and.w	r3, r3, #16
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f000 8109 	beq.w	8008408 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	f003 0310 	and.w	r3, r3, #16
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f000 8103 	beq.w	8008408 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2210      	movs	r2, #16
 8008208:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008214:	2b40      	cmp	r3, #64	; 0x40
 8008216:	f040 80bb 	bne.w	8008390 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a96      	ldr	r2, [pc, #600]	; (800847c <HAL_UART_IRQHandler+0x4e4>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d059      	beq.n	80082da <HAL_UART_IRQHandler+0x342>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a94      	ldr	r2, [pc, #592]	; (8008480 <HAL_UART_IRQHandler+0x4e8>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d053      	beq.n	80082da <HAL_UART_IRQHandler+0x342>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a92      	ldr	r2, [pc, #584]	; (8008484 <HAL_UART_IRQHandler+0x4ec>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d04d      	beq.n	80082da <HAL_UART_IRQHandler+0x342>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a90      	ldr	r2, [pc, #576]	; (8008488 <HAL_UART_IRQHandler+0x4f0>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d047      	beq.n	80082da <HAL_UART_IRQHandler+0x342>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a8e      	ldr	r2, [pc, #568]	; (800848c <HAL_UART_IRQHandler+0x4f4>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d041      	beq.n	80082da <HAL_UART_IRQHandler+0x342>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a8c      	ldr	r2, [pc, #560]	; (8008490 <HAL_UART_IRQHandler+0x4f8>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d03b      	beq.n	80082da <HAL_UART_IRQHandler+0x342>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a8a      	ldr	r2, [pc, #552]	; (8008494 <HAL_UART_IRQHandler+0x4fc>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d035      	beq.n	80082da <HAL_UART_IRQHandler+0x342>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a88      	ldr	r2, [pc, #544]	; (8008498 <HAL_UART_IRQHandler+0x500>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d02f      	beq.n	80082da <HAL_UART_IRQHandler+0x342>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a86      	ldr	r2, [pc, #536]	; (800849c <HAL_UART_IRQHandler+0x504>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d029      	beq.n	80082da <HAL_UART_IRQHandler+0x342>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a84      	ldr	r2, [pc, #528]	; (80084a0 <HAL_UART_IRQHandler+0x508>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d023      	beq.n	80082da <HAL_UART_IRQHandler+0x342>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a82      	ldr	r2, [pc, #520]	; (80084a4 <HAL_UART_IRQHandler+0x50c>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d01d      	beq.n	80082da <HAL_UART_IRQHandler+0x342>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a80      	ldr	r2, [pc, #512]	; (80084a8 <HAL_UART_IRQHandler+0x510>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d017      	beq.n	80082da <HAL_UART_IRQHandler+0x342>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a7e      	ldr	r2, [pc, #504]	; (80084ac <HAL_UART_IRQHandler+0x514>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d011      	beq.n	80082da <HAL_UART_IRQHandler+0x342>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a7c      	ldr	r2, [pc, #496]	; (80084b0 <HAL_UART_IRQHandler+0x518>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d00b      	beq.n	80082da <HAL_UART_IRQHandler+0x342>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a7a      	ldr	r2, [pc, #488]	; (80084b4 <HAL_UART_IRQHandler+0x51c>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d005      	beq.n	80082da <HAL_UART_IRQHandler+0x342>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a78      	ldr	r2, [pc, #480]	; (80084b8 <HAL_UART_IRQHandler+0x520>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d105      	bne.n	80082e6 <HAL_UART_IRQHandler+0x34e>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	e004      	b.n	80082f0 <HAL_UART_IRQHandler+0x358>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80082f2:	893b      	ldrh	r3, [r7, #8]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f000 8101 	beq.w	80084fc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008300:	893a      	ldrh	r2, [r7, #8]
 8008302:	429a      	cmp	r2, r3
 8008304:	f080 80fa 	bcs.w	80084fc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	893a      	ldrh	r2, [r7, #8]
 800830c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008314:	69db      	ldr	r3, [r3, #28]
 8008316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800831a:	d02b      	beq.n	8008374 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800832a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	689a      	ldr	r2, [r3, #8]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f022 0201 	bic.w	r2, r2, #1
 800833a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	689a      	ldr	r2, [r3, #8]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800834a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2220      	movs	r2, #32
 8008350:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f022 0210 	bic.w	r2, r2, #16
 8008368:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800836e:	4618      	mov	r0, r3
 8008370:	f7fa f828 	bl	80023c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008380:	b29b      	uxth	r3, r3
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	b29b      	uxth	r3, r3
 8008386:	4619      	mov	r1, r3
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f8d3 	bl	8008534 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800838e:	e0b5      	b.n	80084fc <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800839c:	b29b      	uxth	r3, r3
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f000 80a8 	beq.w	8008500 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 80083b0:	897b      	ldrh	r3, [r7, #10]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f000 80a4 	beq.w	8008500 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80083c6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	6899      	ldr	r1, [r3, #8]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	4b3a      	ldr	r3, [pc, #232]	; (80084bc <HAL_UART_IRQHandler+0x524>)
 80083d4:	400b      	ands	r3, r1
 80083d6:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2220      	movs	r2, #32
 80083dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f022 0210 	bic.w	r2, r2, #16
 80083fa:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80083fc:	897b      	ldrh	r3, [r7, #10]
 80083fe:	4619      	mov	r1, r3
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 f897 	bl	8008534 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008406:	e07b      	b.n	8008500 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00d      	beq.n	800842e <HAL_UART_IRQHandler+0x496>
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008418:	2b00      	cmp	r3, #0
 800841a:	d008      	beq.n	800842e <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008424:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 ffc0 	bl	80093ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800842c:	e06b      	b.n	8008506 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008434:	2b00      	cmp	r3, #0
 8008436:	d012      	beq.n	800845e <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800843e:	2b00      	cmp	r3, #0
 8008440:	d104      	bne.n	800844c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008448:	2b00      	cmp	r3, #0
 800844a:	d008      	beq.n	800845e <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008450:	2b00      	cmp	r3, #0
 8008452:	d057      	beq.n	8008504 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	4798      	blx	r3
    }
    return;
 800845c:	e052      	b.n	8008504 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008464:	2b00      	cmp	r3, #0
 8008466:	d02b      	beq.n	80084c0 <HAL_UART_IRQHandler+0x528>
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800846e:	2b00      	cmp	r3, #0
 8008470:	d026      	beq.n	80084c0 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 ff80 	bl	8009378 <UART_EndTransmit_IT>
    return;
 8008478:	e045      	b.n	8008506 <HAL_UART_IRQHandler+0x56e>
 800847a:	bf00      	nop
 800847c:	40020010 	.word	0x40020010
 8008480:	40020028 	.word	0x40020028
 8008484:	40020040 	.word	0x40020040
 8008488:	40020058 	.word	0x40020058
 800848c:	40020070 	.word	0x40020070
 8008490:	40020088 	.word	0x40020088
 8008494:	400200a0 	.word	0x400200a0
 8008498:	400200b8 	.word	0x400200b8
 800849c:	40020410 	.word	0x40020410
 80084a0:	40020428 	.word	0x40020428
 80084a4:	40020440 	.word	0x40020440
 80084a8:	40020458 	.word	0x40020458
 80084ac:	40020470 	.word	0x40020470
 80084b0:	40020488 	.word	0x40020488
 80084b4:	400204a0 	.word	0x400204a0
 80084b8:	400204b8 	.word	0x400204b8
 80084bc:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d008      	beq.n	80084dc <HAL_UART_IRQHandler+0x544>
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d003      	beq.n	80084dc <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 ff7d 	bl	80093d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084da:	e014      	b.n	8008506 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00f      	beq.n	8008506 <HAL_UART_IRQHandler+0x56e>
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	da0c      	bge.n	8008506 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 ff67 	bl	80093c0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084f2:	e008      	b.n	8008506 <HAL_UART_IRQHandler+0x56e>
      return;
 80084f4:	bf00      	nop
 80084f6:	e006      	b.n	8008506 <HAL_UART_IRQHandler+0x56e>
    return;
 80084f8:	bf00      	nop
 80084fa:	e004      	b.n	8008506 <HAL_UART_IRQHandler+0x56e>
      return;
 80084fc:	bf00      	nop
 80084fe:	e002      	b.n	8008506 <HAL_UART_IRQHandler+0x56e>
      return;
 8008500:	bf00      	nop
 8008502:	e000      	b.n	8008506 <HAL_UART_IRQHandler+0x56e>
    return;
 8008504:	bf00      	nop
  }
}
 8008506:	3720      	adds	r7, #32
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008514:	bf00      	nop
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	460b      	mov	r3, r1
 800853e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008540:	bf00      	nop
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800854c:	b5b0      	push	{r4, r5, r7, lr}
 800854e:	b08e      	sub	sp, #56	; 0x38
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008554:	2300      	movs	r3, #0
 8008556:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	689a      	ldr	r2, [r3, #8]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	431a      	orrs	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	695b      	ldr	r3, [r3, #20]
 8008568:	431a      	orrs	r2, r3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	69db      	ldr	r3, [r3, #28]
 800856e:	4313      	orrs	r3, r2
 8008570:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	4bbf      	ldr	r3, [pc, #764]	; (8008878 <UART_SetConfig+0x32c>)
 800857a:	4013      	ands	r3, r2
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	6812      	ldr	r2, [r2, #0]
 8008580:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008582:	430b      	orrs	r3, r1
 8008584:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	68da      	ldr	r2, [r3, #12]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	430a      	orrs	r2, r1
 800859a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4ab5      	ldr	r2, [pc, #724]	; (800887c <UART_SetConfig+0x330>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d004      	beq.n	80085b6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6a1b      	ldr	r3, [r3, #32]
 80085b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085b2:	4313      	orrs	r3, r2
 80085b4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	689a      	ldr	r2, [r3, #8]
 80085bc:	4bb0      	ldr	r3, [pc, #704]	; (8008880 <UART_SetConfig+0x334>)
 80085be:	4013      	ands	r3, r2
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	6812      	ldr	r2, [r2, #0]
 80085c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80085c6:	430b      	orrs	r3, r1
 80085c8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d0:	f023 010f 	bic.w	r1, r3, #15
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	430a      	orrs	r2, r1
 80085de:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4aa7      	ldr	r2, [pc, #668]	; (8008884 <UART_SetConfig+0x338>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d176      	bne.n	80086d8 <UART_SetConfig+0x18c>
 80085ea:	4ba7      	ldr	r3, [pc, #668]	; (8008888 <UART_SetConfig+0x33c>)
 80085ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085f2:	2b28      	cmp	r3, #40	; 0x28
 80085f4:	d86c      	bhi.n	80086d0 <UART_SetConfig+0x184>
 80085f6:	a201      	add	r2, pc, #4	; (adr r2, 80085fc <UART_SetConfig+0xb0>)
 80085f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fc:	080086a1 	.word	0x080086a1
 8008600:	080086d1 	.word	0x080086d1
 8008604:	080086d1 	.word	0x080086d1
 8008608:	080086d1 	.word	0x080086d1
 800860c:	080086d1 	.word	0x080086d1
 8008610:	080086d1 	.word	0x080086d1
 8008614:	080086d1 	.word	0x080086d1
 8008618:	080086d1 	.word	0x080086d1
 800861c:	080086a9 	.word	0x080086a9
 8008620:	080086d1 	.word	0x080086d1
 8008624:	080086d1 	.word	0x080086d1
 8008628:	080086d1 	.word	0x080086d1
 800862c:	080086d1 	.word	0x080086d1
 8008630:	080086d1 	.word	0x080086d1
 8008634:	080086d1 	.word	0x080086d1
 8008638:	080086d1 	.word	0x080086d1
 800863c:	080086b1 	.word	0x080086b1
 8008640:	080086d1 	.word	0x080086d1
 8008644:	080086d1 	.word	0x080086d1
 8008648:	080086d1 	.word	0x080086d1
 800864c:	080086d1 	.word	0x080086d1
 8008650:	080086d1 	.word	0x080086d1
 8008654:	080086d1 	.word	0x080086d1
 8008658:	080086d1 	.word	0x080086d1
 800865c:	080086b9 	.word	0x080086b9
 8008660:	080086d1 	.word	0x080086d1
 8008664:	080086d1 	.word	0x080086d1
 8008668:	080086d1 	.word	0x080086d1
 800866c:	080086d1 	.word	0x080086d1
 8008670:	080086d1 	.word	0x080086d1
 8008674:	080086d1 	.word	0x080086d1
 8008678:	080086d1 	.word	0x080086d1
 800867c:	080086c1 	.word	0x080086c1
 8008680:	080086d1 	.word	0x080086d1
 8008684:	080086d1 	.word	0x080086d1
 8008688:	080086d1 	.word	0x080086d1
 800868c:	080086d1 	.word	0x080086d1
 8008690:	080086d1 	.word	0x080086d1
 8008694:	080086d1 	.word	0x080086d1
 8008698:	080086d1 	.word	0x080086d1
 800869c:	080086c9 	.word	0x080086c9
 80086a0:	2301      	movs	r3, #1
 80086a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086a6:	e222      	b.n	8008aee <UART_SetConfig+0x5a2>
 80086a8:	2304      	movs	r3, #4
 80086aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086ae:	e21e      	b.n	8008aee <UART_SetConfig+0x5a2>
 80086b0:	2308      	movs	r3, #8
 80086b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086b6:	e21a      	b.n	8008aee <UART_SetConfig+0x5a2>
 80086b8:	2310      	movs	r3, #16
 80086ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086be:	e216      	b.n	8008aee <UART_SetConfig+0x5a2>
 80086c0:	2320      	movs	r3, #32
 80086c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086c6:	e212      	b.n	8008aee <UART_SetConfig+0x5a2>
 80086c8:	2340      	movs	r3, #64	; 0x40
 80086ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086ce:	e20e      	b.n	8008aee <UART_SetConfig+0x5a2>
 80086d0:	2380      	movs	r3, #128	; 0x80
 80086d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086d6:	e20a      	b.n	8008aee <UART_SetConfig+0x5a2>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a6b      	ldr	r2, [pc, #428]	; (800888c <UART_SetConfig+0x340>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d130      	bne.n	8008744 <UART_SetConfig+0x1f8>
 80086e2:	4b69      	ldr	r3, [pc, #420]	; (8008888 <UART_SetConfig+0x33c>)
 80086e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086e6:	f003 0307 	and.w	r3, r3, #7
 80086ea:	2b05      	cmp	r3, #5
 80086ec:	d826      	bhi.n	800873c <UART_SetConfig+0x1f0>
 80086ee:	a201      	add	r2, pc, #4	; (adr r2, 80086f4 <UART_SetConfig+0x1a8>)
 80086f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f4:	0800870d 	.word	0x0800870d
 80086f8:	08008715 	.word	0x08008715
 80086fc:	0800871d 	.word	0x0800871d
 8008700:	08008725 	.word	0x08008725
 8008704:	0800872d 	.word	0x0800872d
 8008708:	08008735 	.word	0x08008735
 800870c:	2300      	movs	r3, #0
 800870e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008712:	e1ec      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008714:	2304      	movs	r3, #4
 8008716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800871a:	e1e8      	b.n	8008aee <UART_SetConfig+0x5a2>
 800871c:	2308      	movs	r3, #8
 800871e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008722:	e1e4      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008724:	2310      	movs	r3, #16
 8008726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800872a:	e1e0      	b.n	8008aee <UART_SetConfig+0x5a2>
 800872c:	2320      	movs	r3, #32
 800872e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008732:	e1dc      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008734:	2340      	movs	r3, #64	; 0x40
 8008736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800873a:	e1d8      	b.n	8008aee <UART_SetConfig+0x5a2>
 800873c:	2380      	movs	r3, #128	; 0x80
 800873e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008742:	e1d4      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a51      	ldr	r2, [pc, #324]	; (8008890 <UART_SetConfig+0x344>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d130      	bne.n	80087b0 <UART_SetConfig+0x264>
 800874e:	4b4e      	ldr	r3, [pc, #312]	; (8008888 <UART_SetConfig+0x33c>)
 8008750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008752:	f003 0307 	and.w	r3, r3, #7
 8008756:	2b05      	cmp	r3, #5
 8008758:	d826      	bhi.n	80087a8 <UART_SetConfig+0x25c>
 800875a:	a201      	add	r2, pc, #4	; (adr r2, 8008760 <UART_SetConfig+0x214>)
 800875c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008760:	08008779 	.word	0x08008779
 8008764:	08008781 	.word	0x08008781
 8008768:	08008789 	.word	0x08008789
 800876c:	08008791 	.word	0x08008791
 8008770:	08008799 	.word	0x08008799
 8008774:	080087a1 	.word	0x080087a1
 8008778:	2300      	movs	r3, #0
 800877a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800877e:	e1b6      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008780:	2304      	movs	r3, #4
 8008782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008786:	e1b2      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008788:	2308      	movs	r3, #8
 800878a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800878e:	e1ae      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008790:	2310      	movs	r3, #16
 8008792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008796:	e1aa      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008798:	2320      	movs	r3, #32
 800879a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800879e:	e1a6      	b.n	8008aee <UART_SetConfig+0x5a2>
 80087a0:	2340      	movs	r3, #64	; 0x40
 80087a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087a6:	e1a2      	b.n	8008aee <UART_SetConfig+0x5a2>
 80087a8:	2380      	movs	r3, #128	; 0x80
 80087aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087ae:	e19e      	b.n	8008aee <UART_SetConfig+0x5a2>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a37      	ldr	r2, [pc, #220]	; (8008894 <UART_SetConfig+0x348>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d130      	bne.n	800881c <UART_SetConfig+0x2d0>
 80087ba:	4b33      	ldr	r3, [pc, #204]	; (8008888 <UART_SetConfig+0x33c>)
 80087bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087be:	f003 0307 	and.w	r3, r3, #7
 80087c2:	2b05      	cmp	r3, #5
 80087c4:	d826      	bhi.n	8008814 <UART_SetConfig+0x2c8>
 80087c6:	a201      	add	r2, pc, #4	; (adr r2, 80087cc <UART_SetConfig+0x280>)
 80087c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087cc:	080087e5 	.word	0x080087e5
 80087d0:	080087ed 	.word	0x080087ed
 80087d4:	080087f5 	.word	0x080087f5
 80087d8:	080087fd 	.word	0x080087fd
 80087dc:	08008805 	.word	0x08008805
 80087e0:	0800880d 	.word	0x0800880d
 80087e4:	2300      	movs	r3, #0
 80087e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087ea:	e180      	b.n	8008aee <UART_SetConfig+0x5a2>
 80087ec:	2304      	movs	r3, #4
 80087ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087f2:	e17c      	b.n	8008aee <UART_SetConfig+0x5a2>
 80087f4:	2308      	movs	r3, #8
 80087f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087fa:	e178      	b.n	8008aee <UART_SetConfig+0x5a2>
 80087fc:	2310      	movs	r3, #16
 80087fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008802:	e174      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008804:	2320      	movs	r3, #32
 8008806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800880a:	e170      	b.n	8008aee <UART_SetConfig+0x5a2>
 800880c:	2340      	movs	r3, #64	; 0x40
 800880e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008812:	e16c      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008814:	2380      	movs	r3, #128	; 0x80
 8008816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800881a:	e168      	b.n	8008aee <UART_SetConfig+0x5a2>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a1d      	ldr	r2, [pc, #116]	; (8008898 <UART_SetConfig+0x34c>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d142      	bne.n	80088ac <UART_SetConfig+0x360>
 8008826:	4b18      	ldr	r3, [pc, #96]	; (8008888 <UART_SetConfig+0x33c>)
 8008828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800882a:	f003 0307 	and.w	r3, r3, #7
 800882e:	2b05      	cmp	r3, #5
 8008830:	d838      	bhi.n	80088a4 <UART_SetConfig+0x358>
 8008832:	a201      	add	r2, pc, #4	; (adr r2, 8008838 <UART_SetConfig+0x2ec>)
 8008834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008838:	08008851 	.word	0x08008851
 800883c:	08008859 	.word	0x08008859
 8008840:	08008861 	.word	0x08008861
 8008844:	08008869 	.word	0x08008869
 8008848:	08008871 	.word	0x08008871
 800884c:	0800889d 	.word	0x0800889d
 8008850:	2300      	movs	r3, #0
 8008852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008856:	e14a      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008858:	2304      	movs	r3, #4
 800885a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800885e:	e146      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008860:	2308      	movs	r3, #8
 8008862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008866:	e142      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008868:	2310      	movs	r3, #16
 800886a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800886e:	e13e      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008870:	2320      	movs	r3, #32
 8008872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008876:	e13a      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008878:	cfff69f3 	.word	0xcfff69f3
 800887c:	58000c00 	.word	0x58000c00
 8008880:	11fff4ff 	.word	0x11fff4ff
 8008884:	40011000 	.word	0x40011000
 8008888:	58024400 	.word	0x58024400
 800888c:	40004400 	.word	0x40004400
 8008890:	40004800 	.word	0x40004800
 8008894:	40004c00 	.word	0x40004c00
 8008898:	40005000 	.word	0x40005000
 800889c:	2340      	movs	r3, #64	; 0x40
 800889e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088a2:	e124      	b.n	8008aee <UART_SetConfig+0x5a2>
 80088a4:	2380      	movs	r3, #128	; 0x80
 80088a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088aa:	e120      	b.n	8008aee <UART_SetConfig+0x5a2>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4acc      	ldr	r2, [pc, #816]	; (8008be4 <UART_SetConfig+0x698>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d176      	bne.n	80089a4 <UART_SetConfig+0x458>
 80088b6:	4bcc      	ldr	r3, [pc, #816]	; (8008be8 <UART_SetConfig+0x69c>)
 80088b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088be:	2b28      	cmp	r3, #40	; 0x28
 80088c0:	d86c      	bhi.n	800899c <UART_SetConfig+0x450>
 80088c2:	a201      	add	r2, pc, #4	; (adr r2, 80088c8 <UART_SetConfig+0x37c>)
 80088c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c8:	0800896d 	.word	0x0800896d
 80088cc:	0800899d 	.word	0x0800899d
 80088d0:	0800899d 	.word	0x0800899d
 80088d4:	0800899d 	.word	0x0800899d
 80088d8:	0800899d 	.word	0x0800899d
 80088dc:	0800899d 	.word	0x0800899d
 80088e0:	0800899d 	.word	0x0800899d
 80088e4:	0800899d 	.word	0x0800899d
 80088e8:	08008975 	.word	0x08008975
 80088ec:	0800899d 	.word	0x0800899d
 80088f0:	0800899d 	.word	0x0800899d
 80088f4:	0800899d 	.word	0x0800899d
 80088f8:	0800899d 	.word	0x0800899d
 80088fc:	0800899d 	.word	0x0800899d
 8008900:	0800899d 	.word	0x0800899d
 8008904:	0800899d 	.word	0x0800899d
 8008908:	0800897d 	.word	0x0800897d
 800890c:	0800899d 	.word	0x0800899d
 8008910:	0800899d 	.word	0x0800899d
 8008914:	0800899d 	.word	0x0800899d
 8008918:	0800899d 	.word	0x0800899d
 800891c:	0800899d 	.word	0x0800899d
 8008920:	0800899d 	.word	0x0800899d
 8008924:	0800899d 	.word	0x0800899d
 8008928:	08008985 	.word	0x08008985
 800892c:	0800899d 	.word	0x0800899d
 8008930:	0800899d 	.word	0x0800899d
 8008934:	0800899d 	.word	0x0800899d
 8008938:	0800899d 	.word	0x0800899d
 800893c:	0800899d 	.word	0x0800899d
 8008940:	0800899d 	.word	0x0800899d
 8008944:	0800899d 	.word	0x0800899d
 8008948:	0800898d 	.word	0x0800898d
 800894c:	0800899d 	.word	0x0800899d
 8008950:	0800899d 	.word	0x0800899d
 8008954:	0800899d 	.word	0x0800899d
 8008958:	0800899d 	.word	0x0800899d
 800895c:	0800899d 	.word	0x0800899d
 8008960:	0800899d 	.word	0x0800899d
 8008964:	0800899d 	.word	0x0800899d
 8008968:	08008995 	.word	0x08008995
 800896c:	2301      	movs	r3, #1
 800896e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008972:	e0bc      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008974:	2304      	movs	r3, #4
 8008976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800897a:	e0b8      	b.n	8008aee <UART_SetConfig+0x5a2>
 800897c:	2308      	movs	r3, #8
 800897e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008982:	e0b4      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008984:	2310      	movs	r3, #16
 8008986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800898a:	e0b0      	b.n	8008aee <UART_SetConfig+0x5a2>
 800898c:	2320      	movs	r3, #32
 800898e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008992:	e0ac      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008994:	2340      	movs	r3, #64	; 0x40
 8008996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800899a:	e0a8      	b.n	8008aee <UART_SetConfig+0x5a2>
 800899c:	2380      	movs	r3, #128	; 0x80
 800899e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089a2:	e0a4      	b.n	8008aee <UART_SetConfig+0x5a2>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a90      	ldr	r2, [pc, #576]	; (8008bec <UART_SetConfig+0x6a0>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d130      	bne.n	8008a10 <UART_SetConfig+0x4c4>
 80089ae:	4b8e      	ldr	r3, [pc, #568]	; (8008be8 <UART_SetConfig+0x69c>)
 80089b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b2:	f003 0307 	and.w	r3, r3, #7
 80089b6:	2b05      	cmp	r3, #5
 80089b8:	d826      	bhi.n	8008a08 <UART_SetConfig+0x4bc>
 80089ba:	a201      	add	r2, pc, #4	; (adr r2, 80089c0 <UART_SetConfig+0x474>)
 80089bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c0:	080089d9 	.word	0x080089d9
 80089c4:	080089e1 	.word	0x080089e1
 80089c8:	080089e9 	.word	0x080089e9
 80089cc:	080089f1 	.word	0x080089f1
 80089d0:	080089f9 	.word	0x080089f9
 80089d4:	08008a01 	.word	0x08008a01
 80089d8:	2300      	movs	r3, #0
 80089da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089de:	e086      	b.n	8008aee <UART_SetConfig+0x5a2>
 80089e0:	2304      	movs	r3, #4
 80089e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089e6:	e082      	b.n	8008aee <UART_SetConfig+0x5a2>
 80089e8:	2308      	movs	r3, #8
 80089ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089ee:	e07e      	b.n	8008aee <UART_SetConfig+0x5a2>
 80089f0:	2310      	movs	r3, #16
 80089f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089f6:	e07a      	b.n	8008aee <UART_SetConfig+0x5a2>
 80089f8:	2320      	movs	r3, #32
 80089fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089fe:	e076      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008a00:	2340      	movs	r3, #64	; 0x40
 8008a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a06:	e072      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008a08:	2380      	movs	r3, #128	; 0x80
 8008a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a0e:	e06e      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a76      	ldr	r2, [pc, #472]	; (8008bf0 <UART_SetConfig+0x6a4>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d130      	bne.n	8008a7c <UART_SetConfig+0x530>
 8008a1a:	4b73      	ldr	r3, [pc, #460]	; (8008be8 <UART_SetConfig+0x69c>)
 8008a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a1e:	f003 0307 	and.w	r3, r3, #7
 8008a22:	2b05      	cmp	r3, #5
 8008a24:	d826      	bhi.n	8008a74 <UART_SetConfig+0x528>
 8008a26:	a201      	add	r2, pc, #4	; (adr r2, 8008a2c <UART_SetConfig+0x4e0>)
 8008a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2c:	08008a45 	.word	0x08008a45
 8008a30:	08008a4d 	.word	0x08008a4d
 8008a34:	08008a55 	.word	0x08008a55
 8008a38:	08008a5d 	.word	0x08008a5d
 8008a3c:	08008a65 	.word	0x08008a65
 8008a40:	08008a6d 	.word	0x08008a6d
 8008a44:	2300      	movs	r3, #0
 8008a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a4a:	e050      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008a4c:	2304      	movs	r3, #4
 8008a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a52:	e04c      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008a54:	2308      	movs	r3, #8
 8008a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a5a:	e048      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008a5c:	2310      	movs	r3, #16
 8008a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a62:	e044      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008a64:	2320      	movs	r3, #32
 8008a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a6a:	e040      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008a6c:	2340      	movs	r3, #64	; 0x40
 8008a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a72:	e03c      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008a74:	2380      	movs	r3, #128	; 0x80
 8008a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a7a:	e038      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a5c      	ldr	r2, [pc, #368]	; (8008bf4 <UART_SetConfig+0x6a8>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d130      	bne.n	8008ae8 <UART_SetConfig+0x59c>
 8008a86:	4b58      	ldr	r3, [pc, #352]	; (8008be8 <UART_SetConfig+0x69c>)
 8008a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a8a:	f003 0307 	and.w	r3, r3, #7
 8008a8e:	2b05      	cmp	r3, #5
 8008a90:	d826      	bhi.n	8008ae0 <UART_SetConfig+0x594>
 8008a92:	a201      	add	r2, pc, #4	; (adr r2, 8008a98 <UART_SetConfig+0x54c>)
 8008a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a98:	08008ab1 	.word	0x08008ab1
 8008a9c:	08008ab9 	.word	0x08008ab9
 8008aa0:	08008ac1 	.word	0x08008ac1
 8008aa4:	08008ac9 	.word	0x08008ac9
 8008aa8:	08008ad1 	.word	0x08008ad1
 8008aac:	08008ad9 	.word	0x08008ad9
 8008ab0:	2302      	movs	r3, #2
 8008ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ab6:	e01a      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008ab8:	2304      	movs	r3, #4
 8008aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008abe:	e016      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008ac0:	2308      	movs	r3, #8
 8008ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ac6:	e012      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008ac8:	2310      	movs	r3, #16
 8008aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ace:	e00e      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008ad0:	2320      	movs	r3, #32
 8008ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ad6:	e00a      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008ad8:	2340      	movs	r3, #64	; 0x40
 8008ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ade:	e006      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008ae0:	2380      	movs	r3, #128	; 0x80
 8008ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ae6:	e002      	b.n	8008aee <UART_SetConfig+0x5a2>
 8008ae8:	2380      	movs	r3, #128	; 0x80
 8008aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a40      	ldr	r2, [pc, #256]	; (8008bf4 <UART_SetConfig+0x6a8>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	f040 80ef 	bne.w	8008cd8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008afa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008afe:	2b20      	cmp	r3, #32
 8008b00:	dc46      	bgt.n	8008b90 <UART_SetConfig+0x644>
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	f2c0 8081 	blt.w	8008c0a <UART_SetConfig+0x6be>
 8008b08:	3b02      	subs	r3, #2
 8008b0a:	2b1e      	cmp	r3, #30
 8008b0c:	d87d      	bhi.n	8008c0a <UART_SetConfig+0x6be>
 8008b0e:	a201      	add	r2, pc, #4	; (adr r2, 8008b14 <UART_SetConfig+0x5c8>)
 8008b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b14:	08008b97 	.word	0x08008b97
 8008b18:	08008c0b 	.word	0x08008c0b
 8008b1c:	08008b9f 	.word	0x08008b9f
 8008b20:	08008c0b 	.word	0x08008c0b
 8008b24:	08008c0b 	.word	0x08008c0b
 8008b28:	08008c0b 	.word	0x08008c0b
 8008b2c:	08008baf 	.word	0x08008baf
 8008b30:	08008c0b 	.word	0x08008c0b
 8008b34:	08008c0b 	.word	0x08008c0b
 8008b38:	08008c0b 	.word	0x08008c0b
 8008b3c:	08008c0b 	.word	0x08008c0b
 8008b40:	08008c0b 	.word	0x08008c0b
 8008b44:	08008c0b 	.word	0x08008c0b
 8008b48:	08008c0b 	.word	0x08008c0b
 8008b4c:	08008bbf 	.word	0x08008bbf
 8008b50:	08008c0b 	.word	0x08008c0b
 8008b54:	08008c0b 	.word	0x08008c0b
 8008b58:	08008c0b 	.word	0x08008c0b
 8008b5c:	08008c0b 	.word	0x08008c0b
 8008b60:	08008c0b 	.word	0x08008c0b
 8008b64:	08008c0b 	.word	0x08008c0b
 8008b68:	08008c0b 	.word	0x08008c0b
 8008b6c:	08008c0b 	.word	0x08008c0b
 8008b70:	08008c0b 	.word	0x08008c0b
 8008b74:	08008c0b 	.word	0x08008c0b
 8008b78:	08008c0b 	.word	0x08008c0b
 8008b7c:	08008c0b 	.word	0x08008c0b
 8008b80:	08008c0b 	.word	0x08008c0b
 8008b84:	08008c0b 	.word	0x08008c0b
 8008b88:	08008c0b 	.word	0x08008c0b
 8008b8c:	08008bfd 	.word	0x08008bfd
 8008b90:	2b40      	cmp	r3, #64	; 0x40
 8008b92:	d036      	beq.n	8008c02 <UART_SetConfig+0x6b6>
 8008b94:	e039      	b.n	8008c0a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008b96:	f7fd fa91 	bl	80060bc <HAL_RCCEx_GetD3PCLK1Freq>
 8008b9a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008b9c:	e03b      	b.n	8008c16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b9e:	f107 0314 	add.w	r3, r7, #20
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7fd faa0 	bl	80060e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008bac:	e033      	b.n	8008c16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bae:	f107 0308 	add.w	r3, r7, #8
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7fd fbec 	bl	8006390 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008bbc:	e02b      	b.n	8008c16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bbe:	4b0a      	ldr	r3, [pc, #40]	; (8008be8 <UART_SetConfig+0x69c>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f003 0320 	and.w	r3, r3, #32
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d009      	beq.n	8008bde <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008bca:	4b07      	ldr	r3, [pc, #28]	; (8008be8 <UART_SetConfig+0x69c>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	08db      	lsrs	r3, r3, #3
 8008bd0:	f003 0303 	and.w	r3, r3, #3
 8008bd4:	4a08      	ldr	r2, [pc, #32]	; (8008bf8 <UART_SetConfig+0x6ac>)
 8008bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8008bda:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008bdc:	e01b      	b.n	8008c16 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8008bde:	4b06      	ldr	r3, [pc, #24]	; (8008bf8 <UART_SetConfig+0x6ac>)
 8008be0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008be2:	e018      	b.n	8008c16 <UART_SetConfig+0x6ca>
 8008be4:	40011400 	.word	0x40011400
 8008be8:	58024400 	.word	0x58024400
 8008bec:	40007800 	.word	0x40007800
 8008bf0:	40007c00 	.word	0x40007c00
 8008bf4:	58000c00 	.word	0x58000c00
 8008bf8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008bfc:	4bc4      	ldr	r3, [pc, #784]	; (8008f10 <UART_SetConfig+0x9c4>)
 8008bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c00:	e009      	b.n	8008c16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c08:	e005      	b.n	8008c16 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008c14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	f000 81da 	beq.w	8008fd2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c22:	4abc      	ldr	r2, [pc, #752]	; (8008f14 <UART_SetConfig+0x9c8>)
 8008c24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c28:	461a      	mov	r2, r3
 8008c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c30:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	685a      	ldr	r2, [r3, #4]
 8008c36:	4613      	mov	r3, r2
 8008c38:	005b      	lsls	r3, r3, #1
 8008c3a:	4413      	add	r3, r2
 8008c3c:	6a3a      	ldr	r2, [r7, #32]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d305      	bcc.n	8008c4e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c48:	6a3a      	ldr	r2, [r7, #32]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d903      	bls.n	8008c56 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008c54:	e1bd      	b.n	8008fd2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f04f 0100 	mov.w	r1, #0
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c62:	4aac      	ldr	r2, [pc, #688]	; (8008f14 <UART_SetConfig+0x9c8>)
 8008c64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c68:	b29a      	uxth	r2, r3
 8008c6a:	f04f 0300 	mov.w	r3, #0
 8008c6e:	f7f7 fd4b 	bl	8000708 <__aeabi_uldivmod>
 8008c72:	4602      	mov	r2, r0
 8008c74:	460b      	mov	r3, r1
 8008c76:	4610      	mov	r0, r2
 8008c78:	4619      	mov	r1, r3
 8008c7a:	f04f 0200 	mov.w	r2, #0
 8008c7e:	f04f 0300 	mov.w	r3, #0
 8008c82:	020b      	lsls	r3, r1, #8
 8008c84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008c88:	0202      	lsls	r2, r0, #8
 8008c8a:	6879      	ldr	r1, [r7, #4]
 8008c8c:	6849      	ldr	r1, [r1, #4]
 8008c8e:	0849      	lsrs	r1, r1, #1
 8008c90:	4608      	mov	r0, r1
 8008c92:	f04f 0100 	mov.w	r1, #0
 8008c96:	1814      	adds	r4, r2, r0
 8008c98:	eb43 0501 	adc.w	r5, r3, r1
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	f04f 0300 	mov.w	r3, #0
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	4629      	mov	r1, r5
 8008caa:	f7f7 fd2d 	bl	8000708 <__aeabi_uldivmod>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008cbc:	d308      	bcc.n	8008cd0 <UART_SetConfig+0x784>
 8008cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cc4:	d204      	bcs.n	8008cd0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ccc:	60da      	str	r2, [r3, #12]
 8008cce:	e180      	b.n	8008fd2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008cd6:	e17c      	b.n	8008fd2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	69db      	ldr	r3, [r3, #28]
 8008cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ce0:	f040 80bf 	bne.w	8008e62 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8008ce4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008ce8:	2b20      	cmp	r3, #32
 8008cea:	dc49      	bgt.n	8008d80 <UART_SetConfig+0x834>
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	db7c      	blt.n	8008dea <UART_SetConfig+0x89e>
 8008cf0:	2b20      	cmp	r3, #32
 8008cf2:	d87a      	bhi.n	8008dea <UART_SetConfig+0x89e>
 8008cf4:	a201      	add	r2, pc, #4	; (adr r2, 8008cfc <UART_SetConfig+0x7b0>)
 8008cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfa:	bf00      	nop
 8008cfc:	08008d87 	.word	0x08008d87
 8008d00:	08008d8f 	.word	0x08008d8f
 8008d04:	08008deb 	.word	0x08008deb
 8008d08:	08008deb 	.word	0x08008deb
 8008d0c:	08008d97 	.word	0x08008d97
 8008d10:	08008deb 	.word	0x08008deb
 8008d14:	08008deb 	.word	0x08008deb
 8008d18:	08008deb 	.word	0x08008deb
 8008d1c:	08008da7 	.word	0x08008da7
 8008d20:	08008deb 	.word	0x08008deb
 8008d24:	08008deb 	.word	0x08008deb
 8008d28:	08008deb 	.word	0x08008deb
 8008d2c:	08008deb 	.word	0x08008deb
 8008d30:	08008deb 	.word	0x08008deb
 8008d34:	08008deb 	.word	0x08008deb
 8008d38:	08008deb 	.word	0x08008deb
 8008d3c:	08008db7 	.word	0x08008db7
 8008d40:	08008deb 	.word	0x08008deb
 8008d44:	08008deb 	.word	0x08008deb
 8008d48:	08008deb 	.word	0x08008deb
 8008d4c:	08008deb 	.word	0x08008deb
 8008d50:	08008deb 	.word	0x08008deb
 8008d54:	08008deb 	.word	0x08008deb
 8008d58:	08008deb 	.word	0x08008deb
 8008d5c:	08008deb 	.word	0x08008deb
 8008d60:	08008deb 	.word	0x08008deb
 8008d64:	08008deb 	.word	0x08008deb
 8008d68:	08008deb 	.word	0x08008deb
 8008d6c:	08008deb 	.word	0x08008deb
 8008d70:	08008deb 	.word	0x08008deb
 8008d74:	08008deb 	.word	0x08008deb
 8008d78:	08008deb 	.word	0x08008deb
 8008d7c:	08008ddd 	.word	0x08008ddd
 8008d80:	2b40      	cmp	r3, #64	; 0x40
 8008d82:	d02e      	beq.n	8008de2 <UART_SetConfig+0x896>
 8008d84:	e031      	b.n	8008dea <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d86:	f7fc fa2d 	bl	80051e4 <HAL_RCC_GetPCLK1Freq>
 8008d8a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008d8c:	e033      	b.n	8008df6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d8e:	f7fc fa3f 	bl	8005210 <HAL_RCC_GetPCLK2Freq>
 8008d92:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008d94:	e02f      	b.n	8008df6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d96:	f107 0314 	add.w	r3, r7, #20
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7fd f9a4 	bl	80060e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008da4:	e027      	b.n	8008df6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008da6:	f107 0308 	add.w	r3, r7, #8
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fd faf0 	bl	8006390 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008db4:	e01f      	b.n	8008df6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008db6:	4b58      	ldr	r3, [pc, #352]	; (8008f18 <UART_SetConfig+0x9cc>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 0320 	and.w	r3, r3, #32
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d009      	beq.n	8008dd6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008dc2:	4b55      	ldr	r3, [pc, #340]	; (8008f18 <UART_SetConfig+0x9cc>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	08db      	lsrs	r3, r3, #3
 8008dc8:	f003 0303 	and.w	r3, r3, #3
 8008dcc:	4a53      	ldr	r2, [pc, #332]	; (8008f1c <UART_SetConfig+0x9d0>)
 8008dce:	fa22 f303 	lsr.w	r3, r2, r3
 8008dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008dd4:	e00f      	b.n	8008df6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8008dd6:	4b51      	ldr	r3, [pc, #324]	; (8008f1c <UART_SetConfig+0x9d0>)
 8008dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008dda:	e00c      	b.n	8008df6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ddc:	4b4c      	ldr	r3, [pc, #304]	; (8008f10 <UART_SetConfig+0x9c4>)
 8008dde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008de0:	e009      	b.n	8008df6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008de6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008de8:	e005      	b.n	8008df6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8008dea:	2300      	movs	r3, #0
 8008dec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008df4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	f000 80ea 	beq.w	8008fd2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e02:	4a44      	ldr	r2, [pc, #272]	; (8008f14 <UART_SetConfig+0x9c8>)
 8008e04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e08:	461a      	mov	r2, r3
 8008e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e10:	005a      	lsls	r2, r3, #1
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	085b      	lsrs	r3, r3, #1
 8008e18:	441a      	add	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e28:	2b0f      	cmp	r3, #15
 8008e2a:	d916      	bls.n	8008e5a <UART_SetConfig+0x90e>
 8008e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e32:	d212      	bcs.n	8008e5a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	f023 030f 	bic.w	r3, r3, #15
 8008e3c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e40:	085b      	lsrs	r3, r3, #1
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	f003 0307 	and.w	r3, r3, #7
 8008e48:	b29a      	uxth	r2, r3
 8008e4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008e56:	60da      	str	r2, [r3, #12]
 8008e58:	e0bb      	b.n	8008fd2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008e60:	e0b7      	b.n	8008fd2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008e66:	2b20      	cmp	r3, #32
 8008e68:	dc4a      	bgt.n	8008f00 <UART_SetConfig+0x9b4>
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f2c0 8086 	blt.w	8008f7c <UART_SetConfig+0xa30>
 8008e70:	2b20      	cmp	r3, #32
 8008e72:	f200 8083 	bhi.w	8008f7c <UART_SetConfig+0xa30>
 8008e76:	a201      	add	r2, pc, #4	; (adr r2, 8008e7c <UART_SetConfig+0x930>)
 8008e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e7c:	08008f07 	.word	0x08008f07
 8008e80:	08008f21 	.word	0x08008f21
 8008e84:	08008f7d 	.word	0x08008f7d
 8008e88:	08008f7d 	.word	0x08008f7d
 8008e8c:	08008f29 	.word	0x08008f29
 8008e90:	08008f7d 	.word	0x08008f7d
 8008e94:	08008f7d 	.word	0x08008f7d
 8008e98:	08008f7d 	.word	0x08008f7d
 8008e9c:	08008f39 	.word	0x08008f39
 8008ea0:	08008f7d 	.word	0x08008f7d
 8008ea4:	08008f7d 	.word	0x08008f7d
 8008ea8:	08008f7d 	.word	0x08008f7d
 8008eac:	08008f7d 	.word	0x08008f7d
 8008eb0:	08008f7d 	.word	0x08008f7d
 8008eb4:	08008f7d 	.word	0x08008f7d
 8008eb8:	08008f7d 	.word	0x08008f7d
 8008ebc:	08008f49 	.word	0x08008f49
 8008ec0:	08008f7d 	.word	0x08008f7d
 8008ec4:	08008f7d 	.word	0x08008f7d
 8008ec8:	08008f7d 	.word	0x08008f7d
 8008ecc:	08008f7d 	.word	0x08008f7d
 8008ed0:	08008f7d 	.word	0x08008f7d
 8008ed4:	08008f7d 	.word	0x08008f7d
 8008ed8:	08008f7d 	.word	0x08008f7d
 8008edc:	08008f7d 	.word	0x08008f7d
 8008ee0:	08008f7d 	.word	0x08008f7d
 8008ee4:	08008f7d 	.word	0x08008f7d
 8008ee8:	08008f7d 	.word	0x08008f7d
 8008eec:	08008f7d 	.word	0x08008f7d
 8008ef0:	08008f7d 	.word	0x08008f7d
 8008ef4:	08008f7d 	.word	0x08008f7d
 8008ef8:	08008f7d 	.word	0x08008f7d
 8008efc:	08008f6f 	.word	0x08008f6f
 8008f00:	2b40      	cmp	r3, #64	; 0x40
 8008f02:	d037      	beq.n	8008f74 <UART_SetConfig+0xa28>
 8008f04:	e03a      	b.n	8008f7c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f06:	f7fc f96d 	bl	80051e4 <HAL_RCC_GetPCLK1Freq>
 8008f0a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008f0c:	e03c      	b.n	8008f88 <UART_SetConfig+0xa3c>
 8008f0e:	bf00      	nop
 8008f10:	003d0900 	.word	0x003d0900
 8008f14:	08011500 	.word	0x08011500
 8008f18:	58024400 	.word	0x58024400
 8008f1c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f20:	f7fc f976 	bl	8005210 <HAL_RCC_GetPCLK2Freq>
 8008f24:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008f26:	e02f      	b.n	8008f88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f28:	f107 0314 	add.w	r3, r7, #20
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7fd f8db 	bl	80060e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f36:	e027      	b.n	8008f88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f38:	f107 0308 	add.w	r3, r7, #8
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7fd fa27 	bl	8006390 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f46:	e01f      	b.n	8008f88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f48:	4b2c      	ldr	r3, [pc, #176]	; (8008ffc <UART_SetConfig+0xab0>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f003 0320 	and.w	r3, r3, #32
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d009      	beq.n	8008f68 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f54:	4b29      	ldr	r3, [pc, #164]	; (8008ffc <UART_SetConfig+0xab0>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	08db      	lsrs	r3, r3, #3
 8008f5a:	f003 0303 	and.w	r3, r3, #3
 8008f5e:	4a28      	ldr	r2, [pc, #160]	; (8009000 <UART_SetConfig+0xab4>)
 8008f60:	fa22 f303 	lsr.w	r3, r2, r3
 8008f64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f66:	e00f      	b.n	8008f88 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8008f68:	4b25      	ldr	r3, [pc, #148]	; (8009000 <UART_SetConfig+0xab4>)
 8008f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f6c:	e00c      	b.n	8008f88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f6e:	4b25      	ldr	r3, [pc, #148]	; (8009004 <UART_SetConfig+0xab8>)
 8008f70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f72:	e009      	b.n	8008f88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f7a:	e005      	b.n	8008f88 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008f86:	bf00      	nop
    }

    if (pclk != 0U)
 8008f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d021      	beq.n	8008fd2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f92:	4a1d      	ldr	r2, [pc, #116]	; (8009008 <UART_SetConfig+0xabc>)
 8008f94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f98:	461a      	mov	r2, r3
 8008f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	085b      	lsrs	r3, r3, #1
 8008fa6:	441a      	add	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb6:	2b0f      	cmp	r3, #15
 8008fb8:	d908      	bls.n	8008fcc <UART_SetConfig+0xa80>
 8008fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fc0:	d204      	bcs.n	8008fcc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fc8:	60da      	str	r2, [r3, #12]
 8008fca:	e002      	b.n	8008fd2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2201      	movs	r2, #1
 8008fde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008fee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3738      	adds	r7, #56	; 0x38
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bdb0      	pop	{r4, r5, r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	58024400 	.word	0x58024400
 8009000:	03d09000 	.word	0x03d09000
 8009004:	003d0900 	.word	0x003d0900
 8009008:	08011500 	.word	0x08011500

0800900c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009018:	f003 0301 	and.w	r3, r3, #1
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00a      	beq.n	8009036 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	430a      	orrs	r2, r1
 8009034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800903a:	f003 0302 	and.w	r3, r3, #2
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00a      	beq.n	8009058 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	430a      	orrs	r2, r1
 8009056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800905c:	f003 0304 	and.w	r3, r3, #4
 8009060:	2b00      	cmp	r3, #0
 8009062:	d00a      	beq.n	800907a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	430a      	orrs	r2, r1
 8009078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800907e:	f003 0308 	and.w	r3, r3, #8
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00a      	beq.n	800909c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	430a      	orrs	r2, r1
 800909a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a0:	f003 0310 	and.w	r3, r3, #16
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d00a      	beq.n	80090be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	430a      	orrs	r2, r1
 80090bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c2:	f003 0320 	and.w	r3, r3, #32
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00a      	beq.n	80090e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	430a      	orrs	r2, r1
 80090de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d01a      	beq.n	8009122 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	430a      	orrs	r2, r1
 8009100:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009106:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800910a:	d10a      	bne.n	8009122 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	430a      	orrs	r2, r1
 8009120:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00a      	beq.n	8009144 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	430a      	orrs	r2, r1
 8009142:	605a      	str	r2, [r3, #4]
  }
}
 8009144:	bf00      	nop
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b086      	sub	sp, #24
 8009154:	af02      	add	r7, sp, #8
 8009156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009160:	f7f8 ffe4 	bl	800212c <HAL_GetTick>
 8009164:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f003 0308 	and.w	r3, r3, #8
 8009170:	2b08      	cmp	r3, #8
 8009172:	d10e      	bne.n	8009192 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009174:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009178:	9300      	str	r3, [sp, #0]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2200      	movs	r2, #0
 800917e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 f82f 	bl	80091e6 <UART_WaitOnFlagUntilTimeout>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d001      	beq.n	8009192 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800918e:	2303      	movs	r3, #3
 8009190:	e025      	b.n	80091de <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f003 0304 	and.w	r3, r3, #4
 800919c:	2b04      	cmp	r3, #4
 800919e:	d10e      	bne.n	80091be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80091a4:	9300      	str	r3, [sp, #0]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 f819 	bl	80091e6 <UART_WaitOnFlagUntilTimeout>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d001      	beq.n	80091be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091ba:	2303      	movs	r3, #3
 80091bc:	e00f      	b.n	80091de <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2220      	movs	r2, #32
 80091c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2220      	movs	r2, #32
 80091ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b084      	sub	sp, #16
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	60f8      	str	r0, [r7, #12]
 80091ee:	60b9      	str	r1, [r7, #8]
 80091f0:	603b      	str	r3, [r7, #0]
 80091f2:	4613      	mov	r3, r2
 80091f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091f6:	e062      	b.n	80092be <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091f8:	69bb      	ldr	r3, [r7, #24]
 80091fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091fe:	d05e      	beq.n	80092be <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009200:	f7f8 ff94 	bl	800212c <HAL_GetTick>
 8009204:	4602      	mov	r2, r0
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	1ad3      	subs	r3, r2, r3
 800920a:	69ba      	ldr	r2, [r7, #24]
 800920c:	429a      	cmp	r2, r3
 800920e:	d302      	bcc.n	8009216 <UART_WaitOnFlagUntilTimeout+0x30>
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d11d      	bne.n	8009252 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009224:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	689a      	ldr	r2, [r3, #8]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f022 0201 	bic.w	r2, r2, #1
 8009234:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2220      	movs	r2, #32
 800923a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2220      	movs	r2, #32
 8009242:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2200      	movs	r2, #0
 800924a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800924e:	2303      	movs	r3, #3
 8009250:	e045      	b.n	80092de <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f003 0304 	and.w	r3, r3, #4
 800925c:	2b00      	cmp	r3, #0
 800925e:	d02e      	beq.n	80092be <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	69db      	ldr	r3, [r3, #28]
 8009266:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800926a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800926e:	d126      	bne.n	80092be <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009278:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009288:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	689a      	ldr	r2, [r3, #8]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f022 0201 	bic.w	r2, r2, #1
 8009298:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2220      	movs	r2, #32
 800929e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2220      	movs	r2, #32
 80092a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2220      	movs	r2, #32
 80092ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2200      	movs	r2, #0
 80092b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80092ba:	2303      	movs	r3, #3
 80092bc:	e00f      	b.n	80092de <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	69da      	ldr	r2, [r3, #28]
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	4013      	ands	r3, r2
 80092c8:	68ba      	ldr	r2, [r7, #8]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	bf0c      	ite	eq
 80092ce:	2301      	moveq	r3, #1
 80092d0:	2300      	movne	r3, #0
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	461a      	mov	r2, r3
 80092d6:	79fb      	ldrb	r3, [r7, #7]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d08d      	beq.n	80091f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092dc:	2300      	movs	r3, #0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
	...

080092e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80092fe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	6899      	ldr	r1, [r3, #8]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	4b0f      	ldr	r3, [pc, #60]	; (8009348 <UART_EndRxTransfer+0x60>)
 800930c:	400b      	ands	r3, r1
 800930e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009314:	2b01      	cmp	r3, #1
 8009316:	d107      	bne.n	8009328 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f022 0210 	bic.w	r2, r2, #16
 8009326:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2220      	movs	r2, #32
 800932c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800933c:	bf00      	nop
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr
 8009348:	effffffe 	.word	0xeffffffe

0800934c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009358:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2200      	movs	r2, #0
 8009366:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800936a:	68f8      	ldr	r0, [r7, #12]
 800936c:	f7ff f8d8 	bl	8008520 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009370:	bf00      	nop
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800938e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2220      	movs	r2, #32
 8009394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f7ff f8b4 	bl	800850c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093a4:	bf00      	nop
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80093b4:	bf00      	nop
 80093b6:	370c      	adds	r7, #12
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80093c8:	bf00      	nop
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80093dc:	bf00      	nop
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d101      	bne.n	80093fe <HAL_UARTEx_DisableFifoMode+0x16>
 80093fa:	2302      	movs	r3, #2
 80093fc:	e027      	b.n	800944e <HAL_UARTEx_DisableFifoMode+0x66>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2201      	movs	r2, #1
 8009402:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2224      	movs	r2, #36	; 0x24
 800940a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f022 0201 	bic.w	r2, r2, #1
 8009424:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800942c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	68fa      	ldr	r2, [r7, #12]
 800943a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2220      	movs	r2, #32
 8009440:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	3714      	adds	r7, #20
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr

0800945a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b084      	sub	sp, #16
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
 8009462:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800946a:	2b01      	cmp	r3, #1
 800946c:	d101      	bne.n	8009472 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800946e:	2302      	movs	r3, #2
 8009470:	e02d      	b.n	80094ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2201      	movs	r2, #1
 8009476:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2224      	movs	r2, #36	; 0x24
 800947e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f022 0201 	bic.w	r2, r2, #1
 8009498:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	683a      	ldr	r2, [r7, #0]
 80094aa:	430a      	orrs	r2, r1
 80094ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f850 	bl	8009554 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68fa      	ldr	r2, [r7, #12]
 80094ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2220      	movs	r2, #32
 80094c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b084      	sub	sp, #16
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
 80094de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d101      	bne.n	80094ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80094ea:	2302      	movs	r3, #2
 80094ec:	e02d      	b.n	800954a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2201      	movs	r2, #1
 80094f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2224      	movs	r2, #36	; 0x24
 80094fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f022 0201 	bic.w	r2, r2, #1
 8009514:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	683a      	ldr	r2, [r7, #0]
 8009526:	430a      	orrs	r2, r1
 8009528:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 f812 	bl	8009554 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2220      	movs	r2, #32
 800953c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2200      	movs	r2, #0
 8009544:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009548:	2300      	movs	r3, #0
}
 800954a:	4618      	mov	r0, r3
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
	...

08009554 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009554:	b480      	push	{r7}
 8009556:	b085      	sub	sp, #20
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009560:	2b00      	cmp	r3, #0
 8009562:	d108      	bne.n	8009576 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009574:	e031      	b.n	80095da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009576:	2310      	movs	r3, #16
 8009578:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800957a:	2310      	movs	r3, #16
 800957c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	0e5b      	lsrs	r3, r3, #25
 8009586:	b2db      	uxtb	r3, r3
 8009588:	f003 0307 	and.w	r3, r3, #7
 800958c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	0f5b      	lsrs	r3, r3, #29
 8009596:	b2db      	uxtb	r3, r3
 8009598:	f003 0307 	and.w	r3, r3, #7
 800959c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800959e:	7bbb      	ldrb	r3, [r7, #14]
 80095a0:	7b3a      	ldrb	r2, [r7, #12]
 80095a2:	4911      	ldr	r1, [pc, #68]	; (80095e8 <UARTEx_SetNbDataToProcess+0x94>)
 80095a4:	5c8a      	ldrb	r2, [r1, r2]
 80095a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80095aa:	7b3a      	ldrb	r2, [r7, #12]
 80095ac:	490f      	ldr	r1, [pc, #60]	; (80095ec <UARTEx_SetNbDataToProcess+0x98>)
 80095ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80095b4:	b29a      	uxth	r2, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095bc:	7bfb      	ldrb	r3, [r7, #15]
 80095be:	7b7a      	ldrb	r2, [r7, #13]
 80095c0:	4909      	ldr	r1, [pc, #36]	; (80095e8 <UARTEx_SetNbDataToProcess+0x94>)
 80095c2:	5c8a      	ldrb	r2, [r1, r2]
 80095c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80095c8:	7b7a      	ldrb	r2, [r7, #13]
 80095ca:	4908      	ldr	r1, [pc, #32]	; (80095ec <UARTEx_SetNbDataToProcess+0x98>)
 80095cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80095d2:	b29a      	uxth	r2, r3
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80095da:	bf00      	nop
 80095dc:	3714      	adds	r7, #20
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	08011518 	.word	0x08011518
 80095ec:	08011520 	.word	0x08011520

080095f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80095f0:	b084      	sub	sp, #16
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b084      	sub	sp, #16
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
 80095fa:	f107 001c 	add.w	r0, r7, #28
 80095fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009604:	2b01      	cmp	r3, #1
 8009606:	d120      	bne.n	800964a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800960c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	68da      	ldr	r2, [r3, #12]
 8009618:	4b2a      	ldr	r3, [pc, #168]	; (80096c4 <USB_CoreInit+0xd4>)
 800961a:	4013      	ands	r3, r2
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800962c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800962e:	2b01      	cmp	r3, #1
 8009630:	d105      	bne.n	800963e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 fa60 	bl	8009b04 <USB_CoreReset>
 8009644:	4603      	mov	r3, r0
 8009646:	73fb      	strb	r3, [r7, #15]
 8009648:	e01a      	b.n	8009680 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 fa54 	bl	8009b04 <USB_CoreReset>
 800965c:	4603      	mov	r3, r0
 800965e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009662:	2b00      	cmp	r3, #0
 8009664:	d106      	bne.n	8009674 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800966a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	639a      	str	r2, [r3, #56]	; 0x38
 8009672:	e005      	b.n	8009680 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009678:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009682:	2b01      	cmp	r3, #1
 8009684:	d116      	bne.n	80096b4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800968a:	b29a      	uxth	r2, r3
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009694:	4b0c      	ldr	r3, [pc, #48]	; (80096c8 <USB_CoreInit+0xd8>)
 8009696:	4313      	orrs	r3, r2
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	f043 0206 	orr.w	r2, r3, #6
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	f043 0220 	orr.w	r2, r3, #32
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80096b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3710      	adds	r7, #16
 80096ba:	46bd      	mov	sp, r7
 80096bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80096c0:	b004      	add	sp, #16
 80096c2:	4770      	bx	lr
 80096c4:	ffbdffbf 	.word	0xffbdffbf
 80096c8:	03ee0000 	.word	0x03ee0000

080096cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	f023 0201 	bic.w	r2, r3, #1
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	370c      	adds	r7, #12
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr

080096ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b082      	sub	sp, #8
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
 80096f6:	460b      	mov	r3, r1
 80096f8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009706:	78fb      	ldrb	r3, [r7, #3]
 8009708:	2b01      	cmp	r3, #1
 800970a:	d106      	bne.n	800971a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	60da      	str	r2, [r3, #12]
 8009718:	e00b      	b.n	8009732 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800971a:	78fb      	ldrb	r3, [r7, #3]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d106      	bne.n	800972e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	60da      	str	r2, [r3, #12]
 800972c:	e001      	b.n	8009732 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	e003      	b.n	800973a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009732:	2032      	movs	r0, #50	; 0x32
 8009734:	f7f8 fd06 	bl	8002144 <HAL_Delay>

  return HAL_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3708      	adds	r7, #8
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
	...

08009744 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009744:	b084      	sub	sp, #16
 8009746:	b580      	push	{r7, lr}
 8009748:	b086      	sub	sp, #24
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
 800974e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009752:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800975e:	2300      	movs	r3, #0
 8009760:	613b      	str	r3, [r7, #16]
 8009762:	e009      	b.n	8009778 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	3340      	adds	r3, #64	; 0x40
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	4413      	add	r3, r2
 800976e:	2200      	movs	r2, #0
 8009770:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	3301      	adds	r3, #1
 8009776:	613b      	str	r3, [r7, #16]
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	2b0e      	cmp	r3, #14
 800977c:	d9f2      	bls.n	8009764 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800977e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009780:	2b00      	cmp	r3, #0
 8009782:	d11c      	bne.n	80097be <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009792:	f043 0302 	orr.w	r3, r3, #2
 8009796:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800979c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	601a      	str	r2, [r3, #0]
 80097bc:	e005      	b.n	80097ca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80097d0:	461a      	mov	r2, r3
 80097d2:	2300      	movs	r3, #0
 80097d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097dc:	4619      	mov	r1, r3
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097e4:	461a      	mov	r2, r3
 80097e6:	680b      	ldr	r3, [r1, #0]
 80097e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80097ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d10c      	bne.n	800980a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80097f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d104      	bne.n	8009800 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80097f6:	2100      	movs	r1, #0
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 f949 	bl	8009a90 <USB_SetDevSpeed>
 80097fe:	e008      	b.n	8009812 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009800:	2101      	movs	r1, #1
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 f944 	bl	8009a90 <USB_SetDevSpeed>
 8009808:	e003      	b.n	8009812 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800980a:	2103      	movs	r1, #3
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 f93f 	bl	8009a90 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009812:	2110      	movs	r1, #16
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 f8f3 	bl	8009a00 <USB_FlushTxFifo>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d001      	beq.n	8009824 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 f911 	bl	8009a4c <USB_FlushRxFifo>
 800982a:	4603      	mov	r3, r0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d001      	beq.n	8009834 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800983a:	461a      	mov	r2, r3
 800983c:	2300      	movs	r3, #0
 800983e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009846:	461a      	mov	r2, r3
 8009848:	2300      	movs	r3, #0
 800984a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009852:	461a      	mov	r2, r3
 8009854:	2300      	movs	r3, #0
 8009856:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009858:	2300      	movs	r3, #0
 800985a:	613b      	str	r3, [r7, #16]
 800985c:	e043      	b.n	80098e6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	015a      	lsls	r2, r3, #5
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	4413      	add	r3, r2
 8009866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009870:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009874:	d118      	bne.n	80098a8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d10a      	bne.n	8009892 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	015a      	lsls	r2, r3, #5
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	4413      	add	r3, r2
 8009884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009888:	461a      	mov	r2, r3
 800988a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800988e:	6013      	str	r3, [r2, #0]
 8009890:	e013      	b.n	80098ba <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	015a      	lsls	r2, r3, #5
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	4413      	add	r3, r2
 800989a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800989e:	461a      	mov	r2, r3
 80098a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80098a4:	6013      	str	r3, [r2, #0]
 80098a6:	e008      	b.n	80098ba <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	015a      	lsls	r2, r3, #5
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	4413      	add	r3, r2
 80098b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098b4:	461a      	mov	r2, r3
 80098b6:	2300      	movs	r3, #0
 80098b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	015a      	lsls	r2, r3, #5
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	4413      	add	r3, r2
 80098c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098c6:	461a      	mov	r2, r3
 80098c8:	2300      	movs	r3, #0
 80098ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	015a      	lsls	r2, r3, #5
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	4413      	add	r3, r2
 80098d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098d8:	461a      	mov	r2, r3
 80098da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80098de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	3301      	adds	r3, #1
 80098e4:	613b      	str	r3, [r7, #16]
 80098e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e8:	693a      	ldr	r2, [r7, #16]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d3b7      	bcc.n	800985e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098ee:	2300      	movs	r3, #0
 80098f0:	613b      	str	r3, [r7, #16]
 80098f2:	e043      	b.n	800997c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	015a      	lsls	r2, r3, #5
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	4413      	add	r3, r2
 80098fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009906:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800990a:	d118      	bne.n	800993e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d10a      	bne.n	8009928 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	015a      	lsls	r2, r3, #5
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	4413      	add	r3, r2
 800991a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800991e:	461a      	mov	r2, r3
 8009920:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009924:	6013      	str	r3, [r2, #0]
 8009926:	e013      	b.n	8009950 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	015a      	lsls	r2, r3, #5
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	4413      	add	r3, r2
 8009930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009934:	461a      	mov	r2, r3
 8009936:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800993a:	6013      	str	r3, [r2, #0]
 800993c:	e008      	b.n	8009950 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	015a      	lsls	r2, r3, #5
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	4413      	add	r3, r2
 8009946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800994a:	461a      	mov	r2, r3
 800994c:	2300      	movs	r3, #0
 800994e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	015a      	lsls	r2, r3, #5
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	4413      	add	r3, r2
 8009958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800995c:	461a      	mov	r2, r3
 800995e:	2300      	movs	r3, #0
 8009960:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	015a      	lsls	r2, r3, #5
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	4413      	add	r3, r2
 800996a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800996e:	461a      	mov	r2, r3
 8009970:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009974:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	3301      	adds	r3, #1
 800997a:	613b      	str	r3, [r7, #16]
 800997c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997e:	693a      	ldr	r2, [r7, #16]
 8009980:	429a      	cmp	r2, r3
 8009982:	d3b7      	bcc.n	80098f4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800998a:	691b      	ldr	r3, [r3, #16]
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009992:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009996:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2200      	movs	r2, #0
 800999c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80099a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80099a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d105      	bne.n	80099b8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	699b      	ldr	r3, [r3, #24]
 80099b0:	f043 0210 	orr.w	r2, r3, #16
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	699a      	ldr	r2, [r3, #24]
 80099bc:	4b0e      	ldr	r3, [pc, #56]	; (80099f8 <USB_DevInit+0x2b4>)
 80099be:	4313      	orrs	r3, r2
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80099c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d005      	beq.n	80099d6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	699b      	ldr	r3, [r3, #24]
 80099ce:	f043 0208 	orr.w	r2, r3, #8
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80099d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d105      	bne.n	80099e8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	699a      	ldr	r2, [r3, #24]
 80099e0:	4b06      	ldr	r3, [pc, #24]	; (80099fc <USB_DevInit+0x2b8>)
 80099e2:	4313      	orrs	r3, r2
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80099e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3718      	adds	r7, #24
 80099ee:	46bd      	mov	sp, r7
 80099f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80099f4:	b004      	add	sp, #16
 80099f6:	4770      	bx	lr
 80099f8:	803c3800 	.word	0x803c3800
 80099fc:	40000004 	.word	0x40000004

08009a00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b085      	sub	sp, #20
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	019b      	lsls	r3, r3, #6
 8009a12:	f043 0220 	orr.w	r2, r3, #32
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	60fb      	str	r3, [r7, #12]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	4a09      	ldr	r2, [pc, #36]	; (8009a48 <USB_FlushTxFifo+0x48>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d901      	bls.n	8009a2c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009a28:	2303      	movs	r3, #3
 8009a2a:	e006      	b.n	8009a3a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	691b      	ldr	r3, [r3, #16]
 8009a30:	f003 0320 	and.w	r3, r3, #32
 8009a34:	2b20      	cmp	r3, #32
 8009a36:	d0f0      	beq.n	8009a1a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3714      	adds	r7, #20
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop
 8009a48:	00030d40 	.word	0x00030d40

08009a4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b085      	sub	sp, #20
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009a54:	2300      	movs	r3, #0
 8009a56:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2210      	movs	r2, #16
 8009a5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	3301      	adds	r3, #1
 8009a62:	60fb      	str	r3, [r7, #12]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	4a09      	ldr	r2, [pc, #36]	; (8009a8c <USB_FlushRxFifo+0x40>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d901      	bls.n	8009a70 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009a6c:	2303      	movs	r3, #3
 8009a6e:	e006      	b.n	8009a7e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	f003 0310 	and.w	r3, r3, #16
 8009a78:	2b10      	cmp	r3, #16
 8009a7a:	d0f0      	beq.n	8009a5e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009a7c:	2300      	movs	r3, #0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3714      	adds	r7, #20
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr
 8009a8a:	bf00      	nop
 8009a8c:	00030d40 	.word	0x00030d40

08009a90 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	460b      	mov	r3, r1
 8009a9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	78fb      	ldrb	r3, [r7, #3]
 8009aaa:	68f9      	ldr	r1, [r7, #12]
 8009aac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3714      	adds	r7, #20
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr

08009ac2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009ac2:	b480      	push	{r7}
 8009ac4:	b085      	sub	sp, #20
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009adc:	f023 0303 	bic.w	r3, r3, #3
 8009ae0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009af0:	f043 0302 	orr.w	r3, r3, #2
 8009af4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009af6:	2300      	movs	r3, #0
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3714      	adds	r7, #20
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b085      	sub	sp, #20
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	3301      	adds	r3, #1
 8009b14:	60fb      	str	r3, [r7, #12]
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	4a13      	ldr	r2, [pc, #76]	; (8009b68 <USB_CoreReset+0x64>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d901      	bls.n	8009b22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009b1e:	2303      	movs	r3, #3
 8009b20:	e01b      	b.n	8009b5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	691b      	ldr	r3, [r3, #16]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	daf2      	bge.n	8009b10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	691b      	ldr	r3, [r3, #16]
 8009b32:	f043 0201 	orr.w	r2, r3, #1
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	60fb      	str	r3, [r7, #12]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	4a09      	ldr	r2, [pc, #36]	; (8009b68 <USB_CoreReset+0x64>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d901      	bls.n	8009b4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009b48:	2303      	movs	r3, #3
 8009b4a:	e006      	b.n	8009b5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	691b      	ldr	r3, [r3, #16]
 8009b50:	f003 0301 	and.w	r3, r3, #1
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d0f0      	beq.n	8009b3a <USB_CoreReset+0x36>

  return HAL_OK;
 8009b58:	2300      	movs	r3, #0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3714      	adds	r7, #20
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop
 8009b68:	00030d40 	.word	0x00030d40

08009b6c <__NVIC_SetPriority>:
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	4603      	mov	r3, r0
 8009b74:	6039      	str	r1, [r7, #0]
 8009b76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009b78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	db0a      	blt.n	8009b96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	b2da      	uxtb	r2, r3
 8009b84:	490c      	ldr	r1, [pc, #48]	; (8009bb8 <__NVIC_SetPriority+0x4c>)
 8009b86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009b8a:	0112      	lsls	r2, r2, #4
 8009b8c:	b2d2      	uxtb	r2, r2
 8009b8e:	440b      	add	r3, r1
 8009b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009b94:	e00a      	b.n	8009bac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	b2da      	uxtb	r2, r3
 8009b9a:	4908      	ldr	r1, [pc, #32]	; (8009bbc <__NVIC_SetPriority+0x50>)
 8009b9c:	88fb      	ldrh	r3, [r7, #6]
 8009b9e:	f003 030f 	and.w	r3, r3, #15
 8009ba2:	3b04      	subs	r3, #4
 8009ba4:	0112      	lsls	r2, r2, #4
 8009ba6:	b2d2      	uxtb	r2, r2
 8009ba8:	440b      	add	r3, r1
 8009baa:	761a      	strb	r2, [r3, #24]
}
 8009bac:	bf00      	nop
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr
 8009bb8:	e000e100 	.word	0xe000e100
 8009bbc:	e000ed00 	.word	0xe000ed00

08009bc0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009bc4:	2100      	movs	r1, #0
 8009bc6:	f06f 0004 	mvn.w	r0, #4
 8009bca:	f7ff ffcf 	bl	8009b6c <__NVIC_SetPriority>
#endif
}
 8009bce:	bf00      	nop
 8009bd0:	bd80      	pop	{r7, pc}
	...

08009bd4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bda:	f3ef 8305 	mrs	r3, IPSR
 8009bde:	603b      	str	r3, [r7, #0]
  return(result);
 8009be0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d003      	beq.n	8009bee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009be6:	f06f 0305 	mvn.w	r3, #5
 8009bea:	607b      	str	r3, [r7, #4]
 8009bec:	e00c      	b.n	8009c08 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009bee:	4b0a      	ldr	r3, [pc, #40]	; (8009c18 <osKernelInitialize+0x44>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d105      	bne.n	8009c02 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009bf6:	4b08      	ldr	r3, [pc, #32]	; (8009c18 <osKernelInitialize+0x44>)
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	607b      	str	r3, [r7, #4]
 8009c00:	e002      	b.n	8009c08 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009c02:	f04f 33ff 	mov.w	r3, #4294967295
 8009c06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009c08:	687b      	ldr	r3, [r7, #4]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	370c      	adds	r7, #12
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr
 8009c16:	bf00      	nop
 8009c18:	24000208 	.word	0x24000208

08009c1c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c22:	f3ef 8305 	mrs	r3, IPSR
 8009c26:	603b      	str	r3, [r7, #0]
  return(result);
 8009c28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d003      	beq.n	8009c36 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009c2e:	f06f 0305 	mvn.w	r3, #5
 8009c32:	607b      	str	r3, [r7, #4]
 8009c34:	e010      	b.n	8009c58 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009c36:	4b0b      	ldr	r3, [pc, #44]	; (8009c64 <osKernelStart+0x48>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d109      	bne.n	8009c52 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009c3e:	f7ff ffbf 	bl	8009bc0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009c42:	4b08      	ldr	r3, [pc, #32]	; (8009c64 <osKernelStart+0x48>)
 8009c44:	2202      	movs	r2, #2
 8009c46:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009c48:	f001 fe8a 	bl	800b960 <vTaskStartScheduler>
      stat = osOK;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	607b      	str	r3, [r7, #4]
 8009c50:	e002      	b.n	8009c58 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009c52:	f04f 33ff 	mov.w	r3, #4294967295
 8009c56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009c58:	687b      	ldr	r3, [r7, #4]
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3708      	adds	r7, #8
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	24000208 	.word	0x24000208

08009c68 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b08e      	sub	sp, #56	; 0x38
 8009c6c:	af04      	add	r7, sp, #16
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009c74:	2300      	movs	r3, #0
 8009c76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c78:	f3ef 8305 	mrs	r3, IPSR
 8009c7c:	617b      	str	r3, [r7, #20]
  return(result);
 8009c7e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d17e      	bne.n	8009d82 <osThreadNew+0x11a>
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d07b      	beq.n	8009d82 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009c8a:	2380      	movs	r3, #128	; 0x80
 8009c8c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009c8e:	2318      	movs	r3, #24
 8009c90:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009c92:	2300      	movs	r3, #0
 8009c94:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009c96:	f04f 33ff 	mov.w	r3, #4294967295
 8009c9a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d045      	beq.n	8009d2e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d002      	beq.n	8009cb0 <osThreadNew+0x48>
        name = attr->name;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	699b      	ldr	r3, [r3, #24]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d002      	beq.n	8009cbe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	699b      	ldr	r3, [r3, #24]
 8009cbc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d008      	beq.n	8009cd6 <osThreadNew+0x6e>
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	2b38      	cmp	r3, #56	; 0x38
 8009cc8:	d805      	bhi.n	8009cd6 <osThreadNew+0x6e>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	f003 0301 	and.w	r3, r3, #1
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d001      	beq.n	8009cda <osThreadNew+0x72>
        return (NULL);
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	e054      	b.n	8009d84 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	695b      	ldr	r3, [r3, #20]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d003      	beq.n	8009cea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	695b      	ldr	r3, [r3, #20]
 8009ce6:	089b      	lsrs	r3, r3, #2
 8009ce8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00e      	beq.n	8009d10 <osThreadNew+0xa8>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	2b5b      	cmp	r3, #91	; 0x5b
 8009cf8:	d90a      	bls.n	8009d10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d006      	beq.n	8009d10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	695b      	ldr	r3, [r3, #20]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d002      	beq.n	8009d10 <osThreadNew+0xa8>
        mem = 1;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	61bb      	str	r3, [r7, #24]
 8009d0e:	e010      	b.n	8009d32 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	689b      	ldr	r3, [r3, #8]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10c      	bne.n	8009d32 <osThreadNew+0xca>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	68db      	ldr	r3, [r3, #12]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d108      	bne.n	8009d32 <osThreadNew+0xca>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	691b      	ldr	r3, [r3, #16]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d104      	bne.n	8009d32 <osThreadNew+0xca>
          mem = 0;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	61bb      	str	r3, [r7, #24]
 8009d2c:	e001      	b.n	8009d32 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009d32:	69bb      	ldr	r3, [r7, #24]
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d110      	bne.n	8009d5a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009d40:	9202      	str	r2, [sp, #8]
 8009d42:	9301      	str	r3, [sp, #4]
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	9300      	str	r3, [sp, #0]
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	6a3a      	ldr	r2, [r7, #32]
 8009d4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	f001 fc30 	bl	800b5b4 <xTaskCreateStatic>
 8009d54:	4603      	mov	r3, r0
 8009d56:	613b      	str	r3, [r7, #16]
 8009d58:	e013      	b.n	8009d82 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d110      	bne.n	8009d82 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009d60:	6a3b      	ldr	r3, [r7, #32]
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	f107 0310 	add.w	r3, r7, #16
 8009d68:	9301      	str	r3, [sp, #4]
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	9300      	str	r3, [sp, #0]
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d72:	68f8      	ldr	r0, [r7, #12]
 8009d74:	f001 fc7b 	bl	800b66e <xTaskCreate>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d001      	beq.n	8009d82 <osThreadNew+0x11a>
            hTask = NULL;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009d82:	693b      	ldr	r3, [r7, #16]
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3728      	adds	r7, #40	; 0x28
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d94:	f3ef 8305 	mrs	r3, IPSR
 8009d98:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d9a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d003      	beq.n	8009da8 <osDelay+0x1c>
    stat = osErrorISR;
 8009da0:	f06f 0305 	mvn.w	r3, #5
 8009da4:	60fb      	str	r3, [r7, #12]
 8009da6:	e007      	b.n	8009db8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009da8:	2300      	movs	r3, #0
 8009daa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d002      	beq.n	8009db8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f001 fda0 	bl	800b8f8 <vTaskDelay>
    }
  }

  return (stat);
 8009db8:	68fb      	ldr	r3, [r7, #12]
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3710      	adds	r7, #16
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009dc2:	b580      	push	{r7, lr}
 8009dc4:	b08a      	sub	sp, #40	; 0x28
 8009dc6:	af02      	add	r7, sp, #8
 8009dc8:	60f8      	str	r0, [r7, #12]
 8009dca:	60b9      	str	r1, [r7, #8]
 8009dcc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009dd2:	f3ef 8305 	mrs	r3, IPSR
 8009dd6:	613b      	str	r3, [r7, #16]
  return(result);
 8009dd8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d15f      	bne.n	8009e9e <osMessageQueueNew+0xdc>
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d05c      	beq.n	8009e9e <osMessageQueueNew+0xdc>
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d059      	beq.n	8009e9e <osMessageQueueNew+0xdc>
    mem = -1;
 8009dea:	f04f 33ff 	mov.w	r3, #4294967295
 8009dee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d029      	beq.n	8009e4a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d012      	beq.n	8009e24 <osMessageQueueNew+0x62>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	68db      	ldr	r3, [r3, #12]
 8009e02:	2b4f      	cmp	r3, #79	; 0x4f
 8009e04:	d90e      	bls.n	8009e24 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00a      	beq.n	8009e24 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	695a      	ldr	r2, [r3, #20]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	68b9      	ldr	r1, [r7, #8]
 8009e16:	fb01 f303 	mul.w	r3, r1, r3
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d302      	bcc.n	8009e24 <osMessageQueueNew+0x62>
        mem = 1;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	61bb      	str	r3, [r7, #24]
 8009e22:	e014      	b.n	8009e4e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d110      	bne.n	8009e4e <osMessageQueueNew+0x8c>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d10c      	bne.n	8009e4e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d108      	bne.n	8009e4e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	695b      	ldr	r3, [r3, #20]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d104      	bne.n	8009e4e <osMessageQueueNew+0x8c>
          mem = 0;
 8009e44:	2300      	movs	r3, #0
 8009e46:	61bb      	str	r3, [r7, #24]
 8009e48:	e001      	b.n	8009e4e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d10b      	bne.n	8009e6c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	691a      	ldr	r2, [r3, #16]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	2100      	movs	r1, #0
 8009e5e:	9100      	str	r1, [sp, #0]
 8009e60:	68b9      	ldr	r1, [r7, #8]
 8009e62:	68f8      	ldr	r0, [r7, #12]
 8009e64:	f000 fe68 	bl	800ab38 <xQueueGenericCreateStatic>
 8009e68:	61f8      	str	r0, [r7, #28]
 8009e6a:	e008      	b.n	8009e7e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009e6c:	69bb      	ldr	r3, [r7, #24]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d105      	bne.n	8009e7e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009e72:	2200      	movs	r2, #0
 8009e74:	68b9      	ldr	r1, [r7, #8]
 8009e76:	68f8      	ldr	r0, [r7, #12]
 8009e78:	f000 fed6 	bl	800ac28 <xQueueGenericCreate>
 8009e7c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009e7e:	69fb      	ldr	r3, [r7, #28]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d00c      	beq.n	8009e9e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d003      	beq.n	8009e92 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	617b      	str	r3, [r7, #20]
 8009e90:	e001      	b.n	8009e96 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009e92:	2300      	movs	r3, #0
 8009e94:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009e96:	6979      	ldr	r1, [r7, #20]
 8009e98:	69f8      	ldr	r0, [r7, #28]
 8009e9a:	f001 fb2d 	bl	800b4f8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009e9e:	69fb      	ldr	r3, [r7, #28]
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3720      	adds	r7, #32
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b088      	sub	sp, #32
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	603b      	str	r3, [r7, #0]
 8009eb4:	4613      	mov	r3, r2
 8009eb6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ec0:	f3ef 8305 	mrs	r3, IPSR
 8009ec4:	617b      	str	r3, [r7, #20]
  return(result);
 8009ec6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d028      	beq.n	8009f1e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d005      	beq.n	8009ede <osMessageQueuePut+0x36>
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d002      	beq.n	8009ede <osMessageQueuePut+0x36>
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d003      	beq.n	8009ee6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009ede:	f06f 0303 	mvn.w	r3, #3
 8009ee2:	61fb      	str	r3, [r7, #28]
 8009ee4:	e038      	b.n	8009f58 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009eea:	f107 0210 	add.w	r2, r7, #16
 8009eee:	2300      	movs	r3, #0
 8009ef0:	68b9      	ldr	r1, [r7, #8]
 8009ef2:	69b8      	ldr	r0, [r7, #24]
 8009ef4:	f000 fff4 	bl	800aee0 <xQueueGenericSendFromISR>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d003      	beq.n	8009f06 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009efe:	f06f 0302 	mvn.w	r3, #2
 8009f02:	61fb      	str	r3, [r7, #28]
 8009f04:	e028      	b.n	8009f58 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d025      	beq.n	8009f58 <osMessageQueuePut+0xb0>
 8009f0c:	4b15      	ldr	r3, [pc, #84]	; (8009f64 <osMessageQueuePut+0xbc>)
 8009f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f12:	601a      	str	r2, [r3, #0]
 8009f14:	f3bf 8f4f 	dsb	sy
 8009f18:	f3bf 8f6f 	isb	sy
 8009f1c:	e01c      	b.n	8009f58 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009f1e:	69bb      	ldr	r3, [r7, #24]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d002      	beq.n	8009f2a <osMessageQueuePut+0x82>
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d103      	bne.n	8009f32 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009f2a:	f06f 0303 	mvn.w	r3, #3
 8009f2e:	61fb      	str	r3, [r7, #28]
 8009f30:	e012      	b.n	8009f58 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009f32:	2300      	movs	r3, #0
 8009f34:	683a      	ldr	r2, [r7, #0]
 8009f36:	68b9      	ldr	r1, [r7, #8]
 8009f38:	69b8      	ldr	r0, [r7, #24]
 8009f3a:	f000 fed3 	bl	800ace4 <xQueueGenericSend>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d009      	beq.n	8009f58 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d003      	beq.n	8009f52 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009f4a:	f06f 0301 	mvn.w	r3, #1
 8009f4e:	61fb      	str	r3, [r7, #28]
 8009f50:	e002      	b.n	8009f58 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009f52:	f06f 0302 	mvn.w	r3, #2
 8009f56:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009f58:	69fb      	ldr	r3, [r7, #28]
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3720      	adds	r7, #32
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
 8009f62:	bf00      	nop
 8009f64:	e000ed04 	.word	0xe000ed04

08009f68 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b088      	sub	sp, #32
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	607a      	str	r2, [r7, #4]
 8009f74:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f7e:	f3ef 8305 	mrs	r3, IPSR
 8009f82:	617b      	str	r3, [r7, #20]
  return(result);
 8009f84:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d028      	beq.n	8009fdc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009f8a:	69bb      	ldr	r3, [r7, #24]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d005      	beq.n	8009f9c <osMessageQueueGet+0x34>
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d002      	beq.n	8009f9c <osMessageQueueGet+0x34>
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d003      	beq.n	8009fa4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009f9c:	f06f 0303 	mvn.w	r3, #3
 8009fa0:	61fb      	str	r3, [r7, #28]
 8009fa2:	e037      	b.n	800a014 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009fa8:	f107 0310 	add.w	r3, r7, #16
 8009fac:	461a      	mov	r2, r3
 8009fae:	68b9      	ldr	r1, [r7, #8]
 8009fb0:	69b8      	ldr	r0, [r7, #24]
 8009fb2:	f001 f911 	bl	800b1d8 <xQueueReceiveFromISR>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d003      	beq.n	8009fc4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009fbc:	f06f 0302 	mvn.w	r3, #2
 8009fc0:	61fb      	str	r3, [r7, #28]
 8009fc2:	e027      	b.n	800a014 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d024      	beq.n	800a014 <osMessageQueueGet+0xac>
 8009fca:	4b15      	ldr	r3, [pc, #84]	; (800a020 <osMessageQueueGet+0xb8>)
 8009fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fd0:	601a      	str	r2, [r3, #0]
 8009fd2:	f3bf 8f4f 	dsb	sy
 8009fd6:	f3bf 8f6f 	isb	sy
 8009fda:	e01b      	b.n	800a014 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009fdc:	69bb      	ldr	r3, [r7, #24]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d002      	beq.n	8009fe8 <osMessageQueueGet+0x80>
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d103      	bne.n	8009ff0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009fe8:	f06f 0303 	mvn.w	r3, #3
 8009fec:	61fb      	str	r3, [r7, #28]
 8009fee:	e011      	b.n	800a014 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009ff0:	683a      	ldr	r2, [r7, #0]
 8009ff2:	68b9      	ldr	r1, [r7, #8]
 8009ff4:	69b8      	ldr	r0, [r7, #24]
 8009ff6:	f001 f80f 	bl	800b018 <xQueueReceive>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d009      	beq.n	800a014 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d003      	beq.n	800a00e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a006:	f06f 0301 	mvn.w	r3, #1
 800a00a:	61fb      	str	r3, [r7, #28]
 800a00c:	e002      	b.n	800a014 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a00e:	f06f 0302 	mvn.w	r3, #2
 800a012:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a014:	69fb      	ldr	r3, [r7, #28]
}
 800a016:	4618      	mov	r0, r3
 800a018:	3720      	adds	r7, #32
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	e000ed04 	.word	0xe000ed04

0800a024 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a024:	b480      	push	{r7}
 800a026:	b085      	sub	sp, #20
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	4a07      	ldr	r2, [pc, #28]	; (800a050 <vApplicationGetIdleTaskMemory+0x2c>)
 800a034:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	4a06      	ldr	r2, [pc, #24]	; (800a054 <vApplicationGetIdleTaskMemory+0x30>)
 800a03a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2280      	movs	r2, #128	; 0x80
 800a040:	601a      	str	r2, [r3, #0]
}
 800a042:	bf00      	nop
 800a044:	3714      	adds	r7, #20
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr
 800a04e:	bf00      	nop
 800a050:	2400020c 	.word	0x2400020c
 800a054:	24000268 	.word	0x24000268

0800a058 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	4a07      	ldr	r2, [pc, #28]	; (800a084 <vApplicationGetTimerTaskMemory+0x2c>)
 800a068:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	4a06      	ldr	r2, [pc, #24]	; (800a088 <vApplicationGetTimerTaskMemory+0x30>)
 800a06e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a076:	601a      	str	r2, [r3, #0]
}
 800a078:	bf00      	nop
 800a07a:	3714      	adds	r7, #20
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr
 800a084:	24000468 	.word	0x24000468
 800a088:	240004c4 	.word	0x240004c4

0800a08c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b08a      	sub	sp, #40	; 0x28
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a094:	2300      	movs	r3, #0
 800a096:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a098:	f001 fcc8 	bl	800ba2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a09c:	4b5b      	ldr	r3, [pc, #364]	; (800a20c <pvPortMalloc+0x180>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d101      	bne.n	800a0a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a0a4:	f000 f920 	bl	800a2e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a0a8:	4b59      	ldr	r3, [pc, #356]	; (800a210 <pvPortMalloc+0x184>)
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	4013      	ands	r3, r2
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	f040 8093 	bne.w	800a1dc <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d01d      	beq.n	800a0f8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a0bc:	2208      	movs	r2, #8
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f003 0307 	and.w	r3, r3, #7
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d014      	beq.n	800a0f8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f023 0307 	bic.w	r3, r3, #7
 800a0d4:	3308      	adds	r3, #8
 800a0d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f003 0307 	and.w	r3, r3, #7
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00a      	beq.n	800a0f8 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e6:	f383 8811 	msr	BASEPRI, r3
 800a0ea:	f3bf 8f6f 	isb	sy
 800a0ee:	f3bf 8f4f 	dsb	sy
 800a0f2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a0f4:	bf00      	nop
 800a0f6:	e7fe      	b.n	800a0f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d06e      	beq.n	800a1dc <pvPortMalloc+0x150>
 800a0fe:	4b45      	ldr	r3, [pc, #276]	; (800a214 <pvPortMalloc+0x188>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	429a      	cmp	r2, r3
 800a106:	d869      	bhi.n	800a1dc <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a108:	4b43      	ldr	r3, [pc, #268]	; (800a218 <pvPortMalloc+0x18c>)
 800a10a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a10c:	4b42      	ldr	r3, [pc, #264]	; (800a218 <pvPortMalloc+0x18c>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a112:	e004      	b.n	800a11e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a116:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	429a      	cmp	r2, r3
 800a126:	d903      	bls.n	800a130 <pvPortMalloc+0xa4>
 800a128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d1f1      	bne.n	800a114 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a130:	4b36      	ldr	r3, [pc, #216]	; (800a20c <pvPortMalloc+0x180>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a136:	429a      	cmp	r2, r3
 800a138:	d050      	beq.n	800a1dc <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a13a:	6a3b      	ldr	r3, [r7, #32]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2208      	movs	r2, #8
 800a140:	4413      	add	r3, r2
 800a142:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	6a3b      	ldr	r3, [r7, #32]
 800a14a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14e:	685a      	ldr	r2, [r3, #4]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	1ad2      	subs	r2, r2, r3
 800a154:	2308      	movs	r3, #8
 800a156:	005b      	lsls	r3, r3, #1
 800a158:	429a      	cmp	r2, r3
 800a15a:	d91f      	bls.n	800a19c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a15c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4413      	add	r3, r2
 800a162:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	f003 0307 	and.w	r3, r3, #7
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00a      	beq.n	800a184 <pvPortMalloc+0xf8>
	__asm volatile
 800a16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a172:	f383 8811 	msr	BASEPRI, r3
 800a176:	f3bf 8f6f 	isb	sy
 800a17a:	f3bf 8f4f 	dsb	sy
 800a17e:	613b      	str	r3, [r7, #16]
}
 800a180:	bf00      	nop
 800a182:	e7fe      	b.n	800a182 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a186:	685a      	ldr	r2, [r3, #4]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	1ad2      	subs	r2, r2, r3
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a196:	69b8      	ldr	r0, [r7, #24]
 800a198:	f000 f908 	bl	800a3ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a19c:	4b1d      	ldr	r3, [pc, #116]	; (800a214 <pvPortMalloc+0x188>)
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	1ad3      	subs	r3, r2, r3
 800a1a6:	4a1b      	ldr	r2, [pc, #108]	; (800a214 <pvPortMalloc+0x188>)
 800a1a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a1aa:	4b1a      	ldr	r3, [pc, #104]	; (800a214 <pvPortMalloc+0x188>)
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	4b1b      	ldr	r3, [pc, #108]	; (800a21c <pvPortMalloc+0x190>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d203      	bcs.n	800a1be <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a1b6:	4b17      	ldr	r3, [pc, #92]	; (800a214 <pvPortMalloc+0x188>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a18      	ldr	r2, [pc, #96]	; (800a21c <pvPortMalloc+0x190>)
 800a1bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c0:	685a      	ldr	r2, [r3, #4]
 800a1c2:	4b13      	ldr	r3, [pc, #76]	; (800a210 <pvPortMalloc+0x184>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	431a      	orrs	r2, r3
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a1d2:	4b13      	ldr	r3, [pc, #76]	; (800a220 <pvPortMalloc+0x194>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	4a11      	ldr	r2, [pc, #68]	; (800a220 <pvPortMalloc+0x194>)
 800a1da:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a1dc:	f001 fc34 	bl	800ba48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1e0:	69fb      	ldr	r3, [r7, #28]
 800a1e2:	f003 0307 	and.w	r3, r3, #7
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00a      	beq.n	800a200 <pvPortMalloc+0x174>
	__asm volatile
 800a1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ee:	f383 8811 	msr	BASEPRI, r3
 800a1f2:	f3bf 8f6f 	isb	sy
 800a1f6:	f3bf 8f4f 	dsb	sy
 800a1fa:	60fb      	str	r3, [r7, #12]
}
 800a1fc:	bf00      	nop
 800a1fe:	e7fe      	b.n	800a1fe <pvPortMalloc+0x172>
	return pvReturn;
 800a200:	69fb      	ldr	r3, [r7, #28]
}
 800a202:	4618      	mov	r0, r3
 800a204:	3728      	adds	r7, #40	; 0x28
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	240044cc 	.word	0x240044cc
 800a210:	240044e0 	.word	0x240044e0
 800a214:	240044d0 	.word	0x240044d0
 800a218:	240044c4 	.word	0x240044c4
 800a21c:	240044d4 	.word	0x240044d4
 800a220:	240044d8 	.word	0x240044d8

0800a224 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b086      	sub	sp, #24
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d04d      	beq.n	800a2d2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a236:	2308      	movs	r3, #8
 800a238:	425b      	negs	r3, r3
 800a23a:	697a      	ldr	r2, [r7, #20]
 800a23c:	4413      	add	r3, r2
 800a23e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	685a      	ldr	r2, [r3, #4]
 800a248:	4b24      	ldr	r3, [pc, #144]	; (800a2dc <vPortFree+0xb8>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4013      	ands	r3, r2
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d10a      	bne.n	800a268 <vPortFree+0x44>
	__asm volatile
 800a252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a256:	f383 8811 	msr	BASEPRI, r3
 800a25a:	f3bf 8f6f 	isb	sy
 800a25e:	f3bf 8f4f 	dsb	sy
 800a262:	60fb      	str	r3, [r7, #12]
}
 800a264:	bf00      	nop
 800a266:	e7fe      	b.n	800a266 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d00a      	beq.n	800a286 <vPortFree+0x62>
	__asm volatile
 800a270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a274:	f383 8811 	msr	BASEPRI, r3
 800a278:	f3bf 8f6f 	isb	sy
 800a27c:	f3bf 8f4f 	dsb	sy
 800a280:	60bb      	str	r3, [r7, #8]
}
 800a282:	bf00      	nop
 800a284:	e7fe      	b.n	800a284 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	685a      	ldr	r2, [r3, #4]
 800a28a:	4b14      	ldr	r3, [pc, #80]	; (800a2dc <vPortFree+0xb8>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4013      	ands	r3, r2
 800a290:	2b00      	cmp	r3, #0
 800a292:	d01e      	beq.n	800a2d2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d11a      	bne.n	800a2d2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	685a      	ldr	r2, [r3, #4]
 800a2a0:	4b0e      	ldr	r3, [pc, #56]	; (800a2dc <vPortFree+0xb8>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	43db      	mvns	r3, r3
 800a2a6:	401a      	ands	r2, r3
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a2ac:	f001 fbbe 	bl	800ba2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	685a      	ldr	r2, [r3, #4]
 800a2b4:	4b0a      	ldr	r3, [pc, #40]	; (800a2e0 <vPortFree+0xbc>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	4a09      	ldr	r2, [pc, #36]	; (800a2e0 <vPortFree+0xbc>)
 800a2bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a2be:	6938      	ldr	r0, [r7, #16]
 800a2c0:	f000 f874 	bl	800a3ac <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a2c4:	4b07      	ldr	r3, [pc, #28]	; (800a2e4 <vPortFree+0xc0>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	4a06      	ldr	r2, [pc, #24]	; (800a2e4 <vPortFree+0xc0>)
 800a2cc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a2ce:	f001 fbbb 	bl	800ba48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a2d2:	bf00      	nop
 800a2d4:	3718      	adds	r7, #24
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	240044e0 	.word	0x240044e0
 800a2e0:	240044d0 	.word	0x240044d0
 800a2e4:	240044dc 	.word	0x240044dc

0800a2e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b085      	sub	sp, #20
 800a2ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a2ee:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a2f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a2f4:	4b27      	ldr	r3, [pc, #156]	; (800a394 <prvHeapInit+0xac>)
 800a2f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f003 0307 	and.w	r3, r3, #7
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d00c      	beq.n	800a31c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	3307      	adds	r3, #7
 800a306:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f023 0307 	bic.w	r3, r3, #7
 800a30e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a310:	68ba      	ldr	r2, [r7, #8]
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	1ad3      	subs	r3, r2, r3
 800a316:	4a1f      	ldr	r2, [pc, #124]	; (800a394 <prvHeapInit+0xac>)
 800a318:	4413      	add	r3, r2
 800a31a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a320:	4a1d      	ldr	r2, [pc, #116]	; (800a398 <prvHeapInit+0xb0>)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a326:	4b1c      	ldr	r3, [pc, #112]	; (800a398 <prvHeapInit+0xb0>)
 800a328:	2200      	movs	r2, #0
 800a32a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	68ba      	ldr	r2, [r7, #8]
 800a330:	4413      	add	r3, r2
 800a332:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a334:	2208      	movs	r2, #8
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	1a9b      	subs	r3, r3, r2
 800a33a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f023 0307 	bic.w	r3, r3, #7
 800a342:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	4a15      	ldr	r2, [pc, #84]	; (800a39c <prvHeapInit+0xb4>)
 800a348:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a34a:	4b14      	ldr	r3, [pc, #80]	; (800a39c <prvHeapInit+0xb4>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	2200      	movs	r2, #0
 800a350:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a352:	4b12      	ldr	r3, [pc, #72]	; (800a39c <prvHeapInit+0xb4>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	2200      	movs	r2, #0
 800a358:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	68fa      	ldr	r2, [r7, #12]
 800a362:	1ad2      	subs	r2, r2, r3
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a368:	4b0c      	ldr	r3, [pc, #48]	; (800a39c <prvHeapInit+0xb4>)
 800a36a:	681a      	ldr	r2, [r3, #0]
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	4a0a      	ldr	r2, [pc, #40]	; (800a3a0 <prvHeapInit+0xb8>)
 800a376:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	4a09      	ldr	r2, [pc, #36]	; (800a3a4 <prvHeapInit+0xbc>)
 800a37e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a380:	4b09      	ldr	r3, [pc, #36]	; (800a3a8 <prvHeapInit+0xc0>)
 800a382:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a386:	601a      	str	r2, [r3, #0]
}
 800a388:	bf00      	nop
 800a38a:	3714      	adds	r7, #20
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr
 800a394:	240008c4 	.word	0x240008c4
 800a398:	240044c4 	.word	0x240044c4
 800a39c:	240044cc 	.word	0x240044cc
 800a3a0:	240044d4 	.word	0x240044d4
 800a3a4:	240044d0 	.word	0x240044d0
 800a3a8:	240044e0 	.word	0x240044e0

0800a3ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b085      	sub	sp, #20
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a3b4:	4b28      	ldr	r3, [pc, #160]	; (800a458 <prvInsertBlockIntoFreeList+0xac>)
 800a3b6:	60fb      	str	r3, [r7, #12]
 800a3b8:	e002      	b.n	800a3c0 <prvInsertBlockIntoFreeList+0x14>
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	60fb      	str	r3, [r7, #12]
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d8f7      	bhi.n	800a3ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	68ba      	ldr	r2, [r7, #8]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d108      	bne.n	800a3ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	685a      	ldr	r2, [r3, #4]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	441a      	add	r2, r3
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	68ba      	ldr	r2, [r7, #8]
 800a3f8:	441a      	add	r2, r3
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d118      	bne.n	800a434 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	4b15      	ldr	r3, [pc, #84]	; (800a45c <prvInsertBlockIntoFreeList+0xb0>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d00d      	beq.n	800a42a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	685a      	ldr	r2, [r3, #4]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	441a      	add	r2, r3
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	681a      	ldr	r2, [r3, #0]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	601a      	str	r2, [r3, #0]
 800a428:	e008      	b.n	800a43c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a42a:	4b0c      	ldr	r3, [pc, #48]	; (800a45c <prvInsertBlockIntoFreeList+0xb0>)
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	601a      	str	r2, [r3, #0]
 800a432:	e003      	b.n	800a43c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a43c:	68fa      	ldr	r2, [r7, #12]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	429a      	cmp	r2, r3
 800a442:	d002      	beq.n	800a44a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a44a:	bf00      	nop
 800a44c:	3714      	adds	r7, #20
 800a44e:	46bd      	mov	sp, r7
 800a450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a454:	4770      	bx	lr
 800a456:	bf00      	nop
 800a458:	240044c4 	.word	0x240044c4
 800a45c:	240044cc 	.word	0x240044cc

0800a460 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a460:	b480      	push	{r7}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f103 0208 	add.w	r2, r3, #8
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f04f 32ff 	mov.w	r2, #4294967295
 800a478:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f103 0208 	add.w	r2, r3, #8
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f103 0208 	add.w	r2, r3, #8
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a494:	bf00      	nop
 800a496:	370c      	adds	r7, #12
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a4ae:	bf00      	nop
 800a4b0:	370c      	adds	r7, #12
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr

0800a4ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4ba:	b480      	push	{r7}
 800a4bc:	b085      	sub	sp, #20
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
 800a4c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	68fa      	ldr	r2, [r7, #12]
 800a4ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	689a      	ldr	r2, [r3, #8]
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	689b      	ldr	r3, [r3, #8]
 800a4dc:	683a      	ldr	r2, [r7, #0]
 800a4de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	683a      	ldr	r2, [r7, #0]
 800a4e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	1c5a      	adds	r2, r3, #1
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	601a      	str	r2, [r3, #0]
}
 800a4f6:	bf00      	nop
 800a4f8:	3714      	adds	r7, #20
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr

0800a502 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a502:	b480      	push	{r7}
 800a504:	b085      	sub	sp, #20
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
 800a50a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a518:	d103      	bne.n	800a522 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	60fb      	str	r3, [r7, #12]
 800a520:	e00c      	b.n	800a53c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	3308      	adds	r3, #8
 800a526:	60fb      	str	r3, [r7, #12]
 800a528:	e002      	b.n	800a530 <vListInsert+0x2e>
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	60fb      	str	r3, [r7, #12]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	68ba      	ldr	r2, [r7, #8]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d2f6      	bcs.n	800a52a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	685a      	ldr	r2, [r3, #4]
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	683a      	ldr	r2, [r7, #0]
 800a54a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	68fa      	ldr	r2, [r7, #12]
 800a550:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	683a      	ldr	r2, [r7, #0]
 800a556:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	1c5a      	adds	r2, r3, #1
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	601a      	str	r2, [r3, #0]
}
 800a568:	bf00      	nop
 800a56a:	3714      	adds	r7, #20
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a574:	b480      	push	{r7}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	691b      	ldr	r3, [r3, #16]
 800a580:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	6892      	ldr	r2, [r2, #8]
 800a58a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	6852      	ldr	r2, [r2, #4]
 800a594:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d103      	bne.n	800a5a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	689a      	ldr	r2, [r3, #8]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	1e5a      	subs	r2, r3, #1
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3714      	adds	r7, #20
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b085      	sub	sp, #20
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	3b04      	subs	r3, #4
 800a5d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a5e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	3b04      	subs	r3, #4
 800a5e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	f023 0201 	bic.w	r2, r3, #1
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	3b04      	subs	r3, #4
 800a5f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a5f8:	4a0c      	ldr	r2, [pc, #48]	; (800a62c <pxPortInitialiseStack+0x64>)
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	3b14      	subs	r3, #20
 800a602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	3b04      	subs	r3, #4
 800a60e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f06f 0202 	mvn.w	r2, #2
 800a616:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	3b20      	subs	r3, #32
 800a61c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a61e:	68fb      	ldr	r3, [r7, #12]
}
 800a620:	4618      	mov	r0, r3
 800a622:	3714      	adds	r7, #20
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr
 800a62c:	0800a631 	.word	0x0800a631

0800a630 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a636:	2300      	movs	r3, #0
 800a638:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a63a:	4b12      	ldr	r3, [pc, #72]	; (800a684 <prvTaskExitError+0x54>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a642:	d00a      	beq.n	800a65a <prvTaskExitError+0x2a>
	__asm volatile
 800a644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a648:	f383 8811 	msr	BASEPRI, r3
 800a64c:	f3bf 8f6f 	isb	sy
 800a650:	f3bf 8f4f 	dsb	sy
 800a654:	60fb      	str	r3, [r7, #12]
}
 800a656:	bf00      	nop
 800a658:	e7fe      	b.n	800a658 <prvTaskExitError+0x28>
	__asm volatile
 800a65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65e:	f383 8811 	msr	BASEPRI, r3
 800a662:	f3bf 8f6f 	isb	sy
 800a666:	f3bf 8f4f 	dsb	sy
 800a66a:	60bb      	str	r3, [r7, #8]
}
 800a66c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a66e:	bf00      	nop
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d0fc      	beq.n	800a670 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a676:	bf00      	nop
 800a678:	bf00      	nop
 800a67a:	3714      	adds	r7, #20
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr
 800a684:	24000010 	.word	0x24000010
	...

0800a690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a690:	4b07      	ldr	r3, [pc, #28]	; (800a6b0 <pxCurrentTCBConst2>)
 800a692:	6819      	ldr	r1, [r3, #0]
 800a694:	6808      	ldr	r0, [r1, #0]
 800a696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a69a:	f380 8809 	msr	PSP, r0
 800a69e:	f3bf 8f6f 	isb	sy
 800a6a2:	f04f 0000 	mov.w	r0, #0
 800a6a6:	f380 8811 	msr	BASEPRI, r0
 800a6aa:	4770      	bx	lr
 800a6ac:	f3af 8000 	nop.w

0800a6b0 <pxCurrentTCBConst2>:
 800a6b0:	240044ec 	.word	0x240044ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a6b4:	bf00      	nop
 800a6b6:	bf00      	nop

0800a6b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a6b8:	4808      	ldr	r0, [pc, #32]	; (800a6dc <prvPortStartFirstTask+0x24>)
 800a6ba:	6800      	ldr	r0, [r0, #0]
 800a6bc:	6800      	ldr	r0, [r0, #0]
 800a6be:	f380 8808 	msr	MSP, r0
 800a6c2:	f04f 0000 	mov.w	r0, #0
 800a6c6:	f380 8814 	msr	CONTROL, r0
 800a6ca:	b662      	cpsie	i
 800a6cc:	b661      	cpsie	f
 800a6ce:	f3bf 8f4f 	dsb	sy
 800a6d2:	f3bf 8f6f 	isb	sy
 800a6d6:	df00      	svc	0
 800a6d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a6da:	bf00      	nop
 800a6dc:	e000ed08 	.word	0xe000ed08

0800a6e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b086      	sub	sp, #24
 800a6e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a6e6:	4b46      	ldr	r3, [pc, #280]	; (800a800 <xPortStartScheduler+0x120>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a46      	ldr	r2, [pc, #280]	; (800a804 <xPortStartScheduler+0x124>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d10a      	bne.n	800a706 <xPortStartScheduler+0x26>
	__asm volatile
 800a6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f4:	f383 8811 	msr	BASEPRI, r3
 800a6f8:	f3bf 8f6f 	isb	sy
 800a6fc:	f3bf 8f4f 	dsb	sy
 800a700:	613b      	str	r3, [r7, #16]
}
 800a702:	bf00      	nop
 800a704:	e7fe      	b.n	800a704 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a706:	4b3e      	ldr	r3, [pc, #248]	; (800a800 <xPortStartScheduler+0x120>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a3f      	ldr	r2, [pc, #252]	; (800a808 <xPortStartScheduler+0x128>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d10a      	bne.n	800a726 <xPortStartScheduler+0x46>
	__asm volatile
 800a710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a714:	f383 8811 	msr	BASEPRI, r3
 800a718:	f3bf 8f6f 	isb	sy
 800a71c:	f3bf 8f4f 	dsb	sy
 800a720:	60fb      	str	r3, [r7, #12]
}
 800a722:	bf00      	nop
 800a724:	e7fe      	b.n	800a724 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a726:	4b39      	ldr	r3, [pc, #228]	; (800a80c <xPortStartScheduler+0x12c>)
 800a728:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	22ff      	movs	r2, #255	; 0xff
 800a736:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a740:	78fb      	ldrb	r3, [r7, #3]
 800a742:	b2db      	uxtb	r3, r3
 800a744:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a748:	b2da      	uxtb	r2, r3
 800a74a:	4b31      	ldr	r3, [pc, #196]	; (800a810 <xPortStartScheduler+0x130>)
 800a74c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a74e:	4b31      	ldr	r3, [pc, #196]	; (800a814 <xPortStartScheduler+0x134>)
 800a750:	2207      	movs	r2, #7
 800a752:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a754:	e009      	b.n	800a76a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a756:	4b2f      	ldr	r3, [pc, #188]	; (800a814 <xPortStartScheduler+0x134>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	3b01      	subs	r3, #1
 800a75c:	4a2d      	ldr	r2, [pc, #180]	; (800a814 <xPortStartScheduler+0x134>)
 800a75e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a760:	78fb      	ldrb	r3, [r7, #3]
 800a762:	b2db      	uxtb	r3, r3
 800a764:	005b      	lsls	r3, r3, #1
 800a766:	b2db      	uxtb	r3, r3
 800a768:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a76a:	78fb      	ldrb	r3, [r7, #3]
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a772:	2b80      	cmp	r3, #128	; 0x80
 800a774:	d0ef      	beq.n	800a756 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a776:	4b27      	ldr	r3, [pc, #156]	; (800a814 <xPortStartScheduler+0x134>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f1c3 0307 	rsb	r3, r3, #7
 800a77e:	2b04      	cmp	r3, #4
 800a780:	d00a      	beq.n	800a798 <xPortStartScheduler+0xb8>
	__asm volatile
 800a782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a786:	f383 8811 	msr	BASEPRI, r3
 800a78a:	f3bf 8f6f 	isb	sy
 800a78e:	f3bf 8f4f 	dsb	sy
 800a792:	60bb      	str	r3, [r7, #8]
}
 800a794:	bf00      	nop
 800a796:	e7fe      	b.n	800a796 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a798:	4b1e      	ldr	r3, [pc, #120]	; (800a814 <xPortStartScheduler+0x134>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	021b      	lsls	r3, r3, #8
 800a79e:	4a1d      	ldr	r2, [pc, #116]	; (800a814 <xPortStartScheduler+0x134>)
 800a7a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a7a2:	4b1c      	ldr	r3, [pc, #112]	; (800a814 <xPortStartScheduler+0x134>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a7aa:	4a1a      	ldr	r2, [pc, #104]	; (800a814 <xPortStartScheduler+0x134>)
 800a7ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	b2da      	uxtb	r2, r3
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a7b6:	4b18      	ldr	r3, [pc, #96]	; (800a818 <xPortStartScheduler+0x138>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a17      	ldr	r2, [pc, #92]	; (800a818 <xPortStartScheduler+0x138>)
 800a7bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a7c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a7c2:	4b15      	ldr	r3, [pc, #84]	; (800a818 <xPortStartScheduler+0x138>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a14      	ldr	r2, [pc, #80]	; (800a818 <xPortStartScheduler+0x138>)
 800a7c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a7cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a7ce:	f000 f8dd 	bl	800a98c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a7d2:	4b12      	ldr	r3, [pc, #72]	; (800a81c <xPortStartScheduler+0x13c>)
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a7d8:	f000 f8fc 	bl	800a9d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a7dc:	4b10      	ldr	r3, [pc, #64]	; (800a820 <xPortStartScheduler+0x140>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a0f      	ldr	r2, [pc, #60]	; (800a820 <xPortStartScheduler+0x140>)
 800a7e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a7e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a7e8:	f7ff ff66 	bl	800a6b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a7ec:	f001 fa94 	bl	800bd18 <vTaskSwitchContext>
	prvTaskExitError();
 800a7f0:	f7ff ff1e 	bl	800a630 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3718      	adds	r7, #24
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	e000ed00 	.word	0xe000ed00
 800a804:	410fc271 	.word	0x410fc271
 800a808:	410fc270 	.word	0x410fc270
 800a80c:	e000e400 	.word	0xe000e400
 800a810:	240044e4 	.word	0x240044e4
 800a814:	240044e8 	.word	0x240044e8
 800a818:	e000ed20 	.word	0xe000ed20
 800a81c:	24000010 	.word	0x24000010
 800a820:	e000ef34 	.word	0xe000ef34

0800a824 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
	__asm volatile
 800a82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a82e:	f383 8811 	msr	BASEPRI, r3
 800a832:	f3bf 8f6f 	isb	sy
 800a836:	f3bf 8f4f 	dsb	sy
 800a83a:	607b      	str	r3, [r7, #4]
}
 800a83c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a83e:	4b0f      	ldr	r3, [pc, #60]	; (800a87c <vPortEnterCritical+0x58>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	3301      	adds	r3, #1
 800a844:	4a0d      	ldr	r2, [pc, #52]	; (800a87c <vPortEnterCritical+0x58>)
 800a846:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a848:	4b0c      	ldr	r3, [pc, #48]	; (800a87c <vPortEnterCritical+0x58>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d10f      	bne.n	800a870 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a850:	4b0b      	ldr	r3, [pc, #44]	; (800a880 <vPortEnterCritical+0x5c>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	b2db      	uxtb	r3, r3
 800a856:	2b00      	cmp	r3, #0
 800a858:	d00a      	beq.n	800a870 <vPortEnterCritical+0x4c>
	__asm volatile
 800a85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85e:	f383 8811 	msr	BASEPRI, r3
 800a862:	f3bf 8f6f 	isb	sy
 800a866:	f3bf 8f4f 	dsb	sy
 800a86a:	603b      	str	r3, [r7, #0]
}
 800a86c:	bf00      	nop
 800a86e:	e7fe      	b.n	800a86e <vPortEnterCritical+0x4a>
	}
}
 800a870:	bf00      	nop
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr
 800a87c:	24000010 	.word	0x24000010
 800a880:	e000ed04 	.word	0xe000ed04

0800a884 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a88a:	4b12      	ldr	r3, [pc, #72]	; (800a8d4 <vPortExitCritical+0x50>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d10a      	bne.n	800a8a8 <vPortExitCritical+0x24>
	__asm volatile
 800a892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a896:	f383 8811 	msr	BASEPRI, r3
 800a89a:	f3bf 8f6f 	isb	sy
 800a89e:	f3bf 8f4f 	dsb	sy
 800a8a2:	607b      	str	r3, [r7, #4]
}
 800a8a4:	bf00      	nop
 800a8a6:	e7fe      	b.n	800a8a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a8a8:	4b0a      	ldr	r3, [pc, #40]	; (800a8d4 <vPortExitCritical+0x50>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	3b01      	subs	r3, #1
 800a8ae:	4a09      	ldr	r2, [pc, #36]	; (800a8d4 <vPortExitCritical+0x50>)
 800a8b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a8b2:	4b08      	ldr	r3, [pc, #32]	; (800a8d4 <vPortExitCritical+0x50>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d105      	bne.n	800a8c6 <vPortExitCritical+0x42>
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a8c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a8c6:	bf00      	nop
 800a8c8:	370c      	adds	r7, #12
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr
 800a8d2:	bf00      	nop
 800a8d4:	24000010 	.word	0x24000010
	...

0800a8e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a8e0:	f3ef 8009 	mrs	r0, PSP
 800a8e4:	f3bf 8f6f 	isb	sy
 800a8e8:	4b15      	ldr	r3, [pc, #84]	; (800a940 <pxCurrentTCBConst>)
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	f01e 0f10 	tst.w	lr, #16
 800a8f0:	bf08      	it	eq
 800a8f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a8f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8fa:	6010      	str	r0, [r2, #0]
 800a8fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a900:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a904:	f380 8811 	msr	BASEPRI, r0
 800a908:	f3bf 8f4f 	dsb	sy
 800a90c:	f3bf 8f6f 	isb	sy
 800a910:	f001 fa02 	bl	800bd18 <vTaskSwitchContext>
 800a914:	f04f 0000 	mov.w	r0, #0
 800a918:	f380 8811 	msr	BASEPRI, r0
 800a91c:	bc09      	pop	{r0, r3}
 800a91e:	6819      	ldr	r1, [r3, #0]
 800a920:	6808      	ldr	r0, [r1, #0]
 800a922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a926:	f01e 0f10 	tst.w	lr, #16
 800a92a:	bf08      	it	eq
 800a92c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a930:	f380 8809 	msr	PSP, r0
 800a934:	f3bf 8f6f 	isb	sy
 800a938:	4770      	bx	lr
 800a93a:	bf00      	nop
 800a93c:	f3af 8000 	nop.w

0800a940 <pxCurrentTCBConst>:
 800a940:	240044ec 	.word	0x240044ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a944:	bf00      	nop
 800a946:	bf00      	nop

0800a948 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
	__asm volatile
 800a94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a952:	f383 8811 	msr	BASEPRI, r3
 800a956:	f3bf 8f6f 	isb	sy
 800a95a:	f3bf 8f4f 	dsb	sy
 800a95e:	607b      	str	r3, [r7, #4]
}
 800a960:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a962:	f001 f91f 	bl	800bba4 <xTaskIncrementTick>
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d003      	beq.n	800a974 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a96c:	4b06      	ldr	r3, [pc, #24]	; (800a988 <xPortSysTickHandler+0x40>)
 800a96e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a972:	601a      	str	r2, [r3, #0]
 800a974:	2300      	movs	r3, #0
 800a976:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	f383 8811 	msr	BASEPRI, r3
}
 800a97e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a980:	bf00      	nop
 800a982:	3708      	adds	r7, #8
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}
 800a988:	e000ed04 	.word	0xe000ed04

0800a98c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a98c:	b480      	push	{r7}
 800a98e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a990:	4b0b      	ldr	r3, [pc, #44]	; (800a9c0 <vPortSetupTimerInterrupt+0x34>)
 800a992:	2200      	movs	r2, #0
 800a994:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a996:	4b0b      	ldr	r3, [pc, #44]	; (800a9c4 <vPortSetupTimerInterrupt+0x38>)
 800a998:	2200      	movs	r2, #0
 800a99a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a99c:	4b0a      	ldr	r3, [pc, #40]	; (800a9c8 <vPortSetupTimerInterrupt+0x3c>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a0a      	ldr	r2, [pc, #40]	; (800a9cc <vPortSetupTimerInterrupt+0x40>)
 800a9a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a9a6:	099b      	lsrs	r3, r3, #6
 800a9a8:	4a09      	ldr	r2, [pc, #36]	; (800a9d0 <vPortSetupTimerInterrupt+0x44>)
 800a9aa:	3b01      	subs	r3, #1
 800a9ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a9ae:	4b04      	ldr	r3, [pc, #16]	; (800a9c0 <vPortSetupTimerInterrupt+0x34>)
 800a9b0:	2207      	movs	r2, #7
 800a9b2:	601a      	str	r2, [r3, #0]
}
 800a9b4:	bf00      	nop
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	e000e010 	.word	0xe000e010
 800a9c4:	e000e018 	.word	0xe000e018
 800a9c8:	24000000 	.word	0x24000000
 800a9cc:	10624dd3 	.word	0x10624dd3
 800a9d0:	e000e014 	.word	0xe000e014

0800a9d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a9d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a9e4 <vPortEnableVFP+0x10>
 800a9d8:	6801      	ldr	r1, [r0, #0]
 800a9da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a9de:	6001      	str	r1, [r0, #0]
 800a9e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a9e2:	bf00      	nop
 800a9e4:	e000ed88 	.word	0xe000ed88

0800a9e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b085      	sub	sp, #20
 800a9ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a9ee:	f3ef 8305 	mrs	r3, IPSR
 800a9f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2b0f      	cmp	r3, #15
 800a9f8:	d914      	bls.n	800aa24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a9fa:	4a17      	ldr	r2, [pc, #92]	; (800aa58 <vPortValidateInterruptPriority+0x70>)
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	4413      	add	r3, r2
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aa04:	4b15      	ldr	r3, [pc, #84]	; (800aa5c <vPortValidateInterruptPriority+0x74>)
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	7afa      	ldrb	r2, [r7, #11]
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d20a      	bcs.n	800aa24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800aa0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa12:	f383 8811 	msr	BASEPRI, r3
 800aa16:	f3bf 8f6f 	isb	sy
 800aa1a:	f3bf 8f4f 	dsb	sy
 800aa1e:	607b      	str	r3, [r7, #4]
}
 800aa20:	bf00      	nop
 800aa22:	e7fe      	b.n	800aa22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aa24:	4b0e      	ldr	r3, [pc, #56]	; (800aa60 <vPortValidateInterruptPriority+0x78>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aa2c:	4b0d      	ldr	r3, [pc, #52]	; (800aa64 <vPortValidateInterruptPriority+0x7c>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d90a      	bls.n	800aa4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800aa34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa38:	f383 8811 	msr	BASEPRI, r3
 800aa3c:	f3bf 8f6f 	isb	sy
 800aa40:	f3bf 8f4f 	dsb	sy
 800aa44:	603b      	str	r3, [r7, #0]
}
 800aa46:	bf00      	nop
 800aa48:	e7fe      	b.n	800aa48 <vPortValidateInterruptPriority+0x60>
	}
 800aa4a:	bf00      	nop
 800aa4c:	3714      	adds	r7, #20
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr
 800aa56:	bf00      	nop
 800aa58:	e000e3f0 	.word	0xe000e3f0
 800aa5c:	240044e4 	.word	0x240044e4
 800aa60:	e000ed0c 	.word	0xe000ed0c
 800aa64:	240044e8 	.word	0x240044e8

0800aa68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d10a      	bne.n	800aa92 <xQueueGenericReset+0x2a>
	__asm volatile
 800aa7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa80:	f383 8811 	msr	BASEPRI, r3
 800aa84:	f3bf 8f6f 	isb	sy
 800aa88:	f3bf 8f4f 	dsb	sy
 800aa8c:	60bb      	str	r3, [r7, #8]
}
 800aa8e:	bf00      	nop
 800aa90:	e7fe      	b.n	800aa90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aa92:	f7ff fec7 	bl	800a824 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa9e:	68f9      	ldr	r1, [r7, #12]
 800aaa0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aaa2:	fb01 f303 	mul.w	r3, r1, r3
 800aaa6:	441a      	add	r2, r3
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2200      	movs	r2, #0
 800aab0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681a      	ldr	r2, [r3, #0]
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aac2:	3b01      	subs	r3, #1
 800aac4:	68f9      	ldr	r1, [r7, #12]
 800aac6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aac8:	fb01 f303 	mul.w	r3, r1, r3
 800aacc:	441a      	add	r2, r3
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	22ff      	movs	r2, #255	; 0xff
 800aad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	22ff      	movs	r2, #255	; 0xff
 800aade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d114      	bne.n	800ab12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	691b      	ldr	r3, [r3, #16]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d01a      	beq.n	800ab26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	3310      	adds	r3, #16
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f001 f9bd 	bl	800be74 <xTaskRemoveFromEventList>
 800aafa:	4603      	mov	r3, r0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d012      	beq.n	800ab26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ab00:	4b0c      	ldr	r3, [pc, #48]	; (800ab34 <xQueueGenericReset+0xcc>)
 800ab02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab06:	601a      	str	r2, [r3, #0]
 800ab08:	f3bf 8f4f 	dsb	sy
 800ab0c:	f3bf 8f6f 	isb	sy
 800ab10:	e009      	b.n	800ab26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	3310      	adds	r3, #16
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7ff fca2 	bl	800a460 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	3324      	adds	r3, #36	; 0x24
 800ab20:	4618      	mov	r0, r3
 800ab22:	f7ff fc9d 	bl	800a460 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ab26:	f7ff fead 	bl	800a884 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ab2a:	2301      	movs	r3, #1
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3710      	adds	r7, #16
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	e000ed04 	.word	0xe000ed04

0800ab38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b08e      	sub	sp, #56	; 0x38
 800ab3c:	af02      	add	r7, sp, #8
 800ab3e:	60f8      	str	r0, [r7, #12]
 800ab40:	60b9      	str	r1, [r7, #8]
 800ab42:	607a      	str	r2, [r7, #4]
 800ab44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d10a      	bne.n	800ab62 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ab4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab50:	f383 8811 	msr	BASEPRI, r3
 800ab54:	f3bf 8f6f 	isb	sy
 800ab58:	f3bf 8f4f 	dsb	sy
 800ab5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ab5e:	bf00      	nop
 800ab60:	e7fe      	b.n	800ab60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d10a      	bne.n	800ab7e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ab68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab6c:	f383 8811 	msr	BASEPRI, r3
 800ab70:	f3bf 8f6f 	isb	sy
 800ab74:	f3bf 8f4f 	dsb	sy
 800ab78:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ab7a:	bf00      	nop
 800ab7c:	e7fe      	b.n	800ab7c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d002      	beq.n	800ab8a <xQueueGenericCreateStatic+0x52>
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d001      	beq.n	800ab8e <xQueueGenericCreateStatic+0x56>
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	e000      	b.n	800ab90 <xQueueGenericCreateStatic+0x58>
 800ab8e:	2300      	movs	r3, #0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d10a      	bne.n	800abaa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ab94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab98:	f383 8811 	msr	BASEPRI, r3
 800ab9c:	f3bf 8f6f 	isb	sy
 800aba0:	f3bf 8f4f 	dsb	sy
 800aba4:	623b      	str	r3, [r7, #32]
}
 800aba6:	bf00      	nop
 800aba8:	e7fe      	b.n	800aba8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d102      	bne.n	800abb6 <xQueueGenericCreateStatic+0x7e>
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d101      	bne.n	800abba <xQueueGenericCreateStatic+0x82>
 800abb6:	2301      	movs	r3, #1
 800abb8:	e000      	b.n	800abbc <xQueueGenericCreateStatic+0x84>
 800abba:	2300      	movs	r3, #0
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d10a      	bne.n	800abd6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800abc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc4:	f383 8811 	msr	BASEPRI, r3
 800abc8:	f3bf 8f6f 	isb	sy
 800abcc:	f3bf 8f4f 	dsb	sy
 800abd0:	61fb      	str	r3, [r7, #28]
}
 800abd2:	bf00      	nop
 800abd4:	e7fe      	b.n	800abd4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800abd6:	2350      	movs	r3, #80	; 0x50
 800abd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	2b50      	cmp	r3, #80	; 0x50
 800abde:	d00a      	beq.n	800abf6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800abe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe4:	f383 8811 	msr	BASEPRI, r3
 800abe8:	f3bf 8f6f 	isb	sy
 800abec:	f3bf 8f4f 	dsb	sy
 800abf0:	61bb      	str	r3, [r7, #24]
}
 800abf2:	bf00      	nop
 800abf4:	e7fe      	b.n	800abf4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800abf6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800abfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00d      	beq.n	800ac1e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ac02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac04:	2201      	movs	r2, #1
 800ac06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ac0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac10:	9300      	str	r3, [sp, #0]
 800ac12:	4613      	mov	r3, r2
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	68b9      	ldr	r1, [r7, #8]
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	f000 f83f 	bl	800ac9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ac1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3730      	adds	r7, #48	; 0x30
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b08a      	sub	sp, #40	; 0x28
 800ac2c:	af02      	add	r7, sp, #8
 800ac2e:	60f8      	str	r0, [r7, #12]
 800ac30:	60b9      	str	r1, [r7, #8]
 800ac32:	4613      	mov	r3, r2
 800ac34:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d10a      	bne.n	800ac52 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ac3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac40:	f383 8811 	msr	BASEPRI, r3
 800ac44:	f3bf 8f6f 	isb	sy
 800ac48:	f3bf 8f4f 	dsb	sy
 800ac4c:	613b      	str	r3, [r7, #16]
}
 800ac4e:	bf00      	nop
 800ac50:	e7fe      	b.n	800ac50 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	68ba      	ldr	r2, [r7, #8]
 800ac56:	fb02 f303 	mul.w	r3, r2, r3
 800ac5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ac5c:	69fb      	ldr	r3, [r7, #28]
 800ac5e:	3350      	adds	r3, #80	; 0x50
 800ac60:	4618      	mov	r0, r3
 800ac62:	f7ff fa13 	bl	800a08c <pvPortMalloc>
 800ac66:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ac68:	69bb      	ldr	r3, [r7, #24]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d011      	beq.n	800ac92 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	3350      	adds	r3, #80	; 0x50
 800ac76:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac80:	79fa      	ldrb	r2, [r7, #7]
 800ac82:	69bb      	ldr	r3, [r7, #24]
 800ac84:	9300      	str	r3, [sp, #0]
 800ac86:	4613      	mov	r3, r2
 800ac88:	697a      	ldr	r2, [r7, #20]
 800ac8a:	68b9      	ldr	r1, [r7, #8]
 800ac8c:	68f8      	ldr	r0, [r7, #12]
 800ac8e:	f000 f805 	bl	800ac9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ac92:	69bb      	ldr	r3, [r7, #24]
	}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3720      	adds	r7, #32
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	607a      	str	r2, [r7, #4]
 800aca8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d103      	bne.n	800acb8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800acb0:	69bb      	ldr	r3, [r7, #24]
 800acb2:	69ba      	ldr	r2, [r7, #24]
 800acb4:	601a      	str	r2, [r3, #0]
 800acb6:	e002      	b.n	800acbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800acb8:	69bb      	ldr	r3, [r7, #24]
 800acba:	687a      	ldr	r2, [r7, #4]
 800acbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800acc4:	69bb      	ldr	r3, [r7, #24]
 800acc6:	68ba      	ldr	r2, [r7, #8]
 800acc8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800acca:	2101      	movs	r1, #1
 800accc:	69b8      	ldr	r0, [r7, #24]
 800acce:	f7ff fecb 	bl	800aa68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800acd2:	69bb      	ldr	r3, [r7, #24]
 800acd4:	78fa      	ldrb	r2, [r7, #3]
 800acd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800acda:	bf00      	nop
 800acdc:	3710      	adds	r7, #16
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
	...

0800ace4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b08e      	sub	sp, #56	; 0x38
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	607a      	str	r2, [r7, #4]
 800acf0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800acf2:	2300      	movs	r3, #0
 800acf4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800acfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d10a      	bne.n	800ad16 <xQueueGenericSend+0x32>
	__asm volatile
 800ad00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad04:	f383 8811 	msr	BASEPRI, r3
 800ad08:	f3bf 8f6f 	isb	sy
 800ad0c:	f3bf 8f4f 	dsb	sy
 800ad10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad12:	bf00      	nop
 800ad14:	e7fe      	b.n	800ad14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d103      	bne.n	800ad24 <xQueueGenericSend+0x40>
 800ad1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d101      	bne.n	800ad28 <xQueueGenericSend+0x44>
 800ad24:	2301      	movs	r3, #1
 800ad26:	e000      	b.n	800ad2a <xQueueGenericSend+0x46>
 800ad28:	2300      	movs	r3, #0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d10a      	bne.n	800ad44 <xQueueGenericSend+0x60>
	__asm volatile
 800ad2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad32:	f383 8811 	msr	BASEPRI, r3
 800ad36:	f3bf 8f6f 	isb	sy
 800ad3a:	f3bf 8f4f 	dsb	sy
 800ad3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ad40:	bf00      	nop
 800ad42:	e7fe      	b.n	800ad42 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	2b02      	cmp	r3, #2
 800ad48:	d103      	bne.n	800ad52 <xQueueGenericSend+0x6e>
 800ad4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d101      	bne.n	800ad56 <xQueueGenericSend+0x72>
 800ad52:	2301      	movs	r3, #1
 800ad54:	e000      	b.n	800ad58 <xQueueGenericSend+0x74>
 800ad56:	2300      	movs	r3, #0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d10a      	bne.n	800ad72 <xQueueGenericSend+0x8e>
	__asm volatile
 800ad5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad60:	f383 8811 	msr	BASEPRI, r3
 800ad64:	f3bf 8f6f 	isb	sy
 800ad68:	f3bf 8f4f 	dsb	sy
 800ad6c:	623b      	str	r3, [r7, #32]
}
 800ad6e:	bf00      	nop
 800ad70:	e7fe      	b.n	800ad70 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad72:	f001 fa3d 	bl	800c1f0 <xTaskGetSchedulerState>
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d102      	bne.n	800ad82 <xQueueGenericSend+0x9e>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d101      	bne.n	800ad86 <xQueueGenericSend+0xa2>
 800ad82:	2301      	movs	r3, #1
 800ad84:	e000      	b.n	800ad88 <xQueueGenericSend+0xa4>
 800ad86:	2300      	movs	r3, #0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d10a      	bne.n	800ada2 <xQueueGenericSend+0xbe>
	__asm volatile
 800ad8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad90:	f383 8811 	msr	BASEPRI, r3
 800ad94:	f3bf 8f6f 	isb	sy
 800ad98:	f3bf 8f4f 	dsb	sy
 800ad9c:	61fb      	str	r3, [r7, #28]
}
 800ad9e:	bf00      	nop
 800ada0:	e7fe      	b.n	800ada0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ada2:	f7ff fd3f 	bl	800a824 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ada6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adae:	429a      	cmp	r2, r3
 800adb0:	d302      	bcc.n	800adb8 <xQueueGenericSend+0xd4>
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	2b02      	cmp	r3, #2
 800adb6:	d129      	bne.n	800ae0c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800adb8:	683a      	ldr	r2, [r7, #0]
 800adba:	68b9      	ldr	r1, [r7, #8]
 800adbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800adbe:	f000 fa8b 	bl	800b2d8 <prvCopyDataToQueue>
 800adc2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800adc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d010      	beq.n	800adee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800adcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adce:	3324      	adds	r3, #36	; 0x24
 800add0:	4618      	mov	r0, r3
 800add2:	f001 f84f 	bl	800be74 <xTaskRemoveFromEventList>
 800add6:	4603      	mov	r3, r0
 800add8:	2b00      	cmp	r3, #0
 800adda:	d013      	beq.n	800ae04 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800addc:	4b3f      	ldr	r3, [pc, #252]	; (800aedc <xQueueGenericSend+0x1f8>)
 800adde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ade2:	601a      	str	r2, [r3, #0]
 800ade4:	f3bf 8f4f 	dsb	sy
 800ade8:	f3bf 8f6f 	isb	sy
 800adec:	e00a      	b.n	800ae04 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800adee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d007      	beq.n	800ae04 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800adf4:	4b39      	ldr	r3, [pc, #228]	; (800aedc <xQueueGenericSend+0x1f8>)
 800adf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adfa:	601a      	str	r2, [r3, #0]
 800adfc:	f3bf 8f4f 	dsb	sy
 800ae00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae04:	f7ff fd3e 	bl	800a884 <vPortExitCritical>
				return pdPASS;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	e063      	b.n	800aed4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d103      	bne.n	800ae1a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae12:	f7ff fd37 	bl	800a884 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae16:	2300      	movs	r3, #0
 800ae18:	e05c      	b.n	800aed4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d106      	bne.n	800ae2e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae20:	f107 0314 	add.w	r3, r7, #20
 800ae24:	4618      	mov	r0, r3
 800ae26:	f001 f889 	bl	800bf3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae2e:	f7ff fd29 	bl	800a884 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae32:	f000 fdfb 	bl	800ba2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae36:	f7ff fcf5 	bl	800a824 <vPortEnterCritical>
 800ae3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae40:	b25b      	sxtb	r3, r3
 800ae42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae46:	d103      	bne.n	800ae50 <xQueueGenericSend+0x16c>
 800ae48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae56:	b25b      	sxtb	r3, r3
 800ae58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae5c:	d103      	bne.n	800ae66 <xQueueGenericSend+0x182>
 800ae5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae60:	2200      	movs	r2, #0
 800ae62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae66:	f7ff fd0d 	bl	800a884 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae6a:	1d3a      	adds	r2, r7, #4
 800ae6c:	f107 0314 	add.w	r3, r7, #20
 800ae70:	4611      	mov	r1, r2
 800ae72:	4618      	mov	r0, r3
 800ae74:	f001 f878 	bl	800bf68 <xTaskCheckForTimeOut>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d124      	bne.n	800aec8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ae7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae80:	f000 fb22 	bl	800b4c8 <prvIsQueueFull>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d018      	beq.n	800aebc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ae8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8c:	3310      	adds	r3, #16
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	4611      	mov	r1, r2
 800ae92:	4618      	mov	r0, r3
 800ae94:	f000 ff9e 	bl	800bdd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ae98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae9a:	f000 faad 	bl	800b3f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ae9e:	f000 fdd3 	bl	800ba48 <xTaskResumeAll>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f47f af7c 	bne.w	800ada2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aeaa:	4b0c      	ldr	r3, [pc, #48]	; (800aedc <xQueueGenericSend+0x1f8>)
 800aeac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeb0:	601a      	str	r2, [r3, #0]
 800aeb2:	f3bf 8f4f 	dsb	sy
 800aeb6:	f3bf 8f6f 	isb	sy
 800aeba:	e772      	b.n	800ada2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aebc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aebe:	f000 fa9b 	bl	800b3f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aec2:	f000 fdc1 	bl	800ba48 <xTaskResumeAll>
 800aec6:	e76c      	b.n	800ada2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aeca:	f000 fa95 	bl	800b3f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aece:	f000 fdbb 	bl	800ba48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aed2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3738      	adds	r7, #56	; 0x38
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	e000ed04 	.word	0xe000ed04

0800aee0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b090      	sub	sp, #64	; 0x40
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	60b9      	str	r1, [r7, #8]
 800aeea:	607a      	str	r2, [r7, #4]
 800aeec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800aef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d10a      	bne.n	800af0e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800aef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefc:	f383 8811 	msr	BASEPRI, r3
 800af00:	f3bf 8f6f 	isb	sy
 800af04:	f3bf 8f4f 	dsb	sy
 800af08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800af0a:	bf00      	nop
 800af0c:	e7fe      	b.n	800af0c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d103      	bne.n	800af1c <xQueueGenericSendFromISR+0x3c>
 800af14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d101      	bne.n	800af20 <xQueueGenericSendFromISR+0x40>
 800af1c:	2301      	movs	r3, #1
 800af1e:	e000      	b.n	800af22 <xQueueGenericSendFromISR+0x42>
 800af20:	2300      	movs	r3, #0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d10a      	bne.n	800af3c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800af26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af2a:	f383 8811 	msr	BASEPRI, r3
 800af2e:	f3bf 8f6f 	isb	sy
 800af32:	f3bf 8f4f 	dsb	sy
 800af36:	627b      	str	r3, [r7, #36]	; 0x24
}
 800af38:	bf00      	nop
 800af3a:	e7fe      	b.n	800af3a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	2b02      	cmp	r3, #2
 800af40:	d103      	bne.n	800af4a <xQueueGenericSendFromISR+0x6a>
 800af42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af46:	2b01      	cmp	r3, #1
 800af48:	d101      	bne.n	800af4e <xQueueGenericSendFromISR+0x6e>
 800af4a:	2301      	movs	r3, #1
 800af4c:	e000      	b.n	800af50 <xQueueGenericSendFromISR+0x70>
 800af4e:	2300      	movs	r3, #0
 800af50:	2b00      	cmp	r3, #0
 800af52:	d10a      	bne.n	800af6a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800af54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af58:	f383 8811 	msr	BASEPRI, r3
 800af5c:	f3bf 8f6f 	isb	sy
 800af60:	f3bf 8f4f 	dsb	sy
 800af64:	623b      	str	r3, [r7, #32]
}
 800af66:	bf00      	nop
 800af68:	e7fe      	b.n	800af68 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800af6a:	f7ff fd3d 	bl	800a9e8 <vPortValidateInterruptPriority>
	__asm volatile
 800af6e:	f3ef 8211 	mrs	r2, BASEPRI
 800af72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af76:	f383 8811 	msr	BASEPRI, r3
 800af7a:	f3bf 8f6f 	isb	sy
 800af7e:	f3bf 8f4f 	dsb	sy
 800af82:	61fa      	str	r2, [r7, #28]
 800af84:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800af86:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800af88:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800af8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af92:	429a      	cmp	r2, r3
 800af94:	d302      	bcc.n	800af9c <xQueueGenericSendFromISR+0xbc>
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	2b02      	cmp	r3, #2
 800af9a:	d12f      	bne.n	800affc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800af9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afaa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800afac:	683a      	ldr	r2, [r7, #0]
 800afae:	68b9      	ldr	r1, [r7, #8]
 800afb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800afb2:	f000 f991 	bl	800b2d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800afb6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800afba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afbe:	d112      	bne.n	800afe6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800afc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d016      	beq.n	800aff6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800afc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afca:	3324      	adds	r3, #36	; 0x24
 800afcc:	4618      	mov	r0, r3
 800afce:	f000 ff51 	bl	800be74 <xTaskRemoveFromEventList>
 800afd2:	4603      	mov	r3, r0
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d00e      	beq.n	800aff6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d00b      	beq.n	800aff6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2201      	movs	r2, #1
 800afe2:	601a      	str	r2, [r3, #0]
 800afe4:	e007      	b.n	800aff6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800afe6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800afea:	3301      	adds	r3, #1
 800afec:	b2db      	uxtb	r3, r3
 800afee:	b25a      	sxtb	r2, r3
 800aff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aff6:	2301      	movs	r3, #1
 800aff8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800affa:	e001      	b.n	800b000 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800affc:	2300      	movs	r3, #0
 800affe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b002:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	f383 8811 	msr	BASEPRI, r3
}
 800b00a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b00c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3740      	adds	r7, #64	; 0x40
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
	...

0800b018 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b08c      	sub	sp, #48	; 0x30
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	60b9      	str	r1, [r7, #8]
 800b022:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b024:	2300      	movs	r3, #0
 800b026:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d10a      	bne.n	800b048 <xQueueReceive+0x30>
	__asm volatile
 800b032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b036:	f383 8811 	msr	BASEPRI, r3
 800b03a:	f3bf 8f6f 	isb	sy
 800b03e:	f3bf 8f4f 	dsb	sy
 800b042:	623b      	str	r3, [r7, #32]
}
 800b044:	bf00      	nop
 800b046:	e7fe      	b.n	800b046 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d103      	bne.n	800b056 <xQueueReceive+0x3e>
 800b04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b052:	2b00      	cmp	r3, #0
 800b054:	d101      	bne.n	800b05a <xQueueReceive+0x42>
 800b056:	2301      	movs	r3, #1
 800b058:	e000      	b.n	800b05c <xQueueReceive+0x44>
 800b05a:	2300      	movs	r3, #0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d10a      	bne.n	800b076 <xQueueReceive+0x5e>
	__asm volatile
 800b060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b064:	f383 8811 	msr	BASEPRI, r3
 800b068:	f3bf 8f6f 	isb	sy
 800b06c:	f3bf 8f4f 	dsb	sy
 800b070:	61fb      	str	r3, [r7, #28]
}
 800b072:	bf00      	nop
 800b074:	e7fe      	b.n	800b074 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b076:	f001 f8bb 	bl	800c1f0 <xTaskGetSchedulerState>
 800b07a:	4603      	mov	r3, r0
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d102      	bne.n	800b086 <xQueueReceive+0x6e>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d101      	bne.n	800b08a <xQueueReceive+0x72>
 800b086:	2301      	movs	r3, #1
 800b088:	e000      	b.n	800b08c <xQueueReceive+0x74>
 800b08a:	2300      	movs	r3, #0
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d10a      	bne.n	800b0a6 <xQueueReceive+0x8e>
	__asm volatile
 800b090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b094:	f383 8811 	msr	BASEPRI, r3
 800b098:	f3bf 8f6f 	isb	sy
 800b09c:	f3bf 8f4f 	dsb	sy
 800b0a0:	61bb      	str	r3, [r7, #24]
}
 800b0a2:	bf00      	nop
 800b0a4:	e7fe      	b.n	800b0a4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b0a6:	f7ff fbbd 	bl	800a824 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d01f      	beq.n	800b0f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b0b6:	68b9      	ldr	r1, [r7, #8]
 800b0b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0ba:	f000 f977 	bl	800b3ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c0:	1e5a      	subs	r2, r3, #1
 800b0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c8:	691b      	ldr	r3, [r3, #16]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d00f      	beq.n	800b0ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d0:	3310      	adds	r3, #16
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f000 fece 	bl	800be74 <xTaskRemoveFromEventList>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d007      	beq.n	800b0ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b0de:	4b3d      	ldr	r3, [pc, #244]	; (800b1d4 <xQueueReceive+0x1bc>)
 800b0e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0e4:	601a      	str	r2, [r3, #0]
 800b0e6:	f3bf 8f4f 	dsb	sy
 800b0ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b0ee:	f7ff fbc9 	bl	800a884 <vPortExitCritical>
				return pdPASS;
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	e069      	b.n	800b1ca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d103      	bne.n	800b104 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b0fc:	f7ff fbc2 	bl	800a884 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b100:	2300      	movs	r3, #0
 800b102:	e062      	b.n	800b1ca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b106:	2b00      	cmp	r3, #0
 800b108:	d106      	bne.n	800b118 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b10a:	f107 0310 	add.w	r3, r7, #16
 800b10e:	4618      	mov	r0, r3
 800b110:	f000 ff14 	bl	800bf3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b114:	2301      	movs	r3, #1
 800b116:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b118:	f7ff fbb4 	bl	800a884 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b11c:	f000 fc86 	bl	800ba2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b120:	f7ff fb80 	bl	800a824 <vPortEnterCritical>
 800b124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b126:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b12a:	b25b      	sxtb	r3, r3
 800b12c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b130:	d103      	bne.n	800b13a <xQueueReceive+0x122>
 800b132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b134:	2200      	movs	r2, #0
 800b136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b140:	b25b      	sxtb	r3, r3
 800b142:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b146:	d103      	bne.n	800b150 <xQueueReceive+0x138>
 800b148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b14a:	2200      	movs	r2, #0
 800b14c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b150:	f7ff fb98 	bl	800a884 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b154:	1d3a      	adds	r2, r7, #4
 800b156:	f107 0310 	add.w	r3, r7, #16
 800b15a:	4611      	mov	r1, r2
 800b15c:	4618      	mov	r0, r3
 800b15e:	f000 ff03 	bl	800bf68 <xTaskCheckForTimeOut>
 800b162:	4603      	mov	r3, r0
 800b164:	2b00      	cmp	r3, #0
 800b166:	d123      	bne.n	800b1b0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b168:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b16a:	f000 f997 	bl	800b49c <prvIsQueueEmpty>
 800b16e:	4603      	mov	r3, r0
 800b170:	2b00      	cmp	r3, #0
 800b172:	d017      	beq.n	800b1a4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b176:	3324      	adds	r3, #36	; 0x24
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	4611      	mov	r1, r2
 800b17c:	4618      	mov	r0, r3
 800b17e:	f000 fe29 	bl	800bdd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b184:	f000 f938 	bl	800b3f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b188:	f000 fc5e 	bl	800ba48 <xTaskResumeAll>
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d189      	bne.n	800b0a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b192:	4b10      	ldr	r3, [pc, #64]	; (800b1d4 <xQueueReceive+0x1bc>)
 800b194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b198:	601a      	str	r2, [r3, #0]
 800b19a:	f3bf 8f4f 	dsb	sy
 800b19e:	f3bf 8f6f 	isb	sy
 800b1a2:	e780      	b.n	800b0a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b1a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1a6:	f000 f927 	bl	800b3f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b1aa:	f000 fc4d 	bl	800ba48 <xTaskResumeAll>
 800b1ae:	e77a      	b.n	800b0a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b1b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1b2:	f000 f921 	bl	800b3f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b1b6:	f000 fc47 	bl	800ba48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1bc:	f000 f96e 	bl	800b49c <prvIsQueueEmpty>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	f43f af6f 	beq.w	800b0a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b1c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3730      	adds	r7, #48	; 0x30
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	e000ed04 	.word	0xe000ed04

0800b1d8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b08e      	sub	sp, #56	; 0x38
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	60b9      	str	r1, [r7, #8]
 800b1e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d10a      	bne.n	800b204 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f2:	f383 8811 	msr	BASEPRI, r3
 800b1f6:	f3bf 8f6f 	isb	sy
 800b1fa:	f3bf 8f4f 	dsb	sy
 800b1fe:	623b      	str	r3, [r7, #32]
}
 800b200:	bf00      	nop
 800b202:	e7fe      	b.n	800b202 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d103      	bne.n	800b212 <xQueueReceiveFromISR+0x3a>
 800b20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d101      	bne.n	800b216 <xQueueReceiveFromISR+0x3e>
 800b212:	2301      	movs	r3, #1
 800b214:	e000      	b.n	800b218 <xQueueReceiveFromISR+0x40>
 800b216:	2300      	movs	r3, #0
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d10a      	bne.n	800b232 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b220:	f383 8811 	msr	BASEPRI, r3
 800b224:	f3bf 8f6f 	isb	sy
 800b228:	f3bf 8f4f 	dsb	sy
 800b22c:	61fb      	str	r3, [r7, #28]
}
 800b22e:	bf00      	nop
 800b230:	e7fe      	b.n	800b230 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b232:	f7ff fbd9 	bl	800a9e8 <vPortValidateInterruptPriority>
	__asm volatile
 800b236:	f3ef 8211 	mrs	r2, BASEPRI
 800b23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b23e:	f383 8811 	msr	BASEPRI, r3
 800b242:	f3bf 8f6f 	isb	sy
 800b246:	f3bf 8f4f 	dsb	sy
 800b24a:	61ba      	str	r2, [r7, #24]
 800b24c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b24e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b250:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b256:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d02f      	beq.n	800b2be <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b260:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b268:	68b9      	ldr	r1, [r7, #8]
 800b26a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b26c:	f000 f89e 	bl	800b3ac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b272:	1e5a      	subs	r2, r3, #1
 800b274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b276:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b278:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b27c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b280:	d112      	bne.n	800b2a8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b284:	691b      	ldr	r3, [r3, #16]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d016      	beq.n	800b2b8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b28c:	3310      	adds	r3, #16
 800b28e:	4618      	mov	r0, r3
 800b290:	f000 fdf0 	bl	800be74 <xTaskRemoveFromEventList>
 800b294:	4603      	mov	r3, r0
 800b296:	2b00      	cmp	r3, #0
 800b298:	d00e      	beq.n	800b2b8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d00b      	beq.n	800b2b8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	601a      	str	r2, [r3, #0]
 800b2a6:	e007      	b.n	800b2b8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b2a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2ac:	3301      	adds	r3, #1
 800b2ae:	b2db      	uxtb	r3, r3
 800b2b0:	b25a      	sxtb	r2, r3
 800b2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	637b      	str	r3, [r7, #52]	; 0x34
 800b2bc:	e001      	b.n	800b2c2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	637b      	str	r3, [r7, #52]	; 0x34
 800b2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	f383 8811 	msr	BASEPRI, r3
}
 800b2cc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b2ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3738      	adds	r7, #56	; 0x38
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b086      	sub	sp, #24
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	60f8      	str	r0, [r7, #12]
 800b2e0:	60b9      	str	r1, [r7, #8]
 800b2e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d10d      	bne.n	800b312 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d14d      	bne.n	800b39a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	689b      	ldr	r3, [r3, #8]
 800b302:	4618      	mov	r0, r3
 800b304:	f000 ff92 	bl	800c22c <xTaskPriorityDisinherit>
 800b308:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2200      	movs	r2, #0
 800b30e:	609a      	str	r2, [r3, #8]
 800b310:	e043      	b.n	800b39a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d119      	bne.n	800b34c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	6858      	ldr	r0, [r3, #4]
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b320:	461a      	mov	r2, r3
 800b322:	68b9      	ldr	r1, [r7, #8]
 800b324:	f001 fbda 	bl	800cadc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	685a      	ldr	r2, [r3, #4]
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b330:	441a      	add	r2, r3
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	685a      	ldr	r2, [r3, #4]
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	689b      	ldr	r3, [r3, #8]
 800b33e:	429a      	cmp	r2, r3
 800b340:	d32b      	bcc.n	800b39a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681a      	ldr	r2, [r3, #0]
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	605a      	str	r2, [r3, #4]
 800b34a:	e026      	b.n	800b39a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	68d8      	ldr	r0, [r3, #12]
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b354:	461a      	mov	r2, r3
 800b356:	68b9      	ldr	r1, [r7, #8]
 800b358:	f001 fbc0 	bl	800cadc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	68da      	ldr	r2, [r3, #12]
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b364:	425b      	negs	r3, r3
 800b366:	441a      	add	r2, r3
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	68da      	ldr	r2, [r3, #12]
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	429a      	cmp	r2, r3
 800b376:	d207      	bcs.n	800b388 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	689a      	ldr	r2, [r3, #8]
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b380:	425b      	negs	r3, r3
 800b382:	441a      	add	r2, r3
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2b02      	cmp	r3, #2
 800b38c:	d105      	bne.n	800b39a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d002      	beq.n	800b39a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	3b01      	subs	r3, #1
 800b398:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	1c5a      	adds	r2, r3, #1
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b3a2:	697b      	ldr	r3, [r7, #20]
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3718      	adds	r7, #24
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b082      	sub	sp, #8
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d018      	beq.n	800b3f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	68da      	ldr	r2, [r3, #12]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3c6:	441a      	add	r2, r3
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	68da      	ldr	r2, [r3, #12]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d303      	bcc.n	800b3e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681a      	ldr	r2, [r3, #0]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	68d9      	ldr	r1, [r3, #12]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	6838      	ldr	r0, [r7, #0]
 800b3ec:	f001 fb76 	bl	800cadc <memcpy>
	}
}
 800b3f0:	bf00      	nop
 800b3f2:	3708      	adds	r7, #8
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b400:	f7ff fa10 	bl	800a824 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b40a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b40c:	e011      	b.n	800b432 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b412:	2b00      	cmp	r3, #0
 800b414:	d012      	beq.n	800b43c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	3324      	adds	r3, #36	; 0x24
 800b41a:	4618      	mov	r0, r3
 800b41c:	f000 fd2a 	bl	800be74 <xTaskRemoveFromEventList>
 800b420:	4603      	mov	r3, r0
 800b422:	2b00      	cmp	r3, #0
 800b424:	d001      	beq.n	800b42a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b426:	f000 fe01 	bl	800c02c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b42a:	7bfb      	ldrb	r3, [r7, #15]
 800b42c:	3b01      	subs	r3, #1
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b436:	2b00      	cmp	r3, #0
 800b438:	dce9      	bgt.n	800b40e <prvUnlockQueue+0x16>
 800b43a:	e000      	b.n	800b43e <prvUnlockQueue+0x46>
					break;
 800b43c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	22ff      	movs	r2, #255	; 0xff
 800b442:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b446:	f7ff fa1d 	bl	800a884 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b44a:	f7ff f9eb 	bl	800a824 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b454:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b456:	e011      	b.n	800b47c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	691b      	ldr	r3, [r3, #16]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d012      	beq.n	800b486 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	3310      	adds	r3, #16
 800b464:	4618      	mov	r0, r3
 800b466:	f000 fd05 	bl	800be74 <xTaskRemoveFromEventList>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d001      	beq.n	800b474 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b470:	f000 fddc 	bl	800c02c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b474:	7bbb      	ldrb	r3, [r7, #14]
 800b476:	3b01      	subs	r3, #1
 800b478:	b2db      	uxtb	r3, r3
 800b47a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b47c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b480:	2b00      	cmp	r3, #0
 800b482:	dce9      	bgt.n	800b458 <prvUnlockQueue+0x60>
 800b484:	e000      	b.n	800b488 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b486:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	22ff      	movs	r2, #255	; 0xff
 800b48c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b490:	f7ff f9f8 	bl	800a884 <vPortExitCritical>
}
 800b494:	bf00      	nop
 800b496:	3710      	adds	r7, #16
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b4a4:	f7ff f9be 	bl	800a824 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d102      	bne.n	800b4b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	60fb      	str	r3, [r7, #12]
 800b4b4:	e001      	b.n	800b4ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b4ba:	f7ff f9e3 	bl	800a884 <vPortExitCritical>

	return xReturn;
 800b4be:	68fb      	ldr	r3, [r7, #12]
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3710      	adds	r7, #16
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b4d0:	f7ff f9a8 	bl	800a824 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d102      	bne.n	800b4e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	60fb      	str	r3, [r7, #12]
 800b4e4:	e001      	b.n	800b4ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b4ea:	f7ff f9cb 	bl	800a884 <vPortExitCritical>

	return xReturn;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3710      	adds	r7, #16
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b085      	sub	sp, #20
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b502:	2300      	movs	r3, #0
 800b504:	60fb      	str	r3, [r7, #12]
 800b506:	e014      	b.n	800b532 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b508:	4a0f      	ldr	r2, [pc, #60]	; (800b548 <vQueueAddToRegistry+0x50>)
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d10b      	bne.n	800b52c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b514:	490c      	ldr	r1, [pc, #48]	; (800b548 <vQueueAddToRegistry+0x50>)
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	683a      	ldr	r2, [r7, #0]
 800b51a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b51e:	4a0a      	ldr	r2, [pc, #40]	; (800b548 <vQueueAddToRegistry+0x50>)
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	00db      	lsls	r3, r3, #3
 800b524:	4413      	add	r3, r2
 800b526:	687a      	ldr	r2, [r7, #4]
 800b528:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b52a:	e006      	b.n	800b53a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	3301      	adds	r3, #1
 800b530:	60fb      	str	r3, [r7, #12]
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	2b07      	cmp	r3, #7
 800b536:	d9e7      	bls.n	800b508 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b538:	bf00      	nop
 800b53a:	bf00      	nop
 800b53c:	3714      	adds	r7, #20
 800b53e:	46bd      	mov	sp, r7
 800b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b544:	4770      	bx	lr
 800b546:	bf00      	nop
 800b548:	24005120 	.word	0x24005120

0800b54c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b086      	sub	sp, #24
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b55c:	f7ff f962 	bl	800a824 <vPortEnterCritical>
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b566:	b25b      	sxtb	r3, r3
 800b568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b56c:	d103      	bne.n	800b576 <vQueueWaitForMessageRestricted+0x2a>
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	2200      	movs	r2, #0
 800b572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b57c:	b25b      	sxtb	r3, r3
 800b57e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b582:	d103      	bne.n	800b58c <vQueueWaitForMessageRestricted+0x40>
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	2200      	movs	r2, #0
 800b588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b58c:	f7ff f97a 	bl	800a884 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b594:	2b00      	cmp	r3, #0
 800b596:	d106      	bne.n	800b5a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	3324      	adds	r3, #36	; 0x24
 800b59c:	687a      	ldr	r2, [r7, #4]
 800b59e:	68b9      	ldr	r1, [r7, #8]
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f000 fc3b 	bl	800be1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b5a6:	6978      	ldr	r0, [r7, #20]
 800b5a8:	f7ff ff26 	bl	800b3f8 <prvUnlockQueue>
	}
 800b5ac:	bf00      	nop
 800b5ae:	3718      	adds	r7, #24
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b08e      	sub	sp, #56	; 0x38
 800b5b8:	af04      	add	r7, sp, #16
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	60b9      	str	r1, [r7, #8]
 800b5be:	607a      	str	r2, [r7, #4]
 800b5c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b5c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d10a      	bne.n	800b5de <xTaskCreateStatic+0x2a>
	__asm volatile
 800b5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5cc:	f383 8811 	msr	BASEPRI, r3
 800b5d0:	f3bf 8f6f 	isb	sy
 800b5d4:	f3bf 8f4f 	dsb	sy
 800b5d8:	623b      	str	r3, [r7, #32]
}
 800b5da:	bf00      	nop
 800b5dc:	e7fe      	b.n	800b5dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d10a      	bne.n	800b5fa <xTaskCreateStatic+0x46>
	__asm volatile
 800b5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e8:	f383 8811 	msr	BASEPRI, r3
 800b5ec:	f3bf 8f6f 	isb	sy
 800b5f0:	f3bf 8f4f 	dsb	sy
 800b5f4:	61fb      	str	r3, [r7, #28]
}
 800b5f6:	bf00      	nop
 800b5f8:	e7fe      	b.n	800b5f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b5fa:	235c      	movs	r3, #92	; 0x5c
 800b5fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	2b5c      	cmp	r3, #92	; 0x5c
 800b602:	d00a      	beq.n	800b61a <xTaskCreateStatic+0x66>
	__asm volatile
 800b604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b608:	f383 8811 	msr	BASEPRI, r3
 800b60c:	f3bf 8f6f 	isb	sy
 800b610:	f3bf 8f4f 	dsb	sy
 800b614:	61bb      	str	r3, [r7, #24]
}
 800b616:	bf00      	nop
 800b618:	e7fe      	b.n	800b618 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b61a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d01e      	beq.n	800b660 <xTaskCreateStatic+0xac>
 800b622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b624:	2b00      	cmp	r3, #0
 800b626:	d01b      	beq.n	800b660 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b62a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b62e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b630:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b634:	2202      	movs	r2, #2
 800b636:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b63a:	2300      	movs	r3, #0
 800b63c:	9303      	str	r3, [sp, #12]
 800b63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b640:	9302      	str	r3, [sp, #8]
 800b642:	f107 0314 	add.w	r3, r7, #20
 800b646:	9301      	str	r3, [sp, #4]
 800b648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b64a:	9300      	str	r3, [sp, #0]
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	687a      	ldr	r2, [r7, #4]
 800b650:	68b9      	ldr	r1, [r7, #8]
 800b652:	68f8      	ldr	r0, [r7, #12]
 800b654:	f000 f850 	bl	800b6f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b658:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b65a:	f000 f8dd 	bl	800b818 <prvAddNewTaskToReadyList>
 800b65e:	e001      	b.n	800b664 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b660:	2300      	movs	r3, #0
 800b662:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b664:	697b      	ldr	r3, [r7, #20]
	}
 800b666:	4618      	mov	r0, r3
 800b668:	3728      	adds	r7, #40	; 0x28
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}

0800b66e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b66e:	b580      	push	{r7, lr}
 800b670:	b08c      	sub	sp, #48	; 0x30
 800b672:	af04      	add	r7, sp, #16
 800b674:	60f8      	str	r0, [r7, #12]
 800b676:	60b9      	str	r1, [r7, #8]
 800b678:	603b      	str	r3, [r7, #0]
 800b67a:	4613      	mov	r3, r2
 800b67c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b67e:	88fb      	ldrh	r3, [r7, #6]
 800b680:	009b      	lsls	r3, r3, #2
 800b682:	4618      	mov	r0, r3
 800b684:	f7fe fd02 	bl	800a08c <pvPortMalloc>
 800b688:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d00e      	beq.n	800b6ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b690:	205c      	movs	r0, #92	; 0x5c
 800b692:	f7fe fcfb 	bl	800a08c <pvPortMalloc>
 800b696:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b698:	69fb      	ldr	r3, [r7, #28]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d003      	beq.n	800b6a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b69e:	69fb      	ldr	r3, [r7, #28]
 800b6a0:	697a      	ldr	r2, [r7, #20]
 800b6a2:	631a      	str	r2, [r3, #48]	; 0x30
 800b6a4:	e005      	b.n	800b6b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b6a6:	6978      	ldr	r0, [r7, #20]
 800b6a8:	f7fe fdbc 	bl	800a224 <vPortFree>
 800b6ac:	e001      	b.n	800b6b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b6b2:	69fb      	ldr	r3, [r7, #28]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d017      	beq.n	800b6e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b6b8:	69fb      	ldr	r3, [r7, #28]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b6c0:	88fa      	ldrh	r2, [r7, #6]
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	9303      	str	r3, [sp, #12]
 800b6c6:	69fb      	ldr	r3, [r7, #28]
 800b6c8:	9302      	str	r3, [sp, #8]
 800b6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6cc:	9301      	str	r3, [sp, #4]
 800b6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d0:	9300      	str	r3, [sp, #0]
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	68b9      	ldr	r1, [r7, #8]
 800b6d6:	68f8      	ldr	r0, [r7, #12]
 800b6d8:	f000 f80e 	bl	800b6f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b6dc:	69f8      	ldr	r0, [r7, #28]
 800b6de:	f000 f89b 	bl	800b818 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	61bb      	str	r3, [r7, #24]
 800b6e6:	e002      	b.n	800b6ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b6e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b6ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b6ee:	69bb      	ldr	r3, [r7, #24]
	}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3720      	adds	r7, #32
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b088      	sub	sp, #32
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	60f8      	str	r0, [r7, #12]
 800b700:	60b9      	str	r1, [r7, #8]
 800b702:	607a      	str	r2, [r7, #4]
 800b704:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b708:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	009b      	lsls	r3, r3, #2
 800b70e:	461a      	mov	r2, r3
 800b710:	21a5      	movs	r1, #165	; 0xa5
 800b712:	f001 f9f1 	bl	800caf8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b71a:	6879      	ldr	r1, [r7, #4]
 800b71c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b720:	440b      	add	r3, r1
 800b722:	009b      	lsls	r3, r3, #2
 800b724:	4413      	add	r3, r2
 800b726:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b728:	69bb      	ldr	r3, [r7, #24]
 800b72a:	f023 0307 	bic.w	r3, r3, #7
 800b72e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b730:	69bb      	ldr	r3, [r7, #24]
 800b732:	f003 0307 	and.w	r3, r3, #7
 800b736:	2b00      	cmp	r3, #0
 800b738:	d00a      	beq.n	800b750 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73e:	f383 8811 	msr	BASEPRI, r3
 800b742:	f3bf 8f6f 	isb	sy
 800b746:	f3bf 8f4f 	dsb	sy
 800b74a:	617b      	str	r3, [r7, #20]
}
 800b74c:	bf00      	nop
 800b74e:	e7fe      	b.n	800b74e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d01f      	beq.n	800b796 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b756:	2300      	movs	r3, #0
 800b758:	61fb      	str	r3, [r7, #28]
 800b75a:	e012      	b.n	800b782 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b75c:	68ba      	ldr	r2, [r7, #8]
 800b75e:	69fb      	ldr	r3, [r7, #28]
 800b760:	4413      	add	r3, r2
 800b762:	7819      	ldrb	r1, [r3, #0]
 800b764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b766:	69fb      	ldr	r3, [r7, #28]
 800b768:	4413      	add	r3, r2
 800b76a:	3334      	adds	r3, #52	; 0x34
 800b76c:	460a      	mov	r2, r1
 800b76e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b770:	68ba      	ldr	r2, [r7, #8]
 800b772:	69fb      	ldr	r3, [r7, #28]
 800b774:	4413      	add	r3, r2
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d006      	beq.n	800b78a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b77c:	69fb      	ldr	r3, [r7, #28]
 800b77e:	3301      	adds	r3, #1
 800b780:	61fb      	str	r3, [r7, #28]
 800b782:	69fb      	ldr	r3, [r7, #28]
 800b784:	2b0f      	cmp	r3, #15
 800b786:	d9e9      	bls.n	800b75c <prvInitialiseNewTask+0x64>
 800b788:	e000      	b.n	800b78c <prvInitialiseNewTask+0x94>
			{
				break;
 800b78a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78e:	2200      	movs	r2, #0
 800b790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b794:	e003      	b.n	800b79e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b798:	2200      	movs	r2, #0
 800b79a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a0:	2b37      	cmp	r3, #55	; 0x37
 800b7a2:	d901      	bls.n	800b7a8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b7a4:	2337      	movs	r3, #55	; 0x37
 800b7a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7bc:	3304      	adds	r3, #4
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f7fe fe6e 	bl	800a4a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c6:	3318      	adds	r3, #24
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7fe fe69 	bl	800a4a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b7f2:	683a      	ldr	r2, [r7, #0]
 800b7f4:	68f9      	ldr	r1, [r7, #12]
 800b7f6:	69b8      	ldr	r0, [r7, #24]
 800b7f8:	f7fe fee6 	bl	800a5c8 <pxPortInitialiseStack>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b800:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b804:	2b00      	cmp	r3, #0
 800b806:	d002      	beq.n	800b80e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b80a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b80c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b80e:	bf00      	nop
 800b810:	3720      	adds	r7, #32
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
	...

0800b818 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b820:	f7ff f800 	bl	800a824 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b824:	4b2d      	ldr	r3, [pc, #180]	; (800b8dc <prvAddNewTaskToReadyList+0xc4>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	3301      	adds	r3, #1
 800b82a:	4a2c      	ldr	r2, [pc, #176]	; (800b8dc <prvAddNewTaskToReadyList+0xc4>)
 800b82c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b82e:	4b2c      	ldr	r3, [pc, #176]	; (800b8e0 <prvAddNewTaskToReadyList+0xc8>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d109      	bne.n	800b84a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b836:	4a2a      	ldr	r2, [pc, #168]	; (800b8e0 <prvAddNewTaskToReadyList+0xc8>)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b83c:	4b27      	ldr	r3, [pc, #156]	; (800b8dc <prvAddNewTaskToReadyList+0xc4>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	2b01      	cmp	r3, #1
 800b842:	d110      	bne.n	800b866 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b844:	f000 fc16 	bl	800c074 <prvInitialiseTaskLists>
 800b848:	e00d      	b.n	800b866 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b84a:	4b26      	ldr	r3, [pc, #152]	; (800b8e4 <prvAddNewTaskToReadyList+0xcc>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d109      	bne.n	800b866 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b852:	4b23      	ldr	r3, [pc, #140]	; (800b8e0 <prvAddNewTaskToReadyList+0xc8>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d802      	bhi.n	800b866 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b860:	4a1f      	ldr	r2, [pc, #124]	; (800b8e0 <prvAddNewTaskToReadyList+0xc8>)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b866:	4b20      	ldr	r3, [pc, #128]	; (800b8e8 <prvAddNewTaskToReadyList+0xd0>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	3301      	adds	r3, #1
 800b86c:	4a1e      	ldr	r2, [pc, #120]	; (800b8e8 <prvAddNewTaskToReadyList+0xd0>)
 800b86e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b870:	4b1d      	ldr	r3, [pc, #116]	; (800b8e8 <prvAddNewTaskToReadyList+0xd0>)
 800b872:	681a      	ldr	r2, [r3, #0]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b87c:	4b1b      	ldr	r3, [pc, #108]	; (800b8ec <prvAddNewTaskToReadyList+0xd4>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	429a      	cmp	r2, r3
 800b882:	d903      	bls.n	800b88c <prvAddNewTaskToReadyList+0x74>
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b888:	4a18      	ldr	r2, [pc, #96]	; (800b8ec <prvAddNewTaskToReadyList+0xd4>)
 800b88a:	6013      	str	r3, [r2, #0]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b890:	4613      	mov	r3, r2
 800b892:	009b      	lsls	r3, r3, #2
 800b894:	4413      	add	r3, r2
 800b896:	009b      	lsls	r3, r3, #2
 800b898:	4a15      	ldr	r2, [pc, #84]	; (800b8f0 <prvAddNewTaskToReadyList+0xd8>)
 800b89a:	441a      	add	r2, r3
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	3304      	adds	r3, #4
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	4610      	mov	r0, r2
 800b8a4:	f7fe fe09 	bl	800a4ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b8a8:	f7fe ffec 	bl	800a884 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b8ac:	4b0d      	ldr	r3, [pc, #52]	; (800b8e4 <prvAddNewTaskToReadyList+0xcc>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d00e      	beq.n	800b8d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b8b4:	4b0a      	ldr	r3, [pc, #40]	; (800b8e0 <prvAddNewTaskToReadyList+0xc8>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	d207      	bcs.n	800b8d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b8c2:	4b0c      	ldr	r3, [pc, #48]	; (800b8f4 <prvAddNewTaskToReadyList+0xdc>)
 800b8c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8c8:	601a      	str	r2, [r3, #0]
 800b8ca:	f3bf 8f4f 	dsb	sy
 800b8ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b8d2:	bf00      	nop
 800b8d4:	3708      	adds	r7, #8
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	240049c0 	.word	0x240049c0
 800b8e0:	240044ec 	.word	0x240044ec
 800b8e4:	240049cc 	.word	0x240049cc
 800b8e8:	240049dc 	.word	0x240049dc
 800b8ec:	240049c8 	.word	0x240049c8
 800b8f0:	240044f0 	.word	0x240044f0
 800b8f4:	e000ed04 	.word	0xe000ed04

0800b8f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b900:	2300      	movs	r3, #0
 800b902:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d017      	beq.n	800b93a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b90a:	4b13      	ldr	r3, [pc, #76]	; (800b958 <vTaskDelay+0x60>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d00a      	beq.n	800b928 <vTaskDelay+0x30>
	__asm volatile
 800b912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b916:	f383 8811 	msr	BASEPRI, r3
 800b91a:	f3bf 8f6f 	isb	sy
 800b91e:	f3bf 8f4f 	dsb	sy
 800b922:	60bb      	str	r3, [r7, #8]
}
 800b924:	bf00      	nop
 800b926:	e7fe      	b.n	800b926 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b928:	f000 f880 	bl	800ba2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b92c:	2100      	movs	r1, #0
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 fcea 	bl	800c308 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b934:	f000 f888 	bl	800ba48 <xTaskResumeAll>
 800b938:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d107      	bne.n	800b950 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b940:	4b06      	ldr	r3, [pc, #24]	; (800b95c <vTaskDelay+0x64>)
 800b942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b946:	601a      	str	r2, [r3, #0]
 800b948:	f3bf 8f4f 	dsb	sy
 800b94c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b950:	bf00      	nop
 800b952:	3710      	adds	r7, #16
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}
 800b958:	240049e8 	.word	0x240049e8
 800b95c:	e000ed04 	.word	0xe000ed04

0800b960 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b08a      	sub	sp, #40	; 0x28
 800b964:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b966:	2300      	movs	r3, #0
 800b968:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b96a:	2300      	movs	r3, #0
 800b96c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b96e:	463a      	mov	r2, r7
 800b970:	1d39      	adds	r1, r7, #4
 800b972:	f107 0308 	add.w	r3, r7, #8
 800b976:	4618      	mov	r0, r3
 800b978:	f7fe fb54 	bl	800a024 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b97c:	6839      	ldr	r1, [r7, #0]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	68ba      	ldr	r2, [r7, #8]
 800b982:	9202      	str	r2, [sp, #8]
 800b984:	9301      	str	r3, [sp, #4]
 800b986:	2300      	movs	r3, #0
 800b988:	9300      	str	r3, [sp, #0]
 800b98a:	2300      	movs	r3, #0
 800b98c:	460a      	mov	r2, r1
 800b98e:	4921      	ldr	r1, [pc, #132]	; (800ba14 <vTaskStartScheduler+0xb4>)
 800b990:	4821      	ldr	r0, [pc, #132]	; (800ba18 <vTaskStartScheduler+0xb8>)
 800b992:	f7ff fe0f 	bl	800b5b4 <xTaskCreateStatic>
 800b996:	4603      	mov	r3, r0
 800b998:	4a20      	ldr	r2, [pc, #128]	; (800ba1c <vTaskStartScheduler+0xbc>)
 800b99a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b99c:	4b1f      	ldr	r3, [pc, #124]	; (800ba1c <vTaskStartScheduler+0xbc>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d002      	beq.n	800b9aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	617b      	str	r3, [r7, #20]
 800b9a8:	e001      	b.n	800b9ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d102      	bne.n	800b9ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b9b4:	f000 fcfc 	bl	800c3b0 <xTimerCreateTimerTask>
 800b9b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d116      	bne.n	800b9ee <vTaskStartScheduler+0x8e>
	__asm volatile
 800b9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c4:	f383 8811 	msr	BASEPRI, r3
 800b9c8:	f3bf 8f6f 	isb	sy
 800b9cc:	f3bf 8f4f 	dsb	sy
 800b9d0:	613b      	str	r3, [r7, #16]
}
 800b9d2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b9d4:	4b12      	ldr	r3, [pc, #72]	; (800ba20 <vTaskStartScheduler+0xc0>)
 800b9d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b9da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b9dc:	4b11      	ldr	r3, [pc, #68]	; (800ba24 <vTaskStartScheduler+0xc4>)
 800b9de:	2201      	movs	r2, #1
 800b9e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b9e2:	4b11      	ldr	r3, [pc, #68]	; (800ba28 <vTaskStartScheduler+0xc8>)
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b9e8:	f7fe fe7a 	bl	800a6e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b9ec:	e00e      	b.n	800ba0c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9f4:	d10a      	bne.n	800ba0c <vTaskStartScheduler+0xac>
	__asm volatile
 800b9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fa:	f383 8811 	msr	BASEPRI, r3
 800b9fe:	f3bf 8f6f 	isb	sy
 800ba02:	f3bf 8f4f 	dsb	sy
 800ba06:	60fb      	str	r3, [r7, #12]
}
 800ba08:	bf00      	nop
 800ba0a:	e7fe      	b.n	800ba0a <vTaskStartScheduler+0xaa>
}
 800ba0c:	bf00      	nop
 800ba0e:	3718      	adds	r7, #24
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}
 800ba14:	08011394 	.word	0x08011394
 800ba18:	0800c045 	.word	0x0800c045
 800ba1c:	240049e4 	.word	0x240049e4
 800ba20:	240049e0 	.word	0x240049e0
 800ba24:	240049cc 	.word	0x240049cc
 800ba28:	240049c4 	.word	0x240049c4

0800ba2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ba30:	4b04      	ldr	r3, [pc, #16]	; (800ba44 <vTaskSuspendAll+0x18>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	3301      	adds	r3, #1
 800ba36:	4a03      	ldr	r2, [pc, #12]	; (800ba44 <vTaskSuspendAll+0x18>)
 800ba38:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ba3a:	bf00      	nop
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr
 800ba44:	240049e8 	.word	0x240049e8

0800ba48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ba52:	2300      	movs	r3, #0
 800ba54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ba56:	4b42      	ldr	r3, [pc, #264]	; (800bb60 <xTaskResumeAll+0x118>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d10a      	bne.n	800ba74 <xTaskResumeAll+0x2c>
	__asm volatile
 800ba5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba62:	f383 8811 	msr	BASEPRI, r3
 800ba66:	f3bf 8f6f 	isb	sy
 800ba6a:	f3bf 8f4f 	dsb	sy
 800ba6e:	603b      	str	r3, [r7, #0]
}
 800ba70:	bf00      	nop
 800ba72:	e7fe      	b.n	800ba72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ba74:	f7fe fed6 	bl	800a824 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ba78:	4b39      	ldr	r3, [pc, #228]	; (800bb60 <xTaskResumeAll+0x118>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	3b01      	subs	r3, #1
 800ba7e:	4a38      	ldr	r2, [pc, #224]	; (800bb60 <xTaskResumeAll+0x118>)
 800ba80:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba82:	4b37      	ldr	r3, [pc, #220]	; (800bb60 <xTaskResumeAll+0x118>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d162      	bne.n	800bb50 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ba8a:	4b36      	ldr	r3, [pc, #216]	; (800bb64 <xTaskResumeAll+0x11c>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d05e      	beq.n	800bb50 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba92:	e02f      	b.n	800baf4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba94:	4b34      	ldr	r3, [pc, #208]	; (800bb68 <xTaskResumeAll+0x120>)
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	68db      	ldr	r3, [r3, #12]
 800ba9a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	3318      	adds	r3, #24
 800baa0:	4618      	mov	r0, r3
 800baa2:	f7fe fd67 	bl	800a574 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	3304      	adds	r3, #4
 800baaa:	4618      	mov	r0, r3
 800baac:	f7fe fd62 	bl	800a574 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bab4:	4b2d      	ldr	r3, [pc, #180]	; (800bb6c <xTaskResumeAll+0x124>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	429a      	cmp	r2, r3
 800baba:	d903      	bls.n	800bac4 <xTaskResumeAll+0x7c>
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bac0:	4a2a      	ldr	r2, [pc, #168]	; (800bb6c <xTaskResumeAll+0x124>)
 800bac2:	6013      	str	r3, [r2, #0]
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bac8:	4613      	mov	r3, r2
 800baca:	009b      	lsls	r3, r3, #2
 800bacc:	4413      	add	r3, r2
 800bace:	009b      	lsls	r3, r3, #2
 800bad0:	4a27      	ldr	r2, [pc, #156]	; (800bb70 <xTaskResumeAll+0x128>)
 800bad2:	441a      	add	r2, r3
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	3304      	adds	r3, #4
 800bad8:	4619      	mov	r1, r3
 800bada:	4610      	mov	r0, r2
 800badc:	f7fe fced 	bl	800a4ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bae4:	4b23      	ldr	r3, [pc, #140]	; (800bb74 <xTaskResumeAll+0x12c>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baea:	429a      	cmp	r2, r3
 800baec:	d302      	bcc.n	800baf4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800baee:	4b22      	ldr	r3, [pc, #136]	; (800bb78 <xTaskResumeAll+0x130>)
 800baf0:	2201      	movs	r2, #1
 800baf2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800baf4:	4b1c      	ldr	r3, [pc, #112]	; (800bb68 <xTaskResumeAll+0x120>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d1cb      	bne.n	800ba94 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d001      	beq.n	800bb06 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bb02:	f000 fb55 	bl	800c1b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bb06:	4b1d      	ldr	r3, [pc, #116]	; (800bb7c <xTaskResumeAll+0x134>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d010      	beq.n	800bb34 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bb12:	f000 f847 	bl	800bba4 <xTaskIncrementTick>
 800bb16:	4603      	mov	r3, r0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d002      	beq.n	800bb22 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bb1c:	4b16      	ldr	r3, [pc, #88]	; (800bb78 <xTaskResumeAll+0x130>)
 800bb1e:	2201      	movs	r2, #1
 800bb20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	3b01      	subs	r3, #1
 800bb26:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d1f1      	bne.n	800bb12 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bb2e:	4b13      	ldr	r3, [pc, #76]	; (800bb7c <xTaskResumeAll+0x134>)
 800bb30:	2200      	movs	r2, #0
 800bb32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bb34:	4b10      	ldr	r3, [pc, #64]	; (800bb78 <xTaskResumeAll+0x130>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d009      	beq.n	800bb50 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bb40:	4b0f      	ldr	r3, [pc, #60]	; (800bb80 <xTaskResumeAll+0x138>)
 800bb42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb46:	601a      	str	r2, [r3, #0]
 800bb48:	f3bf 8f4f 	dsb	sy
 800bb4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb50:	f7fe fe98 	bl	800a884 <vPortExitCritical>

	return xAlreadyYielded;
 800bb54:	68bb      	ldr	r3, [r7, #8]
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3710      	adds	r7, #16
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
 800bb5e:	bf00      	nop
 800bb60:	240049e8 	.word	0x240049e8
 800bb64:	240049c0 	.word	0x240049c0
 800bb68:	24004980 	.word	0x24004980
 800bb6c:	240049c8 	.word	0x240049c8
 800bb70:	240044f0 	.word	0x240044f0
 800bb74:	240044ec 	.word	0x240044ec
 800bb78:	240049d4 	.word	0x240049d4
 800bb7c:	240049d0 	.word	0x240049d0
 800bb80:	e000ed04 	.word	0xe000ed04

0800bb84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bb84:	b480      	push	{r7}
 800bb86:	b083      	sub	sp, #12
 800bb88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bb8a:	4b05      	ldr	r3, [pc, #20]	; (800bba0 <xTaskGetTickCount+0x1c>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bb90:	687b      	ldr	r3, [r7, #4]
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	370c      	adds	r7, #12
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr
 800bb9e:	bf00      	nop
 800bba0:	240049c4 	.word	0x240049c4

0800bba4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b086      	sub	sp, #24
 800bba8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbae:	4b4f      	ldr	r3, [pc, #316]	; (800bcec <xTaskIncrementTick+0x148>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	f040 808f 	bne.w	800bcd6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bbb8:	4b4d      	ldr	r3, [pc, #308]	; (800bcf0 <xTaskIncrementTick+0x14c>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bbc0:	4a4b      	ldr	r2, [pc, #300]	; (800bcf0 <xTaskIncrementTick+0x14c>)
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d120      	bne.n	800bc0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bbcc:	4b49      	ldr	r3, [pc, #292]	; (800bcf4 <xTaskIncrementTick+0x150>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d00a      	beq.n	800bbec <xTaskIncrementTick+0x48>
	__asm volatile
 800bbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbda:	f383 8811 	msr	BASEPRI, r3
 800bbde:	f3bf 8f6f 	isb	sy
 800bbe2:	f3bf 8f4f 	dsb	sy
 800bbe6:	603b      	str	r3, [r7, #0]
}
 800bbe8:	bf00      	nop
 800bbea:	e7fe      	b.n	800bbea <xTaskIncrementTick+0x46>
 800bbec:	4b41      	ldr	r3, [pc, #260]	; (800bcf4 <xTaskIncrementTick+0x150>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	60fb      	str	r3, [r7, #12]
 800bbf2:	4b41      	ldr	r3, [pc, #260]	; (800bcf8 <xTaskIncrementTick+0x154>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	4a3f      	ldr	r2, [pc, #252]	; (800bcf4 <xTaskIncrementTick+0x150>)
 800bbf8:	6013      	str	r3, [r2, #0]
 800bbfa:	4a3f      	ldr	r2, [pc, #252]	; (800bcf8 <xTaskIncrementTick+0x154>)
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	6013      	str	r3, [r2, #0]
 800bc00:	4b3e      	ldr	r3, [pc, #248]	; (800bcfc <xTaskIncrementTick+0x158>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	3301      	adds	r3, #1
 800bc06:	4a3d      	ldr	r2, [pc, #244]	; (800bcfc <xTaskIncrementTick+0x158>)
 800bc08:	6013      	str	r3, [r2, #0]
 800bc0a:	f000 fad1 	bl	800c1b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bc0e:	4b3c      	ldr	r3, [pc, #240]	; (800bd00 <xTaskIncrementTick+0x15c>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	693a      	ldr	r2, [r7, #16]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d349      	bcc.n	800bcac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc18:	4b36      	ldr	r3, [pc, #216]	; (800bcf4 <xTaskIncrementTick+0x150>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d104      	bne.n	800bc2c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc22:	4b37      	ldr	r3, [pc, #220]	; (800bd00 <xTaskIncrementTick+0x15c>)
 800bc24:	f04f 32ff 	mov.w	r2, #4294967295
 800bc28:	601a      	str	r2, [r3, #0]
					break;
 800bc2a:	e03f      	b.n	800bcac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc2c:	4b31      	ldr	r3, [pc, #196]	; (800bcf4 <xTaskIncrementTick+0x150>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	68db      	ldr	r3, [r3, #12]
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bc3c:	693a      	ldr	r2, [r7, #16]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d203      	bcs.n	800bc4c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bc44:	4a2e      	ldr	r2, [pc, #184]	; (800bd00 <xTaskIncrementTick+0x15c>)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bc4a:	e02f      	b.n	800bcac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	3304      	adds	r3, #4
 800bc50:	4618      	mov	r0, r3
 800bc52:	f7fe fc8f 	bl	800a574 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d004      	beq.n	800bc68 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	3318      	adds	r3, #24
 800bc62:	4618      	mov	r0, r3
 800bc64:	f7fe fc86 	bl	800a574 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc6c:	4b25      	ldr	r3, [pc, #148]	; (800bd04 <xTaskIncrementTick+0x160>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	429a      	cmp	r2, r3
 800bc72:	d903      	bls.n	800bc7c <xTaskIncrementTick+0xd8>
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc78:	4a22      	ldr	r2, [pc, #136]	; (800bd04 <xTaskIncrementTick+0x160>)
 800bc7a:	6013      	str	r3, [r2, #0]
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc80:	4613      	mov	r3, r2
 800bc82:	009b      	lsls	r3, r3, #2
 800bc84:	4413      	add	r3, r2
 800bc86:	009b      	lsls	r3, r3, #2
 800bc88:	4a1f      	ldr	r2, [pc, #124]	; (800bd08 <xTaskIncrementTick+0x164>)
 800bc8a:	441a      	add	r2, r3
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	3304      	adds	r3, #4
 800bc90:	4619      	mov	r1, r3
 800bc92:	4610      	mov	r0, r2
 800bc94:	f7fe fc11 	bl	800a4ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc9c:	4b1b      	ldr	r3, [pc, #108]	; (800bd0c <xTaskIncrementTick+0x168>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d3b8      	bcc.n	800bc18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bca6:	2301      	movs	r3, #1
 800bca8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcaa:	e7b5      	b.n	800bc18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bcac:	4b17      	ldr	r3, [pc, #92]	; (800bd0c <xTaskIncrementTick+0x168>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcb2:	4915      	ldr	r1, [pc, #84]	; (800bd08 <xTaskIncrementTick+0x164>)
 800bcb4:	4613      	mov	r3, r2
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	4413      	add	r3, r2
 800bcba:	009b      	lsls	r3, r3, #2
 800bcbc:	440b      	add	r3, r1
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	d901      	bls.n	800bcc8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bcc8:	4b11      	ldr	r3, [pc, #68]	; (800bd10 <xTaskIncrementTick+0x16c>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d007      	beq.n	800bce0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	617b      	str	r3, [r7, #20]
 800bcd4:	e004      	b.n	800bce0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bcd6:	4b0f      	ldr	r3, [pc, #60]	; (800bd14 <xTaskIncrementTick+0x170>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	3301      	adds	r3, #1
 800bcdc:	4a0d      	ldr	r2, [pc, #52]	; (800bd14 <xTaskIncrementTick+0x170>)
 800bcde:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bce0:	697b      	ldr	r3, [r7, #20]
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3718      	adds	r7, #24
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	240049e8 	.word	0x240049e8
 800bcf0:	240049c4 	.word	0x240049c4
 800bcf4:	24004978 	.word	0x24004978
 800bcf8:	2400497c 	.word	0x2400497c
 800bcfc:	240049d8 	.word	0x240049d8
 800bd00:	240049e0 	.word	0x240049e0
 800bd04:	240049c8 	.word	0x240049c8
 800bd08:	240044f0 	.word	0x240044f0
 800bd0c:	240044ec 	.word	0x240044ec
 800bd10:	240049d4 	.word	0x240049d4
 800bd14:	240049d0 	.word	0x240049d0

0800bd18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b085      	sub	sp, #20
 800bd1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bd1e:	4b28      	ldr	r3, [pc, #160]	; (800bdc0 <vTaskSwitchContext+0xa8>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d003      	beq.n	800bd2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bd26:	4b27      	ldr	r3, [pc, #156]	; (800bdc4 <vTaskSwitchContext+0xac>)
 800bd28:	2201      	movs	r2, #1
 800bd2a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bd2c:	e041      	b.n	800bdb2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800bd2e:	4b25      	ldr	r3, [pc, #148]	; (800bdc4 <vTaskSwitchContext+0xac>)
 800bd30:	2200      	movs	r2, #0
 800bd32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd34:	4b24      	ldr	r3, [pc, #144]	; (800bdc8 <vTaskSwitchContext+0xb0>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	60fb      	str	r3, [r7, #12]
 800bd3a:	e010      	b.n	800bd5e <vTaskSwitchContext+0x46>
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d10a      	bne.n	800bd58 <vTaskSwitchContext+0x40>
	__asm volatile
 800bd42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd46:	f383 8811 	msr	BASEPRI, r3
 800bd4a:	f3bf 8f6f 	isb	sy
 800bd4e:	f3bf 8f4f 	dsb	sy
 800bd52:	607b      	str	r3, [r7, #4]
}
 800bd54:	bf00      	nop
 800bd56:	e7fe      	b.n	800bd56 <vTaskSwitchContext+0x3e>
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	60fb      	str	r3, [r7, #12]
 800bd5e:	491b      	ldr	r1, [pc, #108]	; (800bdcc <vTaskSwitchContext+0xb4>)
 800bd60:	68fa      	ldr	r2, [r7, #12]
 800bd62:	4613      	mov	r3, r2
 800bd64:	009b      	lsls	r3, r3, #2
 800bd66:	4413      	add	r3, r2
 800bd68:	009b      	lsls	r3, r3, #2
 800bd6a:	440b      	add	r3, r1
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d0e4      	beq.n	800bd3c <vTaskSwitchContext+0x24>
 800bd72:	68fa      	ldr	r2, [r7, #12]
 800bd74:	4613      	mov	r3, r2
 800bd76:	009b      	lsls	r3, r3, #2
 800bd78:	4413      	add	r3, r2
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	4a13      	ldr	r2, [pc, #76]	; (800bdcc <vTaskSwitchContext+0xb4>)
 800bd7e:	4413      	add	r3, r2
 800bd80:	60bb      	str	r3, [r7, #8]
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	685a      	ldr	r2, [r3, #4]
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	605a      	str	r2, [r3, #4]
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	685a      	ldr	r2, [r3, #4]
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	3308      	adds	r3, #8
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d104      	bne.n	800bda2 <vTaskSwitchContext+0x8a>
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	685a      	ldr	r2, [r3, #4]
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	605a      	str	r2, [r3, #4]
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	68db      	ldr	r3, [r3, #12]
 800bda8:	4a09      	ldr	r2, [pc, #36]	; (800bdd0 <vTaskSwitchContext+0xb8>)
 800bdaa:	6013      	str	r3, [r2, #0]
 800bdac:	4a06      	ldr	r2, [pc, #24]	; (800bdc8 <vTaskSwitchContext+0xb0>)
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	6013      	str	r3, [r2, #0]
}
 800bdb2:	bf00      	nop
 800bdb4:	3714      	adds	r7, #20
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbc:	4770      	bx	lr
 800bdbe:	bf00      	nop
 800bdc0:	240049e8 	.word	0x240049e8
 800bdc4:	240049d4 	.word	0x240049d4
 800bdc8:	240049c8 	.word	0x240049c8
 800bdcc:	240044f0 	.word	0x240044f0
 800bdd0:	240044ec 	.word	0x240044ec

0800bdd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d10a      	bne.n	800bdfa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bde4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde8:	f383 8811 	msr	BASEPRI, r3
 800bdec:	f3bf 8f6f 	isb	sy
 800bdf0:	f3bf 8f4f 	dsb	sy
 800bdf4:	60fb      	str	r3, [r7, #12]
}
 800bdf6:	bf00      	nop
 800bdf8:	e7fe      	b.n	800bdf8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bdfa:	4b07      	ldr	r3, [pc, #28]	; (800be18 <vTaskPlaceOnEventList+0x44>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	3318      	adds	r3, #24
 800be00:	4619      	mov	r1, r3
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f7fe fb7d 	bl	800a502 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800be08:	2101      	movs	r1, #1
 800be0a:	6838      	ldr	r0, [r7, #0]
 800be0c:	f000 fa7c 	bl	800c308 <prvAddCurrentTaskToDelayedList>
}
 800be10:	bf00      	nop
 800be12:	3710      	adds	r7, #16
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}
 800be18:	240044ec 	.word	0x240044ec

0800be1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b086      	sub	sp, #24
 800be20:	af00      	add	r7, sp, #0
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d10a      	bne.n	800be44 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800be2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be32:	f383 8811 	msr	BASEPRI, r3
 800be36:	f3bf 8f6f 	isb	sy
 800be3a:	f3bf 8f4f 	dsb	sy
 800be3e:	617b      	str	r3, [r7, #20]
}
 800be40:	bf00      	nop
 800be42:	e7fe      	b.n	800be42 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800be44:	4b0a      	ldr	r3, [pc, #40]	; (800be70 <vTaskPlaceOnEventListRestricted+0x54>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	3318      	adds	r3, #24
 800be4a:	4619      	mov	r1, r3
 800be4c:	68f8      	ldr	r0, [r7, #12]
 800be4e:	f7fe fb34 	bl	800a4ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d002      	beq.n	800be5e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800be58:	f04f 33ff 	mov.w	r3, #4294967295
 800be5c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800be5e:	6879      	ldr	r1, [r7, #4]
 800be60:	68b8      	ldr	r0, [r7, #8]
 800be62:	f000 fa51 	bl	800c308 <prvAddCurrentTaskToDelayedList>
	}
 800be66:	bf00      	nop
 800be68:	3718      	adds	r7, #24
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	240044ec 	.word	0x240044ec

0800be74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b086      	sub	sp, #24
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	68db      	ldr	r3, [r3, #12]
 800be80:	68db      	ldr	r3, [r3, #12]
 800be82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d10a      	bne.n	800bea0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800be8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8e:	f383 8811 	msr	BASEPRI, r3
 800be92:	f3bf 8f6f 	isb	sy
 800be96:	f3bf 8f4f 	dsb	sy
 800be9a:	60fb      	str	r3, [r7, #12]
}
 800be9c:	bf00      	nop
 800be9e:	e7fe      	b.n	800be9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	3318      	adds	r3, #24
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7fe fb65 	bl	800a574 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800beaa:	4b1e      	ldr	r3, [pc, #120]	; (800bf24 <xTaskRemoveFromEventList+0xb0>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d11d      	bne.n	800beee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	3304      	adds	r3, #4
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7fe fb5c 	bl	800a574 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bec0:	4b19      	ldr	r3, [pc, #100]	; (800bf28 <xTaskRemoveFromEventList+0xb4>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d903      	bls.n	800bed0 <xTaskRemoveFromEventList+0x5c>
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800becc:	4a16      	ldr	r2, [pc, #88]	; (800bf28 <xTaskRemoveFromEventList+0xb4>)
 800bece:	6013      	str	r3, [r2, #0]
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bed4:	4613      	mov	r3, r2
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	4413      	add	r3, r2
 800beda:	009b      	lsls	r3, r3, #2
 800bedc:	4a13      	ldr	r2, [pc, #76]	; (800bf2c <xTaskRemoveFromEventList+0xb8>)
 800bede:	441a      	add	r2, r3
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	3304      	adds	r3, #4
 800bee4:	4619      	mov	r1, r3
 800bee6:	4610      	mov	r0, r2
 800bee8:	f7fe fae7 	bl	800a4ba <vListInsertEnd>
 800beec:	e005      	b.n	800befa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	3318      	adds	r3, #24
 800bef2:	4619      	mov	r1, r3
 800bef4:	480e      	ldr	r0, [pc, #56]	; (800bf30 <xTaskRemoveFromEventList+0xbc>)
 800bef6:	f7fe fae0 	bl	800a4ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800befe:	4b0d      	ldr	r3, [pc, #52]	; (800bf34 <xTaskRemoveFromEventList+0xc0>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d905      	bls.n	800bf14 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bf0c:	4b0a      	ldr	r3, [pc, #40]	; (800bf38 <xTaskRemoveFromEventList+0xc4>)
 800bf0e:	2201      	movs	r2, #1
 800bf10:	601a      	str	r2, [r3, #0]
 800bf12:	e001      	b.n	800bf18 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bf14:	2300      	movs	r3, #0
 800bf16:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bf18:	697b      	ldr	r3, [r7, #20]
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3718      	adds	r7, #24
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop
 800bf24:	240049e8 	.word	0x240049e8
 800bf28:	240049c8 	.word	0x240049c8
 800bf2c:	240044f0 	.word	0x240044f0
 800bf30:	24004980 	.word	0x24004980
 800bf34:	240044ec 	.word	0x240044ec
 800bf38:	240049d4 	.word	0x240049d4

0800bf3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b083      	sub	sp, #12
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bf44:	4b06      	ldr	r3, [pc, #24]	; (800bf60 <vTaskInternalSetTimeOutState+0x24>)
 800bf46:	681a      	ldr	r2, [r3, #0]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bf4c:	4b05      	ldr	r3, [pc, #20]	; (800bf64 <vTaskInternalSetTimeOutState+0x28>)
 800bf4e:	681a      	ldr	r2, [r3, #0]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	605a      	str	r2, [r3, #4]
}
 800bf54:	bf00      	nop
 800bf56:	370c      	adds	r7, #12
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr
 800bf60:	240049d8 	.word	0x240049d8
 800bf64:	240049c4 	.word	0x240049c4

0800bf68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b088      	sub	sp, #32
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d10a      	bne.n	800bf8e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bf78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7c:	f383 8811 	msr	BASEPRI, r3
 800bf80:	f3bf 8f6f 	isb	sy
 800bf84:	f3bf 8f4f 	dsb	sy
 800bf88:	613b      	str	r3, [r7, #16]
}
 800bf8a:	bf00      	nop
 800bf8c:	e7fe      	b.n	800bf8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d10a      	bne.n	800bfaa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bf94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf98:	f383 8811 	msr	BASEPRI, r3
 800bf9c:	f3bf 8f6f 	isb	sy
 800bfa0:	f3bf 8f4f 	dsb	sy
 800bfa4:	60fb      	str	r3, [r7, #12]
}
 800bfa6:	bf00      	nop
 800bfa8:	e7fe      	b.n	800bfa8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bfaa:	f7fe fc3b 	bl	800a824 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bfae:	4b1d      	ldr	r3, [pc, #116]	; (800c024 <xTaskCheckForTimeOut+0xbc>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	69ba      	ldr	r2, [r7, #24]
 800bfba:	1ad3      	subs	r3, r2, r3
 800bfbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc6:	d102      	bne.n	800bfce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	61fb      	str	r3, [r7, #28]
 800bfcc:	e023      	b.n	800c016 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	4b15      	ldr	r3, [pc, #84]	; (800c028 <xTaskCheckForTimeOut+0xc0>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d007      	beq.n	800bfea <xTaskCheckForTimeOut+0x82>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	69ba      	ldr	r2, [r7, #24]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d302      	bcc.n	800bfea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	61fb      	str	r3, [r7, #28]
 800bfe8:	e015      	b.n	800c016 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	697a      	ldr	r2, [r7, #20]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d20b      	bcs.n	800c00c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	681a      	ldr	r2, [r3, #0]
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	1ad2      	subs	r2, r2, r3
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f7ff ff9b 	bl	800bf3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c006:	2300      	movs	r3, #0
 800c008:	61fb      	str	r3, [r7, #28]
 800c00a:	e004      	b.n	800c016 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	2200      	movs	r2, #0
 800c010:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c012:	2301      	movs	r3, #1
 800c014:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c016:	f7fe fc35 	bl	800a884 <vPortExitCritical>

	return xReturn;
 800c01a:	69fb      	ldr	r3, [r7, #28]
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3720      	adds	r7, #32
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}
 800c024:	240049c4 	.word	0x240049c4
 800c028:	240049d8 	.word	0x240049d8

0800c02c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c02c:	b480      	push	{r7}
 800c02e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c030:	4b03      	ldr	r3, [pc, #12]	; (800c040 <vTaskMissedYield+0x14>)
 800c032:	2201      	movs	r2, #1
 800c034:	601a      	str	r2, [r3, #0]
}
 800c036:	bf00      	nop
 800c038:	46bd      	mov	sp, r7
 800c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03e:	4770      	bx	lr
 800c040:	240049d4 	.word	0x240049d4

0800c044 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b082      	sub	sp, #8
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c04c:	f000 f852 	bl	800c0f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c050:	4b06      	ldr	r3, [pc, #24]	; (800c06c <prvIdleTask+0x28>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	2b01      	cmp	r3, #1
 800c056:	d9f9      	bls.n	800c04c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c058:	4b05      	ldr	r3, [pc, #20]	; (800c070 <prvIdleTask+0x2c>)
 800c05a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c05e:	601a      	str	r2, [r3, #0]
 800c060:	f3bf 8f4f 	dsb	sy
 800c064:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c068:	e7f0      	b.n	800c04c <prvIdleTask+0x8>
 800c06a:	bf00      	nop
 800c06c:	240044f0 	.word	0x240044f0
 800c070:	e000ed04 	.word	0xe000ed04

0800c074 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c07a:	2300      	movs	r3, #0
 800c07c:	607b      	str	r3, [r7, #4]
 800c07e:	e00c      	b.n	800c09a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c080:	687a      	ldr	r2, [r7, #4]
 800c082:	4613      	mov	r3, r2
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	4413      	add	r3, r2
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	4a12      	ldr	r2, [pc, #72]	; (800c0d4 <prvInitialiseTaskLists+0x60>)
 800c08c:	4413      	add	r3, r2
 800c08e:	4618      	mov	r0, r3
 800c090:	f7fe f9e6 	bl	800a460 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	3301      	adds	r3, #1
 800c098:	607b      	str	r3, [r7, #4]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2b37      	cmp	r3, #55	; 0x37
 800c09e:	d9ef      	bls.n	800c080 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c0a0:	480d      	ldr	r0, [pc, #52]	; (800c0d8 <prvInitialiseTaskLists+0x64>)
 800c0a2:	f7fe f9dd 	bl	800a460 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c0a6:	480d      	ldr	r0, [pc, #52]	; (800c0dc <prvInitialiseTaskLists+0x68>)
 800c0a8:	f7fe f9da 	bl	800a460 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c0ac:	480c      	ldr	r0, [pc, #48]	; (800c0e0 <prvInitialiseTaskLists+0x6c>)
 800c0ae:	f7fe f9d7 	bl	800a460 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c0b2:	480c      	ldr	r0, [pc, #48]	; (800c0e4 <prvInitialiseTaskLists+0x70>)
 800c0b4:	f7fe f9d4 	bl	800a460 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c0b8:	480b      	ldr	r0, [pc, #44]	; (800c0e8 <prvInitialiseTaskLists+0x74>)
 800c0ba:	f7fe f9d1 	bl	800a460 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c0be:	4b0b      	ldr	r3, [pc, #44]	; (800c0ec <prvInitialiseTaskLists+0x78>)
 800c0c0:	4a05      	ldr	r2, [pc, #20]	; (800c0d8 <prvInitialiseTaskLists+0x64>)
 800c0c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c0c4:	4b0a      	ldr	r3, [pc, #40]	; (800c0f0 <prvInitialiseTaskLists+0x7c>)
 800c0c6:	4a05      	ldr	r2, [pc, #20]	; (800c0dc <prvInitialiseTaskLists+0x68>)
 800c0c8:	601a      	str	r2, [r3, #0]
}
 800c0ca:	bf00      	nop
 800c0cc:	3708      	adds	r7, #8
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
 800c0d2:	bf00      	nop
 800c0d4:	240044f0 	.word	0x240044f0
 800c0d8:	24004950 	.word	0x24004950
 800c0dc:	24004964 	.word	0x24004964
 800c0e0:	24004980 	.word	0x24004980
 800c0e4:	24004994 	.word	0x24004994
 800c0e8:	240049ac 	.word	0x240049ac
 800c0ec:	24004978 	.word	0x24004978
 800c0f0:	2400497c 	.word	0x2400497c

0800c0f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b082      	sub	sp, #8
 800c0f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c0fa:	e019      	b.n	800c130 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c0fc:	f7fe fb92 	bl	800a824 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c100:	4b10      	ldr	r3, [pc, #64]	; (800c144 <prvCheckTasksWaitingTermination+0x50>)
 800c102:	68db      	ldr	r3, [r3, #12]
 800c104:	68db      	ldr	r3, [r3, #12]
 800c106:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	3304      	adds	r3, #4
 800c10c:	4618      	mov	r0, r3
 800c10e:	f7fe fa31 	bl	800a574 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c112:	4b0d      	ldr	r3, [pc, #52]	; (800c148 <prvCheckTasksWaitingTermination+0x54>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	3b01      	subs	r3, #1
 800c118:	4a0b      	ldr	r2, [pc, #44]	; (800c148 <prvCheckTasksWaitingTermination+0x54>)
 800c11a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c11c:	4b0b      	ldr	r3, [pc, #44]	; (800c14c <prvCheckTasksWaitingTermination+0x58>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	3b01      	subs	r3, #1
 800c122:	4a0a      	ldr	r2, [pc, #40]	; (800c14c <prvCheckTasksWaitingTermination+0x58>)
 800c124:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c126:	f7fe fbad 	bl	800a884 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 f810 	bl	800c150 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c130:	4b06      	ldr	r3, [pc, #24]	; (800c14c <prvCheckTasksWaitingTermination+0x58>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d1e1      	bne.n	800c0fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c138:	bf00      	nop
 800c13a:	bf00      	nop
 800c13c:	3708      	adds	r7, #8
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop
 800c144:	24004994 	.word	0x24004994
 800c148:	240049c0 	.word	0x240049c0
 800c14c:	240049a8 	.word	0x240049a8

0800c150 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d108      	bne.n	800c174 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c166:	4618      	mov	r0, r3
 800c168:	f7fe f85c 	bl	800a224 <vPortFree>
				vPortFree( pxTCB );
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f7fe f859 	bl	800a224 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c172:	e018      	b.n	800c1a6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c17a:	2b01      	cmp	r3, #1
 800c17c:	d103      	bne.n	800c186 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f7fe f850 	bl	800a224 <vPortFree>
	}
 800c184:	e00f      	b.n	800c1a6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c18c:	2b02      	cmp	r3, #2
 800c18e:	d00a      	beq.n	800c1a6 <prvDeleteTCB+0x56>
	__asm volatile
 800c190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c194:	f383 8811 	msr	BASEPRI, r3
 800c198:	f3bf 8f6f 	isb	sy
 800c19c:	f3bf 8f4f 	dsb	sy
 800c1a0:	60fb      	str	r3, [r7, #12]
}
 800c1a2:	bf00      	nop
 800c1a4:	e7fe      	b.n	800c1a4 <prvDeleteTCB+0x54>
	}
 800c1a6:	bf00      	nop
 800c1a8:	3710      	adds	r7, #16
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
	...

0800c1b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b083      	sub	sp, #12
 800c1b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1b6:	4b0c      	ldr	r3, [pc, #48]	; (800c1e8 <prvResetNextTaskUnblockTime+0x38>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d104      	bne.n	800c1ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c1c0:	4b0a      	ldr	r3, [pc, #40]	; (800c1ec <prvResetNextTaskUnblockTime+0x3c>)
 800c1c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c1c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c1c8:	e008      	b.n	800c1dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1ca:	4b07      	ldr	r3, [pc, #28]	; (800c1e8 <prvResetNextTaskUnblockTime+0x38>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	68db      	ldr	r3, [r3, #12]
 800c1d0:	68db      	ldr	r3, [r3, #12]
 800c1d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	685b      	ldr	r3, [r3, #4]
 800c1d8:	4a04      	ldr	r2, [pc, #16]	; (800c1ec <prvResetNextTaskUnblockTime+0x3c>)
 800c1da:	6013      	str	r3, [r2, #0]
}
 800c1dc:	bf00      	nop
 800c1de:	370c      	adds	r7, #12
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr
 800c1e8:	24004978 	.word	0x24004978
 800c1ec:	240049e0 	.word	0x240049e0

0800c1f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b083      	sub	sp, #12
 800c1f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c1f6:	4b0b      	ldr	r3, [pc, #44]	; (800c224 <xTaskGetSchedulerState+0x34>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d102      	bne.n	800c204 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c1fe:	2301      	movs	r3, #1
 800c200:	607b      	str	r3, [r7, #4]
 800c202:	e008      	b.n	800c216 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c204:	4b08      	ldr	r3, [pc, #32]	; (800c228 <xTaskGetSchedulerState+0x38>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d102      	bne.n	800c212 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c20c:	2302      	movs	r3, #2
 800c20e:	607b      	str	r3, [r7, #4]
 800c210:	e001      	b.n	800c216 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c212:	2300      	movs	r3, #0
 800c214:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c216:	687b      	ldr	r3, [r7, #4]
	}
 800c218:	4618      	mov	r0, r3
 800c21a:	370c      	adds	r7, #12
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr
 800c224:	240049cc 	.word	0x240049cc
 800c228:	240049e8 	.word	0x240049e8

0800c22c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b086      	sub	sp, #24
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c238:	2300      	movs	r3, #0
 800c23a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d056      	beq.n	800c2f0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c242:	4b2e      	ldr	r3, [pc, #184]	; (800c2fc <xTaskPriorityDisinherit+0xd0>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	693a      	ldr	r2, [r7, #16]
 800c248:	429a      	cmp	r2, r3
 800c24a:	d00a      	beq.n	800c262 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c250:	f383 8811 	msr	BASEPRI, r3
 800c254:	f3bf 8f6f 	isb	sy
 800c258:	f3bf 8f4f 	dsb	sy
 800c25c:	60fb      	str	r3, [r7, #12]
}
 800c25e:	bf00      	nop
 800c260:	e7fe      	b.n	800c260 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c266:	2b00      	cmp	r3, #0
 800c268:	d10a      	bne.n	800c280 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c26e:	f383 8811 	msr	BASEPRI, r3
 800c272:	f3bf 8f6f 	isb	sy
 800c276:	f3bf 8f4f 	dsb	sy
 800c27a:	60bb      	str	r3, [r7, #8]
}
 800c27c:	bf00      	nop
 800c27e:	e7fe      	b.n	800c27e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c284:	1e5a      	subs	r2, r3, #1
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c292:	429a      	cmp	r2, r3
 800c294:	d02c      	beq.n	800c2f0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d128      	bne.n	800c2f0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	3304      	adds	r3, #4
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7fe f966 	bl	800a574 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2c0:	4b0f      	ldr	r3, [pc, #60]	; (800c300 <xTaskPriorityDisinherit+0xd4>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d903      	bls.n	800c2d0 <xTaskPriorityDisinherit+0xa4>
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2cc:	4a0c      	ldr	r2, [pc, #48]	; (800c300 <xTaskPriorityDisinherit+0xd4>)
 800c2ce:	6013      	str	r3, [r2, #0]
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2d4:	4613      	mov	r3, r2
 800c2d6:	009b      	lsls	r3, r3, #2
 800c2d8:	4413      	add	r3, r2
 800c2da:	009b      	lsls	r3, r3, #2
 800c2dc:	4a09      	ldr	r2, [pc, #36]	; (800c304 <xTaskPriorityDisinherit+0xd8>)
 800c2de:	441a      	add	r2, r3
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	3304      	adds	r3, #4
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	4610      	mov	r0, r2
 800c2e8:	f7fe f8e7 	bl	800a4ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c2f0:	697b      	ldr	r3, [r7, #20]
	}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3718      	adds	r7, #24
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}
 800c2fa:	bf00      	nop
 800c2fc:	240044ec 	.word	0x240044ec
 800c300:	240049c8 	.word	0x240049c8
 800c304:	240044f0 	.word	0x240044f0

0800c308 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b084      	sub	sp, #16
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c312:	4b21      	ldr	r3, [pc, #132]	; (800c398 <prvAddCurrentTaskToDelayedList+0x90>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c318:	4b20      	ldr	r3, [pc, #128]	; (800c39c <prvAddCurrentTaskToDelayedList+0x94>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	3304      	adds	r3, #4
 800c31e:	4618      	mov	r0, r3
 800c320:	f7fe f928 	bl	800a574 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c32a:	d10a      	bne.n	800c342 <prvAddCurrentTaskToDelayedList+0x3a>
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d007      	beq.n	800c342 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c332:	4b1a      	ldr	r3, [pc, #104]	; (800c39c <prvAddCurrentTaskToDelayedList+0x94>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	3304      	adds	r3, #4
 800c338:	4619      	mov	r1, r3
 800c33a:	4819      	ldr	r0, [pc, #100]	; (800c3a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800c33c:	f7fe f8bd 	bl	800a4ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c340:	e026      	b.n	800c390 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c342:	68fa      	ldr	r2, [r7, #12]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	4413      	add	r3, r2
 800c348:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c34a:	4b14      	ldr	r3, [pc, #80]	; (800c39c <prvAddCurrentTaskToDelayedList+0x94>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	68ba      	ldr	r2, [r7, #8]
 800c350:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c352:	68ba      	ldr	r2, [r7, #8]
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	429a      	cmp	r2, r3
 800c358:	d209      	bcs.n	800c36e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c35a:	4b12      	ldr	r3, [pc, #72]	; (800c3a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c35c:	681a      	ldr	r2, [r3, #0]
 800c35e:	4b0f      	ldr	r3, [pc, #60]	; (800c39c <prvAddCurrentTaskToDelayedList+0x94>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	3304      	adds	r3, #4
 800c364:	4619      	mov	r1, r3
 800c366:	4610      	mov	r0, r2
 800c368:	f7fe f8cb 	bl	800a502 <vListInsert>
}
 800c36c:	e010      	b.n	800c390 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c36e:	4b0e      	ldr	r3, [pc, #56]	; (800c3a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c370:	681a      	ldr	r2, [r3, #0]
 800c372:	4b0a      	ldr	r3, [pc, #40]	; (800c39c <prvAddCurrentTaskToDelayedList+0x94>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	3304      	adds	r3, #4
 800c378:	4619      	mov	r1, r3
 800c37a:	4610      	mov	r0, r2
 800c37c:	f7fe f8c1 	bl	800a502 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c380:	4b0a      	ldr	r3, [pc, #40]	; (800c3ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	68ba      	ldr	r2, [r7, #8]
 800c386:	429a      	cmp	r2, r3
 800c388:	d202      	bcs.n	800c390 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c38a:	4a08      	ldr	r2, [pc, #32]	; (800c3ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	6013      	str	r3, [r2, #0]
}
 800c390:	bf00      	nop
 800c392:	3710      	adds	r7, #16
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}
 800c398:	240049c4 	.word	0x240049c4
 800c39c:	240044ec 	.word	0x240044ec
 800c3a0:	240049ac 	.word	0x240049ac
 800c3a4:	2400497c 	.word	0x2400497c
 800c3a8:	24004978 	.word	0x24004978
 800c3ac:	240049e0 	.word	0x240049e0

0800c3b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b08a      	sub	sp, #40	; 0x28
 800c3b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c3ba:	f000 fb07 	bl	800c9cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c3be:	4b1c      	ldr	r3, [pc, #112]	; (800c430 <xTimerCreateTimerTask+0x80>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d021      	beq.n	800c40a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c3ce:	1d3a      	adds	r2, r7, #4
 800c3d0:	f107 0108 	add.w	r1, r7, #8
 800c3d4:	f107 030c 	add.w	r3, r7, #12
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f7fd fe3d 	bl	800a058 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c3de:	6879      	ldr	r1, [r7, #4]
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	68fa      	ldr	r2, [r7, #12]
 800c3e4:	9202      	str	r2, [sp, #8]
 800c3e6:	9301      	str	r3, [sp, #4]
 800c3e8:	2302      	movs	r3, #2
 800c3ea:	9300      	str	r3, [sp, #0]
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	460a      	mov	r2, r1
 800c3f0:	4910      	ldr	r1, [pc, #64]	; (800c434 <xTimerCreateTimerTask+0x84>)
 800c3f2:	4811      	ldr	r0, [pc, #68]	; (800c438 <xTimerCreateTimerTask+0x88>)
 800c3f4:	f7ff f8de 	bl	800b5b4 <xTaskCreateStatic>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	4a10      	ldr	r2, [pc, #64]	; (800c43c <xTimerCreateTimerTask+0x8c>)
 800c3fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c3fe:	4b0f      	ldr	r3, [pc, #60]	; (800c43c <xTimerCreateTimerTask+0x8c>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d001      	beq.n	800c40a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c406:	2301      	movs	r3, #1
 800c408:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d10a      	bne.n	800c426 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c414:	f383 8811 	msr	BASEPRI, r3
 800c418:	f3bf 8f6f 	isb	sy
 800c41c:	f3bf 8f4f 	dsb	sy
 800c420:	613b      	str	r3, [r7, #16]
}
 800c422:	bf00      	nop
 800c424:	e7fe      	b.n	800c424 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c426:	697b      	ldr	r3, [r7, #20]
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3718      	adds	r7, #24
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}
 800c430:	24004a1c 	.word	0x24004a1c
 800c434:	0801139c 	.word	0x0801139c
 800c438:	0800c575 	.word	0x0800c575
 800c43c:	24004a20 	.word	0x24004a20

0800c440 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b08a      	sub	sp, #40	; 0x28
 800c444:	af00      	add	r7, sp, #0
 800c446:	60f8      	str	r0, [r7, #12]
 800c448:	60b9      	str	r1, [r7, #8]
 800c44a:	607a      	str	r2, [r7, #4]
 800c44c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c44e:	2300      	movs	r3, #0
 800c450:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d10a      	bne.n	800c46e <xTimerGenericCommand+0x2e>
	__asm volatile
 800c458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c45c:	f383 8811 	msr	BASEPRI, r3
 800c460:	f3bf 8f6f 	isb	sy
 800c464:	f3bf 8f4f 	dsb	sy
 800c468:	623b      	str	r3, [r7, #32]
}
 800c46a:	bf00      	nop
 800c46c:	e7fe      	b.n	800c46c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c46e:	4b1a      	ldr	r3, [pc, #104]	; (800c4d8 <xTimerGenericCommand+0x98>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d02a      	beq.n	800c4cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	2b05      	cmp	r3, #5
 800c486:	dc18      	bgt.n	800c4ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c488:	f7ff feb2 	bl	800c1f0 <xTaskGetSchedulerState>
 800c48c:	4603      	mov	r3, r0
 800c48e:	2b02      	cmp	r3, #2
 800c490:	d109      	bne.n	800c4a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c492:	4b11      	ldr	r3, [pc, #68]	; (800c4d8 <xTimerGenericCommand+0x98>)
 800c494:	6818      	ldr	r0, [r3, #0]
 800c496:	f107 0110 	add.w	r1, r7, #16
 800c49a:	2300      	movs	r3, #0
 800c49c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c49e:	f7fe fc21 	bl	800ace4 <xQueueGenericSend>
 800c4a2:	6278      	str	r0, [r7, #36]	; 0x24
 800c4a4:	e012      	b.n	800c4cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c4a6:	4b0c      	ldr	r3, [pc, #48]	; (800c4d8 <xTimerGenericCommand+0x98>)
 800c4a8:	6818      	ldr	r0, [r3, #0]
 800c4aa:	f107 0110 	add.w	r1, r7, #16
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	f7fe fc17 	bl	800ace4 <xQueueGenericSend>
 800c4b6:	6278      	str	r0, [r7, #36]	; 0x24
 800c4b8:	e008      	b.n	800c4cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c4ba:	4b07      	ldr	r3, [pc, #28]	; (800c4d8 <xTimerGenericCommand+0x98>)
 800c4bc:	6818      	ldr	r0, [r3, #0]
 800c4be:	f107 0110 	add.w	r1, r7, #16
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	683a      	ldr	r2, [r7, #0]
 800c4c6:	f7fe fd0b 	bl	800aee0 <xQueueGenericSendFromISR>
 800c4ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3728      	adds	r7, #40	; 0x28
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
 800c4d6:	bf00      	nop
 800c4d8:	24004a1c 	.word	0x24004a1c

0800c4dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b088      	sub	sp, #32
 800c4e0:	af02      	add	r7, sp, #8
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4e6:	4b22      	ldr	r3, [pc, #136]	; (800c570 <prvProcessExpiredTimer+0x94>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	68db      	ldr	r3, [r3, #12]
 800c4ec:	68db      	ldr	r3, [r3, #12]
 800c4ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	3304      	adds	r3, #4
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f7fe f83d 	bl	800a574 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c500:	f003 0304 	and.w	r3, r3, #4
 800c504:	2b00      	cmp	r3, #0
 800c506:	d022      	beq.n	800c54e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	699a      	ldr	r2, [r3, #24]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	18d1      	adds	r1, r2, r3
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	683a      	ldr	r2, [r7, #0]
 800c514:	6978      	ldr	r0, [r7, #20]
 800c516:	f000 f8d1 	bl	800c6bc <prvInsertTimerInActiveList>
 800c51a:	4603      	mov	r3, r0
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d01f      	beq.n	800c560 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c520:	2300      	movs	r3, #0
 800c522:	9300      	str	r3, [sp, #0]
 800c524:	2300      	movs	r3, #0
 800c526:	687a      	ldr	r2, [r7, #4]
 800c528:	2100      	movs	r1, #0
 800c52a:	6978      	ldr	r0, [r7, #20]
 800c52c:	f7ff ff88 	bl	800c440 <xTimerGenericCommand>
 800c530:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d113      	bne.n	800c560 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53c:	f383 8811 	msr	BASEPRI, r3
 800c540:	f3bf 8f6f 	isb	sy
 800c544:	f3bf 8f4f 	dsb	sy
 800c548:	60fb      	str	r3, [r7, #12]
}
 800c54a:	bf00      	nop
 800c54c:	e7fe      	b.n	800c54c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c554:	f023 0301 	bic.w	r3, r3, #1
 800c558:	b2da      	uxtb	r2, r3
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	6a1b      	ldr	r3, [r3, #32]
 800c564:	6978      	ldr	r0, [r7, #20]
 800c566:	4798      	blx	r3
}
 800c568:	bf00      	nop
 800c56a:	3718      	adds	r7, #24
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}
 800c570:	24004a14 	.word	0x24004a14

0800c574 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b084      	sub	sp, #16
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c57c:	f107 0308 	add.w	r3, r7, #8
 800c580:	4618      	mov	r0, r3
 800c582:	f000 f857 	bl	800c634 <prvGetNextExpireTime>
 800c586:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	4619      	mov	r1, r3
 800c58c:	68f8      	ldr	r0, [r7, #12]
 800c58e:	f000 f803 	bl	800c598 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c592:	f000 f8d5 	bl	800c740 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c596:	e7f1      	b.n	800c57c <prvTimerTask+0x8>

0800c598 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b084      	sub	sp, #16
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c5a2:	f7ff fa43 	bl	800ba2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c5a6:	f107 0308 	add.w	r3, r7, #8
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f000 f866 	bl	800c67c <prvSampleTimeNow>
 800c5b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d130      	bne.n	800c61a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d10a      	bne.n	800c5d4 <prvProcessTimerOrBlockTask+0x3c>
 800c5be:	687a      	ldr	r2, [r7, #4]
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d806      	bhi.n	800c5d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c5c6:	f7ff fa3f 	bl	800ba48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c5ca:	68f9      	ldr	r1, [r7, #12]
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f7ff ff85 	bl	800c4dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c5d2:	e024      	b.n	800c61e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d008      	beq.n	800c5ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c5da:	4b13      	ldr	r3, [pc, #76]	; (800c628 <prvProcessTimerOrBlockTask+0x90>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d101      	bne.n	800c5e8 <prvProcessTimerOrBlockTask+0x50>
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	e000      	b.n	800c5ea <prvProcessTimerOrBlockTask+0x52>
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c5ec:	4b0f      	ldr	r3, [pc, #60]	; (800c62c <prvProcessTimerOrBlockTask+0x94>)
 800c5ee:	6818      	ldr	r0, [r3, #0]
 800c5f0:	687a      	ldr	r2, [r7, #4]
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	1ad3      	subs	r3, r2, r3
 800c5f6:	683a      	ldr	r2, [r7, #0]
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	f7fe ffa7 	bl	800b54c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c5fe:	f7ff fa23 	bl	800ba48 <xTaskResumeAll>
 800c602:	4603      	mov	r3, r0
 800c604:	2b00      	cmp	r3, #0
 800c606:	d10a      	bne.n	800c61e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c608:	4b09      	ldr	r3, [pc, #36]	; (800c630 <prvProcessTimerOrBlockTask+0x98>)
 800c60a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c60e:	601a      	str	r2, [r3, #0]
 800c610:	f3bf 8f4f 	dsb	sy
 800c614:	f3bf 8f6f 	isb	sy
}
 800c618:	e001      	b.n	800c61e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c61a:	f7ff fa15 	bl	800ba48 <xTaskResumeAll>
}
 800c61e:	bf00      	nop
 800c620:	3710      	adds	r7, #16
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}
 800c626:	bf00      	nop
 800c628:	24004a18 	.word	0x24004a18
 800c62c:	24004a1c 	.word	0x24004a1c
 800c630:	e000ed04 	.word	0xe000ed04

0800c634 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c634:	b480      	push	{r7}
 800c636:	b085      	sub	sp, #20
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c63c:	4b0e      	ldr	r3, [pc, #56]	; (800c678 <prvGetNextExpireTime+0x44>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d101      	bne.n	800c64a <prvGetNextExpireTime+0x16>
 800c646:	2201      	movs	r2, #1
 800c648:	e000      	b.n	800c64c <prvGetNextExpireTime+0x18>
 800c64a:	2200      	movs	r2, #0
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d105      	bne.n	800c664 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c658:	4b07      	ldr	r3, [pc, #28]	; (800c678 <prvGetNextExpireTime+0x44>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	68db      	ldr	r3, [r3, #12]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	60fb      	str	r3, [r7, #12]
 800c662:	e001      	b.n	800c668 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c664:	2300      	movs	r3, #0
 800c666:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c668:	68fb      	ldr	r3, [r7, #12]
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3714      	adds	r7, #20
 800c66e:	46bd      	mov	sp, r7
 800c670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c674:	4770      	bx	lr
 800c676:	bf00      	nop
 800c678:	24004a14 	.word	0x24004a14

0800c67c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b084      	sub	sp, #16
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c684:	f7ff fa7e 	bl	800bb84 <xTaskGetTickCount>
 800c688:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c68a:	4b0b      	ldr	r3, [pc, #44]	; (800c6b8 <prvSampleTimeNow+0x3c>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	68fa      	ldr	r2, [r7, #12]
 800c690:	429a      	cmp	r2, r3
 800c692:	d205      	bcs.n	800c6a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c694:	f000 f936 	bl	800c904 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2201      	movs	r2, #1
 800c69c:	601a      	str	r2, [r3, #0]
 800c69e:	e002      	b.n	800c6a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c6a6:	4a04      	ldr	r2, [pc, #16]	; (800c6b8 <prvSampleTimeNow+0x3c>)
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3710      	adds	r7, #16
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	24004a24 	.word	0x24004a24

0800c6bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b086      	sub	sp, #24
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	60b9      	str	r1, [r7, #8]
 800c6c6:	607a      	str	r2, [r7, #4]
 800c6c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	68ba      	ldr	r2, [r7, #8]
 800c6d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	68fa      	ldr	r2, [r7, #12]
 800c6d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c6da:	68ba      	ldr	r2, [r7, #8]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	d812      	bhi.n	800c708 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6e2:	687a      	ldr	r2, [r7, #4]
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	1ad2      	subs	r2, r2, r3
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	699b      	ldr	r3, [r3, #24]
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d302      	bcc.n	800c6f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	617b      	str	r3, [r7, #20]
 800c6f4:	e01b      	b.n	800c72e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c6f6:	4b10      	ldr	r3, [pc, #64]	; (800c738 <prvInsertTimerInActiveList+0x7c>)
 800c6f8:	681a      	ldr	r2, [r3, #0]
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	3304      	adds	r3, #4
 800c6fe:	4619      	mov	r1, r3
 800c700:	4610      	mov	r0, r2
 800c702:	f7fd fefe 	bl	800a502 <vListInsert>
 800c706:	e012      	b.n	800c72e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c708:	687a      	ldr	r2, [r7, #4]
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	429a      	cmp	r2, r3
 800c70e:	d206      	bcs.n	800c71e <prvInsertTimerInActiveList+0x62>
 800c710:	68ba      	ldr	r2, [r7, #8]
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	429a      	cmp	r2, r3
 800c716:	d302      	bcc.n	800c71e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c718:	2301      	movs	r3, #1
 800c71a:	617b      	str	r3, [r7, #20]
 800c71c:	e007      	b.n	800c72e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c71e:	4b07      	ldr	r3, [pc, #28]	; (800c73c <prvInsertTimerInActiveList+0x80>)
 800c720:	681a      	ldr	r2, [r3, #0]
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	3304      	adds	r3, #4
 800c726:	4619      	mov	r1, r3
 800c728:	4610      	mov	r0, r2
 800c72a:	f7fd feea 	bl	800a502 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c72e:	697b      	ldr	r3, [r7, #20]
}
 800c730:	4618      	mov	r0, r3
 800c732:	3718      	adds	r7, #24
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}
 800c738:	24004a18 	.word	0x24004a18
 800c73c:	24004a14 	.word	0x24004a14

0800c740 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b08e      	sub	sp, #56	; 0x38
 800c744:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c746:	e0ca      	b.n	800c8de <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	da18      	bge.n	800c780 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c74e:	1d3b      	adds	r3, r7, #4
 800c750:	3304      	adds	r3, #4
 800c752:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c756:	2b00      	cmp	r3, #0
 800c758:	d10a      	bne.n	800c770 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c75e:	f383 8811 	msr	BASEPRI, r3
 800c762:	f3bf 8f6f 	isb	sy
 800c766:	f3bf 8f4f 	dsb	sy
 800c76a:	61fb      	str	r3, [r7, #28]
}
 800c76c:	bf00      	nop
 800c76e:	e7fe      	b.n	800c76e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c776:	6850      	ldr	r0, [r2, #4]
 800c778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c77a:	6892      	ldr	r2, [r2, #8]
 800c77c:	4611      	mov	r1, r2
 800c77e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2b00      	cmp	r3, #0
 800c784:	f2c0 80aa 	blt.w	800c8dc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78e:	695b      	ldr	r3, [r3, #20]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d004      	beq.n	800c79e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c796:	3304      	adds	r3, #4
 800c798:	4618      	mov	r0, r3
 800c79a:	f7fd feeb 	bl	800a574 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c79e:	463b      	mov	r3, r7
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f7ff ff6b 	bl	800c67c <prvSampleTimeNow>
 800c7a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2b09      	cmp	r3, #9
 800c7ac:	f200 8097 	bhi.w	800c8de <prvProcessReceivedCommands+0x19e>
 800c7b0:	a201      	add	r2, pc, #4	; (adr r2, 800c7b8 <prvProcessReceivedCommands+0x78>)
 800c7b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b6:	bf00      	nop
 800c7b8:	0800c7e1 	.word	0x0800c7e1
 800c7bc:	0800c7e1 	.word	0x0800c7e1
 800c7c0:	0800c7e1 	.word	0x0800c7e1
 800c7c4:	0800c855 	.word	0x0800c855
 800c7c8:	0800c869 	.word	0x0800c869
 800c7cc:	0800c8b3 	.word	0x0800c8b3
 800c7d0:	0800c7e1 	.word	0x0800c7e1
 800c7d4:	0800c7e1 	.word	0x0800c7e1
 800c7d8:	0800c855 	.word	0x0800c855
 800c7dc:	0800c869 	.word	0x0800c869
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7e6:	f043 0301 	orr.w	r3, r3, #1
 800c7ea:	b2da      	uxtb	r2, r3
 800c7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c7f2:	68ba      	ldr	r2, [r7, #8]
 800c7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f6:	699b      	ldr	r3, [r3, #24]
 800c7f8:	18d1      	adds	r1, r2, r3
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c800:	f7ff ff5c 	bl	800c6bc <prvInsertTimerInActiveList>
 800c804:	4603      	mov	r3, r0
 800c806:	2b00      	cmp	r3, #0
 800c808:	d069      	beq.n	800c8de <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80c:	6a1b      	ldr	r3, [r3, #32]
 800c80e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c810:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c814:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c818:	f003 0304 	and.w	r3, r3, #4
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d05e      	beq.n	800c8de <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c820:	68ba      	ldr	r2, [r7, #8]
 800c822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c824:	699b      	ldr	r3, [r3, #24]
 800c826:	441a      	add	r2, r3
 800c828:	2300      	movs	r3, #0
 800c82a:	9300      	str	r3, [sp, #0]
 800c82c:	2300      	movs	r3, #0
 800c82e:	2100      	movs	r1, #0
 800c830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c832:	f7ff fe05 	bl	800c440 <xTimerGenericCommand>
 800c836:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c838:	6a3b      	ldr	r3, [r7, #32]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d14f      	bne.n	800c8de <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c842:	f383 8811 	msr	BASEPRI, r3
 800c846:	f3bf 8f6f 	isb	sy
 800c84a:	f3bf 8f4f 	dsb	sy
 800c84e:	61bb      	str	r3, [r7, #24]
}
 800c850:	bf00      	nop
 800c852:	e7fe      	b.n	800c852 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c856:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c85a:	f023 0301 	bic.w	r3, r3, #1
 800c85e:	b2da      	uxtb	r2, r3
 800c860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c862:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c866:	e03a      	b.n	800c8de <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c86a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c86e:	f043 0301 	orr.w	r3, r3, #1
 800c872:	b2da      	uxtb	r2, r3
 800c874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c876:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c87a:	68ba      	ldr	r2, [r7, #8]
 800c87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c87e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c882:	699b      	ldr	r3, [r3, #24]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d10a      	bne.n	800c89e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c88c:	f383 8811 	msr	BASEPRI, r3
 800c890:	f3bf 8f6f 	isb	sy
 800c894:	f3bf 8f4f 	dsb	sy
 800c898:	617b      	str	r3, [r7, #20]
}
 800c89a:	bf00      	nop
 800c89c:	e7fe      	b.n	800c89c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a0:	699a      	ldr	r2, [r3, #24]
 800c8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a4:	18d1      	adds	r1, r2, r3
 800c8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8ac:	f7ff ff06 	bl	800c6bc <prvInsertTimerInActiveList>
					break;
 800c8b0:	e015      	b.n	800c8de <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8b8:	f003 0302 	and.w	r3, r3, #2
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d103      	bne.n	800c8c8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c8c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8c2:	f7fd fcaf 	bl	800a224 <vPortFree>
 800c8c6:	e00a      	b.n	800c8de <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8ce:	f023 0301 	bic.w	r3, r3, #1
 800c8d2:	b2da      	uxtb	r2, r3
 800c8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c8da:	e000      	b.n	800c8de <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c8dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c8de:	4b08      	ldr	r3, [pc, #32]	; (800c900 <prvProcessReceivedCommands+0x1c0>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	1d39      	adds	r1, r7, #4
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7fe fb96 	bl	800b018 <xQueueReceive>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	f47f af2a 	bne.w	800c748 <prvProcessReceivedCommands+0x8>
	}
}
 800c8f4:	bf00      	nop
 800c8f6:	bf00      	nop
 800c8f8:	3730      	adds	r7, #48	; 0x30
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	bf00      	nop
 800c900:	24004a1c 	.word	0x24004a1c

0800c904 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b088      	sub	sp, #32
 800c908:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c90a:	e048      	b.n	800c99e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c90c:	4b2d      	ldr	r3, [pc, #180]	; (800c9c4 <prvSwitchTimerLists+0xc0>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	68db      	ldr	r3, [r3, #12]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c916:	4b2b      	ldr	r3, [pc, #172]	; (800c9c4 <prvSwitchTimerLists+0xc0>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	68db      	ldr	r3, [r3, #12]
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	3304      	adds	r3, #4
 800c924:	4618      	mov	r0, r3
 800c926:	f7fd fe25 	bl	800a574 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	6a1b      	ldr	r3, [r3, #32]
 800c92e:	68f8      	ldr	r0, [r7, #12]
 800c930:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c938:	f003 0304 	and.w	r3, r3, #4
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d02e      	beq.n	800c99e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	699b      	ldr	r3, [r3, #24]
 800c944:	693a      	ldr	r2, [r7, #16]
 800c946:	4413      	add	r3, r2
 800c948:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c94a:	68ba      	ldr	r2, [r7, #8]
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d90e      	bls.n	800c970 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	68ba      	ldr	r2, [r7, #8]
 800c956:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	68fa      	ldr	r2, [r7, #12]
 800c95c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c95e:	4b19      	ldr	r3, [pc, #100]	; (800c9c4 <prvSwitchTimerLists+0xc0>)
 800c960:	681a      	ldr	r2, [r3, #0]
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	3304      	adds	r3, #4
 800c966:	4619      	mov	r1, r3
 800c968:	4610      	mov	r0, r2
 800c96a:	f7fd fdca 	bl	800a502 <vListInsert>
 800c96e:	e016      	b.n	800c99e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c970:	2300      	movs	r3, #0
 800c972:	9300      	str	r3, [sp, #0]
 800c974:	2300      	movs	r3, #0
 800c976:	693a      	ldr	r2, [r7, #16]
 800c978:	2100      	movs	r1, #0
 800c97a:	68f8      	ldr	r0, [r7, #12]
 800c97c:	f7ff fd60 	bl	800c440 <xTimerGenericCommand>
 800c980:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d10a      	bne.n	800c99e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c98c:	f383 8811 	msr	BASEPRI, r3
 800c990:	f3bf 8f6f 	isb	sy
 800c994:	f3bf 8f4f 	dsb	sy
 800c998:	603b      	str	r3, [r7, #0]
}
 800c99a:	bf00      	nop
 800c99c:	e7fe      	b.n	800c99c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c99e:	4b09      	ldr	r3, [pc, #36]	; (800c9c4 <prvSwitchTimerLists+0xc0>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d1b1      	bne.n	800c90c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c9a8:	4b06      	ldr	r3, [pc, #24]	; (800c9c4 <prvSwitchTimerLists+0xc0>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c9ae:	4b06      	ldr	r3, [pc, #24]	; (800c9c8 <prvSwitchTimerLists+0xc4>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	4a04      	ldr	r2, [pc, #16]	; (800c9c4 <prvSwitchTimerLists+0xc0>)
 800c9b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c9b6:	4a04      	ldr	r2, [pc, #16]	; (800c9c8 <prvSwitchTimerLists+0xc4>)
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	6013      	str	r3, [r2, #0]
}
 800c9bc:	bf00      	nop
 800c9be:	3718      	adds	r7, #24
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}
 800c9c4:	24004a14 	.word	0x24004a14
 800c9c8:	24004a18 	.word	0x24004a18

0800c9cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c9d2:	f7fd ff27 	bl	800a824 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c9d6:	4b15      	ldr	r3, [pc, #84]	; (800ca2c <prvCheckForValidListAndQueue+0x60>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d120      	bne.n	800ca20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c9de:	4814      	ldr	r0, [pc, #80]	; (800ca30 <prvCheckForValidListAndQueue+0x64>)
 800c9e0:	f7fd fd3e 	bl	800a460 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c9e4:	4813      	ldr	r0, [pc, #76]	; (800ca34 <prvCheckForValidListAndQueue+0x68>)
 800c9e6:	f7fd fd3b 	bl	800a460 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c9ea:	4b13      	ldr	r3, [pc, #76]	; (800ca38 <prvCheckForValidListAndQueue+0x6c>)
 800c9ec:	4a10      	ldr	r2, [pc, #64]	; (800ca30 <prvCheckForValidListAndQueue+0x64>)
 800c9ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c9f0:	4b12      	ldr	r3, [pc, #72]	; (800ca3c <prvCheckForValidListAndQueue+0x70>)
 800c9f2:	4a10      	ldr	r2, [pc, #64]	; (800ca34 <prvCheckForValidListAndQueue+0x68>)
 800c9f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	9300      	str	r3, [sp, #0]
 800c9fa:	4b11      	ldr	r3, [pc, #68]	; (800ca40 <prvCheckForValidListAndQueue+0x74>)
 800c9fc:	4a11      	ldr	r2, [pc, #68]	; (800ca44 <prvCheckForValidListAndQueue+0x78>)
 800c9fe:	2110      	movs	r1, #16
 800ca00:	200a      	movs	r0, #10
 800ca02:	f7fe f899 	bl	800ab38 <xQueueGenericCreateStatic>
 800ca06:	4603      	mov	r3, r0
 800ca08:	4a08      	ldr	r2, [pc, #32]	; (800ca2c <prvCheckForValidListAndQueue+0x60>)
 800ca0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ca0c:	4b07      	ldr	r3, [pc, #28]	; (800ca2c <prvCheckForValidListAndQueue+0x60>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d005      	beq.n	800ca20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ca14:	4b05      	ldr	r3, [pc, #20]	; (800ca2c <prvCheckForValidListAndQueue+0x60>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	490b      	ldr	r1, [pc, #44]	; (800ca48 <prvCheckForValidListAndQueue+0x7c>)
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7fe fd6c 	bl	800b4f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca20:	f7fd ff30 	bl	800a884 <vPortExitCritical>
}
 800ca24:	bf00      	nop
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	24004a1c 	.word	0x24004a1c
 800ca30:	240049ec 	.word	0x240049ec
 800ca34:	24004a00 	.word	0x24004a00
 800ca38:	24004a14 	.word	0x24004a14
 800ca3c:	24004a18 	.word	0x24004a18
 800ca40:	24004ac8 	.word	0x24004ac8
 800ca44:	24004a28 	.word	0x24004a28
 800ca48:	080113a4 	.word	0x080113a4

0800ca4c <atoi>:
 800ca4c:	220a      	movs	r2, #10
 800ca4e:	2100      	movs	r1, #0
 800ca50:	f001 bd44 	b.w	800e4dc <strtol>

0800ca54 <__errno>:
 800ca54:	4b01      	ldr	r3, [pc, #4]	; (800ca5c <__errno+0x8>)
 800ca56:	6818      	ldr	r0, [r3, #0]
 800ca58:	4770      	bx	lr
 800ca5a:	bf00      	nop
 800ca5c:	24000014 	.word	0x24000014

0800ca60 <__libc_init_array>:
 800ca60:	b570      	push	{r4, r5, r6, lr}
 800ca62:	4d0d      	ldr	r5, [pc, #52]	; (800ca98 <__libc_init_array+0x38>)
 800ca64:	4c0d      	ldr	r4, [pc, #52]	; (800ca9c <__libc_init_array+0x3c>)
 800ca66:	1b64      	subs	r4, r4, r5
 800ca68:	10a4      	asrs	r4, r4, #2
 800ca6a:	2600      	movs	r6, #0
 800ca6c:	42a6      	cmp	r6, r4
 800ca6e:	d109      	bne.n	800ca84 <__libc_init_array+0x24>
 800ca70:	4d0b      	ldr	r5, [pc, #44]	; (800caa0 <__libc_init_array+0x40>)
 800ca72:	4c0c      	ldr	r4, [pc, #48]	; (800caa4 <__libc_init_array+0x44>)
 800ca74:	f004 fbdc 	bl	8011230 <_init>
 800ca78:	1b64      	subs	r4, r4, r5
 800ca7a:	10a4      	asrs	r4, r4, #2
 800ca7c:	2600      	movs	r6, #0
 800ca7e:	42a6      	cmp	r6, r4
 800ca80:	d105      	bne.n	800ca8e <__libc_init_array+0x2e>
 800ca82:	bd70      	pop	{r4, r5, r6, pc}
 800ca84:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca88:	4798      	blx	r3
 800ca8a:	3601      	adds	r6, #1
 800ca8c:	e7ee      	b.n	800ca6c <__libc_init_array+0xc>
 800ca8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca92:	4798      	blx	r3
 800ca94:	3601      	adds	r6, #1
 800ca96:	e7f2      	b.n	800ca7e <__libc_init_array+0x1e>
 800ca98:	08011a04 	.word	0x08011a04
 800ca9c:	08011a04 	.word	0x08011a04
 800caa0:	08011a04 	.word	0x08011a04
 800caa4:	08011a08 	.word	0x08011a08

0800caa8 <__itoa>:
 800caa8:	1e93      	subs	r3, r2, #2
 800caaa:	2b22      	cmp	r3, #34	; 0x22
 800caac:	b510      	push	{r4, lr}
 800caae:	460c      	mov	r4, r1
 800cab0:	d904      	bls.n	800cabc <__itoa+0x14>
 800cab2:	2300      	movs	r3, #0
 800cab4:	700b      	strb	r3, [r1, #0]
 800cab6:	461c      	mov	r4, r3
 800cab8:	4620      	mov	r0, r4
 800caba:	bd10      	pop	{r4, pc}
 800cabc:	2a0a      	cmp	r2, #10
 800cabe:	d109      	bne.n	800cad4 <__itoa+0x2c>
 800cac0:	2800      	cmp	r0, #0
 800cac2:	da07      	bge.n	800cad4 <__itoa+0x2c>
 800cac4:	232d      	movs	r3, #45	; 0x2d
 800cac6:	700b      	strb	r3, [r1, #0]
 800cac8:	4240      	negs	r0, r0
 800caca:	2101      	movs	r1, #1
 800cacc:	4421      	add	r1, r4
 800cace:	f001 fd0f 	bl	800e4f0 <__utoa>
 800cad2:	e7f1      	b.n	800cab8 <__itoa+0x10>
 800cad4:	2100      	movs	r1, #0
 800cad6:	e7f9      	b.n	800cacc <__itoa+0x24>

0800cad8 <itoa>:
 800cad8:	f7ff bfe6 	b.w	800caa8 <__itoa>

0800cadc <memcpy>:
 800cadc:	440a      	add	r2, r1
 800cade:	4291      	cmp	r1, r2
 800cae0:	f100 33ff 	add.w	r3, r0, #4294967295
 800cae4:	d100      	bne.n	800cae8 <memcpy+0xc>
 800cae6:	4770      	bx	lr
 800cae8:	b510      	push	{r4, lr}
 800caea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800caee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800caf2:	4291      	cmp	r1, r2
 800caf4:	d1f9      	bne.n	800caea <memcpy+0xe>
 800caf6:	bd10      	pop	{r4, pc}

0800caf8 <memset>:
 800caf8:	4402      	add	r2, r0
 800cafa:	4603      	mov	r3, r0
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d100      	bne.n	800cb02 <memset+0xa>
 800cb00:	4770      	bx	lr
 800cb02:	f803 1b01 	strb.w	r1, [r3], #1
 800cb06:	e7f9      	b.n	800cafc <memset+0x4>

0800cb08 <__cvt>:
 800cb08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb0a:	ed2d 8b02 	vpush	{d8}
 800cb0e:	eeb0 8b40 	vmov.f64	d8, d0
 800cb12:	b085      	sub	sp, #20
 800cb14:	4617      	mov	r7, r2
 800cb16:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800cb18:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800cb1a:	ee18 2a90 	vmov	r2, s17
 800cb1e:	f025 0520 	bic.w	r5, r5, #32
 800cb22:	2a00      	cmp	r2, #0
 800cb24:	bfb6      	itet	lt
 800cb26:	222d      	movlt	r2, #45	; 0x2d
 800cb28:	2200      	movge	r2, #0
 800cb2a:	eeb1 8b40 	vneglt.f64	d8, d0
 800cb2e:	2d46      	cmp	r5, #70	; 0x46
 800cb30:	460c      	mov	r4, r1
 800cb32:	701a      	strb	r2, [r3, #0]
 800cb34:	d004      	beq.n	800cb40 <__cvt+0x38>
 800cb36:	2d45      	cmp	r5, #69	; 0x45
 800cb38:	d100      	bne.n	800cb3c <__cvt+0x34>
 800cb3a:	3401      	adds	r4, #1
 800cb3c:	2102      	movs	r1, #2
 800cb3e:	e000      	b.n	800cb42 <__cvt+0x3a>
 800cb40:	2103      	movs	r1, #3
 800cb42:	ab03      	add	r3, sp, #12
 800cb44:	9301      	str	r3, [sp, #4]
 800cb46:	ab02      	add	r3, sp, #8
 800cb48:	9300      	str	r3, [sp, #0]
 800cb4a:	4622      	mov	r2, r4
 800cb4c:	4633      	mov	r3, r6
 800cb4e:	eeb0 0b48 	vmov.f64	d0, d8
 800cb52:	f001 fd9d 	bl	800e690 <_dtoa_r>
 800cb56:	2d47      	cmp	r5, #71	; 0x47
 800cb58:	d109      	bne.n	800cb6e <__cvt+0x66>
 800cb5a:	07fb      	lsls	r3, r7, #31
 800cb5c:	d407      	bmi.n	800cb6e <__cvt+0x66>
 800cb5e:	9b03      	ldr	r3, [sp, #12]
 800cb60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb62:	1a1b      	subs	r3, r3, r0
 800cb64:	6013      	str	r3, [r2, #0]
 800cb66:	b005      	add	sp, #20
 800cb68:	ecbd 8b02 	vpop	{d8}
 800cb6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb6e:	2d46      	cmp	r5, #70	; 0x46
 800cb70:	eb00 0204 	add.w	r2, r0, r4
 800cb74:	d10c      	bne.n	800cb90 <__cvt+0x88>
 800cb76:	7803      	ldrb	r3, [r0, #0]
 800cb78:	2b30      	cmp	r3, #48	; 0x30
 800cb7a:	d107      	bne.n	800cb8c <__cvt+0x84>
 800cb7c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cb80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb84:	bf1c      	itt	ne
 800cb86:	f1c4 0401 	rsbne	r4, r4, #1
 800cb8a:	6034      	strne	r4, [r6, #0]
 800cb8c:	6833      	ldr	r3, [r6, #0]
 800cb8e:	441a      	add	r2, r3
 800cb90:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cb94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb98:	bf08      	it	eq
 800cb9a:	9203      	streq	r2, [sp, #12]
 800cb9c:	2130      	movs	r1, #48	; 0x30
 800cb9e:	9b03      	ldr	r3, [sp, #12]
 800cba0:	4293      	cmp	r3, r2
 800cba2:	d2dc      	bcs.n	800cb5e <__cvt+0x56>
 800cba4:	1c5c      	adds	r4, r3, #1
 800cba6:	9403      	str	r4, [sp, #12]
 800cba8:	7019      	strb	r1, [r3, #0]
 800cbaa:	e7f8      	b.n	800cb9e <__cvt+0x96>

0800cbac <__exponent>:
 800cbac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbae:	4603      	mov	r3, r0
 800cbb0:	2900      	cmp	r1, #0
 800cbb2:	bfb8      	it	lt
 800cbb4:	4249      	neglt	r1, r1
 800cbb6:	f803 2b02 	strb.w	r2, [r3], #2
 800cbba:	bfb4      	ite	lt
 800cbbc:	222d      	movlt	r2, #45	; 0x2d
 800cbbe:	222b      	movge	r2, #43	; 0x2b
 800cbc0:	2909      	cmp	r1, #9
 800cbc2:	7042      	strb	r2, [r0, #1]
 800cbc4:	dd2a      	ble.n	800cc1c <__exponent+0x70>
 800cbc6:	f10d 0407 	add.w	r4, sp, #7
 800cbca:	46a4      	mov	ip, r4
 800cbcc:	270a      	movs	r7, #10
 800cbce:	46a6      	mov	lr, r4
 800cbd0:	460a      	mov	r2, r1
 800cbd2:	fb91 f6f7 	sdiv	r6, r1, r7
 800cbd6:	fb07 1516 	mls	r5, r7, r6, r1
 800cbda:	3530      	adds	r5, #48	; 0x30
 800cbdc:	2a63      	cmp	r2, #99	; 0x63
 800cbde:	f104 34ff 	add.w	r4, r4, #4294967295
 800cbe2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cbe6:	4631      	mov	r1, r6
 800cbe8:	dcf1      	bgt.n	800cbce <__exponent+0x22>
 800cbea:	3130      	adds	r1, #48	; 0x30
 800cbec:	f1ae 0502 	sub.w	r5, lr, #2
 800cbf0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cbf4:	1c44      	adds	r4, r0, #1
 800cbf6:	4629      	mov	r1, r5
 800cbf8:	4561      	cmp	r1, ip
 800cbfa:	d30a      	bcc.n	800cc12 <__exponent+0x66>
 800cbfc:	f10d 0209 	add.w	r2, sp, #9
 800cc00:	eba2 020e 	sub.w	r2, r2, lr
 800cc04:	4565      	cmp	r5, ip
 800cc06:	bf88      	it	hi
 800cc08:	2200      	movhi	r2, #0
 800cc0a:	4413      	add	r3, r2
 800cc0c:	1a18      	subs	r0, r3, r0
 800cc0e:	b003      	add	sp, #12
 800cc10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc16:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cc1a:	e7ed      	b.n	800cbf8 <__exponent+0x4c>
 800cc1c:	2330      	movs	r3, #48	; 0x30
 800cc1e:	3130      	adds	r1, #48	; 0x30
 800cc20:	7083      	strb	r3, [r0, #2]
 800cc22:	70c1      	strb	r1, [r0, #3]
 800cc24:	1d03      	adds	r3, r0, #4
 800cc26:	e7f1      	b.n	800cc0c <__exponent+0x60>

0800cc28 <_printf_float>:
 800cc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc2c:	b08b      	sub	sp, #44	; 0x2c
 800cc2e:	460c      	mov	r4, r1
 800cc30:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800cc34:	4616      	mov	r6, r2
 800cc36:	461f      	mov	r7, r3
 800cc38:	4605      	mov	r5, r0
 800cc3a:	f002 fe1b 	bl	800f874 <_localeconv_r>
 800cc3e:	f8d0 b000 	ldr.w	fp, [r0]
 800cc42:	4658      	mov	r0, fp
 800cc44:	f7f3 fb4c 	bl	80002e0 <strlen>
 800cc48:	2300      	movs	r3, #0
 800cc4a:	9308      	str	r3, [sp, #32]
 800cc4c:	f8d8 3000 	ldr.w	r3, [r8]
 800cc50:	f894 9018 	ldrb.w	r9, [r4, #24]
 800cc54:	6822      	ldr	r2, [r4, #0]
 800cc56:	3307      	adds	r3, #7
 800cc58:	f023 0307 	bic.w	r3, r3, #7
 800cc5c:	f103 0108 	add.w	r1, r3, #8
 800cc60:	f8c8 1000 	str.w	r1, [r8]
 800cc64:	4682      	mov	sl, r0
 800cc66:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cc6a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800cc6e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800ced0 <_printf_float+0x2a8>
 800cc72:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800cc76:	eeb0 6bc0 	vabs.f64	d6, d0
 800cc7a:	eeb4 6b47 	vcmp.f64	d6, d7
 800cc7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc82:	dd24      	ble.n	800ccce <_printf_float+0xa6>
 800cc84:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cc88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc8c:	d502      	bpl.n	800cc94 <_printf_float+0x6c>
 800cc8e:	232d      	movs	r3, #45	; 0x2d
 800cc90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc94:	4b90      	ldr	r3, [pc, #576]	; (800ced8 <_printf_float+0x2b0>)
 800cc96:	4891      	ldr	r0, [pc, #580]	; (800cedc <_printf_float+0x2b4>)
 800cc98:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800cc9c:	bf94      	ite	ls
 800cc9e:	4698      	movls	r8, r3
 800cca0:	4680      	movhi	r8, r0
 800cca2:	2303      	movs	r3, #3
 800cca4:	6123      	str	r3, [r4, #16]
 800cca6:	f022 0204 	bic.w	r2, r2, #4
 800ccaa:	2300      	movs	r3, #0
 800ccac:	6022      	str	r2, [r4, #0]
 800ccae:	9304      	str	r3, [sp, #16]
 800ccb0:	9700      	str	r7, [sp, #0]
 800ccb2:	4633      	mov	r3, r6
 800ccb4:	aa09      	add	r2, sp, #36	; 0x24
 800ccb6:	4621      	mov	r1, r4
 800ccb8:	4628      	mov	r0, r5
 800ccba:	f000 f9d3 	bl	800d064 <_printf_common>
 800ccbe:	3001      	adds	r0, #1
 800ccc0:	f040 808a 	bne.w	800cdd8 <_printf_float+0x1b0>
 800ccc4:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc8:	b00b      	add	sp, #44	; 0x2c
 800ccca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccce:	eeb4 0b40 	vcmp.f64	d0, d0
 800ccd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccd6:	d709      	bvc.n	800ccec <_printf_float+0xc4>
 800ccd8:	ee10 3a90 	vmov	r3, s1
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	bfbc      	itt	lt
 800cce0:	232d      	movlt	r3, #45	; 0x2d
 800cce2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cce6:	487e      	ldr	r0, [pc, #504]	; (800cee0 <_printf_float+0x2b8>)
 800cce8:	4b7e      	ldr	r3, [pc, #504]	; (800cee4 <_printf_float+0x2bc>)
 800ccea:	e7d5      	b.n	800cc98 <_printf_float+0x70>
 800ccec:	6863      	ldr	r3, [r4, #4]
 800ccee:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ccf2:	9104      	str	r1, [sp, #16]
 800ccf4:	1c59      	adds	r1, r3, #1
 800ccf6:	d13c      	bne.n	800cd72 <_printf_float+0x14a>
 800ccf8:	2306      	movs	r3, #6
 800ccfa:	6063      	str	r3, [r4, #4]
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	9303      	str	r3, [sp, #12]
 800cd00:	ab08      	add	r3, sp, #32
 800cd02:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800cd06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cd0a:	ab07      	add	r3, sp, #28
 800cd0c:	6861      	ldr	r1, [r4, #4]
 800cd0e:	9300      	str	r3, [sp, #0]
 800cd10:	6022      	str	r2, [r4, #0]
 800cd12:	f10d 031b 	add.w	r3, sp, #27
 800cd16:	4628      	mov	r0, r5
 800cd18:	f7ff fef6 	bl	800cb08 <__cvt>
 800cd1c:	9b04      	ldr	r3, [sp, #16]
 800cd1e:	9907      	ldr	r1, [sp, #28]
 800cd20:	2b47      	cmp	r3, #71	; 0x47
 800cd22:	4680      	mov	r8, r0
 800cd24:	d108      	bne.n	800cd38 <_printf_float+0x110>
 800cd26:	1cc8      	adds	r0, r1, #3
 800cd28:	db02      	blt.n	800cd30 <_printf_float+0x108>
 800cd2a:	6863      	ldr	r3, [r4, #4]
 800cd2c:	4299      	cmp	r1, r3
 800cd2e:	dd41      	ble.n	800cdb4 <_printf_float+0x18c>
 800cd30:	f1a9 0902 	sub.w	r9, r9, #2
 800cd34:	fa5f f989 	uxtb.w	r9, r9
 800cd38:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cd3c:	d820      	bhi.n	800cd80 <_printf_float+0x158>
 800cd3e:	3901      	subs	r1, #1
 800cd40:	464a      	mov	r2, r9
 800cd42:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cd46:	9107      	str	r1, [sp, #28]
 800cd48:	f7ff ff30 	bl	800cbac <__exponent>
 800cd4c:	9a08      	ldr	r2, [sp, #32]
 800cd4e:	9004      	str	r0, [sp, #16]
 800cd50:	1813      	adds	r3, r2, r0
 800cd52:	2a01      	cmp	r2, #1
 800cd54:	6123      	str	r3, [r4, #16]
 800cd56:	dc02      	bgt.n	800cd5e <_printf_float+0x136>
 800cd58:	6822      	ldr	r2, [r4, #0]
 800cd5a:	07d2      	lsls	r2, r2, #31
 800cd5c:	d501      	bpl.n	800cd62 <_printf_float+0x13a>
 800cd5e:	3301      	adds	r3, #1
 800cd60:	6123      	str	r3, [r4, #16]
 800cd62:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d0a2      	beq.n	800ccb0 <_printf_float+0x88>
 800cd6a:	232d      	movs	r3, #45	; 0x2d
 800cd6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd70:	e79e      	b.n	800ccb0 <_printf_float+0x88>
 800cd72:	9904      	ldr	r1, [sp, #16]
 800cd74:	2947      	cmp	r1, #71	; 0x47
 800cd76:	d1c1      	bne.n	800ccfc <_printf_float+0xd4>
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d1bf      	bne.n	800ccfc <_printf_float+0xd4>
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	e7bc      	b.n	800ccfa <_printf_float+0xd2>
 800cd80:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800cd84:	d118      	bne.n	800cdb8 <_printf_float+0x190>
 800cd86:	2900      	cmp	r1, #0
 800cd88:	6863      	ldr	r3, [r4, #4]
 800cd8a:	dd0b      	ble.n	800cda4 <_printf_float+0x17c>
 800cd8c:	6121      	str	r1, [r4, #16]
 800cd8e:	b913      	cbnz	r3, 800cd96 <_printf_float+0x16e>
 800cd90:	6822      	ldr	r2, [r4, #0]
 800cd92:	07d0      	lsls	r0, r2, #31
 800cd94:	d502      	bpl.n	800cd9c <_printf_float+0x174>
 800cd96:	3301      	adds	r3, #1
 800cd98:	440b      	add	r3, r1
 800cd9a:	6123      	str	r3, [r4, #16]
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	65a1      	str	r1, [r4, #88]	; 0x58
 800cda0:	9304      	str	r3, [sp, #16]
 800cda2:	e7de      	b.n	800cd62 <_printf_float+0x13a>
 800cda4:	b913      	cbnz	r3, 800cdac <_printf_float+0x184>
 800cda6:	6822      	ldr	r2, [r4, #0]
 800cda8:	07d2      	lsls	r2, r2, #31
 800cdaa:	d501      	bpl.n	800cdb0 <_printf_float+0x188>
 800cdac:	3302      	adds	r3, #2
 800cdae:	e7f4      	b.n	800cd9a <_printf_float+0x172>
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	e7f2      	b.n	800cd9a <_printf_float+0x172>
 800cdb4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800cdb8:	9b08      	ldr	r3, [sp, #32]
 800cdba:	4299      	cmp	r1, r3
 800cdbc:	db05      	blt.n	800cdca <_printf_float+0x1a2>
 800cdbe:	6823      	ldr	r3, [r4, #0]
 800cdc0:	6121      	str	r1, [r4, #16]
 800cdc2:	07d8      	lsls	r0, r3, #31
 800cdc4:	d5ea      	bpl.n	800cd9c <_printf_float+0x174>
 800cdc6:	1c4b      	adds	r3, r1, #1
 800cdc8:	e7e7      	b.n	800cd9a <_printf_float+0x172>
 800cdca:	2900      	cmp	r1, #0
 800cdcc:	bfd4      	ite	le
 800cdce:	f1c1 0202 	rsble	r2, r1, #2
 800cdd2:	2201      	movgt	r2, #1
 800cdd4:	4413      	add	r3, r2
 800cdd6:	e7e0      	b.n	800cd9a <_printf_float+0x172>
 800cdd8:	6823      	ldr	r3, [r4, #0]
 800cdda:	055a      	lsls	r2, r3, #21
 800cddc:	d407      	bmi.n	800cdee <_printf_float+0x1c6>
 800cdde:	6923      	ldr	r3, [r4, #16]
 800cde0:	4642      	mov	r2, r8
 800cde2:	4631      	mov	r1, r6
 800cde4:	4628      	mov	r0, r5
 800cde6:	47b8      	blx	r7
 800cde8:	3001      	adds	r0, #1
 800cdea:	d12a      	bne.n	800ce42 <_printf_float+0x21a>
 800cdec:	e76a      	b.n	800ccc4 <_printf_float+0x9c>
 800cdee:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cdf2:	f240 80e2 	bls.w	800cfba <_printf_float+0x392>
 800cdf6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cdfa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cdfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce02:	d133      	bne.n	800ce6c <_printf_float+0x244>
 800ce04:	4a38      	ldr	r2, [pc, #224]	; (800cee8 <_printf_float+0x2c0>)
 800ce06:	2301      	movs	r3, #1
 800ce08:	4631      	mov	r1, r6
 800ce0a:	4628      	mov	r0, r5
 800ce0c:	47b8      	blx	r7
 800ce0e:	3001      	adds	r0, #1
 800ce10:	f43f af58 	beq.w	800ccc4 <_printf_float+0x9c>
 800ce14:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	db02      	blt.n	800ce22 <_printf_float+0x1fa>
 800ce1c:	6823      	ldr	r3, [r4, #0]
 800ce1e:	07d8      	lsls	r0, r3, #31
 800ce20:	d50f      	bpl.n	800ce42 <_printf_float+0x21a>
 800ce22:	4653      	mov	r3, sl
 800ce24:	465a      	mov	r2, fp
 800ce26:	4631      	mov	r1, r6
 800ce28:	4628      	mov	r0, r5
 800ce2a:	47b8      	blx	r7
 800ce2c:	3001      	adds	r0, #1
 800ce2e:	f43f af49 	beq.w	800ccc4 <_printf_float+0x9c>
 800ce32:	f04f 0800 	mov.w	r8, #0
 800ce36:	f104 091a 	add.w	r9, r4, #26
 800ce3a:	9b08      	ldr	r3, [sp, #32]
 800ce3c:	3b01      	subs	r3, #1
 800ce3e:	4543      	cmp	r3, r8
 800ce40:	dc09      	bgt.n	800ce56 <_printf_float+0x22e>
 800ce42:	6823      	ldr	r3, [r4, #0]
 800ce44:	079b      	lsls	r3, r3, #30
 800ce46:	f100 8108 	bmi.w	800d05a <_printf_float+0x432>
 800ce4a:	68e0      	ldr	r0, [r4, #12]
 800ce4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce4e:	4298      	cmp	r0, r3
 800ce50:	bfb8      	it	lt
 800ce52:	4618      	movlt	r0, r3
 800ce54:	e738      	b.n	800ccc8 <_printf_float+0xa0>
 800ce56:	2301      	movs	r3, #1
 800ce58:	464a      	mov	r2, r9
 800ce5a:	4631      	mov	r1, r6
 800ce5c:	4628      	mov	r0, r5
 800ce5e:	47b8      	blx	r7
 800ce60:	3001      	adds	r0, #1
 800ce62:	f43f af2f 	beq.w	800ccc4 <_printf_float+0x9c>
 800ce66:	f108 0801 	add.w	r8, r8, #1
 800ce6a:	e7e6      	b.n	800ce3a <_printf_float+0x212>
 800ce6c:	9b07      	ldr	r3, [sp, #28]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	dc3c      	bgt.n	800ceec <_printf_float+0x2c4>
 800ce72:	4a1d      	ldr	r2, [pc, #116]	; (800cee8 <_printf_float+0x2c0>)
 800ce74:	2301      	movs	r3, #1
 800ce76:	4631      	mov	r1, r6
 800ce78:	4628      	mov	r0, r5
 800ce7a:	47b8      	blx	r7
 800ce7c:	3001      	adds	r0, #1
 800ce7e:	f43f af21 	beq.w	800ccc4 <_printf_float+0x9c>
 800ce82:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ce86:	4313      	orrs	r3, r2
 800ce88:	d102      	bne.n	800ce90 <_printf_float+0x268>
 800ce8a:	6823      	ldr	r3, [r4, #0]
 800ce8c:	07d9      	lsls	r1, r3, #31
 800ce8e:	d5d8      	bpl.n	800ce42 <_printf_float+0x21a>
 800ce90:	4653      	mov	r3, sl
 800ce92:	465a      	mov	r2, fp
 800ce94:	4631      	mov	r1, r6
 800ce96:	4628      	mov	r0, r5
 800ce98:	47b8      	blx	r7
 800ce9a:	3001      	adds	r0, #1
 800ce9c:	f43f af12 	beq.w	800ccc4 <_printf_float+0x9c>
 800cea0:	f04f 0900 	mov.w	r9, #0
 800cea4:	f104 0a1a 	add.w	sl, r4, #26
 800cea8:	9b07      	ldr	r3, [sp, #28]
 800ceaa:	425b      	negs	r3, r3
 800ceac:	454b      	cmp	r3, r9
 800ceae:	dc01      	bgt.n	800ceb4 <_printf_float+0x28c>
 800ceb0:	9b08      	ldr	r3, [sp, #32]
 800ceb2:	e795      	b.n	800cde0 <_printf_float+0x1b8>
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	4652      	mov	r2, sl
 800ceb8:	4631      	mov	r1, r6
 800ceba:	4628      	mov	r0, r5
 800cebc:	47b8      	blx	r7
 800cebe:	3001      	adds	r0, #1
 800cec0:	f43f af00 	beq.w	800ccc4 <_printf_float+0x9c>
 800cec4:	f109 0901 	add.w	r9, r9, #1
 800cec8:	e7ee      	b.n	800cea8 <_printf_float+0x280>
 800ceca:	bf00      	nop
 800cecc:	f3af 8000 	nop.w
 800ced0:	ffffffff 	.word	0xffffffff
 800ced4:	7fefffff 	.word	0x7fefffff
 800ced8:	0801152c 	.word	0x0801152c
 800cedc:	08011530 	.word	0x08011530
 800cee0:	08011538 	.word	0x08011538
 800cee4:	08011534 	.word	0x08011534
 800cee8:	0801153c 	.word	0x0801153c
 800ceec:	9a08      	ldr	r2, [sp, #32]
 800ceee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cef0:	429a      	cmp	r2, r3
 800cef2:	bfa8      	it	ge
 800cef4:	461a      	movge	r2, r3
 800cef6:	2a00      	cmp	r2, #0
 800cef8:	4691      	mov	r9, r2
 800cefa:	dc38      	bgt.n	800cf6e <_printf_float+0x346>
 800cefc:	2300      	movs	r3, #0
 800cefe:	9305      	str	r3, [sp, #20]
 800cf00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf04:	f104 021a 	add.w	r2, r4, #26
 800cf08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf0a:	9905      	ldr	r1, [sp, #20]
 800cf0c:	9304      	str	r3, [sp, #16]
 800cf0e:	eba3 0309 	sub.w	r3, r3, r9
 800cf12:	428b      	cmp	r3, r1
 800cf14:	dc33      	bgt.n	800cf7e <_printf_float+0x356>
 800cf16:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	db3c      	blt.n	800cf98 <_printf_float+0x370>
 800cf1e:	6823      	ldr	r3, [r4, #0]
 800cf20:	07da      	lsls	r2, r3, #31
 800cf22:	d439      	bmi.n	800cf98 <_printf_float+0x370>
 800cf24:	9a08      	ldr	r2, [sp, #32]
 800cf26:	9b04      	ldr	r3, [sp, #16]
 800cf28:	9907      	ldr	r1, [sp, #28]
 800cf2a:	1ad3      	subs	r3, r2, r3
 800cf2c:	eba2 0901 	sub.w	r9, r2, r1
 800cf30:	4599      	cmp	r9, r3
 800cf32:	bfa8      	it	ge
 800cf34:	4699      	movge	r9, r3
 800cf36:	f1b9 0f00 	cmp.w	r9, #0
 800cf3a:	dc35      	bgt.n	800cfa8 <_printf_float+0x380>
 800cf3c:	f04f 0800 	mov.w	r8, #0
 800cf40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf44:	f104 0a1a 	add.w	sl, r4, #26
 800cf48:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cf4c:	1a9b      	subs	r3, r3, r2
 800cf4e:	eba3 0309 	sub.w	r3, r3, r9
 800cf52:	4543      	cmp	r3, r8
 800cf54:	f77f af75 	ble.w	800ce42 <_printf_float+0x21a>
 800cf58:	2301      	movs	r3, #1
 800cf5a:	4652      	mov	r2, sl
 800cf5c:	4631      	mov	r1, r6
 800cf5e:	4628      	mov	r0, r5
 800cf60:	47b8      	blx	r7
 800cf62:	3001      	adds	r0, #1
 800cf64:	f43f aeae 	beq.w	800ccc4 <_printf_float+0x9c>
 800cf68:	f108 0801 	add.w	r8, r8, #1
 800cf6c:	e7ec      	b.n	800cf48 <_printf_float+0x320>
 800cf6e:	4613      	mov	r3, r2
 800cf70:	4631      	mov	r1, r6
 800cf72:	4642      	mov	r2, r8
 800cf74:	4628      	mov	r0, r5
 800cf76:	47b8      	blx	r7
 800cf78:	3001      	adds	r0, #1
 800cf7a:	d1bf      	bne.n	800cefc <_printf_float+0x2d4>
 800cf7c:	e6a2      	b.n	800ccc4 <_printf_float+0x9c>
 800cf7e:	2301      	movs	r3, #1
 800cf80:	4631      	mov	r1, r6
 800cf82:	4628      	mov	r0, r5
 800cf84:	9204      	str	r2, [sp, #16]
 800cf86:	47b8      	blx	r7
 800cf88:	3001      	adds	r0, #1
 800cf8a:	f43f ae9b 	beq.w	800ccc4 <_printf_float+0x9c>
 800cf8e:	9b05      	ldr	r3, [sp, #20]
 800cf90:	9a04      	ldr	r2, [sp, #16]
 800cf92:	3301      	adds	r3, #1
 800cf94:	9305      	str	r3, [sp, #20]
 800cf96:	e7b7      	b.n	800cf08 <_printf_float+0x2e0>
 800cf98:	4653      	mov	r3, sl
 800cf9a:	465a      	mov	r2, fp
 800cf9c:	4631      	mov	r1, r6
 800cf9e:	4628      	mov	r0, r5
 800cfa0:	47b8      	blx	r7
 800cfa2:	3001      	adds	r0, #1
 800cfa4:	d1be      	bne.n	800cf24 <_printf_float+0x2fc>
 800cfa6:	e68d      	b.n	800ccc4 <_printf_float+0x9c>
 800cfa8:	9a04      	ldr	r2, [sp, #16]
 800cfaa:	464b      	mov	r3, r9
 800cfac:	4442      	add	r2, r8
 800cfae:	4631      	mov	r1, r6
 800cfb0:	4628      	mov	r0, r5
 800cfb2:	47b8      	blx	r7
 800cfb4:	3001      	adds	r0, #1
 800cfb6:	d1c1      	bne.n	800cf3c <_printf_float+0x314>
 800cfb8:	e684      	b.n	800ccc4 <_printf_float+0x9c>
 800cfba:	9a08      	ldr	r2, [sp, #32]
 800cfbc:	2a01      	cmp	r2, #1
 800cfbe:	dc01      	bgt.n	800cfc4 <_printf_float+0x39c>
 800cfc0:	07db      	lsls	r3, r3, #31
 800cfc2:	d537      	bpl.n	800d034 <_printf_float+0x40c>
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	4642      	mov	r2, r8
 800cfc8:	4631      	mov	r1, r6
 800cfca:	4628      	mov	r0, r5
 800cfcc:	47b8      	blx	r7
 800cfce:	3001      	adds	r0, #1
 800cfd0:	f43f ae78 	beq.w	800ccc4 <_printf_float+0x9c>
 800cfd4:	4653      	mov	r3, sl
 800cfd6:	465a      	mov	r2, fp
 800cfd8:	4631      	mov	r1, r6
 800cfda:	4628      	mov	r0, r5
 800cfdc:	47b8      	blx	r7
 800cfde:	3001      	adds	r0, #1
 800cfe0:	f43f ae70 	beq.w	800ccc4 <_printf_float+0x9c>
 800cfe4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cfe8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cfec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cff0:	d01b      	beq.n	800d02a <_printf_float+0x402>
 800cff2:	9b08      	ldr	r3, [sp, #32]
 800cff4:	f108 0201 	add.w	r2, r8, #1
 800cff8:	3b01      	subs	r3, #1
 800cffa:	4631      	mov	r1, r6
 800cffc:	4628      	mov	r0, r5
 800cffe:	47b8      	blx	r7
 800d000:	3001      	adds	r0, #1
 800d002:	d10e      	bne.n	800d022 <_printf_float+0x3fa>
 800d004:	e65e      	b.n	800ccc4 <_printf_float+0x9c>
 800d006:	2301      	movs	r3, #1
 800d008:	464a      	mov	r2, r9
 800d00a:	4631      	mov	r1, r6
 800d00c:	4628      	mov	r0, r5
 800d00e:	47b8      	blx	r7
 800d010:	3001      	adds	r0, #1
 800d012:	f43f ae57 	beq.w	800ccc4 <_printf_float+0x9c>
 800d016:	f108 0801 	add.w	r8, r8, #1
 800d01a:	9b08      	ldr	r3, [sp, #32]
 800d01c:	3b01      	subs	r3, #1
 800d01e:	4543      	cmp	r3, r8
 800d020:	dcf1      	bgt.n	800d006 <_printf_float+0x3de>
 800d022:	9b04      	ldr	r3, [sp, #16]
 800d024:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d028:	e6db      	b.n	800cde2 <_printf_float+0x1ba>
 800d02a:	f04f 0800 	mov.w	r8, #0
 800d02e:	f104 091a 	add.w	r9, r4, #26
 800d032:	e7f2      	b.n	800d01a <_printf_float+0x3f2>
 800d034:	2301      	movs	r3, #1
 800d036:	4642      	mov	r2, r8
 800d038:	e7df      	b.n	800cffa <_printf_float+0x3d2>
 800d03a:	2301      	movs	r3, #1
 800d03c:	464a      	mov	r2, r9
 800d03e:	4631      	mov	r1, r6
 800d040:	4628      	mov	r0, r5
 800d042:	47b8      	blx	r7
 800d044:	3001      	adds	r0, #1
 800d046:	f43f ae3d 	beq.w	800ccc4 <_printf_float+0x9c>
 800d04a:	f108 0801 	add.w	r8, r8, #1
 800d04e:	68e3      	ldr	r3, [r4, #12]
 800d050:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d052:	1a5b      	subs	r3, r3, r1
 800d054:	4543      	cmp	r3, r8
 800d056:	dcf0      	bgt.n	800d03a <_printf_float+0x412>
 800d058:	e6f7      	b.n	800ce4a <_printf_float+0x222>
 800d05a:	f04f 0800 	mov.w	r8, #0
 800d05e:	f104 0919 	add.w	r9, r4, #25
 800d062:	e7f4      	b.n	800d04e <_printf_float+0x426>

0800d064 <_printf_common>:
 800d064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d068:	4616      	mov	r6, r2
 800d06a:	4699      	mov	r9, r3
 800d06c:	688a      	ldr	r2, [r1, #8]
 800d06e:	690b      	ldr	r3, [r1, #16]
 800d070:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d074:	4293      	cmp	r3, r2
 800d076:	bfb8      	it	lt
 800d078:	4613      	movlt	r3, r2
 800d07a:	6033      	str	r3, [r6, #0]
 800d07c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d080:	4607      	mov	r7, r0
 800d082:	460c      	mov	r4, r1
 800d084:	b10a      	cbz	r2, 800d08a <_printf_common+0x26>
 800d086:	3301      	adds	r3, #1
 800d088:	6033      	str	r3, [r6, #0]
 800d08a:	6823      	ldr	r3, [r4, #0]
 800d08c:	0699      	lsls	r1, r3, #26
 800d08e:	bf42      	ittt	mi
 800d090:	6833      	ldrmi	r3, [r6, #0]
 800d092:	3302      	addmi	r3, #2
 800d094:	6033      	strmi	r3, [r6, #0]
 800d096:	6825      	ldr	r5, [r4, #0]
 800d098:	f015 0506 	ands.w	r5, r5, #6
 800d09c:	d106      	bne.n	800d0ac <_printf_common+0x48>
 800d09e:	f104 0a19 	add.w	sl, r4, #25
 800d0a2:	68e3      	ldr	r3, [r4, #12]
 800d0a4:	6832      	ldr	r2, [r6, #0]
 800d0a6:	1a9b      	subs	r3, r3, r2
 800d0a8:	42ab      	cmp	r3, r5
 800d0aa:	dc26      	bgt.n	800d0fa <_printf_common+0x96>
 800d0ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d0b0:	1e13      	subs	r3, r2, #0
 800d0b2:	6822      	ldr	r2, [r4, #0]
 800d0b4:	bf18      	it	ne
 800d0b6:	2301      	movne	r3, #1
 800d0b8:	0692      	lsls	r2, r2, #26
 800d0ba:	d42b      	bmi.n	800d114 <_printf_common+0xb0>
 800d0bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d0c0:	4649      	mov	r1, r9
 800d0c2:	4638      	mov	r0, r7
 800d0c4:	47c0      	blx	r8
 800d0c6:	3001      	adds	r0, #1
 800d0c8:	d01e      	beq.n	800d108 <_printf_common+0xa4>
 800d0ca:	6823      	ldr	r3, [r4, #0]
 800d0cc:	68e5      	ldr	r5, [r4, #12]
 800d0ce:	6832      	ldr	r2, [r6, #0]
 800d0d0:	f003 0306 	and.w	r3, r3, #6
 800d0d4:	2b04      	cmp	r3, #4
 800d0d6:	bf08      	it	eq
 800d0d8:	1aad      	subeq	r5, r5, r2
 800d0da:	68a3      	ldr	r3, [r4, #8]
 800d0dc:	6922      	ldr	r2, [r4, #16]
 800d0de:	bf0c      	ite	eq
 800d0e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0e4:	2500      	movne	r5, #0
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	bfc4      	itt	gt
 800d0ea:	1a9b      	subgt	r3, r3, r2
 800d0ec:	18ed      	addgt	r5, r5, r3
 800d0ee:	2600      	movs	r6, #0
 800d0f0:	341a      	adds	r4, #26
 800d0f2:	42b5      	cmp	r5, r6
 800d0f4:	d11a      	bne.n	800d12c <_printf_common+0xc8>
 800d0f6:	2000      	movs	r0, #0
 800d0f8:	e008      	b.n	800d10c <_printf_common+0xa8>
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	4652      	mov	r2, sl
 800d0fe:	4649      	mov	r1, r9
 800d100:	4638      	mov	r0, r7
 800d102:	47c0      	blx	r8
 800d104:	3001      	adds	r0, #1
 800d106:	d103      	bne.n	800d110 <_printf_common+0xac>
 800d108:	f04f 30ff 	mov.w	r0, #4294967295
 800d10c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d110:	3501      	adds	r5, #1
 800d112:	e7c6      	b.n	800d0a2 <_printf_common+0x3e>
 800d114:	18e1      	adds	r1, r4, r3
 800d116:	1c5a      	adds	r2, r3, #1
 800d118:	2030      	movs	r0, #48	; 0x30
 800d11a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d11e:	4422      	add	r2, r4
 800d120:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d124:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d128:	3302      	adds	r3, #2
 800d12a:	e7c7      	b.n	800d0bc <_printf_common+0x58>
 800d12c:	2301      	movs	r3, #1
 800d12e:	4622      	mov	r2, r4
 800d130:	4649      	mov	r1, r9
 800d132:	4638      	mov	r0, r7
 800d134:	47c0      	blx	r8
 800d136:	3001      	adds	r0, #1
 800d138:	d0e6      	beq.n	800d108 <_printf_common+0xa4>
 800d13a:	3601      	adds	r6, #1
 800d13c:	e7d9      	b.n	800d0f2 <_printf_common+0x8e>
	...

0800d140 <_printf_i>:
 800d140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d144:	460c      	mov	r4, r1
 800d146:	4691      	mov	r9, r2
 800d148:	7e27      	ldrb	r7, [r4, #24]
 800d14a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d14c:	2f78      	cmp	r7, #120	; 0x78
 800d14e:	4680      	mov	r8, r0
 800d150:	469a      	mov	sl, r3
 800d152:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d156:	d807      	bhi.n	800d168 <_printf_i+0x28>
 800d158:	2f62      	cmp	r7, #98	; 0x62
 800d15a:	d80a      	bhi.n	800d172 <_printf_i+0x32>
 800d15c:	2f00      	cmp	r7, #0
 800d15e:	f000 80d8 	beq.w	800d312 <_printf_i+0x1d2>
 800d162:	2f58      	cmp	r7, #88	; 0x58
 800d164:	f000 80a3 	beq.w	800d2ae <_printf_i+0x16e>
 800d168:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d16c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d170:	e03a      	b.n	800d1e8 <_printf_i+0xa8>
 800d172:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d176:	2b15      	cmp	r3, #21
 800d178:	d8f6      	bhi.n	800d168 <_printf_i+0x28>
 800d17a:	a001      	add	r0, pc, #4	; (adr r0, 800d180 <_printf_i+0x40>)
 800d17c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d180:	0800d1d9 	.word	0x0800d1d9
 800d184:	0800d1ed 	.word	0x0800d1ed
 800d188:	0800d169 	.word	0x0800d169
 800d18c:	0800d169 	.word	0x0800d169
 800d190:	0800d169 	.word	0x0800d169
 800d194:	0800d169 	.word	0x0800d169
 800d198:	0800d1ed 	.word	0x0800d1ed
 800d19c:	0800d169 	.word	0x0800d169
 800d1a0:	0800d169 	.word	0x0800d169
 800d1a4:	0800d169 	.word	0x0800d169
 800d1a8:	0800d169 	.word	0x0800d169
 800d1ac:	0800d2f9 	.word	0x0800d2f9
 800d1b0:	0800d21d 	.word	0x0800d21d
 800d1b4:	0800d2db 	.word	0x0800d2db
 800d1b8:	0800d169 	.word	0x0800d169
 800d1bc:	0800d169 	.word	0x0800d169
 800d1c0:	0800d31b 	.word	0x0800d31b
 800d1c4:	0800d169 	.word	0x0800d169
 800d1c8:	0800d21d 	.word	0x0800d21d
 800d1cc:	0800d169 	.word	0x0800d169
 800d1d0:	0800d169 	.word	0x0800d169
 800d1d4:	0800d2e3 	.word	0x0800d2e3
 800d1d8:	680b      	ldr	r3, [r1, #0]
 800d1da:	1d1a      	adds	r2, r3, #4
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	600a      	str	r2, [r1, #0]
 800d1e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d1e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	e0a3      	b.n	800d334 <_printf_i+0x1f4>
 800d1ec:	6825      	ldr	r5, [r4, #0]
 800d1ee:	6808      	ldr	r0, [r1, #0]
 800d1f0:	062e      	lsls	r6, r5, #24
 800d1f2:	f100 0304 	add.w	r3, r0, #4
 800d1f6:	d50a      	bpl.n	800d20e <_printf_i+0xce>
 800d1f8:	6805      	ldr	r5, [r0, #0]
 800d1fa:	600b      	str	r3, [r1, #0]
 800d1fc:	2d00      	cmp	r5, #0
 800d1fe:	da03      	bge.n	800d208 <_printf_i+0xc8>
 800d200:	232d      	movs	r3, #45	; 0x2d
 800d202:	426d      	negs	r5, r5
 800d204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d208:	485e      	ldr	r0, [pc, #376]	; (800d384 <_printf_i+0x244>)
 800d20a:	230a      	movs	r3, #10
 800d20c:	e019      	b.n	800d242 <_printf_i+0x102>
 800d20e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d212:	6805      	ldr	r5, [r0, #0]
 800d214:	600b      	str	r3, [r1, #0]
 800d216:	bf18      	it	ne
 800d218:	b22d      	sxthne	r5, r5
 800d21a:	e7ef      	b.n	800d1fc <_printf_i+0xbc>
 800d21c:	680b      	ldr	r3, [r1, #0]
 800d21e:	6825      	ldr	r5, [r4, #0]
 800d220:	1d18      	adds	r0, r3, #4
 800d222:	6008      	str	r0, [r1, #0]
 800d224:	0628      	lsls	r0, r5, #24
 800d226:	d501      	bpl.n	800d22c <_printf_i+0xec>
 800d228:	681d      	ldr	r5, [r3, #0]
 800d22a:	e002      	b.n	800d232 <_printf_i+0xf2>
 800d22c:	0669      	lsls	r1, r5, #25
 800d22e:	d5fb      	bpl.n	800d228 <_printf_i+0xe8>
 800d230:	881d      	ldrh	r5, [r3, #0]
 800d232:	4854      	ldr	r0, [pc, #336]	; (800d384 <_printf_i+0x244>)
 800d234:	2f6f      	cmp	r7, #111	; 0x6f
 800d236:	bf0c      	ite	eq
 800d238:	2308      	moveq	r3, #8
 800d23a:	230a      	movne	r3, #10
 800d23c:	2100      	movs	r1, #0
 800d23e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d242:	6866      	ldr	r6, [r4, #4]
 800d244:	60a6      	str	r6, [r4, #8]
 800d246:	2e00      	cmp	r6, #0
 800d248:	bfa2      	ittt	ge
 800d24a:	6821      	ldrge	r1, [r4, #0]
 800d24c:	f021 0104 	bicge.w	r1, r1, #4
 800d250:	6021      	strge	r1, [r4, #0]
 800d252:	b90d      	cbnz	r5, 800d258 <_printf_i+0x118>
 800d254:	2e00      	cmp	r6, #0
 800d256:	d04d      	beq.n	800d2f4 <_printf_i+0x1b4>
 800d258:	4616      	mov	r6, r2
 800d25a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d25e:	fb03 5711 	mls	r7, r3, r1, r5
 800d262:	5dc7      	ldrb	r7, [r0, r7]
 800d264:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d268:	462f      	mov	r7, r5
 800d26a:	42bb      	cmp	r3, r7
 800d26c:	460d      	mov	r5, r1
 800d26e:	d9f4      	bls.n	800d25a <_printf_i+0x11a>
 800d270:	2b08      	cmp	r3, #8
 800d272:	d10b      	bne.n	800d28c <_printf_i+0x14c>
 800d274:	6823      	ldr	r3, [r4, #0]
 800d276:	07df      	lsls	r7, r3, #31
 800d278:	d508      	bpl.n	800d28c <_printf_i+0x14c>
 800d27a:	6923      	ldr	r3, [r4, #16]
 800d27c:	6861      	ldr	r1, [r4, #4]
 800d27e:	4299      	cmp	r1, r3
 800d280:	bfde      	ittt	le
 800d282:	2330      	movle	r3, #48	; 0x30
 800d284:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d288:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d28c:	1b92      	subs	r2, r2, r6
 800d28e:	6122      	str	r2, [r4, #16]
 800d290:	f8cd a000 	str.w	sl, [sp]
 800d294:	464b      	mov	r3, r9
 800d296:	aa03      	add	r2, sp, #12
 800d298:	4621      	mov	r1, r4
 800d29a:	4640      	mov	r0, r8
 800d29c:	f7ff fee2 	bl	800d064 <_printf_common>
 800d2a0:	3001      	adds	r0, #1
 800d2a2:	d14c      	bne.n	800d33e <_printf_i+0x1fe>
 800d2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2a8:	b004      	add	sp, #16
 800d2aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2ae:	4835      	ldr	r0, [pc, #212]	; (800d384 <_printf_i+0x244>)
 800d2b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d2b4:	6823      	ldr	r3, [r4, #0]
 800d2b6:	680e      	ldr	r6, [r1, #0]
 800d2b8:	061f      	lsls	r7, r3, #24
 800d2ba:	f856 5b04 	ldr.w	r5, [r6], #4
 800d2be:	600e      	str	r6, [r1, #0]
 800d2c0:	d514      	bpl.n	800d2ec <_printf_i+0x1ac>
 800d2c2:	07d9      	lsls	r1, r3, #31
 800d2c4:	bf44      	itt	mi
 800d2c6:	f043 0320 	orrmi.w	r3, r3, #32
 800d2ca:	6023      	strmi	r3, [r4, #0]
 800d2cc:	b91d      	cbnz	r5, 800d2d6 <_printf_i+0x196>
 800d2ce:	6823      	ldr	r3, [r4, #0]
 800d2d0:	f023 0320 	bic.w	r3, r3, #32
 800d2d4:	6023      	str	r3, [r4, #0]
 800d2d6:	2310      	movs	r3, #16
 800d2d8:	e7b0      	b.n	800d23c <_printf_i+0xfc>
 800d2da:	6823      	ldr	r3, [r4, #0]
 800d2dc:	f043 0320 	orr.w	r3, r3, #32
 800d2e0:	6023      	str	r3, [r4, #0]
 800d2e2:	2378      	movs	r3, #120	; 0x78
 800d2e4:	4828      	ldr	r0, [pc, #160]	; (800d388 <_printf_i+0x248>)
 800d2e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d2ea:	e7e3      	b.n	800d2b4 <_printf_i+0x174>
 800d2ec:	065e      	lsls	r6, r3, #25
 800d2ee:	bf48      	it	mi
 800d2f0:	b2ad      	uxthmi	r5, r5
 800d2f2:	e7e6      	b.n	800d2c2 <_printf_i+0x182>
 800d2f4:	4616      	mov	r6, r2
 800d2f6:	e7bb      	b.n	800d270 <_printf_i+0x130>
 800d2f8:	680b      	ldr	r3, [r1, #0]
 800d2fa:	6826      	ldr	r6, [r4, #0]
 800d2fc:	6960      	ldr	r0, [r4, #20]
 800d2fe:	1d1d      	adds	r5, r3, #4
 800d300:	600d      	str	r5, [r1, #0]
 800d302:	0635      	lsls	r5, r6, #24
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	d501      	bpl.n	800d30c <_printf_i+0x1cc>
 800d308:	6018      	str	r0, [r3, #0]
 800d30a:	e002      	b.n	800d312 <_printf_i+0x1d2>
 800d30c:	0671      	lsls	r1, r6, #25
 800d30e:	d5fb      	bpl.n	800d308 <_printf_i+0x1c8>
 800d310:	8018      	strh	r0, [r3, #0]
 800d312:	2300      	movs	r3, #0
 800d314:	6123      	str	r3, [r4, #16]
 800d316:	4616      	mov	r6, r2
 800d318:	e7ba      	b.n	800d290 <_printf_i+0x150>
 800d31a:	680b      	ldr	r3, [r1, #0]
 800d31c:	1d1a      	adds	r2, r3, #4
 800d31e:	600a      	str	r2, [r1, #0]
 800d320:	681e      	ldr	r6, [r3, #0]
 800d322:	6862      	ldr	r2, [r4, #4]
 800d324:	2100      	movs	r1, #0
 800d326:	4630      	mov	r0, r6
 800d328:	f7f2 ffe2 	bl	80002f0 <memchr>
 800d32c:	b108      	cbz	r0, 800d332 <_printf_i+0x1f2>
 800d32e:	1b80      	subs	r0, r0, r6
 800d330:	6060      	str	r0, [r4, #4]
 800d332:	6863      	ldr	r3, [r4, #4]
 800d334:	6123      	str	r3, [r4, #16]
 800d336:	2300      	movs	r3, #0
 800d338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d33c:	e7a8      	b.n	800d290 <_printf_i+0x150>
 800d33e:	6923      	ldr	r3, [r4, #16]
 800d340:	4632      	mov	r2, r6
 800d342:	4649      	mov	r1, r9
 800d344:	4640      	mov	r0, r8
 800d346:	47d0      	blx	sl
 800d348:	3001      	adds	r0, #1
 800d34a:	d0ab      	beq.n	800d2a4 <_printf_i+0x164>
 800d34c:	6823      	ldr	r3, [r4, #0]
 800d34e:	079b      	lsls	r3, r3, #30
 800d350:	d413      	bmi.n	800d37a <_printf_i+0x23a>
 800d352:	68e0      	ldr	r0, [r4, #12]
 800d354:	9b03      	ldr	r3, [sp, #12]
 800d356:	4298      	cmp	r0, r3
 800d358:	bfb8      	it	lt
 800d35a:	4618      	movlt	r0, r3
 800d35c:	e7a4      	b.n	800d2a8 <_printf_i+0x168>
 800d35e:	2301      	movs	r3, #1
 800d360:	4632      	mov	r2, r6
 800d362:	4649      	mov	r1, r9
 800d364:	4640      	mov	r0, r8
 800d366:	47d0      	blx	sl
 800d368:	3001      	adds	r0, #1
 800d36a:	d09b      	beq.n	800d2a4 <_printf_i+0x164>
 800d36c:	3501      	adds	r5, #1
 800d36e:	68e3      	ldr	r3, [r4, #12]
 800d370:	9903      	ldr	r1, [sp, #12]
 800d372:	1a5b      	subs	r3, r3, r1
 800d374:	42ab      	cmp	r3, r5
 800d376:	dcf2      	bgt.n	800d35e <_printf_i+0x21e>
 800d378:	e7eb      	b.n	800d352 <_printf_i+0x212>
 800d37a:	2500      	movs	r5, #0
 800d37c:	f104 0619 	add.w	r6, r4, #25
 800d380:	e7f5      	b.n	800d36e <_printf_i+0x22e>
 800d382:	bf00      	nop
 800d384:	0801153e 	.word	0x0801153e
 800d388:	0801154f 	.word	0x0801154f

0800d38c <_scanf_float>:
 800d38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d390:	b087      	sub	sp, #28
 800d392:	4617      	mov	r7, r2
 800d394:	9303      	str	r3, [sp, #12]
 800d396:	688b      	ldr	r3, [r1, #8]
 800d398:	1e5a      	subs	r2, r3, #1
 800d39a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d39e:	bf83      	ittte	hi
 800d3a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d3a4:	195b      	addhi	r3, r3, r5
 800d3a6:	9302      	strhi	r3, [sp, #8]
 800d3a8:	2300      	movls	r3, #0
 800d3aa:	bf86      	itte	hi
 800d3ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d3b0:	608b      	strhi	r3, [r1, #8]
 800d3b2:	9302      	strls	r3, [sp, #8]
 800d3b4:	680b      	ldr	r3, [r1, #0]
 800d3b6:	468b      	mov	fp, r1
 800d3b8:	2500      	movs	r5, #0
 800d3ba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d3be:	f84b 3b1c 	str.w	r3, [fp], #28
 800d3c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d3c6:	4680      	mov	r8, r0
 800d3c8:	460c      	mov	r4, r1
 800d3ca:	465e      	mov	r6, fp
 800d3cc:	46aa      	mov	sl, r5
 800d3ce:	46a9      	mov	r9, r5
 800d3d0:	9501      	str	r5, [sp, #4]
 800d3d2:	68a2      	ldr	r2, [r4, #8]
 800d3d4:	b152      	cbz	r2, 800d3ec <_scanf_float+0x60>
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	781b      	ldrb	r3, [r3, #0]
 800d3da:	2b4e      	cmp	r3, #78	; 0x4e
 800d3dc:	d864      	bhi.n	800d4a8 <_scanf_float+0x11c>
 800d3de:	2b40      	cmp	r3, #64	; 0x40
 800d3e0:	d83c      	bhi.n	800d45c <_scanf_float+0xd0>
 800d3e2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d3e6:	b2c8      	uxtb	r0, r1
 800d3e8:	280e      	cmp	r0, #14
 800d3ea:	d93a      	bls.n	800d462 <_scanf_float+0xd6>
 800d3ec:	f1b9 0f00 	cmp.w	r9, #0
 800d3f0:	d003      	beq.n	800d3fa <_scanf_float+0x6e>
 800d3f2:	6823      	ldr	r3, [r4, #0]
 800d3f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d3f8:	6023      	str	r3, [r4, #0]
 800d3fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d3fe:	f1ba 0f01 	cmp.w	sl, #1
 800d402:	f200 8113 	bhi.w	800d62c <_scanf_float+0x2a0>
 800d406:	455e      	cmp	r6, fp
 800d408:	f200 8105 	bhi.w	800d616 <_scanf_float+0x28a>
 800d40c:	2501      	movs	r5, #1
 800d40e:	4628      	mov	r0, r5
 800d410:	b007      	add	sp, #28
 800d412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d416:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d41a:	2a0d      	cmp	r2, #13
 800d41c:	d8e6      	bhi.n	800d3ec <_scanf_float+0x60>
 800d41e:	a101      	add	r1, pc, #4	; (adr r1, 800d424 <_scanf_float+0x98>)
 800d420:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d424:	0800d563 	.word	0x0800d563
 800d428:	0800d3ed 	.word	0x0800d3ed
 800d42c:	0800d3ed 	.word	0x0800d3ed
 800d430:	0800d3ed 	.word	0x0800d3ed
 800d434:	0800d5c3 	.word	0x0800d5c3
 800d438:	0800d59b 	.word	0x0800d59b
 800d43c:	0800d3ed 	.word	0x0800d3ed
 800d440:	0800d3ed 	.word	0x0800d3ed
 800d444:	0800d571 	.word	0x0800d571
 800d448:	0800d3ed 	.word	0x0800d3ed
 800d44c:	0800d3ed 	.word	0x0800d3ed
 800d450:	0800d3ed 	.word	0x0800d3ed
 800d454:	0800d3ed 	.word	0x0800d3ed
 800d458:	0800d529 	.word	0x0800d529
 800d45c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d460:	e7db      	b.n	800d41a <_scanf_float+0x8e>
 800d462:	290e      	cmp	r1, #14
 800d464:	d8c2      	bhi.n	800d3ec <_scanf_float+0x60>
 800d466:	a001      	add	r0, pc, #4	; (adr r0, 800d46c <_scanf_float+0xe0>)
 800d468:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d46c:	0800d51b 	.word	0x0800d51b
 800d470:	0800d3ed 	.word	0x0800d3ed
 800d474:	0800d51b 	.word	0x0800d51b
 800d478:	0800d5af 	.word	0x0800d5af
 800d47c:	0800d3ed 	.word	0x0800d3ed
 800d480:	0800d4c9 	.word	0x0800d4c9
 800d484:	0800d505 	.word	0x0800d505
 800d488:	0800d505 	.word	0x0800d505
 800d48c:	0800d505 	.word	0x0800d505
 800d490:	0800d505 	.word	0x0800d505
 800d494:	0800d505 	.word	0x0800d505
 800d498:	0800d505 	.word	0x0800d505
 800d49c:	0800d505 	.word	0x0800d505
 800d4a0:	0800d505 	.word	0x0800d505
 800d4a4:	0800d505 	.word	0x0800d505
 800d4a8:	2b6e      	cmp	r3, #110	; 0x6e
 800d4aa:	d809      	bhi.n	800d4c0 <_scanf_float+0x134>
 800d4ac:	2b60      	cmp	r3, #96	; 0x60
 800d4ae:	d8b2      	bhi.n	800d416 <_scanf_float+0x8a>
 800d4b0:	2b54      	cmp	r3, #84	; 0x54
 800d4b2:	d077      	beq.n	800d5a4 <_scanf_float+0x218>
 800d4b4:	2b59      	cmp	r3, #89	; 0x59
 800d4b6:	d199      	bne.n	800d3ec <_scanf_float+0x60>
 800d4b8:	2d07      	cmp	r5, #7
 800d4ba:	d197      	bne.n	800d3ec <_scanf_float+0x60>
 800d4bc:	2508      	movs	r5, #8
 800d4be:	e029      	b.n	800d514 <_scanf_float+0x188>
 800d4c0:	2b74      	cmp	r3, #116	; 0x74
 800d4c2:	d06f      	beq.n	800d5a4 <_scanf_float+0x218>
 800d4c4:	2b79      	cmp	r3, #121	; 0x79
 800d4c6:	e7f6      	b.n	800d4b6 <_scanf_float+0x12a>
 800d4c8:	6821      	ldr	r1, [r4, #0]
 800d4ca:	05c8      	lsls	r0, r1, #23
 800d4cc:	d51a      	bpl.n	800d504 <_scanf_float+0x178>
 800d4ce:	9b02      	ldr	r3, [sp, #8]
 800d4d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d4d4:	6021      	str	r1, [r4, #0]
 800d4d6:	f109 0901 	add.w	r9, r9, #1
 800d4da:	b11b      	cbz	r3, 800d4e4 <_scanf_float+0x158>
 800d4dc:	3b01      	subs	r3, #1
 800d4de:	3201      	adds	r2, #1
 800d4e0:	9302      	str	r3, [sp, #8]
 800d4e2:	60a2      	str	r2, [r4, #8]
 800d4e4:	68a3      	ldr	r3, [r4, #8]
 800d4e6:	3b01      	subs	r3, #1
 800d4e8:	60a3      	str	r3, [r4, #8]
 800d4ea:	6923      	ldr	r3, [r4, #16]
 800d4ec:	3301      	adds	r3, #1
 800d4ee:	6123      	str	r3, [r4, #16]
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	3b01      	subs	r3, #1
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	607b      	str	r3, [r7, #4]
 800d4f8:	f340 8084 	ble.w	800d604 <_scanf_float+0x278>
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	3301      	adds	r3, #1
 800d500:	603b      	str	r3, [r7, #0]
 800d502:	e766      	b.n	800d3d2 <_scanf_float+0x46>
 800d504:	eb1a 0f05 	cmn.w	sl, r5
 800d508:	f47f af70 	bne.w	800d3ec <_scanf_float+0x60>
 800d50c:	6822      	ldr	r2, [r4, #0]
 800d50e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d512:	6022      	str	r2, [r4, #0]
 800d514:	f806 3b01 	strb.w	r3, [r6], #1
 800d518:	e7e4      	b.n	800d4e4 <_scanf_float+0x158>
 800d51a:	6822      	ldr	r2, [r4, #0]
 800d51c:	0610      	lsls	r0, r2, #24
 800d51e:	f57f af65 	bpl.w	800d3ec <_scanf_float+0x60>
 800d522:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d526:	e7f4      	b.n	800d512 <_scanf_float+0x186>
 800d528:	f1ba 0f00 	cmp.w	sl, #0
 800d52c:	d10e      	bne.n	800d54c <_scanf_float+0x1c0>
 800d52e:	f1b9 0f00 	cmp.w	r9, #0
 800d532:	d10e      	bne.n	800d552 <_scanf_float+0x1c6>
 800d534:	6822      	ldr	r2, [r4, #0]
 800d536:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d53a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d53e:	d108      	bne.n	800d552 <_scanf_float+0x1c6>
 800d540:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d544:	6022      	str	r2, [r4, #0]
 800d546:	f04f 0a01 	mov.w	sl, #1
 800d54a:	e7e3      	b.n	800d514 <_scanf_float+0x188>
 800d54c:	f1ba 0f02 	cmp.w	sl, #2
 800d550:	d055      	beq.n	800d5fe <_scanf_float+0x272>
 800d552:	2d01      	cmp	r5, #1
 800d554:	d002      	beq.n	800d55c <_scanf_float+0x1d0>
 800d556:	2d04      	cmp	r5, #4
 800d558:	f47f af48 	bne.w	800d3ec <_scanf_float+0x60>
 800d55c:	3501      	adds	r5, #1
 800d55e:	b2ed      	uxtb	r5, r5
 800d560:	e7d8      	b.n	800d514 <_scanf_float+0x188>
 800d562:	f1ba 0f01 	cmp.w	sl, #1
 800d566:	f47f af41 	bne.w	800d3ec <_scanf_float+0x60>
 800d56a:	f04f 0a02 	mov.w	sl, #2
 800d56e:	e7d1      	b.n	800d514 <_scanf_float+0x188>
 800d570:	b97d      	cbnz	r5, 800d592 <_scanf_float+0x206>
 800d572:	f1b9 0f00 	cmp.w	r9, #0
 800d576:	f47f af3c 	bne.w	800d3f2 <_scanf_float+0x66>
 800d57a:	6822      	ldr	r2, [r4, #0]
 800d57c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d580:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d584:	f47f af39 	bne.w	800d3fa <_scanf_float+0x6e>
 800d588:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d58c:	6022      	str	r2, [r4, #0]
 800d58e:	2501      	movs	r5, #1
 800d590:	e7c0      	b.n	800d514 <_scanf_float+0x188>
 800d592:	2d03      	cmp	r5, #3
 800d594:	d0e2      	beq.n	800d55c <_scanf_float+0x1d0>
 800d596:	2d05      	cmp	r5, #5
 800d598:	e7de      	b.n	800d558 <_scanf_float+0x1cc>
 800d59a:	2d02      	cmp	r5, #2
 800d59c:	f47f af26 	bne.w	800d3ec <_scanf_float+0x60>
 800d5a0:	2503      	movs	r5, #3
 800d5a2:	e7b7      	b.n	800d514 <_scanf_float+0x188>
 800d5a4:	2d06      	cmp	r5, #6
 800d5a6:	f47f af21 	bne.w	800d3ec <_scanf_float+0x60>
 800d5aa:	2507      	movs	r5, #7
 800d5ac:	e7b2      	b.n	800d514 <_scanf_float+0x188>
 800d5ae:	6822      	ldr	r2, [r4, #0]
 800d5b0:	0591      	lsls	r1, r2, #22
 800d5b2:	f57f af1b 	bpl.w	800d3ec <_scanf_float+0x60>
 800d5b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d5ba:	6022      	str	r2, [r4, #0]
 800d5bc:	f8cd 9004 	str.w	r9, [sp, #4]
 800d5c0:	e7a8      	b.n	800d514 <_scanf_float+0x188>
 800d5c2:	6822      	ldr	r2, [r4, #0]
 800d5c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d5c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d5cc:	d006      	beq.n	800d5dc <_scanf_float+0x250>
 800d5ce:	0550      	lsls	r0, r2, #21
 800d5d0:	f57f af0c 	bpl.w	800d3ec <_scanf_float+0x60>
 800d5d4:	f1b9 0f00 	cmp.w	r9, #0
 800d5d8:	f43f af0f 	beq.w	800d3fa <_scanf_float+0x6e>
 800d5dc:	0591      	lsls	r1, r2, #22
 800d5de:	bf58      	it	pl
 800d5e0:	9901      	ldrpl	r1, [sp, #4]
 800d5e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d5e6:	bf58      	it	pl
 800d5e8:	eba9 0101 	subpl.w	r1, r9, r1
 800d5ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d5f0:	bf58      	it	pl
 800d5f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d5f6:	6022      	str	r2, [r4, #0]
 800d5f8:	f04f 0900 	mov.w	r9, #0
 800d5fc:	e78a      	b.n	800d514 <_scanf_float+0x188>
 800d5fe:	f04f 0a03 	mov.w	sl, #3
 800d602:	e787      	b.n	800d514 <_scanf_float+0x188>
 800d604:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d608:	4639      	mov	r1, r7
 800d60a:	4640      	mov	r0, r8
 800d60c:	4798      	blx	r3
 800d60e:	2800      	cmp	r0, #0
 800d610:	f43f aedf 	beq.w	800d3d2 <_scanf_float+0x46>
 800d614:	e6ea      	b.n	800d3ec <_scanf_float+0x60>
 800d616:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d61a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d61e:	463a      	mov	r2, r7
 800d620:	4640      	mov	r0, r8
 800d622:	4798      	blx	r3
 800d624:	6923      	ldr	r3, [r4, #16]
 800d626:	3b01      	subs	r3, #1
 800d628:	6123      	str	r3, [r4, #16]
 800d62a:	e6ec      	b.n	800d406 <_scanf_float+0x7a>
 800d62c:	1e6b      	subs	r3, r5, #1
 800d62e:	2b06      	cmp	r3, #6
 800d630:	d825      	bhi.n	800d67e <_scanf_float+0x2f2>
 800d632:	2d02      	cmp	r5, #2
 800d634:	d836      	bhi.n	800d6a4 <_scanf_float+0x318>
 800d636:	455e      	cmp	r6, fp
 800d638:	f67f aee8 	bls.w	800d40c <_scanf_float+0x80>
 800d63c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d640:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d644:	463a      	mov	r2, r7
 800d646:	4640      	mov	r0, r8
 800d648:	4798      	blx	r3
 800d64a:	6923      	ldr	r3, [r4, #16]
 800d64c:	3b01      	subs	r3, #1
 800d64e:	6123      	str	r3, [r4, #16]
 800d650:	e7f1      	b.n	800d636 <_scanf_float+0x2aa>
 800d652:	9802      	ldr	r0, [sp, #8]
 800d654:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d658:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d65c:	9002      	str	r0, [sp, #8]
 800d65e:	463a      	mov	r2, r7
 800d660:	4640      	mov	r0, r8
 800d662:	4798      	blx	r3
 800d664:	6923      	ldr	r3, [r4, #16]
 800d666:	3b01      	subs	r3, #1
 800d668:	6123      	str	r3, [r4, #16]
 800d66a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d66e:	fa5f fa8a 	uxtb.w	sl, sl
 800d672:	f1ba 0f02 	cmp.w	sl, #2
 800d676:	d1ec      	bne.n	800d652 <_scanf_float+0x2c6>
 800d678:	3d03      	subs	r5, #3
 800d67a:	b2ed      	uxtb	r5, r5
 800d67c:	1b76      	subs	r6, r6, r5
 800d67e:	6823      	ldr	r3, [r4, #0]
 800d680:	05da      	lsls	r2, r3, #23
 800d682:	d52f      	bpl.n	800d6e4 <_scanf_float+0x358>
 800d684:	055b      	lsls	r3, r3, #21
 800d686:	d510      	bpl.n	800d6aa <_scanf_float+0x31e>
 800d688:	455e      	cmp	r6, fp
 800d68a:	f67f aebf 	bls.w	800d40c <_scanf_float+0x80>
 800d68e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d692:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d696:	463a      	mov	r2, r7
 800d698:	4640      	mov	r0, r8
 800d69a:	4798      	blx	r3
 800d69c:	6923      	ldr	r3, [r4, #16]
 800d69e:	3b01      	subs	r3, #1
 800d6a0:	6123      	str	r3, [r4, #16]
 800d6a2:	e7f1      	b.n	800d688 <_scanf_float+0x2fc>
 800d6a4:	46aa      	mov	sl, r5
 800d6a6:	9602      	str	r6, [sp, #8]
 800d6a8:	e7df      	b.n	800d66a <_scanf_float+0x2de>
 800d6aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d6ae:	6923      	ldr	r3, [r4, #16]
 800d6b0:	2965      	cmp	r1, #101	; 0x65
 800d6b2:	f103 33ff 	add.w	r3, r3, #4294967295
 800d6b6:	f106 35ff 	add.w	r5, r6, #4294967295
 800d6ba:	6123      	str	r3, [r4, #16]
 800d6bc:	d00c      	beq.n	800d6d8 <_scanf_float+0x34c>
 800d6be:	2945      	cmp	r1, #69	; 0x45
 800d6c0:	d00a      	beq.n	800d6d8 <_scanf_float+0x34c>
 800d6c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d6c6:	463a      	mov	r2, r7
 800d6c8:	4640      	mov	r0, r8
 800d6ca:	4798      	blx	r3
 800d6cc:	6923      	ldr	r3, [r4, #16]
 800d6ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d6d2:	3b01      	subs	r3, #1
 800d6d4:	1eb5      	subs	r5, r6, #2
 800d6d6:	6123      	str	r3, [r4, #16]
 800d6d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d6dc:	463a      	mov	r2, r7
 800d6de:	4640      	mov	r0, r8
 800d6e0:	4798      	blx	r3
 800d6e2:	462e      	mov	r6, r5
 800d6e4:	6825      	ldr	r5, [r4, #0]
 800d6e6:	f015 0510 	ands.w	r5, r5, #16
 800d6ea:	d14d      	bne.n	800d788 <_scanf_float+0x3fc>
 800d6ec:	7035      	strb	r5, [r6, #0]
 800d6ee:	6823      	ldr	r3, [r4, #0]
 800d6f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d6f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d6f8:	d11a      	bne.n	800d730 <_scanf_float+0x3a4>
 800d6fa:	9b01      	ldr	r3, [sp, #4]
 800d6fc:	454b      	cmp	r3, r9
 800d6fe:	eba3 0209 	sub.w	r2, r3, r9
 800d702:	d122      	bne.n	800d74a <_scanf_float+0x3be>
 800d704:	2200      	movs	r2, #0
 800d706:	4659      	mov	r1, fp
 800d708:	4640      	mov	r0, r8
 800d70a:	f000 fe5b 	bl	800e3c4 <_strtod_r>
 800d70e:	9b03      	ldr	r3, [sp, #12]
 800d710:	6821      	ldr	r1, [r4, #0]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	f011 0f02 	tst.w	r1, #2
 800d718:	f103 0204 	add.w	r2, r3, #4
 800d71c:	d020      	beq.n	800d760 <_scanf_float+0x3d4>
 800d71e:	9903      	ldr	r1, [sp, #12]
 800d720:	600a      	str	r2, [r1, #0]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	ed83 0b00 	vstr	d0, [r3]
 800d728:	68e3      	ldr	r3, [r4, #12]
 800d72a:	3301      	adds	r3, #1
 800d72c:	60e3      	str	r3, [r4, #12]
 800d72e:	e66e      	b.n	800d40e <_scanf_float+0x82>
 800d730:	9b04      	ldr	r3, [sp, #16]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d0e6      	beq.n	800d704 <_scanf_float+0x378>
 800d736:	9905      	ldr	r1, [sp, #20]
 800d738:	230a      	movs	r3, #10
 800d73a:	462a      	mov	r2, r5
 800d73c:	3101      	adds	r1, #1
 800d73e:	4640      	mov	r0, r8
 800d740:	f000 feca 	bl	800e4d8 <_strtol_r>
 800d744:	9b04      	ldr	r3, [sp, #16]
 800d746:	9e05      	ldr	r6, [sp, #20]
 800d748:	1ac2      	subs	r2, r0, r3
 800d74a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d74e:	429e      	cmp	r6, r3
 800d750:	bf28      	it	cs
 800d752:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d756:	490d      	ldr	r1, [pc, #52]	; (800d78c <_scanf_float+0x400>)
 800d758:	4630      	mov	r0, r6
 800d75a:	f000 f821 	bl	800d7a0 <siprintf>
 800d75e:	e7d1      	b.n	800d704 <_scanf_float+0x378>
 800d760:	f011 0f04 	tst.w	r1, #4
 800d764:	9903      	ldr	r1, [sp, #12]
 800d766:	600a      	str	r2, [r1, #0]
 800d768:	d1db      	bne.n	800d722 <_scanf_float+0x396>
 800d76a:	eeb4 0b40 	vcmp.f64	d0, d0
 800d76e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d772:	681e      	ldr	r6, [r3, #0]
 800d774:	d705      	bvc.n	800d782 <_scanf_float+0x3f6>
 800d776:	4806      	ldr	r0, [pc, #24]	; (800d790 <_scanf_float+0x404>)
 800d778:	f000 f80c 	bl	800d794 <nanf>
 800d77c:	ed86 0a00 	vstr	s0, [r6]
 800d780:	e7d2      	b.n	800d728 <_scanf_float+0x39c>
 800d782:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800d786:	e7f9      	b.n	800d77c <_scanf_float+0x3f0>
 800d788:	2500      	movs	r5, #0
 800d78a:	e640      	b.n	800d40e <_scanf_float+0x82>
 800d78c:	08011560 	.word	0x08011560
 800d790:	08011998 	.word	0x08011998

0800d794 <nanf>:
 800d794:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d79c <nanf+0x8>
 800d798:	4770      	bx	lr
 800d79a:	bf00      	nop
 800d79c:	7fc00000 	.word	0x7fc00000

0800d7a0 <siprintf>:
 800d7a0:	b40e      	push	{r1, r2, r3}
 800d7a2:	b500      	push	{lr}
 800d7a4:	b09c      	sub	sp, #112	; 0x70
 800d7a6:	ab1d      	add	r3, sp, #116	; 0x74
 800d7a8:	9002      	str	r0, [sp, #8]
 800d7aa:	9006      	str	r0, [sp, #24]
 800d7ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d7b0:	4809      	ldr	r0, [pc, #36]	; (800d7d8 <siprintf+0x38>)
 800d7b2:	9107      	str	r1, [sp, #28]
 800d7b4:	9104      	str	r1, [sp, #16]
 800d7b6:	4909      	ldr	r1, [pc, #36]	; (800d7dc <siprintf+0x3c>)
 800d7b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7bc:	9105      	str	r1, [sp, #20]
 800d7be:	6800      	ldr	r0, [r0, #0]
 800d7c0:	9301      	str	r3, [sp, #4]
 800d7c2:	a902      	add	r1, sp, #8
 800d7c4:	f002 fe46 	bl	8010454 <_svfiprintf_r>
 800d7c8:	9b02      	ldr	r3, [sp, #8]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	701a      	strb	r2, [r3, #0]
 800d7ce:	b01c      	add	sp, #112	; 0x70
 800d7d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7d4:	b003      	add	sp, #12
 800d7d6:	4770      	bx	lr
 800d7d8:	24000014 	.word	0x24000014
 800d7dc:	ffff0208 	.word	0xffff0208

0800d7e0 <sulp>:
 800d7e0:	b570      	push	{r4, r5, r6, lr}
 800d7e2:	4604      	mov	r4, r0
 800d7e4:	460d      	mov	r5, r1
 800d7e6:	4616      	mov	r6, r2
 800d7e8:	ec45 4b10 	vmov	d0, r4, r5
 800d7ec:	f002 fbcc 	bl	800ff88 <__ulp>
 800d7f0:	b17e      	cbz	r6, 800d812 <sulp+0x32>
 800d7f2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d7f6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	dd09      	ble.n	800d812 <sulp+0x32>
 800d7fe:	051b      	lsls	r3, r3, #20
 800d800:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800d804:	2000      	movs	r0, #0
 800d806:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800d80a:	ec41 0b17 	vmov	d7, r0, r1
 800d80e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d812:	bd70      	pop	{r4, r5, r6, pc}
 800d814:	0000      	movs	r0, r0
	...

0800d818 <_strtod_l>:
 800d818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d81c:	ed2d 8b0c 	vpush	{d8-d13}
 800d820:	b09d      	sub	sp, #116	; 0x74
 800d822:	461f      	mov	r7, r3
 800d824:	2300      	movs	r3, #0
 800d826:	9318      	str	r3, [sp, #96]	; 0x60
 800d828:	4ba6      	ldr	r3, [pc, #664]	; (800dac4 <_strtod_l+0x2ac>)
 800d82a:	9213      	str	r2, [sp, #76]	; 0x4c
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	9308      	str	r3, [sp, #32]
 800d830:	4604      	mov	r4, r0
 800d832:	4618      	mov	r0, r3
 800d834:	468a      	mov	sl, r1
 800d836:	f7f2 fd53 	bl	80002e0 <strlen>
 800d83a:	f04f 0800 	mov.w	r8, #0
 800d83e:	4605      	mov	r5, r0
 800d840:	f04f 0900 	mov.w	r9, #0
 800d844:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800d848:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d84a:	781a      	ldrb	r2, [r3, #0]
 800d84c:	2a2b      	cmp	r2, #43	; 0x2b
 800d84e:	d04d      	beq.n	800d8ec <_strtod_l+0xd4>
 800d850:	d83a      	bhi.n	800d8c8 <_strtod_l+0xb0>
 800d852:	2a0d      	cmp	r2, #13
 800d854:	d833      	bhi.n	800d8be <_strtod_l+0xa6>
 800d856:	2a08      	cmp	r2, #8
 800d858:	d833      	bhi.n	800d8c2 <_strtod_l+0xaa>
 800d85a:	2a00      	cmp	r2, #0
 800d85c:	d03d      	beq.n	800d8da <_strtod_l+0xc2>
 800d85e:	2300      	movs	r3, #0
 800d860:	930b      	str	r3, [sp, #44]	; 0x2c
 800d862:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d864:	7833      	ldrb	r3, [r6, #0]
 800d866:	2b30      	cmp	r3, #48	; 0x30
 800d868:	f040 80b6 	bne.w	800d9d8 <_strtod_l+0x1c0>
 800d86c:	7873      	ldrb	r3, [r6, #1]
 800d86e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d872:	2b58      	cmp	r3, #88	; 0x58
 800d874:	d16d      	bne.n	800d952 <_strtod_l+0x13a>
 800d876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d878:	9301      	str	r3, [sp, #4]
 800d87a:	ab18      	add	r3, sp, #96	; 0x60
 800d87c:	9702      	str	r7, [sp, #8]
 800d87e:	9300      	str	r3, [sp, #0]
 800d880:	4a91      	ldr	r2, [pc, #580]	; (800dac8 <_strtod_l+0x2b0>)
 800d882:	ab19      	add	r3, sp, #100	; 0x64
 800d884:	a917      	add	r1, sp, #92	; 0x5c
 800d886:	4620      	mov	r0, r4
 800d888:	f001 fcec 	bl	800f264 <__gethex>
 800d88c:	f010 0507 	ands.w	r5, r0, #7
 800d890:	4607      	mov	r7, r0
 800d892:	d005      	beq.n	800d8a0 <_strtod_l+0x88>
 800d894:	2d06      	cmp	r5, #6
 800d896:	d12b      	bne.n	800d8f0 <_strtod_l+0xd8>
 800d898:	3601      	adds	r6, #1
 800d89a:	2300      	movs	r3, #0
 800d89c:	9617      	str	r6, [sp, #92]	; 0x5c
 800d89e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d8a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	f040 856e 	bne.w	800e384 <_strtod_l+0xb6c>
 800d8a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8aa:	b1e3      	cbz	r3, 800d8e6 <_strtod_l+0xce>
 800d8ac:	ec49 8b17 	vmov	d7, r8, r9
 800d8b0:	eeb1 0b47 	vneg.f64	d0, d7
 800d8b4:	b01d      	add	sp, #116	; 0x74
 800d8b6:	ecbd 8b0c 	vpop	{d8-d13}
 800d8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8be:	2a20      	cmp	r2, #32
 800d8c0:	d1cd      	bne.n	800d85e <_strtod_l+0x46>
 800d8c2:	3301      	adds	r3, #1
 800d8c4:	9317      	str	r3, [sp, #92]	; 0x5c
 800d8c6:	e7bf      	b.n	800d848 <_strtod_l+0x30>
 800d8c8:	2a2d      	cmp	r2, #45	; 0x2d
 800d8ca:	d1c8      	bne.n	800d85e <_strtod_l+0x46>
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	920b      	str	r2, [sp, #44]	; 0x2c
 800d8d0:	1c5a      	adds	r2, r3, #1
 800d8d2:	9217      	str	r2, [sp, #92]	; 0x5c
 800d8d4:	785b      	ldrb	r3, [r3, #1]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d1c3      	bne.n	800d862 <_strtod_l+0x4a>
 800d8da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d8dc:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	f040 854d 	bne.w	800e380 <_strtod_l+0xb68>
 800d8e6:	ec49 8b10 	vmov	d0, r8, r9
 800d8ea:	e7e3      	b.n	800d8b4 <_strtod_l+0x9c>
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	e7ee      	b.n	800d8ce <_strtod_l+0xb6>
 800d8f0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d8f2:	b13a      	cbz	r2, 800d904 <_strtod_l+0xec>
 800d8f4:	2135      	movs	r1, #53	; 0x35
 800d8f6:	a81a      	add	r0, sp, #104	; 0x68
 800d8f8:	f002 fc52 	bl	80101a0 <__copybits>
 800d8fc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d8fe:	4620      	mov	r0, r4
 800d900:	f002 f816 	bl	800f930 <_Bfree>
 800d904:	3d01      	subs	r5, #1
 800d906:	2d05      	cmp	r5, #5
 800d908:	d807      	bhi.n	800d91a <_strtod_l+0x102>
 800d90a:	e8df f005 	tbb	[pc, r5]
 800d90e:	0b0e      	.short	0x0b0e
 800d910:	030e1d18 	.word	0x030e1d18
 800d914:	f04f 0900 	mov.w	r9, #0
 800d918:	46c8      	mov	r8, r9
 800d91a:	073b      	lsls	r3, r7, #28
 800d91c:	d5c0      	bpl.n	800d8a0 <_strtod_l+0x88>
 800d91e:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800d922:	e7bd      	b.n	800d8a0 <_strtod_l+0x88>
 800d924:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 800d928:	e7f7      	b.n	800d91a <_strtod_l+0x102>
 800d92a:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 800d92e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d930:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d934:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d938:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800d93c:	e7ed      	b.n	800d91a <_strtod_l+0x102>
 800d93e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 800dacc <_strtod_l+0x2b4>
 800d942:	f04f 0800 	mov.w	r8, #0
 800d946:	e7e8      	b.n	800d91a <_strtod_l+0x102>
 800d948:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800d94c:	f04f 38ff 	mov.w	r8, #4294967295
 800d950:	e7e3      	b.n	800d91a <_strtod_l+0x102>
 800d952:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d954:	1c5a      	adds	r2, r3, #1
 800d956:	9217      	str	r2, [sp, #92]	; 0x5c
 800d958:	785b      	ldrb	r3, [r3, #1]
 800d95a:	2b30      	cmp	r3, #48	; 0x30
 800d95c:	d0f9      	beq.n	800d952 <_strtod_l+0x13a>
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d09e      	beq.n	800d8a0 <_strtod_l+0x88>
 800d962:	2301      	movs	r3, #1
 800d964:	9306      	str	r3, [sp, #24]
 800d966:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d968:	930c      	str	r3, [sp, #48]	; 0x30
 800d96a:	2300      	movs	r3, #0
 800d96c:	9304      	str	r3, [sp, #16]
 800d96e:	930a      	str	r3, [sp, #40]	; 0x28
 800d970:	461e      	mov	r6, r3
 800d972:	220a      	movs	r2, #10
 800d974:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d976:	f890 b000 	ldrb.w	fp, [r0]
 800d97a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 800d97e:	b2d9      	uxtb	r1, r3
 800d980:	2909      	cmp	r1, #9
 800d982:	d92b      	bls.n	800d9dc <_strtod_l+0x1c4>
 800d984:	9908      	ldr	r1, [sp, #32]
 800d986:	462a      	mov	r2, r5
 800d988:	f002 fe7e 	bl	8010688 <strncmp>
 800d98c:	2800      	cmp	r0, #0
 800d98e:	d035      	beq.n	800d9fc <_strtod_l+0x1e4>
 800d990:	2000      	movs	r0, #0
 800d992:	465a      	mov	r2, fp
 800d994:	4633      	mov	r3, r6
 800d996:	4683      	mov	fp, r0
 800d998:	4601      	mov	r1, r0
 800d99a:	2a65      	cmp	r2, #101	; 0x65
 800d99c:	d001      	beq.n	800d9a2 <_strtod_l+0x18a>
 800d99e:	2a45      	cmp	r2, #69	; 0x45
 800d9a0:	d118      	bne.n	800d9d4 <_strtod_l+0x1bc>
 800d9a2:	b91b      	cbnz	r3, 800d9ac <_strtod_l+0x194>
 800d9a4:	9b06      	ldr	r3, [sp, #24]
 800d9a6:	4303      	orrs	r3, r0
 800d9a8:	d097      	beq.n	800d8da <_strtod_l+0xc2>
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 800d9b0:	f10a 0201 	add.w	r2, sl, #1
 800d9b4:	9217      	str	r2, [sp, #92]	; 0x5c
 800d9b6:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800d9ba:	2a2b      	cmp	r2, #43	; 0x2b
 800d9bc:	d077      	beq.n	800daae <_strtod_l+0x296>
 800d9be:	2a2d      	cmp	r2, #45	; 0x2d
 800d9c0:	d07d      	beq.n	800dabe <_strtod_l+0x2a6>
 800d9c2:	f04f 0e00 	mov.w	lr, #0
 800d9c6:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800d9ca:	2d09      	cmp	r5, #9
 800d9cc:	f240 8084 	bls.w	800dad8 <_strtod_l+0x2c0>
 800d9d0:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800d9d4:	2500      	movs	r5, #0
 800d9d6:	e09f      	b.n	800db18 <_strtod_l+0x300>
 800d9d8:	2300      	movs	r3, #0
 800d9da:	e7c3      	b.n	800d964 <_strtod_l+0x14c>
 800d9dc:	2e08      	cmp	r6, #8
 800d9de:	bfd5      	itete	le
 800d9e0:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800d9e2:	9904      	ldrgt	r1, [sp, #16]
 800d9e4:	fb02 3301 	mlale	r3, r2, r1, r3
 800d9e8:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d9ec:	f100 0001 	add.w	r0, r0, #1
 800d9f0:	bfd4      	ite	le
 800d9f2:	930a      	strle	r3, [sp, #40]	; 0x28
 800d9f4:	9304      	strgt	r3, [sp, #16]
 800d9f6:	3601      	adds	r6, #1
 800d9f8:	9017      	str	r0, [sp, #92]	; 0x5c
 800d9fa:	e7bb      	b.n	800d974 <_strtod_l+0x15c>
 800d9fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d9fe:	195a      	adds	r2, r3, r5
 800da00:	9217      	str	r2, [sp, #92]	; 0x5c
 800da02:	5d5a      	ldrb	r2, [r3, r5]
 800da04:	b3ae      	cbz	r6, 800da72 <_strtod_l+0x25a>
 800da06:	4683      	mov	fp, r0
 800da08:	4633      	mov	r3, r6
 800da0a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800da0e:	2909      	cmp	r1, #9
 800da10:	d912      	bls.n	800da38 <_strtod_l+0x220>
 800da12:	2101      	movs	r1, #1
 800da14:	e7c1      	b.n	800d99a <_strtod_l+0x182>
 800da16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800da18:	1c5a      	adds	r2, r3, #1
 800da1a:	9217      	str	r2, [sp, #92]	; 0x5c
 800da1c:	785a      	ldrb	r2, [r3, #1]
 800da1e:	3001      	adds	r0, #1
 800da20:	2a30      	cmp	r2, #48	; 0x30
 800da22:	d0f8      	beq.n	800da16 <_strtod_l+0x1fe>
 800da24:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800da28:	2b08      	cmp	r3, #8
 800da2a:	f200 84b0 	bhi.w	800e38e <_strtod_l+0xb76>
 800da2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800da30:	930c      	str	r3, [sp, #48]	; 0x30
 800da32:	4683      	mov	fp, r0
 800da34:	2000      	movs	r0, #0
 800da36:	4603      	mov	r3, r0
 800da38:	3a30      	subs	r2, #48	; 0x30
 800da3a:	f100 0101 	add.w	r1, r0, #1
 800da3e:	d012      	beq.n	800da66 <_strtod_l+0x24e>
 800da40:	448b      	add	fp, r1
 800da42:	eb00 0c03 	add.w	ip, r0, r3
 800da46:	4619      	mov	r1, r3
 800da48:	250a      	movs	r5, #10
 800da4a:	4561      	cmp	r1, ip
 800da4c:	d113      	bne.n	800da76 <_strtod_l+0x25e>
 800da4e:	1819      	adds	r1, r3, r0
 800da50:	2908      	cmp	r1, #8
 800da52:	f103 0301 	add.w	r3, r3, #1
 800da56:	4403      	add	r3, r0
 800da58:	dc1d      	bgt.n	800da96 <_strtod_l+0x27e>
 800da5a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800da5c:	210a      	movs	r1, #10
 800da5e:	fb01 2200 	mla	r2, r1, r0, r2
 800da62:	920a      	str	r2, [sp, #40]	; 0x28
 800da64:	2100      	movs	r1, #0
 800da66:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800da68:	1c50      	adds	r0, r2, #1
 800da6a:	9017      	str	r0, [sp, #92]	; 0x5c
 800da6c:	7852      	ldrb	r2, [r2, #1]
 800da6e:	4608      	mov	r0, r1
 800da70:	e7cb      	b.n	800da0a <_strtod_l+0x1f2>
 800da72:	4630      	mov	r0, r6
 800da74:	e7d4      	b.n	800da20 <_strtod_l+0x208>
 800da76:	2908      	cmp	r1, #8
 800da78:	dc04      	bgt.n	800da84 <_strtod_l+0x26c>
 800da7a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800da7c:	436f      	muls	r7, r5
 800da7e:	970a      	str	r7, [sp, #40]	; 0x28
 800da80:	3101      	adds	r1, #1
 800da82:	e7e2      	b.n	800da4a <_strtod_l+0x232>
 800da84:	f101 0e01 	add.w	lr, r1, #1
 800da88:	f1be 0f10 	cmp.w	lr, #16
 800da8c:	bfde      	ittt	le
 800da8e:	9f04      	ldrle	r7, [sp, #16]
 800da90:	436f      	mulle	r7, r5
 800da92:	9704      	strle	r7, [sp, #16]
 800da94:	e7f4      	b.n	800da80 <_strtod_l+0x268>
 800da96:	2b10      	cmp	r3, #16
 800da98:	bfdf      	itttt	le
 800da9a:	9804      	ldrle	r0, [sp, #16]
 800da9c:	210a      	movle	r1, #10
 800da9e:	fb01 2200 	mlale	r2, r1, r0, r2
 800daa2:	9204      	strle	r2, [sp, #16]
 800daa4:	e7de      	b.n	800da64 <_strtod_l+0x24c>
 800daa6:	f04f 0b00 	mov.w	fp, #0
 800daaa:	2101      	movs	r1, #1
 800daac:	e77a      	b.n	800d9a4 <_strtod_l+0x18c>
 800daae:	f04f 0e00 	mov.w	lr, #0
 800dab2:	f10a 0202 	add.w	r2, sl, #2
 800dab6:	9217      	str	r2, [sp, #92]	; 0x5c
 800dab8:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800dabc:	e783      	b.n	800d9c6 <_strtod_l+0x1ae>
 800dabe:	f04f 0e01 	mov.w	lr, #1
 800dac2:	e7f6      	b.n	800dab2 <_strtod_l+0x29a>
 800dac4:	080117dc 	.word	0x080117dc
 800dac8:	08011568 	.word	0x08011568
 800dacc:	7ff00000 	.word	0x7ff00000
 800dad0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dad2:	1c55      	adds	r5, r2, #1
 800dad4:	9517      	str	r5, [sp, #92]	; 0x5c
 800dad6:	7852      	ldrb	r2, [r2, #1]
 800dad8:	2a30      	cmp	r2, #48	; 0x30
 800dada:	d0f9      	beq.n	800dad0 <_strtod_l+0x2b8>
 800dadc:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800dae0:	2d08      	cmp	r5, #8
 800dae2:	f63f af77 	bhi.w	800d9d4 <_strtod_l+0x1bc>
 800dae6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800daea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800daec:	9208      	str	r2, [sp, #32]
 800daee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800daf0:	1c55      	adds	r5, r2, #1
 800daf2:	9517      	str	r5, [sp, #92]	; 0x5c
 800daf4:	7852      	ldrb	r2, [r2, #1]
 800daf6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800dafa:	2f09      	cmp	r7, #9
 800dafc:	d937      	bls.n	800db6e <_strtod_l+0x356>
 800dafe:	9f08      	ldr	r7, [sp, #32]
 800db00:	1bed      	subs	r5, r5, r7
 800db02:	2d08      	cmp	r5, #8
 800db04:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800db08:	dc02      	bgt.n	800db10 <_strtod_l+0x2f8>
 800db0a:	4565      	cmp	r5, ip
 800db0c:	bfa8      	it	ge
 800db0e:	4665      	movge	r5, ip
 800db10:	f1be 0f00 	cmp.w	lr, #0
 800db14:	d000      	beq.n	800db18 <_strtod_l+0x300>
 800db16:	426d      	negs	r5, r5
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d14f      	bne.n	800dbbc <_strtod_l+0x3a4>
 800db1c:	9b06      	ldr	r3, [sp, #24]
 800db1e:	4303      	orrs	r3, r0
 800db20:	f47f aebe 	bne.w	800d8a0 <_strtod_l+0x88>
 800db24:	2900      	cmp	r1, #0
 800db26:	f47f aed8 	bne.w	800d8da <_strtod_l+0xc2>
 800db2a:	2a69      	cmp	r2, #105	; 0x69
 800db2c:	d027      	beq.n	800db7e <_strtod_l+0x366>
 800db2e:	dc24      	bgt.n	800db7a <_strtod_l+0x362>
 800db30:	2a49      	cmp	r2, #73	; 0x49
 800db32:	d024      	beq.n	800db7e <_strtod_l+0x366>
 800db34:	2a4e      	cmp	r2, #78	; 0x4e
 800db36:	f47f aed0 	bne.w	800d8da <_strtod_l+0xc2>
 800db3a:	499b      	ldr	r1, [pc, #620]	; (800dda8 <_strtod_l+0x590>)
 800db3c:	a817      	add	r0, sp, #92	; 0x5c
 800db3e:	f001 fde9 	bl	800f714 <__match>
 800db42:	2800      	cmp	r0, #0
 800db44:	f43f aec9 	beq.w	800d8da <_strtod_l+0xc2>
 800db48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800db4a:	781b      	ldrb	r3, [r3, #0]
 800db4c:	2b28      	cmp	r3, #40	; 0x28
 800db4e:	d12d      	bne.n	800dbac <_strtod_l+0x394>
 800db50:	4996      	ldr	r1, [pc, #600]	; (800ddac <_strtod_l+0x594>)
 800db52:	aa1a      	add	r2, sp, #104	; 0x68
 800db54:	a817      	add	r0, sp, #92	; 0x5c
 800db56:	f001 fdf1 	bl	800f73c <__hexnan>
 800db5a:	2805      	cmp	r0, #5
 800db5c:	d126      	bne.n	800dbac <_strtod_l+0x394>
 800db5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800db60:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800db64:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800db68:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800db6c:	e698      	b.n	800d8a0 <_strtod_l+0x88>
 800db6e:	250a      	movs	r5, #10
 800db70:	fb05 250c 	mla	r5, r5, ip, r2
 800db74:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800db78:	e7b9      	b.n	800daee <_strtod_l+0x2d6>
 800db7a:	2a6e      	cmp	r2, #110	; 0x6e
 800db7c:	e7db      	b.n	800db36 <_strtod_l+0x31e>
 800db7e:	498c      	ldr	r1, [pc, #560]	; (800ddb0 <_strtod_l+0x598>)
 800db80:	a817      	add	r0, sp, #92	; 0x5c
 800db82:	f001 fdc7 	bl	800f714 <__match>
 800db86:	2800      	cmp	r0, #0
 800db88:	f43f aea7 	beq.w	800d8da <_strtod_l+0xc2>
 800db8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800db8e:	4989      	ldr	r1, [pc, #548]	; (800ddb4 <_strtod_l+0x59c>)
 800db90:	3b01      	subs	r3, #1
 800db92:	a817      	add	r0, sp, #92	; 0x5c
 800db94:	9317      	str	r3, [sp, #92]	; 0x5c
 800db96:	f001 fdbd 	bl	800f714 <__match>
 800db9a:	b910      	cbnz	r0, 800dba2 <_strtod_l+0x38a>
 800db9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800db9e:	3301      	adds	r3, #1
 800dba0:	9317      	str	r3, [sp, #92]	; 0x5c
 800dba2:	f8df 9224 	ldr.w	r9, [pc, #548]	; 800ddc8 <_strtod_l+0x5b0>
 800dba6:	f04f 0800 	mov.w	r8, #0
 800dbaa:	e679      	b.n	800d8a0 <_strtod_l+0x88>
 800dbac:	4882      	ldr	r0, [pc, #520]	; (800ddb8 <_strtod_l+0x5a0>)
 800dbae:	f002 fd53 	bl	8010658 <nan>
 800dbb2:	ed8d 0b04 	vstr	d0, [sp, #16]
 800dbb6:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800dbba:	e671      	b.n	800d8a0 <_strtod_l+0x88>
 800dbbc:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 800dbc0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800dbc4:	eba5 020b 	sub.w	r2, r5, fp
 800dbc8:	2e00      	cmp	r6, #0
 800dbca:	bf08      	it	eq
 800dbcc:	461e      	moveq	r6, r3
 800dbce:	2b10      	cmp	r3, #16
 800dbd0:	ed8d 7b08 	vstr	d7, [sp, #32]
 800dbd4:	9206      	str	r2, [sp, #24]
 800dbd6:	461a      	mov	r2, r3
 800dbd8:	bfa8      	it	ge
 800dbda:	2210      	movge	r2, #16
 800dbdc:	2b09      	cmp	r3, #9
 800dbde:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800dbe2:	dd0e      	ble.n	800dc02 <_strtod_l+0x3ea>
 800dbe4:	4975      	ldr	r1, [pc, #468]	; (800ddbc <_strtod_l+0x5a4>)
 800dbe6:	eddd 7a04 	vldr	s15, [sp, #16]
 800dbea:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800dbee:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800dbf2:	ed9d 5b08 	vldr	d5, [sp, #32]
 800dbf6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800dbfa:	eea5 7b06 	vfma.f64	d7, d5, d6
 800dbfe:	ec59 8b17 	vmov	r8, r9, d7
 800dc02:	2b0f      	cmp	r3, #15
 800dc04:	dc37      	bgt.n	800dc76 <_strtod_l+0x45e>
 800dc06:	9906      	ldr	r1, [sp, #24]
 800dc08:	2900      	cmp	r1, #0
 800dc0a:	f43f ae49 	beq.w	800d8a0 <_strtod_l+0x88>
 800dc0e:	dd23      	ble.n	800dc58 <_strtod_l+0x440>
 800dc10:	2916      	cmp	r1, #22
 800dc12:	dc0b      	bgt.n	800dc2c <_strtod_l+0x414>
 800dc14:	4b69      	ldr	r3, [pc, #420]	; (800ddbc <_strtod_l+0x5a4>)
 800dc16:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800dc1a:	ed93 7b00 	vldr	d7, [r3]
 800dc1e:	ec49 8b16 	vmov	d6, r8, r9
 800dc22:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dc26:	ec59 8b17 	vmov	r8, r9, d7
 800dc2a:	e639      	b.n	800d8a0 <_strtod_l+0x88>
 800dc2c:	9806      	ldr	r0, [sp, #24]
 800dc2e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800dc32:	4281      	cmp	r1, r0
 800dc34:	db1f      	blt.n	800dc76 <_strtod_l+0x45e>
 800dc36:	4a61      	ldr	r2, [pc, #388]	; (800ddbc <_strtod_l+0x5a4>)
 800dc38:	f1c3 030f 	rsb	r3, r3, #15
 800dc3c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800dc40:	ed91 7b00 	vldr	d7, [r1]
 800dc44:	ec49 8b16 	vmov	d6, r8, r9
 800dc48:	1ac3      	subs	r3, r0, r3
 800dc4a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800dc4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dc52:	ed92 6b00 	vldr	d6, [r2]
 800dc56:	e7e4      	b.n	800dc22 <_strtod_l+0x40a>
 800dc58:	9906      	ldr	r1, [sp, #24]
 800dc5a:	3116      	adds	r1, #22
 800dc5c:	db0b      	blt.n	800dc76 <_strtod_l+0x45e>
 800dc5e:	4b57      	ldr	r3, [pc, #348]	; (800ddbc <_strtod_l+0x5a4>)
 800dc60:	ebab 0505 	sub.w	r5, fp, r5
 800dc64:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800dc68:	ed95 7b00 	vldr	d7, [r5]
 800dc6c:	ec49 8b16 	vmov	d6, r8, r9
 800dc70:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800dc74:	e7d7      	b.n	800dc26 <_strtod_l+0x40e>
 800dc76:	9906      	ldr	r1, [sp, #24]
 800dc78:	1a9a      	subs	r2, r3, r2
 800dc7a:	440a      	add	r2, r1
 800dc7c:	2a00      	cmp	r2, #0
 800dc7e:	dd74      	ble.n	800dd6a <_strtod_l+0x552>
 800dc80:	f012 000f 	ands.w	r0, r2, #15
 800dc84:	d00a      	beq.n	800dc9c <_strtod_l+0x484>
 800dc86:	494d      	ldr	r1, [pc, #308]	; (800ddbc <_strtod_l+0x5a4>)
 800dc88:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800dc8c:	ed91 7b00 	vldr	d7, [r1]
 800dc90:	ec49 8b16 	vmov	d6, r8, r9
 800dc94:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dc98:	ec59 8b17 	vmov	r8, r9, d7
 800dc9c:	f032 020f 	bics.w	r2, r2, #15
 800dca0:	d04f      	beq.n	800dd42 <_strtod_l+0x52a>
 800dca2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800dca6:	dd22      	ble.n	800dcee <_strtod_l+0x4d6>
 800dca8:	2500      	movs	r5, #0
 800dcaa:	462e      	mov	r6, r5
 800dcac:	950a      	str	r5, [sp, #40]	; 0x28
 800dcae:	462f      	mov	r7, r5
 800dcb0:	2322      	movs	r3, #34	; 0x22
 800dcb2:	f8df 9114 	ldr.w	r9, [pc, #276]	; 800ddc8 <_strtod_l+0x5b0>
 800dcb6:	6023      	str	r3, [r4, #0]
 800dcb8:	f04f 0800 	mov.w	r8, #0
 800dcbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	f43f adee 	beq.w	800d8a0 <_strtod_l+0x88>
 800dcc4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dcc6:	4620      	mov	r0, r4
 800dcc8:	f001 fe32 	bl	800f930 <_Bfree>
 800dccc:	4639      	mov	r1, r7
 800dcce:	4620      	mov	r0, r4
 800dcd0:	f001 fe2e 	bl	800f930 <_Bfree>
 800dcd4:	4631      	mov	r1, r6
 800dcd6:	4620      	mov	r0, r4
 800dcd8:	f001 fe2a 	bl	800f930 <_Bfree>
 800dcdc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dcde:	4620      	mov	r0, r4
 800dce0:	f001 fe26 	bl	800f930 <_Bfree>
 800dce4:	4629      	mov	r1, r5
 800dce6:	4620      	mov	r0, r4
 800dce8:	f001 fe22 	bl	800f930 <_Bfree>
 800dcec:	e5d8      	b.n	800d8a0 <_strtod_l+0x88>
 800dcee:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800dcf2:	2000      	movs	r0, #0
 800dcf4:	4f32      	ldr	r7, [pc, #200]	; (800ddc0 <_strtod_l+0x5a8>)
 800dcf6:	1112      	asrs	r2, r2, #4
 800dcf8:	4601      	mov	r1, r0
 800dcfa:	2a01      	cmp	r2, #1
 800dcfc:	dc24      	bgt.n	800dd48 <_strtod_l+0x530>
 800dcfe:	b108      	cbz	r0, 800dd04 <_strtod_l+0x4ec>
 800dd00:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800dd04:	4a2e      	ldr	r2, [pc, #184]	; (800ddc0 <_strtod_l+0x5a8>)
 800dd06:	482f      	ldr	r0, [pc, #188]	; (800ddc4 <_strtod_l+0x5ac>)
 800dd08:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800dd0c:	ed91 7b00 	vldr	d7, [r1]
 800dd10:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800dd14:	ec49 8b16 	vmov	d6, r8, r9
 800dd18:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dd1c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800dd20:	9905      	ldr	r1, [sp, #20]
 800dd22:	4a29      	ldr	r2, [pc, #164]	; (800ddc8 <_strtod_l+0x5b0>)
 800dd24:	400a      	ands	r2, r1
 800dd26:	4282      	cmp	r2, r0
 800dd28:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800dd2c:	d8bc      	bhi.n	800dca8 <_strtod_l+0x490>
 800dd2e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800dd32:	4282      	cmp	r2, r0
 800dd34:	bf86      	itte	hi
 800dd36:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800ddcc <_strtod_l+0x5b4>
 800dd3a:	f04f 38ff 	movhi.w	r8, #4294967295
 800dd3e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800dd42:	2200      	movs	r2, #0
 800dd44:	9204      	str	r2, [sp, #16]
 800dd46:	e07f      	b.n	800de48 <_strtod_l+0x630>
 800dd48:	f012 0f01 	tst.w	r2, #1
 800dd4c:	d00a      	beq.n	800dd64 <_strtod_l+0x54c>
 800dd4e:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 800dd52:	ed90 7b00 	vldr	d7, [r0]
 800dd56:	ed9d 6b04 	vldr	d6, [sp, #16]
 800dd5a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800dd5e:	ed8d 7b04 	vstr	d7, [sp, #16]
 800dd62:	2001      	movs	r0, #1
 800dd64:	3101      	adds	r1, #1
 800dd66:	1052      	asrs	r2, r2, #1
 800dd68:	e7c7      	b.n	800dcfa <_strtod_l+0x4e2>
 800dd6a:	d0ea      	beq.n	800dd42 <_strtod_l+0x52a>
 800dd6c:	4252      	negs	r2, r2
 800dd6e:	f012 000f 	ands.w	r0, r2, #15
 800dd72:	d00a      	beq.n	800dd8a <_strtod_l+0x572>
 800dd74:	4911      	ldr	r1, [pc, #68]	; (800ddbc <_strtod_l+0x5a4>)
 800dd76:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800dd7a:	ed91 7b00 	vldr	d7, [r1]
 800dd7e:	ec49 8b16 	vmov	d6, r8, r9
 800dd82:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800dd86:	ec59 8b17 	vmov	r8, r9, d7
 800dd8a:	1112      	asrs	r2, r2, #4
 800dd8c:	d0d9      	beq.n	800dd42 <_strtod_l+0x52a>
 800dd8e:	2a1f      	cmp	r2, #31
 800dd90:	dd1e      	ble.n	800ddd0 <_strtod_l+0x5b8>
 800dd92:	2500      	movs	r5, #0
 800dd94:	462e      	mov	r6, r5
 800dd96:	950a      	str	r5, [sp, #40]	; 0x28
 800dd98:	462f      	mov	r7, r5
 800dd9a:	2322      	movs	r3, #34	; 0x22
 800dd9c:	f04f 0800 	mov.w	r8, #0
 800dda0:	f04f 0900 	mov.w	r9, #0
 800dda4:	6023      	str	r3, [r4, #0]
 800dda6:	e789      	b.n	800dcbc <_strtod_l+0x4a4>
 800dda8:	08011539 	.word	0x08011539
 800ddac:	0801157c 	.word	0x0801157c
 800ddb0:	08011531 	.word	0x08011531
 800ddb4:	080116e1 	.word	0x080116e1
 800ddb8:	08011998 	.word	0x08011998
 800ddbc:	08011878 	.word	0x08011878
 800ddc0:	08011850 	.word	0x08011850
 800ddc4:	7ca00000 	.word	0x7ca00000
 800ddc8:	7ff00000 	.word	0x7ff00000
 800ddcc:	7fefffff 	.word	0x7fefffff
 800ddd0:	f012 0110 	ands.w	r1, r2, #16
 800ddd4:	bf18      	it	ne
 800ddd6:	216a      	movne	r1, #106	; 0x6a
 800ddd8:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800dddc:	9104      	str	r1, [sp, #16]
 800ddde:	49c0      	ldr	r1, [pc, #768]	; (800e0e0 <_strtod_l+0x8c8>)
 800dde0:	2000      	movs	r0, #0
 800dde2:	07d7      	lsls	r7, r2, #31
 800dde4:	d508      	bpl.n	800ddf8 <_strtod_l+0x5e0>
 800dde6:	ed9d 6b08 	vldr	d6, [sp, #32]
 800ddea:	ed91 7b00 	vldr	d7, [r1]
 800ddee:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ddf2:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ddf6:	2001      	movs	r0, #1
 800ddf8:	1052      	asrs	r2, r2, #1
 800ddfa:	f101 0108 	add.w	r1, r1, #8
 800ddfe:	d1f0      	bne.n	800dde2 <_strtod_l+0x5ca>
 800de00:	b108      	cbz	r0, 800de06 <_strtod_l+0x5ee>
 800de02:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800de06:	9a04      	ldr	r2, [sp, #16]
 800de08:	b1ba      	cbz	r2, 800de3a <_strtod_l+0x622>
 800de0a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800de0e:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800de12:	2a00      	cmp	r2, #0
 800de14:	4649      	mov	r1, r9
 800de16:	dd10      	ble.n	800de3a <_strtod_l+0x622>
 800de18:	2a1f      	cmp	r2, #31
 800de1a:	f340 8132 	ble.w	800e082 <_strtod_l+0x86a>
 800de1e:	2a34      	cmp	r2, #52	; 0x34
 800de20:	bfde      	ittt	le
 800de22:	3a20      	suble	r2, #32
 800de24:	f04f 30ff 	movle.w	r0, #4294967295
 800de28:	fa00 f202 	lslle.w	r2, r0, r2
 800de2c:	f04f 0800 	mov.w	r8, #0
 800de30:	bfcc      	ite	gt
 800de32:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800de36:	ea02 0901 	andle.w	r9, r2, r1
 800de3a:	ec49 8b17 	vmov	d7, r8, r9
 800de3e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800de42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de46:	d0a4      	beq.n	800dd92 <_strtod_l+0x57a>
 800de48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de4a:	9200      	str	r2, [sp, #0]
 800de4c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800de4e:	4632      	mov	r2, r6
 800de50:	4620      	mov	r0, r4
 800de52:	f001 fdd9 	bl	800fa08 <__s2b>
 800de56:	900a      	str	r0, [sp, #40]	; 0x28
 800de58:	2800      	cmp	r0, #0
 800de5a:	f43f af25 	beq.w	800dca8 <_strtod_l+0x490>
 800de5e:	9b06      	ldr	r3, [sp, #24]
 800de60:	ebab 0505 	sub.w	r5, fp, r5
 800de64:	2b00      	cmp	r3, #0
 800de66:	bfb4      	ite	lt
 800de68:	462b      	movlt	r3, r5
 800de6a:	2300      	movge	r3, #0
 800de6c:	930c      	str	r3, [sp, #48]	; 0x30
 800de6e:	9b06      	ldr	r3, [sp, #24]
 800de70:	ed9f 9b95 	vldr	d9, [pc, #596]	; 800e0c8 <_strtod_l+0x8b0>
 800de74:	ed9f ab96 	vldr	d10, [pc, #600]	; 800e0d0 <_strtod_l+0x8b8>
 800de78:	ed9f bb97 	vldr	d11, [pc, #604]	; 800e0d8 <_strtod_l+0x8c0>
 800de7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800de80:	2500      	movs	r5, #0
 800de82:	9312      	str	r3, [sp, #72]	; 0x48
 800de84:	462e      	mov	r6, r5
 800de86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de88:	4620      	mov	r0, r4
 800de8a:	6859      	ldr	r1, [r3, #4]
 800de8c:	f001 fd10 	bl	800f8b0 <_Balloc>
 800de90:	4607      	mov	r7, r0
 800de92:	2800      	cmp	r0, #0
 800de94:	f43f af0c 	beq.w	800dcb0 <_strtod_l+0x498>
 800de98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de9a:	691a      	ldr	r2, [r3, #16]
 800de9c:	3202      	adds	r2, #2
 800de9e:	f103 010c 	add.w	r1, r3, #12
 800dea2:	0092      	lsls	r2, r2, #2
 800dea4:	300c      	adds	r0, #12
 800dea6:	f7fe fe19 	bl	800cadc <memcpy>
 800deaa:	ec49 8b10 	vmov	d0, r8, r9
 800deae:	aa1a      	add	r2, sp, #104	; 0x68
 800deb0:	a919      	add	r1, sp, #100	; 0x64
 800deb2:	4620      	mov	r0, r4
 800deb4:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800deb8:	f002 f8e2 	bl	8010080 <__d2b>
 800debc:	9018      	str	r0, [sp, #96]	; 0x60
 800debe:	2800      	cmp	r0, #0
 800dec0:	f43f aef6 	beq.w	800dcb0 <_strtod_l+0x498>
 800dec4:	2101      	movs	r1, #1
 800dec6:	4620      	mov	r0, r4
 800dec8:	f001 fe38 	bl	800fb3c <__i2b>
 800decc:	4606      	mov	r6, r0
 800dece:	2800      	cmp	r0, #0
 800ded0:	f43f aeee 	beq.w	800dcb0 <_strtod_l+0x498>
 800ded4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ded6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ded8:	2b00      	cmp	r3, #0
 800deda:	bfab      	itete	ge
 800dedc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800dede:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800dee0:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 800dee4:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 800dee8:	bfac      	ite	ge
 800deea:	eb03 0b02 	addge.w	fp, r3, r2
 800deee:	eba2 0a03 	sublt.w	sl, r2, r3
 800def2:	9a04      	ldr	r2, [sp, #16]
 800def4:	1a9b      	subs	r3, r3, r2
 800def6:	440b      	add	r3, r1
 800def8:	4a7a      	ldr	r2, [pc, #488]	; (800e0e4 <_strtod_l+0x8cc>)
 800defa:	3b01      	subs	r3, #1
 800defc:	4293      	cmp	r3, r2
 800defe:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800df02:	f280 80d1 	bge.w	800e0a8 <_strtod_l+0x890>
 800df06:	1ad2      	subs	r2, r2, r3
 800df08:	2a1f      	cmp	r2, #31
 800df0a:	eba1 0102 	sub.w	r1, r1, r2
 800df0e:	f04f 0001 	mov.w	r0, #1
 800df12:	f300 80bd 	bgt.w	800e090 <_strtod_l+0x878>
 800df16:	fa00 f302 	lsl.w	r3, r0, r2
 800df1a:	930e      	str	r3, [sp, #56]	; 0x38
 800df1c:	2300      	movs	r3, #0
 800df1e:	930d      	str	r3, [sp, #52]	; 0x34
 800df20:	eb0b 0301 	add.w	r3, fp, r1
 800df24:	9a04      	ldr	r2, [sp, #16]
 800df26:	459b      	cmp	fp, r3
 800df28:	448a      	add	sl, r1
 800df2a:	4492      	add	sl, r2
 800df2c:	465a      	mov	r2, fp
 800df2e:	bfa8      	it	ge
 800df30:	461a      	movge	r2, r3
 800df32:	4552      	cmp	r2, sl
 800df34:	bfa8      	it	ge
 800df36:	4652      	movge	r2, sl
 800df38:	2a00      	cmp	r2, #0
 800df3a:	bfc2      	ittt	gt
 800df3c:	1a9b      	subgt	r3, r3, r2
 800df3e:	ebaa 0a02 	subgt.w	sl, sl, r2
 800df42:	ebab 0b02 	subgt.w	fp, fp, r2
 800df46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df48:	2a00      	cmp	r2, #0
 800df4a:	dd18      	ble.n	800df7e <_strtod_l+0x766>
 800df4c:	4631      	mov	r1, r6
 800df4e:	4620      	mov	r0, r4
 800df50:	9315      	str	r3, [sp, #84]	; 0x54
 800df52:	f001 feaf 	bl	800fcb4 <__pow5mult>
 800df56:	4606      	mov	r6, r0
 800df58:	2800      	cmp	r0, #0
 800df5a:	f43f aea9 	beq.w	800dcb0 <_strtod_l+0x498>
 800df5e:	4601      	mov	r1, r0
 800df60:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800df62:	4620      	mov	r0, r4
 800df64:	f001 fe00 	bl	800fb68 <__multiply>
 800df68:	9014      	str	r0, [sp, #80]	; 0x50
 800df6a:	2800      	cmp	r0, #0
 800df6c:	f43f aea0 	beq.w	800dcb0 <_strtod_l+0x498>
 800df70:	9918      	ldr	r1, [sp, #96]	; 0x60
 800df72:	4620      	mov	r0, r4
 800df74:	f001 fcdc 	bl	800f930 <_Bfree>
 800df78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800df7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800df7c:	9218      	str	r2, [sp, #96]	; 0x60
 800df7e:	2b00      	cmp	r3, #0
 800df80:	f300 8097 	bgt.w	800e0b2 <_strtod_l+0x89a>
 800df84:	9b06      	ldr	r3, [sp, #24]
 800df86:	2b00      	cmp	r3, #0
 800df88:	dd08      	ble.n	800df9c <_strtod_l+0x784>
 800df8a:	4639      	mov	r1, r7
 800df8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800df8e:	4620      	mov	r0, r4
 800df90:	f001 fe90 	bl	800fcb4 <__pow5mult>
 800df94:	4607      	mov	r7, r0
 800df96:	2800      	cmp	r0, #0
 800df98:	f43f ae8a 	beq.w	800dcb0 <_strtod_l+0x498>
 800df9c:	f1ba 0f00 	cmp.w	sl, #0
 800dfa0:	dd08      	ble.n	800dfb4 <_strtod_l+0x79c>
 800dfa2:	4639      	mov	r1, r7
 800dfa4:	4652      	mov	r2, sl
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	f001 fede 	bl	800fd68 <__lshift>
 800dfac:	4607      	mov	r7, r0
 800dfae:	2800      	cmp	r0, #0
 800dfb0:	f43f ae7e 	beq.w	800dcb0 <_strtod_l+0x498>
 800dfb4:	f1bb 0f00 	cmp.w	fp, #0
 800dfb8:	dd08      	ble.n	800dfcc <_strtod_l+0x7b4>
 800dfba:	4631      	mov	r1, r6
 800dfbc:	465a      	mov	r2, fp
 800dfbe:	4620      	mov	r0, r4
 800dfc0:	f001 fed2 	bl	800fd68 <__lshift>
 800dfc4:	4606      	mov	r6, r0
 800dfc6:	2800      	cmp	r0, #0
 800dfc8:	f43f ae72 	beq.w	800dcb0 <_strtod_l+0x498>
 800dfcc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dfce:	463a      	mov	r2, r7
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	f001 ff51 	bl	800fe78 <__mdiff>
 800dfd6:	4605      	mov	r5, r0
 800dfd8:	2800      	cmp	r0, #0
 800dfda:	f43f ae69 	beq.w	800dcb0 <_strtod_l+0x498>
 800dfde:	2300      	movs	r3, #0
 800dfe0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800dfe4:	60c3      	str	r3, [r0, #12]
 800dfe6:	4631      	mov	r1, r6
 800dfe8:	f001 ff2a 	bl	800fe40 <__mcmp>
 800dfec:	2800      	cmp	r0, #0
 800dfee:	da7f      	bge.n	800e0f0 <_strtod_l+0x8d8>
 800dff0:	ea5a 0308 	orrs.w	r3, sl, r8
 800dff4:	f040 80a5 	bne.w	800e142 <_strtod_l+0x92a>
 800dff8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	f040 80a0 	bne.w	800e142 <_strtod_l+0x92a>
 800e002:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e006:	0d1b      	lsrs	r3, r3, #20
 800e008:	051b      	lsls	r3, r3, #20
 800e00a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e00e:	f240 8098 	bls.w	800e142 <_strtod_l+0x92a>
 800e012:	696b      	ldr	r3, [r5, #20]
 800e014:	b91b      	cbnz	r3, 800e01e <_strtod_l+0x806>
 800e016:	692b      	ldr	r3, [r5, #16]
 800e018:	2b01      	cmp	r3, #1
 800e01a:	f340 8092 	ble.w	800e142 <_strtod_l+0x92a>
 800e01e:	4629      	mov	r1, r5
 800e020:	2201      	movs	r2, #1
 800e022:	4620      	mov	r0, r4
 800e024:	f001 fea0 	bl	800fd68 <__lshift>
 800e028:	4631      	mov	r1, r6
 800e02a:	4605      	mov	r5, r0
 800e02c:	f001 ff08 	bl	800fe40 <__mcmp>
 800e030:	2800      	cmp	r0, #0
 800e032:	f340 8086 	ble.w	800e142 <_strtod_l+0x92a>
 800e036:	9904      	ldr	r1, [sp, #16]
 800e038:	4a2b      	ldr	r2, [pc, #172]	; (800e0e8 <_strtod_l+0x8d0>)
 800e03a:	464b      	mov	r3, r9
 800e03c:	2900      	cmp	r1, #0
 800e03e:	f000 80a1 	beq.w	800e184 <_strtod_l+0x96c>
 800e042:	ea02 0109 	and.w	r1, r2, r9
 800e046:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e04a:	f300 809b 	bgt.w	800e184 <_strtod_l+0x96c>
 800e04e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e052:	f77f aea2 	ble.w	800dd9a <_strtod_l+0x582>
 800e056:	4a25      	ldr	r2, [pc, #148]	; (800e0ec <_strtod_l+0x8d4>)
 800e058:	2300      	movs	r3, #0
 800e05a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800e05e:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 800e062:	ec49 8b17 	vmov	d7, r8, r9
 800e066:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e06a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e06e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800e072:	4313      	orrs	r3, r2
 800e074:	bf08      	it	eq
 800e076:	2322      	moveq	r3, #34	; 0x22
 800e078:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e07c:	bf08      	it	eq
 800e07e:	6023      	streq	r3, [r4, #0]
 800e080:	e620      	b.n	800dcc4 <_strtod_l+0x4ac>
 800e082:	f04f 31ff 	mov.w	r1, #4294967295
 800e086:	fa01 f202 	lsl.w	r2, r1, r2
 800e08a:	ea02 0808 	and.w	r8, r2, r8
 800e08e:	e6d4      	b.n	800de3a <_strtod_l+0x622>
 800e090:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800e094:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800e098:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800e09c:	33e2      	adds	r3, #226	; 0xe2
 800e09e:	fa00 f303 	lsl.w	r3, r0, r3
 800e0a2:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 800e0a6:	e73b      	b.n	800df20 <_strtod_l+0x708>
 800e0a8:	2000      	movs	r0, #0
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 800e0b0:	e736      	b.n	800df20 <_strtod_l+0x708>
 800e0b2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e0b4:	461a      	mov	r2, r3
 800e0b6:	4620      	mov	r0, r4
 800e0b8:	f001 fe56 	bl	800fd68 <__lshift>
 800e0bc:	9018      	str	r0, [sp, #96]	; 0x60
 800e0be:	2800      	cmp	r0, #0
 800e0c0:	f47f af60 	bne.w	800df84 <_strtod_l+0x76c>
 800e0c4:	e5f4      	b.n	800dcb0 <_strtod_l+0x498>
 800e0c6:	bf00      	nop
 800e0c8:	94a03595 	.word	0x94a03595
 800e0cc:	3fcfffff 	.word	0x3fcfffff
 800e0d0:	94a03595 	.word	0x94a03595
 800e0d4:	3fdfffff 	.word	0x3fdfffff
 800e0d8:	35afe535 	.word	0x35afe535
 800e0dc:	3fe00000 	.word	0x3fe00000
 800e0e0:	08011590 	.word	0x08011590
 800e0e4:	fffffc02 	.word	0xfffffc02
 800e0e8:	7ff00000 	.word	0x7ff00000
 800e0ec:	39500000 	.word	0x39500000
 800e0f0:	46cb      	mov	fp, r9
 800e0f2:	d165      	bne.n	800e1c0 <_strtod_l+0x9a8>
 800e0f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e0f8:	f1ba 0f00 	cmp.w	sl, #0
 800e0fc:	d02a      	beq.n	800e154 <_strtod_l+0x93c>
 800e0fe:	4aaa      	ldr	r2, [pc, #680]	; (800e3a8 <_strtod_l+0xb90>)
 800e100:	4293      	cmp	r3, r2
 800e102:	d12b      	bne.n	800e15c <_strtod_l+0x944>
 800e104:	9b04      	ldr	r3, [sp, #16]
 800e106:	4641      	mov	r1, r8
 800e108:	b1fb      	cbz	r3, 800e14a <_strtod_l+0x932>
 800e10a:	4aa8      	ldr	r2, [pc, #672]	; (800e3ac <_strtod_l+0xb94>)
 800e10c:	ea09 0202 	and.w	r2, r9, r2
 800e110:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800e114:	f04f 30ff 	mov.w	r0, #4294967295
 800e118:	d81a      	bhi.n	800e150 <_strtod_l+0x938>
 800e11a:	0d12      	lsrs	r2, r2, #20
 800e11c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e120:	fa00 f303 	lsl.w	r3, r0, r3
 800e124:	4299      	cmp	r1, r3
 800e126:	d119      	bne.n	800e15c <_strtod_l+0x944>
 800e128:	4ba1      	ldr	r3, [pc, #644]	; (800e3b0 <_strtod_l+0xb98>)
 800e12a:	459b      	cmp	fp, r3
 800e12c:	d102      	bne.n	800e134 <_strtod_l+0x91c>
 800e12e:	3101      	adds	r1, #1
 800e130:	f43f adbe 	beq.w	800dcb0 <_strtod_l+0x498>
 800e134:	4b9d      	ldr	r3, [pc, #628]	; (800e3ac <_strtod_l+0xb94>)
 800e136:	ea0b 0303 	and.w	r3, fp, r3
 800e13a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800e13e:	f04f 0800 	mov.w	r8, #0
 800e142:	9b04      	ldr	r3, [sp, #16]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d186      	bne.n	800e056 <_strtod_l+0x83e>
 800e148:	e5bc      	b.n	800dcc4 <_strtod_l+0x4ac>
 800e14a:	f04f 33ff 	mov.w	r3, #4294967295
 800e14e:	e7e9      	b.n	800e124 <_strtod_l+0x90c>
 800e150:	4603      	mov	r3, r0
 800e152:	e7e7      	b.n	800e124 <_strtod_l+0x90c>
 800e154:	ea53 0308 	orrs.w	r3, r3, r8
 800e158:	f43f af6d 	beq.w	800e036 <_strtod_l+0x81e>
 800e15c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e15e:	b1db      	cbz	r3, 800e198 <_strtod_l+0x980>
 800e160:	ea13 0f0b 	tst.w	r3, fp
 800e164:	d0ed      	beq.n	800e142 <_strtod_l+0x92a>
 800e166:	9a04      	ldr	r2, [sp, #16]
 800e168:	4640      	mov	r0, r8
 800e16a:	4649      	mov	r1, r9
 800e16c:	f1ba 0f00 	cmp.w	sl, #0
 800e170:	d016      	beq.n	800e1a0 <_strtod_l+0x988>
 800e172:	f7ff fb35 	bl	800d7e0 <sulp>
 800e176:	ed9d 7b08 	vldr	d7, [sp, #32]
 800e17a:	ee37 7b00 	vadd.f64	d7, d7, d0
 800e17e:	ec59 8b17 	vmov	r8, r9, d7
 800e182:	e7de      	b.n	800e142 <_strtod_l+0x92a>
 800e184:	4013      	ands	r3, r2
 800e186:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e18a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800e18e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800e192:	f04f 38ff 	mov.w	r8, #4294967295
 800e196:	e7d4      	b.n	800e142 <_strtod_l+0x92a>
 800e198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e19a:	ea13 0f08 	tst.w	r3, r8
 800e19e:	e7e1      	b.n	800e164 <_strtod_l+0x94c>
 800e1a0:	f7ff fb1e 	bl	800d7e0 <sulp>
 800e1a4:	ed9d 7b08 	vldr	d7, [sp, #32]
 800e1a8:	ee37 7b40 	vsub.f64	d7, d7, d0
 800e1ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e1b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e1b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1b8:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800e1bc:	d1c1      	bne.n	800e142 <_strtod_l+0x92a>
 800e1be:	e5ec      	b.n	800dd9a <_strtod_l+0x582>
 800e1c0:	4631      	mov	r1, r6
 800e1c2:	4628      	mov	r0, r5
 800e1c4:	f001 ffb8 	bl	8010138 <__ratio>
 800e1c8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800e1cc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e1d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1d4:	d867      	bhi.n	800e2a6 <_strtod_l+0xa8e>
 800e1d6:	f1ba 0f00 	cmp.w	sl, #0
 800e1da:	d044      	beq.n	800e266 <_strtod_l+0xa4e>
 800e1dc:	4b75      	ldr	r3, [pc, #468]	; (800e3b4 <_strtod_l+0xb9c>)
 800e1de:	2200      	movs	r2, #0
 800e1e0:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800e1e4:	4971      	ldr	r1, [pc, #452]	; (800e3ac <_strtod_l+0xb94>)
 800e1e6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800e3c0 <_strtod_l+0xba8>
 800e1ea:	ea0b 0001 	and.w	r0, fp, r1
 800e1ee:	4560      	cmp	r0, ip
 800e1f0:	900d      	str	r0, [sp, #52]	; 0x34
 800e1f2:	f040 808b 	bne.w	800e30c <_strtod_l+0xaf4>
 800e1f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e1fa:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800e1fe:	ec49 8b10 	vmov	d0, r8, r9
 800e202:	ec43 2b1c 	vmov	d12, r2, r3
 800e206:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e20a:	f001 febd 	bl	800ff88 <__ulp>
 800e20e:	ec49 8b1d 	vmov	d13, r8, r9
 800e212:	eeac db00 	vfma.f64	d13, d12, d0
 800e216:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 800e21a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e21c:	4963      	ldr	r1, [pc, #396]	; (800e3ac <_strtod_l+0xb94>)
 800e21e:	4a66      	ldr	r2, [pc, #408]	; (800e3b8 <_strtod_l+0xba0>)
 800e220:	4019      	ands	r1, r3
 800e222:	4291      	cmp	r1, r2
 800e224:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 800e228:	d947      	bls.n	800e2ba <_strtod_l+0xaa2>
 800e22a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e22c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e230:	4293      	cmp	r3, r2
 800e232:	d103      	bne.n	800e23c <_strtod_l+0xa24>
 800e234:	9b08      	ldr	r3, [sp, #32]
 800e236:	3301      	adds	r3, #1
 800e238:	f43f ad3a 	beq.w	800dcb0 <_strtod_l+0x498>
 800e23c:	f8df 9170 	ldr.w	r9, [pc, #368]	; 800e3b0 <_strtod_l+0xb98>
 800e240:	f04f 38ff 	mov.w	r8, #4294967295
 800e244:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e246:	4620      	mov	r0, r4
 800e248:	f001 fb72 	bl	800f930 <_Bfree>
 800e24c:	4639      	mov	r1, r7
 800e24e:	4620      	mov	r0, r4
 800e250:	f001 fb6e 	bl	800f930 <_Bfree>
 800e254:	4631      	mov	r1, r6
 800e256:	4620      	mov	r0, r4
 800e258:	f001 fb6a 	bl	800f930 <_Bfree>
 800e25c:	4629      	mov	r1, r5
 800e25e:	4620      	mov	r0, r4
 800e260:	f001 fb66 	bl	800f930 <_Bfree>
 800e264:	e60f      	b.n	800de86 <_strtod_l+0x66e>
 800e266:	f1b8 0f00 	cmp.w	r8, #0
 800e26a:	d112      	bne.n	800e292 <_strtod_l+0xa7a>
 800e26c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e270:	b9b3      	cbnz	r3, 800e2a0 <_strtod_l+0xa88>
 800e272:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800e276:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e27a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e27e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800e282:	d401      	bmi.n	800e288 <_strtod_l+0xa70>
 800e284:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e288:	eeb1 7b48 	vneg.f64	d7, d8
 800e28c:	ec53 2b17 	vmov	r2, r3, d7
 800e290:	e7a8      	b.n	800e1e4 <_strtod_l+0x9cc>
 800e292:	f1b8 0f01 	cmp.w	r8, #1
 800e296:	d103      	bne.n	800e2a0 <_strtod_l+0xa88>
 800e298:	f1b9 0f00 	cmp.w	r9, #0
 800e29c:	f43f ad7d 	beq.w	800dd9a <_strtod_l+0x582>
 800e2a0:	4b46      	ldr	r3, [pc, #280]	; (800e3bc <_strtod_l+0xba4>)
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	e79c      	b.n	800e1e0 <_strtod_l+0x9c8>
 800e2a6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800e2aa:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e2ae:	f1ba 0f00 	cmp.w	sl, #0
 800e2b2:	d0e9      	beq.n	800e288 <_strtod_l+0xa70>
 800e2b4:	ec53 2b18 	vmov	r2, r3, d8
 800e2b8:	e794      	b.n	800e1e4 <_strtod_l+0x9cc>
 800e2ba:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800e2be:	9b04      	ldr	r3, [sp, #16]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d1bf      	bne.n	800e244 <_strtod_l+0xa2c>
 800e2c4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e2c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e2ca:	0d1b      	lsrs	r3, r3, #20
 800e2cc:	051b      	lsls	r3, r3, #20
 800e2ce:	429a      	cmp	r2, r3
 800e2d0:	d1b8      	bne.n	800e244 <_strtod_l+0xa2c>
 800e2d2:	ec51 0b18 	vmov	r0, r1, d8
 800e2d6:	f7f2 fa2f 	bl	8000738 <__aeabi_d2lz>
 800e2da:	f7f2 f9e7 	bl	80006ac <__aeabi_l2d>
 800e2de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e2e2:	ec41 0b17 	vmov	d7, r0, r1
 800e2e6:	ea43 0308 	orr.w	r3, r3, r8
 800e2ea:	ea53 030a 	orrs.w	r3, r3, sl
 800e2ee:	ee38 8b47 	vsub.f64	d8, d8, d7
 800e2f2:	d03e      	beq.n	800e372 <_strtod_l+0xb5a>
 800e2f4:	eeb4 8bca 	vcmpe.f64	d8, d10
 800e2f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2fc:	f53f ace2 	bmi.w	800dcc4 <_strtod_l+0x4ac>
 800e300:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800e304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e308:	dd9c      	ble.n	800e244 <_strtod_l+0xa2c>
 800e30a:	e4db      	b.n	800dcc4 <_strtod_l+0x4ac>
 800e30c:	9904      	ldr	r1, [sp, #16]
 800e30e:	b301      	cbz	r1, 800e352 <_strtod_l+0xb3a>
 800e310:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e312:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800e316:	d81c      	bhi.n	800e352 <_strtod_l+0xb3a>
 800e318:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800e3a0 <_strtod_l+0xb88>
 800e31c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e324:	d811      	bhi.n	800e34a <_strtod_l+0xb32>
 800e326:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800e32a:	ee18 3a10 	vmov	r3, s16
 800e32e:	2b01      	cmp	r3, #1
 800e330:	bf38      	it	cc
 800e332:	2301      	movcc	r3, #1
 800e334:	ee08 3a10 	vmov	s16, r3
 800e338:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800e33c:	f1ba 0f00 	cmp.w	sl, #0
 800e340:	d114      	bne.n	800e36c <_strtod_l+0xb54>
 800e342:	eeb1 7b48 	vneg.f64	d7, d8
 800e346:	ec53 2b17 	vmov	r2, r3, d7
 800e34a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e34c:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 800e350:	1a0b      	subs	r3, r1, r0
 800e352:	ed9d 0b08 	vldr	d0, [sp, #32]
 800e356:	ec43 2b1c 	vmov	d12, r2, r3
 800e35a:	f001 fe15 	bl	800ff88 <__ulp>
 800e35e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800e362:	eeac 7b00 	vfma.f64	d7, d12, d0
 800e366:	ec59 8b17 	vmov	r8, r9, d7
 800e36a:	e7a8      	b.n	800e2be <_strtod_l+0xaa6>
 800e36c:	ec53 2b18 	vmov	r2, r3, d8
 800e370:	e7eb      	b.n	800e34a <_strtod_l+0xb32>
 800e372:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800e376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e37a:	f57f af63 	bpl.w	800e244 <_strtod_l+0xa2c>
 800e37e:	e4a1      	b.n	800dcc4 <_strtod_l+0x4ac>
 800e380:	2300      	movs	r3, #0
 800e382:	930b      	str	r3, [sp, #44]	; 0x2c
 800e384:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e386:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e388:	6013      	str	r3, [r2, #0]
 800e38a:	f7ff ba8d 	b.w	800d8a8 <_strtod_l+0x90>
 800e38e:	2a65      	cmp	r2, #101	; 0x65
 800e390:	f43f ab89 	beq.w	800daa6 <_strtod_l+0x28e>
 800e394:	2a45      	cmp	r2, #69	; 0x45
 800e396:	f43f ab86 	beq.w	800daa6 <_strtod_l+0x28e>
 800e39a:	2101      	movs	r1, #1
 800e39c:	f7ff bbbe 	b.w	800db1c <_strtod_l+0x304>
 800e3a0:	ffc00000 	.word	0xffc00000
 800e3a4:	41dfffff 	.word	0x41dfffff
 800e3a8:	000fffff 	.word	0x000fffff
 800e3ac:	7ff00000 	.word	0x7ff00000
 800e3b0:	7fefffff 	.word	0x7fefffff
 800e3b4:	3ff00000 	.word	0x3ff00000
 800e3b8:	7c9fffff 	.word	0x7c9fffff
 800e3bc:	bff00000 	.word	0xbff00000
 800e3c0:	7fe00000 	.word	0x7fe00000

0800e3c4 <_strtod_r>:
 800e3c4:	4b01      	ldr	r3, [pc, #4]	; (800e3cc <_strtod_r+0x8>)
 800e3c6:	f7ff ba27 	b.w	800d818 <_strtod_l>
 800e3ca:	bf00      	nop
 800e3cc:	2400007c 	.word	0x2400007c

0800e3d0 <_strtol_l.isra.0>:
 800e3d0:	2b01      	cmp	r3, #1
 800e3d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3d6:	d001      	beq.n	800e3dc <_strtol_l.isra.0+0xc>
 800e3d8:	2b24      	cmp	r3, #36	; 0x24
 800e3da:	d906      	bls.n	800e3ea <_strtol_l.isra.0+0x1a>
 800e3dc:	f7fe fb3a 	bl	800ca54 <__errno>
 800e3e0:	2316      	movs	r3, #22
 800e3e2:	6003      	str	r3, [r0, #0]
 800e3e4:	2000      	movs	r0, #0
 800e3e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3ea:	4f3a      	ldr	r7, [pc, #232]	; (800e4d4 <_strtol_l.isra.0+0x104>)
 800e3ec:	468e      	mov	lr, r1
 800e3ee:	4676      	mov	r6, lr
 800e3f0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800e3f4:	5de5      	ldrb	r5, [r4, r7]
 800e3f6:	f015 0508 	ands.w	r5, r5, #8
 800e3fa:	d1f8      	bne.n	800e3ee <_strtol_l.isra.0+0x1e>
 800e3fc:	2c2d      	cmp	r4, #45	; 0x2d
 800e3fe:	d134      	bne.n	800e46a <_strtol_l.isra.0+0x9a>
 800e400:	f89e 4000 	ldrb.w	r4, [lr]
 800e404:	f04f 0801 	mov.w	r8, #1
 800e408:	f106 0e02 	add.w	lr, r6, #2
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d05c      	beq.n	800e4ca <_strtol_l.isra.0+0xfa>
 800e410:	2b10      	cmp	r3, #16
 800e412:	d10c      	bne.n	800e42e <_strtol_l.isra.0+0x5e>
 800e414:	2c30      	cmp	r4, #48	; 0x30
 800e416:	d10a      	bne.n	800e42e <_strtol_l.isra.0+0x5e>
 800e418:	f89e 4000 	ldrb.w	r4, [lr]
 800e41c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e420:	2c58      	cmp	r4, #88	; 0x58
 800e422:	d14d      	bne.n	800e4c0 <_strtol_l.isra.0+0xf0>
 800e424:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800e428:	2310      	movs	r3, #16
 800e42a:	f10e 0e02 	add.w	lr, lr, #2
 800e42e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800e432:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e436:	2600      	movs	r6, #0
 800e438:	fbbc f9f3 	udiv	r9, ip, r3
 800e43c:	4635      	mov	r5, r6
 800e43e:	fb03 ca19 	mls	sl, r3, r9, ip
 800e442:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800e446:	2f09      	cmp	r7, #9
 800e448:	d818      	bhi.n	800e47c <_strtol_l.isra.0+0xac>
 800e44a:	463c      	mov	r4, r7
 800e44c:	42a3      	cmp	r3, r4
 800e44e:	dd24      	ble.n	800e49a <_strtol_l.isra.0+0xca>
 800e450:	2e00      	cmp	r6, #0
 800e452:	db1f      	blt.n	800e494 <_strtol_l.isra.0+0xc4>
 800e454:	45a9      	cmp	r9, r5
 800e456:	d31d      	bcc.n	800e494 <_strtol_l.isra.0+0xc4>
 800e458:	d101      	bne.n	800e45e <_strtol_l.isra.0+0x8e>
 800e45a:	45a2      	cmp	sl, r4
 800e45c:	db1a      	blt.n	800e494 <_strtol_l.isra.0+0xc4>
 800e45e:	fb05 4503 	mla	r5, r5, r3, r4
 800e462:	2601      	movs	r6, #1
 800e464:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800e468:	e7eb      	b.n	800e442 <_strtol_l.isra.0+0x72>
 800e46a:	2c2b      	cmp	r4, #43	; 0x2b
 800e46c:	bf08      	it	eq
 800e46e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800e472:	46a8      	mov	r8, r5
 800e474:	bf08      	it	eq
 800e476:	f106 0e02 	addeq.w	lr, r6, #2
 800e47a:	e7c7      	b.n	800e40c <_strtol_l.isra.0+0x3c>
 800e47c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800e480:	2f19      	cmp	r7, #25
 800e482:	d801      	bhi.n	800e488 <_strtol_l.isra.0+0xb8>
 800e484:	3c37      	subs	r4, #55	; 0x37
 800e486:	e7e1      	b.n	800e44c <_strtol_l.isra.0+0x7c>
 800e488:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800e48c:	2f19      	cmp	r7, #25
 800e48e:	d804      	bhi.n	800e49a <_strtol_l.isra.0+0xca>
 800e490:	3c57      	subs	r4, #87	; 0x57
 800e492:	e7db      	b.n	800e44c <_strtol_l.isra.0+0x7c>
 800e494:	f04f 36ff 	mov.w	r6, #4294967295
 800e498:	e7e4      	b.n	800e464 <_strtol_l.isra.0+0x94>
 800e49a:	2e00      	cmp	r6, #0
 800e49c:	da05      	bge.n	800e4aa <_strtol_l.isra.0+0xda>
 800e49e:	2322      	movs	r3, #34	; 0x22
 800e4a0:	6003      	str	r3, [r0, #0]
 800e4a2:	4665      	mov	r5, ip
 800e4a4:	b942      	cbnz	r2, 800e4b8 <_strtol_l.isra.0+0xe8>
 800e4a6:	4628      	mov	r0, r5
 800e4a8:	e79d      	b.n	800e3e6 <_strtol_l.isra.0+0x16>
 800e4aa:	f1b8 0f00 	cmp.w	r8, #0
 800e4ae:	d000      	beq.n	800e4b2 <_strtol_l.isra.0+0xe2>
 800e4b0:	426d      	negs	r5, r5
 800e4b2:	2a00      	cmp	r2, #0
 800e4b4:	d0f7      	beq.n	800e4a6 <_strtol_l.isra.0+0xd6>
 800e4b6:	b10e      	cbz	r6, 800e4bc <_strtol_l.isra.0+0xec>
 800e4b8:	f10e 31ff 	add.w	r1, lr, #4294967295
 800e4bc:	6011      	str	r1, [r2, #0]
 800e4be:	e7f2      	b.n	800e4a6 <_strtol_l.isra.0+0xd6>
 800e4c0:	2430      	movs	r4, #48	; 0x30
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d1b3      	bne.n	800e42e <_strtol_l.isra.0+0x5e>
 800e4c6:	2308      	movs	r3, #8
 800e4c8:	e7b1      	b.n	800e42e <_strtol_l.isra.0+0x5e>
 800e4ca:	2c30      	cmp	r4, #48	; 0x30
 800e4cc:	d0a4      	beq.n	800e418 <_strtol_l.isra.0+0x48>
 800e4ce:	230a      	movs	r3, #10
 800e4d0:	e7ad      	b.n	800e42e <_strtol_l.isra.0+0x5e>
 800e4d2:	bf00      	nop
 800e4d4:	080115de 	.word	0x080115de

0800e4d8 <_strtol_r>:
 800e4d8:	f7ff bf7a 	b.w	800e3d0 <_strtol_l.isra.0>

0800e4dc <strtol>:
 800e4dc:	4613      	mov	r3, r2
 800e4de:	460a      	mov	r2, r1
 800e4e0:	4601      	mov	r1, r0
 800e4e2:	4802      	ldr	r0, [pc, #8]	; (800e4ec <strtol+0x10>)
 800e4e4:	6800      	ldr	r0, [r0, #0]
 800e4e6:	f7ff bf73 	b.w	800e3d0 <_strtol_l.isra.0>
 800e4ea:	bf00      	nop
 800e4ec:	24000014 	.word	0x24000014

0800e4f0 <__utoa>:
 800e4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4f2:	4c1f      	ldr	r4, [pc, #124]	; (800e570 <__utoa+0x80>)
 800e4f4:	b08b      	sub	sp, #44	; 0x2c
 800e4f6:	4605      	mov	r5, r0
 800e4f8:	460b      	mov	r3, r1
 800e4fa:	466e      	mov	r6, sp
 800e4fc:	f104 0c20 	add.w	ip, r4, #32
 800e500:	6820      	ldr	r0, [r4, #0]
 800e502:	6861      	ldr	r1, [r4, #4]
 800e504:	4637      	mov	r7, r6
 800e506:	c703      	stmia	r7!, {r0, r1}
 800e508:	3408      	adds	r4, #8
 800e50a:	4564      	cmp	r4, ip
 800e50c:	463e      	mov	r6, r7
 800e50e:	d1f7      	bne.n	800e500 <__utoa+0x10>
 800e510:	7921      	ldrb	r1, [r4, #4]
 800e512:	7139      	strb	r1, [r7, #4]
 800e514:	1e91      	subs	r1, r2, #2
 800e516:	6820      	ldr	r0, [r4, #0]
 800e518:	6038      	str	r0, [r7, #0]
 800e51a:	2922      	cmp	r1, #34	; 0x22
 800e51c:	f04f 0100 	mov.w	r1, #0
 800e520:	d904      	bls.n	800e52c <__utoa+0x3c>
 800e522:	7019      	strb	r1, [r3, #0]
 800e524:	460b      	mov	r3, r1
 800e526:	4618      	mov	r0, r3
 800e528:	b00b      	add	sp, #44	; 0x2c
 800e52a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e52c:	1e58      	subs	r0, r3, #1
 800e52e:	4684      	mov	ip, r0
 800e530:	fbb5 f7f2 	udiv	r7, r5, r2
 800e534:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800e538:	fb02 5617 	mls	r6, r2, r7, r5
 800e53c:	4476      	add	r6, lr
 800e53e:	460c      	mov	r4, r1
 800e540:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800e544:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800e548:	462e      	mov	r6, r5
 800e54a:	42b2      	cmp	r2, r6
 800e54c:	f101 0101 	add.w	r1, r1, #1
 800e550:	463d      	mov	r5, r7
 800e552:	d9ed      	bls.n	800e530 <__utoa+0x40>
 800e554:	2200      	movs	r2, #0
 800e556:	545a      	strb	r2, [r3, r1]
 800e558:	1919      	adds	r1, r3, r4
 800e55a:	1aa5      	subs	r5, r4, r2
 800e55c:	42aa      	cmp	r2, r5
 800e55e:	dae2      	bge.n	800e526 <__utoa+0x36>
 800e560:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800e564:	780e      	ldrb	r6, [r1, #0]
 800e566:	7006      	strb	r6, [r0, #0]
 800e568:	3201      	adds	r2, #1
 800e56a:	f801 5901 	strb.w	r5, [r1], #-1
 800e56e:	e7f4      	b.n	800e55a <__utoa+0x6a>
 800e570:	080115b8 	.word	0x080115b8

0800e574 <quorem>:
 800e574:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e578:	6903      	ldr	r3, [r0, #16]
 800e57a:	690c      	ldr	r4, [r1, #16]
 800e57c:	42a3      	cmp	r3, r4
 800e57e:	4607      	mov	r7, r0
 800e580:	f2c0 8081 	blt.w	800e686 <quorem+0x112>
 800e584:	3c01      	subs	r4, #1
 800e586:	f101 0814 	add.w	r8, r1, #20
 800e58a:	f100 0514 	add.w	r5, r0, #20
 800e58e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e592:	9301      	str	r3, [sp, #4]
 800e594:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e598:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e59c:	3301      	adds	r3, #1
 800e59e:	429a      	cmp	r2, r3
 800e5a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e5a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e5a8:	fbb2 f6f3 	udiv	r6, r2, r3
 800e5ac:	d331      	bcc.n	800e612 <quorem+0x9e>
 800e5ae:	f04f 0e00 	mov.w	lr, #0
 800e5b2:	4640      	mov	r0, r8
 800e5b4:	46ac      	mov	ip, r5
 800e5b6:	46f2      	mov	sl, lr
 800e5b8:	f850 2b04 	ldr.w	r2, [r0], #4
 800e5bc:	b293      	uxth	r3, r2
 800e5be:	fb06 e303 	mla	r3, r6, r3, lr
 800e5c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e5c6:	b29b      	uxth	r3, r3
 800e5c8:	ebaa 0303 	sub.w	r3, sl, r3
 800e5cc:	0c12      	lsrs	r2, r2, #16
 800e5ce:	f8dc a000 	ldr.w	sl, [ip]
 800e5d2:	fb06 e202 	mla	r2, r6, r2, lr
 800e5d6:	fa13 f38a 	uxtah	r3, r3, sl
 800e5da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e5de:	fa1f fa82 	uxth.w	sl, r2
 800e5e2:	f8dc 2000 	ldr.w	r2, [ip]
 800e5e6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800e5ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e5f4:	4581      	cmp	r9, r0
 800e5f6:	f84c 3b04 	str.w	r3, [ip], #4
 800e5fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e5fe:	d2db      	bcs.n	800e5b8 <quorem+0x44>
 800e600:	f855 300b 	ldr.w	r3, [r5, fp]
 800e604:	b92b      	cbnz	r3, 800e612 <quorem+0x9e>
 800e606:	9b01      	ldr	r3, [sp, #4]
 800e608:	3b04      	subs	r3, #4
 800e60a:	429d      	cmp	r5, r3
 800e60c:	461a      	mov	r2, r3
 800e60e:	d32e      	bcc.n	800e66e <quorem+0xfa>
 800e610:	613c      	str	r4, [r7, #16]
 800e612:	4638      	mov	r0, r7
 800e614:	f001 fc14 	bl	800fe40 <__mcmp>
 800e618:	2800      	cmp	r0, #0
 800e61a:	db24      	blt.n	800e666 <quorem+0xf2>
 800e61c:	3601      	adds	r6, #1
 800e61e:	4628      	mov	r0, r5
 800e620:	f04f 0c00 	mov.w	ip, #0
 800e624:	f858 2b04 	ldr.w	r2, [r8], #4
 800e628:	f8d0 e000 	ldr.w	lr, [r0]
 800e62c:	b293      	uxth	r3, r2
 800e62e:	ebac 0303 	sub.w	r3, ip, r3
 800e632:	0c12      	lsrs	r2, r2, #16
 800e634:	fa13 f38e 	uxtah	r3, r3, lr
 800e638:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e63c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e640:	b29b      	uxth	r3, r3
 800e642:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e646:	45c1      	cmp	r9, r8
 800e648:	f840 3b04 	str.w	r3, [r0], #4
 800e64c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e650:	d2e8      	bcs.n	800e624 <quorem+0xb0>
 800e652:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e656:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e65a:	b922      	cbnz	r2, 800e666 <quorem+0xf2>
 800e65c:	3b04      	subs	r3, #4
 800e65e:	429d      	cmp	r5, r3
 800e660:	461a      	mov	r2, r3
 800e662:	d30a      	bcc.n	800e67a <quorem+0x106>
 800e664:	613c      	str	r4, [r7, #16]
 800e666:	4630      	mov	r0, r6
 800e668:	b003      	add	sp, #12
 800e66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e66e:	6812      	ldr	r2, [r2, #0]
 800e670:	3b04      	subs	r3, #4
 800e672:	2a00      	cmp	r2, #0
 800e674:	d1cc      	bne.n	800e610 <quorem+0x9c>
 800e676:	3c01      	subs	r4, #1
 800e678:	e7c7      	b.n	800e60a <quorem+0x96>
 800e67a:	6812      	ldr	r2, [r2, #0]
 800e67c:	3b04      	subs	r3, #4
 800e67e:	2a00      	cmp	r2, #0
 800e680:	d1f0      	bne.n	800e664 <quorem+0xf0>
 800e682:	3c01      	subs	r4, #1
 800e684:	e7eb      	b.n	800e65e <quorem+0xea>
 800e686:	2000      	movs	r0, #0
 800e688:	e7ee      	b.n	800e668 <quorem+0xf4>
 800e68a:	0000      	movs	r0, r0
 800e68c:	0000      	movs	r0, r0
	...

0800e690 <_dtoa_r>:
 800e690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e694:	ec59 8b10 	vmov	r8, r9, d0
 800e698:	b095      	sub	sp, #84	; 0x54
 800e69a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e69c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800e69e:	9107      	str	r1, [sp, #28]
 800e6a0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e6a4:	4606      	mov	r6, r0
 800e6a6:	9209      	str	r2, [sp, #36]	; 0x24
 800e6a8:	9310      	str	r3, [sp, #64]	; 0x40
 800e6aa:	b975      	cbnz	r5, 800e6ca <_dtoa_r+0x3a>
 800e6ac:	2010      	movs	r0, #16
 800e6ae:	f001 f8e5 	bl	800f87c <malloc>
 800e6b2:	4602      	mov	r2, r0
 800e6b4:	6270      	str	r0, [r6, #36]	; 0x24
 800e6b6:	b920      	cbnz	r0, 800e6c2 <_dtoa_r+0x32>
 800e6b8:	4bab      	ldr	r3, [pc, #684]	; (800e968 <_dtoa_r+0x2d8>)
 800e6ba:	21ea      	movs	r1, #234	; 0xea
 800e6bc:	48ab      	ldr	r0, [pc, #684]	; (800e96c <_dtoa_r+0x2dc>)
 800e6be:	f002 f803 	bl	80106c8 <__assert_func>
 800e6c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e6c6:	6005      	str	r5, [r0, #0]
 800e6c8:	60c5      	str	r5, [r0, #12]
 800e6ca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e6cc:	6819      	ldr	r1, [r3, #0]
 800e6ce:	b151      	cbz	r1, 800e6e6 <_dtoa_r+0x56>
 800e6d0:	685a      	ldr	r2, [r3, #4]
 800e6d2:	604a      	str	r2, [r1, #4]
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	4093      	lsls	r3, r2
 800e6d8:	608b      	str	r3, [r1, #8]
 800e6da:	4630      	mov	r0, r6
 800e6dc:	f001 f928 	bl	800f930 <_Bfree>
 800e6e0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	601a      	str	r2, [r3, #0]
 800e6e6:	f1b9 0300 	subs.w	r3, r9, #0
 800e6ea:	bfbb      	ittet	lt
 800e6ec:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e6f0:	9303      	strlt	r3, [sp, #12]
 800e6f2:	2300      	movge	r3, #0
 800e6f4:	2201      	movlt	r2, #1
 800e6f6:	bfac      	ite	ge
 800e6f8:	6023      	strge	r3, [r4, #0]
 800e6fa:	6022      	strlt	r2, [r4, #0]
 800e6fc:	4b9c      	ldr	r3, [pc, #624]	; (800e970 <_dtoa_r+0x2e0>)
 800e6fe:	9c03      	ldr	r4, [sp, #12]
 800e700:	43a3      	bics	r3, r4
 800e702:	d11a      	bne.n	800e73a <_dtoa_r+0xaa>
 800e704:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e706:	f242 730f 	movw	r3, #9999	; 0x270f
 800e70a:	6013      	str	r3, [r2, #0]
 800e70c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800e710:	ea53 0308 	orrs.w	r3, r3, r8
 800e714:	f000 8512 	beq.w	800f13c <_dtoa_r+0xaac>
 800e718:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e71a:	b953      	cbnz	r3, 800e732 <_dtoa_r+0xa2>
 800e71c:	4b95      	ldr	r3, [pc, #596]	; (800e974 <_dtoa_r+0x2e4>)
 800e71e:	e01f      	b.n	800e760 <_dtoa_r+0xd0>
 800e720:	4b95      	ldr	r3, [pc, #596]	; (800e978 <_dtoa_r+0x2e8>)
 800e722:	9300      	str	r3, [sp, #0]
 800e724:	3308      	adds	r3, #8
 800e726:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e728:	6013      	str	r3, [r2, #0]
 800e72a:	9800      	ldr	r0, [sp, #0]
 800e72c:	b015      	add	sp, #84	; 0x54
 800e72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e732:	4b90      	ldr	r3, [pc, #576]	; (800e974 <_dtoa_r+0x2e4>)
 800e734:	9300      	str	r3, [sp, #0]
 800e736:	3303      	adds	r3, #3
 800e738:	e7f5      	b.n	800e726 <_dtoa_r+0x96>
 800e73a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e73e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e746:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800e74a:	d10b      	bne.n	800e764 <_dtoa_r+0xd4>
 800e74c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e74e:	2301      	movs	r3, #1
 800e750:	6013      	str	r3, [r2, #0]
 800e752:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e754:	2b00      	cmp	r3, #0
 800e756:	f000 84ee 	beq.w	800f136 <_dtoa_r+0xaa6>
 800e75a:	4888      	ldr	r0, [pc, #544]	; (800e97c <_dtoa_r+0x2ec>)
 800e75c:	6018      	str	r0, [r3, #0]
 800e75e:	1e43      	subs	r3, r0, #1
 800e760:	9300      	str	r3, [sp, #0]
 800e762:	e7e2      	b.n	800e72a <_dtoa_r+0x9a>
 800e764:	a913      	add	r1, sp, #76	; 0x4c
 800e766:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e76a:	aa12      	add	r2, sp, #72	; 0x48
 800e76c:	4630      	mov	r0, r6
 800e76e:	f001 fc87 	bl	8010080 <__d2b>
 800e772:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800e776:	4605      	mov	r5, r0
 800e778:	9812      	ldr	r0, [sp, #72]	; 0x48
 800e77a:	2900      	cmp	r1, #0
 800e77c:	d047      	beq.n	800e80e <_dtoa_r+0x17e>
 800e77e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800e780:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e784:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e788:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800e78c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e790:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e794:	2400      	movs	r4, #0
 800e796:	ec43 2b16 	vmov	d6, r2, r3
 800e79a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800e79e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800e950 <_dtoa_r+0x2c0>
 800e7a2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e7a6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800e958 <_dtoa_r+0x2c8>
 800e7aa:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e7ae:	eeb0 7b46 	vmov.f64	d7, d6
 800e7b2:	ee06 1a90 	vmov	s13, r1
 800e7b6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800e7ba:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800e960 <_dtoa_r+0x2d0>
 800e7be:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e7c2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800e7c6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7ce:	ee16 ba90 	vmov	fp, s13
 800e7d2:	9411      	str	r4, [sp, #68]	; 0x44
 800e7d4:	d508      	bpl.n	800e7e8 <_dtoa_r+0x158>
 800e7d6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800e7da:	eeb4 6b47 	vcmp.f64	d6, d7
 800e7de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7e2:	bf18      	it	ne
 800e7e4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800e7e8:	f1bb 0f16 	cmp.w	fp, #22
 800e7ec:	d832      	bhi.n	800e854 <_dtoa_r+0x1c4>
 800e7ee:	4b64      	ldr	r3, [pc, #400]	; (800e980 <_dtoa_r+0x2f0>)
 800e7f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e7f4:	ed93 7b00 	vldr	d7, [r3]
 800e7f8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800e7fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e804:	d501      	bpl.n	800e80a <_dtoa_r+0x17a>
 800e806:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e80a:	2300      	movs	r3, #0
 800e80c:	e023      	b.n	800e856 <_dtoa_r+0x1c6>
 800e80e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800e810:	4401      	add	r1, r0
 800e812:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800e816:	2b20      	cmp	r3, #32
 800e818:	bfc3      	ittte	gt
 800e81a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e81e:	fa04 f303 	lslgt.w	r3, r4, r3
 800e822:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800e826:	f1c3 0320 	rsble	r3, r3, #32
 800e82a:	bfc6      	itte	gt
 800e82c:	fa28 f804 	lsrgt.w	r8, r8, r4
 800e830:	ea43 0308 	orrgt.w	r3, r3, r8
 800e834:	fa08 f303 	lslle.w	r3, r8, r3
 800e838:	ee07 3a90 	vmov	s15, r3
 800e83c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e840:	3901      	subs	r1, #1
 800e842:	ed8d 7b00 	vstr	d7, [sp]
 800e846:	9c01      	ldr	r4, [sp, #4]
 800e848:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e84c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800e850:	2401      	movs	r4, #1
 800e852:	e7a0      	b.n	800e796 <_dtoa_r+0x106>
 800e854:	2301      	movs	r3, #1
 800e856:	930f      	str	r3, [sp, #60]	; 0x3c
 800e858:	1a43      	subs	r3, r0, r1
 800e85a:	1e5a      	subs	r2, r3, #1
 800e85c:	bf45      	ittet	mi
 800e85e:	f1c3 0301 	rsbmi	r3, r3, #1
 800e862:	9305      	strmi	r3, [sp, #20]
 800e864:	2300      	movpl	r3, #0
 800e866:	2300      	movmi	r3, #0
 800e868:	9206      	str	r2, [sp, #24]
 800e86a:	bf54      	ite	pl
 800e86c:	9305      	strpl	r3, [sp, #20]
 800e86e:	9306      	strmi	r3, [sp, #24]
 800e870:	f1bb 0f00 	cmp.w	fp, #0
 800e874:	db18      	blt.n	800e8a8 <_dtoa_r+0x218>
 800e876:	9b06      	ldr	r3, [sp, #24]
 800e878:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800e87c:	445b      	add	r3, fp
 800e87e:	9306      	str	r3, [sp, #24]
 800e880:	2300      	movs	r3, #0
 800e882:	9a07      	ldr	r2, [sp, #28]
 800e884:	2a09      	cmp	r2, #9
 800e886:	d849      	bhi.n	800e91c <_dtoa_r+0x28c>
 800e888:	2a05      	cmp	r2, #5
 800e88a:	bfc4      	itt	gt
 800e88c:	3a04      	subgt	r2, #4
 800e88e:	9207      	strgt	r2, [sp, #28]
 800e890:	9a07      	ldr	r2, [sp, #28]
 800e892:	f1a2 0202 	sub.w	r2, r2, #2
 800e896:	bfcc      	ite	gt
 800e898:	2400      	movgt	r4, #0
 800e89a:	2401      	movle	r4, #1
 800e89c:	2a03      	cmp	r2, #3
 800e89e:	d848      	bhi.n	800e932 <_dtoa_r+0x2a2>
 800e8a0:	e8df f002 	tbb	[pc, r2]
 800e8a4:	3a2c2e0b 	.word	0x3a2c2e0b
 800e8a8:	9b05      	ldr	r3, [sp, #20]
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	eba3 030b 	sub.w	r3, r3, fp
 800e8b0:	9305      	str	r3, [sp, #20]
 800e8b2:	920e      	str	r2, [sp, #56]	; 0x38
 800e8b4:	f1cb 0300 	rsb	r3, fp, #0
 800e8b8:	e7e3      	b.n	800e882 <_dtoa_r+0x1f2>
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	9208      	str	r2, [sp, #32]
 800e8be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e8c0:	2a00      	cmp	r2, #0
 800e8c2:	dc39      	bgt.n	800e938 <_dtoa_r+0x2a8>
 800e8c4:	f04f 0a01 	mov.w	sl, #1
 800e8c8:	46d1      	mov	r9, sl
 800e8ca:	4652      	mov	r2, sl
 800e8cc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e8d0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800e8d2:	2100      	movs	r1, #0
 800e8d4:	6079      	str	r1, [r7, #4]
 800e8d6:	2004      	movs	r0, #4
 800e8d8:	f100 0c14 	add.w	ip, r0, #20
 800e8dc:	4594      	cmp	ip, r2
 800e8de:	6879      	ldr	r1, [r7, #4]
 800e8e0:	d92f      	bls.n	800e942 <_dtoa_r+0x2b2>
 800e8e2:	4630      	mov	r0, r6
 800e8e4:	930c      	str	r3, [sp, #48]	; 0x30
 800e8e6:	f000 ffe3 	bl	800f8b0 <_Balloc>
 800e8ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e8ec:	9000      	str	r0, [sp, #0]
 800e8ee:	4602      	mov	r2, r0
 800e8f0:	2800      	cmp	r0, #0
 800e8f2:	d149      	bne.n	800e988 <_dtoa_r+0x2f8>
 800e8f4:	4b23      	ldr	r3, [pc, #140]	; (800e984 <_dtoa_r+0x2f4>)
 800e8f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e8fa:	e6df      	b.n	800e6bc <_dtoa_r+0x2c>
 800e8fc:	2201      	movs	r2, #1
 800e8fe:	e7dd      	b.n	800e8bc <_dtoa_r+0x22c>
 800e900:	2200      	movs	r2, #0
 800e902:	9208      	str	r2, [sp, #32]
 800e904:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e906:	eb0b 0a02 	add.w	sl, fp, r2
 800e90a:	f10a 0901 	add.w	r9, sl, #1
 800e90e:	464a      	mov	r2, r9
 800e910:	2a01      	cmp	r2, #1
 800e912:	bfb8      	it	lt
 800e914:	2201      	movlt	r2, #1
 800e916:	e7db      	b.n	800e8d0 <_dtoa_r+0x240>
 800e918:	2201      	movs	r2, #1
 800e91a:	e7f2      	b.n	800e902 <_dtoa_r+0x272>
 800e91c:	2401      	movs	r4, #1
 800e91e:	2200      	movs	r2, #0
 800e920:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800e924:	f04f 3aff 	mov.w	sl, #4294967295
 800e928:	2100      	movs	r1, #0
 800e92a:	46d1      	mov	r9, sl
 800e92c:	2212      	movs	r2, #18
 800e92e:	9109      	str	r1, [sp, #36]	; 0x24
 800e930:	e7ce      	b.n	800e8d0 <_dtoa_r+0x240>
 800e932:	2201      	movs	r2, #1
 800e934:	9208      	str	r2, [sp, #32]
 800e936:	e7f5      	b.n	800e924 <_dtoa_r+0x294>
 800e938:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800e93c:	46d1      	mov	r9, sl
 800e93e:	4652      	mov	r2, sl
 800e940:	e7c6      	b.n	800e8d0 <_dtoa_r+0x240>
 800e942:	3101      	adds	r1, #1
 800e944:	6079      	str	r1, [r7, #4]
 800e946:	0040      	lsls	r0, r0, #1
 800e948:	e7c6      	b.n	800e8d8 <_dtoa_r+0x248>
 800e94a:	bf00      	nop
 800e94c:	f3af 8000 	nop.w
 800e950:	636f4361 	.word	0x636f4361
 800e954:	3fd287a7 	.word	0x3fd287a7
 800e958:	8b60c8b3 	.word	0x8b60c8b3
 800e95c:	3fc68a28 	.word	0x3fc68a28
 800e960:	509f79fb 	.word	0x509f79fb
 800e964:	3fd34413 	.word	0x3fd34413
 800e968:	080116eb 	.word	0x080116eb
 800e96c:	08011702 	.word	0x08011702
 800e970:	7ff00000 	.word	0x7ff00000
 800e974:	080116e7 	.word	0x080116e7
 800e978:	080116de 	.word	0x080116de
 800e97c:	0801153d 	.word	0x0801153d
 800e980:	08011878 	.word	0x08011878
 800e984:	08011761 	.word	0x08011761
 800e988:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800e98a:	9900      	ldr	r1, [sp, #0]
 800e98c:	6011      	str	r1, [r2, #0]
 800e98e:	f1b9 0f0e 	cmp.w	r9, #14
 800e992:	d872      	bhi.n	800ea7a <_dtoa_r+0x3ea>
 800e994:	2c00      	cmp	r4, #0
 800e996:	d070      	beq.n	800ea7a <_dtoa_r+0x3ea>
 800e998:	f1bb 0f00 	cmp.w	fp, #0
 800e99c:	f340 80a6 	ble.w	800eaec <_dtoa_r+0x45c>
 800e9a0:	49ca      	ldr	r1, [pc, #808]	; (800eccc <_dtoa_r+0x63c>)
 800e9a2:	f00b 020f 	and.w	r2, fp, #15
 800e9a6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800e9aa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e9ae:	ed92 7b00 	vldr	d7, [r2]
 800e9b2:	ea4f 112b 	mov.w	r1, fp, asr #4
 800e9b6:	f000 808d 	beq.w	800ead4 <_dtoa_r+0x444>
 800e9ba:	4ac5      	ldr	r2, [pc, #788]	; (800ecd0 <_dtoa_r+0x640>)
 800e9bc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800e9c0:	ed92 6b08 	vldr	d6, [r2, #32]
 800e9c4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800e9c8:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e9cc:	f001 010f 	and.w	r1, r1, #15
 800e9d0:	2203      	movs	r2, #3
 800e9d2:	48bf      	ldr	r0, [pc, #764]	; (800ecd0 <_dtoa_r+0x640>)
 800e9d4:	2900      	cmp	r1, #0
 800e9d6:	d17f      	bne.n	800ead8 <_dtoa_r+0x448>
 800e9d8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e9dc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e9e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e9e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e9e6:	2900      	cmp	r1, #0
 800e9e8:	f000 80b2 	beq.w	800eb50 <_dtoa_r+0x4c0>
 800e9ec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e9f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e9f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e9f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9fc:	f140 80a8 	bpl.w	800eb50 <_dtoa_r+0x4c0>
 800ea00:	f1b9 0f00 	cmp.w	r9, #0
 800ea04:	f000 80a4 	beq.w	800eb50 <_dtoa_r+0x4c0>
 800ea08:	f1ba 0f00 	cmp.w	sl, #0
 800ea0c:	dd31      	ble.n	800ea72 <_dtoa_r+0x3e2>
 800ea0e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800ea12:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ea16:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ea1a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ea1e:	3201      	adds	r2, #1
 800ea20:	4650      	mov	r0, sl
 800ea22:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ea26:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800ea2a:	ee07 2a90 	vmov	s15, r2
 800ea2e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ea32:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ea36:	ed8d 5b02 	vstr	d5, [sp, #8]
 800ea3a:	9c03      	ldr	r4, [sp, #12]
 800ea3c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ea40:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800ea44:	2800      	cmp	r0, #0
 800ea46:	f040 8086 	bne.w	800eb56 <_dtoa_r+0x4c6>
 800ea4a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ea4e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ea52:	ec42 1b17 	vmov	d7, r1, r2
 800ea56:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ea5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea5e:	f300 8272 	bgt.w	800ef46 <_dtoa_r+0x8b6>
 800ea62:	eeb1 7b47 	vneg.f64	d7, d7
 800ea66:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ea6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea6e:	f100 8267 	bmi.w	800ef40 <_dtoa_r+0x8b0>
 800ea72:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800ea76:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ea7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ea7c:	2a00      	cmp	r2, #0
 800ea7e:	f2c0 8129 	blt.w	800ecd4 <_dtoa_r+0x644>
 800ea82:	f1bb 0f0e 	cmp.w	fp, #14
 800ea86:	f300 8125 	bgt.w	800ecd4 <_dtoa_r+0x644>
 800ea8a:	4b90      	ldr	r3, [pc, #576]	; (800eccc <_dtoa_r+0x63c>)
 800ea8c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ea90:	ed93 6b00 	vldr	d6, [r3]
 800ea94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	f280 80c3 	bge.w	800ec22 <_dtoa_r+0x592>
 800ea9c:	f1b9 0f00 	cmp.w	r9, #0
 800eaa0:	f300 80bf 	bgt.w	800ec22 <_dtoa_r+0x592>
 800eaa4:	f040 824c 	bne.w	800ef40 <_dtoa_r+0x8b0>
 800eaa8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800eaac:	ee26 6b07 	vmul.f64	d6, d6, d7
 800eab0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eab4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800eab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eabc:	464c      	mov	r4, r9
 800eabe:	464f      	mov	r7, r9
 800eac0:	f280 8222 	bge.w	800ef08 <_dtoa_r+0x878>
 800eac4:	f8dd 8000 	ldr.w	r8, [sp]
 800eac8:	2331      	movs	r3, #49	; 0x31
 800eaca:	f808 3b01 	strb.w	r3, [r8], #1
 800eace:	f10b 0b01 	add.w	fp, fp, #1
 800ead2:	e21e      	b.n	800ef12 <_dtoa_r+0x882>
 800ead4:	2202      	movs	r2, #2
 800ead6:	e77c      	b.n	800e9d2 <_dtoa_r+0x342>
 800ead8:	07cc      	lsls	r4, r1, #31
 800eada:	d504      	bpl.n	800eae6 <_dtoa_r+0x456>
 800eadc:	ed90 6b00 	vldr	d6, [r0]
 800eae0:	3201      	adds	r2, #1
 800eae2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800eae6:	1049      	asrs	r1, r1, #1
 800eae8:	3008      	adds	r0, #8
 800eaea:	e773      	b.n	800e9d4 <_dtoa_r+0x344>
 800eaec:	d02e      	beq.n	800eb4c <_dtoa_r+0x4bc>
 800eaee:	f1cb 0100 	rsb	r1, fp, #0
 800eaf2:	4a76      	ldr	r2, [pc, #472]	; (800eccc <_dtoa_r+0x63c>)
 800eaf4:	f001 000f 	and.w	r0, r1, #15
 800eaf8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800eafc:	ed92 7b00 	vldr	d7, [r2]
 800eb00:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800eb04:	ee26 7b07 	vmul.f64	d7, d6, d7
 800eb08:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800eb0c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800eb10:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800eb14:	486e      	ldr	r0, [pc, #440]	; (800ecd0 <_dtoa_r+0x640>)
 800eb16:	1109      	asrs	r1, r1, #4
 800eb18:	2400      	movs	r4, #0
 800eb1a:	2202      	movs	r2, #2
 800eb1c:	b939      	cbnz	r1, 800eb2e <_dtoa_r+0x49e>
 800eb1e:	2c00      	cmp	r4, #0
 800eb20:	f43f af60 	beq.w	800e9e4 <_dtoa_r+0x354>
 800eb24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eb28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb2c:	e75a      	b.n	800e9e4 <_dtoa_r+0x354>
 800eb2e:	07cf      	lsls	r7, r1, #31
 800eb30:	d509      	bpl.n	800eb46 <_dtoa_r+0x4b6>
 800eb32:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800eb36:	ed90 7b00 	vldr	d7, [r0]
 800eb3a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800eb3e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800eb42:	3201      	adds	r2, #1
 800eb44:	2401      	movs	r4, #1
 800eb46:	1049      	asrs	r1, r1, #1
 800eb48:	3008      	adds	r0, #8
 800eb4a:	e7e7      	b.n	800eb1c <_dtoa_r+0x48c>
 800eb4c:	2202      	movs	r2, #2
 800eb4e:	e749      	b.n	800e9e4 <_dtoa_r+0x354>
 800eb50:	465f      	mov	r7, fp
 800eb52:	4648      	mov	r0, r9
 800eb54:	e765      	b.n	800ea22 <_dtoa_r+0x392>
 800eb56:	ec42 1b17 	vmov	d7, r1, r2
 800eb5a:	4a5c      	ldr	r2, [pc, #368]	; (800eccc <_dtoa_r+0x63c>)
 800eb5c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800eb60:	ed12 4b02 	vldr	d4, [r2, #-8]
 800eb64:	9a00      	ldr	r2, [sp, #0]
 800eb66:	1814      	adds	r4, r2, r0
 800eb68:	9a08      	ldr	r2, [sp, #32]
 800eb6a:	b352      	cbz	r2, 800ebc2 <_dtoa_r+0x532>
 800eb6c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800eb70:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800eb74:	f8dd 8000 	ldr.w	r8, [sp]
 800eb78:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800eb7c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800eb80:	ee35 7b47 	vsub.f64	d7, d5, d7
 800eb84:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800eb88:	ee14 2a90 	vmov	r2, s9
 800eb8c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800eb90:	3230      	adds	r2, #48	; 0x30
 800eb92:	ee36 6b45 	vsub.f64	d6, d6, d5
 800eb96:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800eb9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb9e:	f808 2b01 	strb.w	r2, [r8], #1
 800eba2:	d439      	bmi.n	800ec18 <_dtoa_r+0x588>
 800eba4:	ee32 5b46 	vsub.f64	d5, d2, d6
 800eba8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ebac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebb0:	d472      	bmi.n	800ec98 <_dtoa_r+0x608>
 800ebb2:	45a0      	cmp	r8, r4
 800ebb4:	f43f af5d 	beq.w	800ea72 <_dtoa_r+0x3e2>
 800ebb8:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ebbc:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ebc0:	e7e0      	b.n	800eb84 <_dtoa_r+0x4f4>
 800ebc2:	f8dd 8000 	ldr.w	r8, [sp]
 800ebc6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ebca:	4621      	mov	r1, r4
 800ebcc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ebd0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ebd4:	ee14 2a90 	vmov	r2, s9
 800ebd8:	3230      	adds	r2, #48	; 0x30
 800ebda:	f808 2b01 	strb.w	r2, [r8], #1
 800ebde:	45a0      	cmp	r8, r4
 800ebe0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ebe4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ebe8:	d118      	bne.n	800ec1c <_dtoa_r+0x58c>
 800ebea:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ebee:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ebf2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ebf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebfa:	dc4d      	bgt.n	800ec98 <_dtoa_r+0x608>
 800ebfc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ec00:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ec04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec08:	f57f af33 	bpl.w	800ea72 <_dtoa_r+0x3e2>
 800ec0c:	4688      	mov	r8, r1
 800ec0e:	3901      	subs	r1, #1
 800ec10:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800ec14:	2b30      	cmp	r3, #48	; 0x30
 800ec16:	d0f9      	beq.n	800ec0c <_dtoa_r+0x57c>
 800ec18:	46bb      	mov	fp, r7
 800ec1a:	e02a      	b.n	800ec72 <_dtoa_r+0x5e2>
 800ec1c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ec20:	e7d6      	b.n	800ebd0 <_dtoa_r+0x540>
 800ec22:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ec26:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800ec2a:	f8dd 8000 	ldr.w	r8, [sp]
 800ec2e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ec32:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ec36:	ee15 3a10 	vmov	r3, s10
 800ec3a:	3330      	adds	r3, #48	; 0x30
 800ec3c:	f808 3b01 	strb.w	r3, [r8], #1
 800ec40:	9b00      	ldr	r3, [sp, #0]
 800ec42:	eba8 0303 	sub.w	r3, r8, r3
 800ec46:	4599      	cmp	r9, r3
 800ec48:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ec4c:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ec50:	d133      	bne.n	800ecba <_dtoa_r+0x62a>
 800ec52:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ec56:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ec5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec5e:	dc1a      	bgt.n	800ec96 <_dtoa_r+0x606>
 800ec60:	eeb4 7b46 	vcmp.f64	d7, d6
 800ec64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec68:	d103      	bne.n	800ec72 <_dtoa_r+0x5e2>
 800ec6a:	ee15 3a10 	vmov	r3, s10
 800ec6e:	07d9      	lsls	r1, r3, #31
 800ec70:	d411      	bmi.n	800ec96 <_dtoa_r+0x606>
 800ec72:	4629      	mov	r1, r5
 800ec74:	4630      	mov	r0, r6
 800ec76:	f000 fe5b 	bl	800f930 <_Bfree>
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ec7e:	f888 3000 	strb.w	r3, [r8]
 800ec82:	f10b 0301 	add.w	r3, fp, #1
 800ec86:	6013      	str	r3, [r2, #0]
 800ec88:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	f43f ad4d 	beq.w	800e72a <_dtoa_r+0x9a>
 800ec90:	f8c3 8000 	str.w	r8, [r3]
 800ec94:	e549      	b.n	800e72a <_dtoa_r+0x9a>
 800ec96:	465f      	mov	r7, fp
 800ec98:	4643      	mov	r3, r8
 800ec9a:	4698      	mov	r8, r3
 800ec9c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eca0:	2a39      	cmp	r2, #57	; 0x39
 800eca2:	d106      	bne.n	800ecb2 <_dtoa_r+0x622>
 800eca4:	9a00      	ldr	r2, [sp, #0]
 800eca6:	429a      	cmp	r2, r3
 800eca8:	d1f7      	bne.n	800ec9a <_dtoa_r+0x60a>
 800ecaa:	9900      	ldr	r1, [sp, #0]
 800ecac:	2230      	movs	r2, #48	; 0x30
 800ecae:	3701      	adds	r7, #1
 800ecb0:	700a      	strb	r2, [r1, #0]
 800ecb2:	781a      	ldrb	r2, [r3, #0]
 800ecb4:	3201      	adds	r2, #1
 800ecb6:	701a      	strb	r2, [r3, #0]
 800ecb8:	e7ae      	b.n	800ec18 <_dtoa_r+0x588>
 800ecba:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ecbe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ecc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecc6:	d1b2      	bne.n	800ec2e <_dtoa_r+0x59e>
 800ecc8:	e7d3      	b.n	800ec72 <_dtoa_r+0x5e2>
 800ecca:	bf00      	nop
 800eccc:	08011878 	.word	0x08011878
 800ecd0:	08011850 	.word	0x08011850
 800ecd4:	9908      	ldr	r1, [sp, #32]
 800ecd6:	2900      	cmp	r1, #0
 800ecd8:	f000 80d1 	beq.w	800ee7e <_dtoa_r+0x7ee>
 800ecdc:	9907      	ldr	r1, [sp, #28]
 800ecde:	2901      	cmp	r1, #1
 800ece0:	f300 80b4 	bgt.w	800ee4c <_dtoa_r+0x7bc>
 800ece4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ece6:	2900      	cmp	r1, #0
 800ece8:	f000 80ac 	beq.w	800ee44 <_dtoa_r+0x7b4>
 800ecec:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ecf0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800ecf4:	461c      	mov	r4, r3
 800ecf6:	930a      	str	r3, [sp, #40]	; 0x28
 800ecf8:	9b05      	ldr	r3, [sp, #20]
 800ecfa:	4413      	add	r3, r2
 800ecfc:	9305      	str	r3, [sp, #20]
 800ecfe:	9b06      	ldr	r3, [sp, #24]
 800ed00:	2101      	movs	r1, #1
 800ed02:	4413      	add	r3, r2
 800ed04:	4630      	mov	r0, r6
 800ed06:	9306      	str	r3, [sp, #24]
 800ed08:	f000 ff18 	bl	800fb3c <__i2b>
 800ed0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed0e:	4607      	mov	r7, r0
 800ed10:	f1b8 0f00 	cmp.w	r8, #0
 800ed14:	dd0d      	ble.n	800ed32 <_dtoa_r+0x6a2>
 800ed16:	9a06      	ldr	r2, [sp, #24]
 800ed18:	2a00      	cmp	r2, #0
 800ed1a:	dd0a      	ble.n	800ed32 <_dtoa_r+0x6a2>
 800ed1c:	4542      	cmp	r2, r8
 800ed1e:	9905      	ldr	r1, [sp, #20]
 800ed20:	bfa8      	it	ge
 800ed22:	4642      	movge	r2, r8
 800ed24:	1a89      	subs	r1, r1, r2
 800ed26:	9105      	str	r1, [sp, #20]
 800ed28:	9906      	ldr	r1, [sp, #24]
 800ed2a:	eba8 0802 	sub.w	r8, r8, r2
 800ed2e:	1a8a      	subs	r2, r1, r2
 800ed30:	9206      	str	r2, [sp, #24]
 800ed32:	b303      	cbz	r3, 800ed76 <_dtoa_r+0x6e6>
 800ed34:	9a08      	ldr	r2, [sp, #32]
 800ed36:	2a00      	cmp	r2, #0
 800ed38:	f000 80a6 	beq.w	800ee88 <_dtoa_r+0x7f8>
 800ed3c:	2c00      	cmp	r4, #0
 800ed3e:	dd13      	ble.n	800ed68 <_dtoa_r+0x6d8>
 800ed40:	4639      	mov	r1, r7
 800ed42:	4622      	mov	r2, r4
 800ed44:	4630      	mov	r0, r6
 800ed46:	930c      	str	r3, [sp, #48]	; 0x30
 800ed48:	f000 ffb4 	bl	800fcb4 <__pow5mult>
 800ed4c:	462a      	mov	r2, r5
 800ed4e:	4601      	mov	r1, r0
 800ed50:	4607      	mov	r7, r0
 800ed52:	4630      	mov	r0, r6
 800ed54:	f000 ff08 	bl	800fb68 <__multiply>
 800ed58:	4629      	mov	r1, r5
 800ed5a:	900a      	str	r0, [sp, #40]	; 0x28
 800ed5c:	4630      	mov	r0, r6
 800ed5e:	f000 fde7 	bl	800f930 <_Bfree>
 800ed62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed66:	4615      	mov	r5, r2
 800ed68:	1b1a      	subs	r2, r3, r4
 800ed6a:	d004      	beq.n	800ed76 <_dtoa_r+0x6e6>
 800ed6c:	4629      	mov	r1, r5
 800ed6e:	4630      	mov	r0, r6
 800ed70:	f000 ffa0 	bl	800fcb4 <__pow5mult>
 800ed74:	4605      	mov	r5, r0
 800ed76:	2101      	movs	r1, #1
 800ed78:	4630      	mov	r0, r6
 800ed7a:	f000 fedf 	bl	800fb3c <__i2b>
 800ed7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	4604      	mov	r4, r0
 800ed84:	f340 8082 	ble.w	800ee8c <_dtoa_r+0x7fc>
 800ed88:	461a      	mov	r2, r3
 800ed8a:	4601      	mov	r1, r0
 800ed8c:	4630      	mov	r0, r6
 800ed8e:	f000 ff91 	bl	800fcb4 <__pow5mult>
 800ed92:	9b07      	ldr	r3, [sp, #28]
 800ed94:	2b01      	cmp	r3, #1
 800ed96:	4604      	mov	r4, r0
 800ed98:	dd7b      	ble.n	800ee92 <_dtoa_r+0x802>
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	930a      	str	r3, [sp, #40]	; 0x28
 800ed9e:	6922      	ldr	r2, [r4, #16]
 800eda0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800eda4:	6910      	ldr	r0, [r2, #16]
 800eda6:	f000 fe79 	bl	800fa9c <__hi0bits>
 800edaa:	f1c0 0020 	rsb	r0, r0, #32
 800edae:	9b06      	ldr	r3, [sp, #24]
 800edb0:	4418      	add	r0, r3
 800edb2:	f010 001f 	ands.w	r0, r0, #31
 800edb6:	f000 808d 	beq.w	800eed4 <_dtoa_r+0x844>
 800edba:	f1c0 0220 	rsb	r2, r0, #32
 800edbe:	2a04      	cmp	r2, #4
 800edc0:	f340 8086 	ble.w	800eed0 <_dtoa_r+0x840>
 800edc4:	f1c0 001c 	rsb	r0, r0, #28
 800edc8:	9b05      	ldr	r3, [sp, #20]
 800edca:	4403      	add	r3, r0
 800edcc:	9305      	str	r3, [sp, #20]
 800edce:	9b06      	ldr	r3, [sp, #24]
 800edd0:	4403      	add	r3, r0
 800edd2:	4480      	add	r8, r0
 800edd4:	9306      	str	r3, [sp, #24]
 800edd6:	9b05      	ldr	r3, [sp, #20]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	dd05      	ble.n	800ede8 <_dtoa_r+0x758>
 800eddc:	4629      	mov	r1, r5
 800edde:	461a      	mov	r2, r3
 800ede0:	4630      	mov	r0, r6
 800ede2:	f000 ffc1 	bl	800fd68 <__lshift>
 800ede6:	4605      	mov	r5, r0
 800ede8:	9b06      	ldr	r3, [sp, #24]
 800edea:	2b00      	cmp	r3, #0
 800edec:	dd05      	ble.n	800edfa <_dtoa_r+0x76a>
 800edee:	4621      	mov	r1, r4
 800edf0:	461a      	mov	r2, r3
 800edf2:	4630      	mov	r0, r6
 800edf4:	f000 ffb8 	bl	800fd68 <__lshift>
 800edf8:	4604      	mov	r4, r0
 800edfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d06b      	beq.n	800eed8 <_dtoa_r+0x848>
 800ee00:	4621      	mov	r1, r4
 800ee02:	4628      	mov	r0, r5
 800ee04:	f001 f81c 	bl	800fe40 <__mcmp>
 800ee08:	2800      	cmp	r0, #0
 800ee0a:	da65      	bge.n	800eed8 <_dtoa_r+0x848>
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	4629      	mov	r1, r5
 800ee10:	220a      	movs	r2, #10
 800ee12:	4630      	mov	r0, r6
 800ee14:	f000 fdae 	bl	800f974 <__multadd>
 800ee18:	9b08      	ldr	r3, [sp, #32]
 800ee1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ee1e:	4605      	mov	r5, r0
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	f000 8192 	beq.w	800f14a <_dtoa_r+0xaba>
 800ee26:	4639      	mov	r1, r7
 800ee28:	2300      	movs	r3, #0
 800ee2a:	220a      	movs	r2, #10
 800ee2c:	4630      	mov	r0, r6
 800ee2e:	f000 fda1 	bl	800f974 <__multadd>
 800ee32:	f1ba 0f00 	cmp.w	sl, #0
 800ee36:	4607      	mov	r7, r0
 800ee38:	f300 808e 	bgt.w	800ef58 <_dtoa_r+0x8c8>
 800ee3c:	9b07      	ldr	r3, [sp, #28]
 800ee3e:	2b02      	cmp	r3, #2
 800ee40:	dc51      	bgt.n	800eee6 <_dtoa_r+0x856>
 800ee42:	e089      	b.n	800ef58 <_dtoa_r+0x8c8>
 800ee44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ee46:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ee4a:	e751      	b.n	800ecf0 <_dtoa_r+0x660>
 800ee4c:	f109 34ff 	add.w	r4, r9, #4294967295
 800ee50:	42a3      	cmp	r3, r4
 800ee52:	bfbf      	itttt	lt
 800ee54:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800ee56:	1ae3      	sublt	r3, r4, r3
 800ee58:	18d2      	addlt	r2, r2, r3
 800ee5a:	4613      	movlt	r3, r2
 800ee5c:	bfb7      	itett	lt
 800ee5e:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ee60:	1b1c      	subge	r4, r3, r4
 800ee62:	4623      	movlt	r3, r4
 800ee64:	2400      	movlt	r4, #0
 800ee66:	f1b9 0f00 	cmp.w	r9, #0
 800ee6a:	bfb5      	itete	lt
 800ee6c:	9a05      	ldrlt	r2, [sp, #20]
 800ee6e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800ee72:	eba2 0809 	sublt.w	r8, r2, r9
 800ee76:	464a      	movge	r2, r9
 800ee78:	bfb8      	it	lt
 800ee7a:	2200      	movlt	r2, #0
 800ee7c:	e73b      	b.n	800ecf6 <_dtoa_r+0x666>
 800ee7e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800ee82:	9f08      	ldr	r7, [sp, #32]
 800ee84:	461c      	mov	r4, r3
 800ee86:	e743      	b.n	800ed10 <_dtoa_r+0x680>
 800ee88:	461a      	mov	r2, r3
 800ee8a:	e76f      	b.n	800ed6c <_dtoa_r+0x6dc>
 800ee8c:	9b07      	ldr	r3, [sp, #28]
 800ee8e:	2b01      	cmp	r3, #1
 800ee90:	dc18      	bgt.n	800eec4 <_dtoa_r+0x834>
 800ee92:	9b02      	ldr	r3, [sp, #8]
 800ee94:	b9b3      	cbnz	r3, 800eec4 <_dtoa_r+0x834>
 800ee96:	9b03      	ldr	r3, [sp, #12]
 800ee98:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800ee9c:	b9a2      	cbnz	r2, 800eec8 <_dtoa_r+0x838>
 800ee9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800eea2:	0d12      	lsrs	r2, r2, #20
 800eea4:	0512      	lsls	r2, r2, #20
 800eea6:	b18a      	cbz	r2, 800eecc <_dtoa_r+0x83c>
 800eea8:	9b05      	ldr	r3, [sp, #20]
 800eeaa:	3301      	adds	r3, #1
 800eeac:	9305      	str	r3, [sp, #20]
 800eeae:	9b06      	ldr	r3, [sp, #24]
 800eeb0:	3301      	adds	r3, #1
 800eeb2:	9306      	str	r3, [sp, #24]
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	930a      	str	r3, [sp, #40]	; 0x28
 800eeb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	f47f af6f 	bne.w	800ed9e <_dtoa_r+0x70e>
 800eec0:	2001      	movs	r0, #1
 800eec2:	e774      	b.n	800edae <_dtoa_r+0x71e>
 800eec4:	2300      	movs	r3, #0
 800eec6:	e7f6      	b.n	800eeb6 <_dtoa_r+0x826>
 800eec8:	9b02      	ldr	r3, [sp, #8]
 800eeca:	e7f4      	b.n	800eeb6 <_dtoa_r+0x826>
 800eecc:	920a      	str	r2, [sp, #40]	; 0x28
 800eece:	e7f3      	b.n	800eeb8 <_dtoa_r+0x828>
 800eed0:	d081      	beq.n	800edd6 <_dtoa_r+0x746>
 800eed2:	4610      	mov	r0, r2
 800eed4:	301c      	adds	r0, #28
 800eed6:	e777      	b.n	800edc8 <_dtoa_r+0x738>
 800eed8:	f1b9 0f00 	cmp.w	r9, #0
 800eedc:	dc37      	bgt.n	800ef4e <_dtoa_r+0x8be>
 800eede:	9b07      	ldr	r3, [sp, #28]
 800eee0:	2b02      	cmp	r3, #2
 800eee2:	dd34      	ble.n	800ef4e <_dtoa_r+0x8be>
 800eee4:	46ca      	mov	sl, r9
 800eee6:	f1ba 0f00 	cmp.w	sl, #0
 800eeea:	d10d      	bne.n	800ef08 <_dtoa_r+0x878>
 800eeec:	4621      	mov	r1, r4
 800eeee:	4653      	mov	r3, sl
 800eef0:	2205      	movs	r2, #5
 800eef2:	4630      	mov	r0, r6
 800eef4:	f000 fd3e 	bl	800f974 <__multadd>
 800eef8:	4601      	mov	r1, r0
 800eefa:	4604      	mov	r4, r0
 800eefc:	4628      	mov	r0, r5
 800eefe:	f000 ff9f 	bl	800fe40 <__mcmp>
 800ef02:	2800      	cmp	r0, #0
 800ef04:	f73f adde 	bgt.w	800eac4 <_dtoa_r+0x434>
 800ef08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef0a:	f8dd 8000 	ldr.w	r8, [sp]
 800ef0e:	ea6f 0b03 	mvn.w	fp, r3
 800ef12:	f04f 0900 	mov.w	r9, #0
 800ef16:	4621      	mov	r1, r4
 800ef18:	4630      	mov	r0, r6
 800ef1a:	f000 fd09 	bl	800f930 <_Bfree>
 800ef1e:	2f00      	cmp	r7, #0
 800ef20:	f43f aea7 	beq.w	800ec72 <_dtoa_r+0x5e2>
 800ef24:	f1b9 0f00 	cmp.w	r9, #0
 800ef28:	d005      	beq.n	800ef36 <_dtoa_r+0x8a6>
 800ef2a:	45b9      	cmp	r9, r7
 800ef2c:	d003      	beq.n	800ef36 <_dtoa_r+0x8a6>
 800ef2e:	4649      	mov	r1, r9
 800ef30:	4630      	mov	r0, r6
 800ef32:	f000 fcfd 	bl	800f930 <_Bfree>
 800ef36:	4639      	mov	r1, r7
 800ef38:	4630      	mov	r0, r6
 800ef3a:	f000 fcf9 	bl	800f930 <_Bfree>
 800ef3e:	e698      	b.n	800ec72 <_dtoa_r+0x5e2>
 800ef40:	2400      	movs	r4, #0
 800ef42:	4627      	mov	r7, r4
 800ef44:	e7e0      	b.n	800ef08 <_dtoa_r+0x878>
 800ef46:	46bb      	mov	fp, r7
 800ef48:	4604      	mov	r4, r0
 800ef4a:	4607      	mov	r7, r0
 800ef4c:	e5ba      	b.n	800eac4 <_dtoa_r+0x434>
 800ef4e:	9b08      	ldr	r3, [sp, #32]
 800ef50:	46ca      	mov	sl, r9
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	f000 8100 	beq.w	800f158 <_dtoa_r+0xac8>
 800ef58:	f1b8 0f00 	cmp.w	r8, #0
 800ef5c:	dd05      	ble.n	800ef6a <_dtoa_r+0x8da>
 800ef5e:	4639      	mov	r1, r7
 800ef60:	4642      	mov	r2, r8
 800ef62:	4630      	mov	r0, r6
 800ef64:	f000 ff00 	bl	800fd68 <__lshift>
 800ef68:	4607      	mov	r7, r0
 800ef6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d05d      	beq.n	800f02c <_dtoa_r+0x99c>
 800ef70:	6879      	ldr	r1, [r7, #4]
 800ef72:	4630      	mov	r0, r6
 800ef74:	f000 fc9c 	bl	800f8b0 <_Balloc>
 800ef78:	4680      	mov	r8, r0
 800ef7a:	b928      	cbnz	r0, 800ef88 <_dtoa_r+0x8f8>
 800ef7c:	4b82      	ldr	r3, [pc, #520]	; (800f188 <_dtoa_r+0xaf8>)
 800ef7e:	4602      	mov	r2, r0
 800ef80:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ef84:	f7ff bb9a 	b.w	800e6bc <_dtoa_r+0x2c>
 800ef88:	693a      	ldr	r2, [r7, #16]
 800ef8a:	3202      	adds	r2, #2
 800ef8c:	0092      	lsls	r2, r2, #2
 800ef8e:	f107 010c 	add.w	r1, r7, #12
 800ef92:	300c      	adds	r0, #12
 800ef94:	f7fd fda2 	bl	800cadc <memcpy>
 800ef98:	2201      	movs	r2, #1
 800ef9a:	4641      	mov	r1, r8
 800ef9c:	4630      	mov	r0, r6
 800ef9e:	f000 fee3 	bl	800fd68 <__lshift>
 800efa2:	9b00      	ldr	r3, [sp, #0]
 800efa4:	3301      	adds	r3, #1
 800efa6:	9305      	str	r3, [sp, #20]
 800efa8:	9b00      	ldr	r3, [sp, #0]
 800efaa:	4453      	add	r3, sl
 800efac:	9309      	str	r3, [sp, #36]	; 0x24
 800efae:	9b02      	ldr	r3, [sp, #8]
 800efb0:	f003 0301 	and.w	r3, r3, #1
 800efb4:	46b9      	mov	r9, r7
 800efb6:	9308      	str	r3, [sp, #32]
 800efb8:	4607      	mov	r7, r0
 800efba:	9b05      	ldr	r3, [sp, #20]
 800efbc:	4621      	mov	r1, r4
 800efbe:	3b01      	subs	r3, #1
 800efc0:	4628      	mov	r0, r5
 800efc2:	9302      	str	r3, [sp, #8]
 800efc4:	f7ff fad6 	bl	800e574 <quorem>
 800efc8:	4603      	mov	r3, r0
 800efca:	3330      	adds	r3, #48	; 0x30
 800efcc:	9006      	str	r0, [sp, #24]
 800efce:	4649      	mov	r1, r9
 800efd0:	4628      	mov	r0, r5
 800efd2:	930a      	str	r3, [sp, #40]	; 0x28
 800efd4:	f000 ff34 	bl	800fe40 <__mcmp>
 800efd8:	463a      	mov	r2, r7
 800efda:	4682      	mov	sl, r0
 800efdc:	4621      	mov	r1, r4
 800efde:	4630      	mov	r0, r6
 800efe0:	f000 ff4a 	bl	800fe78 <__mdiff>
 800efe4:	68c2      	ldr	r2, [r0, #12]
 800efe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efe8:	4680      	mov	r8, r0
 800efea:	bb0a      	cbnz	r2, 800f030 <_dtoa_r+0x9a0>
 800efec:	4601      	mov	r1, r0
 800efee:	4628      	mov	r0, r5
 800eff0:	f000 ff26 	bl	800fe40 <__mcmp>
 800eff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eff6:	4602      	mov	r2, r0
 800eff8:	4641      	mov	r1, r8
 800effa:	4630      	mov	r0, r6
 800effc:	920e      	str	r2, [sp, #56]	; 0x38
 800effe:	930a      	str	r3, [sp, #40]	; 0x28
 800f000:	f000 fc96 	bl	800f930 <_Bfree>
 800f004:	9b07      	ldr	r3, [sp, #28]
 800f006:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f008:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f00c:	ea43 0102 	orr.w	r1, r3, r2
 800f010:	9b08      	ldr	r3, [sp, #32]
 800f012:	430b      	orrs	r3, r1
 800f014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f016:	d10d      	bne.n	800f034 <_dtoa_r+0x9a4>
 800f018:	2b39      	cmp	r3, #57	; 0x39
 800f01a:	d029      	beq.n	800f070 <_dtoa_r+0x9e0>
 800f01c:	f1ba 0f00 	cmp.w	sl, #0
 800f020:	dd01      	ble.n	800f026 <_dtoa_r+0x996>
 800f022:	9b06      	ldr	r3, [sp, #24]
 800f024:	3331      	adds	r3, #49	; 0x31
 800f026:	9a02      	ldr	r2, [sp, #8]
 800f028:	7013      	strb	r3, [r2, #0]
 800f02a:	e774      	b.n	800ef16 <_dtoa_r+0x886>
 800f02c:	4638      	mov	r0, r7
 800f02e:	e7b8      	b.n	800efa2 <_dtoa_r+0x912>
 800f030:	2201      	movs	r2, #1
 800f032:	e7e1      	b.n	800eff8 <_dtoa_r+0x968>
 800f034:	f1ba 0f00 	cmp.w	sl, #0
 800f038:	db06      	blt.n	800f048 <_dtoa_r+0x9b8>
 800f03a:	9907      	ldr	r1, [sp, #28]
 800f03c:	ea41 0a0a 	orr.w	sl, r1, sl
 800f040:	9908      	ldr	r1, [sp, #32]
 800f042:	ea5a 0101 	orrs.w	r1, sl, r1
 800f046:	d120      	bne.n	800f08a <_dtoa_r+0x9fa>
 800f048:	2a00      	cmp	r2, #0
 800f04a:	ddec      	ble.n	800f026 <_dtoa_r+0x996>
 800f04c:	4629      	mov	r1, r5
 800f04e:	2201      	movs	r2, #1
 800f050:	4630      	mov	r0, r6
 800f052:	9305      	str	r3, [sp, #20]
 800f054:	f000 fe88 	bl	800fd68 <__lshift>
 800f058:	4621      	mov	r1, r4
 800f05a:	4605      	mov	r5, r0
 800f05c:	f000 fef0 	bl	800fe40 <__mcmp>
 800f060:	2800      	cmp	r0, #0
 800f062:	9b05      	ldr	r3, [sp, #20]
 800f064:	dc02      	bgt.n	800f06c <_dtoa_r+0x9dc>
 800f066:	d1de      	bne.n	800f026 <_dtoa_r+0x996>
 800f068:	07da      	lsls	r2, r3, #31
 800f06a:	d5dc      	bpl.n	800f026 <_dtoa_r+0x996>
 800f06c:	2b39      	cmp	r3, #57	; 0x39
 800f06e:	d1d8      	bne.n	800f022 <_dtoa_r+0x992>
 800f070:	9a02      	ldr	r2, [sp, #8]
 800f072:	2339      	movs	r3, #57	; 0x39
 800f074:	7013      	strb	r3, [r2, #0]
 800f076:	4643      	mov	r3, r8
 800f078:	4698      	mov	r8, r3
 800f07a:	3b01      	subs	r3, #1
 800f07c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800f080:	2a39      	cmp	r2, #57	; 0x39
 800f082:	d051      	beq.n	800f128 <_dtoa_r+0xa98>
 800f084:	3201      	adds	r2, #1
 800f086:	701a      	strb	r2, [r3, #0]
 800f088:	e745      	b.n	800ef16 <_dtoa_r+0x886>
 800f08a:	2a00      	cmp	r2, #0
 800f08c:	dd03      	ble.n	800f096 <_dtoa_r+0xa06>
 800f08e:	2b39      	cmp	r3, #57	; 0x39
 800f090:	d0ee      	beq.n	800f070 <_dtoa_r+0x9e0>
 800f092:	3301      	adds	r3, #1
 800f094:	e7c7      	b.n	800f026 <_dtoa_r+0x996>
 800f096:	9a05      	ldr	r2, [sp, #20]
 800f098:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f09a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f09e:	428a      	cmp	r2, r1
 800f0a0:	d02b      	beq.n	800f0fa <_dtoa_r+0xa6a>
 800f0a2:	4629      	mov	r1, r5
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	220a      	movs	r2, #10
 800f0a8:	4630      	mov	r0, r6
 800f0aa:	f000 fc63 	bl	800f974 <__multadd>
 800f0ae:	45b9      	cmp	r9, r7
 800f0b0:	4605      	mov	r5, r0
 800f0b2:	f04f 0300 	mov.w	r3, #0
 800f0b6:	f04f 020a 	mov.w	r2, #10
 800f0ba:	4649      	mov	r1, r9
 800f0bc:	4630      	mov	r0, r6
 800f0be:	d107      	bne.n	800f0d0 <_dtoa_r+0xa40>
 800f0c0:	f000 fc58 	bl	800f974 <__multadd>
 800f0c4:	4681      	mov	r9, r0
 800f0c6:	4607      	mov	r7, r0
 800f0c8:	9b05      	ldr	r3, [sp, #20]
 800f0ca:	3301      	adds	r3, #1
 800f0cc:	9305      	str	r3, [sp, #20]
 800f0ce:	e774      	b.n	800efba <_dtoa_r+0x92a>
 800f0d0:	f000 fc50 	bl	800f974 <__multadd>
 800f0d4:	4639      	mov	r1, r7
 800f0d6:	4681      	mov	r9, r0
 800f0d8:	2300      	movs	r3, #0
 800f0da:	220a      	movs	r2, #10
 800f0dc:	4630      	mov	r0, r6
 800f0de:	f000 fc49 	bl	800f974 <__multadd>
 800f0e2:	4607      	mov	r7, r0
 800f0e4:	e7f0      	b.n	800f0c8 <_dtoa_r+0xa38>
 800f0e6:	f1ba 0f00 	cmp.w	sl, #0
 800f0ea:	9a00      	ldr	r2, [sp, #0]
 800f0ec:	bfcc      	ite	gt
 800f0ee:	46d0      	movgt	r8, sl
 800f0f0:	f04f 0801 	movle.w	r8, #1
 800f0f4:	4490      	add	r8, r2
 800f0f6:	f04f 0900 	mov.w	r9, #0
 800f0fa:	4629      	mov	r1, r5
 800f0fc:	2201      	movs	r2, #1
 800f0fe:	4630      	mov	r0, r6
 800f100:	9302      	str	r3, [sp, #8]
 800f102:	f000 fe31 	bl	800fd68 <__lshift>
 800f106:	4621      	mov	r1, r4
 800f108:	4605      	mov	r5, r0
 800f10a:	f000 fe99 	bl	800fe40 <__mcmp>
 800f10e:	2800      	cmp	r0, #0
 800f110:	dcb1      	bgt.n	800f076 <_dtoa_r+0x9e6>
 800f112:	d102      	bne.n	800f11a <_dtoa_r+0xa8a>
 800f114:	9b02      	ldr	r3, [sp, #8]
 800f116:	07db      	lsls	r3, r3, #31
 800f118:	d4ad      	bmi.n	800f076 <_dtoa_r+0x9e6>
 800f11a:	4643      	mov	r3, r8
 800f11c:	4698      	mov	r8, r3
 800f11e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f122:	2a30      	cmp	r2, #48	; 0x30
 800f124:	d0fa      	beq.n	800f11c <_dtoa_r+0xa8c>
 800f126:	e6f6      	b.n	800ef16 <_dtoa_r+0x886>
 800f128:	9a00      	ldr	r2, [sp, #0]
 800f12a:	429a      	cmp	r2, r3
 800f12c:	d1a4      	bne.n	800f078 <_dtoa_r+0x9e8>
 800f12e:	f10b 0b01 	add.w	fp, fp, #1
 800f132:	2331      	movs	r3, #49	; 0x31
 800f134:	e778      	b.n	800f028 <_dtoa_r+0x998>
 800f136:	4b15      	ldr	r3, [pc, #84]	; (800f18c <_dtoa_r+0xafc>)
 800f138:	f7ff bb12 	b.w	800e760 <_dtoa_r+0xd0>
 800f13c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f13e:	2b00      	cmp	r3, #0
 800f140:	f47f aaee 	bne.w	800e720 <_dtoa_r+0x90>
 800f144:	4b12      	ldr	r3, [pc, #72]	; (800f190 <_dtoa_r+0xb00>)
 800f146:	f7ff bb0b 	b.w	800e760 <_dtoa_r+0xd0>
 800f14a:	f1ba 0f00 	cmp.w	sl, #0
 800f14e:	dc03      	bgt.n	800f158 <_dtoa_r+0xac8>
 800f150:	9b07      	ldr	r3, [sp, #28]
 800f152:	2b02      	cmp	r3, #2
 800f154:	f73f aec7 	bgt.w	800eee6 <_dtoa_r+0x856>
 800f158:	f8dd 8000 	ldr.w	r8, [sp]
 800f15c:	4621      	mov	r1, r4
 800f15e:	4628      	mov	r0, r5
 800f160:	f7ff fa08 	bl	800e574 <quorem>
 800f164:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f168:	f808 3b01 	strb.w	r3, [r8], #1
 800f16c:	9a00      	ldr	r2, [sp, #0]
 800f16e:	eba8 0202 	sub.w	r2, r8, r2
 800f172:	4592      	cmp	sl, r2
 800f174:	ddb7      	ble.n	800f0e6 <_dtoa_r+0xa56>
 800f176:	4629      	mov	r1, r5
 800f178:	2300      	movs	r3, #0
 800f17a:	220a      	movs	r2, #10
 800f17c:	4630      	mov	r0, r6
 800f17e:	f000 fbf9 	bl	800f974 <__multadd>
 800f182:	4605      	mov	r5, r0
 800f184:	e7ea      	b.n	800f15c <_dtoa_r+0xacc>
 800f186:	bf00      	nop
 800f188:	08011761 	.word	0x08011761
 800f18c:	0801153c 	.word	0x0801153c
 800f190:	080116de 	.word	0x080116de

0800f194 <rshift>:
 800f194:	6903      	ldr	r3, [r0, #16]
 800f196:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f19a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f19e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f1a2:	f100 0414 	add.w	r4, r0, #20
 800f1a6:	dd45      	ble.n	800f234 <rshift+0xa0>
 800f1a8:	f011 011f 	ands.w	r1, r1, #31
 800f1ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f1b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f1b4:	d10c      	bne.n	800f1d0 <rshift+0x3c>
 800f1b6:	f100 0710 	add.w	r7, r0, #16
 800f1ba:	4629      	mov	r1, r5
 800f1bc:	42b1      	cmp	r1, r6
 800f1be:	d334      	bcc.n	800f22a <rshift+0x96>
 800f1c0:	1a9b      	subs	r3, r3, r2
 800f1c2:	009b      	lsls	r3, r3, #2
 800f1c4:	1eea      	subs	r2, r5, #3
 800f1c6:	4296      	cmp	r6, r2
 800f1c8:	bf38      	it	cc
 800f1ca:	2300      	movcc	r3, #0
 800f1cc:	4423      	add	r3, r4
 800f1ce:	e015      	b.n	800f1fc <rshift+0x68>
 800f1d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f1d4:	f1c1 0820 	rsb	r8, r1, #32
 800f1d8:	40cf      	lsrs	r7, r1
 800f1da:	f105 0e04 	add.w	lr, r5, #4
 800f1de:	46a1      	mov	r9, r4
 800f1e0:	4576      	cmp	r6, lr
 800f1e2:	46f4      	mov	ip, lr
 800f1e4:	d815      	bhi.n	800f212 <rshift+0x7e>
 800f1e6:	1a9b      	subs	r3, r3, r2
 800f1e8:	009a      	lsls	r2, r3, #2
 800f1ea:	3a04      	subs	r2, #4
 800f1ec:	3501      	adds	r5, #1
 800f1ee:	42ae      	cmp	r6, r5
 800f1f0:	bf38      	it	cc
 800f1f2:	2200      	movcc	r2, #0
 800f1f4:	18a3      	adds	r3, r4, r2
 800f1f6:	50a7      	str	r7, [r4, r2]
 800f1f8:	b107      	cbz	r7, 800f1fc <rshift+0x68>
 800f1fa:	3304      	adds	r3, #4
 800f1fc:	1b1a      	subs	r2, r3, r4
 800f1fe:	42a3      	cmp	r3, r4
 800f200:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f204:	bf08      	it	eq
 800f206:	2300      	moveq	r3, #0
 800f208:	6102      	str	r2, [r0, #16]
 800f20a:	bf08      	it	eq
 800f20c:	6143      	streq	r3, [r0, #20]
 800f20e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f212:	f8dc c000 	ldr.w	ip, [ip]
 800f216:	fa0c fc08 	lsl.w	ip, ip, r8
 800f21a:	ea4c 0707 	orr.w	r7, ip, r7
 800f21e:	f849 7b04 	str.w	r7, [r9], #4
 800f222:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f226:	40cf      	lsrs	r7, r1
 800f228:	e7da      	b.n	800f1e0 <rshift+0x4c>
 800f22a:	f851 cb04 	ldr.w	ip, [r1], #4
 800f22e:	f847 cf04 	str.w	ip, [r7, #4]!
 800f232:	e7c3      	b.n	800f1bc <rshift+0x28>
 800f234:	4623      	mov	r3, r4
 800f236:	e7e1      	b.n	800f1fc <rshift+0x68>

0800f238 <__hexdig_fun>:
 800f238:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f23c:	2b09      	cmp	r3, #9
 800f23e:	d802      	bhi.n	800f246 <__hexdig_fun+0xe>
 800f240:	3820      	subs	r0, #32
 800f242:	b2c0      	uxtb	r0, r0
 800f244:	4770      	bx	lr
 800f246:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f24a:	2b05      	cmp	r3, #5
 800f24c:	d801      	bhi.n	800f252 <__hexdig_fun+0x1a>
 800f24e:	3847      	subs	r0, #71	; 0x47
 800f250:	e7f7      	b.n	800f242 <__hexdig_fun+0xa>
 800f252:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f256:	2b05      	cmp	r3, #5
 800f258:	d801      	bhi.n	800f25e <__hexdig_fun+0x26>
 800f25a:	3827      	subs	r0, #39	; 0x27
 800f25c:	e7f1      	b.n	800f242 <__hexdig_fun+0xa>
 800f25e:	2000      	movs	r0, #0
 800f260:	4770      	bx	lr
	...

0800f264 <__gethex>:
 800f264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f268:	ed2d 8b02 	vpush	{d8}
 800f26c:	b089      	sub	sp, #36	; 0x24
 800f26e:	ee08 0a10 	vmov	s16, r0
 800f272:	9304      	str	r3, [sp, #16]
 800f274:	4bbc      	ldr	r3, [pc, #752]	; (800f568 <__gethex+0x304>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	9301      	str	r3, [sp, #4]
 800f27a:	4618      	mov	r0, r3
 800f27c:	468b      	mov	fp, r1
 800f27e:	4690      	mov	r8, r2
 800f280:	f7f1 f82e 	bl	80002e0 <strlen>
 800f284:	9b01      	ldr	r3, [sp, #4]
 800f286:	f8db 2000 	ldr.w	r2, [fp]
 800f28a:	4403      	add	r3, r0
 800f28c:	4682      	mov	sl, r0
 800f28e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f292:	9305      	str	r3, [sp, #20]
 800f294:	1c93      	adds	r3, r2, #2
 800f296:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f29a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f29e:	32fe      	adds	r2, #254	; 0xfe
 800f2a0:	18d1      	adds	r1, r2, r3
 800f2a2:	461f      	mov	r7, r3
 800f2a4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f2a8:	9100      	str	r1, [sp, #0]
 800f2aa:	2830      	cmp	r0, #48	; 0x30
 800f2ac:	d0f8      	beq.n	800f2a0 <__gethex+0x3c>
 800f2ae:	f7ff ffc3 	bl	800f238 <__hexdig_fun>
 800f2b2:	4604      	mov	r4, r0
 800f2b4:	2800      	cmp	r0, #0
 800f2b6:	d13a      	bne.n	800f32e <__gethex+0xca>
 800f2b8:	9901      	ldr	r1, [sp, #4]
 800f2ba:	4652      	mov	r2, sl
 800f2bc:	4638      	mov	r0, r7
 800f2be:	f001 f9e3 	bl	8010688 <strncmp>
 800f2c2:	4605      	mov	r5, r0
 800f2c4:	2800      	cmp	r0, #0
 800f2c6:	d168      	bne.n	800f39a <__gethex+0x136>
 800f2c8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f2cc:	eb07 060a 	add.w	r6, r7, sl
 800f2d0:	f7ff ffb2 	bl	800f238 <__hexdig_fun>
 800f2d4:	2800      	cmp	r0, #0
 800f2d6:	d062      	beq.n	800f39e <__gethex+0x13a>
 800f2d8:	4633      	mov	r3, r6
 800f2da:	7818      	ldrb	r0, [r3, #0]
 800f2dc:	2830      	cmp	r0, #48	; 0x30
 800f2de:	461f      	mov	r7, r3
 800f2e0:	f103 0301 	add.w	r3, r3, #1
 800f2e4:	d0f9      	beq.n	800f2da <__gethex+0x76>
 800f2e6:	f7ff ffa7 	bl	800f238 <__hexdig_fun>
 800f2ea:	2301      	movs	r3, #1
 800f2ec:	fab0 f480 	clz	r4, r0
 800f2f0:	0964      	lsrs	r4, r4, #5
 800f2f2:	4635      	mov	r5, r6
 800f2f4:	9300      	str	r3, [sp, #0]
 800f2f6:	463a      	mov	r2, r7
 800f2f8:	4616      	mov	r6, r2
 800f2fa:	3201      	adds	r2, #1
 800f2fc:	7830      	ldrb	r0, [r6, #0]
 800f2fe:	f7ff ff9b 	bl	800f238 <__hexdig_fun>
 800f302:	2800      	cmp	r0, #0
 800f304:	d1f8      	bne.n	800f2f8 <__gethex+0x94>
 800f306:	9901      	ldr	r1, [sp, #4]
 800f308:	4652      	mov	r2, sl
 800f30a:	4630      	mov	r0, r6
 800f30c:	f001 f9bc 	bl	8010688 <strncmp>
 800f310:	b980      	cbnz	r0, 800f334 <__gethex+0xd0>
 800f312:	b94d      	cbnz	r5, 800f328 <__gethex+0xc4>
 800f314:	eb06 050a 	add.w	r5, r6, sl
 800f318:	462a      	mov	r2, r5
 800f31a:	4616      	mov	r6, r2
 800f31c:	3201      	adds	r2, #1
 800f31e:	7830      	ldrb	r0, [r6, #0]
 800f320:	f7ff ff8a 	bl	800f238 <__hexdig_fun>
 800f324:	2800      	cmp	r0, #0
 800f326:	d1f8      	bne.n	800f31a <__gethex+0xb6>
 800f328:	1bad      	subs	r5, r5, r6
 800f32a:	00ad      	lsls	r5, r5, #2
 800f32c:	e004      	b.n	800f338 <__gethex+0xd4>
 800f32e:	2400      	movs	r4, #0
 800f330:	4625      	mov	r5, r4
 800f332:	e7e0      	b.n	800f2f6 <__gethex+0x92>
 800f334:	2d00      	cmp	r5, #0
 800f336:	d1f7      	bne.n	800f328 <__gethex+0xc4>
 800f338:	7833      	ldrb	r3, [r6, #0]
 800f33a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f33e:	2b50      	cmp	r3, #80	; 0x50
 800f340:	d13b      	bne.n	800f3ba <__gethex+0x156>
 800f342:	7873      	ldrb	r3, [r6, #1]
 800f344:	2b2b      	cmp	r3, #43	; 0x2b
 800f346:	d02c      	beq.n	800f3a2 <__gethex+0x13e>
 800f348:	2b2d      	cmp	r3, #45	; 0x2d
 800f34a:	d02e      	beq.n	800f3aa <__gethex+0x146>
 800f34c:	1c71      	adds	r1, r6, #1
 800f34e:	f04f 0900 	mov.w	r9, #0
 800f352:	7808      	ldrb	r0, [r1, #0]
 800f354:	f7ff ff70 	bl	800f238 <__hexdig_fun>
 800f358:	1e43      	subs	r3, r0, #1
 800f35a:	b2db      	uxtb	r3, r3
 800f35c:	2b18      	cmp	r3, #24
 800f35e:	d82c      	bhi.n	800f3ba <__gethex+0x156>
 800f360:	f1a0 0210 	sub.w	r2, r0, #16
 800f364:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f368:	f7ff ff66 	bl	800f238 <__hexdig_fun>
 800f36c:	1e43      	subs	r3, r0, #1
 800f36e:	b2db      	uxtb	r3, r3
 800f370:	2b18      	cmp	r3, #24
 800f372:	d91d      	bls.n	800f3b0 <__gethex+0x14c>
 800f374:	f1b9 0f00 	cmp.w	r9, #0
 800f378:	d000      	beq.n	800f37c <__gethex+0x118>
 800f37a:	4252      	negs	r2, r2
 800f37c:	4415      	add	r5, r2
 800f37e:	f8cb 1000 	str.w	r1, [fp]
 800f382:	b1e4      	cbz	r4, 800f3be <__gethex+0x15a>
 800f384:	9b00      	ldr	r3, [sp, #0]
 800f386:	2b00      	cmp	r3, #0
 800f388:	bf14      	ite	ne
 800f38a:	2700      	movne	r7, #0
 800f38c:	2706      	moveq	r7, #6
 800f38e:	4638      	mov	r0, r7
 800f390:	b009      	add	sp, #36	; 0x24
 800f392:	ecbd 8b02 	vpop	{d8}
 800f396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f39a:	463e      	mov	r6, r7
 800f39c:	4625      	mov	r5, r4
 800f39e:	2401      	movs	r4, #1
 800f3a0:	e7ca      	b.n	800f338 <__gethex+0xd4>
 800f3a2:	f04f 0900 	mov.w	r9, #0
 800f3a6:	1cb1      	adds	r1, r6, #2
 800f3a8:	e7d3      	b.n	800f352 <__gethex+0xee>
 800f3aa:	f04f 0901 	mov.w	r9, #1
 800f3ae:	e7fa      	b.n	800f3a6 <__gethex+0x142>
 800f3b0:	230a      	movs	r3, #10
 800f3b2:	fb03 0202 	mla	r2, r3, r2, r0
 800f3b6:	3a10      	subs	r2, #16
 800f3b8:	e7d4      	b.n	800f364 <__gethex+0x100>
 800f3ba:	4631      	mov	r1, r6
 800f3bc:	e7df      	b.n	800f37e <__gethex+0x11a>
 800f3be:	1bf3      	subs	r3, r6, r7
 800f3c0:	3b01      	subs	r3, #1
 800f3c2:	4621      	mov	r1, r4
 800f3c4:	2b07      	cmp	r3, #7
 800f3c6:	dc0b      	bgt.n	800f3e0 <__gethex+0x17c>
 800f3c8:	ee18 0a10 	vmov	r0, s16
 800f3cc:	f000 fa70 	bl	800f8b0 <_Balloc>
 800f3d0:	4604      	mov	r4, r0
 800f3d2:	b940      	cbnz	r0, 800f3e6 <__gethex+0x182>
 800f3d4:	4b65      	ldr	r3, [pc, #404]	; (800f56c <__gethex+0x308>)
 800f3d6:	4602      	mov	r2, r0
 800f3d8:	21de      	movs	r1, #222	; 0xde
 800f3da:	4865      	ldr	r0, [pc, #404]	; (800f570 <__gethex+0x30c>)
 800f3dc:	f001 f974 	bl	80106c8 <__assert_func>
 800f3e0:	3101      	adds	r1, #1
 800f3e2:	105b      	asrs	r3, r3, #1
 800f3e4:	e7ee      	b.n	800f3c4 <__gethex+0x160>
 800f3e6:	f100 0914 	add.w	r9, r0, #20
 800f3ea:	f04f 0b00 	mov.w	fp, #0
 800f3ee:	f1ca 0301 	rsb	r3, sl, #1
 800f3f2:	f8cd 9008 	str.w	r9, [sp, #8]
 800f3f6:	f8cd b000 	str.w	fp, [sp]
 800f3fa:	9306      	str	r3, [sp, #24]
 800f3fc:	42b7      	cmp	r7, r6
 800f3fe:	d340      	bcc.n	800f482 <__gethex+0x21e>
 800f400:	9802      	ldr	r0, [sp, #8]
 800f402:	9b00      	ldr	r3, [sp, #0]
 800f404:	f840 3b04 	str.w	r3, [r0], #4
 800f408:	eba0 0009 	sub.w	r0, r0, r9
 800f40c:	1080      	asrs	r0, r0, #2
 800f40e:	0146      	lsls	r6, r0, #5
 800f410:	6120      	str	r0, [r4, #16]
 800f412:	4618      	mov	r0, r3
 800f414:	f000 fb42 	bl	800fa9c <__hi0bits>
 800f418:	1a30      	subs	r0, r6, r0
 800f41a:	f8d8 6000 	ldr.w	r6, [r8]
 800f41e:	42b0      	cmp	r0, r6
 800f420:	dd63      	ble.n	800f4ea <__gethex+0x286>
 800f422:	1b87      	subs	r7, r0, r6
 800f424:	4639      	mov	r1, r7
 800f426:	4620      	mov	r0, r4
 800f428:	f000 fedd 	bl	80101e6 <__any_on>
 800f42c:	4682      	mov	sl, r0
 800f42e:	b1a8      	cbz	r0, 800f45c <__gethex+0x1f8>
 800f430:	1e7b      	subs	r3, r7, #1
 800f432:	1159      	asrs	r1, r3, #5
 800f434:	f003 021f 	and.w	r2, r3, #31
 800f438:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f43c:	f04f 0a01 	mov.w	sl, #1
 800f440:	fa0a f202 	lsl.w	r2, sl, r2
 800f444:	420a      	tst	r2, r1
 800f446:	d009      	beq.n	800f45c <__gethex+0x1f8>
 800f448:	4553      	cmp	r3, sl
 800f44a:	dd05      	ble.n	800f458 <__gethex+0x1f4>
 800f44c:	1eb9      	subs	r1, r7, #2
 800f44e:	4620      	mov	r0, r4
 800f450:	f000 fec9 	bl	80101e6 <__any_on>
 800f454:	2800      	cmp	r0, #0
 800f456:	d145      	bne.n	800f4e4 <__gethex+0x280>
 800f458:	f04f 0a02 	mov.w	sl, #2
 800f45c:	4639      	mov	r1, r7
 800f45e:	4620      	mov	r0, r4
 800f460:	f7ff fe98 	bl	800f194 <rshift>
 800f464:	443d      	add	r5, r7
 800f466:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f46a:	42ab      	cmp	r3, r5
 800f46c:	da4c      	bge.n	800f508 <__gethex+0x2a4>
 800f46e:	ee18 0a10 	vmov	r0, s16
 800f472:	4621      	mov	r1, r4
 800f474:	f000 fa5c 	bl	800f930 <_Bfree>
 800f478:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f47a:	2300      	movs	r3, #0
 800f47c:	6013      	str	r3, [r2, #0]
 800f47e:	27a3      	movs	r7, #163	; 0xa3
 800f480:	e785      	b.n	800f38e <__gethex+0x12a>
 800f482:	1e73      	subs	r3, r6, #1
 800f484:	9a05      	ldr	r2, [sp, #20]
 800f486:	9303      	str	r3, [sp, #12]
 800f488:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f48c:	4293      	cmp	r3, r2
 800f48e:	d019      	beq.n	800f4c4 <__gethex+0x260>
 800f490:	f1bb 0f20 	cmp.w	fp, #32
 800f494:	d107      	bne.n	800f4a6 <__gethex+0x242>
 800f496:	9b02      	ldr	r3, [sp, #8]
 800f498:	9a00      	ldr	r2, [sp, #0]
 800f49a:	f843 2b04 	str.w	r2, [r3], #4
 800f49e:	9302      	str	r3, [sp, #8]
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	9300      	str	r3, [sp, #0]
 800f4a4:	469b      	mov	fp, r3
 800f4a6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f4aa:	f7ff fec5 	bl	800f238 <__hexdig_fun>
 800f4ae:	9b00      	ldr	r3, [sp, #0]
 800f4b0:	f000 000f 	and.w	r0, r0, #15
 800f4b4:	fa00 f00b 	lsl.w	r0, r0, fp
 800f4b8:	4303      	orrs	r3, r0
 800f4ba:	9300      	str	r3, [sp, #0]
 800f4bc:	f10b 0b04 	add.w	fp, fp, #4
 800f4c0:	9b03      	ldr	r3, [sp, #12]
 800f4c2:	e00d      	b.n	800f4e0 <__gethex+0x27c>
 800f4c4:	9b03      	ldr	r3, [sp, #12]
 800f4c6:	9a06      	ldr	r2, [sp, #24]
 800f4c8:	4413      	add	r3, r2
 800f4ca:	42bb      	cmp	r3, r7
 800f4cc:	d3e0      	bcc.n	800f490 <__gethex+0x22c>
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	9901      	ldr	r1, [sp, #4]
 800f4d2:	9307      	str	r3, [sp, #28]
 800f4d4:	4652      	mov	r2, sl
 800f4d6:	f001 f8d7 	bl	8010688 <strncmp>
 800f4da:	9b07      	ldr	r3, [sp, #28]
 800f4dc:	2800      	cmp	r0, #0
 800f4de:	d1d7      	bne.n	800f490 <__gethex+0x22c>
 800f4e0:	461e      	mov	r6, r3
 800f4e2:	e78b      	b.n	800f3fc <__gethex+0x198>
 800f4e4:	f04f 0a03 	mov.w	sl, #3
 800f4e8:	e7b8      	b.n	800f45c <__gethex+0x1f8>
 800f4ea:	da0a      	bge.n	800f502 <__gethex+0x29e>
 800f4ec:	1a37      	subs	r7, r6, r0
 800f4ee:	4621      	mov	r1, r4
 800f4f0:	ee18 0a10 	vmov	r0, s16
 800f4f4:	463a      	mov	r2, r7
 800f4f6:	f000 fc37 	bl	800fd68 <__lshift>
 800f4fa:	1bed      	subs	r5, r5, r7
 800f4fc:	4604      	mov	r4, r0
 800f4fe:	f100 0914 	add.w	r9, r0, #20
 800f502:	f04f 0a00 	mov.w	sl, #0
 800f506:	e7ae      	b.n	800f466 <__gethex+0x202>
 800f508:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f50c:	42a8      	cmp	r0, r5
 800f50e:	dd72      	ble.n	800f5f6 <__gethex+0x392>
 800f510:	1b45      	subs	r5, r0, r5
 800f512:	42ae      	cmp	r6, r5
 800f514:	dc36      	bgt.n	800f584 <__gethex+0x320>
 800f516:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f51a:	2b02      	cmp	r3, #2
 800f51c:	d02a      	beq.n	800f574 <__gethex+0x310>
 800f51e:	2b03      	cmp	r3, #3
 800f520:	d02c      	beq.n	800f57c <__gethex+0x318>
 800f522:	2b01      	cmp	r3, #1
 800f524:	d115      	bne.n	800f552 <__gethex+0x2ee>
 800f526:	42ae      	cmp	r6, r5
 800f528:	d113      	bne.n	800f552 <__gethex+0x2ee>
 800f52a:	2e01      	cmp	r6, #1
 800f52c:	d10b      	bne.n	800f546 <__gethex+0x2e2>
 800f52e:	9a04      	ldr	r2, [sp, #16]
 800f530:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f534:	6013      	str	r3, [r2, #0]
 800f536:	2301      	movs	r3, #1
 800f538:	6123      	str	r3, [r4, #16]
 800f53a:	f8c9 3000 	str.w	r3, [r9]
 800f53e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f540:	2762      	movs	r7, #98	; 0x62
 800f542:	601c      	str	r4, [r3, #0]
 800f544:	e723      	b.n	800f38e <__gethex+0x12a>
 800f546:	1e71      	subs	r1, r6, #1
 800f548:	4620      	mov	r0, r4
 800f54a:	f000 fe4c 	bl	80101e6 <__any_on>
 800f54e:	2800      	cmp	r0, #0
 800f550:	d1ed      	bne.n	800f52e <__gethex+0x2ca>
 800f552:	ee18 0a10 	vmov	r0, s16
 800f556:	4621      	mov	r1, r4
 800f558:	f000 f9ea 	bl	800f930 <_Bfree>
 800f55c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f55e:	2300      	movs	r3, #0
 800f560:	6013      	str	r3, [r2, #0]
 800f562:	2750      	movs	r7, #80	; 0x50
 800f564:	e713      	b.n	800f38e <__gethex+0x12a>
 800f566:	bf00      	nop
 800f568:	080117dc 	.word	0x080117dc
 800f56c:	08011761 	.word	0x08011761
 800f570:	08011772 	.word	0x08011772
 800f574:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f576:	2b00      	cmp	r3, #0
 800f578:	d1eb      	bne.n	800f552 <__gethex+0x2ee>
 800f57a:	e7d8      	b.n	800f52e <__gethex+0x2ca>
 800f57c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d1d5      	bne.n	800f52e <__gethex+0x2ca>
 800f582:	e7e6      	b.n	800f552 <__gethex+0x2ee>
 800f584:	1e6f      	subs	r7, r5, #1
 800f586:	f1ba 0f00 	cmp.w	sl, #0
 800f58a:	d131      	bne.n	800f5f0 <__gethex+0x38c>
 800f58c:	b127      	cbz	r7, 800f598 <__gethex+0x334>
 800f58e:	4639      	mov	r1, r7
 800f590:	4620      	mov	r0, r4
 800f592:	f000 fe28 	bl	80101e6 <__any_on>
 800f596:	4682      	mov	sl, r0
 800f598:	117b      	asrs	r3, r7, #5
 800f59a:	2101      	movs	r1, #1
 800f59c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f5a0:	f007 071f 	and.w	r7, r7, #31
 800f5a4:	fa01 f707 	lsl.w	r7, r1, r7
 800f5a8:	421f      	tst	r7, r3
 800f5aa:	4629      	mov	r1, r5
 800f5ac:	4620      	mov	r0, r4
 800f5ae:	bf18      	it	ne
 800f5b0:	f04a 0a02 	orrne.w	sl, sl, #2
 800f5b4:	1b76      	subs	r6, r6, r5
 800f5b6:	f7ff fded 	bl	800f194 <rshift>
 800f5ba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f5be:	2702      	movs	r7, #2
 800f5c0:	f1ba 0f00 	cmp.w	sl, #0
 800f5c4:	d048      	beq.n	800f658 <__gethex+0x3f4>
 800f5c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f5ca:	2b02      	cmp	r3, #2
 800f5cc:	d015      	beq.n	800f5fa <__gethex+0x396>
 800f5ce:	2b03      	cmp	r3, #3
 800f5d0:	d017      	beq.n	800f602 <__gethex+0x39e>
 800f5d2:	2b01      	cmp	r3, #1
 800f5d4:	d109      	bne.n	800f5ea <__gethex+0x386>
 800f5d6:	f01a 0f02 	tst.w	sl, #2
 800f5da:	d006      	beq.n	800f5ea <__gethex+0x386>
 800f5dc:	f8d9 0000 	ldr.w	r0, [r9]
 800f5e0:	ea4a 0a00 	orr.w	sl, sl, r0
 800f5e4:	f01a 0f01 	tst.w	sl, #1
 800f5e8:	d10e      	bne.n	800f608 <__gethex+0x3a4>
 800f5ea:	f047 0710 	orr.w	r7, r7, #16
 800f5ee:	e033      	b.n	800f658 <__gethex+0x3f4>
 800f5f0:	f04f 0a01 	mov.w	sl, #1
 800f5f4:	e7d0      	b.n	800f598 <__gethex+0x334>
 800f5f6:	2701      	movs	r7, #1
 800f5f8:	e7e2      	b.n	800f5c0 <__gethex+0x35c>
 800f5fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f5fc:	f1c3 0301 	rsb	r3, r3, #1
 800f600:	9315      	str	r3, [sp, #84]	; 0x54
 800f602:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f604:	2b00      	cmp	r3, #0
 800f606:	d0f0      	beq.n	800f5ea <__gethex+0x386>
 800f608:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f60c:	f104 0314 	add.w	r3, r4, #20
 800f610:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f614:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f618:	f04f 0c00 	mov.w	ip, #0
 800f61c:	4618      	mov	r0, r3
 800f61e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f622:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f626:	d01c      	beq.n	800f662 <__gethex+0x3fe>
 800f628:	3201      	adds	r2, #1
 800f62a:	6002      	str	r2, [r0, #0]
 800f62c:	2f02      	cmp	r7, #2
 800f62e:	f104 0314 	add.w	r3, r4, #20
 800f632:	d13f      	bne.n	800f6b4 <__gethex+0x450>
 800f634:	f8d8 2000 	ldr.w	r2, [r8]
 800f638:	3a01      	subs	r2, #1
 800f63a:	42b2      	cmp	r2, r6
 800f63c:	d10a      	bne.n	800f654 <__gethex+0x3f0>
 800f63e:	1171      	asrs	r1, r6, #5
 800f640:	2201      	movs	r2, #1
 800f642:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f646:	f006 061f 	and.w	r6, r6, #31
 800f64a:	fa02 f606 	lsl.w	r6, r2, r6
 800f64e:	421e      	tst	r6, r3
 800f650:	bf18      	it	ne
 800f652:	4617      	movne	r7, r2
 800f654:	f047 0720 	orr.w	r7, r7, #32
 800f658:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f65a:	601c      	str	r4, [r3, #0]
 800f65c:	9b04      	ldr	r3, [sp, #16]
 800f65e:	601d      	str	r5, [r3, #0]
 800f660:	e695      	b.n	800f38e <__gethex+0x12a>
 800f662:	4299      	cmp	r1, r3
 800f664:	f843 cc04 	str.w	ip, [r3, #-4]
 800f668:	d8d8      	bhi.n	800f61c <__gethex+0x3b8>
 800f66a:	68a3      	ldr	r3, [r4, #8]
 800f66c:	459b      	cmp	fp, r3
 800f66e:	db19      	blt.n	800f6a4 <__gethex+0x440>
 800f670:	6861      	ldr	r1, [r4, #4]
 800f672:	ee18 0a10 	vmov	r0, s16
 800f676:	3101      	adds	r1, #1
 800f678:	f000 f91a 	bl	800f8b0 <_Balloc>
 800f67c:	4681      	mov	r9, r0
 800f67e:	b918      	cbnz	r0, 800f688 <__gethex+0x424>
 800f680:	4b1a      	ldr	r3, [pc, #104]	; (800f6ec <__gethex+0x488>)
 800f682:	4602      	mov	r2, r0
 800f684:	2184      	movs	r1, #132	; 0x84
 800f686:	e6a8      	b.n	800f3da <__gethex+0x176>
 800f688:	6922      	ldr	r2, [r4, #16]
 800f68a:	3202      	adds	r2, #2
 800f68c:	f104 010c 	add.w	r1, r4, #12
 800f690:	0092      	lsls	r2, r2, #2
 800f692:	300c      	adds	r0, #12
 800f694:	f7fd fa22 	bl	800cadc <memcpy>
 800f698:	4621      	mov	r1, r4
 800f69a:	ee18 0a10 	vmov	r0, s16
 800f69e:	f000 f947 	bl	800f930 <_Bfree>
 800f6a2:	464c      	mov	r4, r9
 800f6a4:	6923      	ldr	r3, [r4, #16]
 800f6a6:	1c5a      	adds	r2, r3, #1
 800f6a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f6ac:	6122      	str	r2, [r4, #16]
 800f6ae:	2201      	movs	r2, #1
 800f6b0:	615a      	str	r2, [r3, #20]
 800f6b2:	e7bb      	b.n	800f62c <__gethex+0x3c8>
 800f6b4:	6922      	ldr	r2, [r4, #16]
 800f6b6:	455a      	cmp	r2, fp
 800f6b8:	dd0b      	ble.n	800f6d2 <__gethex+0x46e>
 800f6ba:	2101      	movs	r1, #1
 800f6bc:	4620      	mov	r0, r4
 800f6be:	f7ff fd69 	bl	800f194 <rshift>
 800f6c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f6c6:	3501      	adds	r5, #1
 800f6c8:	42ab      	cmp	r3, r5
 800f6ca:	f6ff aed0 	blt.w	800f46e <__gethex+0x20a>
 800f6ce:	2701      	movs	r7, #1
 800f6d0:	e7c0      	b.n	800f654 <__gethex+0x3f0>
 800f6d2:	f016 061f 	ands.w	r6, r6, #31
 800f6d6:	d0fa      	beq.n	800f6ce <__gethex+0x46a>
 800f6d8:	449a      	add	sl, r3
 800f6da:	f1c6 0620 	rsb	r6, r6, #32
 800f6de:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f6e2:	f000 f9db 	bl	800fa9c <__hi0bits>
 800f6e6:	42b0      	cmp	r0, r6
 800f6e8:	dbe7      	blt.n	800f6ba <__gethex+0x456>
 800f6ea:	e7f0      	b.n	800f6ce <__gethex+0x46a>
 800f6ec:	08011761 	.word	0x08011761

0800f6f0 <L_shift>:
 800f6f0:	f1c2 0208 	rsb	r2, r2, #8
 800f6f4:	0092      	lsls	r2, r2, #2
 800f6f6:	b570      	push	{r4, r5, r6, lr}
 800f6f8:	f1c2 0620 	rsb	r6, r2, #32
 800f6fc:	6843      	ldr	r3, [r0, #4]
 800f6fe:	6804      	ldr	r4, [r0, #0]
 800f700:	fa03 f506 	lsl.w	r5, r3, r6
 800f704:	432c      	orrs	r4, r5
 800f706:	40d3      	lsrs	r3, r2
 800f708:	6004      	str	r4, [r0, #0]
 800f70a:	f840 3f04 	str.w	r3, [r0, #4]!
 800f70e:	4288      	cmp	r0, r1
 800f710:	d3f4      	bcc.n	800f6fc <L_shift+0xc>
 800f712:	bd70      	pop	{r4, r5, r6, pc}

0800f714 <__match>:
 800f714:	b530      	push	{r4, r5, lr}
 800f716:	6803      	ldr	r3, [r0, #0]
 800f718:	3301      	adds	r3, #1
 800f71a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f71e:	b914      	cbnz	r4, 800f726 <__match+0x12>
 800f720:	6003      	str	r3, [r0, #0]
 800f722:	2001      	movs	r0, #1
 800f724:	bd30      	pop	{r4, r5, pc}
 800f726:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f72a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f72e:	2d19      	cmp	r5, #25
 800f730:	bf98      	it	ls
 800f732:	3220      	addls	r2, #32
 800f734:	42a2      	cmp	r2, r4
 800f736:	d0f0      	beq.n	800f71a <__match+0x6>
 800f738:	2000      	movs	r0, #0
 800f73a:	e7f3      	b.n	800f724 <__match+0x10>

0800f73c <__hexnan>:
 800f73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f740:	680b      	ldr	r3, [r1, #0]
 800f742:	6801      	ldr	r1, [r0, #0]
 800f744:	115e      	asrs	r6, r3, #5
 800f746:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f74a:	f013 031f 	ands.w	r3, r3, #31
 800f74e:	b087      	sub	sp, #28
 800f750:	bf18      	it	ne
 800f752:	3604      	addne	r6, #4
 800f754:	2500      	movs	r5, #0
 800f756:	1f37      	subs	r7, r6, #4
 800f758:	4682      	mov	sl, r0
 800f75a:	4690      	mov	r8, r2
 800f75c:	9301      	str	r3, [sp, #4]
 800f75e:	f846 5c04 	str.w	r5, [r6, #-4]
 800f762:	46b9      	mov	r9, r7
 800f764:	463c      	mov	r4, r7
 800f766:	9502      	str	r5, [sp, #8]
 800f768:	46ab      	mov	fp, r5
 800f76a:	784a      	ldrb	r2, [r1, #1]
 800f76c:	1c4b      	adds	r3, r1, #1
 800f76e:	9303      	str	r3, [sp, #12]
 800f770:	b342      	cbz	r2, 800f7c4 <__hexnan+0x88>
 800f772:	4610      	mov	r0, r2
 800f774:	9105      	str	r1, [sp, #20]
 800f776:	9204      	str	r2, [sp, #16]
 800f778:	f7ff fd5e 	bl	800f238 <__hexdig_fun>
 800f77c:	2800      	cmp	r0, #0
 800f77e:	d14f      	bne.n	800f820 <__hexnan+0xe4>
 800f780:	9a04      	ldr	r2, [sp, #16]
 800f782:	9905      	ldr	r1, [sp, #20]
 800f784:	2a20      	cmp	r2, #32
 800f786:	d818      	bhi.n	800f7ba <__hexnan+0x7e>
 800f788:	9b02      	ldr	r3, [sp, #8]
 800f78a:	459b      	cmp	fp, r3
 800f78c:	dd13      	ble.n	800f7b6 <__hexnan+0x7a>
 800f78e:	454c      	cmp	r4, r9
 800f790:	d206      	bcs.n	800f7a0 <__hexnan+0x64>
 800f792:	2d07      	cmp	r5, #7
 800f794:	dc04      	bgt.n	800f7a0 <__hexnan+0x64>
 800f796:	462a      	mov	r2, r5
 800f798:	4649      	mov	r1, r9
 800f79a:	4620      	mov	r0, r4
 800f79c:	f7ff ffa8 	bl	800f6f0 <L_shift>
 800f7a0:	4544      	cmp	r4, r8
 800f7a2:	d950      	bls.n	800f846 <__hexnan+0x10a>
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	f1a4 0904 	sub.w	r9, r4, #4
 800f7aa:	f844 3c04 	str.w	r3, [r4, #-4]
 800f7ae:	f8cd b008 	str.w	fp, [sp, #8]
 800f7b2:	464c      	mov	r4, r9
 800f7b4:	461d      	mov	r5, r3
 800f7b6:	9903      	ldr	r1, [sp, #12]
 800f7b8:	e7d7      	b.n	800f76a <__hexnan+0x2e>
 800f7ba:	2a29      	cmp	r2, #41	; 0x29
 800f7bc:	d156      	bne.n	800f86c <__hexnan+0x130>
 800f7be:	3102      	adds	r1, #2
 800f7c0:	f8ca 1000 	str.w	r1, [sl]
 800f7c4:	f1bb 0f00 	cmp.w	fp, #0
 800f7c8:	d050      	beq.n	800f86c <__hexnan+0x130>
 800f7ca:	454c      	cmp	r4, r9
 800f7cc:	d206      	bcs.n	800f7dc <__hexnan+0xa0>
 800f7ce:	2d07      	cmp	r5, #7
 800f7d0:	dc04      	bgt.n	800f7dc <__hexnan+0xa0>
 800f7d2:	462a      	mov	r2, r5
 800f7d4:	4649      	mov	r1, r9
 800f7d6:	4620      	mov	r0, r4
 800f7d8:	f7ff ff8a 	bl	800f6f0 <L_shift>
 800f7dc:	4544      	cmp	r4, r8
 800f7de:	d934      	bls.n	800f84a <__hexnan+0x10e>
 800f7e0:	f1a8 0204 	sub.w	r2, r8, #4
 800f7e4:	4623      	mov	r3, r4
 800f7e6:	f853 1b04 	ldr.w	r1, [r3], #4
 800f7ea:	f842 1f04 	str.w	r1, [r2, #4]!
 800f7ee:	429f      	cmp	r7, r3
 800f7f0:	d2f9      	bcs.n	800f7e6 <__hexnan+0xaa>
 800f7f2:	1b3b      	subs	r3, r7, r4
 800f7f4:	f023 0303 	bic.w	r3, r3, #3
 800f7f8:	3304      	adds	r3, #4
 800f7fa:	3401      	adds	r4, #1
 800f7fc:	3e03      	subs	r6, #3
 800f7fe:	42b4      	cmp	r4, r6
 800f800:	bf88      	it	hi
 800f802:	2304      	movhi	r3, #4
 800f804:	4443      	add	r3, r8
 800f806:	2200      	movs	r2, #0
 800f808:	f843 2b04 	str.w	r2, [r3], #4
 800f80c:	429f      	cmp	r7, r3
 800f80e:	d2fb      	bcs.n	800f808 <__hexnan+0xcc>
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	b91b      	cbnz	r3, 800f81c <__hexnan+0xe0>
 800f814:	4547      	cmp	r7, r8
 800f816:	d127      	bne.n	800f868 <__hexnan+0x12c>
 800f818:	2301      	movs	r3, #1
 800f81a:	603b      	str	r3, [r7, #0]
 800f81c:	2005      	movs	r0, #5
 800f81e:	e026      	b.n	800f86e <__hexnan+0x132>
 800f820:	3501      	adds	r5, #1
 800f822:	2d08      	cmp	r5, #8
 800f824:	f10b 0b01 	add.w	fp, fp, #1
 800f828:	dd06      	ble.n	800f838 <__hexnan+0xfc>
 800f82a:	4544      	cmp	r4, r8
 800f82c:	d9c3      	bls.n	800f7b6 <__hexnan+0x7a>
 800f82e:	2300      	movs	r3, #0
 800f830:	f844 3c04 	str.w	r3, [r4, #-4]
 800f834:	2501      	movs	r5, #1
 800f836:	3c04      	subs	r4, #4
 800f838:	6822      	ldr	r2, [r4, #0]
 800f83a:	f000 000f 	and.w	r0, r0, #15
 800f83e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f842:	6022      	str	r2, [r4, #0]
 800f844:	e7b7      	b.n	800f7b6 <__hexnan+0x7a>
 800f846:	2508      	movs	r5, #8
 800f848:	e7b5      	b.n	800f7b6 <__hexnan+0x7a>
 800f84a:	9b01      	ldr	r3, [sp, #4]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d0df      	beq.n	800f810 <__hexnan+0xd4>
 800f850:	f04f 32ff 	mov.w	r2, #4294967295
 800f854:	f1c3 0320 	rsb	r3, r3, #32
 800f858:	fa22 f303 	lsr.w	r3, r2, r3
 800f85c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f860:	401a      	ands	r2, r3
 800f862:	f846 2c04 	str.w	r2, [r6, #-4]
 800f866:	e7d3      	b.n	800f810 <__hexnan+0xd4>
 800f868:	3f04      	subs	r7, #4
 800f86a:	e7d1      	b.n	800f810 <__hexnan+0xd4>
 800f86c:	2004      	movs	r0, #4
 800f86e:	b007      	add	sp, #28
 800f870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f874 <_localeconv_r>:
 800f874:	4800      	ldr	r0, [pc, #0]	; (800f878 <_localeconv_r+0x4>)
 800f876:	4770      	bx	lr
 800f878:	2400016c 	.word	0x2400016c

0800f87c <malloc>:
 800f87c:	4b02      	ldr	r3, [pc, #8]	; (800f888 <malloc+0xc>)
 800f87e:	4601      	mov	r1, r0
 800f880:	6818      	ldr	r0, [r3, #0]
 800f882:	f000 bd31 	b.w	80102e8 <_malloc_r>
 800f886:	bf00      	nop
 800f888:	24000014 	.word	0x24000014

0800f88c <__ascii_mbtowc>:
 800f88c:	b082      	sub	sp, #8
 800f88e:	b901      	cbnz	r1, 800f892 <__ascii_mbtowc+0x6>
 800f890:	a901      	add	r1, sp, #4
 800f892:	b142      	cbz	r2, 800f8a6 <__ascii_mbtowc+0x1a>
 800f894:	b14b      	cbz	r3, 800f8aa <__ascii_mbtowc+0x1e>
 800f896:	7813      	ldrb	r3, [r2, #0]
 800f898:	600b      	str	r3, [r1, #0]
 800f89a:	7812      	ldrb	r2, [r2, #0]
 800f89c:	1e10      	subs	r0, r2, #0
 800f89e:	bf18      	it	ne
 800f8a0:	2001      	movne	r0, #1
 800f8a2:	b002      	add	sp, #8
 800f8a4:	4770      	bx	lr
 800f8a6:	4610      	mov	r0, r2
 800f8a8:	e7fb      	b.n	800f8a2 <__ascii_mbtowc+0x16>
 800f8aa:	f06f 0001 	mvn.w	r0, #1
 800f8ae:	e7f8      	b.n	800f8a2 <__ascii_mbtowc+0x16>

0800f8b0 <_Balloc>:
 800f8b0:	b570      	push	{r4, r5, r6, lr}
 800f8b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f8b4:	4604      	mov	r4, r0
 800f8b6:	460d      	mov	r5, r1
 800f8b8:	b976      	cbnz	r6, 800f8d8 <_Balloc+0x28>
 800f8ba:	2010      	movs	r0, #16
 800f8bc:	f7ff ffde 	bl	800f87c <malloc>
 800f8c0:	4602      	mov	r2, r0
 800f8c2:	6260      	str	r0, [r4, #36]	; 0x24
 800f8c4:	b920      	cbnz	r0, 800f8d0 <_Balloc+0x20>
 800f8c6:	4b18      	ldr	r3, [pc, #96]	; (800f928 <_Balloc+0x78>)
 800f8c8:	4818      	ldr	r0, [pc, #96]	; (800f92c <_Balloc+0x7c>)
 800f8ca:	2166      	movs	r1, #102	; 0x66
 800f8cc:	f000 fefc 	bl	80106c8 <__assert_func>
 800f8d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f8d4:	6006      	str	r6, [r0, #0]
 800f8d6:	60c6      	str	r6, [r0, #12]
 800f8d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f8da:	68f3      	ldr	r3, [r6, #12]
 800f8dc:	b183      	cbz	r3, 800f900 <_Balloc+0x50>
 800f8de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8e0:	68db      	ldr	r3, [r3, #12]
 800f8e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f8e6:	b9b8      	cbnz	r0, 800f918 <_Balloc+0x68>
 800f8e8:	2101      	movs	r1, #1
 800f8ea:	fa01 f605 	lsl.w	r6, r1, r5
 800f8ee:	1d72      	adds	r2, r6, #5
 800f8f0:	0092      	lsls	r2, r2, #2
 800f8f2:	4620      	mov	r0, r4
 800f8f4:	f000 fc98 	bl	8010228 <_calloc_r>
 800f8f8:	b160      	cbz	r0, 800f914 <_Balloc+0x64>
 800f8fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f8fe:	e00e      	b.n	800f91e <_Balloc+0x6e>
 800f900:	2221      	movs	r2, #33	; 0x21
 800f902:	2104      	movs	r1, #4
 800f904:	4620      	mov	r0, r4
 800f906:	f000 fc8f 	bl	8010228 <_calloc_r>
 800f90a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f90c:	60f0      	str	r0, [r6, #12]
 800f90e:	68db      	ldr	r3, [r3, #12]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d1e4      	bne.n	800f8de <_Balloc+0x2e>
 800f914:	2000      	movs	r0, #0
 800f916:	bd70      	pop	{r4, r5, r6, pc}
 800f918:	6802      	ldr	r2, [r0, #0]
 800f91a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f91e:	2300      	movs	r3, #0
 800f920:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f924:	e7f7      	b.n	800f916 <_Balloc+0x66>
 800f926:	bf00      	nop
 800f928:	080116eb 	.word	0x080116eb
 800f92c:	080117f0 	.word	0x080117f0

0800f930 <_Bfree>:
 800f930:	b570      	push	{r4, r5, r6, lr}
 800f932:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f934:	4605      	mov	r5, r0
 800f936:	460c      	mov	r4, r1
 800f938:	b976      	cbnz	r6, 800f958 <_Bfree+0x28>
 800f93a:	2010      	movs	r0, #16
 800f93c:	f7ff ff9e 	bl	800f87c <malloc>
 800f940:	4602      	mov	r2, r0
 800f942:	6268      	str	r0, [r5, #36]	; 0x24
 800f944:	b920      	cbnz	r0, 800f950 <_Bfree+0x20>
 800f946:	4b09      	ldr	r3, [pc, #36]	; (800f96c <_Bfree+0x3c>)
 800f948:	4809      	ldr	r0, [pc, #36]	; (800f970 <_Bfree+0x40>)
 800f94a:	218a      	movs	r1, #138	; 0x8a
 800f94c:	f000 febc 	bl	80106c8 <__assert_func>
 800f950:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f954:	6006      	str	r6, [r0, #0]
 800f956:	60c6      	str	r6, [r0, #12]
 800f958:	b13c      	cbz	r4, 800f96a <_Bfree+0x3a>
 800f95a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f95c:	6862      	ldr	r2, [r4, #4]
 800f95e:	68db      	ldr	r3, [r3, #12]
 800f960:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f964:	6021      	str	r1, [r4, #0]
 800f966:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f96a:	bd70      	pop	{r4, r5, r6, pc}
 800f96c:	080116eb 	.word	0x080116eb
 800f970:	080117f0 	.word	0x080117f0

0800f974 <__multadd>:
 800f974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f978:	690e      	ldr	r6, [r1, #16]
 800f97a:	4607      	mov	r7, r0
 800f97c:	4698      	mov	r8, r3
 800f97e:	460c      	mov	r4, r1
 800f980:	f101 0014 	add.w	r0, r1, #20
 800f984:	2300      	movs	r3, #0
 800f986:	6805      	ldr	r5, [r0, #0]
 800f988:	b2a9      	uxth	r1, r5
 800f98a:	fb02 8101 	mla	r1, r2, r1, r8
 800f98e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f992:	0c2d      	lsrs	r5, r5, #16
 800f994:	fb02 c505 	mla	r5, r2, r5, ip
 800f998:	b289      	uxth	r1, r1
 800f99a:	3301      	adds	r3, #1
 800f99c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f9a0:	429e      	cmp	r6, r3
 800f9a2:	f840 1b04 	str.w	r1, [r0], #4
 800f9a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f9aa:	dcec      	bgt.n	800f986 <__multadd+0x12>
 800f9ac:	f1b8 0f00 	cmp.w	r8, #0
 800f9b0:	d022      	beq.n	800f9f8 <__multadd+0x84>
 800f9b2:	68a3      	ldr	r3, [r4, #8]
 800f9b4:	42b3      	cmp	r3, r6
 800f9b6:	dc19      	bgt.n	800f9ec <__multadd+0x78>
 800f9b8:	6861      	ldr	r1, [r4, #4]
 800f9ba:	4638      	mov	r0, r7
 800f9bc:	3101      	adds	r1, #1
 800f9be:	f7ff ff77 	bl	800f8b0 <_Balloc>
 800f9c2:	4605      	mov	r5, r0
 800f9c4:	b928      	cbnz	r0, 800f9d2 <__multadd+0x5e>
 800f9c6:	4602      	mov	r2, r0
 800f9c8:	4b0d      	ldr	r3, [pc, #52]	; (800fa00 <__multadd+0x8c>)
 800f9ca:	480e      	ldr	r0, [pc, #56]	; (800fa04 <__multadd+0x90>)
 800f9cc:	21b5      	movs	r1, #181	; 0xb5
 800f9ce:	f000 fe7b 	bl	80106c8 <__assert_func>
 800f9d2:	6922      	ldr	r2, [r4, #16]
 800f9d4:	3202      	adds	r2, #2
 800f9d6:	f104 010c 	add.w	r1, r4, #12
 800f9da:	0092      	lsls	r2, r2, #2
 800f9dc:	300c      	adds	r0, #12
 800f9de:	f7fd f87d 	bl	800cadc <memcpy>
 800f9e2:	4621      	mov	r1, r4
 800f9e4:	4638      	mov	r0, r7
 800f9e6:	f7ff ffa3 	bl	800f930 <_Bfree>
 800f9ea:	462c      	mov	r4, r5
 800f9ec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f9f0:	3601      	adds	r6, #1
 800f9f2:	f8c3 8014 	str.w	r8, [r3, #20]
 800f9f6:	6126      	str	r6, [r4, #16]
 800f9f8:	4620      	mov	r0, r4
 800f9fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9fe:	bf00      	nop
 800fa00:	08011761 	.word	0x08011761
 800fa04:	080117f0 	.word	0x080117f0

0800fa08 <__s2b>:
 800fa08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa0c:	460c      	mov	r4, r1
 800fa0e:	4615      	mov	r5, r2
 800fa10:	461f      	mov	r7, r3
 800fa12:	2209      	movs	r2, #9
 800fa14:	3308      	adds	r3, #8
 800fa16:	4606      	mov	r6, r0
 800fa18:	fb93 f3f2 	sdiv	r3, r3, r2
 800fa1c:	2100      	movs	r1, #0
 800fa1e:	2201      	movs	r2, #1
 800fa20:	429a      	cmp	r2, r3
 800fa22:	db09      	blt.n	800fa38 <__s2b+0x30>
 800fa24:	4630      	mov	r0, r6
 800fa26:	f7ff ff43 	bl	800f8b0 <_Balloc>
 800fa2a:	b940      	cbnz	r0, 800fa3e <__s2b+0x36>
 800fa2c:	4602      	mov	r2, r0
 800fa2e:	4b19      	ldr	r3, [pc, #100]	; (800fa94 <__s2b+0x8c>)
 800fa30:	4819      	ldr	r0, [pc, #100]	; (800fa98 <__s2b+0x90>)
 800fa32:	21ce      	movs	r1, #206	; 0xce
 800fa34:	f000 fe48 	bl	80106c8 <__assert_func>
 800fa38:	0052      	lsls	r2, r2, #1
 800fa3a:	3101      	adds	r1, #1
 800fa3c:	e7f0      	b.n	800fa20 <__s2b+0x18>
 800fa3e:	9b08      	ldr	r3, [sp, #32]
 800fa40:	6143      	str	r3, [r0, #20]
 800fa42:	2d09      	cmp	r5, #9
 800fa44:	f04f 0301 	mov.w	r3, #1
 800fa48:	6103      	str	r3, [r0, #16]
 800fa4a:	dd16      	ble.n	800fa7a <__s2b+0x72>
 800fa4c:	f104 0909 	add.w	r9, r4, #9
 800fa50:	46c8      	mov	r8, r9
 800fa52:	442c      	add	r4, r5
 800fa54:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fa58:	4601      	mov	r1, r0
 800fa5a:	3b30      	subs	r3, #48	; 0x30
 800fa5c:	220a      	movs	r2, #10
 800fa5e:	4630      	mov	r0, r6
 800fa60:	f7ff ff88 	bl	800f974 <__multadd>
 800fa64:	45a0      	cmp	r8, r4
 800fa66:	d1f5      	bne.n	800fa54 <__s2b+0x4c>
 800fa68:	f1a5 0408 	sub.w	r4, r5, #8
 800fa6c:	444c      	add	r4, r9
 800fa6e:	1b2d      	subs	r5, r5, r4
 800fa70:	1963      	adds	r3, r4, r5
 800fa72:	42bb      	cmp	r3, r7
 800fa74:	db04      	blt.n	800fa80 <__s2b+0x78>
 800fa76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa7a:	340a      	adds	r4, #10
 800fa7c:	2509      	movs	r5, #9
 800fa7e:	e7f6      	b.n	800fa6e <__s2b+0x66>
 800fa80:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fa84:	4601      	mov	r1, r0
 800fa86:	3b30      	subs	r3, #48	; 0x30
 800fa88:	220a      	movs	r2, #10
 800fa8a:	4630      	mov	r0, r6
 800fa8c:	f7ff ff72 	bl	800f974 <__multadd>
 800fa90:	e7ee      	b.n	800fa70 <__s2b+0x68>
 800fa92:	bf00      	nop
 800fa94:	08011761 	.word	0x08011761
 800fa98:	080117f0 	.word	0x080117f0

0800fa9c <__hi0bits>:
 800fa9c:	0c03      	lsrs	r3, r0, #16
 800fa9e:	041b      	lsls	r3, r3, #16
 800faa0:	b9d3      	cbnz	r3, 800fad8 <__hi0bits+0x3c>
 800faa2:	0400      	lsls	r0, r0, #16
 800faa4:	2310      	movs	r3, #16
 800faa6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800faaa:	bf04      	itt	eq
 800faac:	0200      	lsleq	r0, r0, #8
 800faae:	3308      	addeq	r3, #8
 800fab0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fab4:	bf04      	itt	eq
 800fab6:	0100      	lsleq	r0, r0, #4
 800fab8:	3304      	addeq	r3, #4
 800faba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fabe:	bf04      	itt	eq
 800fac0:	0080      	lsleq	r0, r0, #2
 800fac2:	3302      	addeq	r3, #2
 800fac4:	2800      	cmp	r0, #0
 800fac6:	db05      	blt.n	800fad4 <__hi0bits+0x38>
 800fac8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800facc:	f103 0301 	add.w	r3, r3, #1
 800fad0:	bf08      	it	eq
 800fad2:	2320      	moveq	r3, #32
 800fad4:	4618      	mov	r0, r3
 800fad6:	4770      	bx	lr
 800fad8:	2300      	movs	r3, #0
 800fada:	e7e4      	b.n	800faa6 <__hi0bits+0xa>

0800fadc <__lo0bits>:
 800fadc:	6803      	ldr	r3, [r0, #0]
 800fade:	f013 0207 	ands.w	r2, r3, #7
 800fae2:	4601      	mov	r1, r0
 800fae4:	d00b      	beq.n	800fafe <__lo0bits+0x22>
 800fae6:	07da      	lsls	r2, r3, #31
 800fae8:	d424      	bmi.n	800fb34 <__lo0bits+0x58>
 800faea:	0798      	lsls	r0, r3, #30
 800faec:	bf49      	itett	mi
 800faee:	085b      	lsrmi	r3, r3, #1
 800faf0:	089b      	lsrpl	r3, r3, #2
 800faf2:	2001      	movmi	r0, #1
 800faf4:	600b      	strmi	r3, [r1, #0]
 800faf6:	bf5c      	itt	pl
 800faf8:	600b      	strpl	r3, [r1, #0]
 800fafa:	2002      	movpl	r0, #2
 800fafc:	4770      	bx	lr
 800fafe:	b298      	uxth	r0, r3
 800fb00:	b9b0      	cbnz	r0, 800fb30 <__lo0bits+0x54>
 800fb02:	0c1b      	lsrs	r3, r3, #16
 800fb04:	2010      	movs	r0, #16
 800fb06:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fb0a:	bf04      	itt	eq
 800fb0c:	0a1b      	lsreq	r3, r3, #8
 800fb0e:	3008      	addeq	r0, #8
 800fb10:	071a      	lsls	r2, r3, #28
 800fb12:	bf04      	itt	eq
 800fb14:	091b      	lsreq	r3, r3, #4
 800fb16:	3004      	addeq	r0, #4
 800fb18:	079a      	lsls	r2, r3, #30
 800fb1a:	bf04      	itt	eq
 800fb1c:	089b      	lsreq	r3, r3, #2
 800fb1e:	3002      	addeq	r0, #2
 800fb20:	07da      	lsls	r2, r3, #31
 800fb22:	d403      	bmi.n	800fb2c <__lo0bits+0x50>
 800fb24:	085b      	lsrs	r3, r3, #1
 800fb26:	f100 0001 	add.w	r0, r0, #1
 800fb2a:	d005      	beq.n	800fb38 <__lo0bits+0x5c>
 800fb2c:	600b      	str	r3, [r1, #0]
 800fb2e:	4770      	bx	lr
 800fb30:	4610      	mov	r0, r2
 800fb32:	e7e8      	b.n	800fb06 <__lo0bits+0x2a>
 800fb34:	2000      	movs	r0, #0
 800fb36:	4770      	bx	lr
 800fb38:	2020      	movs	r0, #32
 800fb3a:	4770      	bx	lr

0800fb3c <__i2b>:
 800fb3c:	b510      	push	{r4, lr}
 800fb3e:	460c      	mov	r4, r1
 800fb40:	2101      	movs	r1, #1
 800fb42:	f7ff feb5 	bl	800f8b0 <_Balloc>
 800fb46:	4602      	mov	r2, r0
 800fb48:	b928      	cbnz	r0, 800fb56 <__i2b+0x1a>
 800fb4a:	4b05      	ldr	r3, [pc, #20]	; (800fb60 <__i2b+0x24>)
 800fb4c:	4805      	ldr	r0, [pc, #20]	; (800fb64 <__i2b+0x28>)
 800fb4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fb52:	f000 fdb9 	bl	80106c8 <__assert_func>
 800fb56:	2301      	movs	r3, #1
 800fb58:	6144      	str	r4, [r0, #20]
 800fb5a:	6103      	str	r3, [r0, #16]
 800fb5c:	bd10      	pop	{r4, pc}
 800fb5e:	bf00      	nop
 800fb60:	08011761 	.word	0x08011761
 800fb64:	080117f0 	.word	0x080117f0

0800fb68 <__multiply>:
 800fb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb6c:	4614      	mov	r4, r2
 800fb6e:	690a      	ldr	r2, [r1, #16]
 800fb70:	6923      	ldr	r3, [r4, #16]
 800fb72:	429a      	cmp	r2, r3
 800fb74:	bfb8      	it	lt
 800fb76:	460b      	movlt	r3, r1
 800fb78:	460d      	mov	r5, r1
 800fb7a:	bfbc      	itt	lt
 800fb7c:	4625      	movlt	r5, r4
 800fb7e:	461c      	movlt	r4, r3
 800fb80:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800fb84:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800fb88:	68ab      	ldr	r3, [r5, #8]
 800fb8a:	6869      	ldr	r1, [r5, #4]
 800fb8c:	eb0a 0709 	add.w	r7, sl, r9
 800fb90:	42bb      	cmp	r3, r7
 800fb92:	b085      	sub	sp, #20
 800fb94:	bfb8      	it	lt
 800fb96:	3101      	addlt	r1, #1
 800fb98:	f7ff fe8a 	bl	800f8b0 <_Balloc>
 800fb9c:	b930      	cbnz	r0, 800fbac <__multiply+0x44>
 800fb9e:	4602      	mov	r2, r0
 800fba0:	4b42      	ldr	r3, [pc, #264]	; (800fcac <__multiply+0x144>)
 800fba2:	4843      	ldr	r0, [pc, #268]	; (800fcb0 <__multiply+0x148>)
 800fba4:	f240 115d 	movw	r1, #349	; 0x15d
 800fba8:	f000 fd8e 	bl	80106c8 <__assert_func>
 800fbac:	f100 0614 	add.w	r6, r0, #20
 800fbb0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800fbb4:	4633      	mov	r3, r6
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	4543      	cmp	r3, r8
 800fbba:	d31e      	bcc.n	800fbfa <__multiply+0x92>
 800fbbc:	f105 0c14 	add.w	ip, r5, #20
 800fbc0:	f104 0314 	add.w	r3, r4, #20
 800fbc4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800fbc8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800fbcc:	9202      	str	r2, [sp, #8]
 800fbce:	ebac 0205 	sub.w	r2, ip, r5
 800fbd2:	3a15      	subs	r2, #21
 800fbd4:	f022 0203 	bic.w	r2, r2, #3
 800fbd8:	3204      	adds	r2, #4
 800fbda:	f105 0115 	add.w	r1, r5, #21
 800fbde:	458c      	cmp	ip, r1
 800fbe0:	bf38      	it	cc
 800fbe2:	2204      	movcc	r2, #4
 800fbe4:	9201      	str	r2, [sp, #4]
 800fbe6:	9a02      	ldr	r2, [sp, #8]
 800fbe8:	9303      	str	r3, [sp, #12]
 800fbea:	429a      	cmp	r2, r3
 800fbec:	d808      	bhi.n	800fc00 <__multiply+0x98>
 800fbee:	2f00      	cmp	r7, #0
 800fbf0:	dc55      	bgt.n	800fc9e <__multiply+0x136>
 800fbf2:	6107      	str	r7, [r0, #16]
 800fbf4:	b005      	add	sp, #20
 800fbf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbfa:	f843 2b04 	str.w	r2, [r3], #4
 800fbfe:	e7db      	b.n	800fbb8 <__multiply+0x50>
 800fc00:	f8b3 a000 	ldrh.w	sl, [r3]
 800fc04:	f1ba 0f00 	cmp.w	sl, #0
 800fc08:	d020      	beq.n	800fc4c <__multiply+0xe4>
 800fc0a:	f105 0e14 	add.w	lr, r5, #20
 800fc0e:	46b1      	mov	r9, r6
 800fc10:	2200      	movs	r2, #0
 800fc12:	f85e 4b04 	ldr.w	r4, [lr], #4
 800fc16:	f8d9 b000 	ldr.w	fp, [r9]
 800fc1a:	b2a1      	uxth	r1, r4
 800fc1c:	fa1f fb8b 	uxth.w	fp, fp
 800fc20:	fb0a b101 	mla	r1, sl, r1, fp
 800fc24:	4411      	add	r1, r2
 800fc26:	f8d9 2000 	ldr.w	r2, [r9]
 800fc2a:	0c24      	lsrs	r4, r4, #16
 800fc2c:	0c12      	lsrs	r2, r2, #16
 800fc2e:	fb0a 2404 	mla	r4, sl, r4, r2
 800fc32:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800fc36:	b289      	uxth	r1, r1
 800fc38:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800fc3c:	45f4      	cmp	ip, lr
 800fc3e:	f849 1b04 	str.w	r1, [r9], #4
 800fc42:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800fc46:	d8e4      	bhi.n	800fc12 <__multiply+0xaa>
 800fc48:	9901      	ldr	r1, [sp, #4]
 800fc4a:	5072      	str	r2, [r6, r1]
 800fc4c:	9a03      	ldr	r2, [sp, #12]
 800fc4e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fc52:	3304      	adds	r3, #4
 800fc54:	f1b9 0f00 	cmp.w	r9, #0
 800fc58:	d01f      	beq.n	800fc9a <__multiply+0x132>
 800fc5a:	6834      	ldr	r4, [r6, #0]
 800fc5c:	f105 0114 	add.w	r1, r5, #20
 800fc60:	46b6      	mov	lr, r6
 800fc62:	f04f 0a00 	mov.w	sl, #0
 800fc66:	880a      	ldrh	r2, [r1, #0]
 800fc68:	f8be b002 	ldrh.w	fp, [lr, #2]
 800fc6c:	fb09 b202 	mla	r2, r9, r2, fp
 800fc70:	4492      	add	sl, r2
 800fc72:	b2a4      	uxth	r4, r4
 800fc74:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800fc78:	f84e 4b04 	str.w	r4, [lr], #4
 800fc7c:	f851 4b04 	ldr.w	r4, [r1], #4
 800fc80:	f8be 2000 	ldrh.w	r2, [lr]
 800fc84:	0c24      	lsrs	r4, r4, #16
 800fc86:	fb09 2404 	mla	r4, r9, r4, r2
 800fc8a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800fc8e:	458c      	cmp	ip, r1
 800fc90:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fc94:	d8e7      	bhi.n	800fc66 <__multiply+0xfe>
 800fc96:	9a01      	ldr	r2, [sp, #4]
 800fc98:	50b4      	str	r4, [r6, r2]
 800fc9a:	3604      	adds	r6, #4
 800fc9c:	e7a3      	b.n	800fbe6 <__multiply+0x7e>
 800fc9e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d1a5      	bne.n	800fbf2 <__multiply+0x8a>
 800fca6:	3f01      	subs	r7, #1
 800fca8:	e7a1      	b.n	800fbee <__multiply+0x86>
 800fcaa:	bf00      	nop
 800fcac:	08011761 	.word	0x08011761
 800fcb0:	080117f0 	.word	0x080117f0

0800fcb4 <__pow5mult>:
 800fcb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcb8:	4615      	mov	r5, r2
 800fcba:	f012 0203 	ands.w	r2, r2, #3
 800fcbe:	4606      	mov	r6, r0
 800fcc0:	460f      	mov	r7, r1
 800fcc2:	d007      	beq.n	800fcd4 <__pow5mult+0x20>
 800fcc4:	4c25      	ldr	r4, [pc, #148]	; (800fd5c <__pow5mult+0xa8>)
 800fcc6:	3a01      	subs	r2, #1
 800fcc8:	2300      	movs	r3, #0
 800fcca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fcce:	f7ff fe51 	bl	800f974 <__multadd>
 800fcd2:	4607      	mov	r7, r0
 800fcd4:	10ad      	asrs	r5, r5, #2
 800fcd6:	d03d      	beq.n	800fd54 <__pow5mult+0xa0>
 800fcd8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fcda:	b97c      	cbnz	r4, 800fcfc <__pow5mult+0x48>
 800fcdc:	2010      	movs	r0, #16
 800fcde:	f7ff fdcd 	bl	800f87c <malloc>
 800fce2:	4602      	mov	r2, r0
 800fce4:	6270      	str	r0, [r6, #36]	; 0x24
 800fce6:	b928      	cbnz	r0, 800fcf4 <__pow5mult+0x40>
 800fce8:	4b1d      	ldr	r3, [pc, #116]	; (800fd60 <__pow5mult+0xac>)
 800fcea:	481e      	ldr	r0, [pc, #120]	; (800fd64 <__pow5mult+0xb0>)
 800fcec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fcf0:	f000 fcea 	bl	80106c8 <__assert_func>
 800fcf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fcf8:	6004      	str	r4, [r0, #0]
 800fcfa:	60c4      	str	r4, [r0, #12]
 800fcfc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fd00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fd04:	b94c      	cbnz	r4, 800fd1a <__pow5mult+0x66>
 800fd06:	f240 2171 	movw	r1, #625	; 0x271
 800fd0a:	4630      	mov	r0, r6
 800fd0c:	f7ff ff16 	bl	800fb3c <__i2b>
 800fd10:	2300      	movs	r3, #0
 800fd12:	f8c8 0008 	str.w	r0, [r8, #8]
 800fd16:	4604      	mov	r4, r0
 800fd18:	6003      	str	r3, [r0, #0]
 800fd1a:	f04f 0900 	mov.w	r9, #0
 800fd1e:	07eb      	lsls	r3, r5, #31
 800fd20:	d50a      	bpl.n	800fd38 <__pow5mult+0x84>
 800fd22:	4639      	mov	r1, r7
 800fd24:	4622      	mov	r2, r4
 800fd26:	4630      	mov	r0, r6
 800fd28:	f7ff ff1e 	bl	800fb68 <__multiply>
 800fd2c:	4639      	mov	r1, r7
 800fd2e:	4680      	mov	r8, r0
 800fd30:	4630      	mov	r0, r6
 800fd32:	f7ff fdfd 	bl	800f930 <_Bfree>
 800fd36:	4647      	mov	r7, r8
 800fd38:	106d      	asrs	r5, r5, #1
 800fd3a:	d00b      	beq.n	800fd54 <__pow5mult+0xa0>
 800fd3c:	6820      	ldr	r0, [r4, #0]
 800fd3e:	b938      	cbnz	r0, 800fd50 <__pow5mult+0x9c>
 800fd40:	4622      	mov	r2, r4
 800fd42:	4621      	mov	r1, r4
 800fd44:	4630      	mov	r0, r6
 800fd46:	f7ff ff0f 	bl	800fb68 <__multiply>
 800fd4a:	6020      	str	r0, [r4, #0]
 800fd4c:	f8c0 9000 	str.w	r9, [r0]
 800fd50:	4604      	mov	r4, r0
 800fd52:	e7e4      	b.n	800fd1e <__pow5mult+0x6a>
 800fd54:	4638      	mov	r0, r7
 800fd56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd5a:	bf00      	nop
 800fd5c:	08011940 	.word	0x08011940
 800fd60:	080116eb 	.word	0x080116eb
 800fd64:	080117f0 	.word	0x080117f0

0800fd68 <__lshift>:
 800fd68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd6c:	460c      	mov	r4, r1
 800fd6e:	6849      	ldr	r1, [r1, #4]
 800fd70:	6923      	ldr	r3, [r4, #16]
 800fd72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fd76:	68a3      	ldr	r3, [r4, #8]
 800fd78:	4607      	mov	r7, r0
 800fd7a:	4691      	mov	r9, r2
 800fd7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fd80:	f108 0601 	add.w	r6, r8, #1
 800fd84:	42b3      	cmp	r3, r6
 800fd86:	db0b      	blt.n	800fda0 <__lshift+0x38>
 800fd88:	4638      	mov	r0, r7
 800fd8a:	f7ff fd91 	bl	800f8b0 <_Balloc>
 800fd8e:	4605      	mov	r5, r0
 800fd90:	b948      	cbnz	r0, 800fda6 <__lshift+0x3e>
 800fd92:	4602      	mov	r2, r0
 800fd94:	4b28      	ldr	r3, [pc, #160]	; (800fe38 <__lshift+0xd0>)
 800fd96:	4829      	ldr	r0, [pc, #164]	; (800fe3c <__lshift+0xd4>)
 800fd98:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fd9c:	f000 fc94 	bl	80106c8 <__assert_func>
 800fda0:	3101      	adds	r1, #1
 800fda2:	005b      	lsls	r3, r3, #1
 800fda4:	e7ee      	b.n	800fd84 <__lshift+0x1c>
 800fda6:	2300      	movs	r3, #0
 800fda8:	f100 0114 	add.w	r1, r0, #20
 800fdac:	f100 0210 	add.w	r2, r0, #16
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	4553      	cmp	r3, sl
 800fdb4:	db33      	blt.n	800fe1e <__lshift+0xb6>
 800fdb6:	6920      	ldr	r0, [r4, #16]
 800fdb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fdbc:	f104 0314 	add.w	r3, r4, #20
 800fdc0:	f019 091f 	ands.w	r9, r9, #31
 800fdc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fdc8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fdcc:	d02b      	beq.n	800fe26 <__lshift+0xbe>
 800fdce:	f1c9 0e20 	rsb	lr, r9, #32
 800fdd2:	468a      	mov	sl, r1
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	6818      	ldr	r0, [r3, #0]
 800fdd8:	fa00 f009 	lsl.w	r0, r0, r9
 800fddc:	4302      	orrs	r2, r0
 800fdde:	f84a 2b04 	str.w	r2, [sl], #4
 800fde2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fde6:	459c      	cmp	ip, r3
 800fde8:	fa22 f20e 	lsr.w	r2, r2, lr
 800fdec:	d8f3      	bhi.n	800fdd6 <__lshift+0x6e>
 800fdee:	ebac 0304 	sub.w	r3, ip, r4
 800fdf2:	3b15      	subs	r3, #21
 800fdf4:	f023 0303 	bic.w	r3, r3, #3
 800fdf8:	3304      	adds	r3, #4
 800fdfa:	f104 0015 	add.w	r0, r4, #21
 800fdfe:	4584      	cmp	ip, r0
 800fe00:	bf38      	it	cc
 800fe02:	2304      	movcc	r3, #4
 800fe04:	50ca      	str	r2, [r1, r3]
 800fe06:	b10a      	cbz	r2, 800fe0c <__lshift+0xa4>
 800fe08:	f108 0602 	add.w	r6, r8, #2
 800fe0c:	3e01      	subs	r6, #1
 800fe0e:	4638      	mov	r0, r7
 800fe10:	612e      	str	r6, [r5, #16]
 800fe12:	4621      	mov	r1, r4
 800fe14:	f7ff fd8c 	bl	800f930 <_Bfree>
 800fe18:	4628      	mov	r0, r5
 800fe1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe1e:	f842 0f04 	str.w	r0, [r2, #4]!
 800fe22:	3301      	adds	r3, #1
 800fe24:	e7c5      	b.n	800fdb2 <__lshift+0x4a>
 800fe26:	3904      	subs	r1, #4
 800fe28:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe2c:	f841 2f04 	str.w	r2, [r1, #4]!
 800fe30:	459c      	cmp	ip, r3
 800fe32:	d8f9      	bhi.n	800fe28 <__lshift+0xc0>
 800fe34:	e7ea      	b.n	800fe0c <__lshift+0xa4>
 800fe36:	bf00      	nop
 800fe38:	08011761 	.word	0x08011761
 800fe3c:	080117f0 	.word	0x080117f0

0800fe40 <__mcmp>:
 800fe40:	b530      	push	{r4, r5, lr}
 800fe42:	6902      	ldr	r2, [r0, #16]
 800fe44:	690c      	ldr	r4, [r1, #16]
 800fe46:	1b12      	subs	r2, r2, r4
 800fe48:	d10e      	bne.n	800fe68 <__mcmp+0x28>
 800fe4a:	f100 0314 	add.w	r3, r0, #20
 800fe4e:	3114      	adds	r1, #20
 800fe50:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fe54:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fe58:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fe5c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fe60:	42a5      	cmp	r5, r4
 800fe62:	d003      	beq.n	800fe6c <__mcmp+0x2c>
 800fe64:	d305      	bcc.n	800fe72 <__mcmp+0x32>
 800fe66:	2201      	movs	r2, #1
 800fe68:	4610      	mov	r0, r2
 800fe6a:	bd30      	pop	{r4, r5, pc}
 800fe6c:	4283      	cmp	r3, r0
 800fe6e:	d3f3      	bcc.n	800fe58 <__mcmp+0x18>
 800fe70:	e7fa      	b.n	800fe68 <__mcmp+0x28>
 800fe72:	f04f 32ff 	mov.w	r2, #4294967295
 800fe76:	e7f7      	b.n	800fe68 <__mcmp+0x28>

0800fe78 <__mdiff>:
 800fe78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe7c:	460c      	mov	r4, r1
 800fe7e:	4606      	mov	r6, r0
 800fe80:	4611      	mov	r1, r2
 800fe82:	4620      	mov	r0, r4
 800fe84:	4617      	mov	r7, r2
 800fe86:	f7ff ffdb 	bl	800fe40 <__mcmp>
 800fe8a:	1e05      	subs	r5, r0, #0
 800fe8c:	d110      	bne.n	800feb0 <__mdiff+0x38>
 800fe8e:	4629      	mov	r1, r5
 800fe90:	4630      	mov	r0, r6
 800fe92:	f7ff fd0d 	bl	800f8b0 <_Balloc>
 800fe96:	b930      	cbnz	r0, 800fea6 <__mdiff+0x2e>
 800fe98:	4b39      	ldr	r3, [pc, #228]	; (800ff80 <__mdiff+0x108>)
 800fe9a:	4602      	mov	r2, r0
 800fe9c:	f240 2132 	movw	r1, #562	; 0x232
 800fea0:	4838      	ldr	r0, [pc, #224]	; (800ff84 <__mdiff+0x10c>)
 800fea2:	f000 fc11 	bl	80106c8 <__assert_func>
 800fea6:	2301      	movs	r3, #1
 800fea8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800feac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feb0:	bfa4      	itt	ge
 800feb2:	463b      	movge	r3, r7
 800feb4:	4627      	movge	r7, r4
 800feb6:	4630      	mov	r0, r6
 800feb8:	6879      	ldr	r1, [r7, #4]
 800feba:	bfa6      	itte	ge
 800febc:	461c      	movge	r4, r3
 800febe:	2500      	movge	r5, #0
 800fec0:	2501      	movlt	r5, #1
 800fec2:	f7ff fcf5 	bl	800f8b0 <_Balloc>
 800fec6:	b920      	cbnz	r0, 800fed2 <__mdiff+0x5a>
 800fec8:	4b2d      	ldr	r3, [pc, #180]	; (800ff80 <__mdiff+0x108>)
 800feca:	4602      	mov	r2, r0
 800fecc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fed0:	e7e6      	b.n	800fea0 <__mdiff+0x28>
 800fed2:	693e      	ldr	r6, [r7, #16]
 800fed4:	60c5      	str	r5, [r0, #12]
 800fed6:	6925      	ldr	r5, [r4, #16]
 800fed8:	f107 0114 	add.w	r1, r7, #20
 800fedc:	f104 0914 	add.w	r9, r4, #20
 800fee0:	f100 0e14 	add.w	lr, r0, #20
 800fee4:	f107 0210 	add.w	r2, r7, #16
 800fee8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800feec:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800fef0:	46f2      	mov	sl, lr
 800fef2:	2700      	movs	r7, #0
 800fef4:	f859 3b04 	ldr.w	r3, [r9], #4
 800fef8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fefc:	fa1f f883 	uxth.w	r8, r3
 800ff00:	fa17 f78b 	uxtah	r7, r7, fp
 800ff04:	0c1b      	lsrs	r3, r3, #16
 800ff06:	eba7 0808 	sub.w	r8, r7, r8
 800ff0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ff0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ff12:	fa1f f888 	uxth.w	r8, r8
 800ff16:	141f      	asrs	r7, r3, #16
 800ff18:	454d      	cmp	r5, r9
 800ff1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ff1e:	f84a 3b04 	str.w	r3, [sl], #4
 800ff22:	d8e7      	bhi.n	800fef4 <__mdiff+0x7c>
 800ff24:	1b2b      	subs	r3, r5, r4
 800ff26:	3b15      	subs	r3, #21
 800ff28:	f023 0303 	bic.w	r3, r3, #3
 800ff2c:	3304      	adds	r3, #4
 800ff2e:	3415      	adds	r4, #21
 800ff30:	42a5      	cmp	r5, r4
 800ff32:	bf38      	it	cc
 800ff34:	2304      	movcc	r3, #4
 800ff36:	4419      	add	r1, r3
 800ff38:	4473      	add	r3, lr
 800ff3a:	469e      	mov	lr, r3
 800ff3c:	460d      	mov	r5, r1
 800ff3e:	4565      	cmp	r5, ip
 800ff40:	d30e      	bcc.n	800ff60 <__mdiff+0xe8>
 800ff42:	f10c 0203 	add.w	r2, ip, #3
 800ff46:	1a52      	subs	r2, r2, r1
 800ff48:	f022 0203 	bic.w	r2, r2, #3
 800ff4c:	3903      	subs	r1, #3
 800ff4e:	458c      	cmp	ip, r1
 800ff50:	bf38      	it	cc
 800ff52:	2200      	movcc	r2, #0
 800ff54:	441a      	add	r2, r3
 800ff56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ff5a:	b17b      	cbz	r3, 800ff7c <__mdiff+0x104>
 800ff5c:	6106      	str	r6, [r0, #16]
 800ff5e:	e7a5      	b.n	800feac <__mdiff+0x34>
 800ff60:	f855 8b04 	ldr.w	r8, [r5], #4
 800ff64:	fa17 f488 	uxtah	r4, r7, r8
 800ff68:	1422      	asrs	r2, r4, #16
 800ff6a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ff6e:	b2a4      	uxth	r4, r4
 800ff70:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ff74:	f84e 4b04 	str.w	r4, [lr], #4
 800ff78:	1417      	asrs	r7, r2, #16
 800ff7a:	e7e0      	b.n	800ff3e <__mdiff+0xc6>
 800ff7c:	3e01      	subs	r6, #1
 800ff7e:	e7ea      	b.n	800ff56 <__mdiff+0xde>
 800ff80:	08011761 	.word	0x08011761
 800ff84:	080117f0 	.word	0x080117f0

0800ff88 <__ulp>:
 800ff88:	b082      	sub	sp, #8
 800ff8a:	ed8d 0b00 	vstr	d0, [sp]
 800ff8e:	9b01      	ldr	r3, [sp, #4]
 800ff90:	4912      	ldr	r1, [pc, #72]	; (800ffdc <__ulp+0x54>)
 800ff92:	4019      	ands	r1, r3
 800ff94:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ff98:	2900      	cmp	r1, #0
 800ff9a:	dd05      	ble.n	800ffa8 <__ulp+0x20>
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	460b      	mov	r3, r1
 800ffa0:	ec43 2b10 	vmov	d0, r2, r3
 800ffa4:	b002      	add	sp, #8
 800ffa6:	4770      	bx	lr
 800ffa8:	4249      	negs	r1, r1
 800ffaa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ffae:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ffb2:	f04f 0200 	mov.w	r2, #0
 800ffb6:	f04f 0300 	mov.w	r3, #0
 800ffba:	da04      	bge.n	800ffc6 <__ulp+0x3e>
 800ffbc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ffc0:	fa41 f300 	asr.w	r3, r1, r0
 800ffc4:	e7ec      	b.n	800ffa0 <__ulp+0x18>
 800ffc6:	f1a0 0114 	sub.w	r1, r0, #20
 800ffca:	291e      	cmp	r1, #30
 800ffcc:	bfda      	itte	le
 800ffce:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ffd2:	fa20 f101 	lsrle.w	r1, r0, r1
 800ffd6:	2101      	movgt	r1, #1
 800ffd8:	460a      	mov	r2, r1
 800ffda:	e7e1      	b.n	800ffa0 <__ulp+0x18>
 800ffdc:	7ff00000 	.word	0x7ff00000

0800ffe0 <__b2d>:
 800ffe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffe2:	6905      	ldr	r5, [r0, #16]
 800ffe4:	f100 0714 	add.w	r7, r0, #20
 800ffe8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ffec:	1f2e      	subs	r6, r5, #4
 800ffee:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fff2:	4620      	mov	r0, r4
 800fff4:	f7ff fd52 	bl	800fa9c <__hi0bits>
 800fff8:	f1c0 0320 	rsb	r3, r0, #32
 800fffc:	280a      	cmp	r0, #10
 800fffe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801007c <__b2d+0x9c>
 8010002:	600b      	str	r3, [r1, #0]
 8010004:	dc14      	bgt.n	8010030 <__b2d+0x50>
 8010006:	f1c0 0e0b 	rsb	lr, r0, #11
 801000a:	fa24 f10e 	lsr.w	r1, r4, lr
 801000e:	42b7      	cmp	r7, r6
 8010010:	ea41 030c 	orr.w	r3, r1, ip
 8010014:	bf34      	ite	cc
 8010016:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801001a:	2100      	movcs	r1, #0
 801001c:	3015      	adds	r0, #21
 801001e:	fa04 f000 	lsl.w	r0, r4, r0
 8010022:	fa21 f10e 	lsr.w	r1, r1, lr
 8010026:	ea40 0201 	orr.w	r2, r0, r1
 801002a:	ec43 2b10 	vmov	d0, r2, r3
 801002e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010030:	42b7      	cmp	r7, r6
 8010032:	bf3a      	itte	cc
 8010034:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010038:	f1a5 0608 	subcc.w	r6, r5, #8
 801003c:	2100      	movcs	r1, #0
 801003e:	380b      	subs	r0, #11
 8010040:	d017      	beq.n	8010072 <__b2d+0x92>
 8010042:	f1c0 0c20 	rsb	ip, r0, #32
 8010046:	fa04 f500 	lsl.w	r5, r4, r0
 801004a:	42be      	cmp	r6, r7
 801004c:	fa21 f40c 	lsr.w	r4, r1, ip
 8010050:	ea45 0504 	orr.w	r5, r5, r4
 8010054:	bf8c      	ite	hi
 8010056:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801005a:	2400      	movls	r4, #0
 801005c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010060:	fa01 f000 	lsl.w	r0, r1, r0
 8010064:	fa24 f40c 	lsr.w	r4, r4, ip
 8010068:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801006c:	ea40 0204 	orr.w	r2, r0, r4
 8010070:	e7db      	b.n	801002a <__b2d+0x4a>
 8010072:	ea44 030c 	orr.w	r3, r4, ip
 8010076:	460a      	mov	r2, r1
 8010078:	e7d7      	b.n	801002a <__b2d+0x4a>
 801007a:	bf00      	nop
 801007c:	3ff00000 	.word	0x3ff00000

08010080 <__d2b>:
 8010080:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010084:	4689      	mov	r9, r1
 8010086:	2101      	movs	r1, #1
 8010088:	ec57 6b10 	vmov	r6, r7, d0
 801008c:	4690      	mov	r8, r2
 801008e:	f7ff fc0f 	bl	800f8b0 <_Balloc>
 8010092:	4604      	mov	r4, r0
 8010094:	b930      	cbnz	r0, 80100a4 <__d2b+0x24>
 8010096:	4602      	mov	r2, r0
 8010098:	4b25      	ldr	r3, [pc, #148]	; (8010130 <__d2b+0xb0>)
 801009a:	4826      	ldr	r0, [pc, #152]	; (8010134 <__d2b+0xb4>)
 801009c:	f240 310a 	movw	r1, #778	; 0x30a
 80100a0:	f000 fb12 	bl	80106c8 <__assert_func>
 80100a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80100a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80100ac:	bb35      	cbnz	r5, 80100fc <__d2b+0x7c>
 80100ae:	2e00      	cmp	r6, #0
 80100b0:	9301      	str	r3, [sp, #4]
 80100b2:	d028      	beq.n	8010106 <__d2b+0x86>
 80100b4:	4668      	mov	r0, sp
 80100b6:	9600      	str	r6, [sp, #0]
 80100b8:	f7ff fd10 	bl	800fadc <__lo0bits>
 80100bc:	9900      	ldr	r1, [sp, #0]
 80100be:	b300      	cbz	r0, 8010102 <__d2b+0x82>
 80100c0:	9a01      	ldr	r2, [sp, #4]
 80100c2:	f1c0 0320 	rsb	r3, r0, #32
 80100c6:	fa02 f303 	lsl.w	r3, r2, r3
 80100ca:	430b      	orrs	r3, r1
 80100cc:	40c2      	lsrs	r2, r0
 80100ce:	6163      	str	r3, [r4, #20]
 80100d0:	9201      	str	r2, [sp, #4]
 80100d2:	9b01      	ldr	r3, [sp, #4]
 80100d4:	61a3      	str	r3, [r4, #24]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	bf14      	ite	ne
 80100da:	2202      	movne	r2, #2
 80100dc:	2201      	moveq	r2, #1
 80100de:	6122      	str	r2, [r4, #16]
 80100e0:	b1d5      	cbz	r5, 8010118 <__d2b+0x98>
 80100e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80100e6:	4405      	add	r5, r0
 80100e8:	f8c9 5000 	str.w	r5, [r9]
 80100ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80100f0:	f8c8 0000 	str.w	r0, [r8]
 80100f4:	4620      	mov	r0, r4
 80100f6:	b003      	add	sp, #12
 80100f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010100:	e7d5      	b.n	80100ae <__d2b+0x2e>
 8010102:	6161      	str	r1, [r4, #20]
 8010104:	e7e5      	b.n	80100d2 <__d2b+0x52>
 8010106:	a801      	add	r0, sp, #4
 8010108:	f7ff fce8 	bl	800fadc <__lo0bits>
 801010c:	9b01      	ldr	r3, [sp, #4]
 801010e:	6163      	str	r3, [r4, #20]
 8010110:	2201      	movs	r2, #1
 8010112:	6122      	str	r2, [r4, #16]
 8010114:	3020      	adds	r0, #32
 8010116:	e7e3      	b.n	80100e0 <__d2b+0x60>
 8010118:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801011c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010120:	f8c9 0000 	str.w	r0, [r9]
 8010124:	6918      	ldr	r0, [r3, #16]
 8010126:	f7ff fcb9 	bl	800fa9c <__hi0bits>
 801012a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801012e:	e7df      	b.n	80100f0 <__d2b+0x70>
 8010130:	08011761 	.word	0x08011761
 8010134:	080117f0 	.word	0x080117f0

08010138 <__ratio>:
 8010138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801013c:	468a      	mov	sl, r1
 801013e:	4669      	mov	r1, sp
 8010140:	4683      	mov	fp, r0
 8010142:	f7ff ff4d 	bl	800ffe0 <__b2d>
 8010146:	a901      	add	r1, sp, #4
 8010148:	4650      	mov	r0, sl
 801014a:	ec59 8b10 	vmov	r8, r9, d0
 801014e:	ee10 6a10 	vmov	r6, s0
 8010152:	f7ff ff45 	bl	800ffe0 <__b2d>
 8010156:	f8db 3010 	ldr.w	r3, [fp, #16]
 801015a:	f8da 2010 	ldr.w	r2, [sl, #16]
 801015e:	eba3 0c02 	sub.w	ip, r3, r2
 8010162:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010166:	1a9b      	subs	r3, r3, r2
 8010168:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801016c:	ec55 4b10 	vmov	r4, r5, d0
 8010170:	2b00      	cmp	r3, #0
 8010172:	ee10 0a10 	vmov	r0, s0
 8010176:	bfce      	itee	gt
 8010178:	464a      	movgt	r2, r9
 801017a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801017e:	462a      	movle	r2, r5
 8010180:	464f      	mov	r7, r9
 8010182:	4629      	mov	r1, r5
 8010184:	bfcc      	ite	gt
 8010186:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801018a:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801018e:	ec47 6b17 	vmov	d7, r6, r7
 8010192:	ec41 0b16 	vmov	d6, r0, r1
 8010196:	ee87 0b06 	vdiv.f64	d0, d7, d6
 801019a:	b003      	add	sp, #12
 801019c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080101a0 <__copybits>:
 80101a0:	3901      	subs	r1, #1
 80101a2:	b570      	push	{r4, r5, r6, lr}
 80101a4:	1149      	asrs	r1, r1, #5
 80101a6:	6914      	ldr	r4, [r2, #16]
 80101a8:	3101      	adds	r1, #1
 80101aa:	f102 0314 	add.w	r3, r2, #20
 80101ae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80101b2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80101b6:	1f05      	subs	r5, r0, #4
 80101b8:	42a3      	cmp	r3, r4
 80101ba:	d30c      	bcc.n	80101d6 <__copybits+0x36>
 80101bc:	1aa3      	subs	r3, r4, r2
 80101be:	3b11      	subs	r3, #17
 80101c0:	f023 0303 	bic.w	r3, r3, #3
 80101c4:	3211      	adds	r2, #17
 80101c6:	42a2      	cmp	r2, r4
 80101c8:	bf88      	it	hi
 80101ca:	2300      	movhi	r3, #0
 80101cc:	4418      	add	r0, r3
 80101ce:	2300      	movs	r3, #0
 80101d0:	4288      	cmp	r0, r1
 80101d2:	d305      	bcc.n	80101e0 <__copybits+0x40>
 80101d4:	bd70      	pop	{r4, r5, r6, pc}
 80101d6:	f853 6b04 	ldr.w	r6, [r3], #4
 80101da:	f845 6f04 	str.w	r6, [r5, #4]!
 80101de:	e7eb      	b.n	80101b8 <__copybits+0x18>
 80101e0:	f840 3b04 	str.w	r3, [r0], #4
 80101e4:	e7f4      	b.n	80101d0 <__copybits+0x30>

080101e6 <__any_on>:
 80101e6:	f100 0214 	add.w	r2, r0, #20
 80101ea:	6900      	ldr	r0, [r0, #16]
 80101ec:	114b      	asrs	r3, r1, #5
 80101ee:	4298      	cmp	r0, r3
 80101f0:	b510      	push	{r4, lr}
 80101f2:	db11      	blt.n	8010218 <__any_on+0x32>
 80101f4:	dd0a      	ble.n	801020c <__any_on+0x26>
 80101f6:	f011 011f 	ands.w	r1, r1, #31
 80101fa:	d007      	beq.n	801020c <__any_on+0x26>
 80101fc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010200:	fa24 f001 	lsr.w	r0, r4, r1
 8010204:	fa00 f101 	lsl.w	r1, r0, r1
 8010208:	428c      	cmp	r4, r1
 801020a:	d10b      	bne.n	8010224 <__any_on+0x3e>
 801020c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010210:	4293      	cmp	r3, r2
 8010212:	d803      	bhi.n	801021c <__any_on+0x36>
 8010214:	2000      	movs	r0, #0
 8010216:	bd10      	pop	{r4, pc}
 8010218:	4603      	mov	r3, r0
 801021a:	e7f7      	b.n	801020c <__any_on+0x26>
 801021c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010220:	2900      	cmp	r1, #0
 8010222:	d0f5      	beq.n	8010210 <__any_on+0x2a>
 8010224:	2001      	movs	r0, #1
 8010226:	e7f6      	b.n	8010216 <__any_on+0x30>

08010228 <_calloc_r>:
 8010228:	b513      	push	{r0, r1, r4, lr}
 801022a:	434a      	muls	r2, r1
 801022c:	4611      	mov	r1, r2
 801022e:	9201      	str	r2, [sp, #4]
 8010230:	f000 f85a 	bl	80102e8 <_malloc_r>
 8010234:	4604      	mov	r4, r0
 8010236:	b118      	cbz	r0, 8010240 <_calloc_r+0x18>
 8010238:	9a01      	ldr	r2, [sp, #4]
 801023a:	2100      	movs	r1, #0
 801023c:	f7fc fc5c 	bl	800caf8 <memset>
 8010240:	4620      	mov	r0, r4
 8010242:	b002      	add	sp, #8
 8010244:	bd10      	pop	{r4, pc}
	...

08010248 <_free_r>:
 8010248:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801024a:	2900      	cmp	r1, #0
 801024c:	d048      	beq.n	80102e0 <_free_r+0x98>
 801024e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010252:	9001      	str	r0, [sp, #4]
 8010254:	2b00      	cmp	r3, #0
 8010256:	f1a1 0404 	sub.w	r4, r1, #4
 801025a:	bfb8      	it	lt
 801025c:	18e4      	addlt	r4, r4, r3
 801025e:	f000 fa7d 	bl	801075c <__malloc_lock>
 8010262:	4a20      	ldr	r2, [pc, #128]	; (80102e4 <_free_r+0x9c>)
 8010264:	9801      	ldr	r0, [sp, #4]
 8010266:	6813      	ldr	r3, [r2, #0]
 8010268:	4615      	mov	r5, r2
 801026a:	b933      	cbnz	r3, 801027a <_free_r+0x32>
 801026c:	6063      	str	r3, [r4, #4]
 801026e:	6014      	str	r4, [r2, #0]
 8010270:	b003      	add	sp, #12
 8010272:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010276:	f000 ba77 	b.w	8010768 <__malloc_unlock>
 801027a:	42a3      	cmp	r3, r4
 801027c:	d90b      	bls.n	8010296 <_free_r+0x4e>
 801027e:	6821      	ldr	r1, [r4, #0]
 8010280:	1862      	adds	r2, r4, r1
 8010282:	4293      	cmp	r3, r2
 8010284:	bf04      	itt	eq
 8010286:	681a      	ldreq	r2, [r3, #0]
 8010288:	685b      	ldreq	r3, [r3, #4]
 801028a:	6063      	str	r3, [r4, #4]
 801028c:	bf04      	itt	eq
 801028e:	1852      	addeq	r2, r2, r1
 8010290:	6022      	streq	r2, [r4, #0]
 8010292:	602c      	str	r4, [r5, #0]
 8010294:	e7ec      	b.n	8010270 <_free_r+0x28>
 8010296:	461a      	mov	r2, r3
 8010298:	685b      	ldr	r3, [r3, #4]
 801029a:	b10b      	cbz	r3, 80102a0 <_free_r+0x58>
 801029c:	42a3      	cmp	r3, r4
 801029e:	d9fa      	bls.n	8010296 <_free_r+0x4e>
 80102a0:	6811      	ldr	r1, [r2, #0]
 80102a2:	1855      	adds	r5, r2, r1
 80102a4:	42a5      	cmp	r5, r4
 80102a6:	d10b      	bne.n	80102c0 <_free_r+0x78>
 80102a8:	6824      	ldr	r4, [r4, #0]
 80102aa:	4421      	add	r1, r4
 80102ac:	1854      	adds	r4, r2, r1
 80102ae:	42a3      	cmp	r3, r4
 80102b0:	6011      	str	r1, [r2, #0]
 80102b2:	d1dd      	bne.n	8010270 <_free_r+0x28>
 80102b4:	681c      	ldr	r4, [r3, #0]
 80102b6:	685b      	ldr	r3, [r3, #4]
 80102b8:	6053      	str	r3, [r2, #4]
 80102ba:	4421      	add	r1, r4
 80102bc:	6011      	str	r1, [r2, #0]
 80102be:	e7d7      	b.n	8010270 <_free_r+0x28>
 80102c0:	d902      	bls.n	80102c8 <_free_r+0x80>
 80102c2:	230c      	movs	r3, #12
 80102c4:	6003      	str	r3, [r0, #0]
 80102c6:	e7d3      	b.n	8010270 <_free_r+0x28>
 80102c8:	6825      	ldr	r5, [r4, #0]
 80102ca:	1961      	adds	r1, r4, r5
 80102cc:	428b      	cmp	r3, r1
 80102ce:	bf04      	itt	eq
 80102d0:	6819      	ldreq	r1, [r3, #0]
 80102d2:	685b      	ldreq	r3, [r3, #4]
 80102d4:	6063      	str	r3, [r4, #4]
 80102d6:	bf04      	itt	eq
 80102d8:	1949      	addeq	r1, r1, r5
 80102da:	6021      	streq	r1, [r4, #0]
 80102dc:	6054      	str	r4, [r2, #4]
 80102de:	e7c7      	b.n	8010270 <_free_r+0x28>
 80102e0:	b003      	add	sp, #12
 80102e2:	bd30      	pop	{r4, r5, pc}
 80102e4:	24004b18 	.word	0x24004b18

080102e8 <_malloc_r>:
 80102e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102ea:	1ccd      	adds	r5, r1, #3
 80102ec:	f025 0503 	bic.w	r5, r5, #3
 80102f0:	3508      	adds	r5, #8
 80102f2:	2d0c      	cmp	r5, #12
 80102f4:	bf38      	it	cc
 80102f6:	250c      	movcc	r5, #12
 80102f8:	2d00      	cmp	r5, #0
 80102fa:	4606      	mov	r6, r0
 80102fc:	db01      	blt.n	8010302 <_malloc_r+0x1a>
 80102fe:	42a9      	cmp	r1, r5
 8010300:	d903      	bls.n	801030a <_malloc_r+0x22>
 8010302:	230c      	movs	r3, #12
 8010304:	6033      	str	r3, [r6, #0]
 8010306:	2000      	movs	r0, #0
 8010308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801030a:	f000 fa27 	bl	801075c <__malloc_lock>
 801030e:	4921      	ldr	r1, [pc, #132]	; (8010394 <_malloc_r+0xac>)
 8010310:	680a      	ldr	r2, [r1, #0]
 8010312:	4614      	mov	r4, r2
 8010314:	b99c      	cbnz	r4, 801033e <_malloc_r+0x56>
 8010316:	4f20      	ldr	r7, [pc, #128]	; (8010398 <_malloc_r+0xb0>)
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	b923      	cbnz	r3, 8010326 <_malloc_r+0x3e>
 801031c:	4621      	mov	r1, r4
 801031e:	4630      	mov	r0, r6
 8010320:	f000 f9a2 	bl	8010668 <_sbrk_r>
 8010324:	6038      	str	r0, [r7, #0]
 8010326:	4629      	mov	r1, r5
 8010328:	4630      	mov	r0, r6
 801032a:	f000 f99d 	bl	8010668 <_sbrk_r>
 801032e:	1c43      	adds	r3, r0, #1
 8010330:	d123      	bne.n	801037a <_malloc_r+0x92>
 8010332:	230c      	movs	r3, #12
 8010334:	6033      	str	r3, [r6, #0]
 8010336:	4630      	mov	r0, r6
 8010338:	f000 fa16 	bl	8010768 <__malloc_unlock>
 801033c:	e7e3      	b.n	8010306 <_malloc_r+0x1e>
 801033e:	6823      	ldr	r3, [r4, #0]
 8010340:	1b5b      	subs	r3, r3, r5
 8010342:	d417      	bmi.n	8010374 <_malloc_r+0x8c>
 8010344:	2b0b      	cmp	r3, #11
 8010346:	d903      	bls.n	8010350 <_malloc_r+0x68>
 8010348:	6023      	str	r3, [r4, #0]
 801034a:	441c      	add	r4, r3
 801034c:	6025      	str	r5, [r4, #0]
 801034e:	e004      	b.n	801035a <_malloc_r+0x72>
 8010350:	6863      	ldr	r3, [r4, #4]
 8010352:	42a2      	cmp	r2, r4
 8010354:	bf0c      	ite	eq
 8010356:	600b      	streq	r3, [r1, #0]
 8010358:	6053      	strne	r3, [r2, #4]
 801035a:	4630      	mov	r0, r6
 801035c:	f000 fa04 	bl	8010768 <__malloc_unlock>
 8010360:	f104 000b 	add.w	r0, r4, #11
 8010364:	1d23      	adds	r3, r4, #4
 8010366:	f020 0007 	bic.w	r0, r0, #7
 801036a:	1ac2      	subs	r2, r0, r3
 801036c:	d0cc      	beq.n	8010308 <_malloc_r+0x20>
 801036e:	1a1b      	subs	r3, r3, r0
 8010370:	50a3      	str	r3, [r4, r2]
 8010372:	e7c9      	b.n	8010308 <_malloc_r+0x20>
 8010374:	4622      	mov	r2, r4
 8010376:	6864      	ldr	r4, [r4, #4]
 8010378:	e7cc      	b.n	8010314 <_malloc_r+0x2c>
 801037a:	1cc4      	adds	r4, r0, #3
 801037c:	f024 0403 	bic.w	r4, r4, #3
 8010380:	42a0      	cmp	r0, r4
 8010382:	d0e3      	beq.n	801034c <_malloc_r+0x64>
 8010384:	1a21      	subs	r1, r4, r0
 8010386:	4630      	mov	r0, r6
 8010388:	f000 f96e 	bl	8010668 <_sbrk_r>
 801038c:	3001      	adds	r0, #1
 801038e:	d1dd      	bne.n	801034c <_malloc_r+0x64>
 8010390:	e7cf      	b.n	8010332 <_malloc_r+0x4a>
 8010392:	bf00      	nop
 8010394:	24004b18 	.word	0x24004b18
 8010398:	24004b1c 	.word	0x24004b1c

0801039c <__ssputs_r>:
 801039c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103a0:	688e      	ldr	r6, [r1, #8]
 80103a2:	429e      	cmp	r6, r3
 80103a4:	4682      	mov	sl, r0
 80103a6:	460c      	mov	r4, r1
 80103a8:	4690      	mov	r8, r2
 80103aa:	461f      	mov	r7, r3
 80103ac:	d838      	bhi.n	8010420 <__ssputs_r+0x84>
 80103ae:	898a      	ldrh	r2, [r1, #12]
 80103b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80103b4:	d032      	beq.n	801041c <__ssputs_r+0x80>
 80103b6:	6825      	ldr	r5, [r4, #0]
 80103b8:	6909      	ldr	r1, [r1, #16]
 80103ba:	eba5 0901 	sub.w	r9, r5, r1
 80103be:	6965      	ldr	r5, [r4, #20]
 80103c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80103c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80103c8:	3301      	adds	r3, #1
 80103ca:	444b      	add	r3, r9
 80103cc:	106d      	asrs	r5, r5, #1
 80103ce:	429d      	cmp	r5, r3
 80103d0:	bf38      	it	cc
 80103d2:	461d      	movcc	r5, r3
 80103d4:	0553      	lsls	r3, r2, #21
 80103d6:	d531      	bpl.n	801043c <__ssputs_r+0xa0>
 80103d8:	4629      	mov	r1, r5
 80103da:	f7ff ff85 	bl	80102e8 <_malloc_r>
 80103de:	4606      	mov	r6, r0
 80103e0:	b950      	cbnz	r0, 80103f8 <__ssputs_r+0x5c>
 80103e2:	230c      	movs	r3, #12
 80103e4:	f8ca 3000 	str.w	r3, [sl]
 80103e8:	89a3      	ldrh	r3, [r4, #12]
 80103ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80103ee:	81a3      	strh	r3, [r4, #12]
 80103f0:	f04f 30ff 	mov.w	r0, #4294967295
 80103f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103f8:	6921      	ldr	r1, [r4, #16]
 80103fa:	464a      	mov	r2, r9
 80103fc:	f7fc fb6e 	bl	800cadc <memcpy>
 8010400:	89a3      	ldrh	r3, [r4, #12]
 8010402:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801040a:	81a3      	strh	r3, [r4, #12]
 801040c:	6126      	str	r6, [r4, #16]
 801040e:	6165      	str	r5, [r4, #20]
 8010410:	444e      	add	r6, r9
 8010412:	eba5 0509 	sub.w	r5, r5, r9
 8010416:	6026      	str	r6, [r4, #0]
 8010418:	60a5      	str	r5, [r4, #8]
 801041a:	463e      	mov	r6, r7
 801041c:	42be      	cmp	r6, r7
 801041e:	d900      	bls.n	8010422 <__ssputs_r+0x86>
 8010420:	463e      	mov	r6, r7
 8010422:	4632      	mov	r2, r6
 8010424:	6820      	ldr	r0, [r4, #0]
 8010426:	4641      	mov	r1, r8
 8010428:	f000 f97e 	bl	8010728 <memmove>
 801042c:	68a3      	ldr	r3, [r4, #8]
 801042e:	6822      	ldr	r2, [r4, #0]
 8010430:	1b9b      	subs	r3, r3, r6
 8010432:	4432      	add	r2, r6
 8010434:	60a3      	str	r3, [r4, #8]
 8010436:	6022      	str	r2, [r4, #0]
 8010438:	2000      	movs	r0, #0
 801043a:	e7db      	b.n	80103f4 <__ssputs_r+0x58>
 801043c:	462a      	mov	r2, r5
 801043e:	f000 f999 	bl	8010774 <_realloc_r>
 8010442:	4606      	mov	r6, r0
 8010444:	2800      	cmp	r0, #0
 8010446:	d1e1      	bne.n	801040c <__ssputs_r+0x70>
 8010448:	6921      	ldr	r1, [r4, #16]
 801044a:	4650      	mov	r0, sl
 801044c:	f7ff fefc 	bl	8010248 <_free_r>
 8010450:	e7c7      	b.n	80103e2 <__ssputs_r+0x46>
	...

08010454 <_svfiprintf_r>:
 8010454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010458:	4698      	mov	r8, r3
 801045a:	898b      	ldrh	r3, [r1, #12]
 801045c:	061b      	lsls	r3, r3, #24
 801045e:	b09d      	sub	sp, #116	; 0x74
 8010460:	4607      	mov	r7, r0
 8010462:	460d      	mov	r5, r1
 8010464:	4614      	mov	r4, r2
 8010466:	d50e      	bpl.n	8010486 <_svfiprintf_r+0x32>
 8010468:	690b      	ldr	r3, [r1, #16]
 801046a:	b963      	cbnz	r3, 8010486 <_svfiprintf_r+0x32>
 801046c:	2140      	movs	r1, #64	; 0x40
 801046e:	f7ff ff3b 	bl	80102e8 <_malloc_r>
 8010472:	6028      	str	r0, [r5, #0]
 8010474:	6128      	str	r0, [r5, #16]
 8010476:	b920      	cbnz	r0, 8010482 <_svfiprintf_r+0x2e>
 8010478:	230c      	movs	r3, #12
 801047a:	603b      	str	r3, [r7, #0]
 801047c:	f04f 30ff 	mov.w	r0, #4294967295
 8010480:	e0d1      	b.n	8010626 <_svfiprintf_r+0x1d2>
 8010482:	2340      	movs	r3, #64	; 0x40
 8010484:	616b      	str	r3, [r5, #20]
 8010486:	2300      	movs	r3, #0
 8010488:	9309      	str	r3, [sp, #36]	; 0x24
 801048a:	2320      	movs	r3, #32
 801048c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010490:	f8cd 800c 	str.w	r8, [sp, #12]
 8010494:	2330      	movs	r3, #48	; 0x30
 8010496:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010640 <_svfiprintf_r+0x1ec>
 801049a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801049e:	f04f 0901 	mov.w	r9, #1
 80104a2:	4623      	mov	r3, r4
 80104a4:	469a      	mov	sl, r3
 80104a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104aa:	b10a      	cbz	r2, 80104b0 <_svfiprintf_r+0x5c>
 80104ac:	2a25      	cmp	r2, #37	; 0x25
 80104ae:	d1f9      	bne.n	80104a4 <_svfiprintf_r+0x50>
 80104b0:	ebba 0b04 	subs.w	fp, sl, r4
 80104b4:	d00b      	beq.n	80104ce <_svfiprintf_r+0x7a>
 80104b6:	465b      	mov	r3, fp
 80104b8:	4622      	mov	r2, r4
 80104ba:	4629      	mov	r1, r5
 80104bc:	4638      	mov	r0, r7
 80104be:	f7ff ff6d 	bl	801039c <__ssputs_r>
 80104c2:	3001      	adds	r0, #1
 80104c4:	f000 80aa 	beq.w	801061c <_svfiprintf_r+0x1c8>
 80104c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80104ca:	445a      	add	r2, fp
 80104cc:	9209      	str	r2, [sp, #36]	; 0x24
 80104ce:	f89a 3000 	ldrb.w	r3, [sl]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	f000 80a2 	beq.w	801061c <_svfiprintf_r+0x1c8>
 80104d8:	2300      	movs	r3, #0
 80104da:	f04f 32ff 	mov.w	r2, #4294967295
 80104de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80104e2:	f10a 0a01 	add.w	sl, sl, #1
 80104e6:	9304      	str	r3, [sp, #16]
 80104e8:	9307      	str	r3, [sp, #28]
 80104ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80104ee:	931a      	str	r3, [sp, #104]	; 0x68
 80104f0:	4654      	mov	r4, sl
 80104f2:	2205      	movs	r2, #5
 80104f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104f8:	4851      	ldr	r0, [pc, #324]	; (8010640 <_svfiprintf_r+0x1ec>)
 80104fa:	f7ef fef9 	bl	80002f0 <memchr>
 80104fe:	9a04      	ldr	r2, [sp, #16]
 8010500:	b9d8      	cbnz	r0, 801053a <_svfiprintf_r+0xe6>
 8010502:	06d0      	lsls	r0, r2, #27
 8010504:	bf44      	itt	mi
 8010506:	2320      	movmi	r3, #32
 8010508:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801050c:	0711      	lsls	r1, r2, #28
 801050e:	bf44      	itt	mi
 8010510:	232b      	movmi	r3, #43	; 0x2b
 8010512:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010516:	f89a 3000 	ldrb.w	r3, [sl]
 801051a:	2b2a      	cmp	r3, #42	; 0x2a
 801051c:	d015      	beq.n	801054a <_svfiprintf_r+0xf6>
 801051e:	9a07      	ldr	r2, [sp, #28]
 8010520:	4654      	mov	r4, sl
 8010522:	2000      	movs	r0, #0
 8010524:	f04f 0c0a 	mov.w	ip, #10
 8010528:	4621      	mov	r1, r4
 801052a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801052e:	3b30      	subs	r3, #48	; 0x30
 8010530:	2b09      	cmp	r3, #9
 8010532:	d94e      	bls.n	80105d2 <_svfiprintf_r+0x17e>
 8010534:	b1b0      	cbz	r0, 8010564 <_svfiprintf_r+0x110>
 8010536:	9207      	str	r2, [sp, #28]
 8010538:	e014      	b.n	8010564 <_svfiprintf_r+0x110>
 801053a:	eba0 0308 	sub.w	r3, r0, r8
 801053e:	fa09 f303 	lsl.w	r3, r9, r3
 8010542:	4313      	orrs	r3, r2
 8010544:	9304      	str	r3, [sp, #16]
 8010546:	46a2      	mov	sl, r4
 8010548:	e7d2      	b.n	80104f0 <_svfiprintf_r+0x9c>
 801054a:	9b03      	ldr	r3, [sp, #12]
 801054c:	1d19      	adds	r1, r3, #4
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	9103      	str	r1, [sp, #12]
 8010552:	2b00      	cmp	r3, #0
 8010554:	bfbb      	ittet	lt
 8010556:	425b      	neglt	r3, r3
 8010558:	f042 0202 	orrlt.w	r2, r2, #2
 801055c:	9307      	strge	r3, [sp, #28]
 801055e:	9307      	strlt	r3, [sp, #28]
 8010560:	bfb8      	it	lt
 8010562:	9204      	strlt	r2, [sp, #16]
 8010564:	7823      	ldrb	r3, [r4, #0]
 8010566:	2b2e      	cmp	r3, #46	; 0x2e
 8010568:	d10c      	bne.n	8010584 <_svfiprintf_r+0x130>
 801056a:	7863      	ldrb	r3, [r4, #1]
 801056c:	2b2a      	cmp	r3, #42	; 0x2a
 801056e:	d135      	bne.n	80105dc <_svfiprintf_r+0x188>
 8010570:	9b03      	ldr	r3, [sp, #12]
 8010572:	1d1a      	adds	r2, r3, #4
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	9203      	str	r2, [sp, #12]
 8010578:	2b00      	cmp	r3, #0
 801057a:	bfb8      	it	lt
 801057c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010580:	3402      	adds	r4, #2
 8010582:	9305      	str	r3, [sp, #20]
 8010584:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010650 <_svfiprintf_r+0x1fc>
 8010588:	7821      	ldrb	r1, [r4, #0]
 801058a:	2203      	movs	r2, #3
 801058c:	4650      	mov	r0, sl
 801058e:	f7ef feaf 	bl	80002f0 <memchr>
 8010592:	b140      	cbz	r0, 80105a6 <_svfiprintf_r+0x152>
 8010594:	2340      	movs	r3, #64	; 0x40
 8010596:	eba0 000a 	sub.w	r0, r0, sl
 801059a:	fa03 f000 	lsl.w	r0, r3, r0
 801059e:	9b04      	ldr	r3, [sp, #16]
 80105a0:	4303      	orrs	r3, r0
 80105a2:	3401      	adds	r4, #1
 80105a4:	9304      	str	r3, [sp, #16]
 80105a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105aa:	4826      	ldr	r0, [pc, #152]	; (8010644 <_svfiprintf_r+0x1f0>)
 80105ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80105b0:	2206      	movs	r2, #6
 80105b2:	f7ef fe9d 	bl	80002f0 <memchr>
 80105b6:	2800      	cmp	r0, #0
 80105b8:	d038      	beq.n	801062c <_svfiprintf_r+0x1d8>
 80105ba:	4b23      	ldr	r3, [pc, #140]	; (8010648 <_svfiprintf_r+0x1f4>)
 80105bc:	bb1b      	cbnz	r3, 8010606 <_svfiprintf_r+0x1b2>
 80105be:	9b03      	ldr	r3, [sp, #12]
 80105c0:	3307      	adds	r3, #7
 80105c2:	f023 0307 	bic.w	r3, r3, #7
 80105c6:	3308      	adds	r3, #8
 80105c8:	9303      	str	r3, [sp, #12]
 80105ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105cc:	4433      	add	r3, r6
 80105ce:	9309      	str	r3, [sp, #36]	; 0x24
 80105d0:	e767      	b.n	80104a2 <_svfiprintf_r+0x4e>
 80105d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80105d6:	460c      	mov	r4, r1
 80105d8:	2001      	movs	r0, #1
 80105da:	e7a5      	b.n	8010528 <_svfiprintf_r+0xd4>
 80105dc:	2300      	movs	r3, #0
 80105de:	3401      	adds	r4, #1
 80105e0:	9305      	str	r3, [sp, #20]
 80105e2:	4619      	mov	r1, r3
 80105e4:	f04f 0c0a 	mov.w	ip, #10
 80105e8:	4620      	mov	r0, r4
 80105ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80105ee:	3a30      	subs	r2, #48	; 0x30
 80105f0:	2a09      	cmp	r2, #9
 80105f2:	d903      	bls.n	80105fc <_svfiprintf_r+0x1a8>
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d0c5      	beq.n	8010584 <_svfiprintf_r+0x130>
 80105f8:	9105      	str	r1, [sp, #20]
 80105fa:	e7c3      	b.n	8010584 <_svfiprintf_r+0x130>
 80105fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8010600:	4604      	mov	r4, r0
 8010602:	2301      	movs	r3, #1
 8010604:	e7f0      	b.n	80105e8 <_svfiprintf_r+0x194>
 8010606:	ab03      	add	r3, sp, #12
 8010608:	9300      	str	r3, [sp, #0]
 801060a:	462a      	mov	r2, r5
 801060c:	4b0f      	ldr	r3, [pc, #60]	; (801064c <_svfiprintf_r+0x1f8>)
 801060e:	a904      	add	r1, sp, #16
 8010610:	4638      	mov	r0, r7
 8010612:	f7fc fb09 	bl	800cc28 <_printf_float>
 8010616:	1c42      	adds	r2, r0, #1
 8010618:	4606      	mov	r6, r0
 801061a:	d1d6      	bne.n	80105ca <_svfiprintf_r+0x176>
 801061c:	89ab      	ldrh	r3, [r5, #12]
 801061e:	065b      	lsls	r3, r3, #25
 8010620:	f53f af2c 	bmi.w	801047c <_svfiprintf_r+0x28>
 8010624:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010626:	b01d      	add	sp, #116	; 0x74
 8010628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801062c:	ab03      	add	r3, sp, #12
 801062e:	9300      	str	r3, [sp, #0]
 8010630:	462a      	mov	r2, r5
 8010632:	4b06      	ldr	r3, [pc, #24]	; (801064c <_svfiprintf_r+0x1f8>)
 8010634:	a904      	add	r1, sp, #16
 8010636:	4638      	mov	r0, r7
 8010638:	f7fc fd82 	bl	800d140 <_printf_i>
 801063c:	e7eb      	b.n	8010616 <_svfiprintf_r+0x1c2>
 801063e:	bf00      	nop
 8010640:	0801194c 	.word	0x0801194c
 8010644:	08011956 	.word	0x08011956
 8010648:	0800cc29 	.word	0x0800cc29
 801064c:	0801039d 	.word	0x0801039d
 8010650:	08011952 	.word	0x08011952
 8010654:	00000000 	.word	0x00000000

08010658 <nan>:
 8010658:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010660 <nan+0x8>
 801065c:	4770      	bx	lr
 801065e:	bf00      	nop
 8010660:	00000000 	.word	0x00000000
 8010664:	7ff80000 	.word	0x7ff80000

08010668 <_sbrk_r>:
 8010668:	b538      	push	{r3, r4, r5, lr}
 801066a:	4d06      	ldr	r5, [pc, #24]	; (8010684 <_sbrk_r+0x1c>)
 801066c:	2300      	movs	r3, #0
 801066e:	4604      	mov	r4, r0
 8010670:	4608      	mov	r0, r1
 8010672:	602b      	str	r3, [r5, #0]
 8010674:	f7f1 fc74 	bl	8001f60 <_sbrk>
 8010678:	1c43      	adds	r3, r0, #1
 801067a:	d102      	bne.n	8010682 <_sbrk_r+0x1a>
 801067c:	682b      	ldr	r3, [r5, #0]
 801067e:	b103      	cbz	r3, 8010682 <_sbrk_r+0x1a>
 8010680:	6023      	str	r3, [r4, #0]
 8010682:	bd38      	pop	{r3, r4, r5, pc}
 8010684:	24005160 	.word	0x24005160

08010688 <strncmp>:
 8010688:	b510      	push	{r4, lr}
 801068a:	b16a      	cbz	r2, 80106a8 <strncmp+0x20>
 801068c:	3901      	subs	r1, #1
 801068e:	1884      	adds	r4, r0, r2
 8010690:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010694:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010698:	4293      	cmp	r3, r2
 801069a:	d103      	bne.n	80106a4 <strncmp+0x1c>
 801069c:	42a0      	cmp	r0, r4
 801069e:	d001      	beq.n	80106a4 <strncmp+0x1c>
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d1f5      	bne.n	8010690 <strncmp+0x8>
 80106a4:	1a98      	subs	r0, r3, r2
 80106a6:	bd10      	pop	{r4, pc}
 80106a8:	4610      	mov	r0, r2
 80106aa:	e7fc      	b.n	80106a6 <strncmp+0x1e>

080106ac <__ascii_wctomb>:
 80106ac:	b149      	cbz	r1, 80106c2 <__ascii_wctomb+0x16>
 80106ae:	2aff      	cmp	r2, #255	; 0xff
 80106b0:	bf85      	ittet	hi
 80106b2:	238a      	movhi	r3, #138	; 0x8a
 80106b4:	6003      	strhi	r3, [r0, #0]
 80106b6:	700a      	strbls	r2, [r1, #0]
 80106b8:	f04f 30ff 	movhi.w	r0, #4294967295
 80106bc:	bf98      	it	ls
 80106be:	2001      	movls	r0, #1
 80106c0:	4770      	bx	lr
 80106c2:	4608      	mov	r0, r1
 80106c4:	4770      	bx	lr
	...

080106c8 <__assert_func>:
 80106c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80106ca:	4614      	mov	r4, r2
 80106cc:	461a      	mov	r2, r3
 80106ce:	4b09      	ldr	r3, [pc, #36]	; (80106f4 <__assert_func+0x2c>)
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	4605      	mov	r5, r0
 80106d4:	68d8      	ldr	r0, [r3, #12]
 80106d6:	b14c      	cbz	r4, 80106ec <__assert_func+0x24>
 80106d8:	4b07      	ldr	r3, [pc, #28]	; (80106f8 <__assert_func+0x30>)
 80106da:	9100      	str	r1, [sp, #0]
 80106dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80106e0:	4906      	ldr	r1, [pc, #24]	; (80106fc <__assert_func+0x34>)
 80106e2:	462b      	mov	r3, r5
 80106e4:	f000 f80e 	bl	8010704 <fiprintf>
 80106e8:	f000 fa84 	bl	8010bf4 <abort>
 80106ec:	4b04      	ldr	r3, [pc, #16]	; (8010700 <__assert_func+0x38>)
 80106ee:	461c      	mov	r4, r3
 80106f0:	e7f3      	b.n	80106da <__assert_func+0x12>
 80106f2:	bf00      	nop
 80106f4:	24000014 	.word	0x24000014
 80106f8:	0801195d 	.word	0x0801195d
 80106fc:	0801196a 	.word	0x0801196a
 8010700:	08011998 	.word	0x08011998

08010704 <fiprintf>:
 8010704:	b40e      	push	{r1, r2, r3}
 8010706:	b503      	push	{r0, r1, lr}
 8010708:	4601      	mov	r1, r0
 801070a:	ab03      	add	r3, sp, #12
 801070c:	4805      	ldr	r0, [pc, #20]	; (8010724 <fiprintf+0x20>)
 801070e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010712:	6800      	ldr	r0, [r0, #0]
 8010714:	9301      	str	r3, [sp, #4]
 8010716:	f000 f87d 	bl	8010814 <_vfiprintf_r>
 801071a:	b002      	add	sp, #8
 801071c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010720:	b003      	add	sp, #12
 8010722:	4770      	bx	lr
 8010724:	24000014 	.word	0x24000014

08010728 <memmove>:
 8010728:	4288      	cmp	r0, r1
 801072a:	b510      	push	{r4, lr}
 801072c:	eb01 0402 	add.w	r4, r1, r2
 8010730:	d902      	bls.n	8010738 <memmove+0x10>
 8010732:	4284      	cmp	r4, r0
 8010734:	4623      	mov	r3, r4
 8010736:	d807      	bhi.n	8010748 <memmove+0x20>
 8010738:	1e43      	subs	r3, r0, #1
 801073a:	42a1      	cmp	r1, r4
 801073c:	d008      	beq.n	8010750 <memmove+0x28>
 801073e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010742:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010746:	e7f8      	b.n	801073a <memmove+0x12>
 8010748:	4402      	add	r2, r0
 801074a:	4601      	mov	r1, r0
 801074c:	428a      	cmp	r2, r1
 801074e:	d100      	bne.n	8010752 <memmove+0x2a>
 8010750:	bd10      	pop	{r4, pc}
 8010752:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010756:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801075a:	e7f7      	b.n	801074c <memmove+0x24>

0801075c <__malloc_lock>:
 801075c:	4801      	ldr	r0, [pc, #4]	; (8010764 <__malloc_lock+0x8>)
 801075e:	f000 bc09 	b.w	8010f74 <__retarget_lock_acquire_recursive>
 8010762:	bf00      	nop
 8010764:	24005168 	.word	0x24005168

08010768 <__malloc_unlock>:
 8010768:	4801      	ldr	r0, [pc, #4]	; (8010770 <__malloc_unlock+0x8>)
 801076a:	f000 bc04 	b.w	8010f76 <__retarget_lock_release_recursive>
 801076e:	bf00      	nop
 8010770:	24005168 	.word	0x24005168

08010774 <_realloc_r>:
 8010774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010776:	4607      	mov	r7, r0
 8010778:	4614      	mov	r4, r2
 801077a:	460e      	mov	r6, r1
 801077c:	b921      	cbnz	r1, 8010788 <_realloc_r+0x14>
 801077e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010782:	4611      	mov	r1, r2
 8010784:	f7ff bdb0 	b.w	80102e8 <_malloc_r>
 8010788:	b922      	cbnz	r2, 8010794 <_realloc_r+0x20>
 801078a:	f7ff fd5d 	bl	8010248 <_free_r>
 801078e:	4625      	mov	r5, r4
 8010790:	4628      	mov	r0, r5
 8010792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010794:	f000 fc54 	bl	8011040 <_malloc_usable_size_r>
 8010798:	42a0      	cmp	r0, r4
 801079a:	d20f      	bcs.n	80107bc <_realloc_r+0x48>
 801079c:	4621      	mov	r1, r4
 801079e:	4638      	mov	r0, r7
 80107a0:	f7ff fda2 	bl	80102e8 <_malloc_r>
 80107a4:	4605      	mov	r5, r0
 80107a6:	2800      	cmp	r0, #0
 80107a8:	d0f2      	beq.n	8010790 <_realloc_r+0x1c>
 80107aa:	4631      	mov	r1, r6
 80107ac:	4622      	mov	r2, r4
 80107ae:	f7fc f995 	bl	800cadc <memcpy>
 80107b2:	4631      	mov	r1, r6
 80107b4:	4638      	mov	r0, r7
 80107b6:	f7ff fd47 	bl	8010248 <_free_r>
 80107ba:	e7e9      	b.n	8010790 <_realloc_r+0x1c>
 80107bc:	4635      	mov	r5, r6
 80107be:	e7e7      	b.n	8010790 <_realloc_r+0x1c>

080107c0 <__sfputc_r>:
 80107c0:	6893      	ldr	r3, [r2, #8]
 80107c2:	3b01      	subs	r3, #1
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	b410      	push	{r4}
 80107c8:	6093      	str	r3, [r2, #8]
 80107ca:	da08      	bge.n	80107de <__sfputc_r+0x1e>
 80107cc:	6994      	ldr	r4, [r2, #24]
 80107ce:	42a3      	cmp	r3, r4
 80107d0:	db01      	blt.n	80107d6 <__sfputc_r+0x16>
 80107d2:	290a      	cmp	r1, #10
 80107d4:	d103      	bne.n	80107de <__sfputc_r+0x1e>
 80107d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107da:	f000 b94b 	b.w	8010a74 <__swbuf_r>
 80107de:	6813      	ldr	r3, [r2, #0]
 80107e0:	1c58      	adds	r0, r3, #1
 80107e2:	6010      	str	r0, [r2, #0]
 80107e4:	7019      	strb	r1, [r3, #0]
 80107e6:	4608      	mov	r0, r1
 80107e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107ec:	4770      	bx	lr

080107ee <__sfputs_r>:
 80107ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107f0:	4606      	mov	r6, r0
 80107f2:	460f      	mov	r7, r1
 80107f4:	4614      	mov	r4, r2
 80107f6:	18d5      	adds	r5, r2, r3
 80107f8:	42ac      	cmp	r4, r5
 80107fa:	d101      	bne.n	8010800 <__sfputs_r+0x12>
 80107fc:	2000      	movs	r0, #0
 80107fe:	e007      	b.n	8010810 <__sfputs_r+0x22>
 8010800:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010804:	463a      	mov	r2, r7
 8010806:	4630      	mov	r0, r6
 8010808:	f7ff ffda 	bl	80107c0 <__sfputc_r>
 801080c:	1c43      	adds	r3, r0, #1
 801080e:	d1f3      	bne.n	80107f8 <__sfputs_r+0xa>
 8010810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010814 <_vfiprintf_r>:
 8010814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010818:	460d      	mov	r5, r1
 801081a:	b09d      	sub	sp, #116	; 0x74
 801081c:	4614      	mov	r4, r2
 801081e:	4698      	mov	r8, r3
 8010820:	4606      	mov	r6, r0
 8010822:	b118      	cbz	r0, 801082c <_vfiprintf_r+0x18>
 8010824:	6983      	ldr	r3, [r0, #24]
 8010826:	b90b      	cbnz	r3, 801082c <_vfiprintf_r+0x18>
 8010828:	f000 fb06 	bl	8010e38 <__sinit>
 801082c:	4b89      	ldr	r3, [pc, #548]	; (8010a54 <_vfiprintf_r+0x240>)
 801082e:	429d      	cmp	r5, r3
 8010830:	d11b      	bne.n	801086a <_vfiprintf_r+0x56>
 8010832:	6875      	ldr	r5, [r6, #4]
 8010834:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010836:	07d9      	lsls	r1, r3, #31
 8010838:	d405      	bmi.n	8010846 <_vfiprintf_r+0x32>
 801083a:	89ab      	ldrh	r3, [r5, #12]
 801083c:	059a      	lsls	r2, r3, #22
 801083e:	d402      	bmi.n	8010846 <_vfiprintf_r+0x32>
 8010840:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010842:	f000 fb97 	bl	8010f74 <__retarget_lock_acquire_recursive>
 8010846:	89ab      	ldrh	r3, [r5, #12]
 8010848:	071b      	lsls	r3, r3, #28
 801084a:	d501      	bpl.n	8010850 <_vfiprintf_r+0x3c>
 801084c:	692b      	ldr	r3, [r5, #16]
 801084e:	b9eb      	cbnz	r3, 801088c <_vfiprintf_r+0x78>
 8010850:	4629      	mov	r1, r5
 8010852:	4630      	mov	r0, r6
 8010854:	f000 f960 	bl	8010b18 <__swsetup_r>
 8010858:	b1c0      	cbz	r0, 801088c <_vfiprintf_r+0x78>
 801085a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801085c:	07dc      	lsls	r4, r3, #31
 801085e:	d50e      	bpl.n	801087e <_vfiprintf_r+0x6a>
 8010860:	f04f 30ff 	mov.w	r0, #4294967295
 8010864:	b01d      	add	sp, #116	; 0x74
 8010866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801086a:	4b7b      	ldr	r3, [pc, #492]	; (8010a58 <_vfiprintf_r+0x244>)
 801086c:	429d      	cmp	r5, r3
 801086e:	d101      	bne.n	8010874 <_vfiprintf_r+0x60>
 8010870:	68b5      	ldr	r5, [r6, #8]
 8010872:	e7df      	b.n	8010834 <_vfiprintf_r+0x20>
 8010874:	4b79      	ldr	r3, [pc, #484]	; (8010a5c <_vfiprintf_r+0x248>)
 8010876:	429d      	cmp	r5, r3
 8010878:	bf08      	it	eq
 801087a:	68f5      	ldreq	r5, [r6, #12]
 801087c:	e7da      	b.n	8010834 <_vfiprintf_r+0x20>
 801087e:	89ab      	ldrh	r3, [r5, #12]
 8010880:	0598      	lsls	r0, r3, #22
 8010882:	d4ed      	bmi.n	8010860 <_vfiprintf_r+0x4c>
 8010884:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010886:	f000 fb76 	bl	8010f76 <__retarget_lock_release_recursive>
 801088a:	e7e9      	b.n	8010860 <_vfiprintf_r+0x4c>
 801088c:	2300      	movs	r3, #0
 801088e:	9309      	str	r3, [sp, #36]	; 0x24
 8010890:	2320      	movs	r3, #32
 8010892:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010896:	f8cd 800c 	str.w	r8, [sp, #12]
 801089a:	2330      	movs	r3, #48	; 0x30
 801089c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010a60 <_vfiprintf_r+0x24c>
 80108a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80108a4:	f04f 0901 	mov.w	r9, #1
 80108a8:	4623      	mov	r3, r4
 80108aa:	469a      	mov	sl, r3
 80108ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80108b0:	b10a      	cbz	r2, 80108b6 <_vfiprintf_r+0xa2>
 80108b2:	2a25      	cmp	r2, #37	; 0x25
 80108b4:	d1f9      	bne.n	80108aa <_vfiprintf_r+0x96>
 80108b6:	ebba 0b04 	subs.w	fp, sl, r4
 80108ba:	d00b      	beq.n	80108d4 <_vfiprintf_r+0xc0>
 80108bc:	465b      	mov	r3, fp
 80108be:	4622      	mov	r2, r4
 80108c0:	4629      	mov	r1, r5
 80108c2:	4630      	mov	r0, r6
 80108c4:	f7ff ff93 	bl	80107ee <__sfputs_r>
 80108c8:	3001      	adds	r0, #1
 80108ca:	f000 80aa 	beq.w	8010a22 <_vfiprintf_r+0x20e>
 80108ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80108d0:	445a      	add	r2, fp
 80108d2:	9209      	str	r2, [sp, #36]	; 0x24
 80108d4:	f89a 3000 	ldrb.w	r3, [sl]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	f000 80a2 	beq.w	8010a22 <_vfiprintf_r+0x20e>
 80108de:	2300      	movs	r3, #0
 80108e0:	f04f 32ff 	mov.w	r2, #4294967295
 80108e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80108e8:	f10a 0a01 	add.w	sl, sl, #1
 80108ec:	9304      	str	r3, [sp, #16]
 80108ee:	9307      	str	r3, [sp, #28]
 80108f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80108f4:	931a      	str	r3, [sp, #104]	; 0x68
 80108f6:	4654      	mov	r4, sl
 80108f8:	2205      	movs	r2, #5
 80108fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108fe:	4858      	ldr	r0, [pc, #352]	; (8010a60 <_vfiprintf_r+0x24c>)
 8010900:	f7ef fcf6 	bl	80002f0 <memchr>
 8010904:	9a04      	ldr	r2, [sp, #16]
 8010906:	b9d8      	cbnz	r0, 8010940 <_vfiprintf_r+0x12c>
 8010908:	06d1      	lsls	r1, r2, #27
 801090a:	bf44      	itt	mi
 801090c:	2320      	movmi	r3, #32
 801090e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010912:	0713      	lsls	r3, r2, #28
 8010914:	bf44      	itt	mi
 8010916:	232b      	movmi	r3, #43	; 0x2b
 8010918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801091c:	f89a 3000 	ldrb.w	r3, [sl]
 8010920:	2b2a      	cmp	r3, #42	; 0x2a
 8010922:	d015      	beq.n	8010950 <_vfiprintf_r+0x13c>
 8010924:	9a07      	ldr	r2, [sp, #28]
 8010926:	4654      	mov	r4, sl
 8010928:	2000      	movs	r0, #0
 801092a:	f04f 0c0a 	mov.w	ip, #10
 801092e:	4621      	mov	r1, r4
 8010930:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010934:	3b30      	subs	r3, #48	; 0x30
 8010936:	2b09      	cmp	r3, #9
 8010938:	d94e      	bls.n	80109d8 <_vfiprintf_r+0x1c4>
 801093a:	b1b0      	cbz	r0, 801096a <_vfiprintf_r+0x156>
 801093c:	9207      	str	r2, [sp, #28]
 801093e:	e014      	b.n	801096a <_vfiprintf_r+0x156>
 8010940:	eba0 0308 	sub.w	r3, r0, r8
 8010944:	fa09 f303 	lsl.w	r3, r9, r3
 8010948:	4313      	orrs	r3, r2
 801094a:	9304      	str	r3, [sp, #16]
 801094c:	46a2      	mov	sl, r4
 801094e:	e7d2      	b.n	80108f6 <_vfiprintf_r+0xe2>
 8010950:	9b03      	ldr	r3, [sp, #12]
 8010952:	1d19      	adds	r1, r3, #4
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	9103      	str	r1, [sp, #12]
 8010958:	2b00      	cmp	r3, #0
 801095a:	bfbb      	ittet	lt
 801095c:	425b      	neglt	r3, r3
 801095e:	f042 0202 	orrlt.w	r2, r2, #2
 8010962:	9307      	strge	r3, [sp, #28]
 8010964:	9307      	strlt	r3, [sp, #28]
 8010966:	bfb8      	it	lt
 8010968:	9204      	strlt	r2, [sp, #16]
 801096a:	7823      	ldrb	r3, [r4, #0]
 801096c:	2b2e      	cmp	r3, #46	; 0x2e
 801096e:	d10c      	bne.n	801098a <_vfiprintf_r+0x176>
 8010970:	7863      	ldrb	r3, [r4, #1]
 8010972:	2b2a      	cmp	r3, #42	; 0x2a
 8010974:	d135      	bne.n	80109e2 <_vfiprintf_r+0x1ce>
 8010976:	9b03      	ldr	r3, [sp, #12]
 8010978:	1d1a      	adds	r2, r3, #4
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	9203      	str	r2, [sp, #12]
 801097e:	2b00      	cmp	r3, #0
 8010980:	bfb8      	it	lt
 8010982:	f04f 33ff 	movlt.w	r3, #4294967295
 8010986:	3402      	adds	r4, #2
 8010988:	9305      	str	r3, [sp, #20]
 801098a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010a70 <_vfiprintf_r+0x25c>
 801098e:	7821      	ldrb	r1, [r4, #0]
 8010990:	2203      	movs	r2, #3
 8010992:	4650      	mov	r0, sl
 8010994:	f7ef fcac 	bl	80002f0 <memchr>
 8010998:	b140      	cbz	r0, 80109ac <_vfiprintf_r+0x198>
 801099a:	2340      	movs	r3, #64	; 0x40
 801099c:	eba0 000a 	sub.w	r0, r0, sl
 80109a0:	fa03 f000 	lsl.w	r0, r3, r0
 80109a4:	9b04      	ldr	r3, [sp, #16]
 80109a6:	4303      	orrs	r3, r0
 80109a8:	3401      	adds	r4, #1
 80109aa:	9304      	str	r3, [sp, #16]
 80109ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109b0:	482c      	ldr	r0, [pc, #176]	; (8010a64 <_vfiprintf_r+0x250>)
 80109b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80109b6:	2206      	movs	r2, #6
 80109b8:	f7ef fc9a 	bl	80002f0 <memchr>
 80109bc:	2800      	cmp	r0, #0
 80109be:	d03f      	beq.n	8010a40 <_vfiprintf_r+0x22c>
 80109c0:	4b29      	ldr	r3, [pc, #164]	; (8010a68 <_vfiprintf_r+0x254>)
 80109c2:	bb1b      	cbnz	r3, 8010a0c <_vfiprintf_r+0x1f8>
 80109c4:	9b03      	ldr	r3, [sp, #12]
 80109c6:	3307      	adds	r3, #7
 80109c8:	f023 0307 	bic.w	r3, r3, #7
 80109cc:	3308      	adds	r3, #8
 80109ce:	9303      	str	r3, [sp, #12]
 80109d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109d2:	443b      	add	r3, r7
 80109d4:	9309      	str	r3, [sp, #36]	; 0x24
 80109d6:	e767      	b.n	80108a8 <_vfiprintf_r+0x94>
 80109d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80109dc:	460c      	mov	r4, r1
 80109de:	2001      	movs	r0, #1
 80109e0:	e7a5      	b.n	801092e <_vfiprintf_r+0x11a>
 80109e2:	2300      	movs	r3, #0
 80109e4:	3401      	adds	r4, #1
 80109e6:	9305      	str	r3, [sp, #20]
 80109e8:	4619      	mov	r1, r3
 80109ea:	f04f 0c0a 	mov.w	ip, #10
 80109ee:	4620      	mov	r0, r4
 80109f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80109f4:	3a30      	subs	r2, #48	; 0x30
 80109f6:	2a09      	cmp	r2, #9
 80109f8:	d903      	bls.n	8010a02 <_vfiprintf_r+0x1ee>
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d0c5      	beq.n	801098a <_vfiprintf_r+0x176>
 80109fe:	9105      	str	r1, [sp, #20]
 8010a00:	e7c3      	b.n	801098a <_vfiprintf_r+0x176>
 8010a02:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a06:	4604      	mov	r4, r0
 8010a08:	2301      	movs	r3, #1
 8010a0a:	e7f0      	b.n	80109ee <_vfiprintf_r+0x1da>
 8010a0c:	ab03      	add	r3, sp, #12
 8010a0e:	9300      	str	r3, [sp, #0]
 8010a10:	462a      	mov	r2, r5
 8010a12:	4b16      	ldr	r3, [pc, #88]	; (8010a6c <_vfiprintf_r+0x258>)
 8010a14:	a904      	add	r1, sp, #16
 8010a16:	4630      	mov	r0, r6
 8010a18:	f7fc f906 	bl	800cc28 <_printf_float>
 8010a1c:	4607      	mov	r7, r0
 8010a1e:	1c78      	adds	r0, r7, #1
 8010a20:	d1d6      	bne.n	80109d0 <_vfiprintf_r+0x1bc>
 8010a22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010a24:	07d9      	lsls	r1, r3, #31
 8010a26:	d405      	bmi.n	8010a34 <_vfiprintf_r+0x220>
 8010a28:	89ab      	ldrh	r3, [r5, #12]
 8010a2a:	059a      	lsls	r2, r3, #22
 8010a2c:	d402      	bmi.n	8010a34 <_vfiprintf_r+0x220>
 8010a2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a30:	f000 faa1 	bl	8010f76 <__retarget_lock_release_recursive>
 8010a34:	89ab      	ldrh	r3, [r5, #12]
 8010a36:	065b      	lsls	r3, r3, #25
 8010a38:	f53f af12 	bmi.w	8010860 <_vfiprintf_r+0x4c>
 8010a3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a3e:	e711      	b.n	8010864 <_vfiprintf_r+0x50>
 8010a40:	ab03      	add	r3, sp, #12
 8010a42:	9300      	str	r3, [sp, #0]
 8010a44:	462a      	mov	r2, r5
 8010a46:	4b09      	ldr	r3, [pc, #36]	; (8010a6c <_vfiprintf_r+0x258>)
 8010a48:	a904      	add	r1, sp, #16
 8010a4a:	4630      	mov	r0, r6
 8010a4c:	f7fc fb78 	bl	800d140 <_printf_i>
 8010a50:	e7e4      	b.n	8010a1c <_vfiprintf_r+0x208>
 8010a52:	bf00      	nop
 8010a54:	080119bc 	.word	0x080119bc
 8010a58:	080119dc 	.word	0x080119dc
 8010a5c:	0801199c 	.word	0x0801199c
 8010a60:	0801194c 	.word	0x0801194c
 8010a64:	08011956 	.word	0x08011956
 8010a68:	0800cc29 	.word	0x0800cc29
 8010a6c:	080107ef 	.word	0x080107ef
 8010a70:	08011952 	.word	0x08011952

08010a74 <__swbuf_r>:
 8010a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a76:	460e      	mov	r6, r1
 8010a78:	4614      	mov	r4, r2
 8010a7a:	4605      	mov	r5, r0
 8010a7c:	b118      	cbz	r0, 8010a86 <__swbuf_r+0x12>
 8010a7e:	6983      	ldr	r3, [r0, #24]
 8010a80:	b90b      	cbnz	r3, 8010a86 <__swbuf_r+0x12>
 8010a82:	f000 f9d9 	bl	8010e38 <__sinit>
 8010a86:	4b21      	ldr	r3, [pc, #132]	; (8010b0c <__swbuf_r+0x98>)
 8010a88:	429c      	cmp	r4, r3
 8010a8a:	d12b      	bne.n	8010ae4 <__swbuf_r+0x70>
 8010a8c:	686c      	ldr	r4, [r5, #4]
 8010a8e:	69a3      	ldr	r3, [r4, #24]
 8010a90:	60a3      	str	r3, [r4, #8]
 8010a92:	89a3      	ldrh	r3, [r4, #12]
 8010a94:	071a      	lsls	r2, r3, #28
 8010a96:	d52f      	bpl.n	8010af8 <__swbuf_r+0x84>
 8010a98:	6923      	ldr	r3, [r4, #16]
 8010a9a:	b36b      	cbz	r3, 8010af8 <__swbuf_r+0x84>
 8010a9c:	6923      	ldr	r3, [r4, #16]
 8010a9e:	6820      	ldr	r0, [r4, #0]
 8010aa0:	1ac0      	subs	r0, r0, r3
 8010aa2:	6963      	ldr	r3, [r4, #20]
 8010aa4:	b2f6      	uxtb	r6, r6
 8010aa6:	4283      	cmp	r3, r0
 8010aa8:	4637      	mov	r7, r6
 8010aaa:	dc04      	bgt.n	8010ab6 <__swbuf_r+0x42>
 8010aac:	4621      	mov	r1, r4
 8010aae:	4628      	mov	r0, r5
 8010ab0:	f000 f92e 	bl	8010d10 <_fflush_r>
 8010ab4:	bb30      	cbnz	r0, 8010b04 <__swbuf_r+0x90>
 8010ab6:	68a3      	ldr	r3, [r4, #8]
 8010ab8:	3b01      	subs	r3, #1
 8010aba:	60a3      	str	r3, [r4, #8]
 8010abc:	6823      	ldr	r3, [r4, #0]
 8010abe:	1c5a      	adds	r2, r3, #1
 8010ac0:	6022      	str	r2, [r4, #0]
 8010ac2:	701e      	strb	r6, [r3, #0]
 8010ac4:	6963      	ldr	r3, [r4, #20]
 8010ac6:	3001      	adds	r0, #1
 8010ac8:	4283      	cmp	r3, r0
 8010aca:	d004      	beq.n	8010ad6 <__swbuf_r+0x62>
 8010acc:	89a3      	ldrh	r3, [r4, #12]
 8010ace:	07db      	lsls	r3, r3, #31
 8010ad0:	d506      	bpl.n	8010ae0 <__swbuf_r+0x6c>
 8010ad2:	2e0a      	cmp	r6, #10
 8010ad4:	d104      	bne.n	8010ae0 <__swbuf_r+0x6c>
 8010ad6:	4621      	mov	r1, r4
 8010ad8:	4628      	mov	r0, r5
 8010ada:	f000 f919 	bl	8010d10 <_fflush_r>
 8010ade:	b988      	cbnz	r0, 8010b04 <__swbuf_r+0x90>
 8010ae0:	4638      	mov	r0, r7
 8010ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ae4:	4b0a      	ldr	r3, [pc, #40]	; (8010b10 <__swbuf_r+0x9c>)
 8010ae6:	429c      	cmp	r4, r3
 8010ae8:	d101      	bne.n	8010aee <__swbuf_r+0x7a>
 8010aea:	68ac      	ldr	r4, [r5, #8]
 8010aec:	e7cf      	b.n	8010a8e <__swbuf_r+0x1a>
 8010aee:	4b09      	ldr	r3, [pc, #36]	; (8010b14 <__swbuf_r+0xa0>)
 8010af0:	429c      	cmp	r4, r3
 8010af2:	bf08      	it	eq
 8010af4:	68ec      	ldreq	r4, [r5, #12]
 8010af6:	e7ca      	b.n	8010a8e <__swbuf_r+0x1a>
 8010af8:	4621      	mov	r1, r4
 8010afa:	4628      	mov	r0, r5
 8010afc:	f000 f80c 	bl	8010b18 <__swsetup_r>
 8010b00:	2800      	cmp	r0, #0
 8010b02:	d0cb      	beq.n	8010a9c <__swbuf_r+0x28>
 8010b04:	f04f 37ff 	mov.w	r7, #4294967295
 8010b08:	e7ea      	b.n	8010ae0 <__swbuf_r+0x6c>
 8010b0a:	bf00      	nop
 8010b0c:	080119bc 	.word	0x080119bc
 8010b10:	080119dc 	.word	0x080119dc
 8010b14:	0801199c 	.word	0x0801199c

08010b18 <__swsetup_r>:
 8010b18:	4b32      	ldr	r3, [pc, #200]	; (8010be4 <__swsetup_r+0xcc>)
 8010b1a:	b570      	push	{r4, r5, r6, lr}
 8010b1c:	681d      	ldr	r5, [r3, #0]
 8010b1e:	4606      	mov	r6, r0
 8010b20:	460c      	mov	r4, r1
 8010b22:	b125      	cbz	r5, 8010b2e <__swsetup_r+0x16>
 8010b24:	69ab      	ldr	r3, [r5, #24]
 8010b26:	b913      	cbnz	r3, 8010b2e <__swsetup_r+0x16>
 8010b28:	4628      	mov	r0, r5
 8010b2a:	f000 f985 	bl	8010e38 <__sinit>
 8010b2e:	4b2e      	ldr	r3, [pc, #184]	; (8010be8 <__swsetup_r+0xd0>)
 8010b30:	429c      	cmp	r4, r3
 8010b32:	d10f      	bne.n	8010b54 <__swsetup_r+0x3c>
 8010b34:	686c      	ldr	r4, [r5, #4]
 8010b36:	89a3      	ldrh	r3, [r4, #12]
 8010b38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010b3c:	0719      	lsls	r1, r3, #28
 8010b3e:	d42c      	bmi.n	8010b9a <__swsetup_r+0x82>
 8010b40:	06dd      	lsls	r5, r3, #27
 8010b42:	d411      	bmi.n	8010b68 <__swsetup_r+0x50>
 8010b44:	2309      	movs	r3, #9
 8010b46:	6033      	str	r3, [r6, #0]
 8010b48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010b4c:	81a3      	strh	r3, [r4, #12]
 8010b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8010b52:	e03e      	b.n	8010bd2 <__swsetup_r+0xba>
 8010b54:	4b25      	ldr	r3, [pc, #148]	; (8010bec <__swsetup_r+0xd4>)
 8010b56:	429c      	cmp	r4, r3
 8010b58:	d101      	bne.n	8010b5e <__swsetup_r+0x46>
 8010b5a:	68ac      	ldr	r4, [r5, #8]
 8010b5c:	e7eb      	b.n	8010b36 <__swsetup_r+0x1e>
 8010b5e:	4b24      	ldr	r3, [pc, #144]	; (8010bf0 <__swsetup_r+0xd8>)
 8010b60:	429c      	cmp	r4, r3
 8010b62:	bf08      	it	eq
 8010b64:	68ec      	ldreq	r4, [r5, #12]
 8010b66:	e7e6      	b.n	8010b36 <__swsetup_r+0x1e>
 8010b68:	0758      	lsls	r0, r3, #29
 8010b6a:	d512      	bpl.n	8010b92 <__swsetup_r+0x7a>
 8010b6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010b6e:	b141      	cbz	r1, 8010b82 <__swsetup_r+0x6a>
 8010b70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010b74:	4299      	cmp	r1, r3
 8010b76:	d002      	beq.n	8010b7e <__swsetup_r+0x66>
 8010b78:	4630      	mov	r0, r6
 8010b7a:	f7ff fb65 	bl	8010248 <_free_r>
 8010b7e:	2300      	movs	r3, #0
 8010b80:	6363      	str	r3, [r4, #52]	; 0x34
 8010b82:	89a3      	ldrh	r3, [r4, #12]
 8010b84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010b88:	81a3      	strh	r3, [r4, #12]
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	6063      	str	r3, [r4, #4]
 8010b8e:	6923      	ldr	r3, [r4, #16]
 8010b90:	6023      	str	r3, [r4, #0]
 8010b92:	89a3      	ldrh	r3, [r4, #12]
 8010b94:	f043 0308 	orr.w	r3, r3, #8
 8010b98:	81a3      	strh	r3, [r4, #12]
 8010b9a:	6923      	ldr	r3, [r4, #16]
 8010b9c:	b94b      	cbnz	r3, 8010bb2 <__swsetup_r+0x9a>
 8010b9e:	89a3      	ldrh	r3, [r4, #12]
 8010ba0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ba8:	d003      	beq.n	8010bb2 <__swsetup_r+0x9a>
 8010baa:	4621      	mov	r1, r4
 8010bac:	4630      	mov	r0, r6
 8010bae:	f000 fa07 	bl	8010fc0 <__smakebuf_r>
 8010bb2:	89a0      	ldrh	r0, [r4, #12]
 8010bb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010bb8:	f010 0301 	ands.w	r3, r0, #1
 8010bbc:	d00a      	beq.n	8010bd4 <__swsetup_r+0xbc>
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	60a3      	str	r3, [r4, #8]
 8010bc2:	6963      	ldr	r3, [r4, #20]
 8010bc4:	425b      	negs	r3, r3
 8010bc6:	61a3      	str	r3, [r4, #24]
 8010bc8:	6923      	ldr	r3, [r4, #16]
 8010bca:	b943      	cbnz	r3, 8010bde <__swsetup_r+0xc6>
 8010bcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010bd0:	d1ba      	bne.n	8010b48 <__swsetup_r+0x30>
 8010bd2:	bd70      	pop	{r4, r5, r6, pc}
 8010bd4:	0781      	lsls	r1, r0, #30
 8010bd6:	bf58      	it	pl
 8010bd8:	6963      	ldrpl	r3, [r4, #20]
 8010bda:	60a3      	str	r3, [r4, #8]
 8010bdc:	e7f4      	b.n	8010bc8 <__swsetup_r+0xb0>
 8010bde:	2000      	movs	r0, #0
 8010be0:	e7f7      	b.n	8010bd2 <__swsetup_r+0xba>
 8010be2:	bf00      	nop
 8010be4:	24000014 	.word	0x24000014
 8010be8:	080119bc 	.word	0x080119bc
 8010bec:	080119dc 	.word	0x080119dc
 8010bf0:	0801199c 	.word	0x0801199c

08010bf4 <abort>:
 8010bf4:	b508      	push	{r3, lr}
 8010bf6:	2006      	movs	r0, #6
 8010bf8:	f000 fa52 	bl	80110a0 <raise>
 8010bfc:	2001      	movs	r0, #1
 8010bfe:	f7f1 f937 	bl	8001e70 <_exit>
	...

08010c04 <__sflush_r>:
 8010c04:	898a      	ldrh	r2, [r1, #12]
 8010c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c0a:	4605      	mov	r5, r0
 8010c0c:	0710      	lsls	r0, r2, #28
 8010c0e:	460c      	mov	r4, r1
 8010c10:	d458      	bmi.n	8010cc4 <__sflush_r+0xc0>
 8010c12:	684b      	ldr	r3, [r1, #4]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	dc05      	bgt.n	8010c24 <__sflush_r+0x20>
 8010c18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	dc02      	bgt.n	8010c24 <__sflush_r+0x20>
 8010c1e:	2000      	movs	r0, #0
 8010c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010c26:	2e00      	cmp	r6, #0
 8010c28:	d0f9      	beq.n	8010c1e <__sflush_r+0x1a>
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010c30:	682f      	ldr	r7, [r5, #0]
 8010c32:	602b      	str	r3, [r5, #0]
 8010c34:	d032      	beq.n	8010c9c <__sflush_r+0x98>
 8010c36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010c38:	89a3      	ldrh	r3, [r4, #12]
 8010c3a:	075a      	lsls	r2, r3, #29
 8010c3c:	d505      	bpl.n	8010c4a <__sflush_r+0x46>
 8010c3e:	6863      	ldr	r3, [r4, #4]
 8010c40:	1ac0      	subs	r0, r0, r3
 8010c42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010c44:	b10b      	cbz	r3, 8010c4a <__sflush_r+0x46>
 8010c46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010c48:	1ac0      	subs	r0, r0, r3
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	4602      	mov	r2, r0
 8010c4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010c50:	6a21      	ldr	r1, [r4, #32]
 8010c52:	4628      	mov	r0, r5
 8010c54:	47b0      	blx	r6
 8010c56:	1c43      	adds	r3, r0, #1
 8010c58:	89a3      	ldrh	r3, [r4, #12]
 8010c5a:	d106      	bne.n	8010c6a <__sflush_r+0x66>
 8010c5c:	6829      	ldr	r1, [r5, #0]
 8010c5e:	291d      	cmp	r1, #29
 8010c60:	d82c      	bhi.n	8010cbc <__sflush_r+0xb8>
 8010c62:	4a2a      	ldr	r2, [pc, #168]	; (8010d0c <__sflush_r+0x108>)
 8010c64:	40ca      	lsrs	r2, r1
 8010c66:	07d6      	lsls	r6, r2, #31
 8010c68:	d528      	bpl.n	8010cbc <__sflush_r+0xb8>
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	6062      	str	r2, [r4, #4]
 8010c6e:	04d9      	lsls	r1, r3, #19
 8010c70:	6922      	ldr	r2, [r4, #16]
 8010c72:	6022      	str	r2, [r4, #0]
 8010c74:	d504      	bpl.n	8010c80 <__sflush_r+0x7c>
 8010c76:	1c42      	adds	r2, r0, #1
 8010c78:	d101      	bne.n	8010c7e <__sflush_r+0x7a>
 8010c7a:	682b      	ldr	r3, [r5, #0]
 8010c7c:	b903      	cbnz	r3, 8010c80 <__sflush_r+0x7c>
 8010c7e:	6560      	str	r0, [r4, #84]	; 0x54
 8010c80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010c82:	602f      	str	r7, [r5, #0]
 8010c84:	2900      	cmp	r1, #0
 8010c86:	d0ca      	beq.n	8010c1e <__sflush_r+0x1a>
 8010c88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010c8c:	4299      	cmp	r1, r3
 8010c8e:	d002      	beq.n	8010c96 <__sflush_r+0x92>
 8010c90:	4628      	mov	r0, r5
 8010c92:	f7ff fad9 	bl	8010248 <_free_r>
 8010c96:	2000      	movs	r0, #0
 8010c98:	6360      	str	r0, [r4, #52]	; 0x34
 8010c9a:	e7c1      	b.n	8010c20 <__sflush_r+0x1c>
 8010c9c:	6a21      	ldr	r1, [r4, #32]
 8010c9e:	2301      	movs	r3, #1
 8010ca0:	4628      	mov	r0, r5
 8010ca2:	47b0      	blx	r6
 8010ca4:	1c41      	adds	r1, r0, #1
 8010ca6:	d1c7      	bne.n	8010c38 <__sflush_r+0x34>
 8010ca8:	682b      	ldr	r3, [r5, #0]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d0c4      	beq.n	8010c38 <__sflush_r+0x34>
 8010cae:	2b1d      	cmp	r3, #29
 8010cb0:	d001      	beq.n	8010cb6 <__sflush_r+0xb2>
 8010cb2:	2b16      	cmp	r3, #22
 8010cb4:	d101      	bne.n	8010cba <__sflush_r+0xb6>
 8010cb6:	602f      	str	r7, [r5, #0]
 8010cb8:	e7b1      	b.n	8010c1e <__sflush_r+0x1a>
 8010cba:	89a3      	ldrh	r3, [r4, #12]
 8010cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010cc0:	81a3      	strh	r3, [r4, #12]
 8010cc2:	e7ad      	b.n	8010c20 <__sflush_r+0x1c>
 8010cc4:	690f      	ldr	r7, [r1, #16]
 8010cc6:	2f00      	cmp	r7, #0
 8010cc8:	d0a9      	beq.n	8010c1e <__sflush_r+0x1a>
 8010cca:	0793      	lsls	r3, r2, #30
 8010ccc:	680e      	ldr	r6, [r1, #0]
 8010cce:	bf08      	it	eq
 8010cd0:	694b      	ldreq	r3, [r1, #20]
 8010cd2:	600f      	str	r7, [r1, #0]
 8010cd4:	bf18      	it	ne
 8010cd6:	2300      	movne	r3, #0
 8010cd8:	eba6 0807 	sub.w	r8, r6, r7
 8010cdc:	608b      	str	r3, [r1, #8]
 8010cde:	f1b8 0f00 	cmp.w	r8, #0
 8010ce2:	dd9c      	ble.n	8010c1e <__sflush_r+0x1a>
 8010ce4:	6a21      	ldr	r1, [r4, #32]
 8010ce6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010ce8:	4643      	mov	r3, r8
 8010cea:	463a      	mov	r2, r7
 8010cec:	4628      	mov	r0, r5
 8010cee:	47b0      	blx	r6
 8010cf0:	2800      	cmp	r0, #0
 8010cf2:	dc06      	bgt.n	8010d02 <__sflush_r+0xfe>
 8010cf4:	89a3      	ldrh	r3, [r4, #12]
 8010cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010cfa:	81a3      	strh	r3, [r4, #12]
 8010cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8010d00:	e78e      	b.n	8010c20 <__sflush_r+0x1c>
 8010d02:	4407      	add	r7, r0
 8010d04:	eba8 0800 	sub.w	r8, r8, r0
 8010d08:	e7e9      	b.n	8010cde <__sflush_r+0xda>
 8010d0a:	bf00      	nop
 8010d0c:	20400001 	.word	0x20400001

08010d10 <_fflush_r>:
 8010d10:	b538      	push	{r3, r4, r5, lr}
 8010d12:	690b      	ldr	r3, [r1, #16]
 8010d14:	4605      	mov	r5, r0
 8010d16:	460c      	mov	r4, r1
 8010d18:	b913      	cbnz	r3, 8010d20 <_fflush_r+0x10>
 8010d1a:	2500      	movs	r5, #0
 8010d1c:	4628      	mov	r0, r5
 8010d1e:	bd38      	pop	{r3, r4, r5, pc}
 8010d20:	b118      	cbz	r0, 8010d2a <_fflush_r+0x1a>
 8010d22:	6983      	ldr	r3, [r0, #24]
 8010d24:	b90b      	cbnz	r3, 8010d2a <_fflush_r+0x1a>
 8010d26:	f000 f887 	bl	8010e38 <__sinit>
 8010d2a:	4b14      	ldr	r3, [pc, #80]	; (8010d7c <_fflush_r+0x6c>)
 8010d2c:	429c      	cmp	r4, r3
 8010d2e:	d11b      	bne.n	8010d68 <_fflush_r+0x58>
 8010d30:	686c      	ldr	r4, [r5, #4]
 8010d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d0ef      	beq.n	8010d1a <_fflush_r+0xa>
 8010d3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010d3c:	07d0      	lsls	r0, r2, #31
 8010d3e:	d404      	bmi.n	8010d4a <_fflush_r+0x3a>
 8010d40:	0599      	lsls	r1, r3, #22
 8010d42:	d402      	bmi.n	8010d4a <_fflush_r+0x3a>
 8010d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d46:	f000 f915 	bl	8010f74 <__retarget_lock_acquire_recursive>
 8010d4a:	4628      	mov	r0, r5
 8010d4c:	4621      	mov	r1, r4
 8010d4e:	f7ff ff59 	bl	8010c04 <__sflush_r>
 8010d52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010d54:	07da      	lsls	r2, r3, #31
 8010d56:	4605      	mov	r5, r0
 8010d58:	d4e0      	bmi.n	8010d1c <_fflush_r+0xc>
 8010d5a:	89a3      	ldrh	r3, [r4, #12]
 8010d5c:	059b      	lsls	r3, r3, #22
 8010d5e:	d4dd      	bmi.n	8010d1c <_fflush_r+0xc>
 8010d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d62:	f000 f908 	bl	8010f76 <__retarget_lock_release_recursive>
 8010d66:	e7d9      	b.n	8010d1c <_fflush_r+0xc>
 8010d68:	4b05      	ldr	r3, [pc, #20]	; (8010d80 <_fflush_r+0x70>)
 8010d6a:	429c      	cmp	r4, r3
 8010d6c:	d101      	bne.n	8010d72 <_fflush_r+0x62>
 8010d6e:	68ac      	ldr	r4, [r5, #8]
 8010d70:	e7df      	b.n	8010d32 <_fflush_r+0x22>
 8010d72:	4b04      	ldr	r3, [pc, #16]	; (8010d84 <_fflush_r+0x74>)
 8010d74:	429c      	cmp	r4, r3
 8010d76:	bf08      	it	eq
 8010d78:	68ec      	ldreq	r4, [r5, #12]
 8010d7a:	e7da      	b.n	8010d32 <_fflush_r+0x22>
 8010d7c:	080119bc 	.word	0x080119bc
 8010d80:	080119dc 	.word	0x080119dc
 8010d84:	0801199c 	.word	0x0801199c

08010d88 <std>:
 8010d88:	2300      	movs	r3, #0
 8010d8a:	b510      	push	{r4, lr}
 8010d8c:	4604      	mov	r4, r0
 8010d8e:	e9c0 3300 	strd	r3, r3, [r0]
 8010d92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010d96:	6083      	str	r3, [r0, #8]
 8010d98:	8181      	strh	r1, [r0, #12]
 8010d9a:	6643      	str	r3, [r0, #100]	; 0x64
 8010d9c:	81c2      	strh	r2, [r0, #14]
 8010d9e:	6183      	str	r3, [r0, #24]
 8010da0:	4619      	mov	r1, r3
 8010da2:	2208      	movs	r2, #8
 8010da4:	305c      	adds	r0, #92	; 0x5c
 8010da6:	f7fb fea7 	bl	800caf8 <memset>
 8010daa:	4b05      	ldr	r3, [pc, #20]	; (8010dc0 <std+0x38>)
 8010dac:	6263      	str	r3, [r4, #36]	; 0x24
 8010dae:	4b05      	ldr	r3, [pc, #20]	; (8010dc4 <std+0x3c>)
 8010db0:	62a3      	str	r3, [r4, #40]	; 0x28
 8010db2:	4b05      	ldr	r3, [pc, #20]	; (8010dc8 <std+0x40>)
 8010db4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010db6:	4b05      	ldr	r3, [pc, #20]	; (8010dcc <std+0x44>)
 8010db8:	6224      	str	r4, [r4, #32]
 8010dba:	6323      	str	r3, [r4, #48]	; 0x30
 8010dbc:	bd10      	pop	{r4, pc}
 8010dbe:	bf00      	nop
 8010dc0:	080110d9 	.word	0x080110d9
 8010dc4:	080110fb 	.word	0x080110fb
 8010dc8:	08011133 	.word	0x08011133
 8010dcc:	08011157 	.word	0x08011157

08010dd0 <_cleanup_r>:
 8010dd0:	4901      	ldr	r1, [pc, #4]	; (8010dd8 <_cleanup_r+0x8>)
 8010dd2:	f000 b8af 	b.w	8010f34 <_fwalk_reent>
 8010dd6:	bf00      	nop
 8010dd8:	08010d11 	.word	0x08010d11

08010ddc <__sfmoreglue>:
 8010ddc:	b570      	push	{r4, r5, r6, lr}
 8010dde:	1e4a      	subs	r2, r1, #1
 8010de0:	2568      	movs	r5, #104	; 0x68
 8010de2:	4355      	muls	r5, r2
 8010de4:	460e      	mov	r6, r1
 8010de6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010dea:	f7ff fa7d 	bl	80102e8 <_malloc_r>
 8010dee:	4604      	mov	r4, r0
 8010df0:	b140      	cbz	r0, 8010e04 <__sfmoreglue+0x28>
 8010df2:	2100      	movs	r1, #0
 8010df4:	e9c0 1600 	strd	r1, r6, [r0]
 8010df8:	300c      	adds	r0, #12
 8010dfa:	60a0      	str	r0, [r4, #8]
 8010dfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010e00:	f7fb fe7a 	bl	800caf8 <memset>
 8010e04:	4620      	mov	r0, r4
 8010e06:	bd70      	pop	{r4, r5, r6, pc}

08010e08 <__sfp_lock_acquire>:
 8010e08:	4801      	ldr	r0, [pc, #4]	; (8010e10 <__sfp_lock_acquire+0x8>)
 8010e0a:	f000 b8b3 	b.w	8010f74 <__retarget_lock_acquire_recursive>
 8010e0e:	bf00      	nop
 8010e10:	2400516c 	.word	0x2400516c

08010e14 <__sfp_lock_release>:
 8010e14:	4801      	ldr	r0, [pc, #4]	; (8010e1c <__sfp_lock_release+0x8>)
 8010e16:	f000 b8ae 	b.w	8010f76 <__retarget_lock_release_recursive>
 8010e1a:	bf00      	nop
 8010e1c:	2400516c 	.word	0x2400516c

08010e20 <__sinit_lock_acquire>:
 8010e20:	4801      	ldr	r0, [pc, #4]	; (8010e28 <__sinit_lock_acquire+0x8>)
 8010e22:	f000 b8a7 	b.w	8010f74 <__retarget_lock_acquire_recursive>
 8010e26:	bf00      	nop
 8010e28:	24005167 	.word	0x24005167

08010e2c <__sinit_lock_release>:
 8010e2c:	4801      	ldr	r0, [pc, #4]	; (8010e34 <__sinit_lock_release+0x8>)
 8010e2e:	f000 b8a2 	b.w	8010f76 <__retarget_lock_release_recursive>
 8010e32:	bf00      	nop
 8010e34:	24005167 	.word	0x24005167

08010e38 <__sinit>:
 8010e38:	b510      	push	{r4, lr}
 8010e3a:	4604      	mov	r4, r0
 8010e3c:	f7ff fff0 	bl	8010e20 <__sinit_lock_acquire>
 8010e40:	69a3      	ldr	r3, [r4, #24]
 8010e42:	b11b      	cbz	r3, 8010e4c <__sinit+0x14>
 8010e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e48:	f7ff bff0 	b.w	8010e2c <__sinit_lock_release>
 8010e4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010e50:	6523      	str	r3, [r4, #80]	; 0x50
 8010e52:	4b13      	ldr	r3, [pc, #76]	; (8010ea0 <__sinit+0x68>)
 8010e54:	4a13      	ldr	r2, [pc, #76]	; (8010ea4 <__sinit+0x6c>)
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	62a2      	str	r2, [r4, #40]	; 0x28
 8010e5a:	42a3      	cmp	r3, r4
 8010e5c:	bf04      	itt	eq
 8010e5e:	2301      	moveq	r3, #1
 8010e60:	61a3      	streq	r3, [r4, #24]
 8010e62:	4620      	mov	r0, r4
 8010e64:	f000 f820 	bl	8010ea8 <__sfp>
 8010e68:	6060      	str	r0, [r4, #4]
 8010e6a:	4620      	mov	r0, r4
 8010e6c:	f000 f81c 	bl	8010ea8 <__sfp>
 8010e70:	60a0      	str	r0, [r4, #8]
 8010e72:	4620      	mov	r0, r4
 8010e74:	f000 f818 	bl	8010ea8 <__sfp>
 8010e78:	2200      	movs	r2, #0
 8010e7a:	60e0      	str	r0, [r4, #12]
 8010e7c:	2104      	movs	r1, #4
 8010e7e:	6860      	ldr	r0, [r4, #4]
 8010e80:	f7ff ff82 	bl	8010d88 <std>
 8010e84:	68a0      	ldr	r0, [r4, #8]
 8010e86:	2201      	movs	r2, #1
 8010e88:	2109      	movs	r1, #9
 8010e8a:	f7ff ff7d 	bl	8010d88 <std>
 8010e8e:	68e0      	ldr	r0, [r4, #12]
 8010e90:	2202      	movs	r2, #2
 8010e92:	2112      	movs	r1, #18
 8010e94:	f7ff ff78 	bl	8010d88 <std>
 8010e98:	2301      	movs	r3, #1
 8010e9a:	61a3      	str	r3, [r4, #24]
 8010e9c:	e7d2      	b.n	8010e44 <__sinit+0xc>
 8010e9e:	bf00      	nop
 8010ea0:	08011528 	.word	0x08011528
 8010ea4:	08010dd1 	.word	0x08010dd1

08010ea8 <__sfp>:
 8010ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eaa:	4607      	mov	r7, r0
 8010eac:	f7ff ffac 	bl	8010e08 <__sfp_lock_acquire>
 8010eb0:	4b1e      	ldr	r3, [pc, #120]	; (8010f2c <__sfp+0x84>)
 8010eb2:	681e      	ldr	r6, [r3, #0]
 8010eb4:	69b3      	ldr	r3, [r6, #24]
 8010eb6:	b913      	cbnz	r3, 8010ebe <__sfp+0x16>
 8010eb8:	4630      	mov	r0, r6
 8010eba:	f7ff ffbd 	bl	8010e38 <__sinit>
 8010ebe:	3648      	adds	r6, #72	; 0x48
 8010ec0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010ec4:	3b01      	subs	r3, #1
 8010ec6:	d503      	bpl.n	8010ed0 <__sfp+0x28>
 8010ec8:	6833      	ldr	r3, [r6, #0]
 8010eca:	b30b      	cbz	r3, 8010f10 <__sfp+0x68>
 8010ecc:	6836      	ldr	r6, [r6, #0]
 8010ece:	e7f7      	b.n	8010ec0 <__sfp+0x18>
 8010ed0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010ed4:	b9d5      	cbnz	r5, 8010f0c <__sfp+0x64>
 8010ed6:	4b16      	ldr	r3, [pc, #88]	; (8010f30 <__sfp+0x88>)
 8010ed8:	60e3      	str	r3, [r4, #12]
 8010eda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010ede:	6665      	str	r5, [r4, #100]	; 0x64
 8010ee0:	f000 f847 	bl	8010f72 <__retarget_lock_init_recursive>
 8010ee4:	f7ff ff96 	bl	8010e14 <__sfp_lock_release>
 8010ee8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010eec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010ef0:	6025      	str	r5, [r4, #0]
 8010ef2:	61a5      	str	r5, [r4, #24]
 8010ef4:	2208      	movs	r2, #8
 8010ef6:	4629      	mov	r1, r5
 8010ef8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010efc:	f7fb fdfc 	bl	800caf8 <memset>
 8010f00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010f04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010f08:	4620      	mov	r0, r4
 8010f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f0c:	3468      	adds	r4, #104	; 0x68
 8010f0e:	e7d9      	b.n	8010ec4 <__sfp+0x1c>
 8010f10:	2104      	movs	r1, #4
 8010f12:	4638      	mov	r0, r7
 8010f14:	f7ff ff62 	bl	8010ddc <__sfmoreglue>
 8010f18:	4604      	mov	r4, r0
 8010f1a:	6030      	str	r0, [r6, #0]
 8010f1c:	2800      	cmp	r0, #0
 8010f1e:	d1d5      	bne.n	8010ecc <__sfp+0x24>
 8010f20:	f7ff ff78 	bl	8010e14 <__sfp_lock_release>
 8010f24:	230c      	movs	r3, #12
 8010f26:	603b      	str	r3, [r7, #0]
 8010f28:	e7ee      	b.n	8010f08 <__sfp+0x60>
 8010f2a:	bf00      	nop
 8010f2c:	08011528 	.word	0x08011528
 8010f30:	ffff0001 	.word	0xffff0001

08010f34 <_fwalk_reent>:
 8010f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f38:	4606      	mov	r6, r0
 8010f3a:	4688      	mov	r8, r1
 8010f3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010f40:	2700      	movs	r7, #0
 8010f42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010f46:	f1b9 0901 	subs.w	r9, r9, #1
 8010f4a:	d505      	bpl.n	8010f58 <_fwalk_reent+0x24>
 8010f4c:	6824      	ldr	r4, [r4, #0]
 8010f4e:	2c00      	cmp	r4, #0
 8010f50:	d1f7      	bne.n	8010f42 <_fwalk_reent+0xe>
 8010f52:	4638      	mov	r0, r7
 8010f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f58:	89ab      	ldrh	r3, [r5, #12]
 8010f5a:	2b01      	cmp	r3, #1
 8010f5c:	d907      	bls.n	8010f6e <_fwalk_reent+0x3a>
 8010f5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010f62:	3301      	adds	r3, #1
 8010f64:	d003      	beq.n	8010f6e <_fwalk_reent+0x3a>
 8010f66:	4629      	mov	r1, r5
 8010f68:	4630      	mov	r0, r6
 8010f6a:	47c0      	blx	r8
 8010f6c:	4307      	orrs	r7, r0
 8010f6e:	3568      	adds	r5, #104	; 0x68
 8010f70:	e7e9      	b.n	8010f46 <_fwalk_reent+0x12>

08010f72 <__retarget_lock_init_recursive>:
 8010f72:	4770      	bx	lr

08010f74 <__retarget_lock_acquire_recursive>:
 8010f74:	4770      	bx	lr

08010f76 <__retarget_lock_release_recursive>:
 8010f76:	4770      	bx	lr

08010f78 <__swhatbuf_r>:
 8010f78:	b570      	push	{r4, r5, r6, lr}
 8010f7a:	460e      	mov	r6, r1
 8010f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f80:	2900      	cmp	r1, #0
 8010f82:	b096      	sub	sp, #88	; 0x58
 8010f84:	4614      	mov	r4, r2
 8010f86:	461d      	mov	r5, r3
 8010f88:	da07      	bge.n	8010f9a <__swhatbuf_r+0x22>
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	602b      	str	r3, [r5, #0]
 8010f8e:	89b3      	ldrh	r3, [r6, #12]
 8010f90:	061a      	lsls	r2, r3, #24
 8010f92:	d410      	bmi.n	8010fb6 <__swhatbuf_r+0x3e>
 8010f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010f98:	e00e      	b.n	8010fb8 <__swhatbuf_r+0x40>
 8010f9a:	466a      	mov	r2, sp
 8010f9c:	f000 f902 	bl	80111a4 <_fstat_r>
 8010fa0:	2800      	cmp	r0, #0
 8010fa2:	dbf2      	blt.n	8010f8a <__swhatbuf_r+0x12>
 8010fa4:	9a01      	ldr	r2, [sp, #4]
 8010fa6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010faa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010fae:	425a      	negs	r2, r3
 8010fb0:	415a      	adcs	r2, r3
 8010fb2:	602a      	str	r2, [r5, #0]
 8010fb4:	e7ee      	b.n	8010f94 <__swhatbuf_r+0x1c>
 8010fb6:	2340      	movs	r3, #64	; 0x40
 8010fb8:	2000      	movs	r0, #0
 8010fba:	6023      	str	r3, [r4, #0]
 8010fbc:	b016      	add	sp, #88	; 0x58
 8010fbe:	bd70      	pop	{r4, r5, r6, pc}

08010fc0 <__smakebuf_r>:
 8010fc0:	898b      	ldrh	r3, [r1, #12]
 8010fc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010fc4:	079d      	lsls	r5, r3, #30
 8010fc6:	4606      	mov	r6, r0
 8010fc8:	460c      	mov	r4, r1
 8010fca:	d507      	bpl.n	8010fdc <__smakebuf_r+0x1c>
 8010fcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010fd0:	6023      	str	r3, [r4, #0]
 8010fd2:	6123      	str	r3, [r4, #16]
 8010fd4:	2301      	movs	r3, #1
 8010fd6:	6163      	str	r3, [r4, #20]
 8010fd8:	b002      	add	sp, #8
 8010fda:	bd70      	pop	{r4, r5, r6, pc}
 8010fdc:	ab01      	add	r3, sp, #4
 8010fde:	466a      	mov	r2, sp
 8010fe0:	f7ff ffca 	bl	8010f78 <__swhatbuf_r>
 8010fe4:	9900      	ldr	r1, [sp, #0]
 8010fe6:	4605      	mov	r5, r0
 8010fe8:	4630      	mov	r0, r6
 8010fea:	f7ff f97d 	bl	80102e8 <_malloc_r>
 8010fee:	b948      	cbnz	r0, 8011004 <__smakebuf_r+0x44>
 8010ff0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ff4:	059a      	lsls	r2, r3, #22
 8010ff6:	d4ef      	bmi.n	8010fd8 <__smakebuf_r+0x18>
 8010ff8:	f023 0303 	bic.w	r3, r3, #3
 8010ffc:	f043 0302 	orr.w	r3, r3, #2
 8011000:	81a3      	strh	r3, [r4, #12]
 8011002:	e7e3      	b.n	8010fcc <__smakebuf_r+0xc>
 8011004:	4b0d      	ldr	r3, [pc, #52]	; (801103c <__smakebuf_r+0x7c>)
 8011006:	62b3      	str	r3, [r6, #40]	; 0x28
 8011008:	89a3      	ldrh	r3, [r4, #12]
 801100a:	6020      	str	r0, [r4, #0]
 801100c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011010:	81a3      	strh	r3, [r4, #12]
 8011012:	9b00      	ldr	r3, [sp, #0]
 8011014:	6163      	str	r3, [r4, #20]
 8011016:	9b01      	ldr	r3, [sp, #4]
 8011018:	6120      	str	r0, [r4, #16]
 801101a:	b15b      	cbz	r3, 8011034 <__smakebuf_r+0x74>
 801101c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011020:	4630      	mov	r0, r6
 8011022:	f000 f8d1 	bl	80111c8 <_isatty_r>
 8011026:	b128      	cbz	r0, 8011034 <__smakebuf_r+0x74>
 8011028:	89a3      	ldrh	r3, [r4, #12]
 801102a:	f023 0303 	bic.w	r3, r3, #3
 801102e:	f043 0301 	orr.w	r3, r3, #1
 8011032:	81a3      	strh	r3, [r4, #12]
 8011034:	89a0      	ldrh	r0, [r4, #12]
 8011036:	4305      	orrs	r5, r0
 8011038:	81a5      	strh	r5, [r4, #12]
 801103a:	e7cd      	b.n	8010fd8 <__smakebuf_r+0x18>
 801103c:	08010dd1 	.word	0x08010dd1

08011040 <_malloc_usable_size_r>:
 8011040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011044:	1f18      	subs	r0, r3, #4
 8011046:	2b00      	cmp	r3, #0
 8011048:	bfbc      	itt	lt
 801104a:	580b      	ldrlt	r3, [r1, r0]
 801104c:	18c0      	addlt	r0, r0, r3
 801104e:	4770      	bx	lr

08011050 <_raise_r>:
 8011050:	291f      	cmp	r1, #31
 8011052:	b538      	push	{r3, r4, r5, lr}
 8011054:	4604      	mov	r4, r0
 8011056:	460d      	mov	r5, r1
 8011058:	d904      	bls.n	8011064 <_raise_r+0x14>
 801105a:	2316      	movs	r3, #22
 801105c:	6003      	str	r3, [r0, #0]
 801105e:	f04f 30ff 	mov.w	r0, #4294967295
 8011062:	bd38      	pop	{r3, r4, r5, pc}
 8011064:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011066:	b112      	cbz	r2, 801106e <_raise_r+0x1e>
 8011068:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801106c:	b94b      	cbnz	r3, 8011082 <_raise_r+0x32>
 801106e:	4620      	mov	r0, r4
 8011070:	f000 f830 	bl	80110d4 <_getpid_r>
 8011074:	462a      	mov	r2, r5
 8011076:	4601      	mov	r1, r0
 8011078:	4620      	mov	r0, r4
 801107a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801107e:	f000 b817 	b.w	80110b0 <_kill_r>
 8011082:	2b01      	cmp	r3, #1
 8011084:	d00a      	beq.n	801109c <_raise_r+0x4c>
 8011086:	1c59      	adds	r1, r3, #1
 8011088:	d103      	bne.n	8011092 <_raise_r+0x42>
 801108a:	2316      	movs	r3, #22
 801108c:	6003      	str	r3, [r0, #0]
 801108e:	2001      	movs	r0, #1
 8011090:	e7e7      	b.n	8011062 <_raise_r+0x12>
 8011092:	2400      	movs	r4, #0
 8011094:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011098:	4628      	mov	r0, r5
 801109a:	4798      	blx	r3
 801109c:	2000      	movs	r0, #0
 801109e:	e7e0      	b.n	8011062 <_raise_r+0x12>

080110a0 <raise>:
 80110a0:	4b02      	ldr	r3, [pc, #8]	; (80110ac <raise+0xc>)
 80110a2:	4601      	mov	r1, r0
 80110a4:	6818      	ldr	r0, [r3, #0]
 80110a6:	f7ff bfd3 	b.w	8011050 <_raise_r>
 80110aa:	bf00      	nop
 80110ac:	24000014 	.word	0x24000014

080110b0 <_kill_r>:
 80110b0:	b538      	push	{r3, r4, r5, lr}
 80110b2:	4d07      	ldr	r5, [pc, #28]	; (80110d0 <_kill_r+0x20>)
 80110b4:	2300      	movs	r3, #0
 80110b6:	4604      	mov	r4, r0
 80110b8:	4608      	mov	r0, r1
 80110ba:	4611      	mov	r1, r2
 80110bc:	602b      	str	r3, [r5, #0]
 80110be:	f7f0 fec7 	bl	8001e50 <_kill>
 80110c2:	1c43      	adds	r3, r0, #1
 80110c4:	d102      	bne.n	80110cc <_kill_r+0x1c>
 80110c6:	682b      	ldr	r3, [r5, #0]
 80110c8:	b103      	cbz	r3, 80110cc <_kill_r+0x1c>
 80110ca:	6023      	str	r3, [r4, #0]
 80110cc:	bd38      	pop	{r3, r4, r5, pc}
 80110ce:	bf00      	nop
 80110d0:	24005160 	.word	0x24005160

080110d4 <_getpid_r>:
 80110d4:	f7f0 beb4 	b.w	8001e40 <_getpid>

080110d8 <__sread>:
 80110d8:	b510      	push	{r4, lr}
 80110da:	460c      	mov	r4, r1
 80110dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80110e0:	f000 f894 	bl	801120c <_read_r>
 80110e4:	2800      	cmp	r0, #0
 80110e6:	bfab      	itete	ge
 80110e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80110ea:	89a3      	ldrhlt	r3, [r4, #12]
 80110ec:	181b      	addge	r3, r3, r0
 80110ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80110f2:	bfac      	ite	ge
 80110f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80110f6:	81a3      	strhlt	r3, [r4, #12]
 80110f8:	bd10      	pop	{r4, pc}

080110fa <__swrite>:
 80110fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110fe:	461f      	mov	r7, r3
 8011100:	898b      	ldrh	r3, [r1, #12]
 8011102:	05db      	lsls	r3, r3, #23
 8011104:	4605      	mov	r5, r0
 8011106:	460c      	mov	r4, r1
 8011108:	4616      	mov	r6, r2
 801110a:	d505      	bpl.n	8011118 <__swrite+0x1e>
 801110c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011110:	2302      	movs	r3, #2
 8011112:	2200      	movs	r2, #0
 8011114:	f000 f868 	bl	80111e8 <_lseek_r>
 8011118:	89a3      	ldrh	r3, [r4, #12]
 801111a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801111e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011122:	81a3      	strh	r3, [r4, #12]
 8011124:	4632      	mov	r2, r6
 8011126:	463b      	mov	r3, r7
 8011128:	4628      	mov	r0, r5
 801112a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801112e:	f000 b817 	b.w	8011160 <_write_r>

08011132 <__sseek>:
 8011132:	b510      	push	{r4, lr}
 8011134:	460c      	mov	r4, r1
 8011136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801113a:	f000 f855 	bl	80111e8 <_lseek_r>
 801113e:	1c43      	adds	r3, r0, #1
 8011140:	89a3      	ldrh	r3, [r4, #12]
 8011142:	bf15      	itete	ne
 8011144:	6560      	strne	r0, [r4, #84]	; 0x54
 8011146:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801114a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801114e:	81a3      	strheq	r3, [r4, #12]
 8011150:	bf18      	it	ne
 8011152:	81a3      	strhne	r3, [r4, #12]
 8011154:	bd10      	pop	{r4, pc}

08011156 <__sclose>:
 8011156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801115a:	f000 b813 	b.w	8011184 <_close_r>
	...

08011160 <_write_r>:
 8011160:	b538      	push	{r3, r4, r5, lr}
 8011162:	4d07      	ldr	r5, [pc, #28]	; (8011180 <_write_r+0x20>)
 8011164:	4604      	mov	r4, r0
 8011166:	4608      	mov	r0, r1
 8011168:	4611      	mov	r1, r2
 801116a:	2200      	movs	r2, #0
 801116c:	602a      	str	r2, [r5, #0]
 801116e:	461a      	mov	r2, r3
 8011170:	f7f0 fea5 	bl	8001ebe <_write>
 8011174:	1c43      	adds	r3, r0, #1
 8011176:	d102      	bne.n	801117e <_write_r+0x1e>
 8011178:	682b      	ldr	r3, [r5, #0]
 801117a:	b103      	cbz	r3, 801117e <_write_r+0x1e>
 801117c:	6023      	str	r3, [r4, #0]
 801117e:	bd38      	pop	{r3, r4, r5, pc}
 8011180:	24005160 	.word	0x24005160

08011184 <_close_r>:
 8011184:	b538      	push	{r3, r4, r5, lr}
 8011186:	4d06      	ldr	r5, [pc, #24]	; (80111a0 <_close_r+0x1c>)
 8011188:	2300      	movs	r3, #0
 801118a:	4604      	mov	r4, r0
 801118c:	4608      	mov	r0, r1
 801118e:	602b      	str	r3, [r5, #0]
 8011190:	f7f0 feb1 	bl	8001ef6 <_close>
 8011194:	1c43      	adds	r3, r0, #1
 8011196:	d102      	bne.n	801119e <_close_r+0x1a>
 8011198:	682b      	ldr	r3, [r5, #0]
 801119a:	b103      	cbz	r3, 801119e <_close_r+0x1a>
 801119c:	6023      	str	r3, [r4, #0]
 801119e:	bd38      	pop	{r3, r4, r5, pc}
 80111a0:	24005160 	.word	0x24005160

080111a4 <_fstat_r>:
 80111a4:	b538      	push	{r3, r4, r5, lr}
 80111a6:	4d07      	ldr	r5, [pc, #28]	; (80111c4 <_fstat_r+0x20>)
 80111a8:	2300      	movs	r3, #0
 80111aa:	4604      	mov	r4, r0
 80111ac:	4608      	mov	r0, r1
 80111ae:	4611      	mov	r1, r2
 80111b0:	602b      	str	r3, [r5, #0]
 80111b2:	f7f0 feac 	bl	8001f0e <_fstat>
 80111b6:	1c43      	adds	r3, r0, #1
 80111b8:	d102      	bne.n	80111c0 <_fstat_r+0x1c>
 80111ba:	682b      	ldr	r3, [r5, #0]
 80111bc:	b103      	cbz	r3, 80111c0 <_fstat_r+0x1c>
 80111be:	6023      	str	r3, [r4, #0]
 80111c0:	bd38      	pop	{r3, r4, r5, pc}
 80111c2:	bf00      	nop
 80111c4:	24005160 	.word	0x24005160

080111c8 <_isatty_r>:
 80111c8:	b538      	push	{r3, r4, r5, lr}
 80111ca:	4d06      	ldr	r5, [pc, #24]	; (80111e4 <_isatty_r+0x1c>)
 80111cc:	2300      	movs	r3, #0
 80111ce:	4604      	mov	r4, r0
 80111d0:	4608      	mov	r0, r1
 80111d2:	602b      	str	r3, [r5, #0]
 80111d4:	f7f0 feab 	bl	8001f2e <_isatty>
 80111d8:	1c43      	adds	r3, r0, #1
 80111da:	d102      	bne.n	80111e2 <_isatty_r+0x1a>
 80111dc:	682b      	ldr	r3, [r5, #0]
 80111de:	b103      	cbz	r3, 80111e2 <_isatty_r+0x1a>
 80111e0:	6023      	str	r3, [r4, #0]
 80111e2:	bd38      	pop	{r3, r4, r5, pc}
 80111e4:	24005160 	.word	0x24005160

080111e8 <_lseek_r>:
 80111e8:	b538      	push	{r3, r4, r5, lr}
 80111ea:	4d07      	ldr	r5, [pc, #28]	; (8011208 <_lseek_r+0x20>)
 80111ec:	4604      	mov	r4, r0
 80111ee:	4608      	mov	r0, r1
 80111f0:	4611      	mov	r1, r2
 80111f2:	2200      	movs	r2, #0
 80111f4:	602a      	str	r2, [r5, #0]
 80111f6:	461a      	mov	r2, r3
 80111f8:	f7f0 fea4 	bl	8001f44 <_lseek>
 80111fc:	1c43      	adds	r3, r0, #1
 80111fe:	d102      	bne.n	8011206 <_lseek_r+0x1e>
 8011200:	682b      	ldr	r3, [r5, #0]
 8011202:	b103      	cbz	r3, 8011206 <_lseek_r+0x1e>
 8011204:	6023      	str	r3, [r4, #0]
 8011206:	bd38      	pop	{r3, r4, r5, pc}
 8011208:	24005160 	.word	0x24005160

0801120c <_read_r>:
 801120c:	b538      	push	{r3, r4, r5, lr}
 801120e:	4d07      	ldr	r5, [pc, #28]	; (801122c <_read_r+0x20>)
 8011210:	4604      	mov	r4, r0
 8011212:	4608      	mov	r0, r1
 8011214:	4611      	mov	r1, r2
 8011216:	2200      	movs	r2, #0
 8011218:	602a      	str	r2, [r5, #0]
 801121a:	461a      	mov	r2, r3
 801121c:	f7f0 fe32 	bl	8001e84 <_read>
 8011220:	1c43      	adds	r3, r0, #1
 8011222:	d102      	bne.n	801122a <_read_r+0x1e>
 8011224:	682b      	ldr	r3, [r5, #0]
 8011226:	b103      	cbz	r3, 801122a <_read_r+0x1e>
 8011228:	6023      	str	r3, [r4, #0]
 801122a:	bd38      	pop	{r3, r4, r5, pc}
 801122c:	24005160 	.word	0x24005160

08011230 <_init>:
 8011230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011232:	bf00      	nop
 8011234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011236:	bc08      	pop	{r3}
 8011238:	469e      	mov	lr, r3
 801123a:	4770      	bx	lr

0801123c <_fini>:
 801123c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801123e:	bf00      	nop
 8011240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011242:	bc08      	pop	{r3}
 8011244:	469e      	mov	lr, r3
 8011246:	4770      	bx	lr
